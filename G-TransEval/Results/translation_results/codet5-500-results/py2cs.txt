int greatest_common_divisor ( int a , int b ) { if ( a == 0 b == 0 ) return a + b  ; if ( a == b ) return a ; if ( a > b ) return greatest_common_divisor ( a % b , b ) ; else return greatest_common_divisor ( a , b % a ) ; }
int largest_divisor ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) return n / i ; } return 1 ; }
bool is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 2 ; k < n ; k ++ ) if ( n % k == 0 ) return false ; return true ; }
int fizz_buzz ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 11 == 0 i % 13 == 0 ) { int q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) count ++ ; } q /= 10 ; } } return count ; }
int prime_fib ( int n ) { int f0 = 0 , f1 = 1 ; while ( n > 0 ) { int p = f0 + f1 ; bool is_prime = p >= 2 ; for ( int i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { n -- ; } f0 = f1  ; f1 = p ; } return f1  ; }
float triangle_area ( float a , float h ) { return a * h / 2 ; }
int modp ( int n , int p ) { int ret = 1 ; for ( int i = 0 ; i < n ; i ++ ) ret = ( ret * 2 ) % p ; return ret ; }
int add ( int x , int y ) { return x + y ; }
int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 1 ; return fib ( n - 1 ) + fib ( n - 2 ) ; }
int largest_prime_factor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) { while ( n % i == 0 && n > i ) n /= i ; } return n ; }
int sum_to_n ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) result += i ; return result ; }
int fibfib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 0 ; if ( n == 2 ) return 1 ; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
bool is_multiply_prime ( int a ) { int num = 0 ; for ( int i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) { a /= i ; num ++ ; } } return num == 3 ; }
bool is_simple_power ( int x , int n ) { if ( n == 1 ) return x == 1 ; int power = 1 ; while ( power < x ) power *= n ; return power == x ; }
int choose_num ( int x , int y ) { if ( x > y ) return - 1 ; if ( y % 2 == 0 ) return y ; if ( x == y ) return - 1 ; return y - 1 ; }
bool is_equal_to_sum_even ( int n ) { return n % 2 == 0 && n >= 8 ; }
int special_factorial ( int n ) { int fact = 1 , special_fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; special_fact *= fact  ; } return special_fact  ; }
int x_or_y ( int n , int x , int y ) { bool is_prime = n >= 2 ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) return x ; return y ; }
bool right_angle_triangle ( int a , int b , int c ) { return a * a == b * b + c * c || b * b == a * a + c * c ; }
int fast_pow ( int n , int k ) { if ( k == 0 ) return 1 ; int temp = fast_pow ( n , k / 2 ) ; if ( k % 2 == 0 ) return temp * temp ; else return n * temp * temp ; }
bool is_palin ( string s1 ) { int l = s1 . Length / 2 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s1 [ i ] != s1 [ s1 . Length - i - 1 ] ) { return false ; } } return true ; }
int find_sum ( int n ) { int ans = 0 , temp = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( temp < n ) break ; temp = i - 1 ; int num = 1 ; while ( temp < n ) { if ( temp + i <= n ) ans += i * num  ; else ans += ( n - temp ) * num ; temp += i ; num ++ ; } } return ans ; }
int get_next_gap ( int gap ) { gap = gap * 10 / 13 ; if ( gap < 1 ) return 1 ; return gap ; }
int count_non_decreasing ( int n ) { int k = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count /= i ; } return count ; }
int power ( int x , int y ) { if ( y == 0 ) return 1 ; else if ( y % 2 == 0 ) return power ( x , y / 2 ) * power ( x , y / 2 ) ; else return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; }
int power ( int x , int y ) { if ( y == 0 ) return 1 ; int temp = power ( x , y / 2 ) ; if ( y % 2 == 0 ) return temp * temp ; else { if ( y > 0 ) return x * temp * temp ; else return temp * temp / x ; } } }
int multiply ( int x , int y ) { if ( y == 0 ) return 0 ; if ( y > 0 ) return x + multiply ( x , y - 1 ) ; if ( y < 0 ) return - multiply ( x , - y ) ; return 0 ; }
int smallest ( int x , int y , int z ) { if ( ! y / x ) return y ; return x if ( ! x / z ) else z  ; }
bool is_power_of_four ( int n ) { if ( n == 0 ) return false ; while ( n != 1 ) { if ( n % 4 != 0 ) return false ; n /= 4 ; } return true ; }
int mod_inverse ( int a , int m ) { int m0 = m â‰¤ 1 ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t  ; t = x0 ; x0 = x1 - q * x0 ; x1 = t  ; } if ( x1 < 0 ) x1 += m0 ; return x1 ; }
int cnt_rotations ( string s , int n ) { string s2 = s + s ; int [ ] pre = new int [ 2 * n ] ; for ( int i = 0 ; i < n ; i ++ ) pre [ i ] = 0 ; for ( int i = 2 * n ; i < n ; i ++ ) { if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; if ( s2 [ i ] == 'a' s2 [ i ] == 'e' s2 [ i ] == 'i' s2 [ i ] == 'o' s2 [ i ] == 'u' ) pre [ i ] ++ ; } int ans = 0 ; for ( int i = n - 1 ; i <= 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) x1 -= pre [ l ] ; r = i - n / 2 ; int left = pre [ r ]  ; if ( l >= 0 ) left -= pre [ l ] ; int right = x1 - left ; if ( left > right ) ans ++ ; } return ans ; }
int binomial_coeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; i ++ ) res *= n - i ; res /= i + 1 ; return res ; }
bool is_prefix ( String temp , String s ) { if ( temp . Length < s . Length ) return false ; else { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] != temp [ i ] ) return false ; } return true ; } }
string lexicographically_smallest_string ( string s , int n ) { int last_ze = - 1 ; string ans = "" ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { last_ze = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i <= last_ze && s [ i ] == '0' ) { ans += s [ i ] ; } else if ( i > last_ze ) ans += s [ i ]  ; } return ans ; }
int calculate_max ( int n , int m , int k ) { int ans = - 1 ; int low = 0 , high = m ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int val = 0 ; int l = k - 1 ; int r = n - k ; val += mid  ; if ( mid >= l ) val += l * ( 2 * mid - l - 1 ) / 2 ; else val += mid * ( mid - 1 ) / 2 + ( l - mid ) ; if ( mid >= r ) val += r * ( 2 * mid - r - 1 ) / 2 ; else val += mid * ( mid - 1 ) / 2 + ( r - mid ) ; if ( val <= m ) { ans = Math . Max ( ans , mid ) ; low = mid + 1 ; } else high = mid - 1 ; } } return ans ; }
int find_length ( String s , int i , int j ) { int required = i ; int length = 0 ; foreach ( String curr in s ) { if ( curr == required ) length ++ ; if ( required == i ) required = j ; else required = i ; } return length ; }
bool check_reverse ( int left_sum , int right_sum ) { int rev = 0 ; int temp = right_sum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp /= 10 ; } if ( rev == left_sum ) return true ; return false ; }
bool is_composite ( int n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return false ; } if ( n % 2 == 0 n % 3 == 0 ) { return true ; } for ( int i = 5 ; i * i <= n ; i += 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return true ; } } return false ; }
int min_deletion ( string s ) { int n = s . Length ; int first_idx1 = - 1 , last_idx0 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { first_idx1 = i  ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { last_idx0 = i  ; break ; } } if ( first_idx1 == - 1 last_idx0 == - 1 ) return 0 ; int count1 = 0 , count0 = 0 ; for ( int i = 0 ; i < last_idx0 ; i ++ ) { if ( s [ i ] == '1' ) count1 ++ ; } for ( int i = first_idx1 + 1 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) count0 ++ ; } return Math . Min ( count0 , count1 ) ; }
int min_steps ( string s , int n ) { int cost = 0 ; int [ ] f = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int curr_ele = s [ i ] - 'a' ; int smaller = 0 ; for ( int j = 0 ; j <= curr_ele ; j ++ ) { if ( f [ j ] != 0 ) smaller += f [ j ] ; } if ( smaller == 0 ) cost += i + 1 ; else cost += i - smaller + 1 ; } return cost ; }
int number_of_ways ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 1 ; b < n ; b ++ ) { int c = n - ( a + b ) ; if ( a < b + c && b < a + c && c < a + b ) count ++ ; } } return count ; }
int slope_of_num ( int [ ] num , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) slope ++ ; else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) slope ++ ; } return slope ; }
int middle_of_three ( int a , int b , int c ) { int x = a - b , y = b - c ; int z = a - c ; if ( x * y > 0 ) return b ; else if ( x * z > 0 ) return c ; else return a ; }
int count_max_set_bits ( int left , int right ) { while ( ( left | ( left + 1 ) ) <= right ) left |= left + 1 ; return left ; }
int find_s ( int s ) { int l = 1 , r = s / 2 + 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) return mid ; else if ( sum > s ) { r = mid - 1 ; } else l = mid + 1 ; } } return - 1 ; }
bool check ( string s ) { int min = int . MaxValue ; int max = - int . MinValue ; int sum = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { int ascii = ( int ) s [ i ] ; if ( ascii < 96 ascii > 122 ) return false ; sum += ascii  ; if ( min > ascii ) min = ascii ; if ( max < ascii ) max = ascii ; } min -- ; e_sum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == e_sum ; }
int minimum_possible_product ( int k ) { int res = 1 ; int r = ( 1 << k ) - 1 ; for ( int i = 0 ; i < k ; i ++ ) res *= r - 1 ; res *= r  ; return res ; }
int find_in_grid ( int i , int j ) { if ( i == j ) return i * i - ( i - 1 ) ; else if ( i > j ) { if ( i % 2 == 0 ) return i * i - ( j - 1 ) ; else return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } else { return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; } }
int find_min_operations_req_emp_str ( string s ) { int cnt_one = 0 , cnt_zero = 0 ; int n = s . Length ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '0' ) { if ( cnt_one > 0 ) cnt_one = cnt_one - 1 ; ; cnt_zero = cnt_zero + 1 ; } else { if ( cnt_zero > 0 ) cnt_zero = cnt_zero - 1 ; ; cnt_one = cnt_one + 1 ; } } return cnt_one + cnt_zero ; }
bool is_reachable ( int x1 , int y1 , int x2 , int y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) { x2 %= y2 ; } else { y2 %= x2 ; } } if ( x2 == x1 ) return y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ; else if ( y2 == y1 ) return x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ; else return false ; }
int find_max_soln ( int n , int x , int y ) { int ans = Int32 . MinValue ; for ( int k = 0 ; k <= n ; k ++ ) { if ( k % x == y ) ans = Math . Max ( ans , k ) ; } return ans >= 0 && ans <= n ; }
int number_of_pairs ( int n ) { int count = 0 ; for ( int i = 1 , j = n - 1 ; i < j ; i ++ , j -- ) { if ( i + j ) == n ) count ++ ; } return count ; }
int min_changes ( string s , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( s [ 0 ] != '1' ) { count ++ ; ones ++ ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s [ i ] == '0' ) zeros ++ ; else ones ++ ; if ( zeros > ones ) zeros -- ; ones ++ ; count ++ ; } return count ; }
int k_visible_from_left ( int n , int k ) { if ( n == k ) return 1 ; if ( k == 1 ) { int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) ans *= i ; return ans ; } return k_visible_from_left ( n - 1 , k - 1 ) + ( n - 1 ) * k_visible_from_left ( n - 1 , k ) ; }
int find ( int n , int sum ) { if ( sum > 6 * n sum < n ) { return 0 ; } if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) { return 1.0 / 6 ; } else return 0 ; } int s = 0 ; for ( int i = 1 ; i < 7 ; i ++ ) s += find ( n - 1 , sum - i ) / 6 ; return s ; }
int bin_coff ( int n , int r ) { int val = 1 ; if ( r > ( n - r ) ) r = n - r ; for ( int i = 0 ; i < r ; i ++ ) { val *= n - i  ; val /= i + 1 ; } return val ; }
int get_mask ( int val ) { int mask = 0 ; if ( val == 0 ) return 1 ; while ( val != 0 ) { int d = val % 10 ; mask |= ( 1 << d ) ; val /= 10 ; } return mask ; }
int ways_to_k_adjacent_set_bits ( int n , int k , int current_index , int adjacent_set_bits , int last_bit ) { if ( current_index == n ) { if ( adjacent_set_bits == k ) { return 1 ; } return 0 ; } int no_of_ways = 0 ; if ( last_bit == 1 ) { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits + 1 , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } else if ( last_bit != 1 ) { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } return no_of_ways ; }
int check_func ( int i , int j , char [ ] str ) { if ( str [ i ] == '(' && str [ j ] == ')' ) return 1 ; if ( str [ i ] == '?' && str [ j ] == '?' ) return 1 ; if ( str [ i ] == '[' && str [ j ] == ']' ) return 1 ; if ( str [ i ] == '{' && str [ j ] == '}' ) return 1 ; if ( str [ i ] == '{' && str [ j ] == '?' ) return 1 ; if ( str [ i ] == '{' && str [ j ] == '?' ) return 1 ; if ( str [ i ] == '{' && str [ j ] == '}' ) return 1 ; if ( str [ i ] == '{' && str [ j ] == '?' ) return 1 ; if ( str [ i ] == '?' && str [ j ] == '}' ) return 1 ; return 0 ; }
int find_golomb ( int n ) { if ( n == 1 ) return 1 ; return 1 + find_golomb ( n - find_golomb ( n - 1 ) ) ; }
bool all_ones ( string s , int n ) { int co = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) co += 1 if ( s [ i ] == '1' ) co ++ ; return co == n ; }
int pad ( int n ) { int p_prev_prev , p_prev , p_curr , p_next ; p_prev_prev = 1 , p_prev = 1 , p_curr = 1 , p_next = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { p_next = p_prev_prev + p_prev ; p_prev_prev = p_prev  ; p_prev = p_curr ; p_curr = p_next ; } return p_next ; }
int odd_length_palindrome ( int k ) { int palin = k ; k = k / 10 ; while ( k > 0 ) { int rev = k % 10 ; palin = palin * 10 + rev ; k /= 10 ; } return palin ; }
string change_string ( string s0 ) { string s = new string ( s0 ) ; int n = s0 . Length ; if ( s [ 0 ] == '?' ) { s [ 0 ] = 'a' ; if ( s [ 0 ] == s [ 1 ] ) { s [ 0 ] = ( char ) ( s0 [ 0 ] + 1 ) ; } } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == '?' ) { s [ i ] = 'a' ; if ( s [ i ] == s [ i - 1 ] ) { s [ i ] = ( char ) ( s [ i ] + 1 ) ; } if ( s [ i ] == s [ i + 1 ] ) { s [ i ] = ( char ) ( s [ i ] + 1 ) ; } } if ( s [ n - 1 ] == '?' ) { s [ n - 1 ] = 'a' ; if ( s [ n - 1 ] == s [ n - 2 ] ) { s [ n - 1 ] = ( char ) ( s [ n - 1 ] + 1 ) ; } } return s0 . ToString ( ) ; }
int total_hamming_distance ( int n ) { int i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + n / i ; i = i * 2 ; } return sum ; }
int check_bitonic ( string s ) { int i , j ; i = 1 ; for ( i = 1 ; i < s . Length ; i ++ ) { if ( s [ i ] > s [ i - 1 ] ) continue ; if ( s [ i ] <= s [ i - 1 ] ) break ; } if ( i == s . Length - 1 ) return 1 ; j = i + 1 ; for ( j = i + 1 ; j < s . Length ; j ++ ) { if ( s [ j ] < s [ j - 1 ] ) continue ; if ( s [ j ] >= s [ j - 1 ] ) break ; } i = j ; if ( i != s . Length - 1 ) return 0 ; return 1 ; }
bool ends_with ( String str , String pat ) { int pat_len = pat . Length ; int str_len = str . Length ; if ( pat_len > str_len ) return false ; pat_len -- ; str_len -- ; while ( pat_len >= 0 ) { if ( pat [ pat_len ] != str [ str_len ] ) return false ; pat_len -- ; str_len -- ; } return true ; }
int get_sum ( int n , int d ) { if ( n < d ) return 0 ; while ( n % 10 != d ) n -- ; int k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
int balanced_string_by_swapping ( String s ) { int unbalanced_pair = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( unbalanced_pair > 0 && s [ i ] == ']' ) unbalanced_pair -- ; else if ( s [ i ] == '[' ) unbalanced_pair ++ ; } return ( unbalanced_pair + 1 ) / 2 ; }
int compute_hash ( string s ) { int p = 31 ; int mod = ( int ) 10 * 9 + 7 ; int hash_val = 0 ; int mul = 1 ; for ( char ch = 0 ; ch <= 'z' ; ch ++ ) { hash_val = ( hash_val + ( ch - 'a' + 1 ) * mul ) % mod  ; mul = mul * p % mod  ; } return hash_val ; }
int count_of_substring_with_only_ones ( String s ) { int res = 0 , count = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { count ++ ; if ( s [ i ] == '1' ) count ++ ; res = res + count ; } return res ; }
int composite ( int n ) { int flag = 0 ; int c = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) c += 1 ; } if ( c >= 3 ) flag = 1 ; return flag ; }
bool is_div_by_six ( String s , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += ( s [ i ] - 'a' + 1 ) ; } if ( sum % 3 != 0 ) return false ; int last_digit = ( s [ n - 1 ] - 'a' + 1 ) % 10 ; if ( last_digit % 2 != 0 ) return false ; return true ; }
bool is_redundant_braces ( string s1 ) { int a = 0 , b = 0 ; for ( int i = 0 ; i < s1 . Length ; i ++ ) { if ( s1 [ i ] == '(' && s1 [ i + 2 ] == ')' ) return true ; if ( s1 [ i ] == '*' s1 [ i ] == '+' s1 [ i ] == '-' s1 [ i ] == '/' ) a ++ ; if ( s1 [ i ] == '(' ) b ++ ; } if ( b > a ) return true ; return false ; }
int count_sub_str ( string s , int n ) { int count = 0 ; int i = 0 ; while ( i < ( n - 2 ) ) { if ( s [ i ] == '0' && s [ i + 1 ] == '1' && s [ i + 2 ] == '0' ) count ++ ; else if ( s [ i ] == '1' && s [ i + 1 ] == '0' && s [ i + 2 ] == '1' ) count ++ ; i += 3 ; else i ++ ; } return count ; }
int prefix_occurrences ( String s ) { char c = s [ 0 ] ; int count_c = 0 ; for ( int i = 1 ; i < s . Length ; i ++ ) { if ( s [ i ] == c ) count_c ++ ; } return count_c ; }
bool is_valid ( String s , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( s [ i ] == s [ i - 1 ] ) return false ; } return true ; }
int count ( String s , int k ) { int n = s . Length ; int d = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d += ( int ) s [ i ] ; } if ( d % k == 0 ) count ++ ; for ( int i = k ; i < n ; i ++ ) { int prev = s [ i - k ] ; d -= prev ; d += ( int ) s [ i ] ; if ( d % k == 0 ) count ++ ; } return count ; }
int find_substring_count ( String s ) { int result = 0 ; int n = s . Length ; int i = 0 ; while ( i < n - 1 ) { if ( s [ i ] == '1' ) result ++ ; while ( i < n - 1 && s [ i ] == '2' ) i ++ ; } return result ; }
bool find ( string s1 , string s2 ) { int len1 = s1 . Length ; int len2 = s2 . Length ; if ( len1 != len2 ) return false ; int [ ] d = new int [ len1 ] ; d [ 0 ] = ( int ) s2 [ 0 ] - ( int ) s1 [ 0 ] ; for ( int i = 1 ; i < len1 ; i ++ ) { if ( s1 [ i ] > s2 [ i ] ) return false ; else d [ i ] = ( int ) s2 [ i ] - ( int ) s1 [ i ] ; } for ( int i = 0 ; i < len1 - 1 ; i ++ ) if ( d [ i ] < d [ i + 1 ] ) return false ; return true ; }
bool is_in_given_base ( String s , int bas ) { if ( bas > 16 ) return false ; else if ( bas <= 10 ) { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( ( ( int ) s [ i ] >= '0' && ( int ) s [ i ] < ( int ) '0' + bas ) ) return false ; } } else { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( ( int ) s [ i ] >= '0' && ( int ) s [ i ] < ( int ) '0' + bas ) ) return false ; } } return true ; }
int count_non_empty_substr ( String s ) { int n = s . Length ; return n * ( n + 1 ) / 2 ; }
int even_decimal_value ( string s , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimal_value = 0 , power_of_2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimal_value += ( s [ k ] - '0' ) * power_of_2 ; power_of_2 *= 2 ; } if ( decimal_value % 2 == 0 ) result ++ ; } } return result ; }
int calculate ( string s ) { int ans = 6 ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { for ( int k = 0 ; k < 10 ; k ++ ) { for ( int m = 0 ; m < 10 ; m ++ ) { int c = 0 ; if ( i + j + k == l + m + n ) { c = 0 ; if ( i != s [ 0 ] - '0' ) c ++ ; if ( j != s [ 1 ] - '0' ) c ++ ; if ( k != s [ 2 ] - '0' ) c ++ ; if ( l != s [ 3 ] - '0' ) c ++ ; if ( m != s [ 4 ] - '0' ) c ++ ; if ( n != s [ 5 ] - '0' ) c ++ ; if ( c < ans ) ans = c ; } } } } return ans ; }
int xor_zero ( string s ) { int one_count = 0 , zero_count = 0 ; int n = s . Length ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) one_count ++ ; else zero_count ++ ; } if ( one_count % 2 == 0 ) return zero_count  ; return one_count ; }
int even_length ( string n ) { int res = n ; for ( int j = n . Length - 1 ; j >= 0 ; j -- ) res += n [ j ] ; return res ; }
int count_substring_with_equal_ends ( String s ) { int result = 0 ; int n = s . Length ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( s [ i ] == s [ j ] ) result ++ ; } } return result ; }
double normal_slope ( double a , double b , double x1 , double y1 ) { double g = a / 2 ; double f = b / 2 ; if ( g - x1 == 0 ) return - 1 ; double slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) return - 2 ; return slope ; }
bool orthogonality ( float x1 , float y1 , float x2 , float y2 , float r1 , float r2 ) { float dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) return true ; else return false ; }
int find_area_shaded ( int a ) { int sq_area = a * a ; int semi_circle_area = ( 3.14f * ( a * a ) / 8 ) ; int shaded_area = 4 * semi_circle_area - sq_area  ; return shaded_area ; }
int factorial ( int a , int b ) { int res = 1 ; for ( int i = 1 ; i <= a + b ; i ++ ) res = res * i ; for ( int i = 1 ; i <= a ; i ++ ) res = res / i ; for ( int i = 1 ; i <= b ; i ++ ) res = res / i ; return res ; }
int factor_tree ( int n ) { int height = 0 ; while ( n > 1 ) { bool flag = false ; for ( int i = 2 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( flag ) break ; } return height ; }
string find_if_possible ( int n , int s , int x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) { return "Yes" ; } if ( n == 1 ) { if ( s == x ) return "Yes" ; else return "No" ; } } if ( n == 2 ) { int c = ( s - x ) / 2 ; int a = c ; int b = c ; a = a + x  ; if ( a ^ b ) == x ) return "Yes" ; else return "No" ; } else return "No" ; }
int maximum_triplet_xor ( int a , int b , int c ) { int ans = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int cur = 1 << i ; if ( a >= cur ) { ans += cur ; a -- ; } else if ( b >= cur ) { ans += cur ; b -- ; } else if ( c >= cur ) { ans += cur ; c -= cur ; } } return ans ; }
int item_type ( int n ) { int count = 0 ; int day = 1 ; while ( count + day * ( day + 1 ) / 2 < n ) { count += day * ( day + 1 ) / 2 ; day ++ ; } for ( int type = day ; type >= 0 ; type -- ) { count += type  ; if ( count >= n ) return type ; } return 0 ; }
int max_gcd_in_range ( int l , int r ) { int ans = 1 ; for ( int z = r ; z >= l ; z -- ) { if ( r / z - ( l - 1 ) / z > 1 ) { ans = z ; break ; } } return ans ; }
int sum_of_digits ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += ( n % 10 ) ; n = n / 10 ; } return sum ; }
bool is_rep_unit_num ( int n , int b ) { int length = 0 ; int count_one = 0 ; while ( n != 0 ) { int r = n % b ; length ++ ; if ( r == 1 ) count_one ++ ; n = n / b ; } return count_one >= 3 && count_one == length ; }
bool is_straigh_line_num ( int n ) { if ( n <= 99 ) return false ; String s = n . ToString ( ) ; int d = ( int ) s [ 1 ] - ( int ) s [ 0 ] ; for ( int i = 2 ; i < s . Length ; i ++ ) { if ( s [ i ] - ( int ) s [ i - 1 ] != d ) return false ; } return true ; }
int get_count ( int d , int n ) { int no = n / d ; int result = no ; for ( int p = 2 ; p * p <= no ; p ++ ) { if ( no % p == 0 ) { while ( no % p == 0 ) no /= p ; result -= result / p ; } } if ( no > 1 ) result -= result / no ; return result ; }
bool is_even_parity ( int x ) { int parity = 0 ; while ( x != 0 ) { if ( ( x & 1 ) > 0 ) parity += 1 ; x = x >> 1 ; } if ( parity % 2 == 0 ) return true ; else return false ; }
int is_perfect ( int n ) { int sum = 1  ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i > n ) break ; } if ( n % i == 0 ) { if ( i * i != n ) sum = sum + i + n / i ; else sum = sum + i ; } } if ( sum == n && n != 1 ) return n ; return 0 ; }
int log_a_to_base_b ( int a , int b ) { return 1 + log_a_to_base_b ( a / b , b ) if ( a > ( b - 1 ) ) return 1 + log_a_to_base_b ( a / b , b ) ; }
int using_binary_search ( int start , int end , int n , int s ) { if ( start >= end ) return start ; int mid = start + ( end - start ) / 2 ; int total_sum = ( n * ( n + 1 ) ) / 2 ; int mid_sum = ( mid * ( mid + 1 ) ) / 2 ; if ( total_sum - mid_sum <= s ) return using_binary_search ( start , mid , n , s ) ; return using_binary_search ( mid + 1 , end , n , s ) ; }
string min_int ( string s ) { string s1 = new string ( s ) ; for ( int i = 0 ; i < s1 . Length ; i ++ ) { if ( s1 [ i ] >= '5' ) { s1 [ i ] = ( char ) ( '9' - s1 [ i ] ) + ( int ) '0' ) ; } } if ( s1 [ 0 ] == '0' ) s1 [ 0 ] = '9' ; return s1 . ToString ( ) ; }
int count_triplets ( int a , int b , int c ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { for ( int k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) { ans ++ ; } } } } return ans ; }
bool topsy_turvy ( string s ) { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == '2' s [ i ] == '4' s [ i ] == '5' s [ i ] == '6' s [ i ] == '7' s [ i ] == '9' ) return false ; } return true ; }
int sum_of_last_dig ( int n , int m ) { int sum = 0 ; int k = n / m ; int [ ] arr = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ]  ; int rem = k % 10 ; int ans = k / 10 * sum ; for ( int i = 0 ; i < rem ; i ++ ) ans += arr [ i ] ; return ans ; }
int total_pay ( int total_items , int price_of_one_item , int n , int m ) { int free_items = 0 , actual = 0 ; free_items = total_items / ( n + m ) ; actual = total_items - free_items ; int amount = 0 ; return amount ; }
int min_operations ( int x , int y , int p , int q ) { if ( y % x != 0 ) return - 1 ; int d = y / x ; int a = 0 ; while ( d % p == 0 ) d /= p ; a ++ ; int b = 0 ; while ( d % q == 0 ) d /= q ; b ++ ; if ( d != 1 ) return - 1 ; return a + b ; }
bool is_mersenne ( int n ) { while ( n != 0 ) { int r = n % 2 ; if ( r == 0 ) return false ; n /= 2 ; } return true ; }
int find_third_digit ( int n ) { if ( n < 3 ) return 0 ; return 1 if ( ( n & 1 ) == 1 ) return 6 ; }
bool is_odd_length ( int num ) { int count = 0 ; while ( num > 0 ) { num = num / 10 ; count ++ ; } if ( count % 2 != 0 ) return true ; return false ; }
bool check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) count ++ ; } return count > 1 ; }
long bytes ( int kilobytes ) { long b = 0 ; b = kilobytes * 1024 ; return b ; }
int octahedral_num ( int n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
string check_equal ( string s1 ) { for ( int i = 0 ; i < s1 . Length ; i ++ ) { if ( s1 [ i ] != '1' && s1 [ i ] != '0' && s1 [ i ] != '8' ) { return "No" ; } } int start = 0 ; int end = s1 . Length - 1 ; while ( start < end ) { if ( s1 [ start ] != s1 [ end ] ) { return "No" ; } start ++ ; end -- ; } return "Yes" ; }
bool is_undulating ( string n ) { if ( n . Length <= 2 ) return false ; for ( int i = 2 ; i < n . Length ; i ++ ) if ( n [ i - 2 ] != n [ i ] ) return false ; return true ; }
int first_digit ( int n ) { while ( n >= 10 ) { n /= 10 ; } return n ; }
int count_digit ( int n ) { if ( n == 0 ) return 0 ; return 1 + count_digit ( n / 10 ) ; }
bool is_divisible_by_5 ( String s ) { int n = s . Length ; return ( s [ n - 1 ] == '0' s [ n - 1 ] == '5' ) ; }
int inv ( int a , int m ) { int m0 = m / 2 ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t  ; t = x0 ; x0 = x1 - q * x0 ; x1 = t  ; } if ( x1 < 0 ) x1 = x1 + m0 ; return x1 ; }
bool only_first_and_last_are_set ( int n ) { if ( n == 1 ) return true ; if ( n == 2 ) return false ; return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
int divide ( int dividend , int divisor ) { int sign = - 1 ; if ( ( dividend < 0 ) ^ ( divisor < 0 ) ) else 1 ; dividend = Math . Abs ( dividend ) ; divisor = Math . Abs ( divisor ) ; int quotient = 0 , temp = 0 ; for ( int i = 31 ; i >= 0 ; i -- ) { if ( temp + ( divisor << i ) <= dividend ) { temp += divisor << i ; quotient |= 1 << i ; } } if ( sign == - 1 ) quotient = - quotient  ; return quotient ; }
char find_profession ( int level , int pos ) { if ( level == 1 ) return 'e' ; if ( find_profession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) return 'd' ; return 'e' if ( pos % 2 == 1 ) return 'e' ; }
bool has_close_elements ( int [ ] numbers , int threshold ) { for ( int i = 0 ; i < numbers . Length ; i ++ ) { for ( int j = i + 1 ; j < numbers . Length ; j ++ ) { int distance = Math . Abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) return true ; } } return false ; }
int truncate_number ( int number ) { return number % 1 ; }
bool below_zero ( List < int > operations ) { int balance = 0 ; foreach ( int op in operations ) { balance += op . Value ; if ( balance < 0 ) return true ; } return false ; }
double mean_absolute_deviation ( int [ ] numbers ) { double sum_num = 0 ; foreach ( int num in numbers ) { sum_num += num ; } double mean = sum_num / numbers . Count ; double sum_abs_diff = 0 ; foreach ( int num in numbers ) { sum_abs_diff += Math . Abs ( num - mean ) ; } return sum_abs_diff / numbers . Count ; }
List < int > intersperse ( List < int > numbers , int delimiter ) { List < int > result = new List < int > ( ) ; if ( numbers == null ) return result ; for ( int i = 0 ; i < numbers . Count - 1 ; i ++ ) result . Add ( numbers [ i ] ) ; result . Add ( delimiter ) ; result . Add ( numbers [ - 1 ] ) ; return result ; }
int sum_product ( int [ ] numbers ) { int sum_value = 0 , prod_value = 1 ; for ( int n = 0 ; n < numbers . Length ; n ++ ) { sum_value += n ; prod_value *= n ; } return [ sum_value , prod_value ] ; }
List < String > all_prefixes ( String str ) { List < String > result = new List < String > ( ) ; for ( int i = 1 ; i <= str . Length ; i ++ ) result . Add ( str [ : i ] ) ; return result ; }
List < int > parse_music ( string music_string ) { List < int > current = new List < int > ( ) ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < music_string . Length + 1 ; i ++ ) { if ( i == music_string . Length music_string [ i ] == ' ' ) { if ( current . Count == "o" ) result . Add ( 4 ) ; if ( current . Count == "o|" ) result . Add ( 2 ) ; if ( current . Count == ".|" ) result . Add ( 1 ) ; current . Clear ( ) ; } else { current . Add ( music_string [ i ] ) ; } } return result ; }
int strlen ( String s ) { return s . Length ; }
List < int > factorize ( int n ) { List < int > factors = new List < int > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { factors . Add ( i ) ; n /= i ; } else { i ++ ; } } return factors ; }
string concatenate ( string [ ] strings ) { List < string > result = new List < string > ( ) ; foreach ( string s in strings ) result . Add ( s ) ; return "" . Join ( result ) ; }
List < int > get_positive ( List < int > l ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( l [ i ] > 0 ) result . Add ( l [ i ] ) ; } return result ; }
List < int > sort_even ( List < int > l ) { List < int > evens = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i += 2 ) { evens . Add ( l [ i ] ) ; } evens . Sort ( ) ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( i % 2 == 0 ) result . Add ( evens [ i / 2 ] ) ; if ( i % 2 == 1 ) result . Add ( l [ i ] ) ; } return result ; }
string decode_cyclic ( string s ) { List < string > output = new List < string > ( ) ; int i = 0 ; while ( i <= s . Length - 3 ) { string x = s [ i + 2 ] + s [ i : i + 2 ] ; output . Add ( x ) ; i += 3 ; } return "" . Join ( output ) + s [ i : ] ; }
int car_race_collision ( int n ) { return Math . Pow ( n , 2 ) ; }
List < int > incr_list ( List < int > l ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) result . Add ( i + 1 ) ; return result ; }
bool pairs_sum_to_zero ( List < int > l ) { for ( int i = 0 ; i < l . Count ; i ++ ) { for ( int j = i + 1 ; j < l . Count ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) return true ; } } return false ; }
string change_base ( int x , int b ) { List < String > ret = new List < String > ( ) ; while ( x > 0 ) { ret . Add ( 0 , String . Join ( "" , x % b ) ) ; x /= b ; } return ret . ToString ( ) ; }
double median ( List < int > l ) { l . Sort ( ) ; if ( l . Count % 2 == 1 ) return l [ l . Count / 2 ] ; else return ( l . Count / 2 - 1 ] + l . Count / 2 ) / 2.0 ; }
string decode_shift ( string s ) { string [ ] result = new string [ s . Length ] ; for ( char ch = 0 ; ch < s . Length ; ch ++ ) { int w = ( ch + 21 - 'a' ) % 26 + 'a' ; result . Add ( ( char ) ( w ) ) ; } return result . ToString ( ) ; }
bool below_threshold ( List < int > l , int t ) { foreach ( int n in l ) if ( n >= t ) return false ; return true ; }
bool correct_bracketing ( List < char > brackets ) { int depth = 0 ; foreach ( char b in brackets ) { if ( b == "<" ) depth ++ ; else { depth -- ; } if ( depth < 0 ) return false ; } return depth == 0 ; }
bool monotonic ( int [ ] l ) { int incr = 0 , decr = 0 ; for ( int i = 1 ; i < l . Length ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) incr = 1 ; if ( l [ i ] < l [ i - 1 ] ) decr = 1 ; } return incr + decr != 2 ; }
List < int > derivative ( List < int > xs ) { List < int > result = new List < int > ( ) ; for ( int i = 1 ; i < xs . Count ; i ++ ) result . Add ( i * xs [ i ] ) ; return result ; }
int vowels_count ( string s ) { string vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch = 0 ; ch < s . Length ; ch ++ ) { if ( ch in vowels ) count ++ ; } if ( s [ - 1 ] == "y" s [ - 1 ] == "Y" ) count ++ ; return count ; }
int digit_sum ( string s ) { int sum = 0 ; foreach ( char c in s ) { if ( c . isupper ( ) ) sum += ( int ) c ; } return sum ; }
int fruit_distribution ( string s , int n ) { List < int > num1 = new List < int > ( ) ; List < int > num2 = new List < int > ( ) ; bool flag = false ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] . isdigit ( ) ) { if ( ! flag ) num1 . Add ( s [ i ] ) ; if ( flag ) num2 . Add ( s [ i ] ) ; } else if ( ! flag && num1 . Count > 0 ) { flag = true ; } } return n - ( String . Join ( "" , num1 ) ) - ( String . Join ( num2 ) ) ; }
int [ ] pluck ( int [ ] arr ) { int [ ] result = new int [ 2 ] ; for ( int i = 0 ; i < arr . Length ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result == null ) result . Add ( arr [ i ] ) ; result . Add ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } return result ; }
List < int > strange_sort_list ( List < int > lst ) { List < int > res = new List < int > ( ) ; lst . Sort ( ) ; int l = 0 ; int r = lst . Count - 1 ; while ( l < r ) { res . Add ( lst [ l ] ) ; l ++ ; res . Add ( lst [ r ] ) ; r -- ; } if ( l == r ) res . Add ( lst [ l ] ) ; return res ; }
float triangle_area ( float a , float b , float c ) { if ( a + b <= c a + c <= b + c <= a ) return - 1.0 ; float s = ( a + b + c ) / 2 ; float area = ( float ) Math . Sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; return area ; }
bool will_it_fly ( int [ ] q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . Length ; i ++ ) { if ( q [ i ] != q [ - i - 1 ] ) return false ; sum += q [ i ]  ; } return sum <= w ; }
bool is_cube ( float a ) { a = Math . Abs ( a ) ; double i = Math . Round ( a , ( double ) 1 / 3 ) ; return i * i == a ; }
int hex_key ( string num ) { string key = "2357BD" ; int total = 0 ; for ( int c = 0 ; c < num . Length ; c ++ ) { if ( c in key ) total ++ ; } return total ; }
string decimal_to_binary ( int dec ) { List < String > ans = new List < String > ( ) ; if ( dec != 0 ) { while ( dec > 0 ) { ans . Add ( 0 , String . Join ( "" , dec % 2 ) ) ; dec /= 2 ; } } else { ans += "0" ; } return "db" + ans . Count + "db" ; }
bool prime_length ( String s ) { int l = s . Length ; if ( l < 2 ) return false ; for ( int i = 2 ; i < l ; i ++ ) if ( l % i == 0 ) return false ; return true ; }
int starts_one_ends ( int n ) { if ( n < 1 ) return 0 ; if ( n == 1 ) return 1 ; return 18 * ( int ) ( 10 * ( n - 2 ) ) ; }
int add ( int [ ] lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . Length ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum ; }
List < pair > get_row ( List < pair > [ ] lst , int x ) { List < pair > coords = new List < pair > ( ) ; for ( int i = 0 ; i < lst . Length ; i ++ ) { for ( int j = lst [ i ] . Count - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] [ j ] == x ) coords . Add ( new pair ( i , j ) ) ; } } return coords ; }
int next_smallest ( List < int > lst ) { lst . Sort ( ) ; for ( int i = 1 ; i < lst . Count ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) { return lst [ i ] ; } } return - 1 ; }
bool any_int ( int a , int b , int c ) { if ( a != a b != b c != c ) return false ; return a + b == c || a + c == b + c == a ; }
List < int > count_up_to ( int n ) { List < int > primes = new List < int > ( ) ; for ( int i = 2 ; i < n ; i ++ ) { bool is_prime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) primes . Add ( i ) ; } return primes ; }
int closest_integer ( int value ) { double w = ( double ) value ; return w ; }
List < int > make_a_pile ( int n ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) result . Add ( n + 2 * i ) ; return result ; }
List < string > words_string ( string s ) { List < string > current = new List < string > ( ) ; List < string > words = new List < string > ( ) ; for ( int i = 0 ; i < s . Length + 1 ; i ++ ) { if ( i == s . Length s [ i ] == ' ' s [ i ] == ',' ) { if ( current . Count > 0 ) words . Add ( "" . Join ( current ) ) ; current . Clear ( ) ; } else { current . Add ( s [ i ] ) ; } } return words ; }
string rounded_avg ( int n , int m ) { if ( n > m ) return - 1 ; int num = ( n + m ) / 2 ; List < String > ret = new List < String > ( ) ; while ( num > 0 ) { ret . Add ( 0 , String . Join ( "" , num % 2 ) ) ; num /= 2 ; } return ret . ToString ( ) ; }
List < int > unique_digits ( string x ) { List < int > digits = new List < int > ( ) ; foreach ( int n in x ) { bool is_unique = true ; foreach ( int c in n ) { if ( c % 2 == 0 ) { is_unique = false ; break ; } } if ( is_unique ) { digits . Add ( n ) ; } } return digits ; }
int count_nums ( int [ ] arr ) { int num = 0 ; for ( int n = 0 ; n < arr . Length ; n ++ ) { int neg = - 1 if ( n < 0 ) neg = 1 ; n = Math . Abs ( n ) ; List < int > digits = new List < int > ( ) ; for ( int c = 0 ; c < n . Length ; c ++ ) digits . Add ( c - '0' ) ; digits [ 0 ] *= neg ; int sum = 0 ; foreach ( int d in digits ) { sum += d ; } if ( sum > 0 ) num ++ ; } return num ; }
bool move_one_ball ( int [ ] arr ) { if ( ! arr ) return true ; int num = 0 ; for ( int i = 1 ; i < arr . Length ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) num ++ ; } if ( arr [ - 1 ] > arr [ 0 ] ) num ++ ; if ( num < 2 ) return true ; return false ; }
string exchange ( List < int > lst1 , List < int > lst2 ) { int odd = 0 , even = 0 ; for ( int n = 0 ; n < lst1 . Count ; n ++ ) { if ( n % 2 == 1 ) odd ++ ; } for ( int n = 0 ; n < lst2 . Count ; n ++ ) { if ( n % 2 == 0 ) even ++ ; } if ( even >= odd ) return "YES" ; return "NO" ; }
List < string > odd_count ( String [ ] lst ) { List < string > results = new List < string > ( ) ; string original_str = "the number of odd elements in the string i of the input." ; for ( String s in lst ) { int sum = 0 ; foreach ( String d in s ) { if ( d . isdigit ( ) && d . Length % 2 == 1 ) sum += 1 ; } List < string > result = new List < string > ( ) ; for ( char c = original_str [ 0 ] ; c != 'i' ; c ++ ) result . Add ( c ) ; results . Add ( "" . Join ( result ) ) ; } return results ; }
int minSubArraySum ( int [ ] nums ) { int min_sum = int . MaxValue ; int sum = 0 ; foreach ( int num in nums ) { sum += num ; if ( min_sum > sum ) min_sum = sum ; if ( sum > 0 ) sum = 0 ; } return min_sum ; }
int max_fill ( List < int > grid , int capacity ) { int res = 0 ; foreach ( int well in grid ) { int sum = 0 ; foreach ( int n in well ) { sum += n ; } if ( sum > 0 ) res += ( sum - 1 ) / capacity + 1 ; } return res ; }
List < String > select_words ( string s , int n ) { string vowels = "aeiouAEIOU" ; List < String > current = new List < String > ( ) ; List < int > result = new List < int > ( ) ; int consonant_num = 0 ; for ( int i = 0 ; i < s . Length + 1 ; i ++ ) { if ( i == s . Length s [ i ] == ' ' ) { if ( consonant_num == n ) result . Add ( "" . Join ( current ) ) ; consonant_num = 0 ; } else { current . Add ( s [ i ] ) ; if ( s [ i ] not in vowels ) consonant_num ++ ; } } return result ; }
int solution ( List < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . Count ; i += 2 ) { if ( lst [ i ] % 2 == 1 ) sum += lst [ i ] ; } return sum ; }
int add_elements ( int [ ] arr , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( - 99 <= arr [ i ] <= 99 ) sum += arr [ i ] ; } return sum ; }
List < int > get_odd_collatz ( int n ) { List < int > odd_collatz = new List < int > ( ) ; while ( n > 1 ) { if ( n % 2 == 1 ) { odd_collatz . Add ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } odd_collatz . Add ( 1 ) ; odd_collatz . Sort ( ) ; return odd_collatz ; }
bool is_sorted ( List < int > lst ) { for ( int i = 1 ; i < lst . Count ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; }
string intersection ( int [ ] interval1 , int [ ] interval2 ) { int inter1 = Math . Max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = Math . Min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) return "NO" ; for ( int i = 2 ; i < l ; i ++ ) if ( l % i == 0 ) return "NO" ; return "YES" ; }
int prod_signs ( int [ ] arr ) { if ( ! arr ) return - 32768 ; int sum = 0 , prods = 1 ; for ( int i = 0 ; i < arr . Length ; i ++ ) { sum += Math . Abs ( i ) ; if ( i == 0 ) prods = 0 ; if ( i < 0 ) prods = - prods ; } return sum * prods  ; }
List < int > minPath ( int [ , ] grid , int k ) { int n = grid . Length ; int min_num = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i , j ] == 1 ) { List < int > tmp = new List < int > ( ) ; if ( i != 0 ) { tmp . Add ( grid [ i - 1 , j ] ) ; } if ( j != 0 ) { tmp . Add ( grid [ i , j - 1 ] ) ; } if ( i != n - 1 ) { tmp . Add ( grid [ i + 1 , j ] ) ; } if ( j != n - 1 ) { tmp . Add ( grid [ i , j + 1 ] ) ; } min_num = Math . Min ( tmp ) ; } } } List < int > ans = new List < int > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . Add ( 1 ) ; } else { ans . Add ( min_num ) ; } } return ans ; }
int digits ( int n ) { int prod = 1 ; foreach ( char digit in n ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) prod == 1 ; prod *= digit - '0' ; } } return prod ; }
bool is_nested ( string s1 ) { int count = 0 ; int max_count = 0 ; for ( char ch = 0 ; ch < s1 . Length ; ch ++ ) { if ( ch == "[" ) { count ++ ; } if ( ch == "]" ) { count -- ; } if ( count < 0 ) count = 0 ; if ( count > max_count ) max_count = count ; if ( count <= max_count - 2 ) return true ; } return false ; }
double sum_squares ( int [ ] lst ) { double sum = 0.0 ; for ( int i = 0 ; i < lst . Length ; i ++ ) sum += ( double ) Math . Ceiling ( i ) * ( double ) Math . Ceiling ( i ) ; return sum ; }
int can_arrange ( int [ ] arr ) { int index = - 1 ; for ( int i = 0 ; i < arr . Length ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
int largest_smallest_integers ( int [ ] lst ) { int max_neg = 0 , min_pos = 0 ; foreach ( int n in lst ) { if ( n < 0 && ( max_neg == 0 n > max_neg ) ) max_neg = n  ; if ( n > 0 && ( min_pos == 0 n < min_pos ) ) min_pos = n  ; } return [ max_neg , min_pos ] ; }
string fix_spaces ( string text ) { string [ ] res = new string [ text . Length + 1 ] ; int space_len = 0 ; for ( int i = 0 ; i <= text . Length ; i ++ ) { if ( i == text . Length text [ i ] != ' ' ) { if ( space_len == 1 ) res . Add ( '_' ) ; if ( space_len == 2 ) res . Add ( '__' ) ; if ( space_len > 2 ) { res . Add ( '-' ) ; } space_len = 0 ; if ( i != text . Length ) { res . Add ( text [ i ] ) ; } } else { space_len ++ ; } } return res . ToString ( ) ; }
string file_name_check ( string file_name ) { int digit_num = 0 , dot_num = 0 ; if ( file_name . Length < 5 || ! file_name [ 0 ] . isalpha ( ) ) return "No" ; string suffix = file_name . Substring ( - 4 ) ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) return "No" ; foreach ( char c in file_name ) { if ( c . isdigit ( ) ) digit_num ++ ; if ( c == '.' ) dot_num ++ ; } if ( digit_num > 3 dot_num != 1 ) return "No" ; return "Yes" ; }
int sum_squares ( int [ ] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . Length ; i ++ ) { if ( i % 3 == 0 ) sum += lst [ i ] * lst [ i ] ; else if ( i % 4 == 0 ) sum += lst [ i ] * lst [ i ] * lst [ i ] ; else sum += lst [ i ] ; } return sum ; }
string words_in_sentence ( string sentence ) { string [ ] result = new string [ sentence . Length + 1 ] ; List < char > current = new List < char > ( ) ; for ( int i = 0 ; i <= sentence . Length ; i ++ ) { if ( i == sentence . Length sentence [ i ] == ' ' ) { bool is_prime = true ; int l = current . Count ; if ( l < 2 ) is_prime = false ; for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { result . Add ( current . ToString ( ) + " " ) ; } current . Clear ( ) ; } else { current . Add ( sentence [ i ] ) ; } } result = result . ToString ( ) ; if ( result . Count > 0 ) result = result . Substring ( 0 , result . Length - 1 ) ; return result ; }
bool simplify ( string x , string n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . Length ; i ++ ) { if ( x [ i ] == '/' ) { a = x [ : i ] ; b = x [ i + 1 : ] ; } } for ( int i = 0 ; i < n . Length ; i ++ ) { if ( n [ i ] == '/' ) { c = n [ : i ] ; d = n [ i + 1 : ] ; } } return ( a * c ) % ( b * d ) == 0 ; }
int specialFilter ( int [ ] nums ) { int count = 0 ; for ( int num = 0 ; num < nums . Length ; num ++ ) { if ( num > 10 ) { String w = num . ToString ( ) ; if ( w [ 0 ] % 2 == 1 && w [ - 1 ] % 2 == 1 ) count ++ ; } } return count ; }
int get_max_triples ( int n ) { int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = i * i - i + 1 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( arr [ i ] + arr [ j ] + arr [ k ] % 3 == 0 ) count ++ ; } } } return count ; }
int double_the_difference ( List < int > lst ) { int sum = 0 ; foreach ( int d in lst ) { int num = ( int ) Math . Round ( d , 2 ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) sum += num * num ; } } return sum ; }
List < int > compare ( List < int > game , List < int > guess ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < game . Count ; i ++ ) result . Add ( Math . Abs ( game [ i ] - guess [ i ] ) ) ; return result ; }
string strongest_extension ( string class_name , List < int > extensions ) { string strongest = "" ; int max = Int32 . MinValue ; for ( int i = 0 ; i < extensions . Count ; i ++ ) { int strength = 0 ; foreach ( int chr in extension ) { if ( chr . isupper ( ) ) strength ++ ; if ( chr . islower ( ) ) strength -- ; } if ( strength > max ) max = strength ; strongest = extension ; } return class_name + "." + strongest ; }
string int_to_mini_roman ( int number ) { int [ ] num = new int [ 1000 ] ; int 900 = 500 , 400 , 100 , 90 , 50 , 10 , 9 , 5 , 4 , 1 ] ; string [ ] sym = new string [ ] { "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" } ; int pos = 0 ; List < string > res = new List < string > ( ) ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res . Add ( sym [ pos ] ) ; number -= num [ pos ] ; } if ( number > 0 ) { pos ++ ; } } return res . ToString ( ) ; }
int eat ( String number , int need , int remaining ) { return [ number + remaining , 0 ] if ( need > remaining ) return [ number + remaining , need - need ] ; }
int do_algebra ( int [ ] ops , int [ ] operands ) { int [ ] nums = new int [ operands . Length ] ; Stack < int > current_ops = new Stack < int > ( ) ; int i = current_ops . Count - 1 ; while ( i >= 0 ) { if ( current_ops [ i ] == "**" ) { nums [ i ] = ( int ) Math . Pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . Pop ( i + 1 ) ; current_ops . Pop ( i ) ; } i -- ; } i = 0 ; while ( i < current_ops . Count ) { if ( current_ops [ i ] == "*" ) { nums [ i ] *= nums [ i + 1 ] ; nums . Pop ( i + 1 ) ; current_ops . Pop ( i ) ; } else if ( current_ops [ i ] == "//" ) { nums [ i ] /= nums [ i + 1 ] ; nums . Pop ( i + 1 ) ; current_ops . Pop ( i ) ; } else { i ++ ; } } i = 0 ; while ( i < current_ops . Count ) { if ( current_ops [ i ] == "+" ) { nums [ i ] += nums [ i + 1 ] ; nums . Pop ( i + 1 ) ; current_ops . Pop ( i ) ; } else if ( current_ops [ i ] == "-" ) { nums [ i ] -= nums [ i + 1 ] ; nums . Pop ( i + 1 ) ; current_ops . Pop ( i ) ; } else { i ++ ; } } return nums [ 0 ] ; }
List < int > generate_integers ( int a , int b ) { int lower = Math . Max ( 2 , Math . Min ( a , b ) ) ; int upper = Math . Min ( 8 , Math . Max ( a , b ) ) ; List < int > result = new List < int > ( ) ; for ( int i = lower ; i <= upper ; i += 2 ) result . Add ( i ) ; return result ; }
bool isStepNum ( int n ) { int prev_digit = - 1 ; while ( n > 0 ) { int cur_digit = n % 10 ; if ( prev_digit == - 1 ) prev_digit = cur_digit ; else { if ( Math . Abs ( prev_digit - cur_digit ) != 1 ) return false ; } prev_digit = cur_digit  ; n /= 10 ; } return true ; }
int num_of_ways ( int n , int k ) { int p = 1 ; if ( k % 2 == 1 ) p = - 1 ; return ( ( n - 1 ) * k + p * ( n - 1 ) ) / n ; }
List < int > find_divisors ( int n ) { List < int > v = new List < int > ( ) ; for ( int i = 1 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) v . Add ( i ) ; else v . Add ( i ) ; v . Add ( n / i ) ; } } return v ; }
int egg_drop ( int n , int k ) { if ( k == 1 k == 0 ) return k  ; if ( n == 1 ) return k ; int min = int . MaxValue ; for ( int x = 1 ; x <= k ; x ++ ) { int res = Math . Max ( egg_drop ( n - 1 , x - 1 ) , egg_drop ( n , k - x ) ) ; if ( res < min ) min = res ; } return min + 1 ; }
bool is_power_of_two ( uint n ) { return ( int ) ( Math . Ceiling ( Math . Log ( n ) ) == Math . Floor ( Math . Log ( n ) ) ; }
int shortest_palindrome ( string s ) { int n = s . Length ; List < int > v = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i , r = i ; string ans1 = "" , ans2 = "" ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans1 += s [ l ] ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans2 += s [ l ] ; l -- ; r ++ ; } v . Add ( ans1 ) ; v . Add ( ans2 ) ; } int ans = v [ 0 ] ; for ( int i = 1 ; i < v . Count ; i ++ ) { if ( v [ i ] != "" ) { ans = Math . Min ( ans , v [ i ] ) ; } } return ans ; }
int minimum_adjacent_difference ( int [ ] a , int n , int k ) { int min_diff = int . MaxValue ; for ( int i = 0 ; i <= k ; i ++ ) { int max_diff = Int32 . MinValue ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) max_diff = Math . Max ( max_diff , a [ p + 1 ] - a [ p ] ) ; } min_diff = Math . Min ( min_diff , max_diff ) ; } return min_diff ; }
int cal ( int [ ] a , int mid ) { int chocolate = 0 ; foreach ( int i in a ) { if ( i >= mid ) chocolate += i - mid ; } return chocolate ; }
bool check ( int v , int [ ] a , int m ) { int tec = 0 , ans = 0 , b = new int [ a . Length + 3 ] ; for ( int i = 0 ; i < a . Length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; }
int largest_num ( int [ ] arr ) { int res = 0 ; Array . Sort ( arr ) ; int l = 0 , r = arr . Length - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ]  ; if ( sum == 0 ) { res = Math . Max ( res , Math . Max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) l ++ ; else r -- ; } return res ; }
int binary_search ( int [ ] p , int n ) { int i = 0 , j = p . Length - 1 ; int index = - 1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
int find_min_length ( int [ ] arr ) { int index = arr . Length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; }
int min_digits ( int n , int k ) { int digits_num = ( int ) Math . Floor ( ( Math . Log ( n ) / Math . Log ( 10 ) ) ) + 1 ; int temp_sum = 0 ; int temp = digits_num ; int result = 0 ; int x = 0 , v = 0 ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10  ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { for ( ; temp > 0 ; temp -- ) { v = n / ( 10 * ( temp - 1 ) ) ; temp_sum += v % 10  ; if ( temp_sum >= k ) { v /= 10 ; v ++ ; result = v * ( 10 * temp ) ; break ; } } x = result - n ; return x ; }
int check_for_perfect_square ( int [ ] arr , int i , int j ) { int mid = 0 , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) return mid ; else if ( mid * mid > sum ) high = mid - 1 ; else low = mid + 1 ; } return - 1 ; }
int min_flips ( int [ , ] mat , string s ) { int n = mat . Length ; int m = mat . Length ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i , j ] != s [ i + j ] - '0' ) { count ++ ; } } } return count ; }
List < int > construct_tree ( int n , ArrayList edges ) { List < int > [ ] adjl = new List < int > [ n ] ; for ( int i = 0 ; i < n ; i ++ ) adjl [ i ] = new List < int > ( ) ; for ( int e = 0 ; e < edges . Count ; e ++ ) { int u = e . first ; int v = e . second ; adjl [ u ] . Add ( v ) ; adjl [ v ] . Add ( u ) ; } return adjl ; }
int find_sum_of_values ( int v , int [ ] parent , int [ ] values_children ) { int cur_node = v ; int Sum = 0 ; while ( cur_node != - 1 ) { Sum += values_children [ cur_node ] ; cur_node = parent [ cur_node ] ; } return Sum ; }
int get_distinct ( int d , int count ) { int num = 0 ; int count = ( int ) ( 10 * ( count - 1 ) ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; }
bool is_increasing ( int [ ] arr ) { for ( int i = 0 ; i < arr . Length - 1 ; i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) return false ; return true ; }
int min_adj_swaps ( int [ , ] mat ) { int n = mat . Length ; int [ ] cnt_zero = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 ; j -- ) { if ( mat [ i , j ] != 0 ) { break ; } cnt_zero [ i ] ++ ; } } int cnt_swaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cnt_zero [ i ] < ( n - i - 1 ) ) { int first = i  ; while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) first ++ ; if ( first == n ) return - 1 ; while ( first > i ) { cnt_zero [ first ] = cnt_zero [ first - 1 ] ; cnt_zero [ first - 1 ] = cnt_zero [ first ] ; first -- ; cnt_swaps ++ ; } } return cnt_swaps ; }
int solve ( Stack < int > values , Stack < int > salary , int mod ) { int ret = 1 ; int amt = 0 ; Array . Sort ( values ) ; Array . Sort ( salary ) ; while ( salary . Count > 0 ) { while ( values . Count && values [ - 1 ] >= salary [ - 1 ] ) { amt ++ ; values . Pop ( ) ; } if ( amt == 0 ) return 0 ; ret *= amt ; amt -- ; ret %= mod ; salary . Pop ( ) ; } return ret ; }
int [ ] organize_in_order ( int [ ] vec , int [ ] op , int n ) { int [ ] result = new int [ n ] ; Array . Sort ( result ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) result [ k ] = vec [ i ] ; i ++ ; else result [ k ] = vec [ j ] ; j -- ; } k ++ ; } result [ n - 1 ] = vec [ i ]  ; return result ; }
int count_points ( int n , int m , int [ ] a , int [ ] b , int x , int y ) { Array . Sort ( a ) ; Array . Sort ( b ) ; int j = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; }
bool are_same ( List < int > a , List < int > b ) { a . Sort ( ) ; b . Sort ( ) ; return a . Equals ( b ) ; }
int count_number_of_strings ( String s ) { int n = s . Length - 1 ; int count = 2 * n ; return count ; }
List < int > prime_power ( int x ) { List < int > prime_pow = new List < int > ( ) ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } prime_pow . Add ( p ) ; } } if ( x > 1 ) prime_pow . Add ( x ) ; return prime_pow ; }
int is_perfect ( int n0 ) { int n = ( int ) Math . Sqrt ( n0 ) ; if ( n != ( int ) Math . Ceiling ( n ) ) return 0 ; return 1 ; }
int find_sum ( int l , int r ) { List < int > arr = new List < int > ( ) ; int i = 0 , x = 2 ; while ( i <= r ) { arr . Add ( i + x ) ; if ( i + 1 <= r ) { arr . Add ( i + 1 + x ) ; } x *= - 1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; i ++ ) { sum += arr [ i ]  ; } return sum ; }
double results ( int n , int k ) { return round ( n , ( double ) 1 / 2 * k ) ; }
List < int > factors ( int n ) { List < int > v = new List < int > ( ) ; v . Add ( 1 ) ; for ( int i = 2 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) v . Add ( i ) ; if ( n / i != i ) v . Add ( n / i ) ; } } return v ; }
int smallest_num ( int n ) { double x = ( double ) Math . Pow ( ( n - 1 ) / 2 , 2 ) ; return ( int ) Math . Ceiling ( x ) ; }
int smallest ( string s ) { int [ ] a = new int [ s . Length ] ; for ( int i = 0 ; i < s . Length ; i ++ ) a [ i ] = ( int ) s [ i ] - ( int ) '0' ; List < int > b = new List < int > ( ) ; for ( int i = 0 ; i < a . Length ; i ++ ) { if ( a [ i ] % 2 != 0 ) b . Add ( a [ i ] ) ; } b . Sort ( ) ; if ( b . Count > 1 ) return b [ 0 ] * 10 + b [ 1 ] ; return - 1 ; }
List < double > diagonals ( double a , double b , double c , double d ) { List < double > ans = new List < double > ( ) ; ans . Add ( Math . Sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ; ans . Add ( Math . Sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ; return ans ; }
int find_number_of_digits ( int n , int base ) { int dig = ( int ) ( Math . Log ( n ) / Math . Log ( base ) ) + 1 ; return dig ; }
float n_gon ( float n ) { float pro_angle_var = 0 ; if ( n % 4 == 0 ) { pro_angle_var = ( float ) Math . PI * ( 180.0 / n ) / 180 ; } else { pro_angle_var = ( float ) Math . PI * ( 180.0 / ( 2 * n ) ) / 180 ; } int neg_x = 1.0e +99 , pos_x = - 1.0e +99 ; int neg_y = 1.0e +99 ; int pos_y = - 1.0e +99 ; for ( int j = 0 ; j < n ; j ++ ) { float px = ( float ) Math . Cos ( 2 * Math . pi * j / n + pro_angle_var ) ; float py = ( float ) Math . Sin ( 2 * Math . pi * j / n + pro_angle_var ) ; neg_x = Math . Min ( neg_x , px ) ; pos_x = Math . Max ( pos_x , px ) ; neg_y = Math . Min ( neg_y , py ) ; pos_y = Math . Max ( pos_y , py ) ; } float opt2 = Math . Max ( pos_x - neg_x , pos_y - neg_y ) ; return opt2 / Math . Sin ( math . pi / n ) / 2 ; }
int find_max_k ( int n ) { int p = ( int ) ( Math . Log ( n ) / Math . Log ( 2 ) ) ; return 2 * p ; }
int nth_fibo ( int n ) { double a = ( 5 , 0.5 + 1 ) / 2 ; double b = ( - 5 , 0.5 + 1 ) / 2 ; double r = 5 , 0.5 ; int ans = ( a * n - b * n ) / r ; return ans ; }
double find_prob ( int l , int r ) { double count_of_ps = ( double ) Math . Ceiling ( Math . Sqrt ( r ) ) - ( double ) Math . Ceiling ( Math . Sqrt ( l ) ) + 1 ; int total = r - l + 1 ; double prob = count_of_ps / total ; return prob ; }
double previous_fibonacci ( double n ) { double a = n / ( ( 1 + Math . Sqrt ( 5 ) ) / 2.0 ) ; return a ; }
List < int > dist_prime ( int [ ] arr , int all_primes ) { List < int > list = new List < int > ( ) ; for ( int i = 0 ; i < all_primes ; i ++ ) { foreach ( int j in arr ) { if ( j % i == 0 ) { list . Add ( i ) ; break ; } } } return list ; }
List < int > get_array ( int n ) { List < int > ans = new List < int > ( ) ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans . Add ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; }
int maximum_length ( string a ) { int [ ] counts = new int [ 11 ] ; int ans = 0 ; for ( int index = 0 ; index < a . Length ; index ++ ) counts [ a [ index ] ] ++ ; int k = new int [ counts . Length ] ; for ( int i = 0 ; i < counts . Length ; i ++ ) { if ( i != 0 ) k . Add ( i ) ; } k . Sort ( ) ; if ( k . Count == 1 k [ 0 ] == k [ - 2 ] && k [ - 1 ] - k [ - 2 ] == 1 ) { ans = index ; } } return ans + 1 ; }
int max_edges ( int n ) { int edges = ( int ) Math . Floor ( ( n * n / 4 ) ) ; return edges ; }
int find_k ( int n , int k ) { List < int > a = new List < int > ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) a . Add ( i ) ; } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) a . Add ( i ) ; } return a [ k - 1 ]  ; }
bool is_keith ( int x , int temp ) { List < int > terms = new List < int > ( ) ; int n = 0 ; while ( temp > 0 ) { terms . Add ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } terms . Sort ( ) ; int next_term = 0 ; for ( int i = 1 ; next_term < x ; next_term ++ ) { next_term += terms [ i - j ] ; } terms . Add ( next_term ) ; i ++ ; } return next_term == x ; }
bool factors ( int n , int k ) { List < int > v = new List < int > ( ) ; while ( n % 2 == 0 ) { v . Add ( 2 ) ; n /= 2 ; } if ( v . Count >= k ) return true ; for ( int i = 3 ; i * i <= n ; i += 2 ) { if ( n % i == 0 ) { n = n / i ; v . Add ( i ) ; } if ( v . Count >= k ) return true ; } if ( n > 2 ) { v . Add ( n ) ; } if ( v . Count >= k ) return true ; return false ; }
List < String > separate_paren_groups ( string paren_string ) { List < String > all_parens = new List < String > ( ) ; List < String > current_paren = new List < String > ( ) ; int current_depth = 0 ; for ( char c = 0 ; c < paren_string . Length ; c ++ ) { if ( c == "(" ) { current_depth ++ ; current_paren . Add ( c ) ; } else if ( c == ")" ) { current_depth -- ; current_paren . Add ( c ) ; if ( current_depth == 0 ) { all_parens . Add ( "" . Join ( current_paren ) ) ; current_paren . Clear ( ) ; } } } return all_parens ; }
List < int > parse_nested_parens ( String paren_string ) { List < int > all_levels = new List < int > ( ) ; int level = 0 ; int max_level = 0 ; for ( int i = 0 ; i < paren_string . Length ; i ++ ) { char chr = paren_string [ i ] ; if ( chr == "(" ) { level ++ ; if ( level > max_level ) max_level = level ; } if ( chr == ")" ) { level -- ; if ( level == 0 ) { all_levels . Add ( max_level ) ; max_level = 0 ; } } } return all_levels ; }
List < String > filter_by_substring ( List < String > strings , String substring ) { List < String > result = new List < String > ( ) ; foreach ( String s in strings ) { if ( substring in s ) result . Add ( s ) ; } return result ; }
List < int > rolling_max ( int [ ] numbers ) { int running_max = 0 ; List < int > result = new List < int > ( ) ; for ( int n = 0 ; n < numbers . Length ; n ++ ) { if ( n > running_max ) running_max = n ; result . Add ( running_max ) ; } return result ; }
string make_palindrome ( string s ) { if ( ! s ) return "" ; for ( int i = 0 ; i < s . Length ; i ++ ) { string r_str = s [ i : ] ; if ( r_str == r_str [ : - 1 ] ) { string n_str = s [ 0 : i ] ; string n2_str = n_str . Substring ( 0 , i ) ; return s + n2_str ; } } return s . Substring ( 0 , s . Length - 2 ) + s . Substring ( : : - 1 ) ; }
string string_xor ( string a , string b ) { List < String > result = new List < String > ( ) ; for ( int i = 0 ; i < a . Length ; i ++ ) { if ( a [ i ] == b [ i ] ) result . Add ( "0" ) ; else result . Add ( "1" ) ; } return result . ToString ( ) ; }
string longest ( string [ ] strings ) { if ( ! strings ) return "" ; int max_len = Math . Max ( strings . Length , 2 ) ; foreach ( String s in strings ) { if ( s . Length == max_len ) return s ; } return "" ; }
string string_sequence ( int n ) { string [ ] s = new string [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { s [ i ] = String . Join ( "" , i ) ; s [ i ] = " " ; } s . Add ( String . Join ( "" , n ) ) ; return s . ToString ( ) ; }
int count_distinct_characters ( String s ) { HashSet < char > distinct = new HashSet < char > ( ) ; foreach ( char c in s . ToLower ( ) ) { distinct . Add ( c ) ; } return distinct . Count ; }
int how_many_times ( String s , String sub ) { int times = 0 ; for ( int i = 0 ; i <= s . Length - sub . Length ; i ++ ) { if ( s [ i : i + sub . Length ] == sub ) times ++ ; } return times ; }
string sort_numbers ( string numbers ) { Dictionary < int , int > to_num = new Dictionary < int , int > ( ) ; Dictionary < int , int > from_num = new Dictionary < int , int > ( ) ; int i ; for ( i = 0 ; i < numbers . Length + 1 ; i ++ ) { if ( i == numbers . Length numbers [ i ] == ' ' ) { if ( to_num . ContainsKey ( "" . Join ( current ) ) ) ints . Add ( to_num [ "" . Join ( current ) ] ) ; current . Clear ( ) ; } else { current . Add ( numbers [ i ] ) ; } } Array . Sort ( ints ) ; List < int > result = new List < int > ( ) ; for ( i = 0 ; i < ints . Count ; i ++ ) { result . Add ( from_num [ ints [ i ] ] ) ; if ( i != ints . Count - 1 ) result . Add ( " " ) ; } return result . ToString ( ) ; }
List < int > find_closest_elements ( int [ ] numbers ) { List < int > closest_pair = new List < int > ( ) ; int distance = Math . Abs ( closest_pair [ 0 ] - closest_pair [ 1 ] ) ; for ( int i = 0 ; i < numbers . Length ; i ++ ) { for ( int j = i + 1 ; j < numbers . Length ; j ++ ) { if ( Math . Abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closest_pair [ 0 ] = numbers [ i ] ; closest_pair [ 1 ] = numbers [ j ] ; distance = Math . Abs ( numbers [ i ] - numbers [ j ] ) ; } } } closest_pair . Sort ( ) ; return closest_pair ; }
List < int > rescale_to_unit ( List < int > numbers ) { int min_num = numbers . Min ( ) ; int max_num = numbers . Max ( ) ; List < int > result = new List < int > ( ) ; foreach ( int n in numbers ) result . Add ( ( n - min_num ) / ( max_num - min_num ) ) ; return result ; }
List < int > filter_integers ( List < int > values ) { List < int > result = new List < int > ( ) ; foreach ( int e in values ) { if ( isinstance ( e , int ) ) result . Add ( e ) ; } return result ; }
List < int > remove_duplicates ( List < int > numbers ) { Dictionary < int , int > counter = new Dictionary < int , int > ( ) ; foreach ( int i in numbers ) { if ( counter . ContainsKey ( i ) ) { counter [ i ] = counter [ i ] + 1 ; } else { counter . Add ( i , 1 ) ; } } List < int > result = new List < int > ( ) ; foreach ( int i in numbers ) { if ( counter [ i ] == 1 ) result . Add ( i ) ; } return result ; }
string flip_case ( string s ) { List < char > result = new List < char > ( ) ; foreach ( char c in s ) { if ( c . islower ( ) ) result . Add ( c . ToUpper ( ) ) ; else result . Add ( c . ToLower ( ) ) ; } return result . ToString ( ) ; }
List < String > filter_by_prefix ( String [ ] strings , String prefix ) { List < String > result = new List < String > ( ) ; for ( int i = 0 ; i < strings . Length ; i ++ ) { if ( strings [ i ] . StartsWith ( prefix ) ) result . Add ( strings [ i ] ) ; } return result ; }
int find_zero ( int [ ] xs ) { int ans = 0 , value = 0 ; for ( int i = 0 ; i < xs . Length ; i ++ ) { value += xs [ i ] * ans * i  ; } while ( Math . Abs ( value ) > 1e-6 ) { int driv = 0 ; for ( int i = 1 ; i < xs . Length ; i ++ ) { driv += xs [ i ] * ans * ( i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . Length ; i ++ ) { value += xs [ i ] * ans * i  ; } } return ans ; }
List < int > sort_third ( List < int > l ) { List < int > thirds = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i += 3 ) { thirds . Add ( l [ i ] ) ; } Array . Sort ( thirds ) ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( i % 3 == 0 ) result . Add ( thirds [ i / 3 ] ) ; else result . Add ( l [ i ] ) ; } return result ; }
List < int > unique ( List < int > l ) { List < int > result = new List < int > ( l ) ; result . Add ( 1 ) ; return result ; }
int max_element ( List < int > l ) { return Math . Max ( l , 1 ) ; }
bool triples_sum_to_zero ( List < int > l ) { for ( int i = 0 ; i < l . Count ; i ++ ) { for ( int j = i + 1 ; j < l . Count ; j ++ ) { for ( int k = j + 1 ; k < l . Count ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) return true ; } } } return false ; }
int fib4 ( int n ) { int [ ] results = new int [ n + 1 ] ; for ( int i = 4 ; i <= n ; i ++ ) { results [ i ] = results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ; } return results [ n ] ; }
bool is_palindrome ( string text ) { string pr = text . Substring ( 0 , - 1 ) ; return pr == text ; }
string remove_vowels ( string text ) { string result = new string [ text . Length ] ; string vowels = "aeiou" ; for ( char ch = 0 ; ch < text . Length ; ch ++ ) { if ( ch . ToLower ( ) not in vowels ) result . Add ( ch ) ; } return result . ToString ( ) ; }
bool same_chars ( string s0 , string s1 ) { HashSet < char > set0 = new HashSet < char > ( ) ; for ( char c = 0 ; c < s0 . Length ; c ++ ) set0 . Add ( c ) ; HashSet < char > set1 = new HashSet < char > ( ) ; for ( char c = 0 ; c < s1 . Length ; c ++ ) set1 . Add ( c ) ; return set0 == set1 ; }
List < int > common ( List < int > l1 , List < int > l2 ) { HashSet < int > us = new HashSet < int > ( ) ; foreach ( int e1 in l1 ) foreach ( int e2 in l2 ) { if ( e1 == e2 ) us . Add ( e1 ) ; } return us . Count ; }
bool correct_bracketing ( String [ ] brackets ) { int depth = 0 ; foreach ( char b in brackets ) { if ( b == "(" ) depth ++ ; else { depth -- ; } if ( depth < 0 ) return false ; } return depth == 0 ; }
string circular_shift ( int x , int shift ) { string s = x . ToString ( ) ; if ( shift > s . Length ) return s . Substring ( 0 , shift ) ; return s [ - shift : ] + s . Substring ( shift ) ; }
int search ( string lst ) { Dictionary < int , int > counter = new Dictionary < int , int > ( ) ; foreach ( int i in lst ) { counter . Add ( i , 1 ) ; } int ans = - 1 ; foreach ( KeyValuePair < int , int > b in counter ) { if ( b . Value >= key > ans ) { ans = b . Key ; } } return ans ; }
int smallest_change ( int [ ] arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . Length / 2 ; i ++ ) { if ( arr [ i ] != arr [ - i - 1 ] ) { ans ++ ; } } return ans ; }
List < int > total_match ( List < int > lst1 , List < int > lst2 ) { int sum1 = 0 ; foreach ( List < int > st in lst1 ) { sum1 += st . Count ; } int sum2 = 0 ; foreach ( List < int > st in lst2 ) { sum2 += st . Count ; } return lst2 if ( sum1 > sum2 ) lst2 ; }
bool is_happy ( string s1 ) { if ( s1 . Length < 3 ) return false ; for ( int i = 0 ; i < s1 . Length - 2 ; i ++ ) if ( s1 [ i ] == s1 [ i + 1 ] s1 [ i + 1 ] == s1 [ i + 2 ] s1 [ i ] == s1 [ i + 2 ] ) return false ; return true ; }
List < string > numerical_letter_grade ( int [ ] grades ) { List < string > letter_grade = new List < string > ( ) ; for ( int gpa in grades ) { if ( gpa == 4.0 ) { letter_grade . Add ( "A+" ) ; } else if ( gpa > 3.7 ) { letter_grade . Add ( "A" ) ; } else if ( gpa > 3.3 ) { letter_grade . Add ( "A-" ) ; } else if ( gpa > 3.0 ) { letter_grade . Add ( "B+" ) ; } else if ( gpa > 2.7 ) { letter_grade . Add ( "B" ) ; } else if ( gpa > 2.0 ) { letter_grade . Add ( "C+" ) ; } else if ( gpa > 1.7 ) { letter_grade . Add ( "C" ) ; } else if ( gpa > 1.3 ) { letter_grade . Add ( "C-" ) ; } else if ( gpa > 1.0 ) { letter_grade . Add ( "D+" ) ; } else if ( gpa > 0.7 ) { letter_grade . Add ( "D" ) ; } else { letter_grade . Add ( "D-" ) ; } else { letter_grade . Add ( "E" ) ; } } return letter_grade ; }
string solve ( int n ) { List < String > bi_str = new List < String > ( ) ; int sum = 0 ; for ( int c = 0 ; c < n . Length ; c ++ ) sum += ( int ) ( c - '0' ) ; while ( sum > 0 ) { bi_str . Add ( 0 , String . Join ( "" , sum % 2 ) ) ; sum /= 2 ; } return bi_str . ToString ( ) ; }
string anti_shuffle ( string s ) { string [ ] ret = new string [ s . Length + 1 ] ; Stack < char > current = new Stack < char > ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( i == s . Length s [ i ] == ' ' ) { current . Sort ( ) ; if ( ret ) ret . Add ( " " ) ; ret . Add ( current . Peek ( ) + " " ) ; current . Pop ( ) ; } else { current . Push ( s [ i ] ) ; } } return ret . Join ( "" ) ; }
List < int > sort_array ( List < int > array ) { if ( ! array ) return array ; if ( ( array [ 0 ] + array [ - 1 ] ) % 2 == 1 ) array . Sort ( ) ; else { array . Sort ( reverse = true ) ; } return array ; }
string encrypt ( string s ) { string [ ] ans = new string [ s . Length ] ; for ( char c = 0 ; c < s . Length ; c ++ ) { if ( c . isalpha ( ) ) { ans [ c ] = ( char ) ( 'a' + ( c - 'a' + 4 ) % 26 ) ; } else { ans . Add ( c ) ; } } return "" . Join ( ans ) ; }
int is_bored ( string s1 ) { bool is_start = true ; int sum = 0 ; for ( int i = 0 ; i < s1 . Length ; i ++ ) { if ( s1 [ i ] == '.' s1 [ i ] == "?" s1 [ i ] == "!" ) is_start = true ; else if ( is_start ) { if ( s1 [ i ] == ' ' ) continue ; if ( s1 [ i ] == 'I' ) sum ++ ; is_start = false ; } } return sum ; }
string encode ( string message ) { string vowels = "aeiouAEIOU" ; List < char > ret = new List < char > ( ) ; for ( char c = 0 ; c < message . Length ; c ++ ) { if ( c . isupper ( ) ) { c = c . lower ( ) ; if ( c in vowels ) { c = ( char ) ( "a" + ( int ) ( c - ( int ) "a" ) % 26 ) ; } } else if ( c . islower ( ) ) { c = c . ToUpper ( ) ; if ( c in vowels ) { c = ( char ) ( 'A' + ( int ) c % 26 ) ; } } ret . Add ( c ) ; } return "" . Join ( ret ) ; }
int skjkasdkd ( List < int > lst ) { int largest = 0 ; for ( int n = 0 ; n < lst . Count ; n ++ ) { if ( n > largest ) { bool prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) prime = false ; } } if ( prime ) { largest = n ; } } int sum = 0 ; String s = largest . ToString ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { sum += s [ i ] - '0' ; } return sum ; }
bool check_dict_case ( Dictionary < int , int > dict ) { if ( ! dict ) return false ; int is_lower = 0 , is_upper = 0 ; for ( int key in dict ) { foreach ( KeyValuePair < int , int > c in key ) { if ( c . islower ( ) ) is_lower = 1 ; else if ( c . isupper ( ) ) is_upper = 1 ; else return false ; } } return is_lower + is_upper == 1 ; }
int multiply ( int a , int b ) { return ( Math . Abs ( a ) % 10 ) * Math . Abs ( b ) % 10 ; }
int count_upper ( String s ) { string u_vowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . Length ; i += 2 ) { if ( s [ i ] in u_vowel ) count ++ ; } return count ; }
List < string > by_length ( int [ ] arr ) { string [ ] num_to = new string [ ] { 1 : "One" , 2 : "Two" , 3 : "Three" , 4 : "Four" , 5 : "Five" , 6 : "Six" , 7 : "Seven" , 8 : "Eight" , 9 : "Nine" } ; List < int > sorted_arr = new List < int > ( arr ) ; for ( int n = 0 ; n < sorted_arr . Count ; n ++ ) { if ( n >= 1 && n <= 9 ) new_arr . Add ( num_to [ n ] ) ; } return new List < string > ( new_arr ) ; }
List < int > f ( int n ) { int sum = 0 , prod = 1 ; List < int > result = new List < int > ( ) ; for ( int i = 1 ; i <= n ; ++ i ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) result . Add ( prod ) ; else result . Add ( sum ) ; } return result ; }
int even_odd_palindrome ( int n ) { int even_count = 0 , odd_count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { String s = i . ToString ( ) ; String r_str = s . Substring ( 0 , - 1 ) ; if ( s == r_str ) { if ( i % 2 == 1 ) odd_count ++ ; else { even_count ++ ; } } } return [ even_count , odd_count ] ; }
Dictionary < string , int > histogram ( string test ) { Dictionary < string , int > count = new Dictionary < string , int > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . Length ; i ++ ) { if ( test [ i ] != " " ) { count . Add ( test [ i ] , 1 ) ; if ( count . ContainsKey ( test [ i ] ) ) { count [ test [ i ] ] = count [ test [ i ] ] + 1 ; if ( count [ test [ i ] ] > max ) max = count [ test [ i ] ] ; } } Dictionary < string , int > result = new Dictionary < string , int > ( ) ; foreach ( KeyValuePair < string , int > b in count ) { if ( b . Value == max ) { result . Add ( b . Key , b . Value ) ; } } return result ; }
List < char > reverse_delete ( String s , String c ) { List < char > ret = new List < char > ( ) ; for ( char ch = 0 ; ch < s . Length ; ch ++ ) { if ( ch not in c ) ret . Add ( ch ) ; } bool flag = "False" ; if ( ret . Count == ret . Count ) flag = "True" ; return [ ret . ToString ( ) , flag ] ; }
int [ ] sort_array ( int [ ] arr ) { int [ ] bin = new int [ arr . Length ] ; for ( int i = 0 ; i < arr . Length ; i ++ ) { int b = 0 ; int n = Math . Abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . Add ( b ) ; } for ( int i = 0 ; i < arr . Length ; i ++ ) { for ( int j = 1 ; j < arr . Length ; j ++ ) { if ( bin [ j ] < bin [ j - 1 ] bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) { int t = bin [ j ] ; bin [ j ] = bin [ j - 1 ] ; bin [ j - 1 ] = t ; arr [ j ] = t ; } } } return arr ; }
char get_closest_vowel ( string word ) { string vowels = "AEIOUaeiou" ; for ( int i = word . Length - 2 ; i >= 0 ; i -- ) { if ( word [ i ] in vowels && word [ i + 1 ] not in vowels && word [ i - 1 ] not in vowels ) { return word [ i ] ; } } return "" ; }
string match_parens ( string lst ) { List < String > strings = new List < String > ( ) ; for ( int l = 0 ; l < strings . Count ; l ++ ) { int count = 0 ; foreach ( char c in l ) { if ( c == "(" ) count ++ ; if ( c == ")" ) count -- ; if ( count < 0 ) break ; } if ( count == 0 ) return "Yes" ; } return "No" ; }
int maximum ( int [ ] arr , int k ) { if ( k == 0 ) return [ ] ; Array . Sort ( arr ) ; Array . Reverse ( arr ) ; return arr [ - k : ] ; }
bool valid_date ( string date ) { int n = date . Length ; if ( n != 10 ) return false ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 i == 5 ) { if ( date [ i ] != "-" ) return false ; } else if ( date [ i ] . isdigit ( ) ) return false ; } int month = date [ 0 : 2 ] ; int day = date [ 3 : 5 ] ; int year = date [ 6 : 10 ] ; if ( day < 1 day > 31 ) return false ; if ( day == 31 && ( month == 4 month == 6 month == 9 month == 11 month == 2 ) ) return false ; if ( day == 30 && month == 2 ) return false ; return true ; }
List < String > split_words ( string txt ) { List < String > current = new List < String > ( ) ; List < String > result = new List < String > ( ) ; if ( " " in txt ) { for ( int i = 0 ; i < txt . Length + 1 ; i ++ ) { if ( i == txt . Length txt [ i ] == ' ' ) { if ( current . Count > 0 ) result . Add ( "" . Join ( current ) ) ; current . Clear ( ) ; } else { current . Add ( txt [ i ] ) ; } } return result ; } if ( "," in txt ) { for ( int i = 0 ; i <= txt . Length ; i ++ ) { if ( i == txt . Length || txt [ i ] == "," ) { if ( current . Count > 0 ) result . Add ( "" . Join ( current ) ) ; current . Clear ( ) ; } else { current . Add ( txt [ i ] ) ; } } return result ; } int num = 0 ; }
int [ ] tri ( int n ) { if ( n == 0 ) return [ 1 ] ; int [ ] tris = new int [ n + 1 ] ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) tris . Add ( i / 2 + 1 ) ; else tris . Add ( tris [ i - 1 ] + tris [ i - 2 ] + ( i + 3 ) / 2 ) ; } return tris ; }
bool check_if_last_char_is_a_letter ( String txt ) { if ( ! txt ) return false ; return txt [ - 1 ] . isalpha ( ) && ( txt . Length == 1 txt [ - 2 ] . isalpha ( ) ) ; }
List < int > order_by_points ( List < int > nums ) { List < int > result = new List < int > ( ) ; for ( int num = 0 ; num < nums . Count ; num ++ ) { string w = nums . ToString ( ) ; int sum = 0 ; for ( int c = 0 ; c < w . Length ; c ++ ) sum += ( int ) c - ( int ) '0' ; if ( num < 0 ) sum -= 2 * ( int ) ( w [ 0 ] - '0' ) ; result . Add ( sum ) ; } for ( int i = 0 ; i < nums . Count ; i ++ ) { for ( int j = 1 ; j < nums . Count ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { result [ j ] = result [ j - 1 ] ; result [ j - 1 ] = result [ j ] ; } } } return result ; }
List < string > bf ( string planet1 , string planet2 ) { List < string > planets = new List < string > ( ) ; int idx1 = planets . Index ( planet1 ) ; int idx2 = planets . Index ( planet2 ) ; if ( planet2 in planets ) return planets [ planet2 ] ; if ( idx1 == - 1 idx2 == - 1 idx1 == idx2 ) return new List < string > ( ) ; return planets . List < string > ( ) ; }
List < int > sorted_list_sum ( List < int > lst ) { List < int > result = new List < int > ( ) ; foreach ( int i in lst ) { if ( i . Count % 2 == 0 ) result . Add ( i ) ; } result . Sort ( ) ; return result ; }
bool cycpattern_check ( HashSet < int > a , HashSet < int > b ) { for ( int i = 0 ; i < b . Count ; i ++ ) { int rotate = b [ i : ] + b [ 0 : i ] ; if ( rotate in a ) return true ; } return false ; }
int even_odd_count ( int num ) { int even_count = 0 , odd_count = 0 ; for ( int i = 0 ; i < Math . Abs ( num ) ; i ++ ) { if ( i % 2 == 0 ) even_count ++ ; else odd_count ++ ; } return [ even_count , odd_count ] ; }
string find_max ( string words ) { string max = "" ; int max_length = 0 ; for ( string word in words ) { List < int > unique = new List < int > ( ) ; for ( int w = 0 ; w < word . Length ; w ++ ) { if ( unique . Count > max_length ) { unique . Add ( w ) ; } if ( unique . Count == max_length && word < max ) { max = word ; max_length = unique . Count ; } } return max ; }
string solve ( string s ) { bool no_letter = true ; List < char > result = new List < char > ( ) ; for ( char ch = 0 ; ch < s . Length ; ch ++ ) { if ( ch . isupper ( ) ) { ch = ch . lower ( ) ; no_letter = false ; } else if ( ch . islower ( ) ) { ch = ch . upper ( ) ; no_letter = false ; } result . Add ( ch ) ; } if ( no_letter ) return String . Join ( "" , result ) ; else return result . ToString ( ) ; }
int most_frequent ( int [ ] arr , int n ) { Dictionary < int , int > hp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . ContainsKey ( arr [ i ] ) ) { hp [ arr [ i ] ] = hp [ arr [ i ] ] + 1 ; } else { hp . Add ( arr [ i ] , 1 ) ; } } int max_count = 0 ; int res = - 1 ; foreach ( KeyValuePair < int , int > b in hp ) { if ( max_count < b . Value ) { res = key . Key ; max_count = b . Value ; } } return res ; }
int find ( int [ ] a , int [ ] b , int k , int n1 , int n2 ) { HashSet < int > hash = new HashSet < int > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { hash . Add ( b [ i ] ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( a [ i ] not in hash ) missing ++ ; if ( missing == k ) return a [ i ] ; } return - 1 ; }
int solve_query ( int start , int end , int [ ] arr ) { Dictionary < int , int > frequency = new Dictionary < int , int > ( ) ; for ( int i = start ; i <= end ; i ++ ) { if ( frequency . ContainsKey ( arr [ i ] ) ) frequency [ arr [ i ] ] = frequency [ arr [ i ] ] + 1 ; else frequency . Add ( arr [ i ] , 1 ) ; } int count = 0 ; foreach ( KeyValuePair < int , int > b in frequency ) { if ( b . Value == value ) count ++ ; } return count ; }
int segregate ( int [ ] arr , int n ) { int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= 0 ) { int t = arr [ j ] ; arr [ j ] = arr [ i ] ; arr [ i ] = t ; j ++ ; } } return j ; }
int count_triplets ( int [ ] a , int n ) { HashSet < int > hash = new HashSet < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { hash . Add ( a [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( xr in hash && xr != a [ i ] && xr != a [ j ] ) count ++ ; } } return ( count / 3 ) ; }
int least_frequent ( int [ ] arr , int n ) { Dictionary < int , int > hp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . ContainsKey ( arr [ i ] ) ) { hp [ arr [ i ] ] = hp [ arr [ i ] ] + 1 ; } else { hp . Add ( arr [ i ] , 1 ) ; } } int min_count = n + 1 ; int res = - 1 ; foreach ( KeyValuePair < int , int > entry in hp ) { if ( min_count >= entry . Value ) { res = entry . Key ; min_count = entry . Value ; } } return res ; }
int find_permutations ( int [ ] arr ) { int cnt = 0 ; int max_ind = - 1 , min_ind = 10000000 ; int n = arr . Length ; Dictionary < int , int > index_of = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { index_of . Add ( arr [ i ] , i + 1 ) ; } for ( int i = 1 ; i <= n ; i ++ ) { max_ind = Math . Max ( max_ind , index_of . Get ( i , 0 ) ) ; min_ind = Math . Min ( min_ind , index_of . Get ( i , 0 ) ) ; if ( max_ind - min_ind + 1 == i ) cnt ++ ; } return cnt ; }
int form_quadruplets ( int [ ] arr , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; Array . Sort ( arr , new sortHelper ( ) ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; }
string lexicographically_maximum ( string s , int n ) { Dictionary < char , int > m = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . ContainsKey ( s [ i ] ) ) { m [ s [ i ] ] = m [ s [ i ] ] + 1 ; } else { m . Add ( s [ i ] , 1 ) ; } } List < char > v = new List < char > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == 'a' ) { v . Add ( ( char ) i ) ; } } int j = v . Count - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( v [ j ] < ( char ) s [ i ] ) { continue ; } m [ s [ i ] ] -- ; s = s . Substring ( 0 , i ) + v [ j ] + s [ i + 1 : ] ; j -- ; } if ( j < 0 ) { break ; } } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) { break ; } if ( s [ i ] >= 'a' + min ( n , 25 ) || s [ i ] in m && m [ s [ i ] ] > 1 ) { m [ s [ i ] ] -- ; s = s . Substring ( 0 , i ) + v [ l ] + s [ i + 1 : ] ; l ++ ; } } return s ; }
int no_of_valid_kbers ( int k , int [ ] arr ) { HashSet < int > st = new HashSet < int > ( ) ; while ( k != 0 ) { st . Add ( k % 10 ) ; k /= 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . Length ; i ++ ) { int no = arr [ i ] ; bool flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( digit not in st ) { flag = false ; break ; } no = no / 10 ; } if ( flag == true ) { count ++ ; } } return count ; }
int del_cost ( String s , int [ ] cost ) { int ans = 0 ; Dictionary < char , int > for_max = new Dictionary < char , int > ( ) ; Dictionary < char , int > for_tot = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( ! for_max . ContainsKey ( s [ i ] ) ) for_max [ s [ i ] ] = cost [ i ] ; else for_max [ s [ i ] ] = Math . Max ( cost [ i ] , for_max [ s [ i ] ] ) ; if ( ! for_tot . ContainsKey ( s [ i ] ) ) for_tot [ s [ i ] ] = cost [ i ] ; else for_tot [ s [ i ] ] += cost [ i ] ; } foreach ( KeyValuePair < char , int > entry in for_max ) { ans += entry . Value - value ; } return ans ; }
string replace_duplicates ( string names ) { Dictionary < char , int > hmap = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < names . Length ; i ++ ) { if ( ! hmap . ContainsKey ( names [ i ] ) ) hmap . Add ( names [ i ] , 1 ) ; else hmap . Remove ( names [ i ] ) ; int count = hmap [ names [ i ] ] ; hmap . Add ( names [ i ] , count + 1 ) ; names [ i ] += str ( count ) ; } return names ; }
List < int > minmax_numbers ( int [ , ] matrix , List < int > res ) { HashSet < int > s = new HashSet < int > ( ) ; for ( int i = 0 ; i < matrix . Length ; i ++ ) { int min_r = int . MaxValue ; for ( int j = 0 ; j < matrix [ i ] . Count ; j ++ ) { min_r = Math . Min ( min_r , matrix [ i , j ] ) ; } s . Add ( min_r ) ; } for ( int j = 0 ; j < matrix [ 0 ] . Count ; j ++ ) { int max_c = Int32 . MinValue ; for ( int i = 0 ; i < matrix . Length ; i ++ ) { max_c = Math . Max ( max_c , matrix [ i , j ] ) ; } if ( max_c in s ) res . Add ( max_c ) ; } return res ; }
int length_of_longest_ap ( int [ ] a , int n ) { Dictionary < int , int > dp = new Dictionary < int , int > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int d = a [ j ] - a [ i ] ; if ( dp . ContainsKey ( d ) ) { dp [ d , j ] = dp [ d , i ] + 1 ; } else dp [ d , j ] = 2 ; } } return res ; }
char find_kth_char ( int n , int k ) { char prev = "A" ; char cur = "" ; if ( n == 1 ) return "A" ; for ( int i = 2 ; i <= n ; i ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . Length ; i ++ ) { if ( prev [ i ] == "A" ) prev = prev . Substring ( 0 , i ) + "B" + prev [ i + 1 : ] ; else prev = prev . Substring ( 0 , i ) + "A" + prev [ i + 1 : ] ; } prev = prev [ : : - 1 ] ; cur += prev ; prev = cur ; } return cur [ k - 1 ] ; }
int find_kth_largest ( String s , int k ) { List < String > tmp = new List < String > ( s ) ; tmp . Sort ( ) ; return tmp . Peek ( ) ; }
int sub_arraylen ( int [ ] arr , int n , int k ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; mp . Add ( arr [ 0 ] , 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; if ( mp . ContainsKey ( arr [ i ] ) ) { mp [ arr [ i ] ] = i ; } else { int x = arr [ i ] - k ; if ( x == 0 ) len = Math . Min ( len , i ) ; if ( mp . ContainsKey ( x ) ) { len = Math . Min ( len , i ) ; } else { len = Math . Min ( len , i - mp . Get ( x , 0 ) ) ; } } } return len ; }
int find_max_len ( int [ ] a , int k ) { int n = a . Length ; Array . Sort ( vis ) ; Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . Add ( a [ i ] , i ) ; } int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vis [ i ] ) { int check = a [ i ] * k  ; if ( mp . ContainsKey ( check ) ) { c ++ ; vis [ mp [ check ] ] = true ; } } } return n - c ; }
List < int > min_distance_points ( int [ ] a , int k , int n ) { Dictionary < int , int > m = new Dictionary < int , int > ( ) ; Queue < int > q = new Queue < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m [ a [ i ] ] = 1 ; q . Enqueue ( a [ i ] ) ; } List < int > ans = new List < int > ( ) ; while ( k > 0 ) { int x = q . Peek ( ) ; q . Dequeue ( ) ; if ( x - 1 ) { m [ x - 1 ] = 1 ; q . Enqueue ( x - 1 ) ; ans . Enqueue ( x - 1 ) ; k -- ; } if ( x + 1 ) { m [ x + 1 ] = 1 ; q . Enqueue ( x + 1 ) ; ans . Enqueue ( x + 1 ) ; k -- ; } } return ans ; }
bool isValidLen ( String s , int length , int k ) { int n = s . Length ; Dictionary < char , int > mp = new Dictionary < char , int > ( ) ; int right = 0 ; while ( right < length ) { if ( mp . ContainsKey ( s [ right ] ) ) { mp [ s [ right ] ] ++ ; } else { mp . Add ( s [ right ] , 1 ) ; } right ++ ; } if ( mp . ContainsKey ( k ) ) return true ; while ( right < n ) { if ( mp . ContainsKey ( s [ right ] ) ) { mp [ s [ right ] ] ++ ; } else { mp . Add ( s [ right ] , 1 ) ; } right ++ ; } if ( mp . ContainsKey ( s [ right - length ] ) ) { mp [ s [ right - length ] ] -- ; } if ( mp . ContainsKey ( s [ right - length ] ) ) { mp [ s [ right - length ] ] = 0 ; } else { mp . Add ( s [ right - length ] , 1 ) ; } } if ( mp . ContainsKey ( s [ right - length ] ) ) { mp [ s [ right - length ] ] = 1 ; } if ( mp . ContainsKey ( s [ right - length ] ) ) { mp [ s [ right - length ] ] = 0 ; } if ( mp . ContainsKey ( s [ right - length ] ) ) { mp [ s [ right - length ] ] = 1 ; } else { mp . Add ( s [ right - length ] , 1 ) ; } } return mp . Count <= k ; }
int partition ( int [ ] arr , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; arr [ i ] = arr [ j ] ; arr [ j ] = arr [ i ] ; } } arr [ i + 1 ] = arr [ high ] ; arr [ high ] = null ; return i + 1 ; }
int str_score ( String strs , String s , int n ) { Dictionary < String , int > m = new Dictionary < String , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . ContainsKey ( strs [ i ] ) ) { m [ strs [ i ] ] = i + 1 ; } else { m . Add ( strs [ i ] , 1 ) ; } } if ( s . Length == 0 ) return 0 ; int score = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { score += s [ i ] - 'a' + 1 ; } score = score * m [ s ]  ; return score ; }
List < int > count_ele ( Stack < int > s , Stack < int > a , int n ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; List < int > ans = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; if ( mp . ContainsKey ( num ) ) { ans . Add ( 0 ) ; } else { int cnt = 0 ; while ( s . Peek ( ) != num ) { mp [ s . Peek ( ) ] = true ; s . Pop ( ) ; cnt ++ ; } s . Push ( cnt ) ; } } return ans ; }
int maxDistinctChar ( String s , int n , int k ) { Dictionary < char , int > freq = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . ContainsKey ( s [ i ] ) ) { freq [ s [ i ] ] = freq [ s [ i ] ] + 1 ; } else { freq . Add ( s [ i ] , 1 ) ; } } List < int > v = new List < int > ( ) ; for ( int i = 0 ; i < v . Count ; i ++ ) { int mn = Math . Min ( v [ i ] - 1 , k ) ; v [ i ] = v [ i ] - mn ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . Count ; i ++ ) { int mn = Math . Min ( v [ i ] , k ) ; v [ i ] = v [ i ] - mn  ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . Count ; i ++ ) { if ( v [ i ] == 1 ) { res ++ ; } } return res ; }
int find_kth ( int [ ] arr , int n , int k ) { Dictionary < int , int > missing = new Dictionary < int , int > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing [ arr [ i ] ] = 1 ; } int max_m = arr . Max ( ) ; int min_m = arr . Min ( ) ; for ( int i = min_m + 1 ; i <= max_m ; i ++ ) { if ( i not in missing ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; }
bool almost_sort ( int [ ] a , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = a [ i ] ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { return false ; } } return true ; }
int maximum_sum ( string s , int n , int k ) { int sum = 0 ; int [ ] freq = new int [ 256 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ i ] = 0 ; for ( int i = 0 ; i < n ; i ++ ) freq [ s [ i ] ] ++ ; Array . Sort ( freq , new sortHelper ( ) ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; }
int find_min_operations ( int [ ] arr , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int j = i ; j < n ; j ++ ) { if ( freq . ContainsKey ( arr [ j ] ) ) { freq [ arr [ j ] ] = freq [ arr [ j ] ] + 1 ; } else { freq . Add ( arr [ j ] , 1 ) ; } } int max1 = 0 , num = 0 ; foreach ( KeyValuePair < int , int > b in freq ) { if ( b . Value > max1 ) { max1 = value . Value ; num = key . Key ; } } foreach ( KeyValuePair < int , int > entry in freq ) { if ( entry . Value != num ) { operations += entry . Value ; } } } return operations ; }
List < String > sub_string ( String s , int n ) { List < String > v = new List < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int len = 1 ; len <= n - i ; len ++ ) { String find = s [ i : i + len ] ; v . Add ( find ) ; } } return v ; }
bool check_unique_frequency ( int [ ] arr , int n ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . ContainsKey ( arr [ i ] ) ) { freq [ arr [ i ] ] = freq [ arr [ i ] ] + 1 ; } else { freq . Add ( arr [ i ] , 1 ) ; } } HashSet < int > unique_freq = new HashSet < int > ( ) ; foreach ( KeyValuePair < int , int > i in freq ) { if ( freq [ i ] in unique_freq ) { return false ; } else { unique_freq . Add ( freq [ i ] ) ; } } return true ; }
int min_cost ( string str1 , string str2 , int n ) { int cost = 0 ; List < char > tmp = new List < char > ( str1 ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 [ i ] ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) { tmp [ i ] = tmp [ i + 1 ] ; tmp [ i + 1 ] = tmp [ i ] ; cost ++ ; } else { cost ++ ; } } } return cost ; }
bool is_valid_num ( string x ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < x . Length ; i ++ ) { if ( mp . ContainsKey ( x [ i ] - "0" ) ) return false ; else if ( x [ i ] - "0" > 5 ) return false ; else { mp . Add ( x [ i ] - "0" , 1 ) ; } } return true ; }
int minimize_diff ( int [ ] arr , int n , int k ) { int max_element = arr . Max ( ) ; int min_element = arr . Min ( ) ; if ( max_element - min_element <= k ) return max_element - min_element  ; int avg = ( max_element + min_element ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) arr [ i ] -= k ; else arr [ i ] += k ; } max_element = max ( arr ) ; min_element = min ( arr ) ; return max_element - min_element ; }
int get_min_cost ( int [ ] arr , int n ) { int min_ele = arr . Min ( ) ; return min_ele * ( n - 1 ) ; }
bool possibility ( char [ ] m , int length , char [ ] s ) { int count_odd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( m [ s [ i ] - '0' ] & 1 ) count_odd ++ ; if ( count_odd > 1 ) return false ; } return true ; }
int minimum_cost_of_breaking ( int [ ] x , int [ ] y , int m , int n ) { int res = 0 ; Array . Sort ( x , new sortHelper ( ) ) ; Array . Sort ( y , new sortHelper ( ) ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) total += x [ i ] ; i ++ ; res += total * vert ; total = 0 ; while ( j < n ) total += y [ j ] ; j ++ ; res += total * hzntl ; return res ; }
int find_maximum_score ( int [ ] a , int n ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . ContainsKey ( a [ i ] ) ) { freq [ a [ i ] ] = freq [ a [ i ] ] + 1 ; } else { freq . Add ( a [ i ] , 1 ) ; } } int [ ] dp = new int [ max ( a ) + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = freq . Get ( 1 , 0 ) ; for ( int i = 2 ; i < dp . Count ; i ++ ) dp [ i ] = Math . Max ( dp [ i - 1 ] , dp [ i - 2 ] + freq . Get ( i , 0 ) * i ) ; return dp [ - 1 ] ; }
int count_ways ( String s , int t , int k , int mod ) { int n = s . Length ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = s [ i : n ] + s [ : i ] ; if ( p == t ) a ++ ; else b ++ ; } int [ ] dp1 = new int [ k + 1 ] ; int [ ] dp2 = new int [ k + 1 ] ; for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ; dp2 [ i ] = ( dp1 [ i - 1 ] * b ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ; } return dp1 [ k ] ; }
int find_subarray_sum ( int [ ] arr , int n , int k ) { Dictionary < int , int > prev_sum = new Dictionary < int , int > ( ) ; int res = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ] ; if ( curr_sum == k ) res ++ ; if ( prev_sum . ContainsKey ( curr_sum - k ) ) res += prev_sum [ curr_sum - k ] ; else prev_sum . Add ( curr_sum , 1 ) ; } return res ; }
int maximum_occurrence ( string s ) { int n = s . Length ; Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { String temp = "" ; temp += s [ i ] ; if ( freq . ContainsKey ( temp ) ) { freq [ temp ] = freq [ temp ] + 1 ; } else { freq . Add ( temp , 1 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { String temp = "" ; temp += s [ i ] ; temp += s [ j ] ; freq [ temp ] = freq [ temp ] + 1 ; } } int answer = Int32 . MinValue ; foreach ( KeyValuePair < int , int > b in freq ) { answer = Math . Max ( answer , b . Value ) ; } return answer ; }
int count_characters ( String [ ] strings , char [ ] chars ) { int res = 0 ; Dictionary < char , int > freq = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < chars . Length ; i ++ ) { if ( freq . ContainsKey ( chars [ i ] ) ) { freq [ chars [ i ] ] = freq [ chars [ i ] ] + 1 ; } else { freq . Add ( chars [ i ] , 1 ) ; } } foreach ( String str in strings ) { bool flag = true ; foreach ( char c in str ) { if ( c not in freq ) { flag = false ; break ; } } if ( flag ) { res += str . Length ; } } return res ; }
int distinct_substring ( char [ ] p , char [ ] q , int k , int n ) { HashSet < String > ss = new HashSet < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; String s = "" ; for ( int j = i ; j < n ; j ++ ) { int pos = p [ j ] - 'a' ; sum += q [ pos ] - '0' ; s += p [ j ] ; if ( sum <= k ) ss . Add ( s ) ; else break ; } } return ss . Count ; }
int unique_morse_rep ( string [ ] arr ) { string [ ] morse_code = new string [ ] { ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , ".." , ".---" } ; HashSet < string > st = new HashSet < string > ( ) ; int n = arr . Length ; for ( int i = 0 ; i < n ; i ++ ) { string temp = "" ; int m = arr [ i ] . Length ; for ( int j = 0 ; j < m ; j ++ ) { temp += morse_code [ arr [ i ] [ j ] - 'a' ] ; } st . Add ( temp ) ; } return st . Count ; }
int count_substrings ( String str , int k ) { int n = str . Length ; int answer = 0 ; Dictionary < char , int > map = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( ! map . ContainsKey ( str [ i ] ) ) { map [ str [ i ] ] = 1 ; } else { map . Add ( str [ i ] , 1 ) ; } } if ( map . ContainsKey ( k ) ) { answer ++ ; } for ( int i = k ; i < n ; i ++ ) { if ( ! map . ContainsKey ( str [ i ] ) ) { map [ str [ i ] ] = 1 ; } else { map . Add ( str [ i ] , 1 ) ; } } if ( map . ContainsKey ( k ) ) { answer ++ ; } else { answer ++ ; } } return answer ; }
bool can_construct ( string s , int k ) { Dictionary < char , int > m = new Dictionary < char , int > ( ) ; int p = 0 ; if ( s . Length == k ) { return true ; } for ( int i = 0 ; i < s . Length ; i ++ ) { if ( m . ContainsKey ( s [ i ] ) ) { m [ s [ i ] ] = m [ s [ i ] ] + 1 ; } if ( k > s . Length ) { return false ; } else { foreach ( KeyValuePair < char , int > b in m ) { if ( b . Value % 2 != 0 ) { p ++ ; } } } if ( k < p ) { return false ; } return true ; }
bool equal_ignore_case ( string str1 , string str2 ) { str1 = str1 . ToUpper ( ) ; str2 = str2 . ToUpper ( ) ; return str1 == str2 ; }
int find_longest_sub ( string bin ) { int n = bin . Length ; int sum = 0 ; Dictionary < int , int > prev_sum = new Dictionary < int , int > ( ) ; int max_len = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( bin [ i ] == "1" ) sum ++ ; else { sum -- ; } if ( sum > 0 ) max_len = i + 1 ; else if ( sum <= 0 ) { if ( prev_sum . ContainsKey ( sum - 1 ) ) { int curr_len = i - prev_sum [ sum - 1 ] ; max_len = Math . Max ( max_len , curr_len ) ; } } if ( sum not in prev_sum ) prev_sum . Add ( sum , i ) ; } return max_len ; }
bool has_all_codes ( String s , int k ) { HashSet < String > us = new HashSet < String > ( ) ; for ( int i = 0 ; i <= s . Length ; i ++ ) { us . Add ( s [ i : k ] ) ; } return us . Count == 1 << k ; }
bool check_palin ( string word ) { int n = word . Length ; word = word . ToLower ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( word [ i ] != word [ n - 1 ] ) { return false ; } n -- ; } return true ; }
string convert ( string str ) { string w = "" , z = "" ; str = str . ToUpper ( ) + " " ; for ( int i = 0 ; i < str . Length ; i ++ ) { char ch = str [ i ] ; if ( ch != ' ' ) w += ch ; else { z += w [ 0 ] . ToLower ( ) + w [ 1 : w . Length ] + " " ; w = "" ; } } return z ; }
int max_lines ( int n , int x1 , int y1 , int [ ] x2 , int y2 ) { HashSet < int > s = new HashSet < int > ( ) ; int slope = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( x1 [ i ] == x2 [ i ] ) slope = int . MaxValue ; else { slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; } s . Add ( slope ) ; } return s . Count ; }
Dictionary < int , int > prime_factor ( int n ) { Dictionary < int , int > primef = new Dictionary < int , int > ( ) ; while ( n % 2 == 0 ) { if ( primef . ContainsKey ( 2 ) ) primef [ 2 ] = primef [ 2 ] + 1 ; else primef [ 2 ] = 1 ; n = n / 2 ; } for ( int i = 3 ; i <= Math . Sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { if ( primef . ContainsKey ( i ) ) primef [ i ] = primef [ i ] + 1 ; else primef [ i ] = 1 ; n = n / i ; } } if ( n > 2 ) primef [ n ] = 1 ; return primef ; }
string is_divisible_by_divisor ( string s , int d ) { s %= d ; HashSet < string > hash_map = new HashSet < string > ( ) ; hash_map . Add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d  ; s %= d ; if ( hash_map . ContainsKey ( s ) ) { return "Yes" ; } return "No" ; } else { hash_map . Add ( s ) ; } } return "Yes" ; }
bool odd_sum ( int [ ] a , int n , int k ) { HashSet < int > odd = new HashSet < int > ( ) ; HashSet < int > even = new HashSet < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { even . Add ( a [ i ] ) ; } else { odd . Add ( a [ i ] ) ; } } if ( odd . Count >= k ) return true ; bool flag = false ; for ( int i = 1 ; i <= k ; i += 2 ) { int needed = k - i  ; if ( needed <= even . Count ) return true ; } return flag ; }
int day_of_year ( string date ) { int [ ] days = new int [ ] { 31 , 28 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int year = date [ 0 : 4 ] ; int month = date [ 5 : 7 ] ; int day = date [ 8 : ] ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 year % 400 == 0 ) ) day ++ ; while ( month > 1 ) { day = day + days [ month - 2 ] ; month -- ; } return day ; }
bool is_perfect_square ( int [ ] arr , int n ) { Dictionary < int , int > umap = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( umap . ContainsKey ( arr [ i ] ) ) { umap [ arr [ i ] ] = umap [ arr [ i ] ] + 1 ; } else { umap . Add ( arr [ i ] , 1 ) ; } } foreach ( KeyValuePair < int , int > b in umap ) { if ( b . Value % 2 == 1 ) { return false ; } } return true ; }
int min_moves ( int n ) { string s = n . ToString ( ) ; int ans = int . MaxValue ; int length = s . Length ; for ( int i = 0 ; i < length ; i ++ ) { for ( int j = 0 ; j < length ; j ++ ) { if ( i == j ) continue ; List < int > t = new List < int > ( s ) ; int cur = 0 ; for ( int k = i ; k < length - 1 ; k ++ ) { t [ k ] = t [ k + 1 ] ; t [ k ] = t [ k ] ; cur ++ ; } for ( int k = j - ( j > i ) ; k += 2 ) { t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = t [ k ] ; cur ++ ; } for ( int k = j - ( j > i ) ; k += 2 ) { t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = t [ k + 1 ] ; t [ k ] = t [ k ] ; cur ++ ; } int pos = - 1 ; for ( int k = 0 ; k < length ; k ++ ) { if ( t [ k ] != '0' ) { pos = k  ; break ; } } for ( int k = pos ; k >= 0 ; k -- ) { t [ k ] = t [ k - 1 ] ; t [ k - 1 ] = t [ k ] ; cur ++ ; } int nn = Int32 . Parse ( t . ToString ( ) ) ; if ( nn % 25 == 0 ) { ans = Math . Min ( ans , cur ) ; } } } if ( ans == sys . maxsize ) return - 1 ; return ans ; }
int minimum_operations ( int [ ] a , int n ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . ContainsKey ( a [ i ] ) ) { mp [ a [ i ] ] = mp [ a [ i ] ] + 1 ; } else { mp . Add ( a [ i ] , 1 ) ; } } int count = 0 ; foreach ( KeyValuePair < int , int > b in mp ) { if ( b . Value > 1 ) { count += b . Value - 1 ; } } return count ; }
int kaprekar_rec ( int n , int prev ) { if ( n == 0 ) return 0 ; prev = n ; int [ ] digits = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) digits [ i ] = n % 10 ; n = n / 10 ; Array . Sort ( digits ) ; int asc = 0 , for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } digits . Sort ( ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) desc = desc * 10 + digits [ i ] ; int diff = Math . Abs ( asc - desc ) ; if ( diff == prev ) return diff ; return kaprekar_rec ( diff , prev ) ; }
string fraction_to_decimal ( int numr , int denr ) { string res = "" ; Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; int rem = numr % denr  ; while ( rem != 0 && rem not in mp ) { mp . Add ( rem , res . Length ) ; rem = rem * 10 ; res += String . Join ( "" , res_part ) ; rem = rem % denr ; } if ( rem == 0 ) return "" ; if ( mp . ContainsKey ( rem ) ) { return res [ mp [ rem ] : res . Length ; } return "" ; }
bool is_fancy ( string num ) { Dictionary < char , int > fp = new Dictionary < char , int > ( ) ; fp [ "0" ] = "0" ; fp [ "1" ] = "1" ; fp [ "6" ] = "9" ; fp [ "8" ] = "8" ; fp [ "9" ] = "6" ; int n = num . Length ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( num [ l ] not in fp || fp [ num [ l ] ] != num [ r ] ) { return false ; } l ++ ; r -- ; } return true ; }
double distinct_odd_ratio ( int [ ] numbers ) { int distinct_count = numbers . Count ; int distinct_odd_count = numbers . Count ; if ( distinct_odd_count % 2 == 1 ) return distinct_odd_count / distinct_count ; return distinct_count ; }
int compare_sum ( List < int > numbers , List < int > words ) { int int_sum = sum ( numbers ) ; int word_length_sum = sum ( words ) ; if ( int_sum < word_length_sum ) return - 1 ; else if ( int_sum > word_length_sum ) return 1 ; else return 0 ; }
bool all_longer_than ( List < String > short_words , List < String > long_words ) { int max_of_short = Math . Max ( short_words . Count , short_words . Count ) ; int min_of_long = Math . Min ( long_words . Count , long_words . Count ) ; return min_of_long > max_of_short ; }
int compare_odd_even_range ( int [ ] numbers ) { int range_odd = Math . Max ( [ n for ( int i = 0 ; i < numbers . Length ; i ++ ) { if ( n % 2 == 1 ) { range_odd = Math . Max ( [ n for ( int n = numbers [ i ] , n % 2 == 1 ] ) - Math . Min ( [ n for ( int n = numbers [ n % 2 == 1 ] ) ; } int range_even = Math . Max ( [ n for ( int n = 0 ; n % 2 == 0 ; n ++ ) { if ( range_odd < range_even ) { return - 1 ; } if ( range_odd > range_even ) { return 1 ; } return 0 ; }
int average_distinct_length ( String words ) { HashSet < String > distinct_words = new HashSet < String > ( words ) ; int average_len = ( double ) distinct_words . Count / ( double ) distinct_words . Count ; return average_len ; }
int withdraw_balance ( int start , int [ ] withdrawals ) { int end = functools . reduce ( lambda balance , nextWithdrawal : balance - nextWithdrawal if ( nextWithdrawal <= balance ) balance = balance - nextWithdrawal ; return end ; }
String first_short_and_starts_with_o ( String [ ] words ) { String matched_element = null ; return matched_element ; }
int big_number_at_index ( int [ ] numbers , int index ) { int target_num = numbers [ index ] ; return target_num ; }
bool contains_square_in_range ( int range_start , int range_length ) { bool contains_square = any ( [ Math . Sqrt ( n ) ] ) ; return contains_square ; }
Dictionary < int , int > group_numbers_by_mod ( int [ ] numbers , int mod ) { Dictionary < int , int > number_groups = new Dictionary < int , int > ( ) ; foreach ( int n in numbers ) { if ( number_groups . ContainsKey ( k ) ) { number_groups [ k ] = number_groups [ k ] + g ; } else { number_groups . Add ( k , g ) ; } } return number_groups ; }
Dictionary < int , int > group_words_by_first_char ( String words ) { Dictionary < int , int > word_groups = new Dictionary < int , int > ( ) ; for ( int k = 0 ; k < words . Length ; k ++ ) { if ( word_groups . ContainsKey ( k ) ) { word_groups [ k ] = word_groups [ k ] + g ; } else { word_groups . Add ( k , g ) ; } } return word_groups ; }
List < String > order_by_length_and_descending ( List < String > words ) { List < String > sorted_words = new List < String > ( words ) ; sorted_words . Sort ( ) ; return sorted_words ; }
List < int > order_first_char_descending_reverse ( List < int > words ) { List < int > sorted_words = new List < int > ( words ) ; sorted_words . Sort ( ) ; return sorted_words ; }
List < int > get_sublist_of_negative ( List < int > numbers , int start , int length ) { List < int > sub_list = new List < int > ( ) ; return sub_list ; }
List < int > get_positive_sequence ( int [ ] numbers ) { List < int > sub_sequence = new List < int > ( ) ; return sub_sequence ; }
List < int > get_larger_than_index_sequence ( int [ ] numbers ) { List < int > sub_sequence = new List < int > ( ) ; for ( int i = 0 ; i < numbers . Length ; i ++ ) { sub_sequence . Add ( x [ 1 ] ) ; } return sub_sequence ; }
List < int > rearrange_word_by_indexes ( List < int > words , int [ ] indexes ) { List < int > new_indexes = new List < int > ( ) ; new_words = new List < int > ( ) ; new_indexes . Add ( 0 ) ; return new_words ; }
List < pair > get_words_upper_lower ( List < pair > words ) { List < pair > upper_lower_words = new List < pair > ( ) ; return upper_lower_words ; }
bool select_if_in_place ( int [ ] numbers ) { bool [ ] nums_in_place = new bool [ numbers . Length ] ; return nums_in_place ; }
List < pair > select_pairs ( List < pair > numbers_a , List < pair > numbers_b ) { List < pair > pairs = new List < pair > ( ) ; for ( int a = 0 ; a < numbers_a . Count ; a ++ ) pairs . Add ( new pair ( a , b ) ) ; return pairs ; }
string [ ] string_cross_join ( string [ ] end_words , string [ ] begin_words ) { string [ ] cross_strings = new string [ end_words . Length + ' ' + begin_words . Length ] ; return cross_strings ; }
int elements_contain_subword ( List < int > words , int subword ) { if ( all ( subword in w for ( int i = 0 ; i < words . Count ; i ++ ) return 1 ; else if ( any ( subword in w for ( int i = 0 ; i < words . Count ; i ++ ) return 0 ; else return - 1 ; }
List < int > concat_large_numbers ( List < int > numbers_a , List < int > numbers_b , int flag ) { List < int > all_numbers = new List < int > ( ) ; all_numbers . Add ( 0 ) ; all_numbers . Add ( 1 ) ; return all_numbers ; }
int dot_product ( int [ ] vector_a , int [ ] vector_b ) { int dot_product = sum ( [ a * b ] ) ; return dot_product ; }
int set_difference ( int [ ] set_a , int [ ] set_b ) { int difference = new int [ set_a . symmetric_difference ( set_b ) . Count ] ; return difference ; }
