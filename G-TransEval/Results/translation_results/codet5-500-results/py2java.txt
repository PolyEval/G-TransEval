int greatest_common_divisor ( int a : int , int b : int ) { if ( a == 0 b == 0 ) return a + b  ; if ( a == b ) return a ; if ( a > b ) return greatest_common_divisor ( a % b , b ) ; else return greatest_common_divisor ( a , b % a ) ; }
int largest_divisor ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) return n / i ; } return 1 ; }
boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 2 ; k < n ; k ++ ) if ( n % k == 0 ) return false ; return true ; }
int fizz_buzz ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 11 == 0 i % 13 == 0 ) { int q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) count ++ ; } q /= 10 ; } } return count ; }
int prime_fib ( int n ) { int f0 = 0 , f1 = 1 ; while ( n > 0 ) { int p = f0 + f1 ; boolean is_prime = p >= 2 ; for ( int i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) n -- ; } f0 = f1  ; f1 = p ; } return f1  ; }
float triangle_area ( float a , float h ) { float area = a * h / 2 ; return area ; }
int modp ( int n , int p ) { int ret = 1 ; for ( int i = 0 ; i < n ; i ++ ) ret = ( ret * 2 ) % p ; return ret ; }
int add ( int x , int y ) { return x + y ; }
int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 1 ; return fib ( n - 1 ) + fib ( n - 2 ) ; }
int largest_prime_factor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) { while ( n % i == 0 && n > i ) n /= i ; } return n ; }
int sum_to_n ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) result += i ; return result ; }
int fibfib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 0 ; if ( n == 2 ) return 1 ; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
boolean is_multiply_prime ( int a ) { int num = 0 ; for ( int i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) { a /= i ; num ++ ; } } return num == 3 ; }
boolean is_simple_power ( int x , int n ) { if ( n == 1 ) return x == 1 ; int power = 1 ; while ( power < x ) power *= n ; return power == x ; }
int choose_num ( int x , int y ) { if ( x > y ) return - 1 ; if ( y % 2 == 0 ) return y ; if ( x == y ) return - 1 ; return y - 1 ; }
boolean is_equal_to_sum_even ( int n ) { return ( n % 2 == 0 && n >= 8 ) ; }
int special_factorial ( int n ) { int fact = 1 , special_fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; special_fact *= fact ; } return special_fact ; }
int x_or_y ( int n , int x , int y ) { boolean is_prime = n >= 2 ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) return x ; return y ; }
boolean right_angle_triangle ( int a , int b , int c ) { return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b  ; }
int fast_pow ( int n , int k ) { if ( k == 0 ) return 1 ; int temp = fast_pow ( n , k / 2 ) ; if ( k % 2 == 0 ) return temp * temp ; else return n * temp * temp ; }
boolean is_palin ( String s1 ) { int l = s1 . length ( ) / 2 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s1 . charAt ( i ) != s1 . charAt ( s . length ( ) - i - 1 ) ) return false ; } return true ; }
int find_sum ( int n ) { int ans = 0 , temp = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( temp < n ) break ; temp = i - 1 ; int num = 1 ; while ( temp < n ) { if ( temp + i <= n ) ans += i * num  ; else ans += ( n - temp ) * num ; temp += i ; num ++ ; } } return ans ; }
int get_next_gap ( int gap ) { gap = gap * 10 / 13 ; if ( gap < 1 ) return 1 ; return gap ; }
int count_non_decreasing ( int n ) { int k = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count /= i ; } return count ; }
int power ( int x , int y ) { if ( y == 0 ) return 1 ; else if ( y % 2 == 0 ) return power ( x , y / 2 ) * power ( x , y / 2 ) ; else return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; }
int power ( int x , int y ) { if ( y == 0 ) return 1 ; int temp = power ( x , y / 2 ) ; if ( y % 2 == 0 ) return temp * temp ; else { if ( y > 0 ) return x * temp * temp ; else return temp * temp / x ; } }
int multiply ( int x , int y ) { if ( y == 0 ) return 0 ; if ( y > 0 ) return x + multiply ( x , y - 1 ) ; if ( y < 0 ) return - multiply ( x , - y ) ; return 0 ; }
int smallest ( int x , int y , int z ) { if ( ! y / x ) return y if ( ! y / z ) else z ; return x if ( ! x / z ) else z ; }
boolean is_power_of_four ( int n ) { if ( n == 0 ) return false ; while ( n != 1 ) { if ( n % 4 != 0 ) return false ; n /= 4 ; } return true ; }
int mod_inverse ( int a , int m ) { int m0 = m , t , q ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { q = a / m ; t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) x1 += m0 ; return x1 ; }
int cnt_rotations ( String s , int n ) { String s2 = s + s ; int pre [ ] = new int [ 2 * n ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; if ( s2 [ i ] == 'a' s2 [ i ] == 'e' || s2 [ i ] == 'i' || s2 [ i ] == 'o' || s2 [ i ] == 'u' ) pre [ i ] ++ ; } int ans = 0 ; for ( int i = n - 1 ; i <= 2 * n - 1 ; i ++ ) { int r = i - n / 2 ; int left = pre [ r ]  ; if ( l >= 0 ) left -= pre [ l ] ; int right = x1 - left  ; if ( left > right ) ans ++ ; } return ans ; }
int binomial_coeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k  ; for ( int i = 0 ; i < k ; i ++ ) { res *= n - i  ; res /= i + 1 ; } return res ; }
boolean is_prefix ( String temp , String s ) { if ( temp . length ( ) < s . length ( ) ) return false ; else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( s . charAt ( i ) != temp . charAt ( i ) ) return false ; } return true ; }
String lexicographically_smallest_string ( String s , int n ) { int last_ze = - 1 ; String ans = "" ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { last_ze = i  ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i <= last_ze && s . charAt ( i ) == '0' ) { ans += s . charAt ( i ) ; } else if ( i > last_ze ) ans += s . charAt ( i ) ; } return ans ; }
int calculate_max ( int n , int m , int k ) { int ans = - 1 ; int low = 0 , high = m ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int val = 0 ; int l = k - 1 ; int r = n - k ; val += mid  ; if ( mid >= l ) val += l * ( 2 * mid - l - 1 ) / 2 ; else val += mid * ( mid - 1 ) / 2 + ( r - mid ) ; if ( mid >= r ) val += r * ( 2 * mid - r - 1 ) / 2 ; else val += mid * ( mid - 1 ) / 2 + ( l - mid ) ; if ( val <= m ) { ans = Math . max ( ans , mid ) ; low = mid + 1 ; } else high = mid - 1 ; } return ans ; }
int find_length ( String s , int i , int j ) { int required = i ; int length = 0 ; for ( int curr : s ) { if ( curr == required ) length ++ ; if ( required == i ) required = j  ; else required = i ; } return length ; }
boolean check_reverse ( int left_sum , int right_sum ) { int rev = 0 ; int temp = right_sum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp /= 10 ; } if ( rev == left_sum ) return true ; return false ; }
boolean is_composite ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return false ; if ( n % 2 == 0 n % 3 == 0 ) return true ; for ( int i = 5 ; i * i <= n ; i = i + 2 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return true ; return false ; }
int min_deletion ( String s ) { int n = s . length ( ) ; int first_idx1 = - 1 , last_idx0 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { first_idx1 = i  ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { last_idx0 = i  ; break ; } } if ( first_idx1 == - 1 last_idx0 == - 1 ) return 0 ; int count1 = 0 , count0 = 0 ; for ( int i = 0 ; i < last_idx0 ; i ++ ) { if ( s . charAt ( i ) == '1' ) count1 ++ ; } for ( int i = first_idx1 + 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) count0 ++ ; } return Math . min ( count0 , count1 ) ; }
int min_steps ( String s , int n ) { int cost = 0 ; int f [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int curr_ele = s . charAt ( i ) - 'a' ; int smaller = 0 ; for ( int j = curr_ele ; j <= curr_ele ; j ++ ) { if ( f [ j ] != 0 ) smaller += f [ j ] ; } if ( smaller == 0 ) cost += i + 1 ; else cost += i - smaller + 1 ; f [ s . charAt ( i ) - 'a' ] += 1 ; } return cost ; }
int number_of_ways ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 1 ; b < n ; b ++ ) { int c = n - ( a + b ) ; if ( a < b + c && b < a + c && c < a + b ) count ++ ; } } return count ; }
int slope_of_num ( int num [ ] , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) slope ++ ; else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) slope ++ ; } return slope ; }
int middle_of_three ( int a , int b , int c ) { int x = a - b  ; int y = b - c ; int z = a - c  ; if ( x * y > 0 ) return b  ; else if ( x * z > 0 ) return c  ; else return a ; }
int count_max_set_bits ( int left , int right ) { while ( ( left | ( left + 1 ) ) <= right ) left |= left + 1 ; return left ; }
int find_s ( int s ) { int l = 1 , r = s / 2 + 1  ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) return mid ; else if ( sum > s ) r = mid - 1 ; else l = mid + 1 ; } return - 1 ; }
boolean check ( String s ) { int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int ascii = ( s . charAt ( i ) ) ; if ( ascii < 96 ascii > 122 ) return false ; sum += ascii ; if ( min > ascii ) min = ascii ; if ( max < ascii ) max = ascii ; } min -= 1 ; int e_sum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == e_sum ; }
int minimum_possible_product ( int k ) { int res = 1 ; int r = ( 1 << k ) - 1 ; for ( int i = 0 ; i < k ; i ++ ) res *= r - 1 ; res *= r ; return res ; }
int find_in_grid ( int i , int j ) { if ( i == j ) return i * i - ( i - 1 ) ; else if ( i > j ) { if ( i % 2 == 0 ) return i * i - ( j - 1 ) ; else return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } else { if ( j % 2 == 0 ) return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; else return j * j - ( i - 1 ) ; } }
int find_min_operations_req_emp_str ( String s ) { int cnt_one = 0 , cnt_zero = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { if ( cnt_one > 0 ) { cnt_one -- ; } cnt_zero ++ ; } else { if ( cnt_zero > 0 ) { cnt_zero -- ; } cnt_one ++ ; } } return cnt_one + cnt_zero ; }
boolean is_reachable ( int x1 , int y1 , int x2 , int y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) { x2 %= y2 ; } else { y2 %= x2 ; } } if ( x2 == x1 ) return y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ; else if ( y2 == y1 ) return x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ; else return false ; }
int find_max_soln ( int n , int x , int y ) { int ans = Integer . MIN_VALUE ; for ( int k = 1 ; k <= n ; k ++ ) { if ( k % x == y ) ans = Math . max ( ans , k ) ; } return ans if ( ans >= 0 && ans <= n ) - 1 ; }
int number_of_pairs ( int n ) { int count = 0 ; for ( int i = 1 , j = n - 1 ; i < j ; i ++ , j -- ) { if ( ( i + j ) == n ) count ++ ; } return count ; }
int min_changes ( String s , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( s . charAt ( 0 ) != '1' ) count ++ ; ones ++ ; for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) zeros ++ ; else ones ++ ; if ( zeros > ones ) zeros -- ; ones ++ ; count ++ ; } return count ; }
int k_visible_from_left ( int n , int k ) { if ( n == k ) return 1 ; if ( k == 1 ) { int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) ans *= i ; return ans ; } return k_visible_from_left ( n - 1 , k - 1 ) + ( n - 1 ) * k_visible_from_left ( n - 1 , k ) ; }
double find ( int n , int sum ) { if ( sum > 6 * n sum < n ) return 0 ; if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) return 1.0 / 6 ; else return 0 ; } double s = 0 ; for ( int i = 1 ; i < 7 ; i ++ ) s += find ( n - 1 , sum - i ) / 6 ; return s ; }
int bin_coff ( int n , int r ) { int val = 1 ; if ( r > ( n - r ) ) r = n - r  ; for ( int i = 0 ; i < r ; i ++ ) val *= n - i ; val /= i + 1 ; return val ; }
int get_mask ( int val ) { int mask = 0 ; if ( val == 0 ) return 1 ; while ( val > 0 ) { int d = val % 10 ; mask |= ( 1 << d ) ; val /= 10 ; } return mask ; }
int ways_to_k_adjacent_set_bits ( int n , int k , int current_index , int adjacent_set_bits , int last_bit ) { if ( current_index == n ) { if ( adjacent_set_bits == k ) { return 1 ; } return 0 ; } int no_of_ways = 0 ; if ( last_bit == 1 ) { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits + 1 , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } else if ( last_bit != 1 ) { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } return no_of_ways ; }
int check_func ( int i , int j , char [ ] str ) { if ( str [ i ] == '(' && st [ j ] == ')' ) { return 1 ; } if ( st [ i ] == '(' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == ')' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == ']' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '}' ) { return 1 ; } return 0 ; }
int find_golomb ( int n ) { if ( n == 1 ) return 1 ; return 1 + find_golomb ( n - find_golomb ( find_golomb ( n - 1 ) ) ; }
boolean all_ones ( String s , int n ) { int co = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { co += 1 if ( s . charAt ( i ) == '1' ) ? 1 : 0 ; } return co == n ; }
int pad ( int n ) { int p_prev_prev = 1 , p_prev = 1 , p_curr = 1 , p_next = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { p_next = p_prev_prev + p_prev  ; p_prev_prev = p_prev  ; p_prev = p_curr  ; p_curr = p_next ; } return p_next ; }
int odd_length_palindrome ( int k ) { int palin = k  ; k = k / 10 ; while ( k > 0 ) { int rev = k % 10 ; palin = palin * 10 + rev ; k /= 10 ; } return palin ; }
String change_string ( String s0 ) { String s = new String ( s0 ) ; int n = s0 . length ( ) ; if ( s [ 0 ] == '?' ) { s [ 0 ] = 'a' ; if ( s [ 0 ] == s [ 1 ] ) s [ 0 ] = ( char ) ( s [ 0 ] + 1 ) ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == '?' ) { s [ i ] = 'a' ; if ( s [ i ] == s [ i - 1 ] ) s [ i ] = ( char ) ( s [ i ] + 1 ) ; } if ( s [ i ] == s [ i + 1 ] ) s [ i ] = ( char ) ( s [ i ] + 1 ) ; if ( s [ i ] == s [ i - 1 ] ) s [ i ] = ( char ) ( s [ i ] ) + 1 ) ; } if ( s [ n - 1 ] == '?' ) { s [ n - 1 ] = 'a' ; if ( s [ n - 1 ] == s [ n - 2 ] ) s [ n - 1 ] = ( char ) ( s [ n - 1 ] ) + 1 ) ; } return s . toString ( ) ; }
int total_hamming_distance ( int n ) { int i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + n / i ; i = i * 2 ; } return sum ; }
int check_bitonic ( String s ) { int i , j ; for ( i = 1 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i - 1 ) ) continue ; if ( s . charAt ( i ) <= s . charAt ( i - 1 ) ) break ; } if ( i == s . length ( ) - 1 ) return 1 ; j = i + 1 ; for ( j = i + 1 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) < s . charAt ( j - 1 ) ) continue ; if ( s . charAt ( j ) >= s . charAt ( j - 1 ) ) break ; } i = j ; if ( i != s . length ( ) - 1 ) return 0 ; return 1 ; }
boolean ends_with ( String str , String pat ) { int pat_len = pat . length ( ) ; int str_len = str . length ( ) ; if ( pat_len > str_len ) return false ; pat_len -- ; str_len -- ; while ( pat_len >= 0 ) { if ( pat . charAt ( pat_len ) != str . charAt ( str_len ) ) return false ; pat_len -- ; str_len -- ; } return true ; }
int get_sum ( int n , int d ) { if ( n < d ) return 0 ; while ( n % 10 != d ) n -- ; int k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
int balanced_string_by_swapping ( String s ) { int unbalanced_pair = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( unbalanced_pair > 0 && s . charAt ( i ) == ']' ) unbalanced_pair -- ; else if ( s . charAt ( i ) == '[' ) unbalanced_pair ++ ; } return ( unbalanced_pair + 1 ) / 2 ; }
int compute_hash ( String s ) { int p = 31 ; int mod = 10 * 9 + 7 ; int hash_val = 0 ; int mul = 1 ; for ( char ch : s ) { hash_val = ( hash_val + ( ch - 'a' ) * mul ) % mod ; mul = mul * p % mod ; } return hash_val ; }
int count_of_substring_with_only_ones ( String s ) { int res = 0 , count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { count ++ if ( s . charAt ( i ) == '1' ) count ++ ; res = res + count ; } return res ; }
int composite ( int n ) { int flag = 0 ; int c = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) c ++ ; } if ( c >= 3 ) flag = 1 ; return flag ; }
boolean is_div_by_six ( String s , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += ( s . charAt ( i ) - 'a' + 1 ) ; } if ( sum % 3 != 0 ) return false ; int last_digit = ( s . charAt ( n - 1 ) - 'a' + 1 ) % 10 ; if ( last_digit % 2 != 0 ) return false ; return true ; }
boolean is_redundant_braces ( String s1 ) { int a = 0 , b = 0 ; for ( int i = 0 ; i < s1 . length ( ) ; i ++ ) { if ( s [ i ] == '(' && s [ i + 2 ] == ')' ) return true ; if ( s [ i ] == '*' s [ i ] == '+' s [ i ] == '-' s [ i ] == '/' ) a ++ ; if ( s [ i ] == '(' ) b ++ ; } if ( b > a ) return true ; return false ; }
int count_sub_str ( String s , int n ) { int count = 0 ; int i = 0 ; while ( i < n - 2 ) { if ( s . charAt ( i ) == '0' && s . charAt ( i + 1 ) == '1' && s . charAt ( i + 2 ) == '0' ) count ++ ; else if ( s . charAt ( i ) == '1' && s . charAt ( i + 1 ) == '0' && s . charAt ( i + 2 ) == '1' ) count ++ ; else i ++ ; } return count ; }
int prefix_occurrences ( String s ) { char c = s . charAt ( 0 ) ; int count_c = 0 ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == c ) count_c ++ ; } return count_c ; }
boolean is_valid ( String s , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) return false ; } return true ; }
int count ( String s , int k ) { int n = s . length ( ) ; int d = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d += ( s . charAt ( i ) ) ; } if ( d % k == 0 ) count ++ ; for ( int i = k ; i < n ; i ++ ) { int prev = s . charAt ( i - k ) ; d -= prev ; d += ( s . charAt ( i ) ) ; if ( d % k == 0 ) count ++ ; } return count ; }
int find_substring_count ( String s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) result ++ ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) == '1' ) result ++ ; while ( i < n - 1 && s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) i ++ ; } } return result ; }
boolean find ( String s1 , String s2 ) { int len1 = s1 . length ( ) ; int len2 = s2 . length ( ) ; if ( len1 != len2 ) return false ; int [ ] d = new int [ len1 ] ; d [ 0 ] = ( int ) s1 . charAt ( 0 ) - ( int ) s2 . charAt ( 0 ) ; for ( int i = 1 ; i < len1 ; i ++ ) { if ( s1 . charAt ( i ) > s2 . charAt ( i ) ) return false ; else d [ i ] = ( int ) s2 . charAt ( i ) - ( int ) s1 . charAt ( i ) ; } for ( int i = len1 - 1 ; i >= 0 ; i -- ) { if ( d [ i ] < d [ i + 1 ] ) return false ; } return true ; }
boolean is_in_given_base ( String s , int bas ) { if ( bas > 16 ) return false ; else if ( bas <= 10 ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) { return false ; } } } else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) { return false ; } } } return true ; }
int count_non_empty_substr ( String s ) { int n = s . length ( ) ; return n * ( n + 1 ) / 2 ; }
int even_decimal_value ( String s , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimal_value = 0 ; int power_of_2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimal_value += ( s . charAt ( k ) - '0' ) * power_of_2 ; power_of_2 *= 2 ; } if ( decimal_value % 2 == 0 ) result ++ ; } } return result ; }
int calculate ( String s ) { int ans = 6 ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { for ( int k = 0 ; k < 10 ; k ++ ) { int l = 0 ; if ( i + j + k == l + m + n ) { int c = 0 ; if ( i != s . charAt ( 0 ) - '0' ) c ++ ; if ( j != s . charAt ( 1 ) - '0' ) c ++ ; if ( k != s . charAt ( 2 ) - '0' ) c ++ ; if ( l != s . charAt ( 3 ) - '0' ) c ++ ; if ( m != s . charAt ( 4 ) - '0' ) c ++ ; if ( n != s . charAt ( 5 ) - '0' ) c ++ ; if ( c < ans ) ans = c  ; } } } } return ans ; }
int xor_zero ( String s ) { int one_count = 0 , zero_count = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) one_count ++ ; else zero_count ++ ; } if ( one_count % 2 == 0 ) return zero_count  ; return one_count  ; }
int even_length ( int n ) { int res = n ; for ( int j = n . length ( ) - 1 ; j >= 0 ; j -- ) res += n . charAt ( j ) ; return res ; }
int count_substring_with_equal_ends ( String s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) if ( s . charAt ( i ) == s . charAt ( j ) ) result ++ ; return result ; }
double normal_slope ( double a , double b , double x1 , double y1 ) { double g = a / 2 ; double f = b / 2 ; if ( g - x1 == 0 ) return - 1 ; double slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) return - 2 ; return slope ; }
boolean orthogonality ( float x1 , float y1 , float x2 , float y2 , float r1 , float r2 ) { float dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) return true ; else return false ; }
float find_area_shaded ( float a ) { float sq_area = a * a ; float semi_circle_area = ( float ) ( 3.14f * ( a * a ) / 8 ) ; float shaded_area = 4 * semi_circle_area - sq_area ; return shaded_area ; }
int factorial ( int a , int b ) { int res = 1 ; for ( int i = 1 ; i <= a + b ; i ++ ) res = res * i ; for ( int i = 1 ; i <= a ; i ++ ) res = res / i ; for ( int i = 1 ; i <= b ; i ++ ) res = res / i ; return res ; }
int factor_tree ( int n ) { int height = 0 ; while ( n > 1 ) { boolean flag = false ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( flag ) break ; } return height ; }
String find_if_possible ( int n , String s , int x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) return "Yes" ; if ( n == 1 ) { if ( s == x ) return "Yes" ; else return "No" ; } if ( n == 2 ) { int c = ( s - x ) / 2 ; int a = c , b = c ; a = a + x ; if ( ( a ^ b ) == x ) return "Yes" ; else return "No" ; } } else return "No" ; }
int maximum_triplet_xor ( int a , int b , int c ) { int ans = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int cur = 1 << i ; if ( a >= cur ) { ans += cur  ; a -- ; } else if ( b >= cur ) { ans += cur ; b -- ; } else if ( c >= cur ) { ans += cur ; c -- ; } } return ans ; }
int item_type ( int n ) { int count = 0 ; int day = 1 ; while ( count + day * ( day + 1 ) / 2 < n ) { count += day * ( day + 1 ) / 2 ; day ++ ; } for ( int type = day ; type >= 1 ; type -- ) { count += type  ; if ( count >= n ) return type ; } return 0 ; }
int max_gcd_in_range ( int l , int r ) { int ans = 1 ; for ( int z = r ; z >= l ; z -- ) { if ( r / z - ( l - 1 ) / z > 1 ) { ans = z ; break ; } } return ans ; }
int sum_of_digits ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += ( n % 10 ) ; n = n / 10 ; } return sum ; }
boolean is_rep_unit_num ( int n , int b ) { int length = 0 ; int count_one = 0 ; while ( n != 0 ) { int r = n % b ; length ++ ; if ( r == 1 ) count_one ++ ; n = n / b ; } return ( count_one >= 3 && count_one == length ) ; }
boolean is_straigh_line_num ( int n ) { if ( n <= 99 ) return false ; String s = Integer . toString ( n ) ; int d = ( s . charAt ( 1 ) - s . charAt ( 0 ) ) ; for ( int i = 2 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) - s . charAt ( i - 1 ) != d ) return false ; } return true ; }
int get_count ( int d , int n ) { int no = n / d ; int result = no ; for ( int p = 2 ; p * p <= no ; p ++ ) { if ( no % p == 0 ) { while ( no % p == 0 ) { no /= p ; } result -= result / p ; } } if ( no > 1 ) result -= result / no ; return result ; }
boolean is_even_parity ( int x ) { int parity = 0 ; while ( x != 0 ) { if ( ( x & 1 ) > 0 ) parity ++ ; x = x >> 1 ; } if ( parity % 2 == 0 ) return true ; else return false ; }
int is_perfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) break ; if ( sum + i + n / i != n ) sum = sum + i + n / i ; else sum = sum + i ; } } if ( sum == n && n != 1 ) return n ; return 0 ; }
int log_a_to_base_b ( int a , int b ) { return 1 + log_a_to_base_b ( a / b , b ) if ( a > ( b - 1 ) ) return 0 ; }
int using_binary_search ( int start , int end , int n , int s ) { if ( start >= end ) return start ; int mid = start + ( end - start ) / 2 ; int total_sum = ( n * ( n + 1 ) ) / 2 ; int mid_sum = ( mid * ( mid + 1 ) ) / 2 ; if ( total_sum - mid_sum <= s ) return using_binary_search ( start , mid , n , s ) ; return using_binary_search ( mid + 1 , end , n , s ) ; }
String min_int ( String s ) { List < String > s1 = new ArrayList < String > ( s ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) >= '5' ) { s1 . add ( '0' ) ; } } if ( s . charAt ( 0 ) == '0' ) s1 . add ( '9' ) ; return s . substring ( 1 ) ; }
int count_triplets ( int a , int b , int c ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { for ( int k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) ans ++ ; } } } return ans ; }
boolean topsy_turvy ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '2' s . charAt ( i ) == '4' s . charAt ( i ) == '5' || s . charAt ( i ) == '6' || s . charAt ( i ) == '7' || s . charAt ( i ) == '9' ) return false ; } return true ; }
int sum_of_last_dig ( int n , int m ) { int sum = 0 , k = n / m ; int arr [ ] = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ] ; int rem = k % 10  ; int ans = k / 10 * sum ; for ( int i = 0 ; i < rem ; i ++ ) ans += arr [ i ] ; return ans ; }
int total_pay ( int total_items , int price_of_one_item , int n , int m ) { int free_items = 0 , actual = 0 ; free_items = total_items / ( n + m ) ; actual = total_items - free_items ; int amount = 0 ; return amount ; }
int min_operations ( int x , int y , int p , int q ) { if ( y % x != 0 ) return - 1 ; int d = y / x ; int a = 0 , b = 0 ; while ( d % p == 0 ) { d /= p ; a ++ ; } b = 0 ; while ( d % q == 0 ) { d /= q ; b ++ ; } if ( d != 1 ) return - 1 ; return a + b ; }
boolean is_mersenne ( int n ) { while ( n != 0 ) { int r = n % 2 ; if ( r == 0 ) return false ; n /= 2 ; } return true ; }
int find_third_digit ( int n ) { if ( n < 3 ) return 0 ; return 1 if ( ( n & 1 ) == 1 ) ? 6 : 1 ; }
boolean is_odd_length ( int num ) { int count = 0 ; while ( num > 0 ) { num /= 10 ; count ++ ; } if ( count % 2 != 0 ) return true ; return false ; }
boolean check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) count ++ ; } return count > 1 ; }
BigInteger bytes ( int kilobytes ) { BigInteger b = new BigInteger ( "0" ) ; BigInteger c = BigInteger . valueOf ( kilobytes ) ; b = c . multiply ( BigInteger . valueOf ( 1024 ) ) ; return b ; }
int octahedral_num ( int n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
String check_equal ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != '1' && s . charAt ( i ) != '0' && s . charAt ( i ) != '8' ) return "No" ; } int start = 0 ; int end = s . length ( ) - 1 ; while ( start < end ) { if ( s . charAt ( start ) != s . charAt ( end ) ) return "No" ; start ++ ; end -- ; } return "Yes" ; }
boolean is_undulating ( String n ) { if ( n . length ( ) <= 2 ) return false ; for ( int i = 2 ; i < n . length ( ) ; i ++ ) if ( n . charAt ( i - 2 ) != n . charAt ( i ) ) return false ; return true ; }
int first_digit ( int n ) { while ( n >= 10 ) { n /= 10 ; } return n ; }
int count_digit ( int n ) { if ( n == 0 ) return 0 ; return 1 + count_digit ( n / 10 ) ; }
boolean is_divisible_by_5 ( String s ) { int n = s . length ( ) ; return ( s . charAt ( n - 1 ) - '0' == 0 ) || s . charAt ( n - 1 ) - '0' == 5 ) ; }
int inv ( int a , int m ) { int m0 = m  ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) x1 = x1 + m0 ; return x1 ; }
boolean only_first_and_last_are_set ( int n ) { if ( n == 1 ) return true ; if ( n == 2 ) return false ; return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
int divide ( int dividend , int divisor ) { int sign = - 1 if ( ( dividend < 0 ) ^ ( divisor < 0 ) ) else 1 ; dividend = Math . abs ( dividend ) ; divisor = Math . abs ( divisor ) ; int quotient = 0 , temp = 0 ; for ( int i = 31 ; i >= 1 ; i -- ) { if ( temp + ( divisor << i ) <= dividend ) temp += divisor << i ; quotient |= 1 << i ; } if ( sign == - 1 ) quotient = - quotient ; return quotient ; }
char find_profession ( int level , int pos ) { if ( level == 1 ) return 'e' ; if ( find_profession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) return 'd' if ( pos % 2 == 'e' ) return 'e' if ( pos % 2 == 'd' ) return 'e' if ( pos % 2 == 'd' ) return 'd' if ( pos % 2 == 'e' ) return 'd' ; return 'e' if ( pos % 2 == 'd' ) ; }
boolean has_close_elements ( int [ ] numbers , int threshold ) { for ( int i = 0 ; i < numbers . length ; i ++ ) { for ( int j = i + 1 ; j < numbers . length ; j ++ ) { int distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) return true ; } } return false ; }
int truncate_number ( int number ) { return ( number % 1 ) ; }
boolean below_zero ( int [ ] operations ) { int balance = 0 ; for ( int op : operations ) { balance += op ; if ( balance < 0 ) return true ; } return false ; }
double mean_absolute_deviation ( int [ ] numbers ) { int sum_num = 0 ; for ( int num : numbers ) { sum_num += num ; } double mean = sum_num / numbers . length ; int sum_abs_diff = 0 ; for ( int num : numbers ) { sum_abs_diff += Math . abs ( num - mean ) ; } return sum_abs_diff / numbers . length ; }
List < Integer > intersperse ( List < Integer > numbers , int delimiter ) { List < Integer > result = new ArrayList < > ( ) ; if ( numbers == null ) return result ; for ( int i = 0 ; i < numbers . size ( ) - 1 ; i ++ ) result . add ( numbers . get ( i ) ) ; result . add ( delimiter ) ; result . add ( numbers . get ( - 1 ) ) ; return result ; }
int sum_product ( int [ ] numbers ) { int sum_value = 0 , prod_value = 1 ; for ( int n : numbers ) { sum_value += n ; prod_value *= n ; } return [ sum_value , prod_value ] ; }
List < String > all_prefixes ( String str ) { List < String > result = new ArrayList < > ( ) ; for ( int i = 1 ; i <= str . length ( ) ; i ++ ) result . add ( str . substring ( 0 , i ) ) ; return result ; }
List < Integer > parse_music ( String music_string ) { List < Integer > current = new ArrayList < Integer > ( ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < music_string . length ( ) + 1 ; i ++ ) { if ( i == music_string . length ( ) || music_string . charAt ( i ) == ' ' ) { if ( current . toString ( ) == "o" ) result . add ( 4 ) ; if ( current . toString ( ) == "o|" ) result . add ( 2 ) ; if ( current . toString ( ) == ".|" ) result . add ( 1 ) ; current . clear ( ) ; } else { current . add ( music_string . charAt ( i ) ) ; } } return result ; }
int strlen ( String s ) { return s . length ( ) ; }
List < Integer > factorize ( int n ) { List < Integer > factors = new ArrayList < Integer > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { factors . add ( i ) ; n /= i ; } else { i ++ ; } } return factors ; }
String concatenate ( String ... strings ) { List < String > result = new ArrayList < String > ( ) ; for ( String s : strings ) result . add ( s ) ; return "" . join ( result ) ; }
List < Integer > get_positive ( Integer l ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) if ( l . get ( i ) > 0 ) result . add ( l . get ( i ) ) ; return result ; }
List < Integer > sort_even ( List < Integer > l ) { List < Integer > evens = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i += 2 ) evens . add ( l . get ( i ) ) ; Arrays . sort ( evens ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 2 == 0 ) result . add ( evens . get ( i / 2 ) ) ; if ( i % 2 == 1 ) result . add ( l . get ( i ) ) ; } return result ; }
String decode_cyclic ( String s ) { List < String > output = new ArrayList < > ( ) ; int i = 0 ; while ( i <= s . length ( ) - 3 ) { String x = s . charAt ( i + 2 ) + s . substring ( i , i + 2 ) ; output . add ( x ) ; i += 3 ; } return "" . join ( output ) + s . substring ( i ) ; }
int car_race_collision ( int n ) { return n * ( int ) Math . sqrt ( n ) ; }
int incr_list ( int l ) { int result [ ] = new int [ 2 * l . length ] ; for ( int i = 0 ; i < l . length ; i ++ ) result [ i ] = i + 1 ; return result ; }
boolean pairs_sum_to_zero ( List < Integer > l ) { for ( int i = 0 ; i < l . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < l . size ( ) ; j ++ ) { if ( l . get ( i ) + l . get ( j ) == 0 ) return true ; } } return false ; }
String change_base ( int x , int b ) { List < String > ret = new ArrayList < String > ( ) ; while ( x > 0 ) { ret . add ( String . valueOf ( x % b ) ) ; x /= b ; } return ret . get ( 0 ) ; }
double median ( List < Integer > l ) { Arrays . sort ( l ) ; if ( l . size ( ) % 2 == 1 ) return l . get ( len ( l ) / 2 ) ; else return ( l . get ( len ( l ) / 2 - 1 ) + l . get ( len ( l ) / 2 ) ; }
String decode_shift ( String s ) { List < Character > result = new ArrayList < Character > ( ) ; for ( char ch : s ) { int w = ( ch + 21 - "a" ) % 26 + "a" ; result . add ( ch ) ; } return result . get ( 0 ) ; }
boolean below_threshold ( int l [ ] , int t ) { for ( int n : l ) if ( n >= t ) return false ; return true ; }
boolean correct_bracketing ( String brackets ) { int depth = 0 ; for ( char b : brackets ) { if ( b == "<" ) depth ++ ; else depth -- ; } return depth == 0 ; }
boolean monotonic ( int l [ ] ) { int incr = 0 , decr = 0 ; for ( int i = 1 ; i < l . length ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) incr = 1 ; if ( l [ i ] < l [ i - 1 ] ) decr = 1 ; } return ( incr + decr != 2 ) ; }
List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < > ( ) ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) result . add ( i * xs . get ( i ) ) ; return result ; }
int vowels_count ( String s ) { String vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch : s ) { if ( ch in vowels ) count ++ ; } if ( s . charAt ( - 1 ) == "y" s . charAt ( - 1 ) == "Y" ) count ++ ; return count ; }
int digit_sum ( String s ) { int sum = 0 ; for ( char c : s ) { if ( c . isupper ( ) ) sum += ( int ) c ; } return sum ; }
int fruit_distribution ( String s , int n ) { List < String > num1 = new ArrayList < String > ( ) ; List < String > num2 = new ArrayList < Integer > ( ) ; boolean flag = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) . isdigit ( ) ) { if ( ! flag ) num1 . add ( s . charAt ( i ) ) ; if ( flag ) num2 . add ( s . charAt ( i ) ) ; } else if ( flag && num1 . size ( ) > 0 ) flag = true ; } return n - ( String . join ( num1 ) ) - ( String . join ( num2 ) ) ; }
int pluck ( int arr [ ] ) { int result [ ] = new int [ 2 ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result == null ) result = new int [ 2 ] ; result [ 2 ] = i ; } else if ( arr [ i ] < result [ 0 ] ) result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } return result ; }
List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > res = new ArrayList < > ( ) ; Arrays . sort ( res ) ; int l = 0 ; int r = lst . size ( ) - 1 ; while ( l < r ) { res . add ( lst . get ( l ) ) ; l ++ ; res . add ( lst . get ( r ) ) ; r -- ; } if ( l == r ) res . add ( lst . get ( l ) ) ; return res ; }
double triangle_area ( double a , double b , double c ) { if ( a + b <= c a + c <= b b + c <= a ) return - 1.0 ; double s = ( a + b + c ) / 2 ; double area = Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; return area ; }
boolean will_it_fly ( Queue < Integer > q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . size ( ) ; i ++ ) { if ( q . get ( i ) != q . get ( - i - 1 ) ) return false ; sum += q . get ( i ) ; } return sum <= w ; }
boolean is_cube ( float a ) { a = Math . abs ( a ) ; float i = ( float ) Math . pow ( a , 3 ) ; return i * i == a ; }
int hex_key ( String num ) { String key = "2357BD" ; int total = 0 ; for ( char c : num ) { if ( c . charAt ( 0 ) == key ) total ++ ; } return total ; }
String decimal_to_binary ( int dec ) { List < String > ans = new ArrayList < String > ( ) ; if ( dec != 0 ) { while ( dec > 0 ) { ans . add ( 0 , String . valueOf ( dec % 2 ) ) ; dec /= 2 ; } } else { ans += "0" ; } return "db" + "" . join ( ans ) + "db" ; }
boolean prime_length ( String s ) { int l = s . length ( ) ; if ( l < 2 ) return false ; for ( int i = 2 ; i < l ; i ++ ) if ( l % i == 0 ) return false ; return true ; }
int starts_one_ends ( int n ) { if ( n < 1 ) return 0 ; if ( n == 1 ) return 1 ; return 18 * ( 10 * ( 10 * ( n - 2 ) ) ) ; }
int add ( int lst [ ] ) { int sum = 0 ; for ( int i = 1 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum ; }
List < pair > get_row ( List < pair > lst , int x ) { List < pair > coords = new ArrayList < pair > ( ) ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { for ( int j = lst . size ( ) - 1 ; j >= 0 ; j -- ) { if ( lst . get ( i ) . elementAt ( j ) == x ) coords . add ( new pair ( i , j ) ) ; } } return coords ; }
int next_smallest ( List < Integer > lst ) { Arrays . sort ( lst ) ; for ( int i = 1 ; i < lst . size ( ) ; i ++ ) { if ( lst . get ( i ) != lst . get ( i - 1 ) ) return lst . get ( i ) ; } return - 1 ; }
boolean any_int ( int a , int b , int c ) { if ( a != a b != b c != c ) return false ; return a + b == c || a + c == b + c == a ; }
List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2 ; i < n ; i ++ ) { boolean is_prime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) primes . add ( i ) ; } return primes ; }
int closest_integer ( int value ) { float w = ( float ) value ; return w ; }
List < Integer > make_a_pile ( int n ) { List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) result . add ( n + 2 * i ) ; return result ; }
List < String > words_string ( String s ) { List < String > current = new ArrayList < String > ( ) ; List < String > words = new ArrayList < > ( ) ; for ( int i = 1 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' s . charAt ( i ) == ',' ) { if ( current . size ( ) > 0 ) { words . add ( "" . join ( current ) ) ; current . clear ( ) ; } } else { current . add ( s . charAt ( i ) ) ; } } return words ; }
String rounded_avg ( int n , int m ) { if ( n > m ) return - 1 ; int num = ( n + m ) / 2 ; List < String > ret = new ArrayList < > ( ) ; while ( num > 0 ) { ret . add ( 0 , String . valueOf ( num % 2 ) ) ; num /= 2 ; } return ret . toString ( ) ; }
List < Integer > unique_digits ( String x ) { List < Integer > digits = new ArrayList < Integer > ( ) ; for ( int n : x ) { boolean is_unique = true ; for ( int c : n ) { if ( c % 2 == 0 ) { is_unique = false ; break ; } } if ( is_unique ) digits . add ( n ) ; } Arrays . sort ( digits ) ; return digits ; }
int count_nums ( int arr [ ] ) { int num = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { int neg = - 1 if ( n < 0 else 1 ; n = Math . abs ( n ) ; int [ ] digits = new int [ 2 ] ; for ( int c : n ) { digits [ c ] = ( int ) c - ( int ) "0" ; } digits [ 0 ] *= neg ; int sum = 0 ; for ( int d : digits ) { sum += ( int ) d ; } if ( sum > 0 ) num ++ ; } return num ; }
boolean move_one_ball ( List < Integer > arr ) { if ( arr . isEmpty ( ) ) return true ; int num = 0 ; for ( int i = 1 ; i < arr . size ( ) ; i ++ ) { if ( arr . get ( i ) < arr . get ( i - 1 ) ) num ++ ; } if ( arr . get ( - 1 ) > arr . get ( 0 ) ) num ++ ; if ( num < 2 ) return true ; return false ; }
String exchange ( String lst1 , String lst2 ) { int odd = 0 , even = 0 ; for ( int n : lst1 ) { if ( n % 2 == 1 ) odd ++ ; } for ( int n : lst2 ) { if ( n % 2 == 0 ) even ++ ; } if ( even >= odd ) return "YES" ; return "NO" ; }
List < String > odd_count ( String lst ) { List < String > results = new ArrayList < > ( ) ; String original_str = "the number of odd elements in the input." ; for ( String s : lst ) { int sum = 0 ; for ( String d : s ) { if ( d . isdigit ( ) && d . charAt ( 0 ) % 2 == 1 ) sum ++ ; } List < String > result = new ArrayList < > ( ) ; for ( String c : original_str ) { if ( c == "i" ) result . add ( String . valueOf ( sum ) ) ; else result . add ( c ) ; } results . add ( "" . join ( result ) ) ; } return results ; }
int minSubArraySum ( int nums [ ] ) { int min_sum = Integer . MAX_VALUE ; int sum = 0 ; for ( int num : nums ) { sum += num ; if ( min_sum > sum ) min_sum = sum ; if ( sum > 0 ) sum = 0 ; } return min_sum ; }
int max_fill ( int grid [ ] , int capacity ) { int res = 0 ; for ( int well [ ] : grid ) { int sum = 0 ; for ( int n : well ) { sum += n ; } if ( sum > 0 ) res += ( sum - 1 ) / capacity + 1 ; } return res ; }
List < String > select_words ( String s , int n ) { String vowels = "aeiouAEIOU" ; List < String > current = new ArrayList < String > ( ) ; List < Integer > result = new ArrayList < Integer > ( ) ; int consonant_num = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( i == s . length ( ) s . charAt ( i ) == ' ' ) { if ( consonant_num == n ) result . add ( "" . join ( current ) ) ; current . clear ( ) ; consonant_num = 0 ; } else { current . add ( s . charAt ( i ) ) ; if ( s . charAt ( i ) not in vowels ) consonant_num ++ ; } } } return result ; }
int solution ( List < Integer > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . size ( ) ; i += 2 ) { if ( lst . get ( i ) % 2 == 1 ) sum += lst . get ( i ) ; } return sum ; }
int add_elements ( int arr [ ] , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( - 99 <= arr [ i ] <= 99 ) sum += arr [ i ] ; } return sum ; }
List < Integer > get_odd_collatz ( int n ) { List < Integer > odd_collatz = new ArrayList < Integer > ( ) ; while ( n > 1 ) { if ( n % 2 == 1 ) { odd_collatz . add ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } odd_collatz . add ( 1 ) ; Arrays . sort ( odd_collatz ) ; return odd_collatz ; }
boolean is_sorted ( int lst [ ] ) { for ( int i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) return false ; if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) return false ; } return true ; }
String intersection ( Interval1 interval1 , Interval2 interval2 ) { int inter1 = Math . max ( interval1 . first , interval2 . first ) ; int inter2 = Math . min ( interval1 . second , interval2 . second ) ; int l = inter2 - inter1 ; if ( l < 2 ) return "NO" ; for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) return "NO" ; } return "YES" ; }
int prod_signs ( int arr [ ] ) { if ( arr == null ) return - 32768 ; int sum = 0 , prods = 1 ; for ( int i : arr ) { sum += Math . abs ( i ) ; if ( i == 0 ) prods = 0 ; if ( i < 0 ) prods = - prods  ; } return sum * prods ; }
List < Integer > minPath ( int grid [ ] [ ] , int k ) { int n = grid . length ; int min_num = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { List < Integer > tmp = new ArrayList < > ( ) ; if ( i != 0 ) { tmp . add ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . add ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . add ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . add ( grid [ i ] [ j + 1 ] ) ; } min_num = Math . min ( tmp ) ; } } } List < Integer > ans = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) ans . add ( 1 ) ; else ans . add ( min_num ) ; } return ans ; }
int digits ( int n ) { int prod = 1 ; for ( char digit : n ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) prod == 1 ; prod *= digit - '0' ; } } return prod ; }
boolean is_nested ( String s ) { int count = 0 , max_count = 0 ; for ( char ch : s ) { if ( ch == "[" ) count ++ ; if ( ch == "]" ) count -- ; if ( count < 0 ) count = 0 ; if ( count > max_count ) max_count = count ; if ( count <= max_count - 2 ) return true ; } return false ; }
double sum_squares ( int [ ] lst ) { double sum = 0.0 ; for ( int i : lst ) sum += ( double ) Math . ceil ( i ) * Math . ceil ( i ) ; return sum ; }
int can_arrange ( int arr [ ] ) { int index = - 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] <= i ) index = i ; } return index ; }
int largest_smallest_integers ( int [ ] lst ) { int max_neg = 0 , min_pos = 0 ; for ( int n : lst ) { if ( n < 0 && ( max_neg == 0 n > max_neg ) ) max_neg = n ; if ( n > 0 && ( min_pos == 0 n < min_pos ) ) min_pos = n ; } return [ max_neg , min_pos ] ; }
String fix_spaces ( String text ) { List < String > res = new ArrayList < > ( ) ; int space_len = 0 ; for ( int i = 0 ; i < text . length ( ) + 1 ; i ++ ) { if ( i == text . length ( ) || text . charAt ( i ) != ' ' ) { if ( space_len == 1 ) res . add ( '_' ) ; if ( space_len == 2 ) res . add ( '__' ) ; if ( space_len > 2 ) res . add ( '-' ) ; space_len = 0 ; if ( i != text . length ( ) ) res . add ( text . charAt ( i ) ) ; } else { space_len ++ ; } } return "" . join ( res ) ; }
String file_name_check ( String file_name ) { int digit_num = 0 , dot_num = 0 ; if ( file_name . length ( ) < 5 || ! file_name . charAt ( 0 ) . isalpha ( ) ) return "No" ; String suffix = file_name . substring ( - 4 ) ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) return "No" ; for ( char c : file_name ) { if ( c . isdigit ( ) ) digit_num ++ ; if ( c == '.' ) dot_num ++ ; } if ( digit_num > 3 dot_num != 1 ) return "No" ; return "Yes" ; }
int sum_squares ( int lst [ ] ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i ++ ) { if ( i % 3 == 0 ) sum += lst [ i ] * lst [ i ] ; else if ( i % 4 == 0 ) sum += lst [ i ] * lst [ i ] * lst [ i ] ; else sum += lst [ i ]  ; } return sum ; }
String words_in_sentence ( String sentence ) { String result = new String [ sentence . length ( ) + 1 ] ; List < String > current = new ArrayList < String > ( ) ; for ( int i = 0 ; i < sentence . length ( ) + 1 ; i ++ ) { if ( i == sentence . length ( ) sentence . charAt ( i ) == ' ' ) { boolean is_prime = true ; int l = current . length ( ) ; if ( l < 2 ) is_prime = false ; for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) is_prime = false ; break ; } } if ( is_prime ) { result . add ( "" . join ( current ) + " " ) ; } current . clear ( ) ; } else { current . add ( sentence . charAt ( i ) ) ; } } result = result . toString ( ) ; if ( result . size ( ) > 0 ) result = result . substring ( 0 , result . length ( ) - 1 ) ; return result ; }
boolean simplify ( String x , String n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x . charAt ( i ) == '/' ) { a = x . substring ( 0 , i ) ; b = x . substring ( i + 1 ) ; } } for ( int i = 0 ; i < n . length ( ) ; i ++ ) { if ( n . charAt ( i ) == '/' ) { c = n . substring ( 0 , i ) ; d = n . substring ( i + 1 ) ; } } return ( a * c ) % ( b * d ) == 0 ; }
int specialFilter ( int nums [ ] ) { int count = 0 ; for ( int num : nums ) { if ( num > 10 ) { String w = Integer . toString ( num ) ; if ( w . charAt ( 0 ) % 2 == 1 && w . charAt ( - 1 ) % 2 == 1 ) count ++ ; } } return count ; }
int get_max_triples ( int n ) { int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) arr [ i * i - i + 1 ] = 1 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( arr [ i ] + arr [ j ] + arr [ k ] % 3 == 0 ) count ++ ; } } } return count ; }
int double_the_difference ( int [ ] lst ) { int sum = 0 ; for ( int d : lst ) { int num = ( int ) d ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) sum += num * num ; } } return sum ; }
List < Integer > compare ( int game [ ] , int guess [ ] ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < game . length ; i ++ ) result . add ( Math . abs ( game [ i ] - guess [ i ] ) ) ; return result ; }
String strongest_extension ( String class_name , List < String > extensions ) { String strongest = "" ; int max = Integer . MIN_VALUE ; for ( String extension : extensions ) { int strength = 0 ; for ( char chr : extension ) { if ( chr . isupper ( ) ) strength ++ ; if ( chr . islower ( ) ) strength -- ; } if ( strength > max ) max = strength ; strongest = extension ; } } return class_name + "." + strongest ; }
String int_to_mini_roman ( int number ) { int [ ] num = new int [ 1000 ] ; int 90 = 500 ; int 50 = 40 ; int 9 = 5 ; int 4 = 1 ; for ( int i = 0 ; i < num . length ; i ++ ) { int sym [ ] = { "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "i" } ; int pos = 0 ; List < String > res = new ArrayList < > ( ) ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res . add ( sym [ pos ] ) ; number -= num [ pos ] ; } if ( number > 0 ) { pos ++ ; } } return res . toString ( ) ; }
int eat ( int number , int need , int remaining ) { return [ number + remaining , 0 ] if ( need > remaining ) return [ number + need , remaining - need ] ; }
int do_algebra ( int ops [ ] , int operands [ ] ) { int nums [ ] = new int [ operands . length ] ; Stack < Integer > current_ops = new Stack < Integer > ( ops ) ; int i = current_ops . size ( ) - 1 ; while ( i >= 0 ) { if ( current_ops [ i ] == "**" ) { nums [ i ] = ( int ) Math . pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . pop ( i + 1 ) ; current_ops . pop ( i ) ; } i -- ; } i = 0 ; while ( i < current_ops . size ( ) ) { if ( current_ops [ i ] == "*" ) { nums [ i ] *= nums [ i + 1 ] ; nums . pop ( i + 1 ) ; current_ops . pop ( i ) ; } else if ( current_ops [ i ] == "//" ) { nums [ i ] /= nums [ i + 1 ] ; nums . pop ( i + 1 ) ; current_ops . pop ( i ) ; } else i ++ ; } i = 0 ; while ( i < current_ops . size ( ) ) { if ( current_ops [ i ] == "+" ) { nums [ i ] += nums [ i + 1 ] ; nums . pop ( i + 1 ) ; current_ops . pop ( i ) ; } else if ( current_ops [ i ] == "-" ) { nums [ i ] -= nums [ i + 1 ] ; nums . pop ( i ) ; current_ops . pop ( i ) ; } else i ++ ; } return nums [ 0 ] ; }
List < Integer > generate_integers ( int a , int b ) { int lower = Math . max ( 2 , Math . min ( a , b ) ) ; int upper = Math . min ( 8 , Math . max ( a , b ) ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = lower ; i <= upper ; i += 2 ) result . add ( i ) ; return result ; }
boolean isStepNum ( int n ) { int prev_digit = - 1 ; while ( n > 0 ) { int cur_digit = n % 10 ; if ( prev_digit == - 1 ) prev_digit = cur_digit  ; else if ( Math . abs ( prev_digit - cur_digit ) != 1 ) return false ; prev_digit = cur_digit  ; n /= 10 ; } return true ; }
int num_of_ways ( int n , int k ) { int p = 1 ; if ( k % 2 == 1 ) p = - 1 ; return ( ( n - 1 ) * Math . pow ( ( n - 1 ) , k ) + p * ( n - 1 ) ) / n ; }
List < Integer > find_divisors ( int n ) { List < Integer > v = new ArrayList < > ( ) ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) v . add ( i ) ; else v . add ( i ) ; v . add ( n / i ) ; } } return v ; }
int egg_drop ( int n , int k ) { if ( k == 1 k == 0 ) return k  ; if ( n == 1 ) return k ; int min = Integer . MAX_VALUE ; for ( int x = 1 ; x <= k ; x ++ ) { int res = Math . max ( egg_drop ( n - 1 , x - 1 ) , egg_drop ( n , k - x ) ) ; if ( res < min ) min = res ; } return min + 1 ; }
boolean is_power_of_two ( int n ) { return ( ( double ) Math . ceil ( Math . log ( n ) ) == ( int ) Math . floor ( Math . log ( n ) ) ; }
int shortest_palindrome ( String s ) { int n = s . length ( ) ; List < Integer > v = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i , r = i ; int ans1 = "" , ans2 = "" ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans1 += s . charAt ( l ) ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans2 += s . charAt ( l ) ; l -- ; r ++ ; } v . add ( ans1 ) ; v . add ( ans2 ) ; } int ans = v . get ( 0 ) ; for ( int i = 1 ; i < v . size ( ) ; i ++ ) { if ( v . get ( i ) != "" ) ans = Math . min ( ans , v . get ( i ) ) ; } return ans ; }
int minimum_adjacent_difference ( int a [ ] , int n , int k ) { int min_diff = Integer . MAX_VALUE ; for ( int i = 0 ; i <= k ; i ++ ) { int max_diff = Integer . MIN_VALUE ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { max_diff = Math . max ( max_diff , a [ p + 1 ] - a [ p ] ) ; } } min_diff = Math . min ( min_diff , max_diff ) ; } return min_diff ; }
int cal ( int [ ] a , int mid ) { int chocolate = 0 ; for ( int i : a ) { if ( i >= mid ) chocolate += i - mid  ; } return chocolate ; }
boolean check ( int v , int a [ ] , int m ) { int tec = 0 , ans = 0 , b [ ] = new int [ a . length + 3 ] ; for ( int i = 0 ; i < a . length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; }
int largest_num ( int arr [ ] ) { int res = 0 ; Arrays . sort ( arr ) ; int l = 0 , r = arr . length - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) l ++ ; else r -- ; } return res ; }
int binary_search ( int p [ ] , int n ) { int i = 0 , j = p . length ; int index = - 1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
int find_min_length ( int [ ] arr ) { int index = arr . length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; }
int min_digits ( int n , int k ) { int digits_num = ( int ) Math . floor ( ( Math . log ( n ) / Math . log ( 10 ) ) + 1 ; int temp_sum = 0 ; int temp = digits_num ; int result = 0 ; int x = 0 , v = 0 ; int sum = 0 ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) x = 0 ; else { for ( ; temp > 0 ; temp -- ) { v = n / ( 10 * ( temp - 1 ) ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v /= 10 ; v ++ ; result = v * ( 10 * ( 10 * temp ) ; break ; } } x = result - n ; return x ; }
int check_for_perfect_square ( int arr [ ] , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) return mid ; else if ( mid * mid > sum ) high = mid - 1 ; else low = mid + 1 ; } return - 1 ; }
int min_flips ( int mat [ ] [ ] , String s ) { int n = mat . length ; int m = mat [ 0 ] . length ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s . charAt ( i + j ) - '0' ) count ++ ; } } return count ; }
List < Integer > construct_tree ( int n , List < Pair > edges ) { List < Integer > [ ] adjl = new Vector [ n ] ; for ( int i = 0 ; i < n ; i ++ ) adjl [ i ] = new ArrayList < Integer > ( ) ; for ( Map . Entry < Integer , Integer > e : edges ) { int u = e . first ; int v = e . second ; adjl [ u ] . add ( v ) ; adjl [ v ] . add ( u ) ; } return adjl ; }
int find_sum_of_values ( int v , int parent [ ] , int values_children [ ] ) { int cur_node = v ; int Sum = 0 ; while ( cur_node != - 1 ) { Sum += values_children [ cur_node ] ; cur_node = parent [ cur_node ] ; } return Sum ; }
int get_distinct ( int d , int count ) { int num = 0 ; count = 10 * ( count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; }
boolean is_increasing ( int arr [ ] ) { for ( int i = 0 ; i < arr . length - 1 ; i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) return false ; return true ; }
int min_adj_swaps ( int mat [ ] [ ] ) { int n = mat . length ; int [ ] cnt_zero = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 ; j -- ) { if ( mat [ i ] [ j ] != 0 ) break ; cnt_zero [ i ] ++ ; } } int cnt_swaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cnt_zero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) first ++ ; } if ( first == n ) return - 1 ; while ( first > i ) { cnt_zero [ first ] = cnt_zero [ first - 1 ] ; cnt_zero [ first - 1 ] = cnt_zero [ first ] ; first -- ; cnt_swaps ++ ; } } } return cnt_swaps ; }
int solve ( Stack < Integer > values , Stack < Integer > salary , int mod ) { int ret = 1 , amt = 0 ; Arrays . sort ( values ) ; Arrays . sort ( salary ) ; while ( salary . size ( ) > 0 ) { while ( values . size ( ) > 0 && values . peek ( ) >= salary . peek ( ) ) { amt ++ ; values . pop ( ) ; } if ( amt == 0 ) return 0 ; ret *= amt ; amt -- ; ret %= mod ; salary . pop ( ) ; } return ret ; }
int organize_in_order ( int vec [ ] , int op [ ] , int n ) { int result [ ] = new int [ n ] ; Arrays . sort ( result ) ; int i = 0 , j = 0 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) result [ k ] = vec [ i ]  ; i ++ ; else result [ k ] = vec [ j ]  ; j -- ; } k ++ ; } result [ n - 1 ] = vec [ i ]  ; return result ; }
int count_points ( int n , int m , int a [ ] , int b [ ] , int x , int y ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; int j = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; }
boolean are_same ( int a , int b ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; return a == b ; }
int count_number_of_strings ( String s ) { int n = s . length ( ) - 1 ; int count = 2 * n ; return count ; }
List < Integer > prime_power ( int x ) { List < Integer > prime_pow = new ArrayList < > ( ) ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } prime_pow . add ( p ) ; } } if ( x > 1 ) prime_pow . add ( x ) ; return prime_pow ; }
boolean is_perfect ( int n0 ) { int n = ( int ) Math . sqrt ( n0 ) ; if ( n != ( int ) Math . ceil ( n ) ) return 0 ; return 1 ; }
int find_sum ( int l , int r ) { int [ ] arr = new int [ r + 1 ] ; int i = 0 , x = 2 ; while ( i <= r ) { arr [ i + x ] = i + 1 + x ; if ( i + 1 <= r ) arr [ i + 1 + x ] = i + 2 ; } int sum = 0 ; for ( i = l ; i <= r ; i ++ ) sum += arr [ i ] ; return sum ; }
double results ( int n , int k ) { return n * ( 1.0 / 2 * k ) ; }
List < Integer > factors ( int n ) { List < Integer > v = new ArrayList < > ( ) ; v . add ( 1 ) ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) v . add ( i ) ; if ( n / i != i ) v . add ( n / i ) ; } return v ; }
int smallest_num ( int n ) { double x = Math . pow ( 10.0 , ( n - 1 ) / 2.0 ) ; return ( int ) Math . ceil ( x ) ; }
int smallest ( String s ) { int [ ] a = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) a [ i ] = ( int ) s . charAt ( i ) - ( int ) '0' ; List < Integer > b = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a [ i ] % 2 != 0 ) b . add ( a [ i ] ) ; } Arrays . sort ( b ) ; if ( b . size ( ) > 1 ) return b . get ( 0 ) * 10 + b . get ( 1 ) ; return - 1 ; }
List < Integer > diagonals ( int a , int b , int c , int d ) { List < Integer > ans = new ArrayList < Integer > ( ) ; ans . add ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ; ans . add ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ; return ans ; }
int find_number_of_digits ( int n , int base ) { int dig = 1 ; while ( n != 0 ) { n = n / base ; dig ++ ; } return dig ; }
double n_gon ( int n ) { double pro_angle_var = 0 ; if ( n % 4 == 0 ) pro_angle_var = Math . pi * ( 180.0 / n ) / 180 ; else { pro_angle_var = Math . pi * ( 180.0 / ( 2 * n ) ) / 180 ; } int neg_x = 1.0e + 99 , neg_y = 1.0e + 99 , pos_y = - 1.0e + 99 ; for ( int j = 0 ; j < n ; j ++ ) { double px = Math . cos ( 2 * math . pi * j / n + pro_angle_var ) ; double py = Math . sin ( 2 * math . pi * j / n + pro_angle_var ) ; neg_x = Math . min ( neg_x , px ) ; neg_y = Math . min ( neg_y , py ) ; pos_y = Math . max ( pos_y , py ) ; } int opt2 = Math . max ( pos_x - neg_x , pos_y - neg_y ) ; return opt2 / ( double ) Math . sin ( Math . pi / n ) / 2 ; }
int find_max_k ( int n ) { int p = ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ; return 2 * p ; }
int nth_fibo ( int n ) { int a = ( 5 * 0.5 + 1 ) / 2 ; int b = ( - 5 * 0.5 + 1 ) / 2 ; int r = 5 * 0.5 ; int ans = ( a * n - b * n ) / r ; return ans ; }
double find_prob ( int l , int r ) { int count_of_ps = ( int ) Math . sqrt ( r ) - ( int ) Math . ceil ( Math . sqrt ( l ) ) + 1 ; int total = r - l + 1 ; double prob = ( double ) count_of_ps / ( double ) total ; return prob ; }
double previous_fibonacci ( int n ) { double a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return a ; }
List < Integer > dist_prime ( int arr [ ] , int all_primes ) { List < Integer > list = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < all_primes . size ( ) ; i ++ ) { for ( int j : arr ) { if ( j % i == 0 ) { list . add ( i ) ; break ; } } } return list ; }
int get_array ( int n ) { int ans [ ] = new int [ 2 * n ] ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) ans [ p2 ] = n ; n >>= 1 ; p2 *= 2 ; } return ans ; }
int maximum_length ( int a [ ] ) { int [ ] counts = new int [ 11 ] ; int ans = 0 ; for ( int index = 0 ; index < a . length ; index ++ ) { counts [ a [ index ] ] ++ ; } Arrays . sort ( counts ) ; if ( k . size ( ) == 1 ) { k . add ( i ) ; } } return ans + 1 ; }
int max_edges ( int n ) { int edges = 0 ; while ( n > 0 ) { edges ++ ; } return edges ; }
int find_k ( int n , int k ) { int [ ] a = new int [ k ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) a . add ( i ) ; } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) a . add ( i ) ; } return a [ k - 1 ] ; }
boolean is_keith ( int x , int temp ) { List < Integer > terms = new ArrayList < Integer > ( ) ; int n = 0 ; while ( temp > 0 ) { terms . add ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } Arrays . sort ( terms ) ; int next_term = 0 ; for ( int i = 0 ; next_term < x ; i ++ ) { next_term = 0 ; for ( int j = 1 ; j <= n ; j ++ ) next_term += terms . get ( i - j ) ; terms . add ( next_term ) ; } return next_term == x ; }
boolean factors ( int n , int k ) { List < Integer > v = new ArrayList < > ( ) ; while ( n % 2 == 0 ) { v . add ( 2 ) ; n /= 2 ; } if ( v . size ( ) >= k ) return true ; for ( int i = 3 ; i * i <= n ; i += 2 ) { if ( n % i == 0 ) { n = n / i ; v . add ( i ) ; } if ( v . size ( ) >= k ) return true ; } if ( n > 2 ) { v . add ( n ) ; } if ( v . size ( ) >= k ) return true ; } return false ; }
List < String > separate_paren_groups ( String paren_string ) { List < String > all_parens = new ArrayList < String > ( ) ; List < String > current_paren = new ArrayList < String > ( ) ; int current_depth = 0 ; for ( char c : paren_string ) { if ( c == "(" ) current_depth ++ ; current_paren . add ( c ) ; else if ( c == ")" ) current_depth -- ; current_paren . add ( c ) ; if ( current_depth == 0 ) all_parens . add ( "" . join ( current_paren ) ) ; current_paren . clear ( ) ; } } return all_parens ; }
List < Integer > parse_nested_parens ( String paren_string ) { List < Integer > all_levels = new ArrayList < Integer > ( ) ; int level = 0 ; int max_level = 0 ; for ( int i = 0 ; i < paren_string . length ( ) ; i ++ ) { char chr = paren_string . charAt ( i ) ; if ( chr == "(" ) { level ++ ; if ( level > max_level ) max_level = level ; } if ( chr == ")" ) { level -- ; if ( level == 0 ) all_levels . add ( max_level ) ; max_level = 0 ; } } } return all_levels ; }
List < String > filter_by_substring ( List < String > strings , String substring ) { List < String > result = new ArrayList < String > ( ) ; for ( String s : strings ) if ( substring . equals ( s ) ) result . add ( s ) ; return result ; }
int rolling_max ( int [ ] numbers ) { int running_max = 0 ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int n : numbers ) { if ( n > running_max ) running_max = n ; result . add ( running_max ) ; } return result ; }
String make_palindrome ( String s ) { if ( s == null ) return "" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char r_str = s . charAt ( i ) ; if ( r_str == r_str . charAt ( : : - 1 ) ) { String n_str = s . substring ( 0 , i ) ; String n2_str = n_str . substring ( : : - 1 ) ; return s + n2_str  ; } } return s . substring ( 0 , - 2 ) + s . substring ( : : - 1 ) ; }
String string_xor ( String a , String b ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) result . add ( "0" ) ; else result . add ( "1" ) ; } return result . toString ( ) ; }
String longest ( String ... strings ) { if ( ! strings ) return "" ; int max_len = Arrays . stream ( strings ) . max ( ) . getAsInt ( ) ; for ( String s : strings ) if ( s . length ( ) == max_len ) return s ; return "" ; }
String string_sequence ( int n ) { String s = new String ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( String . valueOf ( i ) ) ; s . add ( " " ) ; } s . add ( String . valueOf ( n ) ) ; return "" . join ( s ) ; }
int count_distinct_characters ( String s ) { HashSet < Character > distinct = new HashSet < Character > ( ) ; for ( char c : s . toLowerCase ( ) ) { distinct . add ( c ) ; } return distinct . size ( ) ; }
int how_many_times ( String s , String sub ) { int times = 0 ; for ( int i = 0 ; i < s . length ( ) - sub . length ( ) ; i ++ ) { if ( s . charAt ( i ) - sub . length ( ) == sub ) times ++ ; } return times ; }
String sort_numbers ( String numbers ) { Map < String , Integer > to_num = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < numbers . length ( ) ; i ++ ) { if ( i == numbers . length ( ) ) { to_num . put ( "zero" , "one" ) ; } else { to_num . put ( "zero" , "one" ) ; } } int [ ] ints = new int [ 2 ] ; Arrays . fill ( ints , 0 ) ; int current = new LinkedList < > ( ) ; for ( int i = 0 ; i < numbers . length ( ) + 1 ; i ++ ) { if ( numbers . charAt ( i ) == ' ' ) { if ( to_num . containsKey ( "" . join ( current ) ) ) { ints . add ( to_num . get ( "" . join ( current ) ) ; current . clear ( ) ; } } else { current . add ( numbers . charAt ( i ) ) ; } } Arrays . sort ( ints ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { result . add ( from_num . get ( ints . get ( i ) ) ; if ( i != ints . size ( ) - 1 ) result . add ( " " ) ; } return result . toString ( ) ; }
List < Integer > find_closest_elements ( List < Integer > numbers ) { List < Integer > closest_pair = new ArrayList < Integer > ( ) ; int distance = Math . abs ( closest_pair . get ( 0 ) - closest_pair . get ( 1 ) ) ; for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < numbers . size ( ) ; j ++ ) { if ( Math . abs ( numbers . get ( i ) - numbers . get ( j ) ) < distance ) { closest_pair . set ( 0 , numbers . get ( i ) ) ; closest_pair . set ( 1 , numbers . get ( j ) ) ; distance = Math . abs ( numbers . get ( i ) - numbers . get ( j ) ) ; } } } Collections . sort ( closest_pair ) ; return closest_pair ; }
List < Integer > rescale_to_unit ( int [ ] numbers ) { int min_num = Arrays . stream ( numbers ) . min ( ) . getAsInt ( ) ; int max_num = Arrays . stream ( numbers ) . max ( ) . getAsInt ( ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int n : numbers ) result . add ( ( n - min_num ) / ( max_num - min_num ) ) ; return result ; }
List < Integer > filter_integers ( int [ ] values ) { List < Integer > result = new ArrayList < > ( ) ; for ( int e : values ) { if ( isinstance ( e , int ) ) result . add ( e ) ; } return result ; }
List < Integer > remove_duplicates ( int [ ] numbers ) { HashMap < Integer , Integer > counter = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { counter . put ( i , counter . get ( i ) + 1 ) ; } List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { if ( counter . get ( i ) == 1 ) result . add ( i ) ; } return result ; }
String flip_case ( String s ) { List < String > result = new ArrayList < String > ( ) ; for ( char c : s ) { if ( c . isupper ( ) ) result . add ( c . upper ( ) ) ; else result . add ( c . lower ( ) ) ; } return result . get ( 0 ) ; }
List < String > filter_by_prefix ( List < String > strings , String prefix ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < strings . size ( ) ; i ++ ) { if ( strings . get ( i ) . startsWith ( prefix ) ) result . add ( strings . get ( i ) ) ; } return result ; }
int find_zero ( int [ ] xs ) { int ans = 0 , value = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) value += xs [ i ] * ans ** i  ; while ( Math . abs ( value ) > 1e-6 ) { int driv = 0 ; for ( int i = 1 ; i < xs . length ; i ++ ) { driv += xs [ i ] * ans ** ( i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) value += xs [ i ] * ans ** i  ; } return ans ; }
List < Integer > sort_third ( int l [ ] ) { List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . length ; i += 3 ) { thirds . add ( l [ i ] ) ; } Arrays . sort ( thirds ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . length ; i ++ ) { if ( i % 3 == 0 ) result . add ( thirds . get ( i / 3 ) ) ; else result . add ( l [ i ] ) ; } return result ; }
List < Integer > unique ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; result . add ( 0 ) ; return result ; }
int max_element ( List < Integer > l ) { return Collections . max ( Arrays . asList ( l ) ) ; }
boolean triples_sum_to_zero ( int l [ ] ) { for ( int i = 0 ; i < l . length ; i ++ ) { for ( int j = i + 1 ; j < l . length ; j ++ ) { for ( int k = j + 1 ; k < l . length ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) return true ; } } } return false ; }
int fib4 ( int n ) { int results [ ] = new int [ n + 1 ] ; for ( int i = 4 ; i <= n ; i ++ ) { results [ i ] = results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ; } return results [ n ] ; }
boolean is_palindrome ( String text ) { String pr = text . substring ( : : - 1 ) ; return pr == text ; }
String remove_vowels ( String text ) { List < Character > result = new ArrayList < Character > ( ) ; String vowels = "aeiou" ; for ( char ch : text ) { if ( ch . toLowerCase ( ) not in vowels ) result . add ( ch ) ; } return result . get ( 0 ) ; }
boolean same_chars ( String s0 , String s1 ) { Set < Character > set0 = new HashSet < Character > ( ) ; for ( char c : s0 ) set0 . add ( c ) ; Set < Character > set1 = new HashSet < Character > ( ) ; for ( char c : s1 ) set1 . add ( c ) ; return set0 == set1 ; }
List < Integer > common ( List < Integer > l1 , List < Integer > l2 ) { HashSet < Integer > us = new HashSet < Integer > ( ) ; for ( int e1 : l1 ) for ( int e2 : l2 ) { if ( e1 == e2 ) us . add ( e1 ) ; } int ret = new ArrayList < Integer > ( us ) ; ret . sort ( ) ; return ret ; }
boolean correct_bracketing ( String brackets ) { int depth = 0 ; for ( char b : brackets ) { if ( b == "(" ) depth ++ ; else depth -- ; } return depth == 0 ; }
String circular_shift ( int x , int shift ) { String s = Integer . toString ( x ) ; if ( shift > s . length ( ) ) return s . substring ( : : - 1 ) ; return s . substring ( - shift : ) + s . substring ( : - shift ) ; }
int search ( int lst [ ] ) { HashMap < Integer , Integer > counter = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < lst . length ; i ++ ) { counter . put ( i , counter . get ( i ) + 1 ) ; } int ans = - 1 ; for ( Map . Entry < Integer , Integer > b : counter . entrySet ( ) ) { if ( b . getValue ( ) >= key && b . getValue ( ) >= ans ) ans = key ; } return ans ; }
int smallest_change ( int arr [ ] ) { int ans = 0 ; for ( int i = 0 ; i < arr . length / 2 ; i ++ ) { if ( arr [ i ] != arr [ - i - 1 ] ) ans ++ ; } return ans ; }
int total_match ( List < String > lst1 , List < String > lst2 ) { int sum1 = 0 ; for ( String str : lst1 ) sum1 += str . length ( ) ; int sum2 = 0 ; for ( String str : lst2 ) sum2 += str . length ( ) ; return lst2 if ( sum1 > sum2 else lst1 ; }
boolean is_happy ( String s1 ) { if ( s1 . length ( ) < 3 ) return false ; for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ; } return true ; }
List < String > numerical_letter_grade ( List < String > grades ) { List < String > letter_grade = new ArrayList < String > ( ) ; for ( double gpa : grades ) { if ( gpa == 4.0 ) { letter_grade . add ( "A+" ) ; } else if ( gpa > 3.7 ) { letter_grade . add ( "A" ) ; } else if ( gpa > 3.3 ) { letter_grade . add ( "A-" ) ; } else if ( gpa > 2.0 ) { letter_grade . add ( "C+" ) ; } else if ( gpa > 1.7 ) { letter_grade . add ( "C" ) ; } else if ( gpa > 1.3 ) { letter_grade . add ( "C-" ) ; } else if ( gpa > 1.0 ) { letter_grade . add ( "D+" ) ; } else if ( gpa > 0.0 ) { letter_grade . add ( "D-" ) ; } else if ( gpa > 0.0 ) { letter_grade . add ( "E" ) ; } } return letter_grade ; }
String solve ( int n ) { List < String > bi_str = new ArrayList < String > ( ) ; int sum = 0 ; for ( char c = 0 ; c < n ; c ++ ) { sum += ( int ) ( c - '0' ) ; } while ( sum > 0 ) { bi_str . add ( 0 , String . valueOf ( sum % 2 ) ) ; sum /= 2 ; } return bi_str . get ( 0 ) ; }
String anti_shuffle ( String s ) { String ret [ ] = new String [ 2 * s . length ( ) + 1 ] ; List < String > current = new ArrayList < > ( ) ; for ( int i = 1 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { current . sort ( ) ; if ( ret ) ret . add ( " " ) ; ret . add ( String . join ( current ) ) ; current . clear ( ) ; } else { current . add ( s . charAt ( i ) ) ; } } return "" . join ( ret ) ; }
int sort_array ( int array [ ] ) { if ( array == null ) return array ; if ( ( array [ 0 ] + array [ - 1 ] ) % 2 == 1 ) array . sort ( ) ; else array . sort ( new sort ( ) ) ; return array ; }
String encrypt ( String s ) { List < Character > ans = new ArrayList < Character > ( ) ; for ( char c : s ) { if ( c . isalpha ( ) ) { ans . add ( ( char ) ( "a" + ( c - "a" + 4 ) % 26 ) ) ; } else { ans . add ( c ) ; } } return "" . join ( ans ) ; }
int is_bored ( String s ) { boolean is_start = true ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '.' s . charAt ( i ) == "?" s . charAt ( i ) == "!" ) is_start = true ; else if ( is_start ) { if ( s . charAt ( i ) == ' ' ) continue ; if ( s . charAt ( i ) == ' ' ) continue ; if ( s . charAt ( i ) == 'I' ) sum ++ ; is_start = false ; } } return sum ; }
String encode ( String message ) { String vowels = "aeiouAEIOU" ; List < Character > ret = new ArrayList < Character > ( ) ; for ( char c : message ) { if ( c . isupper ( ) ) { c = c . lower ( ) ; if ( c in vowels ) c = ( char ) ( "a" + ( int ) c - ( int ) "a" + 2 ) % 26 ) ; } else if ( c . islower ( ) ) { c = c . upper ( ) ; if ( c in vowels ) c = ( char ) ( "A" + ( int ) c - ( int ) "A" + 2 ) % 26 ) ; } ret . add ( c ) ; } return "" . join ( ret ) ; }
int skjkasdkd ( int [ ] lst ) { int largest = 0 ; for ( int n : lst ) { boolean prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n > largest ) { prime = false ; } } if ( prime ) largest = n ; } int sum = 0 ; String s = Integer . toString ( largest ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum += ( s . charAt ( i ) - '0' ) ; } return sum ; }
boolean check_dict_case ( Map < Character , Integer > dict ) { if ( dict == null ) return false ; int is_lower = 0 , is_upper = 0 ; for ( Map . Entry < Character , Integer > key : dict . entrySet ( ) ) { if ( c . islower ( ) ) is_lower = 1 ; else if ( c . isupper ( ) ) is_upper = 1 ; else return false ; } return is_lower + is_upper == 1 ; }
int multiply ( int a , int b ) { return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ; }
int count_upper ( String s ) { String u_vowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i += 2 ) { if ( s . charAt ( i ) in u_vowel ) count ++ ; } return count ; }
List < String > by_length ( String arr [ ] ) { List < String > num_to = new ArrayList < String > ( ) ; for ( int n : arr ) { if ( n >= 1 && n <= 9 ) new_arr . add ( num_to . get ( n ) ) ; } return new ArrayList < String > ( ) ; }
List < Integer > f ( int n ) { int sum = 0 , prod = 1 ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) result . add ( prod ) ; else result . add ( sum ) ; } return result ; }
int even_odd_palindrome ( int n ) { int even_count = 0 , odd_count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { String s = Integer . toString ( i ) ; String r_str = s . substring ( : - 1 ) ; if ( s == r_str ) { if ( i % 2 == 1 ) odd_count ++ ; else even_count ++ ; } } return [ even_count , odd_count ] ; }
Map < String , Integer > histogram ( String test ) { HashMap < String , Integer > count = new HashMap < String , Integer > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . length ( ) ; i ++ ) { if ( test . charAt ( i ) != " " ) { count . put ( test . charAt ( i ) , count . get ( test . charAt ( i ) ) + 1 ) ; if ( count . containsKey ( test . charAt ( i ) ) ) max = count . get ( test . charAt ( i ) ) ; } } HashMap < String , Integer > result = new HashMap < String , Integer > ( ) ; for ( Map . Entry < String , Integer > b : count . entrySet ( ) ) { if ( b . getValue ( ) == max ) result . put ( key , b . getValue ( ) ) ; } return result ; }
List < String > reverse_delete ( String s , int c ) { List < Character > ret = new ArrayList < Character > ( ) ; for ( int ch = 0 ; ch < s . length ( ) ; ch ++ ) { if ( ch not in c ) ret . add ( ch ) ; } String flag = "False" ; if ( ret . size ( ) == ret . size ( ) ) flag = "True" ; return [ "" . join ( ret ) , flag ] ; }
int sort_array ( int arr [ ] ) { List < Integer > bin = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { int b = 0 ; int n = Math . abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . add ( b ) ; } for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 1 ; j < arr . length ; j ++ ) { if ( bin . get ( j ) < bin . get ( j - 1 ) || bin . get ( j ) == bin . get ( j - 1 ) && arr . get ( j ) < arr . get ( j - 1 ) ) { bin . set ( j , bin . get ( j - 1 ) + 1 ) ; bin . set ( j , arr . get ( j ) ) ; } } } return arr ; }
char get_closest_vowel ( String word ) { String vowels = "AEIOUaeiou" ; for ( int i = word . length ( ) - 2 ; i >= 0 ; i -- ) { if ( word . charAt ( i ) in vowels && word . charAt ( i + 1 ) != vowels && word . charAt ( i - 1 ) != vowels ) { return word . charAt ( i ) ; } } return "" ; }
String match_parens ( String lst [ ] ) { List < String > str = new ArrayList < String > ( lst [ 0 ] + lst [ 1 ] ) ; List < Integer > l = new ArrayList < Integer > ( str ) ; int count = 0 ; for ( int c : l ) { if ( c == "(" ) count ++ ; if ( c == ")" ) count -- ; if ( count < 0 ) break ; } if ( count == 0 ) return "Yes" ; return "No" ; }
int maximum ( int arr [ ] , int k ) { if ( k == 0 ) return new int [ 0 ] ; Arrays . sort ( arr ) ; return arr [ - k : ] ; }
boolean valid_date ( String date ) { int n = date . length ( ) ; if ( n != 10 ) return false ; for ( int i = 0 ; i < n ; i ++ ) { if ( i == 2 i == 5 ) { if ( date . charAt ( i ) != "-" ) return false ; } else if ( date . charAt ( i ) . isdigit ( ) ) return false ; } int month = date . charAt ( 0 ) ; int day = date . charAt ( 3 ) ; int year = date . charAt ( 6 ) ; if ( month < 1 day > 31 ) return false ; if ( day < 1 day > 31 ) return false ; if ( day == 31 && ( month == 4 month == 6 month == 9 month == 11 month == 2 ) ) return false ; if ( day == 30 && month == 2 ) return false ; return true ; }
List < String > split_words ( String txt ) { List < String > current = new ArrayList < String > ( ) ; List < String > result = new ArrayList < > ( ) ; if ( " " in txt ) { for ( int i = 0 ; i < txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == " " ) { if ( current . size ( ) > 0 ) { result . add ( "" . join ( current ) ) ; current . clear ( ) ; } } else { current . add ( txt . charAt ( i ) ) ; } } if ( "," in txt ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == "," ) { if ( current . size ( ) > 0 ) { result . add ( "" . join ( current ) ) ; current . clear ( ) ; } } else { current . add ( txt . charAt ( i ) ) ; } } return result ; }
int tri ( int n ) { if ( n == 0 ) return [ 1 ] ; int tris [ ] = new int [ 3 ] ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) tris [ i / 2 + 1 ] = i / 2 + 1 ; else tris [ i - 1 ] += tris [ i - 2 ] + ( i + 3 ) / 2 ) ; } return tris ; }
boolean check_if_last_char_is_a_letter ( String txt ) { if ( txt == null ) return false ; return ( txt . charAt ( - 1 ) == '1' && ( txt . length ( ) == 1 || txt . charAt ( - 2 ) == '1' ) ) ; }
List < Integer > order_by_points ( int [ ] nums ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int num = 0 ; num < nums . length ; num ++ ) { String w = Integer . toString ( num ) ; int sum = 0 ; for ( int c = 0 ; c < '0' ; c ++ ) { sum += ( int ) c - ( int ) '0' ; } if ( num < 0 ) sum -= 2 * ( ( int ) w [ 0 ] - ( int ) '0' ) ) ; result . add ( sum ) ; } for ( int i = 0 ; i < nums . length ; i ++ ) { for ( int j = 1 ; j < nums . length ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { result [ j ] = result [ j - 1 ] ; result [ j - 1 ] = result [ j ] ; nums [ j ] = nums [ j ]  ; } } } return result ; }
List < String > bf ( String planet1 , String planet2 ) { List < String > planets = new ArrayList < String > ( ) ; int idx1 = planets . indexOf ( planet1 ) ; if ( planet1 . equals ( "Mercury" ) ) return new ArrayList < String > ( ) ; int idx2 = planets . indexOf ( planet2 ) ; if ( planet2 . equals ( "Neptune" ) ) return planets . get ( planet1 ) ; return planets . get ( idx2 + 1 ) ; }
List < String > sorted_list_sum ( List < String > lst ) { List < String > result = new ArrayList < > ( ) ; for ( String i : lst ) { if ( i . length ( ) % 2 == 0 ) result . add ( i ) ; } result . sort ( new StringComparator ( ) ) ; return result ; }
boolean cycpattern_check ( HashSet < Integer > a , HashSet < Integer > b ) { for ( int i = 0 ; i < b . size ( ) ; i ++ ) { int rotate = b . get ( i ) + b . get ( 0 ) ; if ( rotate in a ) return true ; } return false ; }
int even_odd_count ( int num ) { int even_count = 0 , odd_count = 0 ; for ( int i = 0 ; i < Math . abs ( num ) ; i ++ ) { if ( i % 2 == 0 ) even_count ++ ; else odd_count ++ ; } return [ even_count , odd_count ] ; }
String find_max ( List < String > words ) { String max = "" ; int max_length = 0 ; for ( String word : words ) { HashSet < String > unique = new HashSet < String > ( ) ; for ( int w : word ) { if ( unique . size ( ) > max_length ) { unique . add ( w ) ; } if ( unique . size ( ) == max_length && word < max ) { max = word ; max_length = unique . size ( ) ; } } return max ; }
String solve ( String s ) { boolean no_letter = true ; List < Character > result = new ArrayList < Character > ( ) ; for ( char ch : s ) { if ( ch . isupper ( ) ) { ch = ch . lower ( ) ; no_letter = false ; } else if ( ch . islower ( ) ) { ch = ch . upper ( ) ; no_letter = false ; } result . add ( ch ) ; } if ( no_letter ) return "" . join ( result ) ; else return "" . join ( result ) ; }
int most_frequent ( int arr [ ] , int n ) { HashMap < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) hp . put ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; else hp . put ( arr [ i ] , 1 ) ; } int max_count = 0 , res = - 1 ; for ( Map . Entry < Integer , Integer > b : hp . entrySet ( ) ) { if ( max_count < b ) { res = key ; max_count = b ; } } return res ; }
int find ( int [ ] a , int [ ] b , int k , int n1 , int n2 ) { Set < Integer > hash = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { hash . add ( b [ i ] ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( a [ i ] not in hash ) missing ++ ; if ( missing == k ) return a [ i ] ; } return - 1 ; }
int solve_query ( int start , int end , int arr [ ] ) { HashMap < Integer , Integer > frequency = new HashMap < > ( ) ; for ( int i = start ; i <= end ; i ++ ) { frequency . put ( arr [ i ] , frequency . get ( arr [ i ] ) + 1 ) ; } int count = 0 ; for ( Map . Entry < Integer , Integer > b : frequency . entrySet ( ) ) { if ( b . getKey ( ) == arr [ i ] ) count += 1 ; } return count ; }
int segregate ( int arr [ ] , int n ) { int i , j = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= 0 ) { arr [ i ] = arr [ j ] ; arr [ j ] = arr [ i ] ; } } return j ; }
int count_triplets ( int a [ ] , int n ) { Set < Integer > hash = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { hash . add ( a [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( xr in s && xr != a [ i ] && xr != a [ j ] ) count ++ ; } } return ( count / 3 ) ; }
int least_frequent ( int arr [ ] , int n ) { HashMap < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) hp . put ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; else hp . put ( arr [ i ] , 1 ) ; } int min_count = n + 1 ; int res = - 1 ; for ( Map . Entry < Integer , Integer > b : hp . entrySet ( ) ) { if ( min_count >= b ) { res = key ; min_count = b ; } } return res ; }
int find_permutations ( int [ ] arr ) { int cnt = 0 ; int max_ind = - 1 , min_ind = 10000000 ; int n = arr . length ; HashMap < Integer , Integer > index_of = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { index_of . put ( arr [ i ] , i + 1 ) ; } for ( int i = 1 ; i <= n ; i ++ ) { max_ind = Math . max ( max_ind , index_of . get ( i , 0 ) ) ; min_ind = Math . min ( min_ind , index_of . get ( i , 0 ) ) ; if ( max_ind - min_ind + 1 == i ) cnt ++ ; } return cnt ; }
int form_quadruplets ( int arr [ ] , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; Arrays . sort ( arr , new sort ( ) ) ; for ( int i = 0 ; i < n - pairs ; i += 2 ) ans += arr [ i + 2 ] ; return ans ; }
String lexicographically_maximum ( String s , int n ) { HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; } else { m . put ( s . charAt ( i ) , 1 ) ; } } int j = v . size ( ) - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) >= 'a' + min ( n , 25 ) || ( s . charAt ( i ) in m && m . get ( s . charAt ( i ) ) > 1 ) { if ( v . get ( j ) < s . charAt ( i ) ) { continue ; } m . put ( s . charAt ( i ) , v . get ( j ) + s . substring ( i + 1 ) ) ; j -- ; } if ( j < 0 ) break ; } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) >= 'a' + min ( n , 25 ) || s . charAt ( i ) in m && m . get ( s . charAt ( i ) ) > 1 ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) - 1 ) ; s = s . substring ( 0 , i ) + v . get ( l ) + s . substring ( i + 1 ) ; l ++ ; } } return s ; }
int no_of_valid_kbers ( int k , int [ ] arr ) { Set < Integer > hash = new HashSet < Integer > ( ) ; while ( k != 0 ) { hash . add ( k % 10 ) ; k /= 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { int no = arr [ i ] ; boolean flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( digit not in hash ) { flag = false ; break ; } no = no / 10 ; } if ( flag == true ) count ++ ; } return count ; }
int del_cost ( String s , int cost ) { int ans = 0 ; HashMap < Character , Integer > for_max = new HashMap < Character , Integer > ( ) ; HashMap < Character , Integer > for_tot = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) not in for_max ) for_max . put ( s . charAt ( i ) , cost . get ( i ) ) ; else for_max . put ( s . charAt ( i ) , for_max . get ( s . charAt ( i ) ) ) ; if ( s . charAt ( i ) not in for_tot ) for_tot . put ( s . charAt ( i ) , cost . get ( i ) + cost . get ( i ) ) ; } for ( Map . Entry < Character , Integer > key : for_max . entrySet ( ) ) ans += for_tot . get ( key ) - value ; return ans ; }
List < String > replace_duplicates ( List < String > names ) { HashMap < String , Integer > hmap = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < names . size ( ) ; i ++ ) { if ( hmap . containsKey ( names . get ( i ) ) ) { hash . put ( names . get ( i ) , 1 ) ; } else { int count = hmap . get ( names . get ( i ) ) ; hmap . put ( names . get ( i ) , count + 1 ) ; names . add ( count ) ; } } return names ; }
List < Integer > minmax_numbers ( int [ ] [ ] matrix , List < Integer > res ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < matrix . length ; i ++ ) { int min_r = Integer . MAX_VALUE ; for ( int j = 0 ; j < matrix [ i ] . length ; ++ j ) { min_r = Math . min ( min_r , matrix [ i ] [ j ] ) ; } s . add ( min_r ) ; } for ( int j = 0 ; j < matrix [ 0 ] . length ; ++ j ) { int max_c = Integer . MIN_VALUE ; for ( int i = 0 ; i < matrix . length ; i ++ ) { max_c = Math . max ( max_c , matrix [ i ] [ j ] ) ; } if ( max_c in s ) res . add ( max_c ) ; } return res ; }
int length_of_longest_ap ( int a [ ] , int n ) { Map < Integer , Integer > dp = new HashMap < Integer , Integer > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int d = a [ j ] - a [ i ] ; if ( dp . containsKey ( d ) ) { dp . put ( d , dp . get ( i ) + 1 ) ; } else dp . put ( d , j , 2 ) ; } else { dp . put ( d , new HashMap < Integer , Integer > ( ) ) ; dp . put ( d , new HashMap < Integer , Integer > ( ) ) ; dp . put ( d , j , 2 ) ; } res = Math . max ( res , dp . get ( d ) [ j ] ) ; } } return res ; }
char find_kth_char ( int n , int k ) { char prev = "A" , cur = "" ; if ( n == 1 ) return "A" ; for ( int i = 2 ; i <= n ; i ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . length ( ) ; i ++ ) { if ( prev . charAt ( i ) == "A" ) { prev = prev . substring ( 0 , i ) + "B" + prev . charAt ( i + 1 ) ; } else { prev = prev . substring ( 0 , i ) + "A" + prev . charAt ( i + 1 ) ; } } prev = prev . substring ( : : - 1 ) ; cur += prev ; prev = cur ; } return cur . charAt ( k - 1 ) ; }
int find_kth_largest ( String s , int k ) { Arrays . sort ( s ) ; return tmp . get ( k - 1 ) ; }
int sub_arraylen ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; mp . put ( arr [ 0 ] , 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp . put ( arr [ i ] , i ) ; } int len = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) continue ; else { int x = arr [ i ] - k ; if ( x == 0 ) len = Math . min ( len , i ) ; if ( mp . containsKey ( x ) ) continue ; else { len = Math . min ( len , i - mp . get ( x ) ) ; } } } return len ; }
int find_max_len ( int [ ] a , int k ) { int n = a . length ; Arrays . sort ( vis ) ; HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a [ i ] , i ) ; } int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vis [ i ] ) { int check = a [ i ] * k ; if ( mp . containsKey ( check ) ) { c ++ ; vis [ mp . get ( check ) ] = true ; } } } return n - c ; }
List < Integer > min_distance_points ( int a [ ] , int k , int n ) { Map < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; Queue < Integer > q = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . put ( a [ i ] , 1 ) ; q . add ( a [ i ] ) ; } List < Integer > ans = new ArrayList < Integer > ( ) ; while ( k > 0 ) { int x = q . peek ( ) ; q = q . peek ( ) ; ans . add ( x - 1 ) ; k -- ; } if ( x - 1 ) not in m && k > 0 ) { m . put ( x - 1 , 1 ) ; q . add ( x - 1 ) ; ans . add ( x - 1 ) ; k -- ; } if ( x + 1 ) not in m && k > 0 ) { m . put ( x + 1 , 1 ) ; q . add ( x + 1 ) ; ans . add ( x + 1 ) ; k -- ; } } return ans ; }
boolean isValidLen ( String s , int length , int k ) { int n = s . length ( ) ; HashMap < Character , Integer > mp = new HashMap < Character , Integer > ( ) ; int right = 0 ; while ( right < length ) { if ( mp . containsKey ( s . charAt ( right ) ) ) mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; else mp . put ( s . charAt ( right ) , 1 ) ; right ++ ; } if ( mp . size ( ) <= k ) return true ; while ( right < n ) { if ( mp . containsKey ( s . charAt ( right ) ) ) mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; else mp . put ( s . charAt ( right ) , 1 ) ; } mp . put ( s . charAt ( right - length ) , mp . get ( s . charAt ( right - length ) ) - 1 ) ; if ( mp . containsKey ( s . charAt ( right - length ) ) == 0 ) { mp . remove ( s . charAt ( right - length ) ) ; } if ( mp . containsKey ( s . charAt ( right - length ) ) ) { mp . put ( s . charAt ( right - length ) , mp . get ( s . charAt ( right - length ) ) ; } if ( mp . size ( ) <= k ) return true ; right ++ ; } return mp . size ( ) <= k ; }
int partition ( int arr [ ] , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; char t = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = t ; } } int t = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ high ] ; arr [ high ] = t ; return i + 1 ; }
int str_score ( String strs [ ] , String s , int n ) { HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . containsKey ( strs [ i ] ) ) m . put ( strs [ i ] , i + 1 ) ; } if ( s == null ) return 0 ; int score = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { score += s . charAt ( i ) - "a" + 1 ; } score = score * m . get ( s ) ; return score ; }
List < Integer > count_ele ( Stack < Integer > s , List < Integer > a , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; List < Integer > ans = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int num = a . get ( i ) ; if ( mp . get ( num ) == null ) { ans . add ( 0 ) ; } else { int cnt = 0 ; while ( s . peek ( ) != num ) { mp . put ( s . peek ( ) , true ) ; s . pop ( ) ; cnt ++ ; } s . pop ( ) ; cnt ++ ; ans . add ( cnt ) ; } } return ans ; }
int maxDistinctChar ( String s , int n , int k ) { HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( s . charAt ( i ) ) ) { freq . put ( s . charAt ( i ) , freq . get ( s . charAt ( i ) ) + 1 ) ; } else { freq . put ( s . charAt ( i ) , 1 ) ; } } List < Integer > v = new ArrayList < > ( ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) - 1 , k ) ; v . set ( i , v . get ( i ) - mn  ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) , k ) ; v . set ( i , v . get ( i ) - mn  ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . get ( i ) == 1 ) res ++ ; } return res ; }
int find_kth ( int [ ] arr , int n , int k ) { Map < Integer , Integer > missing = new HashMap < Integer , Integer > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . put ( arr [ i ] , 1 ) ; } int max_m = Collections . max ( Arrays . asList ( arr ) ) ; int min_m = Collections . min ( Arrays . asList ( arr ) ) ; for ( int i = min_m + 1 ; i <= max_m ; i ++ ) { if ( i not in missing . entrySet ( ) ) { count ++ ; } if ( count == k ) return i ; } return - 1 ; }
boolean almost_sort ( int a [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = a [ i ] ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { return false ; } } return true ; }
int maximum_sum ( String s , int n , int k ) { int sum = 0 ; int [ ] freq = new int [ 256 ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ s . charAt ( i ) ] ++ ; } Arrays . sort ( freq , new sort ( ) ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; }
int find_min_operations ( int [ ] arr , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int j = i ; j < n ; j ++ ) { if ( freq . containsKey ( arr [ j ] ) ) { freq . put ( arr [ j ] , freq . get ( arr [ j ] ) + 1 ) ; } else { freq . put ( arr [ j ] , 1 ) ; } } int max1 = 0 ; int num = 0 ; for ( Map . Entry < Integer , Integer > b : freq . entrySet ( ) ) { if ( value > max1 ) max1 = value ; num = key ; } } for ( Map . Entry < Integer , Integer > b : freq . entrySet ( ) ) { if ( b . getValue ( ) != num ) operations += b . getValue ( ) ; } } return operations ; }
List < String > sub_string ( String s , int n ) { List < String > v = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int len = 1 ; len <= n - i ; len ++ ) { String find = s . substring ( i , i + len ) ; v . add ( find ) ; } } return v ; }
boolean check_unique_frequency ( int arr [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( arr [ i ] ) ) { freq . put ( arr [ i ] , freq . get ( arr [ i ] ) + 1 ) ; } else { freq . put ( arr [ i ] , 1 ) ; } } HashSet < Integer > unique_freq = new HashSet < Integer > ( ) ; for ( Map . Entry < Integer , Integer > i : freq . entrySet ( ) ) { if ( unique_freq . contains ( i . getValue ( ) ) { return false ; } else { unique_freq . add ( freq . getValue ( ) ) ; } } return true ; }
int min_cost ( String str1 , String str2 , int n ) { int cost = 0 ; List < String > tmp = new ArrayList < String > ( str1 ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp . get ( i ) != str2 . get ( i ) ) { if ( i < n - 1 && tmp . get ( i + 1 ) != str2 . get ( i + 1 ) ) { tmp . set ( i , tmp . get ( i + 1 ) + 1 ) ; tmp . set ( i , i ) ; cost ++ ; } else { cost ++ ; } } } return cost ; }
boolean is_valid_num ( String x ) { HashMap < Character , Integer > mp = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( mp . containsKey ( x . charAt ( i ) - "0" ) ) return false ; else if ( x . charAt ( i ) - "0" > 5 ) return false ; else { mp . put ( x . charAt ( i ) - "0" , 1 ) ; } } return true ; }
int minimize_diff ( int [ ] arr , int n , int k ) { int max_element = Collections . max ( Arrays . asList ( arr ) ) ; int min_element = Collections . min ( Arrays . asList ( arr ) ) ; if ( max_element - min_element <= k ) return max_element - min_element ; int avg = ( max_element + min_element ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) arr [ i ] -= k ; else arr [ i ] += k ; } max_element = Collections . max ( Arrays . asList ( arr ) ) ; min_element = Collections . min ( Arrays . asList ( arr ) ) ; return max_element - min_element ; }
int get_min_cost ( int arr [ ] , int n ) { int min_ele = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; return min_ele * ( n - 1 ) ; }
boolean possibility ( char m [ ] , int length , char [ ] s ) { int count_odd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( m [ s [ i ] - '0' ] & 1 ) count_odd ++ ; } if ( count_odd > 1 ) return false ; } return true ; }
int minimum_cost_of_breaking ( int x [ ] , int y [ ] , int m , int n ) { int res = 0 ; Arrays . sort ( x ) ; Arrays . sort ( y ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += x [ i ]  ; i ++ ; } res += total * vert  ; total = 0 ; while ( j < n ) { total += y [ j ]  ; j ++ ; } res += total * hzntl ; return res ; }
int find_maximum_score ( int a [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( a [ i ] ) ) { freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; } else { freq . put ( a [ i ] , 1 ) ; } } int [ ] dp = new int [ 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = freq . get ( 1 ) ; for ( int i = 2 ; i < dp . size ( ) ; i ++ ) dp [ i ] = Math . max ( dp . get ( i - 1 ) , dp . get ( i - 2 ) + freq . get ( i , 0 ) * i ) ; return dp [ - 1 ] ; }
int count_ways ( String s , int t , int k , int mod ) { int n = s . length ( ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = s . charAt ( i ) + s . charAt ( i ) ; if ( p == t ) a ++ ; else b ++ ; } int dp1 [ ] = new int [ k + 1 ] ; int [ ] dp2 = new int [ k + 1 ] ; for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ; dp2 [ i ] = ( dp1 [ i - 1 ] * b ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ; } return dp1 [ k ] ; }
int find_subarray_sum ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > prev_sum = new HashMap < Integer , Integer > ( ) ; int res = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ] ; if ( curr_sum == k ) res ++ ; if ( prev_sum . containsKey ( curr_sum - k ) ) res += prev_sum . get ( curr_sum - k ) ; prev_sum . put ( curr_sum , prev_sum . get ( curr_sum ) + 1 ) ; } return res ; }
int maximum_occurrence ( String s ) { int n = s . length ( ) ; HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String temp = "" ; temp += s . charAt ( i ) ; freq . put ( temp , freq . get ( temp ) + 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { String temp = "" ; temp += s . charAt ( i ) ; temp += s . charAt ( j ) ; freq . put ( temp , freq . get ( temp ) + 1 ) ; } } int answer = Integer . MIN_VALUE ; for ( Map . Entry < Integer , Integer > b : freq . entrySet ( ) ) { answer = Math . max ( answer , b . getValue ( ) ) ; } return answer ; }
int count_characters ( String str , char [ ] chars ) { int res = 0 ; HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < chars . length ; i ++ ) { if ( freq . containsKey ( chars [ i ] ) ) { freq . put ( chars [ i ] , freq . get ( chars [ i ] ) + 1 ) ; } else { freq . put ( chars [ i ] , 1 ) ; } } for ( String str : strings ) { boolean flag = true ; for ( int c : str ) { if ( freq . containsKey ( c ) ) { flag = false ; break ; } } if ( flag ) { res += str . length ( ) ; } } return res ; }
int distinct_substring ( String p , String q , int k , int n ) { HashSet < String > ss = new HashSet < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; String s = "" ; for ( int j = i ; j < n ; j ++ ) { int pos = p . charAt ( j ) - 'a' ; sum += q . charAt ( pos ) - '0' ; s += p . charAt ( j ) ; if ( sum <= k ) ss . add ( s ) ; else break ; } } return ss . size ( ) ; }
int unique_morse_rep ( String arr [ ] ) { int morse_code [ ] = { ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , ".." , ".---" , "-.-" , ".-." , "..." , "-" , "..-" , "-.--" , "--.." } ; HashSet < Integer > st = new HashSet < Integer > ( ) ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { String temp = "" ; int m = arr [ i ] . length ; for ( int j = 0 ; j < m ; j ++ ) { temp += morse_code [ arr [ i ] . charAt ( j ) - "a" ] ; } st . add ( temp ) ; } return st . size ( ) ; }
int count_substrings ( String str , int k ) { int n = str . length ( ) ; int answer = 0 ; HashMap < Character , Integer > map = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( str . charAt ( i ) not in map ) { map . put ( str . charAt ( i ) , 1 ) ; } else { map . put ( str . charAt ( i ) , 1 ) ; } } if ( map . containsKey ( k ) ) { answer ++ ; } for ( int i = k ; i < n ; i ++ ) { if ( str . charAt ( i ) not in map ) { map . put ( str . charAt ( i ) , 1 ) ; } else { map . put ( str . charAt ( i ) , 1 ) ; } map . put ( str . charAt ( i ) , map . get ( str . charAt ( i ) ) + 1 ) ; } if ( map . containsKey ( str . charAt ( i - k ) ) { answer ++ ; } } return answer ; }
boolean can_construct ( String s , int k ) { HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; int p = 0 ; if ( s . length ( ) == k ) return true ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; else m . put ( s . charAt ( i ) , 1 ) ; } if ( k > s . length ( ) ) return false ; else { for ( Map . Entry < Character , Integer > b : m . entrySet ( ) ) { if ( b . get ( key ) % 2 != 0 ) p ++ ; } } } if ( k < p ) return false ; return true ; }
boolean equal_ignore_case ( String str1 , String str2 ) { str1 = str1 . toUpperCase ( ) ; str2 = str2 . toUpperCase ( ) ; return str1 == str2 ; }
int find_longest_sub ( String bin ) { int n = bin . length ( ) ; int sum = 0 ; HashMap < Integer , Integer > prev_sum = new HashMap < Integer , Integer > ( ) ; int max_len = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( bin . charAt ( i ) == "1" ) sum ++ ; else { sum -- ; } if ( sum > 0 ) max_len = i + 1 ; else if ( sum <= 0 ) { if ( prev_sum . containsKey ( sum - 1 ) ) { int curr_len = i - prev_sum . get ( sum - 1 ) ; max_len = Math . max ( max_len , curr_len ) ; } } if ( sum != prev_sum . containsKey ( sum ) ) prev_sum . put ( sum , i ) ; } return max_len ; }
boolean has_all_codes ( String s , int k ) { HashSet < Integer > us = new HashSet < Integer > ( ) ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { us . add ( s . substring ( i , k ) ) ; } return us . size ( ) == 1 << k ; }
boolean check_palin ( String word ) { int n = word . length ( ) ; word = word . toLowerCase ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( word . charAt ( i ) != word . charAt ( n - 1 ) ) return false ; n -- ; } return true ; }
String convert ( String str ) { String w = "" , z = "" ; str = str . toUpperCase ( ) + " " ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ch != ' ' ) w += ch ; else { z += w . charAt ( 0 ) . toLowerCase ( ) + w . substring ( 1 , w . length ( ) ) + " " ; w = "" ; } } return z ; }
int max_lines ( int n , int x1 [ ] , int y1 [ ] , int x2 [ ] , int y2 [ ] ) { HashSet < Double > s = new HashSet < Double > ( ) ; double slope = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( x1 [ i ] == x2 [ i ] ) slope = Integer . MAX_VALUE ; else slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; s . add ( slope ) ; } return s . size ( ) ; }
List < Integer > prime_factor ( int n ) { List < Integer > primef = new ArrayList < Integer > ( ) ; while ( n % 2 == 0 ) { if ( 2 in primef ) primef . put ( 2 , primef . get ( 2 ) + 1 ) ; else primef . put ( 2 , 1 ) ; n = n / 2 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { if ( primef . containsKey ( i ) ) primef . put ( i , primef . get ( i ) + 1 ) ; else primef . put ( i , 1 ) ; n = n / i ; } } if ( n > 2 ) primef . put ( n , 1 ) ; return primef ; }
boolean is_divisible_by_divisor ( String s , int d ) { s %= d ; Set < Integer > hash_map = new HashSet < Integer > ( ) ; hash_map . add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hash_map . containsKey ( s ) ) { return "Yes" ; } return "No" ; } else { hash_map . add ( s ) ; } } return "Yes" ; }
boolean odd_sum ( int a [ ] , int n , int k ) { Set < Integer > odd = new HashSet < Integer > ( ) ; HashSet < Integer > even = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { even . add ( a [ i ] ) ; } else { odd . add ( a [ i ] ) ; } } if ( odd . size ( ) >= k ) return true ; boolean flag = false ; for ( int i = 1 ; i <= k ; i += 2 ) { int needed = k - i ; if ( needed <= even . size ( ) ) { return true ; } } return flag ; }
int day_of_year ( String date ) { int [ ] days = new int [ 31 ] ; int year = date . charAt ( 0 ) ; int month = date . charAt ( 5 ) ; int day = date . charAt ( 8 ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 year % 400 == 0 ) ) day ++ ; while ( month > 1 ) { day = day + days [ month - 2 ] ; month -- ; } return day ; }
boolean is_perfect_square ( int arr [ ] , int n ) { HashMap < Integer , Integer > umap = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( umap . containsKey ( arr [ i ] ) ) { umap . put ( arr [ i ] , umap . get ( arr [ i ] ) + 1 ) ; } else { umap . put ( arr [ i ] , 1 ) ; } } for ( Map . Entry < Integer , Integer > b : umap . entrySet ( ) ) { if ( b . getValue ( ) % 2 == 1 ) { return false ; } } return true ; }
int min_moves ( int n ) { String s = Integer . toString ( n ) ; int ans = Integer . MAX_VALUE ; int length = s . length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { for ( int j = 0 ; j < length ; j ++ ) { if ( i == j ) continue ; int [ ] t = new int [ s . length ( ) ] ; int cur = 0 ; for ( int k = i ; k < length - 1 ; k ++ ) { t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = t [ k + 1 ] ; cur ++ ; } for ( int k = j - ( j > i ) ; k -- ) { t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = t [ k ] ; cur ++ ; } int pos = - 1 ; for ( int k = 0 ; k < length ; k ++ ) { if ( t [ k ] != "0" ) { pos = k  ; break ; } } for ( int k = pos ; k >= 0 ; k -- ) { t [ k ] = t [ k - 1 ] ; t [ k - 1 ] = t [ k ] ; cur ++ ; } int nn = ( int ) s . charAt ( i ) ; if ( nn % 25 == 0 ) { ans = Math . min ( ans , cur ) ; } } } if ( ans == Integer . MAX_VALUE ) return - 1 ; return ans ; }
int minimum_operations ( int a [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; } int count = 0 ; for ( Map . Entry < Integer , Integer > b : mp . entrySet ( ) ) { if ( b . getValue ( ) > 1 ) count += b . getValue ( ) - 1 ; } return count ; }
int kaprekar_rec ( int n , int prev ) { if ( n == 0 ) return 0 ; prev = n ; int [ ] digits = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n /= 10 ; } Arrays . sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) asc = asc * 10 + digits [ i ] ; digits . sort ( ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) desc = desc * 10 + digits [ i ] ; int diff = Math . abs ( asc - desc ) ; if ( diff == prev ) return diff ; return kaprekar_rec ( diff , prev ) ; }
String fraction_to_decimal ( int numr , int denr ) { String res = "" ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; int rem = numr % denr  ; while ( rem != 0 && rem != mp . get ( rem ) ) { mp . put ( rem , res . length ( ) ) ; rem = rem * 10 ; int res_part = rem / denr ; res += String . valueOf ( res_part ) ; rem = rem % denr  ; } if ( rem == 0 ) return "" ; if ( mp . containsKey ( rem ) ) { return res . substring ( mp . get ( rem ) ) ; } return "" ; }
boolean is_fancy ( String num ) { HashMap < String , String > fp = new HashMap < String , String > ( ) ; fp . put ( "0" , "0" ) ; fp . put ( "1" , "1" ) ; fp . put ( "6" , "9" ) ; fp . put ( "8" , "8" ) ; fp . put ( "9" , "6" ) ; int n = num . length ( ) ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( fp . get ( num . charAt ( l ) ) != fp . get ( num . charAt ( r ) ) { return false ; } l ++ ; r -- ; } return true ; }
double distinct_odd_ratio ( int [ ] numbers ) { int distinct_count = count ( numbers ) ; int distinct_odd_count = count ( numbers ) ; return distinct_odd_count / distinct_count ; }
int compare_sum ( int numbers [ ] , int [ ] words ) { int int_sum = sum ( numbers ) ; int word_length_sum = sum ( words ) ; if ( int_sum < word_length_sum ) return - 1 ; else if ( int_sum > word_length_sum ) return 1 ; else return 0 ; }
boolean all_longer_than ( List < String > short_words , List < String > long_words ) { int max_of_short = Arrays . stream ( short_words ) . max ( ) . getAsInt ( ) ; int min_of_long = Arrays . stream ( long_words ) . min ( ) . getAsInt ( ) ; return min_of_long > max_of_short ; }
int compare_odd_even_range ( int [ ] numbers ) { int range_odd = Math . max ( [ n for ( int i = 0 ; i < numbers . length ; i ++ ) { if ( n % 2 == 1 ) return - 1 ; if ( n % 2 == 1 ) return 1 ; } int range_even = Math . max ( [ n for ( int i = 0 ; i < numbers . length ; i ++ ) { if ( range_odd < range_even ) return - 1 ; if ( range_odd > range_even ) return 1 ; } return 0 ; }
int average_distinct_length ( Set < String > words ) { Set < String > distinct_words = new HashSet < String > ( words ) ; int average_len = ( int ) ( Math . sum ( distinct_words ) / Math . sum ( distinct_words ) ) ; return average_len ; }
int withdraw_balance ( int start , int withdrawals [ ] ) { int end = functools . reduce ( lambda balance , nextWithdrawal : balance - nextWithdrawal if ( nextWithdrawal <= balance ) balance ; return end ; }
String first_short_and_starts_with_o ( String words ) { String matched_element = null ; return matched_element ; }
int big_number_at_index ( int [ ] numbers , int index ) { int target_num = numbers [ 0 ] ; return target_num ; }
boolean contains_square_in_range ( int range_start , int range_length ) { boolean contains_square = true ; for ( int n = range_start ; n <= range_start + range_length ; n ++ ) { contains_square = true ; } return contains_square ; }
HashMap < Integer , Integer > group_numbers_by_mod ( int [ ] numbers , int mod ) { HashMap < Integer , Integer > number_groups = new HashMap < Integer , Integer > ( ) ; for ( int k = 0 ; k < numbers . length ; k ++ ) { if ( number_groups . containsKey ( k ) ) { number_groups . put ( k , number_groups . get ( k ) + list ( g ) ) ; } } return number_groups ; }
HashMap < Integer , Integer > group_words_by_first_char ( List < String > words ) { HashMap < Integer , Integer > word_groups = new HashMap < Integer , Integer > ( ) ; for ( int k = 0 ; k < words . size ( ) ; k ++ ) { if ( word_groups . containsKey ( k ) ) { word_groups . put ( k , word_groups . get ( k ) + g . get ( 0 ) ) ; } else { word_groups . put ( k , new ArrayList < Integer > ( ) ) ; } } return word_groups ; }
List < String > order_by_length_and_descending ( List < String > words ) { List < String > sorted_words = new ArrayList < String > ( words ) ; Collections . sort ( sorted_words , new sort ( ) ) ; return sorted_words ; }
List < String > order_first_char_descending_reverse ( String words ) { List < String > sorted_words = new ArrayList < String > ( words ) ; Collections . sort ( sorted_words ) ; return sorted_words ; }
int [ ] get_sublist_of_negative ( int numbers [ ] , int start , int length ) { int [ ] sub_list = new int [ length ] ; return sub_list ; }
List < Integer > get_positive_sequence ( int [ ] numbers ) { List < Integer > sub_sequence = new ArrayList < Integer > ( ) ; while ( true ) { sub_sequence . add ( n > 0 ) ; } return sub_sequence ; }
int [ ] get_larger_than_index_sequence ( int [ ] numbers ) { int sub_sequence [ ] = new int [ numbers . length ] ; return sub_sequence ; }
List < String > rearrange_word_by_indexes ( String words , int indexes ) { int [ ] new_indexes = new int [ indexes . length ] ; List < String > new_words = new ArrayList < String > ( words ) ; return new_words ; }
List < pair > get_words_upper_lower ( List < String > words ) { List < pair > upper_lower_words = new ArrayList < pair > ( ) ; return upper_lower_words ; }
boolean [ ] select_if_in_place ( int [ ] numbers ) { boolean [ ] nums_in_place = new boolean [ numbers . length ] ; return nums_in_place ; }
int [ ] select_pairs ( int [ ] numbers_a , int [ ] numbers_b ) { int [ ] pairs = new int [ numbers_a . length ] ; for ( int a = 0 ; a < b ; a ++ ) pairs [ a ] = b ; return pairs ; }
String [ ] string_cross_join ( String end_words , String begin_words ) { String [ ] cross_strings = new String [ end_words . length ] ; return cross_strings ; }
int elements_contain_subword ( List < String > words , String subword ) { if ( subword . equals ( w ) ) return 1 ; else if ( subword . equals ( w ) ) return 0 ; else return - 1 ; }
int concat_large_numbers ( int [ ] numbers_a , int [ ] numbers_b , int flag ) { int all_numbers [ ] = new int [ numbers_a . length ] + new int [ numbers_b . length ] ; return all_numbers ; }
int dot_product ( int vector_a [ ] , int vector_b [ ] ) { int dot_product = ( int ) Math . sum ( vector_a * vector_b ) ; return dot_product ; }
int set_difference ( Set < Integer > set_a , Set < Integer > set_b ) { int difference [ ] = new int [ set . size ( ) ] ; return difference ; }
