boolean hasCloseElements ( int [ ] numbers , int threshold ) { for ( int i = 0 ; i < numbers . length ; i ++ ) { for ( int j = i + 1 ; j < numbers . length ; j ++ ) { int distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) { return true ; } } } return false ; } 
double truncateNumber ( double number ) { return number % 1 ; } 
boolean belowZero ( int [ ] operations ) { int balance = 0 ; for ( int op : operations ) { balance += op ; if ( balance < 0 ) { return true ; } } return false ; } 
double meanAbsoluteDeviation ( int [ ] numbers ) { double sumNum = 0 ; for ( int num : numbers ) { sumNum += num ; } double mean = sumNum / numbers . length ; double sumAbsDiff = 0 ; for ( int num : numbers ) { sumAbsDiff += Math . abs ( num - mean ) ; } return sumAbsDiff / numbers . length ; } 
ArrayList intersperse ( int [ ] numbers , int delimiter ) { ArrayList result = new ArrayList ( ) ; if ( numbers . length == 0 ) { return result ; } for ( int i = 0 ; i < numbers . length - 1 ; i ++ ) { result . add ( numbers [ i ] ) ; result . add ( delimiter ) ; } result . add ( numbers [ numbers . length - 1 ] ) ; return result ; } 
int [ ] sumProduct ( int [ ] numbers ) { int sumValue = 0 ; int prodValue = 1 ; for ( int n : numbers ) { sumValue += n ; prodValue *= n ; } return new int [ ] { sumValue , prodValue } ; } 
List < String > allPrefixes ( String string ) { List < String > result = new ArrayList < > ( ) ; for ( int i = 1 ; i <= string . length ( ) ; i ++ ) { result . add ( string . substring ( 0 , i ) ) ; } return result ; } 
List < Integer > parseMusic ( String musicString ) { List < Character > current = new ArrayList < > ( ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i <= musicString . length ( ) ; i ++ ) { if ( i == musicString . length ( ) || musicString . charAt ( i ) == ' ' ) { if ( current . stream ( ) . collect ( Collectors . joining ( "" ) ) . equals ( "o" ) ) { result . add ( 4 ) ; } if ( current . stream ( ) . collect ( Collectors . joining ( "" ) ) . equals ( "o|" ) ) { result . add ( 2 ) ; } if ( current . stream ( ) . collect ( Collectors . joining ( "" ) ) . equals ( ".|" ) ) { result . add ( 1 ) ; } current . clear ( ) ; } else { current . add ( musicString . charAt ( i ) ) ; } } return result ; } 
int strlen ( String s ) { return s . length ( ) ; } 
List < Integer > factorize ( int n ) { List < Integer > factors = new ArrayList < Integer > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n /= i ; factors . add ( i ) ; i -- ; } } return factors ; } 
String concatenate ( String [ ] strings ) { List < String > result = new ArrayList < > ( ) ; for ( String s : strings ) { result . add ( s ) ; } return String . join ( "" , result ) ; } 
int [ ] getPositive ( int [ ] l ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . length ; i ++ ) { if ( l [ i ] > 0 ) { result . add ( l [ i ] ) ; } } int [ ] returnArray = new int [ result . size ( ) ] ; for ( int i = 0 ; i < result . size ( ) ; i ++ ) { returnArray [ i ] = result . get ( i ) ; } return returnArray ; } 
int [ ] sortEven ( int [ ] l ) { List < Integer > evens = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . length ; i += 2 ) { evens . add ( l [ i ] ) ; } Collections . sort ( evens ) ; int [ ] result = new int [ l . length ] ; for ( int i = 0 ; i < l . length ; i ++ ) { if ( i % 2 == 0 ) { result [ i ] = evens . get ( i / 2 ) ; } if ( i % 2 == 1 ) { result [ i ] = l [ i ] ; } } return result ; } 
String decodeCyclic ( String s ) { List < String > output = new ArrayList < > ( ) ; int i = 0 ; while ( i <= s . length ( ) - 3 ) { String x = s . substring ( i + 2 , i ) + s . substring ( i , i + 2 ) ; output . add ( x ) ; i += 3 ; } return String . join ( "" , output ) + s . substring ( i ) ; } 
int carRaceCollision ( int n ) { return ( int ) Math . pow ( n , 2 ) ; } 
ArrayList < Integer > incrList ( ArrayList < Integer > l ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i : l ) { result . add ( i + 1 ) ; } return result ; } 
boolean pairsSumToZero ( int [ ] l ) { for ( int i = 0 ; i < l . length ; i ++ ) { for ( int j = i + 1 ; j < l . length ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) { return true ; } } } return false ; } 
String changeBase ( int x , int b ) { List < String > ret = new ArrayList < > ( ) ; while ( x > 0 ) { ret . add ( 0 , Integer . toString ( x % b ) ) ; x = ( int ) Math . floor ( x / b ) ; } return String . join ( "" , ret ) ; } 
double median ( List < Integer > l ) { Collections . sort ( l ) ; if ( l . size ( ) % 2 != 0 ) { return l . get ( l . size ( ) / 2 ) ; } else { return ( double ) ( l . get ( l . size ( ) / 2 - 1 ) + l . get ( l . size ( ) / 2 ) ) / 2.0 ; } } 
String decodeShift ( String s ) { ArrayList < String > result = new ArrayList < String > ( ) ; for ( char ch : s . toCharArray ( ) ) { int w = ( ch + 21 - 'a' ) % 26 + 'a' ; result . add ( Character . toString ( ( char ) w ) ) ; } return String . join ( "" , result ) ; } 
boolean belowThreshold ( ArrayList < Integer > l , int t ) { for ( int n : l ) { if ( n >= t ) { return false ; } } return true ; } 
boolean correctBracketing ( char [ ] brackets ) { int depth = 0 ; for ( char b : brackets ) { if ( b == '<' ) { depth += 1 ; } else { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; } 
boolean monotonic ( int [ ] l ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . length ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr != 2 ; } 
double [ ] derivative ( double [ ] xs ) { double [ ] result = new double [ xs . length - 1 ] ; for ( int i = 1 ; i < xs . length ; i ++ ) { result [ i - 1 ] = i * xs [ i ] ; } return result ; } 
int vowelsCount ( String s ) { String vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch : s . toCharArray ( ) ) { if ( vowels . contains ( Character . toString ( ch ) ) ) { count ++ ; } } if ( s . charAt ( s . length ( ) - 1 ) == 'y' || s . charAt ( s . length ( ) - 1 ) == 'Y' ) { count ++ ; } return count ; } 
int digitSum ( String s ) { int sum = 0 ; for ( char c : s . toCharArray ( ) ) { if ( Character . isUpperCase ( c ) && ! Character . isLowerCase ( c ) ) { sum += ( int ) c ; } } return sum ; } 
int fruitDistribution ( String s , int n ) { ArrayList < Character > num1 = new ArrayList < Character > ( ) ; ArrayList < Character > num2 = new ArrayList < Character > ( ) ; boolean flag = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) >= '0' && s . charAt ( i ) <= '9' ) { if ( ! flag ) { num1 . add ( s . charAt ( i ) ) ; } else { num2 . add ( s . charAt ( i ) ) ; } } else if ( ! flag && num1 . size ( ) > 0 ) { flag = true ; } } return n - Integer . parseInt ( num1 . toString ( ) ) - Integer . parseInt ( num2 . toString ( ) ) ; } 
int [ ] pluck ( int [ ] arr ) { int [ ] result = new int [ 2 ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . length == 0 ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } } return result ; } 
List < Integer > strangeSortList ( List < Integer > lst ) { List < Integer > res = new ArrayList < > ( ) ; Collections . sort ( lst ) ; int l = 0 ; int r = lst . size ( ) - 1 ; while ( l < r ) { res . add ( lst . get ( l ) ) ; l += 1 ; res . add ( lst . get ( r ) ) ; r -= 1 ; } if ( l == r ) { res . add ( lst . get ( l ) ) ; } return res ; } 
double triangleArea ( double a , double b , double c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return - 1 ; } double s = ( a + b + c ) / 2 ; double area = Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; return area ; } 
boolean willItFly ( int [ ] q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . length ; i ++ ) { if ( q [ i ] != q [ q . length - 1 - i ] ) { return false ; } sum += q [ i ] ; } return sum <= w ; } 
boolean isCube ( double a ) { a = Math . abs ( a ) ; int i = Math . round ( Math . pow ( a , 1.0 / 3 ) ) ; return Math . pow ( i , 3 ) == a ; } 
int hexKey ( String num ) { String key = "2357BD" ; int total = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { char c = num . charAt ( i ) ; if ( key . contains ( String . valueOf ( c ) ) ) { total += 1 ; } } return total ; } 
String decimalToBinary ( int dec ) { List < String > ans = new ArrayList < > ( ) ; if ( dec != 0 ) { while ( dec > 0 ) { ans . add ( 0 , Integer . toString ( dec % 2 ) ) ; dec = ( int ) Math . floor ( dec / 2 ) ; } } else { ans . add ( "0" ) ; } String binary = "" ; for ( String digit : ans ) { binary += digit ; } return "db" + binary + "db" ; } 
boolean primeLength ( String s ) { int len = s . length ( ) ; if ( len < 2 ) { return false ; } for ( int i = 2 ; i < len ; i ++ ) { if ( len % i == 0 ) { return false ; } } return true ; } 
int startsOneEnds ( int n ) { if ( n < 1 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return ( int ) ( 18 * Math . pow ( 10 , n - 2 ) ) ; } 
int add ( int [ ] lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; } 
List < int [ ] > getRow ( List < List < Integer > > lst , int x ) { List < int [ ] > coords = new ArrayList < > ( ) ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { for ( int j = lst . get ( i ) . size ( ) - 1 ; j >= 0 ; j -- ) { if ( lst . get ( i ) . get ( j ) == x ) { coords . add ( new int [ ] { i , j } ) ; } } } return coords ; } 
int nextSmallest ( int [ ] lst ) { Arrays . sort ( lst ) ; for ( int i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) { return lst [ i ] ; } } return - 1 ; } 
boolean anyInt ( double a , double b , double c ) { if ( Math . round ( a ) != a || Math . round ( b ) != b || Math . round ( c ) != c ) { return false ; } return a + b == c || a + c == b || b + c == a ; } 
List < Integer > countUpTo ( int n ) { List < Integer > primes = new ArrayList < > ( ) ; for ( int i = 2 ; i < n ; i ++ ) { int p = 1 ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { p = 0 ; break ; } } if ( p == 1 ) { primes . add ( i ) ; } } return primes ; } 
int closestInteger ( double value ) { double w = Double . parseDouble ( String . valueOf ( value ) ) ; return ( int ) Math . round ( w ) ; } 
int [ ] makeAPile ( int n ) { int [ ] result = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { result [ i ] = n + 2 * i ; } return result ; } 
List < String > wordsString ( String s ) { List < String > words = new ArrayList < > ( ) ; List < Character > current = new ArrayList < > ( ) ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' || s . charAt ( i ) == ',' ) { if ( current . size ( ) > 0 ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : current ) { sb . append ( c ) ; } words . add ( sb . toString ( ) ) ; current . clear ( ) ; } } else { current . add ( s . charAt ( i ) ) ; } } return words ; } 
String roundedAvg ( int n , int m ) { if ( n > m ) { return "-1" ; } int num = Math . trunc ( ( n + m ) / 2 ) ; List < String > ret = new ArrayList < String > ( ) ; while ( num > 0 ) { ret . add ( 0 , Integer . toString ( num % 2 ) ) ; num = Math . trunc ( num / 2 ) ; } return String . join ( "" , ret ) ; } 
ArrayList < Integer > uniqueDigits ( int [ ] x ) { ArrayList < Integer > digits = new ArrayList < > ( ) ; for ( int n : x ) { boolean isUnique = true ; for ( char c : String . valueOf ( n ) . toCharArray ( ) ) { if ( c % 2 == 0 ) { isUnique = false ; break ; } } if ( isUnique ) { digits . add ( n ) ; } } Collections . sort ( digits ) ; return digits ; } 
int countNums ( int [ ] arr ) { int num = 0 ; for ( int n : arr ) { int neg = ( n < 0 ) ? - 1 : 1 ; n = Math . abs ( n ) ; ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; for ( char c : Integer . toString ( n ) . toCharArray ( ) ) { digits . add ( ( int ) c - ( int ) '0' ) ; } digits . set ( 0 , digits . get ( 0 ) * neg ) ; int sum = 0 ; for ( int d : digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; } 
boolean moveOneBall ( int [ ] arr ) { if ( arr . length == 0 ) { return true ; } int num = 0 ; for ( int i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ arr . length - 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; } 
String exchange ( int [ ] lst1 , int [ ] lst2 ) { int odd = 0 ; int even = 0 ; for ( int n : lst1 ) { if ( n % 2 == 1 ) { odd ++ ; } } for ( int n : lst2 ) { if ( n % 2 == 0 ) { even ++ ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; } 
List < String > oddCount ( List < String > lst ) { List < String > results = new ArrayList < > ( ) ; String originalStr = "the number of odd elements in the string i of the input." ; for ( String s : lst ) { int sum = 0 ; for ( char d : s . toCharArray ( ) ) { if ( d >= '0' && d <= '9' && d % 2 == 1 ) { sum += 1 ; } } List < Character > result = new ArrayList < > ( ) ; for ( char c : originalStr . toCharArray ( ) ) { if ( c == 'i' ) { result . add ( Character . forDigit ( sum , 10 ) ) ; } else { result . add ( c ) ; } } StringBuilder sb = new StringBuilder ( ) ; for ( char c : result ) { sb . append ( c ) ; } results . add ( sb . toString ( ) ) ; } return results ; } 
int minSubArraySum ( int [ ] nums ) { int minSum = Integer . MAX_VALUE ; int sum = 0 ; for ( int i = 0 ; i < nums . length ; i ++ ) { sum += nums [ i ] ; if ( minSum > sum ) { minSum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return minSum ; } 
int maxFill ( int [ ] [ ] grid , int capacity ) { int res = 0 ; for ( int [ ] well : grid ) { int sum = 0 ; for ( int n : well ) { sum += n ; } if ( sum > 0 ) { res += ( int ) Math . floor ( ( sum - 1 ) / capacity ) + 1 ; } } return res ; } 
ArrayList < String > selectWords ( String s , int n ) { String vowels = "aeiouAEIOU" ; ArrayList < Character > current = new ArrayList < > ( ) ; ArrayList < String > result = new ArrayList < > ( ) ; int consonantNum = 0 ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { if ( consonantNum == n ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : current ) { sb . append ( c ) ; } result . add ( sb . toString ( ) ) ; } current . clear ( ) ; consonantNum = 0 ; } else { current . add ( s . charAt ( i ) ) ; if ( ! vowels . contains ( Character . toString ( s . charAt ( i ) ) ) ) { consonantNum += 1 ; } } } return result ; } 
int solution ( int [ ] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 1 ) { sum += lst [ i ] ; } } return sum ; } 
int addElements ( int [ ] arr , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= - 99 && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; } 
List < Integer > getOddCollatz ( int n ) { List < Integer > oddCollatz = new ArrayList < > ( ) ; while ( n != 1 ) { if ( n % 2 == 1 ) { oddCollatz . add ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } oddCollatz . add ( 1 ) ; oddCollatz . sort ( ( a , b ) -> a - b ) ; return oddCollatz ; } 
boolean isSorted ( int [ ] lst ) { for ( int i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; } 
String intersection ( int [ ] interval1 , int [ ] interval2 ) { int inter1 = Math . max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = Math . min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return "NO" ; } } return "YES" ; } 
int prodSigns ( int [ ] arr ) { if ( arr . length == 0 ) { return - 32768 ; } int sum = 0 ; int prods = 1 ; for ( int i : arr ) { sum += Math . abs ( i ) ; if ( i == 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; } 
List < Integer > minPath ( int [ ] [ ] grid , int k ) { int n = grid . length ; int minNum = 0 ; List < Integer > ans = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { List < Integer > tmp = new ArrayList < Integer > ( ) ; if ( i != 0 ) { tmp . add ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . add ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . add ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . add ( grid [ i ] [ j + 1 ] ) ; } minNum = Collections . min ( tmp ) ; } } } for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . add ( 1 ) ; } else { ans . add ( minNum ) ; } } return ans ; } 
int digits ( int n ) { int prod = 0 ; String str = Integer . toString ( n ) ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { int code = str . charAt ( i ) ; if ( code % 2 == 1 ) { if ( prod == 0 ) { prod = 1 ; } prod *= ( code - '0' ) ; } } return prod ; } 
boolean isNested ( String s ) { int count = 0 ; int maxCount = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( ch == '[' ) { count += 1 ; } if ( ch == ']' ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > maxCount ) { maxCount = count ; } if ( count <= maxCount - 2 ) { return true ; } } return false ; } 
int sumSquares ( List < Integer > lst ) { int sum = 0 ; for ( int i : lst ) { sum += Math . ceil ( i ) * Math . ceil ( i ) ; } return sum ; } 
int canArrange ( int [ ] arr ) { int index = - 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; } 
int [ ] largestSmallestIntegers ( int [ ] lst ) { int maxNeg = 0 ; int minPos = 0 ; for ( int n : lst ) { if ( n < 0 && ( maxNeg == 0 || n > maxNeg ) ) { maxNeg = n ; } if ( n > 0 && ( minPos == 0 || n < minPos ) ) { minPos = n ; } } int [ ] result = { maxNeg , minPos } ; return result ; } 
String fixSpaces ( String text ) { List < Character > res = new ArrayList < > ( ) ; int spaceLen = 0 ; for ( int i = 0 ; i <= text . length ( ) ; i ++ ) { if ( i == text . length ( ) || text . charAt ( i ) != ' ' ) { if ( spaceLen == 1 ) { res . add ( '_' ) ; } else if ( spaceLen == 2 ) { res . add ( '_' ) ; res . add ( '_' ) ; } else if ( spaceLen > 2 ) { res . add ( '-' ) ; } spaceLen = 0 ; if ( i != text . length ( ) ) { res . add ( text . charAt ( i ) ) ; } } else { spaceLen += 1 ; } } StringBuilder sb = new StringBuilder ( ) ; for ( Character c : res ) { sb . append ( c ) ; } return sb . toString ( ) ; } 
String fileNameCheck ( String fileName ) { int digitNum = 0 , dotNum = 0 ; if ( fileName . length ( ) < 5 || Character . toUpperCase ( fileName . charAt ( 0 ) ) == Character . toLowerCase ( fileName . charAt ( 0 ) ) ) { return "No" ; } String suffix = fileName . substring ( fileName . length ( ) - 4 ) ; if ( ! suffix . equals ( ".txt" ) && ! suffix . equals ( ".exe" ) && ! suffix . equals ( ".dll" ) ) { return "No" ; } for ( int i = 0 ; i < fileName . length ( ) ; i ++ ) { char c = fileName . charAt ( i ) ; if ( '0' <= c && c <= '9' ) { digitNum ++ ; } if ( c == '.' ) { dotNum ++ ; } } if ( digitNum > 3 || dotNum != 1 ) { return "No" ; } return "Yes" ; } 
int sumSquares ( int [ ] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i ++ ) { if ( i % 3 == 0 ) { sum += lst [ i ] * lst [ i ] ; } else if ( i % 4 == 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else { sum += lst [ i ] ; } } return sum ; } 
String wordsInSentence ( String sentence ) { ArrayList < String > result = new ArrayList < String > ( ) ; ArrayList < String > current = new ArrayList < String > ( ) ; for ( int i = 0 ; i <= sentence . length ( ) ; i ++ ) { if ( i == sentence . length ( ) || sentence . charAt ( i ) == ' ' ) { boolean isPrime = true ; int l = current . size ( ) ; if ( l < 2 ) { isPrime = false ; } for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { StringBuilder strBuilder = new StringBuilder ( ) ; for ( String s : current ) { strBuilder . append ( s ) ; } result . add ( strBuilder . toString ( ) + " " ) ; } current . clear ( ) ; } else { current . add ( String . valueOf ( sentence . charAt ( i ) ) ) ; } } StringBuilder strBuilder = new StringBuilder ( ) ; for ( String s : result ) { strBuilder . append ( s ) ; } String finalResult = strBuilder . toString ( ) ; if ( finalResult . length ( ) > 0 ) { finalResult = finalResult . substring ( 0 , finalResult . length ( ) - 1 ) ; } return finalResult ; } 
boolean simplify ( String x , String n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x . charAt ( i ) == '/' ) { a = Integer . parseInt ( x . substring ( 0 , i ) ) ; b = Integer . parseInt ( x . substring ( i + 1 ) ) ; } } for ( int i = 0 ; i < n . length ( ) ; i ++ ) { if ( n . charAt ( i ) == '/' ) { c = Integer . parseInt ( n . substring ( 0 , i ) ) ; d = Integer . parseInt ( n . substring ( i + 1 ) ) ; } } return ( a * c ) % ( b * d ) == 0 ; } 
int specialFilter ( int [ ] nums ) { int count = 0 ; for ( int num : nums ) { if ( num > 10 ) { String w = Integer . toString ( num ) ; if ( w . charAt ( 0 ) % 2 == 1 && w . charAt ( w . length ( ) - 1 ) % 2 == 1 ) { count += 1 ; } } } return count ; } 
int getMaxTriples ( int n ) { ArrayList < Integer > arr = new ArrayList < Integer > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { arr . add ( i * i - i + 1 ) ; } int count = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr . get ( i ) + arr . get ( j ) + arr . get ( k ) ) % 3 == 0 ) { count += 1 ; } } } } return count ; } 
int doubleTheDifference ( double [ ] lst ) { int sum = 0 ; for ( double d : lst ) { int num = ( int ) Math . round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) { sum += num * num ; } } } return sum ; } 
int [ ] compare ( int [ ] game , int [ ] guess ) { int [ ] result = new int [ game . length ] ; for ( int i = 0 ; i < game . length ; i ++ ) { result [ i ] = Math . abs ( game [ i ] - guess [ i ] ) ; } return result ; } 
String strongestExtension ( String className , String [ ] extensions ) { String strongest = "" ; int max = Integer . MIN_VALUE ; for ( String extension : extensions ) { int strength = 0 ; for ( int i = 0 ; i < extension . length ( ) ; i ++ ) { char chr = extension . charAt ( i ) ; if ( Character . toUpperCase ( chr ) == chr && Character . toLowerCase ( chr ) != chr ) { strength += 1 ; } if ( Character . toUpperCase ( chr ) != chr && Character . toLowerCase ( chr ) == chr ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return className + "." + strongest ; } 
String intToMiniRoman ( int number ) { int [ ] num = { 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 } ; String [ ] sym = { "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" } ; int pos = 0 ; List < String > res = new ArrayList < > ( ) ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res . add ( sym [ pos ] ) ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } String result = "" ; for ( String s : res ) { result += s ; } return result ; } 
int [ ] eat ( int number , int need , int remaining ) { if ( need > remaining ) { int [ ] result = { number + remaining , 0 } ; return result ; } else { int [ ] result = { number + need , remaining - need } ; return result ; } } 
double doAlgebra ( String [ ] ops , double [ ] operands ) { List < Double > nums = new ArrayList < Double > ( ) ; for ( double operand : operands ) { nums . add ( operand ) ; } List < String > currentOps = new ArrayList < String > ( Arrays . asList ( ops ) ) ; int i = currentOps . size ( ) - 1 ; while ( i >= 0 ) { if ( currentOps . get ( i ) . equals ( "**" ) ) { nums . set ( i , Math . pow ( nums . get ( i ) , nums . get ( i + 1 ) ) ) ; nums . remove ( i + 1 ) ; currentOps . remove ( i ) ; } i -- ; } i = 0 ; while ( i < currentOps . size ( ) ) { if ( currentOps . get ( i ) . equals ( "*" ) ) { nums . set ( i , nums . get ( i ) * nums . get ( i + 1 ) ) ; nums . remove ( i + 1 ) ; currentOps . remove ( i ) ; } else if ( currentOps . get ( i ) . equals ( "//" ) ) { nums . set ( i , ( int ) ( nums . get ( i ) / nums . get ( i + 1 ) ) ) ; nums . remove ( i + 1 ) ; currentOps . remove ( i ) ; } else { i ++ ; } } i = 0 ; while ( i < currentOps . size ( ) ) { if ( currentOps . get ( i ) . equals ( "+" ) ) { nums . set ( i , nums . get ( i ) + nums . get ( i + 1 ) ) ; nums . remove ( i + 1 ) ; currentOps . remove ( i ) ; } else if ( currentOps . get ( i ) . equals ( "-" ) ) { nums . set ( i , nums . get ( i ) - nums . get ( i + 1 ) ) ; nums . remove ( i + 1 ) ; currentOps . remove ( i ) ; } else { i ++ ; } } return nums . get ( 0 ) ; } 
List < Integer > generateIntegers ( int a , int b ) { int lower = Math . max ( 2 , Math . min ( a , b ) ) ; int upper = Math . min ( 8 , Math . max ( a , b ) ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = lower ; i <= upper ; i += 2 ) { result . add ( i ) ; } return result ; } 
boolean isStepNum ( int n ) { int prevDigit = - 1 ; while ( n > 0 ) { int curDigit = n % 10 ; if ( prevDigit == - 1 ) { prevDigit = curDigit ; } else { if ( Math . abs ( prevDigit - curDigit ) != 1 ) { return false ; } } prevDigit = curDigit ; n = Math . trunc ( n / 10 ) ; } return true ; } 
double numOfWays ( int n , int k ) { double p = 1 ; if ( k % 2 != 0 ) { p = - 1 ; } return ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; } 
ArrayList < Integer > findDivisors ( int n ) { ArrayList < Integer > v = new ArrayList < Integer > ( ) ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { v . add ( i ) ; } else { v . add ( i ) ; v . add ( ( int ) Math . floor ( n / i ) ) ; } } } return v ; } 
int eggDrop ( int n , int k ) { if ( k == 1 || k == 0 ) { return k ; } if ( n == 1 ) { return k ; } int min = Integer . MAX_VALUE ; int res , x ; for ( x = 1 ; x <= k ; x ++ ) { res = Math . max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , k - x ) ) ; if ( res < min ) { min = res ; } } return min + 1 ; } 
boolean isPowerOfTwo ( int n ) { if ( n == 0 ) { return false ; } return Math . ceil ( Math . log ( n ) / Math . log ( 2 ) ) == Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ; } 
String shortestPalindrome ( String s ) { int n = s . length ( ) ; List < String > v = new ArrayList < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i ; int r = i ; String ans1 = "" ; String ans2 = "" ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans1 += s . charAt ( l ) ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans2 += s . charAt ( l ) ; l -- ; r ++ ; } v . add ( ans1 ) ; v . add ( ans2 ) ; } String ans = v . get ( 0 ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( ! v . get ( i ) . equals ( "" ) ) { if ( ans . charAt ( 0 ) >= v . get ( i ) . charAt ( 0 ) ) { ans = v . get ( i ) ; } } } return ans ; } 
int minimumAdjacentDifference ( int [ ] a , int n , int k ) { int minDiff = Integer . MAX_VALUE ; for ( int i = 0 ; i <= k ; i ++ ) { int maxDiff = - Integer . MAX_VALUE ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { maxDiff = Math . max ( maxDiff , a [ p + 1 ] - a [ p ] ) ; } } minDiff = Math . min ( minDiff , maxDiff ) ; } return minDiff ; } 
int cal ( int [ ] arr , int mid ) { int chocolate = 0 ; for ( int i : arr ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; } 
boolean check ( int v , int [ ] a , int m ) { int tec = 0 , ans = 0 ; int [ ] b = new int [ a . length + 3 ] ; Arrays . fill ( b , 0 ) ; for ( int i = 0 ; i < a . length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; } 
int largestNum ( int [ ] arr ) { int res = 0 ; Arrays . sort ( arr ) ; int l = 0 , r = arr . length - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) { l ++ ; } else { r -- ; } } return res ; } 
int binarySearch ( int [ ] p , int n ) { int i = 0 ; int j = p . length - 1 ; int index = - 1 ; while ( i <= j ) { int mid = i + ( int ) Math . floor ( ( j - i ) / 2 ) ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; } 
int findMinLength ( int [ ] arr ) { int index = arr . length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; } 
int minDigits ( int n , int k ) { int digits_num = ( int ) Math . floor ( Math . log ( n ) / Math . log ( 10 ) + 1 ) ; int temp_sum = 0 ; int temp = digits_num ; int result ; int x , v ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 = ( int ) Math . floor ( num2 / 10 ) ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = ( int ) Math . floor ( n / Math . pow ( 10 , temp - 1 ) ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v = ( int ) Math . floor ( v / 10 ) ; v ++ ; result = v * ( int ) Math . pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; } return - 1 ; } 
int checkForPerfectSquare ( int [ ] arr , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = ( int ) Math . floor ( sum / 2 ) ; while ( low <= high ) { mid = low + ( int ) Math . floor ( ( high - low ) / 2 ) ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; } 
int minFlips ( int [ ] [ ] mat , String s ) { int n = mat . length ; int m = mat [ 0 ] . length ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != Integer . valueOf ( s . charAt ( i + j ) ) - 48 ) { count ++ ; } } } return count ; } 
ArrayList < ArrayList < Integer > > constructTree ( int n , int [ ] [ ] edges ) { ArrayList < ArrayList < Integer > > adjl = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { adjl . add ( new ArrayList < > ( ) ) ; } for ( int [ ] e : edges ) { int u = e [ 0 ] ; int v = e [ 1 ] ; adjl . get ( u ) . add ( v ) ; adjl . get ( v ) . add ( u ) ; } return adjl ; } 
int findSumOfValues ( int [ ] v , int [ ] parent , int [ ] valuesChildren ) { int curNode = v ; int sum = 0 ; while ( curNode != - 1 ) { sum += valuesChildren [ curNode ] ; curNode = parent [ curNode ] ; } return sum ; } 
int getDistinct ( int d , int count ) { int num = 0 ; count = ( int ) Math . pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count = ( int ) Math . trunc ( count / 10 ) ; } return num ; } 
boolean isIncreasing ( int [ ] arr ) { for ( int i = 0 ; i < arr . length - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; } 
int minAdjSwaps ( int [ ] [ ] mat ) { int n = mat . length ; int [ ] cntZero = new int [ n ] ; Arrays . fill ( cntZero , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 && mat [ i ] [ j ] == 0 ; j -- ) { cntZero [ i ] ++ ; } } int cntSwaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cntZero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cntZero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) { return - 1 ; } while ( first > i ) { int temp = cntZero [ first ] ; cntZero [ first ] = cntZero [ first - 1 ] ; cntZero [ first - 1 ] = temp ; first -- ; cntSwaps ++ ; } } } return cntSwaps ; } 
int solve ( int [ ] values , int [ ] salary , int mod ) { int ret = 1 ; int amt = 0 ; Arrays . sort ( values ) ; Arrays . sort ( salary ) ; while ( salary . length > 0 ) { while ( values . length > 0 && values [ values . length - 1 ] >= salary [ salary . length - 1 ] ) { amt ++ ; values = Arrays . copyOfRange ( values , 0 , values . length - 1 ) ; } if ( amt == 0 ) { return 0 ; } ret *= amt -- ; ret %= mod ; salary = Arrays . copyOfRange ( salary , 0 , salary . length - 1 ) ; } return ret ; } 
int [ ] organizeInOrder ( int [ ] vec , String [ ] op , int n ) { int [ ] result = new int [ n ] ; Arrays . fill ( result , 0 ) ; Arrays . sort ( vec ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] . equals ( "<" ) ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; } 
int countPoints ( int n , int m , int [ ] a , int [ ] b , int x , int y ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; } 
boolean areSame ( int [ ] a , int [ ] b ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; return Arrays . equals ( a , b ) ; } 
int countNumberOfStrings ( String s ) { int n = s . length ( ) - 1 ; int count = ( int ) Math . pow ( 2 , n ) ; return count ; } 
ArrayList < Integer > primePower ( int x ) { ArrayList < Integer > primePow = new ArrayList < Integer > ( ) ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } primePow . add ( p ) ; } } if ( x > 1 ) { primePow . add ( x ) ; } return primePow ; } 
boolean isPerfect ( int n0 ) { double n = Math . sqrt ( n0 ) ; if ( Math . floor ( n ) != Math . ceil ( n ) ) { return false ; } return true ; } 
int findSum ( int l , int r ) { ArrayList < Integer > arr = new ArrayList < Integer > ( ) ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . add ( i + x ) ; if ( i + 1 <= r ) { arr . add ( i + 1 + x ) ; } x *= - 1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr . get ( i ) ; } return sum ; } 
int results ( int n , int k ) { return Math . round ( Math . pow ( n , 1.0 / Math . pow ( 2.0 , k ) ) ) ; } 
List < Integer > factors ( int n ) { List < Integer > v = new ArrayList < Integer > ( ) ; v . add ( 1 ) ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . add ( i ) ; if ( n / i != i ) { v . add ( n / i ) ; } } } return v ; } 
int smallestNum ( int n ) { double x = Math . pow ( 10.0 , ( n - 1 ) / 2.0 ) ; return ( int ) Math . ceil ( x ) ; } 
int smallest ( String s ) { int [ ] a = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = s . charAt ( i ) - '0' ; } ArrayList < Integer > b = new ArrayList < > ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( ( a [ i ] % 2 ) != 0 ) { b . add ( a [ i ] ) ; } } Collections . sort ( b ) ; if ( b . size ( ) > 1 ) { return ( b . get ( 0 ) * 10 ) + b . get ( 1 ) ; } return - 1 ; } 
double [ ] diagonals ( double a , double b , double c , double d ) { double [ ] ans = new double [ 2 ] ; ans [ 0 ] = Math . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ; ans [ 1 ] = Math . sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ; return ans ; } 
int findNumberOfDigits ( int n , int bas ) { int dig = ( int ) Math . floor ( Math . log ( n ) / Math . log ( bas ) ) + 1 ; return dig ; } 
double nGon ( int n ) { double proAngleVar ; if ( n % 4 == 0 ) { proAngleVar = Math . PI * ( 180.0 / n ) / 180 ; } else { proAngleVar = Math . PI * ( 180.0 / ( 2 * n ) ) / 180 ; } double negX = 1.0e+99 , posX = - 1.0e+99 , negY = 1.0e+99 , posY = - 1.0e+99 ; for ( int j = 0 ; j < n ; ++ j ) { double px = Math . cos ( 2 * Math . PI * j / n + proAngleVar ) ; double py = Math . sin ( 2 * Math . PI * j / n + proAngleVar ) ; negX = Math . min ( negX , px ) ; posX = Math . max ( posX , px ) ; negY = Math . min ( negY , py ) ; posY = Math . max ( posY , py ) ; } double opt2 = Math . max ( posX - negX , posY - negY ) ; return opt2 / Math . sin ( Math . PI / n ) / 2 ; } 
int findMaxK ( int n ) { int p = ( int ) Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ; return ( int ) Math . pow ( 2 , p ) ; } 
int nthFibo ( int n ) { double a = ( Math . sqrt ( 5 ) + 1 ) / 2 ; double b = ( - 1 * Math . sqrt ( 5 ) + 1 ) / 2 ; double r = Math . sqrt ( 5 ) ; double ans = ( Math . pow ( a , n ) - Math . pow ( b , n ) ) / r ; return ( int ) Math . floor ( ans ) ; } 
double findProb ( int l , int r ) { double countOfPs = Math . floor ( Math . sqrt ( r ) ) - Math . ceil ( Math . sqrt ( l ) ) + 1 ; double total = r - l + 1 ; double prob = countOfPs / total ; return prob ; } 
int previousFibonacci ( int n ) { double a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return ( int ) Math . round ( a ) ; } 
List < Integer > distPrime ( int [ ] arr , List < Integer > allPrimes ) { List < Integer > list1 = new ArrayList < > ( ) ; for ( int i : allPrimes ) { for ( int j : arr ) { if ( j % i == 0 ) { list1 . add ( i ) ; break ; } } } return list1 ; } 
ArrayList < Integer > getArray ( int n ) { ArrayList < Integer > ans = new ArrayList < Integer > ( ) ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans . add ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; } 
int maximumLength ( int [ ] a ) { int [ ] counts = new int [ 11 ] ; Arrays . fill ( counts , 0 ) ; int ans = 0 ; for ( int index = 0 ; index < a . length ; index ++ ) { counts [ a [ index ] ] += 1 ; List < Integer > k = new ArrayList < > ( ) ; for ( int i : counts ) { if ( i != 0 ) { k . add ( i ) ; } } Collections . sort ( k ) ; if ( k . size ( ) == 1 || ( k . get ( 0 ) == k . get ( k . size ( ) - 2 ) && k . get ( k . size ( ) - 1 ) - k . get ( k . size ( ) - 2 ) == 1 ) || ( k . get ( 0 ) == 1 && k . get ( 1 ) == k . get ( k . size ( ) - 1 ) ) ) { ans = index ; } } return ans + 1 ; } 
int maxEdges ( int n ) { int edges = ( int ) Math . floor ( n * n / 4 ) ; return edges ; } 
int findK ( int n , int k ) { List < Integer > a = new ArrayList < > ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a . add ( i ) ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a . add ( i ) ; } } return a . get ( k - 1 ) ; } 
boolean isKeith ( int x , int temp ) { ArrayList < Integer > terms = new ArrayList < Integer > ( ) ; int n = 0 ; while ( temp > 0 ) { terms . add ( temp % 10 ) ; temp /= 10 ; n ++ ; } Collections . reverse ( terms ) ; int nextTerm = 0 , i = n ; while ( nextTerm < x ) { nextTerm = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { nextTerm += terms . get ( i - j ) ; } terms . add ( nextTerm ) ; i ++ ; } return nextTerm == x ; } 
boolean factors ( int n , int k ) { List < Integer > v = new ArrayList < > ( ) ; while ( n % 2 == 0 ) { v . add ( 2 ) ; n = n / 2 ; } if ( v . size ( ) >= k ) { return true ; } for ( int i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n = n / i ; v . add ( i ) ; } if ( v . size ( ) >= k ) { return true ; } } if ( n > 2 ) { v . add ( n ) ; } if ( v . size ( ) >= k ) { return true ; } return false ; } 
