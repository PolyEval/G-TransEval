function greatestCommonDivisor ( a , b ) { if ( a == 0 || b == 0 ) { return a + b ; } if ( a == b ) { return a ; } if ( a > b ) { return greatestCommonDivisor ( a % b , b ) ; } else { return greatestCommonDivisor ( a , b % a ) ; } } 
function largestDivisor ( n ) { for ( let i = 2 ; i <= n ; i ++ ) { if ( n % i === 0 ) { return n / i ; } } return 1 ; } 
function isPrime ( n ) { if ( n < 2 ) { return false ; } for ( let k = 2 ; k < n ; k ++ ) { if ( n % k == 0 ) { return false ; } } return true ; } 
function fizzBuzz ( n ) { let count = 0 ; for ( let i = 1 ; i < n ; i ++ ) { if ( i % 11 === 0 || i % 13 === 0 ) { let q = i ; while ( q > 0 ) { if ( q % 10 === 7 ) { count += 1 ; } q = Math . floor ( q / 10 ) ; } } } return count ; } 
function primeFib ( n ) { let f0 = 0 ; let f1 = 1 ; while ( n > 0 ) { let p = f0 + f1 ; let isPrime = p >= 2 ; for ( let i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { n -= 1 ; } f0 = f1 ; f1 = p ; } return f1 ; } 
function triangleArea ( a , h ) { return a * h / 2 ; } 
function modP ( n , p ) { let ret = 1 ; for ( let i = 0 ; i < n ; i ++ ) { ret = ( ret * 2 ) % p ; } return ret ; } 
function add ( x , y ) { return x + y ; } 
function fib ( n ) { if ( n === 0 ) { return 0 ; } if ( n === 1 ) { return 1 ; } return fib ( n - 1 ) + fib ( n - 2 ) ; } 
function largestPrimeFactor ( n ) { for ( let i = 2 ; i < n ; i ++ ) { while ( n % i == 0 && n > i ) { n /= i ; } } return n ; } 
function sumToN ( n ) { let result = 0 ; for ( let i = 1 ; i <= n ; i ++ ) { result += i ; } return result ; } 
function fibfib ( n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 0 ; } if ( n == 2 ) { return 1 ; } return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; } 
function isMultiplyPrime ( a ) { let num = 0 ; for ( let i = 2 ; i <= a ; i ++ ) { while ( a % i === 0 && a >= i ) { a /= i ; num += 1 ; } } return num === 3 ; } 
function isSimplePower ( x , n ) { if ( n == 1 ) { return x == 1 ; } let power = 1 ; while ( power < x ) { power *= n ; } return power == x ; } 
function chooseNum ( x , y ) { if ( x > y ) { return - 1 ; } if ( y % 2 === 0 ) { return y ; } if ( x === y ) { return - 1 ; } return y - 1 ; } 
function isEqualToSumEven ( n ) { return n % 2 === 0 && n >= 8 ; } 
function specialFactorial ( n ) { let fact = 1 ; let specialFact = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { fact *= i ; specialFact *= fact ; } return specialFact ; } 
function xOrY ( n , x , y ) { let isPrime = n >= 2 ; for ( let i = 2 ; i < n ; i ++ ) { if ( n % i === 0 ) { isPrime = false ; break ; } } if ( isPrime ) { return x ; } return y ; } 
function rightAngleTriangle ( a , b , c ) { return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b ; } 
function fastPow ( n , k ) { if ( k === 0 ) { return 1 ; } let temp = fastPow ( n , Math . floor ( k / 2 ) ) ; if ( k % 2 === 0 ) { return temp * temp ; } else { return n * temp * temp ; } } 
function isPalin ( s ) { var l = Math . floor ( s . length / 2 ) ; for ( var i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) !== s . charAt ( s . length - i - 1 ) ) { return false ; } } return true ; } 
function findSum ( n ) { let ans = 0 ; let temp = 0 ; for ( let i = 1 ; i <= n && temp < n ; i ++ ) { temp = i - 1 ; let num = 1 ; while ( temp < n ) { if ( temp + i <= n ) { ans += i * num ; } else { ans += ( n - temp ) * num ; } temp += i ; num ++ ; } } return ans ; } 
function getNextGap ( gap ) { gap = Math . floor ( ( gap * 10 ) / 13 ) ; if ( gap < 1 ) { return 1 ; } return gap ; } 
function countNonDecreasing ( n ) { let k = 10 ; let count = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count /= i ; } return count ; } 
function power ( x , y ) { if ( y == 0 ) { return 1 ; } else if ( y % 2 == 0 ) { return power ( x , y / 2 ) * power ( x , y / 2 ) ; } else { return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; } } 
function power ( x , y ) { if ( y === 0 ) { return 1 ; } let temp = power ( x , Math . floor ( y / 2 ) ) ; if ( y % 2 === 0 ) { return temp * temp ; } else { if ( y > 0 ) { return x * temp * temp ; } else { return temp * temp / x ; } } } 
function multiply ( x , y ) { if ( y == 0 ) { return 0 ; } else if ( y > 0 ) { return x + multiply ( x , y - 1 ) ; } else { return - multiply ( x , - y ) ; } } 
function smallest ( x , y , z ) { if ( y / x == 0 ) { return y / z == 0 ? y : z ; } return x / z == 0 ? x : z ; } 
function isPowerOfFour ( n ) { if ( n === 0 ) { return false ; } while ( n !== 1 ) { if ( n % 4 !== 0 ) { return false ; } n = n / 4 ; } return true ; } 
function modInverse ( a , m ) { let m0 = m , x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { let q = Math . floor ( a / m ) ; let t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; } 
function cntRotations ( s , n ) { let s2 = s + s ; let pre = new Array ( 2 * n ) . fill ( 0 ) ; for ( let i = 0 ; i < 2 * n ; i ++ ) { if ( i !== 0 ) { pre [ i ] += pre [ i - 1 ] ; } if ( s2 . charAt ( i ) === 'a' || s2 . charAt ( i ) === 'e' || s2 . charAt ( i ) === 'i' || s2 . charAt ( i ) === 'o' || s2 . charAt ( i ) === 'u' ) { pre [ i ] ++ ; } } let ans = 0 ; for ( let i = n - 1 ; i < 2 * n - 1 ; i ++ ) { let r = i , l = i - n ; let x1 = pre [ r ] ; if ( l >= 0 ) { x1 -= pre [ l ] ; } r = i - Math . floor ( n / 2 ) ; let left = pre [ r ] ; if ( l >= 0 ) { left -= pre [ l ] ; } let right = x1 - left ; if ( left > right ) { ans ++ ; } } return ans ; } 
function binomialCoeff ( n , k ) { let res = 1 ; if ( k > n - k ) { k = n - k ; } for ( let i = 0 ; i < k ; ++ i ) { res *= n - i ; res /= i + 1 ; } return res ; } 
function isPrefix ( temp , s ) { if ( temp . length < s . length ) { return false ; } else { for ( let i = 0 ; i < s . length ; i ++ ) { if ( s . charAt ( i ) !== temp . charAt ( i ) ) { return false ; } } return true ; } } 
function lexicographicallySmallestString ( s , n ) { let lastZe = - 1 ; let ans = "" ; for ( let i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { lastZe = i ; break ; } } for ( let i = 0 ; i < n ; i ++ ) { if ( i <= lastZe && s . charAt ( i ) == '0' ) { ans += s . charAt ( i ) ; } else if ( i > lastZe ) { ans += s . charAt ( i ) ; } } return ans ; } 
function calculateMax ( n , m , k ) { let ans = - 1 ; let low = 0 ; let high = m ; while ( low <= high ) { let mid = Math . floor ( ( low + high ) / 2 ) ; let val = 0 ; let l = k - 1 ; let r = n - k ; val += mid ; if ( mid >= l ) { val += ( l * ( 2 * mid - l - 1 ) ) / 2 ; } else { val += ( mid * ( mid - 1 ) ) / 2 + ( l - mid ) ; } if ( mid >= r ) { val += ( r * ( 2 * mid - r - 1 ) ) / 2 ; } else { val += ( mid * ( mid - 1 ) ) / 2 + ( r - mid ) ; } if ( val <= m ) { ans = Math . max ( ans , mid ) ; low = mid + 1 ; } else { high = mid - 1 ; } } return ans ; } 
function findLength ( s , i , j ) { var required = i ; var length = 0 ; for ( var k = 0 ; k < s . length ; k ++ ) { var curr = s . charAt ( k ) ; if ( curr == required ) { length += 1 ; if ( required == i ) { required = j ; } else { required = i ; } } } return length ; } 
function checkReverse ( leftSum , rightSum ) { let rev = 0 ; let temp = rightSum ; while ( temp !== 0 ) { rev = rev * 10 + temp % 10 ; temp = Math . floor ( temp / 10 ) ; } if ( rev === leftSum ) { return true ; } return false ; } 
function isComposite ( n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return false ; } if ( n % 2 === 0 || n % 3 === 0 ) { return true ; } for ( let i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i === 0 || n % ( i + 2 ) === 0 ) { return true ; } } return false ; } 
function minDeletion ( s ) { let n = s . length ; let firstIdx1 = - 1 ; let lastIdx0 = - 1 ; for ( let i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) === '1' ) { firstIdx1 = i ; break ; } } for ( let i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) === '0' ) { lastIdx0 = i ; break ; } } if ( firstIdx1 === - 1 || lastIdx0 === - 1 ) { return 0 ; } let count1 = 0 , count0 = 0 ; for ( let i = 0 ; i < lastIdx0 ; i ++ ) { if ( s . charAt ( i ) === '1' ) { count1 ++ ; } } for ( let i = firstIdx1 + 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) === '1' ) { count0 ++ ; } } return Math . min ( count0 , count1 ) ; } 
function minSteps ( s , n ) { let smaller , cost = 0 ; const f = new Array ( 26 ) . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) { const currEle = s . charCodeAt ( i ) - 'a' . charCodeAt ( 0 ) ; smaller = 0 ; for ( let j = 0 ; j <= currEle ; j ++ ) { if ( f [ j ] !== 0 ) { smaller += f [ j ] ; } } if ( smaller === 0 ) { cost += i + 1 ; } else { cost += i - smaller + 1 ; } f [ s . charCodeAt ( i ) - 'a' . charCodeAt ( 0 ) ] ++ ; } return cost ; } 
function numberOfWays ( n ) { let count = 0 ; for ( let a = 1 ; a < n ; a ++ ) { for ( let b = 0 ; b < n ; b ++ ) { let c = n - ( a + b ) ; if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } } return count ; } 
function slopeOfNum ( num , n ) { let slope = 0 ; for ( let i = 1 ; i < n - 1 ; i ++ ) { if ( num . charAt ( i ) > num . charAt ( i - 1 ) && num . charAt ( i ) > num . charAt ( i + 1 ) ) { slope ++ ; } else if ( num . charAt ( i ) < num . charAt ( i - 1 ) && num . charAt ( i ) < num . charAt ( i + 1 ) ) { slope ++ ; } } return slope ; } 
function middleOfThree ( a , b , c ) { let x = a - b ; let y = b - c ; let z = a - c ; if ( x * y > 0 ) { return b ; } else if ( x * z > 0 ) { return c ; } else { return a ; } } 
function countMaxSetBits ( left , right ) { while ( ( left | ( left + 1 ) ) <= right ) { left |= left + 1 ; } return left ; } 
function findS ( s ) { let l = 1 ; let r = Math . floor ( s / 2 ) + 1 ; while ( l <= r ) { let mid = Math . floor ( ( l + r ) / 2 ) ; let sum = mid * ( mid + 1 ) / 2 ; if ( sum === s ) { return mid ; } else if ( sum > s ) { r = mid - 1 ; } else { l = mid + 1 ; } } return - 1 ; } 
function check ( s ) { let min = Number . MAX_VALUE ; let max = Number . MIN_VALUE ; let sum = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { let ascii = s . charCodeAt ( i ) ; if ( ascii < 96 || ascii > 122 ) { return false ; } sum += ascii ; if ( min > ascii ) { min = ascii ; } if ( max < ascii ) { max = ascii ; } } min -= 1 ; let eSum = ( max * ( max + 1 ) ) / 2 - ( min * ( min + 1 ) ) / 2 ; return sum == eSum ; } 
function minimumPossibleProduct ( k ) { let res = 1 ; let r = ( 1 << k ) - 1 ; for ( let i = 0 ; i < k ; i ++ ) { res *= r - 1 ; } res *= r ; return res ; } 
function findInGrid ( i , j ) { if ( i === j ) { return i * i - ( i - 1 ) ; } else if ( i > j ) { if ( i % 2 === 0 ) { return i * i - ( j - 1 ) ; } else { return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } } else { if ( j % 2 === 0 ) { return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; } else { return j * j - ( i - 1 ) ; } } } 
function findMinOperationsReqEmpStr ( s ) { let cntOne = 0 ; let cntZero = 0 ; let n = s . length ; for ( let i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) === '0' ) { if ( cntOne !== 0 ) { cntOne -- ; } cntZero ++ ; } else { if ( cntZero !== 0 ) { cntZero -- ; } cntOne ++ ; } } return cntOne + cntZero ; } 
function isReachable ( x1 , y1 , x2 , y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) { x2 %= y2 ; } else { y2 %= x2 ; } } if ( x2 === x1 ) { return ( y2 - y1 ) >= 0 && ( y2 - y1 ) % x1 === 0 ; } else if ( y2 === y1 ) { return ( x2 - x1 ) >= 0 && ( x2 - x1 ) % y1 === 0 ; } else { return false ; } } 
function findMaxSoln ( n , x , y ) { let ans = - Infinity ; for ( let k = 0 ; k <= n ; k ++ ) { if ( k % x === y ) { ans = Math . max ( ans , k ) ; } } return ans >= 0 && ans <= n ? ans : - 1 ; } 
function numberOfPairs ( n ) { let count = 0 ; let i = 1 , j = n - 1 ; while ( i < j ) { if ( i + j == n ) { count ++ ; } i ++ ; j -- ; } return count ; } 
function minChanges ( s , n ) { let count = 0 , zeros = 0 , ones = 0 ; if ( s . charAt ( 0 ) !== '1' ) { count ++ ; ones ++ ; } for ( let i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) === '0' ) { zeros ++ ; } else { ones ++ ; } if ( zeros > ones ) { zeros -- ; ones ++ ; count ++ ; } } return count ; } 
function kVisibleFromLeft ( n , k ) { if ( n === k ) { return 1 ; } if ( k === 1 ) { let ans = 1 ; for ( let i = 1 ; i < n ; i ++ ) { ans *= i ; } return ans ; } return kVisibleFromLeft ( n - 1 , k - 1 ) + ( n - 1 ) * kVisibleFromLeft ( n - 1 , k ) ; } 
function find ( n , sum ) { if ( sum > 6 * n || sum < n ) { return 0 ; } if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) { return 1 / 6 ; } else { return 0 ; } } let s = 0 ; for ( let i = 1 ; i <= 6 ; i ++ ) { s += find ( n - 1 , sum - i ) / 6 ; } return s ; } 
function binCoff ( n , r ) { let val = 1 ; if ( r > n - r ) { r = n - r ; } for ( let i = 0 ; i < r ; i ++ ) { val *= n - i ; val /= i + 1 ; } return val ; } 
function getMask ( val ) { let mask = 0 ; if ( val === 0 ) { return 1 ; } while ( val > 0 ) { let d = val % 10 ; mask |= 1 << d ; val = Math . floor ( val / 10 ) ; } return mask ; } 
function waysToKAdjacentSetBits ( n , k , currentIndex , adjacentSetBits , lastBit ) { if ( currentIndex === n ) { if ( adjacentSetBits === k ) { return 1 ; } return 0 ; } let noOfWays = 0 ; if ( lastBit === 1 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits + 1 , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } else if ( lastBit === 0 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } return noOfWays ; } 
function checkFunc ( i , j , st ) { if ( st . charAt ( i ) === '(' && st . charAt ( j ) === ')' ) { return 1 ; } if ( st . charAt ( i ) === '(' && st . charAt ( j ) === '?' ) { return 1 ; } if ( st . charAt ( i ) === '?' && st . charAt ( j ) === ')' ) { return 1 ; } if ( st . charAt ( i ) === '[' && st . charAt ( j ) === ']' ) { return 1 ; } if ( st . charAt ( i ) === '[' && st . charAt ( j ) === '?' ) { return 1 ; } if ( st . charAt ( i ) === '?' && st . charAt ( j ) === ']' ) { return 1 ; } if ( st . charAt ( i ) === '{' && st . charAt ( j ) === '}' ) { return 1 ; } if ( st . charAt ( i ) === '{' && st . charAt ( j ) === '?' ) { return 1 ; } if ( st . charAt ( i ) === '?' && st . charAt ( j ) === '}' ) { return 1 ; } return 0 ; } 
function findGolomb ( n ) { if ( n === 1 ) { return 1 ; } return 1 + findGolomb ( n - findGolomb ( findGolomb ( n - 1 ) ) ) ; } 
function allOnes ( s , n ) { let co = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { co += s . charAt ( i ) == '1' ? 1 : 0 ; } return co == n ; } 
function pad ( n ) { let pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ; for ( let i = 3 ; i <= n ; i ++ ) { pNext = pPrevPrev + pPrev ; pPrevPrev = pPrev ; pPrev = pCurr ; pCurr = pNext ; } return pNext ; } 
function oddLengthPalindrome ( k ) { let palin = k ; k = Math . floor ( k / 10 ) ; while ( k > 0 ) { let rev = k % 10 ; palin = palin * 10 + rev ; k = Math . floor ( k / 10 ) ; } return palin ; } 
function changeString ( s0 ) { let s = s0 . split ( '' ) ; let n = s0 . length ; if ( s [ 0 ] === '?' ) { s [ 0 ] = 'a' ; if ( s [ 0 ] === s [ 1 ] ) { s [ 0 ] = String . fromCharCode ( s [ 0 ] . charCodeAt ( 0 ) + 1 ) ; // increment ASCII value of character    }  }  for (let i = 1; i < n - 1; i++) {    if (s[i] === '?') {      s[i] = 'a';      if (s[i] === s[i - 1]) {        s[i] = String.fromCharCode(s[i].charCodeAt(0) + 1);      }      if (s[i] === s[i + 1]) {        s[i] = String.fromCharCode(s[i].charCodeAt(0) + 1);      }      if (s[i] === s[i - 1]) {        s[i] = String.fromCharCode(s[i].charCodeAt(0) + 1);      }    }  }  if (s[n - 1] === '?') {    s[n - 1] = 'a';    if (s[n - 1] === s[n - 2]) {      s[n - 1] = String.fromCharCode(s[n - 1].charCodeAt(0) + 1);    }  }  return s.join('');} 
function totalHammingDistance ( n ) { let i = 1 ; let sum = 0 ; while ( Math . floor ( n / i ) > 0 ) { sum += Math . floor ( n / i ) ; i = i * 2 ; } return sum ; } 
function checkBitonic ( s ) { let i = 1 ; for ( ; i < s . length ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i - 1 ) ) { continue ; } if ( s . charAt ( i ) <= s . charAt ( i - 1 ) ) { break ; } } if ( i === s . length - 1 ) { return 1 ; } let j = i + 1 ; for ( ; j < s . length ; j ++ ) { if ( s . charAt ( j ) < s . charAt ( j - 1 ) ) { continue ; } if ( s . charAt ( j ) >= s . charAt ( j - 1 ) ) { break ; } } i = j ; if ( i !== s . length ) { return 0 ; } return 1 ; } 
function endsWith ( str , pat ) { let patLen = pat . length ; let strLen = str . length ; if ( patLen > strLen ) { return false ; } patLen -- ; strLen -- ; while ( patLen >= 0 ) { if ( pat . charAt ( patLen ) !== str . charAt ( strLen ) ) { return false ; } patLen -- ; strLen -- ; } return true ; } 
function getSum ( n , d ) { if ( n < d ) { return 0 ; } while ( n % 10 !== d ) { n -- ; } let k = Math . floor ( n / 10 ) ; return ( k + 1 ) * d + ( ( k * 10 + 10 * k * k ) / 2 ) ; } 
function balancedStringBySwapping ( s ) { let unbalancedPair = 0 ; for ( let i = 0 ; i < s . length ; ++ i ) { if ( unbalancedPair > 0 && s . charAt ( i ) === ']' ) { -- unbalancedPair ; } else if ( s . charAt ( i ) === '[' ) { ++ unbalancedPair ; } } return Math . floor ( ( unbalancedPair + 1 ) / 2 ) ; } 
function computeHash ( s ) { let p = 31 ; let mod = 1e9 + 7 ; let hashVal = 0 ; let mul = 1 ; for ( let i = 0 ; i < s . length ; i ++ ) { let ch = s . charAt ( i ) ; hashVal = ( hashVal + ( ch . charCodeAt ( 0 ) - 97 + 1 ) * mul ) % mod ; mul = mul * p % mod ; } return hashVal ; } 
function countOfSubstringWithOnlyOnes ( s ) { let res = 0 ; let count = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { count = s . charAt ( i ) === '1' ? count + 1 : 0 ; res += count ; } return res ; } 
function composite ( n ) { let flag = 0 ; let c = 0 ; for ( let j = 1 ; j <= n ; j ++ ) { if ( n % j === 0 ) { c += 1 ; } } if ( c >= 3 ) { flag = 1 ; } return flag ; } 
function isDivBySix ( s , n ) { let sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) { sum += s . charCodeAt ( i ) - 97 + 1 ; } if ( sum % 3 !== 0 ) { return false ; } let lastDigit = ( s . charCodeAt ( n - 1 ) - 97 + 1 ) % 10 ; if ( lastDigit % 2 !== 0 ) { return false ; } return true ; } 
function IsRedundantBraces ( s ) { let a = 0 , b = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( s . charAt ( i ) === '(' && s . charAt ( i + 2 ) === ')' ) { return true ; } if ( s . charAt ( i ) === '*' || s . charAt ( i ) === '+' || s . charAt ( i ) === '-' || s . charAt ( i ) === '/' ) { a ++ ; } if ( s . charAt ( i ) === '(' ) { b ++ ; } } if ( b > a ) { return true ; } return false ; } 
function countSubStr ( s , n ) { let count = 0 ; for ( let i = 0 ; i < n - 2 ; ) { if ( s . charAt ( i ) == '0' && s . charAt ( i + 1 ) == '1' && s . charAt ( i + 2 ) == '0' ) { count ++ ; i += 3 ; } else if ( s . charAt ( i ) == '1' && s . charAt ( i + 1 ) == '0' && s . charAt ( i + 2 ) == '1' ) { count ++ ; i += 3 ; } else { i ++ ; } } return count ; } 
function prefixOccurrences ( s ) { const c = s . charAt ( 0 ) ; let countC = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( s . charAt ( i ) === c ) { countC ++ ; } } return countC ; } 
function isValid ( s , len ) { for ( var i = 1 ; i < len ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) { return false ; } } return true ; } 
function count ( s , k ) { let n = s . length ; let d = 0 ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { d += s . charCodeAt ( i ) ; } if ( d % k === 0 ) { count += 1 ; } for ( let i = k ; i < n ; i ++ ) { let prev = s . charCodeAt ( i - k ) ; d -= prev ; d += s . charCodeAt ( i ) ; if ( d % k === 0 ) { count += 1 ; } } return count ; } 
function findSubstringCount ( s ) { let result = 0 ; let n = s . length ; let i = 0 ; while ( i < n - 1 ) { if ( s . charCodeAt ( i ) + 1 === s . charCodeAt ( i + 1 ) ) { result ++ ; while ( i < n - 1 && s . charCodeAt ( i ) + 1 === s . charCodeAt ( i + 1 ) ) { i ++ ; } } i ++ ; } return result ; } 
function find ( s1 , s2 ) { let len1 = s1 . length ; let len2 = s2 . length ; if ( len1 !== len2 ) { return false ; } let d = new Array ( len1 ) ; d [ 0 ] = s2 . charAt ( 0 ) - s1 . charAt ( 0 ) ; for ( let i = 1 ; i < len1 ; i ++ ) { if ( s1 . charAt ( i ) > s2 . charAt ( i ) ) { return false ; } else { d [ i ] = s2 . charAt ( i ) - s1 . charAt ( i ) ; } } for ( let i = 0 ; i < len1 - 1 ; i ++ ) { if ( d [ i ] < d [ i + 1 ] ) { return false ; } } return true ; } 
function isInGivenBase ( s , bas ) { if ( bas > 16 ) { return false ; } else if ( bas <= 10 ) { for ( var i = 0 ; i < s . length ; i ++ ) { if ( ! ( s . charAt ( i ) >= '0' && s . charAt ( i ) < String . fromCharCode ( '0' . charCodeAt ( 0 ) + bas ) ) ) { return false ; } } } else { for ( var i = 0 ; i < s . length ; i ++ ) { if ( ! ( ( s . charAt ( i ) >= '0' && s . charAt ( i ) < String . fromCharCode ( '0' . charCodeAt ( 0 ) + bas ) ) || ( s . charAt ( i ) >= 'A' && s . charAt ( i ) < String . fromCharCode ( 'A' . charCodeAt ( 0 ) + bas - 10 ) ) ) ) { return false ; } } } return true ; } 
function countNonEmptySubstr ( s ) { let n = s . length ; return n * ( n + 1 ) / 2 ; } 
function evenDecimalValue ( s , n ) { let result = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i ; j < n ; j ++ ) { let decimalValue = 0 ; let powerOf2 = 1 ; for ( let k = i ; k <= j ; k ++ ) { decimalValue += ( parseInt ( s . charAt ( k ) ) - '0' ) * powerOf2 ; powerOf2 *= 2 ; } if ( decimalValue % 2 === 0 ) { result ++ ; } } } return result ; } 
function calculate ( s ) { let ans = 6 ; for ( let i = 0 ; i < 10 ; ++ i ) { for ( let j = 0 ; j < 10 ; ++ j ) { for ( let k = 0 ; k < 10 ; ++ k ) { for ( let l = 0 ; l < 10 ; ++ l ) { for ( let m = 0 ; m < 10 ; ++ m ) { for ( let n = 0 ; n < 10 ; ++ n ) { if ( i + j + k === l + m + n ) { let c = 0 ; if ( i !== parseInt ( s . charAt ( 0 ) ) ) { c ++ ; } if ( j !== parseInt ( s . charAt ( 1 ) ) ) { c ++ ; } if ( k !== parseInt ( s . charAt ( 2 ) ) ) { c ++ ; } if ( l !== parseInt ( s . charAt ( 3 ) ) ) { c ++ ; } if ( m !== parseInt ( s . charAt ( 4 ) ) ) { c ++ ; } if ( n !== parseInt ( s . charAt ( 5 ) ) ) { c ++ ; } if ( c < ans ) { ans = c ; } } } } } } } } return ans ; } 
function xorZero ( s ) { let oneCount = 0 , zeroCount = 0 ; let n = s . length ; for ( let i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { oneCount ++ ; } else { zeroCount ++ ; } } if ( oneCount % 2 == 0 ) { return zeroCount ; } return oneCount ; } 
function evenLength ( n ) { let res = n ; for ( let j = n . length - 1 ; j >= 0 ; -- j ) { res += n . charAt ( j ) ; } return res ; } 
function countSubstringWithEqualEnds ( s ) { let result = 0 ; let n = s . length ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i ; j < n ; j ++ ) { if ( s . charAt ( i ) == s . charAt ( j ) ) { result ++ ; } } } return result ; } 
function normalSlope ( a , b , x1 , y1 ) { let g = a / 2 ; let f = b / 2 ; if ( g - x1 === 0 ) { return - 1 ; } let slope = ( f - y1 ) / ( g - x1 ) ; if ( slope === 0 ) { return - 2 ; } return slope ; } 
function orthogonality ( x1 , y1 , x2 , y2 , r1 , r2 ) { var dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) { return true ; } else { return false ; } } 
function findAreaShaded ( a ) { let sqArea = a * a ; let semiCircleArea = 3.14 * ( a * a ) / 8 ; let shadedArea = 4 * semiCircleArea - sqArea ; return shadedArea ; } 
function factorial ( a , b ) { let res = 1 ; for ( let i = 1 ; i <= a + b ; i ++ ) { res = res * i ; } for ( let i = 1 ; i <= a ; i ++ ) { res = res / i ; } for ( let i = 1 ; i <= b ; i ++ ) { res = res / i ; } return res ; } 
function factorTree ( n ) { let height = 0 ; while ( n > 1 ) { let flag = false ; for ( let i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i === 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( ! flag ) { break ; } } return height ; } 
function findIfPossible ( n , s , x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) { return "Yes" ; } if ( n == 1 ) { if ( s == x ) { return "Yes" ; } else { return "No" ; } } if ( n == 2 ) { var c = ( s - x ) / 2 ; var a = c ; var b = c ; a = a + x ; if ( ( a ^ b ) == x ) { return "Yes" ; } else { return "No" ; } } } return "No" ; } 
function maximumTripletXor ( a , b , c ) { let ans = 0 ; for ( let i = 30 ; i >= 0 ; i -- ) { let cur = 1 << i ; if ( a >= cur ) { ans += cur ; a -= cur ; } else if ( b >= cur ) { ans += cur ; b -= cur ; } else if ( c >= cur ) { ans += cur ; c -= cur ; } } return ans ; } 
function itemType ( n ) { let count = 0 ; let day = 1 ; while ( count + day * ( day + 1 ) / 2 < n ) { count += day * ( day + 1 ) / 2 ; day ++ ; } for ( let type = day ; type > 0 ; type -- ) { count += type ; if ( count >= n ) { return type ; } } return 0 ; } 
function maxGcdInRange ( l , r ) { let ans = 1 ; for ( let z = r ; z >= 1 ; z -- ) { if ( Math . floor ( r / z ) - Math . floor ( ( l - 1 ) / z ) > 1 ) { ans = z ; break ; } } return ans ; } 
function sumOfDigits ( n ) { let sum = 0 ; while ( n !== 0 ) { sum += n % 10 ; n = Math . floor ( n / 10 ) ; } return sum ; } 
function isRepUnitNum ( n , b ) { let length = 0 ; let countOne = 0 ; while ( n != 0 ) { let r = n % b ; length ++ ; if ( r == 1 ) { countOne ++ ; } n = Math . floor ( n / b ) ; } return countOne >= 3 && countOne == length ; } 
function isStraightLineNum ( n ) { if ( n <= 99 ) { return false ; } let s = n . toString ( ) ; let d = s . charAt ( 1 ) - s . charAt ( 0 ) ; for ( let i = 2 ; i < s . length ; i ++ ) { if ( s . charAt ( i ) - s . charAt ( i - 1 ) != d ) { return false ; } } return true ; } 
function getCount ( d , n ) { let no = Math . floor ( n / d ) ; let result = no ; for ( let p = 2 ; p * p <= no ; p ++ ) { if ( no % p === 0 ) { while ( no % p === 0 ) { no /= p ; } result -= Math . floor ( result / p ) ; } } if ( no > 1 ) { result -= Math . floor ( result / no ) ; } return result ; } 
function isEvenParity ( x ) { let parity = 0 ; while ( x !== 0 ) { if ( x % 2 === 1 ) { parity ++ ; } x = x >> 1 ; } if ( parity % 2 === 0 ) { return true ; } else { return false ; } } 
function isPerfect ( n ) { let sum = 1 ; for ( let i = 2 ; i * i <= n ; i ++ ) { if ( n % i === 0 ) { if ( i * i !== n ) { sum = sum + i + n / i ; } else { sum = sum + i ; } } } if ( sum === n && n !== 1 ) { return n ; } return 0 ; } 
function logAToBaseB ( a , b ) { return a > b - 1 ? 1 + logAToBaseB ( Math . floor ( a / b ) , b ) : 0 ; } 
function usingBinarySearch ( start , end , n , s ) { if ( start >= end ) { return start ; } let mid = start + Math . floor ( ( end - start ) / 2 ) ; let totalSum = ( n * ( n + 1 ) ) / 2 ; let midSum = ( mid * ( mid + 1 ) ) / 2 ; if ( totalSum - midSum <= s ) { return usingBinarySearch ( start , mid , n , s ) ; } return usingBinarySearch ( mid + 1 , end , n , s ) ; } 
function minInt ( s ) { let s1 = s . split ( "" ) ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( s1 [ i ] >= "5" ) { s1 [ i ] = String . fromCharCode ( "9" . charCodeAt ( ) - s1 [ i ] . charCodeAt ( ) + "0" . charCodeAt ( ) ) ; } } if ( s1 [ 0 ] == "0" ) { s1 [ 0 ] = "9" ; } return s1 . join ( "" ) ; } 
function countTriplets ( a , b , c ) { let ans = 0 ; for ( let i = 1 ; i <= a ; i ++ ) { for ( let j = 1 ; j <= b ; j ++ ) { for ( let k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) { ans ++ ; } } } } return ans ; } 
function topsyTurvy ( s ) { for ( let i = 0 ; i < s . length ; i ++ ) { if ( s . charAt ( i ) == '2' || s . charAt ( i ) == '4' || s . charAt ( i ) == '5' || s . charAt ( i ) == '6' || s . charAt ( i ) == '7' || s . charAt ( i ) == '9' ) { return false ; } } return true ; } 
function sumOfLastDig ( n , m ) { let sum = 0 ; let k = Math . floor ( n / m ) ; let arr = new Array ( 10 ) ; for ( let i = 0 ; i < 10 ; i ++ ) { arr [ i ] = ( m * ( i + 1 ) ) % 10 ; sum += arr [ i ] ; } let rem = k % 10 ; let ans = Math . floor ( k / 10 ) * sum ; for ( let i = 0 ; i < rem ; i ++ ) { ans += arr [ i ] ; } return ans ; } 
function totalPay ( totalItems , priceOfOneItem , n , m ) { let freeItems = 0 ; let actual = 0 ; freeItems = Math . floor ( totalItems / ( n + m ) ) ; actual = totalItems - freeItems ; let amount = actual * priceOfOneItem ; return amount ; } 
function minOperations ( x , y , p , q ) { if ( y % x !== 0 ) { return - 1 ; } let d = y / x ; let a = 0 ; while ( d % p === 0 ) { d /= p ; a += 1 ; } let b = 0 ; while ( d % q === 0 ) { d /= q ; b += 1 ; } if ( d !== 1 ) { return - 1 ; } return a + b ; } 
function isMersenne ( n ) { while ( n !== 0 ) { let r = n % 2 ; if ( r === 0 ) { return false ; } n = Math . floor ( n / 2 ) ; } return true ; } 
function findThirdDigit ( n ) { if ( n < 3 ) { return 0 ; } return ( n & 1 ) != 0 ? 1 : 6 ; } 
function isOddLength ( num ) { let count = 0 ; while ( num > 0 ) { num = Math . floor ( num / 10 ) ; count ++ ; } if ( count % 2 !== 0 ) { return true ; } return false ; } 
function checkIsPossible ( l , r , k ) { let count = 0 ; for ( let i = l ; i <= r ; i ++ ) { if ( i % k === 0 ) { count ++ ; } } return count > 1 ; } 
function bytes ( kilobytes ) { var b = kilobytes * 1024 ; return b ; } 
function octahedralNum ( n ) { return Math . floor ( ( n * ( 2 * n * n + 1 ) ) / 3 ) ; } 
function checkEqual ( s ) { for ( let i = 0 ; i < s . length ; i ++ ) { if ( s . charAt ( i ) !== '1' && s . charAt ( i ) !== '0' && s . charAt ( i ) !== '8' ) { return "No" ; } } let start = 0 , end = s . length - 1 ; while ( start < end ) { if ( s . charAt ( start ) !== s . charAt ( end ) ) { return "No" ; } start ++ ; end -- ; } return "Yes" ; } 
function isUndulating ( n ) { if ( n . length <= 2 ) { return false ; } for ( let i = 2 ; i < n . length ; i ++ ) { if ( n . charAt ( i - 2 ) !== n . charAt ( i ) ) { return false ; } } return true ; } 
function firstDigit ( n ) { while ( n >= 10 ) { n = Math . floor ( n / 10 ) ; } return n ; } 
function countDigit ( n ) { if ( n == 0 ) { return 0 ; } return 1 + countDigit ( Math . floor ( n / 10 ) ) ; } 
function isDivisibleBy5 ( s ) { let n = s . length ; return s . charAt ( n - 1 ) - '0' == 0 || s . charAt ( n - 1 ) - '0' == 5 ; } 
function inv ( a , m ) { let m0 = m ; let x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { let q = Math . floor ( a / m ) ; let t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; } 
function onlyFirstAndLastAreSet ( n ) { if ( n === 1 ) { return true ; } if ( n === 2 ) { return false ; } return ( ( n - 1 ) & ( n - 2 ) ) === 0 ; } 
function divide ( dividend , divisor ) { let sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? - 1 : 1 ; dividend = Math . abs ( dividend ) ; divisor = Math . abs ( divisor ) ; let quotient = 0 ; let temp = 0 ; for ( let i = 31 ; i >= 0 ; -- i ) { if ( temp + ( divisor << i ) <= dividend ) { temp += divisor << i ; quotient |= 1 << i ; } } if ( sign === - 1 ) { quotient = - quotient ; } return quotient ; } 
function findProfession ( level , pos ) { if ( level === 1 ) { return 'e' ; } if ( findProfession ( level - 1 , Math . floor ( ( pos + 1 ) / 2 ) ) === 'd' ) { return pos % 2 !== 0 ? 'd' : 'e' ; } return pos % 2 !== 0 ? 'e' : 'd' ; } 
