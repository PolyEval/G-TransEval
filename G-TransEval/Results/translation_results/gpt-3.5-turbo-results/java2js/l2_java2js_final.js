function hasCloseElements ( numbers , threshold ) { for ( let i = 0 ; i < numbers . length ; i ++ ) { for ( let j = i + 1 ; j < numbers . length ; j ++ ) { let distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) { return true ; } } } return false ; } 
function truncateNumber ( number ) { return number % 1.0 ; } 
function belowZero ( operations ) { var balance = 0 ; for ( var i = 0 ; i < operations . length ; i ++ ) { balance += operations [ i ] ; if ( balance < 0 ) { return true ; } } return false ; } 
function meanAbsoluteDeviation ( numbers ) { var sumNum = 0 ; for ( var i = 0 ; i < numbers . length ; i ++ ) { sumNum += numbers [ i ] ; } var mean = sumNum / numbers . length ; var sumAbsDiff = 0 ; for ( var j = 0 ; j < numbers . length ; j ++ ) { sumAbsDiff += Math . abs ( numbers [ j ] - mean ) ; } return sumAbsDiff / numbers . length ; } 
function intersperse ( numbers , delimiter ) { let result = [ ] ; if ( numbers . length === 0 ) { return result ; } for ( let i = 0 ; i < numbers . length - 1 ; i ++ ) { result . push ( numbers [ i ] ) ; result . push ( delimiter ) ; } result . push ( numbers [ numbers . length - 1 ] ) ; return result ; } 
function sumProduct ( numbers ) { let sumValue = 0 ; let prodValue = 1 ; for ( let n of numbers ) { sumValue += n ; prodValue *= n ; } return [ sumValue , prodValue ] ; } 
function allPrefixes ( s ) { let result = [ ] ; for ( let i = 1 ; i <= s . length ; i ++ ) { result . push ( s . substring ( 0 , i ) ) ; } return result ; } 
function parseMusic ( musicString ) { let current = "" ; let result = [ ] ; for ( let i = 0 ; i <= musicString . length ; i ++ ) { if ( i === musicString . length || musicString . charAt ( i ) === " " ) { if ( current === "o" ) { result . push ( 4 ) ; } if ( current === "o|" ) { result . push ( 2 ) ; } if ( current === ".|" ) { result . push ( 1 ) ; } current = "" ; } else { current += musicString . charAt ( i ) ; } } return result ; } 
function strlen ( s ) { return s . length ; } 
function factorize ( n ) { let factors = [ ] ; for ( let i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n /= i ; factors . push ( i ) ; i -- ; } } return factors ; } 
function concatenate ( strings ) { var result = '' ; for ( var i = 0 ; i < strings . length ; i ++ ) { result += strings [ i ] ; } return result ; } 
function getPositive ( l ) { let result = [ ] ; for ( let i = 0 ; i < l . length ; i ++ ) { if ( l [ i ] > 0 ) { result . push ( l [ i ] ) ; } } return result ; } 
function sortEven ( l ) { var evens = [ ] ; for ( var i = 0 ; i < l . length ; i += 2 ) { evens . push ( l [ i ] ) ; } evens . sort ( function ( a , b ) { return a - b ; } ) ; var result = [ ] ; for ( var i = 0 ; i < l . length ; i ++ ) { if ( i % 2 === 0 ) { result . push ( evens [ Math . floor ( i / 2 ) ] ) ; } if ( i % 2 === 1 ) { result . push ( l [ i ] ) ; } } return result ; } 
function decodeCyclic ( s ) { let output = "" ; let i = 0 ; while ( i <= s . length - 3 ) { let x = s . charAt ( i + 2 ) + s . substring ( i , i + 2 ) ; output += x ; i += 3 ; } return output + s . substring ( i ) ; } 
function carRaceCollision ( n ) { return Math . pow ( n , 2 ) ; } 
function incrList ( l ) { var result = [ ] ; for ( var i = 0 ; i < l . length ; i ++ ) { result . push ( l [ i ] + 1 ) ; } return result ; } 
function pairsSumToZero ( l ) { for ( let i = 0 ; i < l . length ; i ++ ) { for ( let j = i + 1 ; j < l . length ; j ++ ) { if ( l [ i ] + l [ j ] === 0 ) { return true ; } } } return false ; } 
function changeBase ( x , b ) { let ret = '' ; while ( x > 0 ) { ret = x % b + ret ; x = Math . floor ( x / b ) ; } return ret ; } 
function median ( l ) { l . sort ( ) ; if ( l . length % 2 === 1 ) { return l [ Math . floor ( l . length / 2 ) ] ; } return ( l [ l . length / 2 - 1 ] + l [ l . length / 2 ] ) / 2.0 ; } 
function decodeShift ( s ) { let sb = "" ; for ( let i = 0 ; i < s . length ; i ++ ) { let ch = s . charAt ( i ) ; let w = String . fromCharCode ( ( ( ch . charCodeAt ( 0 ) + 21 - 97 ) % 26 ) + 97 ) ; sb += w ; } return sb ; } 
function belowThreshold ( l , t ) { for ( let n of l ) { if ( n >= t ) { return false ; } } return true ; } 
function correctBracketing ( brackets ) { let depth = 0 ; for ( let i = 0 ; i < brackets . length ; i ++ ) { let b = brackets [ i ] ; if ( b == '<' ) { depth += 1 ; } if ( b == '>' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; } 
function monotonic ( l ) { let incr = 0 ; let decr = 0 ; for ( let i = 1 ; i < l . length ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr !== 2 ; } 
function derivative ( xs ) { let result = [ ] ; for ( let i = 1 ; i < xs . length ; i ++ ) { result . push ( i * xs [ i ] ) ; } return result ; } 
function vowelsCount ( s ) { const vowels = "aeiouAEIOU" ; let count = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( vowels . indexOf ( s [ i ] ) !== - 1 ) { count ++ ; } } if ( s . charAt ( s . length - 1 ) === 'y' || s . charAt ( s . length - 1 ) === 'Y' ) { count ++ ; } return count ; } 
function digitSum ( s ) { let sum = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { let c = s . charAt ( i ) ; if ( c === c . toUpperCase ( ) ) { sum += c . charCodeAt ( 0 ) ; } } return sum ; } 
function fruitDistribution ( s , n ) { let num1 = "" ; let num2 = "" ; let flag = false ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( / \d / . test ( s . charAt ( i ) ) ) { if ( ! flag ) { num1 += s . charAt ( i ) ; } if ( flag ) { num2 += s . charAt ( i ) ; } } else if ( ! flag && num1 . length > 0 ) { flag = true ; } } return n - parseInt ( num1 ) - parseInt ( num2 ) ; } 
function pluck ( arr ) { let result = [ ] ; for ( let i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] % 2 === 0 ) { if ( result . length === 0 ) { result . push ( arr [ i ] ) ; result . push ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } } return result ; } 
function strangeSortList ( lst ) { let res = new Array ( ) ; lst . sort ( function ( a , b ) { return a - b } ) ; let l = 0 ; let r = lst . length - 1 ; while ( l < r ) { res . push ( lst [ l ] ) ; l ++ ; res . push ( lst [ r ] ) ; r -- ; } if ( l == r ) { res . push ( lst [ l ] ) ; } return res ; } 
function triangleArea ( a , b , c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return - 1 ; } var s = ( a + b + c ) / 2 ; return Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; } 
function willItFly ( q , w ) { let sum = 0 ; for ( let i = 0 ; i < q . length ; i ++ ) { if ( q [ i ] !== q [ q . length - i - 1 ] ) { return false ; } sum += q [ i ] ; } return sum <= w ; } 
function isCube ( a ) { a = Math . abs ( a ) ; let i = Math . round ( Math . pow ( a , 1 / 3 ) ) ; return Math . pow ( i , 3 ) === a ; } 
function hexKey ( num ) { const key = "2357BD" ; let total = 0 ; for ( let i = 0 ; i < num . length ; i ++ ) { if ( key . indexOf ( num . charAt ( i ) ) !== - 1 ) { total += 1 ; } } return total ; } 
function decimalToBinary ( dec ) { let ans = "" ; if ( dec != 0 ) { while ( dec > 0 ) { ans = ( dec % 2 ) + ans ; dec = Math . floor ( dec / 2 ) ; } } else { ans = "0" ; } return "db" + ans + "db" ; } 
function primeLength ( s ) { let l = s . length ; if ( l < 2 ) { return false ; } for ( let i = 2 ; i < l ; i ++ ) { if ( l % i === 0 ) { return false ; } } return true ; } 
function startsOneEnds ( n ) { if ( n < 1 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return parseInt ( 18 * Math . pow ( 10 , n - 2 ) ) ; } 
function add ( lst ) { let sum = 0 ; for ( let i = 1 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 === 0 ) { sum += lst [ i ] ; } } return sum ; } 
function getRow ( lst , x ) { var coords = [ ] ; for ( var i = 0 ; i < lst . length ; i ++ ) { for ( var j = lst [ i ] . length - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] [ j ] == x ) { coords . push ( [ i , j ] ) ; } } } return coords ; } 
function nextSmallest ( lst ) { lst . sort ( ) ; for ( let i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] !== lst [ i - 1 ] ) { return lst [ i ] ; } } return - 1 ; } 
function anyInt ( a , b , c ) { if ( Math . round ( a ) !== a || Math . round ( b ) !== b || Math . round ( c ) !== c ) { return false ; } return a + b === c || a + c === b || b + c === a ; } 
function countUpTo ( n ) { let primes = [ ] ; for ( let i = 2 ; i < n ; i ++ ) { let isPrime = true ; for ( let j = 2 ; j < i ; j ++ ) { if ( i % j === 0 ) { isPrime = false ; break ; } } if ( isPrime ) { primes . push ( i ) ; } } return primes ; } 
function closestInteger ( value ) { var w = parseFloat ( value ) ; return Math . round ( w ) ; } 
function makeAPile ( n ) { let result = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { result . push ( n + 2 * i ) ; } return result ; } 
function wordStrings ( s ) { var current = new StringBuilder ( ) ; var words = new ArrayList ( ) ; for ( var i = 0 ; i <= s . length ; i ++ ) { if ( i === s . length || s . charAt ( i ) === ' ' || s . charAt ( i ) === ',' ) { if ( current . length > 0 ) { words . add ( current . toString ( ) ) ; current . setLength ( 0 ) ; } } else { current . append ( s . charAt ( i ) ) ; } } return words ; } 
function roundedAvg ( n , m ) { if ( n > m ) { return "-1" ; } var num = Math . floor ( ( m + n ) / 2 ) ; var ret = "" ; while ( num > 0 ) { ret = ( num % 2 ) + ret ; num = Math . floor ( num / 2 ) ; } return ret ; } 
function uniqueDigits ( x ) { let digits = [ ] ; for ( let i of x ) { let isUnique = true ; for ( let c of i . toString ( ) ) { if ( parseInt ( c ) % 2 === 0 ) { isUnique = false ; break ; } } if ( isUnique ) { digits . push ( i ) ; } } digits . sort ( ( a , b ) => a - b ) ; return digits ; } 
function countNums ( arr ) { let num = 0 ; for ( let n of arr ) { let neg = n < 0 ? - 1 : 1 ; n = Math . abs ( n ) ; let digits = [ ] ; for ( let c of n . toString ( ) . split ( '' ) ) { digits . push ( parseInt ( c ) ) ; } digits [ 0 ] = digits [ 0 ] * neg ; let sum = 0 ; for ( let d of digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; } 
function moveOneBall ( arr ) { if ( arr . length === 0 ) { return true ; } let num = 0 ; for ( let i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ arr . length - 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; } 
function exchange ( lst1 , lst2 ) { let odd = 0 ; let even = 0 ; lst1 . forEach ( ( n ) => { if ( n % 2 === 1 ) { odd += 1 ; } } ) ; lst2 . forEach ( ( n ) => { if ( n % 2 === 0 ) { even += 1 ; } } ) ; if ( even >= odd ) { return "YES" ; } return "NO" ; } 
function oddCount ( lst ) { let results = [ ] ; let originalStr = "the number of odd elements in the string i of the input." ; for ( let s of lst ) { let sum = 0 ; for ( let d of s . split ( '' ) ) { if ( ! isNaN ( d ) && d % 2 === 1 ) { sum ++ ; } } let result = "" ; for ( let c of originalStr . split ( '' ) ) { if ( c === 'i' ) { result += sum ; } else { result += c ; } } results . push ( result ) ; } return results ; } 
function minSubArraySum ( nums ) { let minSum = Number . MAX_VALUE ; let sum = 0 ; for ( let i = 0 ; i < nums . length ; i ++ ) { sum += nums [ i ] ; if ( minSum > sum ) { minSum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return minSum ; } 
function maxFill ( grid , capacity ) { var res = 0 ; for ( var i = 0 ; i < grid . length ; i ++ ) { var well = grid [ i ] ; var sum = 0 ; for ( var j = 0 ; j < well . length ; j ++ ) { var n = well [ j ] ; sum += n ; } if ( sum > 0 ) { res += Math . floor ( ( sum - 1 ) / capacity ) + 1 ; } } return res ; } 
function selectWords ( s , n ) { const vowels = "aeiouAEIOU" ; let current = "" ; let result = [ ] ; let consonantNum = 0 ; for ( let i = 0 ; i <= s . length ; i ++ ) { if ( i === s . length || s . charAt ( i ) === " " ) { if ( consonantNum === n ) { result . push ( current ) ; } current = "" ; consonantNum = 0 ; } else { current += s . charAt ( i ) ; if ( vowels . indexOf ( s . charAt ( i ) ) === - 1 ) { consonantNum += 1 ; } } } return result ; } 
function solution ( lst ) { let sum = 0 ; for ( let i = 0 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 === 1 ) { sum += lst [ i ] ; } } return sum ; } 
function addElements ( arr , k ) { let sum = 0 ; for ( let i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= - 99 && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; } 
function getOddCollatz ( n ) { let oddCollatz = [ ] ; while ( n !== 1 ) { if ( n % 2 === 1 ) { oddCollatz . push ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } oddCollatz . push ( 1 ) ; oddCollatz . sort ( ( a , b ) => a - b ) ; return oddCollatz ; } 
function isSorted ( lst ) { for ( let i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; } 
function intersection ( interval1 , interval2 ) { let inter1 = Math . max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; let inter2 = Math . min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; let l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( let i = 2 ; i < l ; i ++ ) { if ( l % i === 0 ) { return "NO" ; } } return "YES" ; } 
function prodSigns ( arr ) { if ( arr . length === 0 ) { return - 32768 ; } let sum = 0 ; let prods = 1 ; for ( let i of arr ) { sum += Math . abs ( i ) ; if ( i === 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; } 
function minPath ( grid , k ) { let n = grid . length ; let minNum = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { let tmp = [ ] ; if ( i != 0 ) { tmp . push ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . push ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . push ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . push ( grid [ i ] [ j + 1 ] ) ; } minNum = Math . min ( ... tmp ) ; } } } let ans = [ ] ; for ( let i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . push ( 1 ) ; } else { ans . push ( minNum ) ; } } return ans ; } 
function digits ( n ) { let prod = 0 ; let str = String ( n ) ; for ( let i = 0 ; i < str . length ; i ++ ) { let digit = parseInt ( str . charAt ( i ) ) ; if ( digit % 2 === 1 ) { if ( prod === 0 ) { prod = 1 ; } prod *= digit ; } } return prod ; } 
function isNested ( s ) { let count = 0 ; let maxCount = 0 ; for ( let ch of s ) { if ( ch === '[' ) { count += 1 ; } if ( ch === ']' ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > maxCount ) { maxCount = count ; } if ( count <= maxCount - 2 ) { return true ; } } return false ; } 
function sumSquares ( lst ) { let sum = 0 ; for ( let i of lst ) { sum += Math . ceil ( i ) * Math . ceil ( i ) ; } return sum ; } 
function canArrange ( arr ) { let index = - 1 ; for ( let i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; } 
function largestSmallestIntegers ( lst ) { let maxNeg = 0 ; let minPos = 0 ; for ( let i = 0 ; i < lst . length ; i ++ ) { let n = lst [ i ] ; if ( n < 0 && ( maxNeg == 0 || n > maxNeg ) ) { maxNeg = n ; } if ( n > 0 && ( minPos == 0 || n < minPos ) ) { minPos = n ; } } return [ maxNeg , minPos ] ; } 
function fixSpaces ( text ) { let res = "" ; let spaceLen = 0 ; for ( let i = 0 ; i <= text . length ; i ++ ) { if ( i == text . length || text . charAt ( i ) != ' ' ) { if ( spaceLen == 1 ) { res += "_" ; } if ( spaceLen == 2 ) { res += "__" ; } if ( spaceLen > 2 ) { res += "-" ; } spaceLen = 0 ; if ( i != text . length ) { res += text . charAt ( i ) ; } } else { spaceLen += 1 ; } } return res ; } 
function filenameCheck ( fileName ) { let digitNum = 0 , dotNum = 0 ; if ( fileName . length < 5 || ! / ^[a-zA-Z] / . test ( fileName [ 0 ] ) ) { return "No" ; } let suffix = fileName . substr ( fileName . length - 4 ) ; if ( suffix !== ".txt" && suffix !== ".exe" && suffix !== ".dll" ) { return "No" ; } for ( let i = 0 ; i < fileName . length ; i ++ ) { let c = fileName [ i ] ; if ( / \d / . test ( c ) ) { digitNum += 1 ; } if ( c === '.' ) { dotNum += 1 ; } } if ( digitNum > 3 || dotNum !== 1 ) { return "No" ; } return "Yes" ; } 
function sumSquares ( lst ) { let sum = 0 ; for ( let i = 0 ; i < lst . length ; i ++ ) { if ( i % 3 === 0 ) { sum += lst [ i ] ** 2 ; } else if ( i % 4 === 0 ) { sum += lst [ i ] ** 3 ; } else { sum += lst [ i ] ; } } return sum ; } 
function wordsInSentence ( sentence ) { var result = "" ; var current = "" ; for ( var i = 0 ; i <= sentence . length ; i ++ ) { if ( i === sentence . length || sentence . charAt ( i ) === " " ) { var isPrime = true ; var l = current . length ; if ( l < 2 ) { isPrime = false ; } for ( var j = 2 ; j < l ; j ++ ) { if ( l % j === 0 ) { isPrime = false ; break ; } } if ( isPrime ) { result += current + " " ; } current = "" ; } else { current += sentence . charAt ( i ) ; } } if ( result . length > 0 ) { result = result . slice ( 0 , - 1 ) ; } return result ; } 
function simplify ( x , n ) { let a = 0 , b = 0 , c = 0 , d = 0 ; for ( let i = 0 ; i < x . length ; i ++ ) { if ( x . charAt ( i ) === '/' ) { a = parseInt ( x . substring ( 0 , i ) ) ; b = parseInt ( x . substring ( i + 1 ) ) ; } } for ( let i = 0 ; i < n . length ; i ++ ) { if ( n . charAt ( i ) === '/' ) { c = parseInt ( n . substring ( 0 , i ) ) ; d = parseInt ( n . substring ( i + 1 ) ) ; } } return ( a * c ) % ( b * d ) === 0 ; } 
function specialFilter ( nums ) { let count = 0 ; for ( let num of nums ) { if ( num > 10 ) { let w = String ( num ) ; if ( w . charAt ( 0 ) % 2 === 1 && w . charAt ( w . length - 1 ) % 2 === 1 ) { count += 1 ; } } } return count ; } 
function getMaxTriples ( n ) { let arr = [ ] ; for ( let i = 1 ; i <= n ; i ++ ) { arr . push ( i * i - i + 1 ) ; } let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { for ( let k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) { count += 1 ; } } } } return count ; } 
function doubleTheDifference ( lst ) { let sum = 0 ; lst . forEach ( ( d ) => { let num = Math . round ( d ) ; if ( d === num ) { if ( num > 0 && num % 2 === 1 ) { sum += num * num ; } } } ) ; return sum ; } 
function compare ( game , guess ) { const result = [ ] ; for ( let i = 0 ; i < game . length ; i ++ ) { result . push ( Math . abs ( game [ i ] - guess [ i ] ) ) ; } return result ; } 
function strongestExtension ( className , extensions ) { let strongest = "" ; let max = Number . MIN_VALUE ; for ( let extension of extensions ) { let strength = 0 ; for ( let chr of extension . split ( "" ) ) { if ( chr . toUpperCase ( ) === chr ) { strength += 1 ; } if ( chr . toLowerCase ( ) === chr ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return className + "." + strongest ; } 
function intToMiniRoman ( number ) { const num = [ 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 ] ; const sym = [ "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" ] ; let pos = 0 ; let res = "" ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res += sym [ pos ] ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } return res ; } 
function eat ( number , need , remaining ) { return need > remaining ? [ number + remaining , 0 ] : [ number + need , remaining - need ] ; } 
function doAlgebra ( ops , operands ) { let nums = [ ... operands ] ; let currentOps = [ ... ops ] ; let i = currentOps . length - 1 ; while ( i >= 0 ) { if ( currentOps [ i ] === "**" ) { nums [ i ] = Math . pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . splice ( i + 1 , 1 ) ; currentOps . splice ( i , 1 ) ; } i -- ; } i = 0 ; while ( i < currentOps . length ) { if ( currentOps [ i ] === "*" ) { nums [ i ] = nums [ i ] * nums [ i + 1 ] ; nums . splice ( i + 1 , 1 ) ; currentOps . splice ( i , 1 ) ; } else if ( currentOps [ i ] === "//" ) { nums [ i ] = nums [ i ] / nums [ i + 1 ] ; nums . splice ( i + 1 , 1 ) ; currentOps . splice ( i , 1 ) ; } else { i ++ ; } } i = 0 ; while ( i < currentOps . length ) { if ( currentOps [ i ] === "+" ) { nums [ i ] = nums [ i ] + nums [ i + 1 ] ; nums . splice ( i + 1 , 1 ) ; currentOps . splice ( i , 1 ) ; } else if ( currentOps [ i ] === "-" ) { nums [ i ] = nums [ i ] - nums [ i + 1 ] ; nums . splice ( i + 1 , 1 ) ; currentOps . splice ( i , 1 ) ; } else { i ++ ; } } return nums [ 0 ] ; } 
function generateIntegers ( a , b ) { let lower = Math . max ( 2 , Math . min ( a , b ) ) ; let upper = Math . min ( 8 , Math . max ( a , b ) ) ; let result = [ ] ; for ( let i = lower ; i <= upper ; i += 2 ) { result . push ( i ) ; } return result ; } 
function isStepNum ( n ) { let prevDigit = - 1 ; while ( n > 0 ) { let curDigit = n % 10 ; if ( prevDigit != - 1 ) { if ( Math . abs ( curDigit - prevDigit ) != 1 ) { return false ; } } n = Math . floor ( n / 10 ) ; prevDigit = curDigit ; } return true ; } 
function numOfWays ( n , k ) { let p = 1 ; if ( k % 2 !== 0 ) { p = - 1 ; } return Math . floor ( ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ) ; } 
function findDivisors ( n ) { let v = [ ] ; for ( let i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i === 0 ) { if ( n / i === i ) { v . push ( i ) ; } else { v . push ( i ) ; v . push ( n / i ) ; } } } return v ; } 
function eggDrop ( n , k ) { if ( k === 1 || k === 0 ) { return k ; } if ( n === 1 ) { return k ; } let min = Number . MAX_SAFE_INTEGER ; let x , res ; for ( x = 1 ; x <= k ; x ++ ) { res = Math . max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , k - x ) ) ; if ( res < min ) { min = res ; } } return min + 1 ; } 
function isPowerOfTwo ( n ) { if ( n === 0 ) { return false ; } return Math . ceil ( Math . log ( n ) / Math . log ( 2 ) ) === Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ; } 
function shortestPalindrome ( s ) { let n = s . length ; let v = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { let l = i ; let r = i ; let ans1 = "" ; let ans2 = "" ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans1 += s . charAt ( l ) ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans2 += s . charAt ( l ) ; l -- ; r ++ ; } v . push ( ans1 ) ; v . push ( ans2 ) ; } let ans = v [ 0 ] ; for ( let i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] != "" ) { if ( ans . charAt ( 0 ) >= v [ i ] . charAt ( 0 ) ) { ans = v [ i ] ; } } } return ans ; } 
function minimumAdjacentDifference ( a , n , k ) { let minDiff = Number . MAX_VALUE ; for ( let i = 0 ; i <= k ; i ++ ) { let maxDiff = Number . MIN_VALUE ; for ( let j = 0 ; j < n - k - 1 ; j ++ ) { for ( let p = i ; p <= i + j ; p ++ ) { maxDiff = Math . max ( maxDiff , a [ p + 1 ] - a [ p ] ) ; } } minDiff = Math . min ( minDiff , maxDiff ) ; } return minDiff ; } 
function cal ( arr , mid ) { var chocolate = 0 ; for ( var i of arr ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; } 
function check ( v , a , m ) { let tec = 0 ; let ans = 0 ; let b = new Array ( a . length + 3 ) . fill ( 0 ) ; for ( let i = 0 ; i < a . length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { let mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; } 
function largestNum ( arr ) { let res = 0 ; arr . sort ( ) ; let l = 0 , r = arr . length - 1 ; while ( l < r ) { let sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) { l ++ ; } else { r -- ; } } return res ; } 
function binarySearch ( p , n ) { let i = 0 ; let j = p . length - 1 ; let index = - 1 ; while ( i <= j ) { let mid = Math . floor ( ( i + j ) / 2 ) ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; } 
function findMinLength ( arr ) { let index = arr . length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; } 
function minDigits ( n , k ) { let digitsNum = Math . floor ( Math . log10 ( n ) + 1 ) ; let tempSum = 0 ; let temp = digitsNum ; let result = 0 ; let x , v ; let sum = 0 ; let num2 = n ; while ( num2 !== 0 ) { sum += num2 % 10 ; num2 = Math . floor ( num2 / 10 ) ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = Math . floor ( n / Math . pow ( 10 , temp - 1 ) ) ; tempSum += v % 10 ; if ( tempSum >= k ) { v = Math . floor ( v / 10 ) + 1 ; result = v * Math . pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; } return - 1 ; } 
function checkForPerfectSquare ( arr , i , j ) { let mid ; let sum = 0 ; for ( let m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } let low = 0 ; let high = Math . floor ( sum / 2 ) ; while ( low <= high ) { mid = low + Math . floor ( ( high - low ) / 2 ) ; if ( mid * mid === sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; } 
function minFlips ( mat , s ) { let n = mat . length ; let m = mat [ 0 ] . length ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] !== parseInt ( s . charAt ( i + j ) ) - 0 ) { count ++ ; } } } return count ; } 
function constructTree ( n , edges ) { let adjl = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { adjl . push ( [ ] ) ; } for ( let e of edges ) { let u = e [ 0 ] ; let v = e [ 1 ] ; adjl [ u ] . push ( v ) ; adjl [ v ] . push ( u ) ; } return adjl ; } 
function findSumOfValues ( v , parent , valuesChildren ) { let curNode = v ; let sum = 0 ; while ( curNode !== - 1 ) { sum += valuesChildren [ curNode ] ; curNode = parent [ curNode ] ; } return sum ; } 
function getDistinct ( d , count ) { let num = 0 ; count = Math . pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; } 
function isIncreasing ( arr ) { for ( let i = 0 ; i < arr . length - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; } 
function minAdjSwaps ( mat ) { let n = mat . length ; let cntZero = new Array ( n ) . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = n - 1 ; j >= 0 && mat [ i ] [ j ] === 0 ; j -- ) { cntZero [ i ] ++ ; } } let cntSwaps = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( cntZero [ i ] < ( n - i - 1 ) ) { let first = i ; while ( first < n && cntZero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first === n ) { return - 1 ; } while ( first > i ) { [ cntZero [ first ] , cntZero [ first - 1 ] ] = [ cntZero [ first - 1 ] , cntZero [ first ] ] ; first -- ; cntSwaps ++ ; } } } return cntSwaps ; } 
function solve ( values , salary , mod ) { let ret = 1 ; let amt = 0 ; values . sort ( ( a , b ) => a - b ) ; salary . sort ( ( a , b ) => a - b ) ; while ( salary . length > 0 ) { while ( values . length > 0 && values [ values . length - 1 ] >= salary [ salary . length - 1 ] ) { amt ++ ; values . pop ( ) ; } if ( amt === 0 ) { return 0 ; } ret *= amt -- ; ret %= mod ; salary . pop ( ) ; } return ret ; } 
function organizeInOrder ( vec , op , n ) { var result = new Array ( n ) . fill ( 0 ) ; vec . sort ( ( a , b ) => a - b ) ; var i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; } 
function countPoints ( n , m , a , b , x , y ) { a . sort ( ( a , b ) => a - b ) ; b . sort ( ( a , b ) => a - b ) ; let j = 0 ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; } 
function areSame ( a , b ) { a . sort ( ( x , y ) => x - y ) ; b . sort ( ( x , y ) => x - y ) ; return JSON . stringify ( a ) === JSON . stringify ( b ) ; } 
function countNumberOfStrings ( s ) { let n = s . length - 1 ; let count = Math . pow ( 2 , n ) ; return count ; } 
function primePower ( x ) { let primePow = [ ] ; for ( let i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { let p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } primePow . push ( p ) ; } } if ( x > 1 ) { primePow . push ( x ) ; } return primePow ; } 
function isPerfect ( n0 ) { let n = Math . sqrt ( n0 ) ; if ( Math . floor ( n ) !== Math . ceil ( n ) ) { return false ; } return true ; } 
function findSum ( l , r ) { let arr = [ ] ; let i = 0 ; let x = 2 ; while ( i <= r ) { arr . push ( i + x ) ; if ( i + 1 <= r ) { arr . push ( i + 1 + x ) ; } x *= - 1 ; i += 2 ; } let sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr [ i ] ; } return sum ; } 
function results ( n , k ) { return Math . round ( Math . pow ( n , 1 / Math . pow ( 2 , k ) ) ) ; } 
function factors ( n ) { let v = [ 1 ] ; for ( let i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i === 0 ) { v . push ( i ) ; if ( n / i !== i ) { v . push ( n / i ) ; } } } return v ; } 
function smallestNum ( n ) { let x = Math . pow ( 10 , ( n - 1 ) / 2 ) ; return Math . ceil ( x ) ; } 
function smallest ( s ) { let a = new Array ( s . length ) . fill ( 0 ) ; for ( let i = 0 ; i < s . length ; i ++ ) { a [ i ] = s . charAt ( i ) - '0' ; } let b = [ ] ; for ( let i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] % 2 !== 0 ) { b . push ( a [ i ] ) ; } } b . sort ( ( a , b ) => a - b ) ; if ( b . length > 1 ) { return b [ 0 ] * 10 + b [ 1 ] ; } return - 1 ; } 
function diagonals ( a , b , c , d ) { let ans = [ ] ; ans . push ( Math . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . push ( Math . sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; } 
function findNumberOfDigits ( n , bas ) { var dig = Math . floor ( Math . log ( n ) / Math . log ( bas ) ) + 1 ; return dig ; } 
function nGon ( n ) { let proAngleVar ; if ( n % 4 === 0 ) { proAngleVar = Math . PI * ( 180.0 / n ) / 180 ; } else { proAngleVar = Math . PI * ( 180.0 / ( 2 * n ) ) / 180 ; } let negX = 1.0e+99 , posX = - 1.0e+99 , negY = 1.0e+99 , posY = - 1.0e+99 ; for ( let j = 0 ; j < n ; ++ j ) { let px = Math . cos ( 2 * Math . PI * j / n + proAngleVar ) ; let py = Math . sin ( 2 * Math . PI * j / n + proAngleVar ) ; negX = Math . min ( negX , px ) ; posX = Math . max ( posX , px ) ; negY = Math . min ( negY , py ) ; posY = Math . max ( posY , py ) ; } let opt2 = Math . max ( posX - negX , posY - negY ) ; return opt2 / Math . sin ( Math . PI / n ) / 2 ; } 
function findMaxK ( n ) { let p = Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ; return Math . pow ( 2 , p ) ; } 
function nthFibo ( n ) { const a = ( Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; const b = ( - 1 * Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; const r = Math . pow ( 5 , 0.5 ) ; const ans = ( Math . pow ( a , n ) - Math . pow ( b , n ) ) / r ; return parseInt ( ans ) ; } 
function findProb ( l , r ) { let countOfPs = Math . floor ( Math . sqrt ( r ) ) - Math . ceil ( Math . sqrt ( l ) ) + 1 ; let total = r - l + 1 ; let prob = countOfPs / total ; return prob ; } 
function previousFibonacci ( n ) { const a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return Math . round ( a ) ; } 
function distPrime ( arr , allPrimes ) { const list1 = [ ] ; for ( let i of allPrimes ) { for ( let j of arr ) { if ( j % i === 0 ) { list1 . push ( i ) ; break ; } } } return list1 ; } 
function getArray ( n ) { let ans = [ ] ; let p2 = 1 ; while ( n > 0 ) { if ( n % 2 === 1 ) { ans . push ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; } 
function maximumLength ( a ) { var counts = Array ( 11 ) . fill ( 0 ) ; var ans = 0 ; for ( var index = 0 ; index < a . length ; index ++ ) { counts [ a [ index ] ] ++ ; var k = [ ] ; for ( var i of counts ) { if ( i !== 0 ) { k . push ( i ) ; } } k . sort ( function ( a , b ) { return a - b ; } ) ; if ( k . length === 1 || ( k [ 0 ] === k [ k . length - 2 ] && k [ k . length - 1 ] - k [ k . length - 2 ] === 1 ) || ( k [ 0 ] === 1 && k [ 1 ] === k [ k . length - 1 ] ) ) { ans = index ; } } return ans + 1 ; } 
function maxEdges ( n ) { let edges = Math . floor ( n * n / 4 ) ; return parseInt ( edges ) ; } 
function findK ( n , k ) { let a = [ ] ; for ( let i = 1 ; i < n ; i ++ ) { if ( i % 2 === 1 ) { a . push ( i ) ; } } for ( let i = 1 ; i < n ; i ++ ) { if ( i % 2 === 0 ) { a . push ( i ) ; } } return a [ k - 1 ] ; } 
function isKeith ( x , temp ) { let terms = [ ] ; let n = 0 ; while ( temp > 0 ) { terms . push ( temp % 10 ) ; temp = Math . floor ( temp / 10 ) ; n ++ ; } terms . reverse ( ) ; let nextTerm = 0 , i = n ; while ( nextTerm < x ) { nextTerm = 0 ; for ( let j = 1 ; j <= n ; j ++ ) { nextTerm += terms [ i - j ] ; } terms . push ( nextTerm ) ; i ++ ; } return nextTerm === x ; } 
function factors ( n , k ) { let v = [ ] ; while ( n % 2 == 0 ) { v . push ( 2 ) ; n /= 2 ; } if ( v . length >= k ) { return true ; } for ( let i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n = n / i ; v . push ( i ) ; } if ( v . length >= k ) { return true ; } } if ( n > 2 ) { v . push ( n ) ; } if ( v . length >= k ) { return true ; } return false ; } 
