std :: vector < std :: string > separateParenGroups ( std :: string parenString ) { std :: vector < std :: string > allParens ; std :: string currentParen = "" ; int currentDepth = 0 ; for ( char c : parenString ) { if ( c == '(' ) { currentDepth += 1 ; currentParen += c ; } else if ( c == ')' ) { currentDepth -= 1 ; currentParen += c ; if ( currentDepth == 0 ) { allParens . push_back ( currentParen ) ; currentParen = "" ; } } } return allParens ; } 
vector < int > parseNestedParens ( string parenString ) { vector < int > allLevels ; int level = 0 ; int maxLevel = 0 ; for ( int i = 0 ; i < parenString . size ( ) ; i ++ ) { char chr = parenString [ i ] ; if ( chr == '(' ) { level += 1 ; if ( level > maxLevel ) { maxLevel = level ; } } if ( chr == ')' ) { level -= 1 ; if ( level == 0 ) { allLevels . push_back ( maxLevel ) ; maxLevel = 0 ; } } } return allLevels ; } 
vector < string > filterBySubstring ( vector < string > strings , string substring ) { vector < string > result ; for ( auto s : strings ) { if ( s . find ( substring ) != string :: npos ) { result . push_back ( s ) ; } } return result ; } 
vector < int > rollingMax ( vector < int > numbers ) { vector < int > result ; int runningMax = 0 ; for ( int n : numbers ) { if ( n > runningMax ) { runningMax = n ; } result . push_back ( runningMax ) ; } return result ; } 
string makePalindrome ( string s ) { if ( s . empty ( ) ) { return "" ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { string rStr = s . substr ( i ) ; if ( rStr == string ( rStr . rbegin ( ) , rStr . rend ( ) ) ) { string nStr = s . substr ( 0 , i ) ; string n2Str = string ( nStr . rbegin ( ) , nStr . rend ( ) ) ; return s + n2Str ; } } return s . substr ( 0 , s . length ( ) - 1 ) + string ( s . rbegin ( ) , s . rend ( ) ) ; } 
std :: string stringXor ( std :: string a , std :: string b ) { std :: string result = "" ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { if ( a [ i ] == b [ i ] ) { result += '0' ; } else { result += '1' ; } } return result ; } 
std :: string longest ( std :: vector < std :: string > strings ) { if ( strings . empty ( ) ) { return "" ; } int maxLen = std :: max_element ( strings . begin ( ) , strings . end ( ) , [ ] ( const std :: string & s1 , const std :: string & s2 ) { return s1 . size ( ) < s2 . size ( ) ; } ) -> size ( ) ; for ( std :: string s : strings ) { if ( s . length ( ) == maxLen ) { return s ; } } return "" ; } 
std :: string stringSequence ( int n ) { std :: stringstream s ; for ( int i = 0 ; i < n ; i ++ ) { s << i << " " ; } s << n ; return s . str ( ) ; } 
int countDistinctCharacters ( string s ) { unordered_set < char > distinct ; for ( char c : s ) { distinct . insert ( tolower ( c ) ) ; } return distinct . size ( ) ; } 
int howManyTimes ( string s , string sub ) { int times = 0 ; for ( int i = 0 ; i <= s . length ( ) - sub . length ( ) ; i ++ ) { if ( s . compare ( i , sub . length ( ) , sub ) == 0 ) { times += 1 ; } } return times ; } 
string sortNumbers ( string numbers ) { map < string , int > toNum = { { "zero" , 0 } , { "one" , 1 } , { "two" , 2 } , { "three" , 3 } , { "four" , 4 } , { "five" , 5 } , { "six" , 6 } , { "seven" , 7 } , { "eight" , 8 } , { "nine" , 9 } } ; map < int , string > fromNum = { { 0 , "zero" } , { 1 , "one" } , { 2 , "two" } , { 3 , "three" } , { 4 , "four" } , { 5 , "five" } , { 6 , "six" } , { 7 , "seven" } , { 8 , "eight" } , { 9 , "nine" } } ; vector < int > ints ; string current ; for ( int i = 0 ; i <= numbers . length ( ) ; i ++ ) { if ( i == numbers . length ( ) || numbers [ i ] == ' ' ) { if ( toNum . count ( current ) ) { ints . push_back ( toNum [ current ] ) ; current = "" ; } } else { current += numbers [ i ] ; } } sort ( ints . begin ( ) , ints . end ( ) ) ; string result ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { result += fromNum [ ints [ i ] ] ; if ( i != ints . size ( ) - 1 ) { result += " " ; } } return result ; } 
vector < double > findClosestElements ( vector < double > numbers ) { vector < double > closestPair { numbers [ 0 ] , numbers [ 1 ] } ; double distance = abs ( numbers [ 0 ] - numbers [ 1 ] ) ; for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < numbers . size ( ) ; j ++ ) { if ( abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closestPair [ 0 ] = numbers [ i ] ; closestPair [ 1 ] = numbers [ j ] ; distance = abs ( numbers [ i ] - numbers [ j ] ) ; } } } sort ( closestPair . begin ( ) , closestPair . end ( ) ) ; return closestPair ; } 
std :: vector < double > rescaleToUnit ( std :: vector < double > numbers ) { double minNum = * std :: min_element ( numbers . begin ( ) , numbers . end ( ) ) ; double maxNum = * std :: max_element ( numbers . begin ( ) , numbers . end ( ) ) ; std :: vector < double > result ; for ( double n : numbers ) { result . push_back ( ( n - minNum ) / ( maxNum - minNum ) ) ; } return result ; } 
vector < int > filterIntegers ( vector < object > values ) { vector < int > result ; for ( auto e : values ) { if ( typeid ( e ) == typeid ( int ) ) { result . push_back ( static_cast < int > ( e ) ) ; } } return result ; } 
vector < int > removeDuplicates ( vector < int > numbers ) { map < int , int > c ; for ( int i : numbers ) { c [ i ] = c [ i ] + 1 ; } vector < int > result ; for ( int i : numbers ) { if ( c [ i ] == 1 ) { result . push_back ( i ) ; } } return result ; } 
std :: string flipCase ( std :: string s ) { std :: string result ; for ( char c : s ) { if ( std :: islower ( c ) ) { result += std :: toupper ( c ) ; } else { result += std :: tolower ( c ) ; } } return result ; } 
vector < string > filterByPrefix ( vector < string > strings , string prefix ) { vector < string > result ; for ( int i = 0 ; i < strings . size ( ) ; i ++ ) { if ( strings [ i ] . compare ( 0 , prefix . length ( ) , prefix ) == 0 ) { result . push_back ( strings [ i ] ) ; } } return result ; } 
double findZero ( std :: vector < double > xs ) { double ans = 0 ; double value = 0 ; for ( int i = 0 ; i < xs . size ( ) ; i ++ ) { value += xs [ i ] * pow ( ans , i ) ; } while ( fabs ( value ) > 1e-6 ) { double driv = 0 ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) { driv += xs [ i ] * pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . size ( ) ; i ++ ) { value += xs [ i ] * pow ( ans , i ) ; } } return ans ; } 
vector < int > sortThird ( vector < int > l ) { vector < int > thirds ; for ( int i = 0 ; i < l . size ( ) ; i += 3 ) { thirds . push_back ( l [ i ] ) ; } sort ( thirds . begin ( ) , thirds . end ( ) ) ; vector < int > result ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 3 == 0 ) { result . push_back ( thirds [ i / 3 ] ) ; } else { result . push_back ( l [ i ] ) ; } } return result ; } 
std :: vector < int > unique ( std :: vector < int > l ) { std :: vector < int > result ( l . begin ( ) , l . end ( ) ) ; std :: sort ( result . begin ( ) , result . end ( ) ) ; result . erase ( std :: unique ( result . begin ( ) , result . end ( ) ) , result . end ( ) ) ; return result ; } 
double maxElement ( std :: vector < double > l ) { return * std :: max_element ( l . begin ( ) , l . end ( ) ) ; } 
bool triplesSumToZero ( vector < int > l ) { for ( int i = 0 ; i < l . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < l . size ( ) ; j ++ ) { for ( int k = j + 1 ; k < l . size ( ) ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) { return true ; } } } } return false ; } 
int fib4 ( int n ) { std :: vector < int > results = { 0 , 0 , 2 , 0 } ; for ( int i = 4 ; i <= n ; i ++ ) { results . push_back ( results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ) ; } return results [ n ] ; } 
bool isPalindrome ( string text ) { string pr = string ( text . rbegin ( ) , text . rend ( ) ) ; return ( pr == text ) ; } 
std :: string removeVowels ( std :: string text ) { std :: string result ; std :: string vowels = "aeiou" ; for ( char ch : text ) { if ( vowels . find ( std :: tolower ( ch ) ) == std :: string :: npos ) { result . push_back ( ch ) ; } } return result ; } 
bool sameChars ( string s0 , string s1 ) { unordered_set < char > set0 ; for ( char c : s0 ) { set0 . insert ( c ) ; } unordered_set < char > set1 ; for ( char c : s1 ) { set1 . insert ( c ) ; } return set0 == set1 ; } 
vector < int > common ( vector < int > l1 , vector < int > l2 ) { unordered_set < int > us ; for ( int e1 : l1 ) { for ( int e2 : l2 ) { if ( e1 == e2 ) { us . insert ( e1 ) ; } } } vector < int > ret ; for ( int i : us ) { ret . push_back ( i ) ; } sort ( ret . begin ( ) , ret . end ( ) ) ; return ret ; } 
bool correctBracketing ( string brackets ) { int depth = 0 ; for ( char b : brackets ) { if ( b == '(' ) { depth += 1 ; } if ( b == ')' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; } 
std :: string circularShift ( int x , int shift ) { std :: string xs = std :: to_string ( x ) ; if ( shift > xs . length ( ) ) { std :: reverse ( xs . begin ( ) , xs . end ( ) ) ; return xs ; } return xs . substr ( xs . length ( ) - shift ) + xs . substr ( 0 , xs . length ( ) - shift ) ; } 
int search ( vector < int > lst ) { map < int , int > counter ; for ( int i : lst ) { counter [ i ] = counter [ i ] + 1 ; } int ans = -1 ; for ( auto item : counter ) { if ( item . second >= item . first && item . first > ans ) { ans = item . first ; } } return ans ; } 
int smallestChange ( vector < int > arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . size ( ) / 2 ; i ++ ) { if ( arr . front ( ) != arr . back ( ) ) { ans += 1 ; } arr . pop_front ( ) ; arr . pop_back ( ) ; } return ans ; } 
template < typename T > vector < string > totalMatch ( vector < string > lst1 , vector < string > lst2 ) { int sum1 = 0 ; for ( auto st : lst1 ) { sum1 += st . length ( ) ; } int sum2 = 0 ; for ( auto st : lst2 ) { sum2 += st . length ( ) ; } return sum1 > sum2 ? lst2 : lst1 ; } 
bool isHappy ( string s ) { if ( s . length ( ) < 3 ) { return false ; } for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s [ i ] == s [ i + 1 ] || s [ i ] == s [ i + 2 ] || s [ i + 1 ] == s [ i + 2 ] ) { return false ; } } return true ; } 
vector < string > numericalLetterGrade ( vector < double > grades ) { vector < string > letterGrade ; for ( double gpa : grades ) { if ( gpa == 4.0 ) { letterGrade . push_back ( "A+" ) ; } else if ( gpa > 3.7 ) { letterGrade . push_back ( "A" ) ; } else if ( gpa > 3.3 ) { letterGrade . push_back ( "A-" ) ; } else if ( gpa > 3.0 ) { letterGrade . push_back ( "B+" ) ; } else if ( gpa > 2.7 ) { letterGrade . push_back ( "B" ) ; } else if ( gpa > 2.3 ) { letterGrade . push_back ( "B-" ) ; } else if ( gpa > 2.0 ) { letterGrade . push_back ( "C+" ) ; } else if ( gpa > 1.7 ) { letterGrade . push_back ( "C" ) ; } else if ( gpa > 1.3 ) { letterGrade . push_back ( "C-" ) ; } else if ( gpa > 1.0 ) { letterGrade . push_back ( "D+" ) ; } else if ( gpa > 0.7 ) { letterGrade . push_back ( "D" ) ; } else if ( gpa > 0.0 ) { letterGrade . push_back ( "D-" ) ; } else { letterGrade . push_back ( "E" ) ; } } return letterGrade ; } 
string solve ( int n ) { string biStr = "" ; int sum = 0 ; for ( char c : to_string ( n ) ) { sum += c - '0' ; } while ( sum > 0 ) { biStr . insert ( 0 , to_string ( sum % 2 ) ) ; sum /= 2 ; } return biStr ; } 
std :: string antiShuffle ( std :: string s ) { std :: stringstream ret ; std :: stringstream current ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s [ i ] == ' ' ) { std :: string tmp = current . str ( ) ; std :: sort ( tmp . begin ( ) , tmp . end ( ) ) ; if ( ! ret . str ( ) . empty ( ) ) { ret << ' ' ; } ret << tmp ; current . str ( std :: string ( ) ) ; } else { current << s [ i ] ; } } return ret . str ( ) ; } 
template < typename T > vector < T > sortArray ( vector < T > array ) { if ( array . empty ( ) ) { return array ; } if ( ( array . front ( ) + array . back ( ) ) % 2 == 1 ) { array . sort ( ) ; } else { array . sort ( greater < T > ( ) ) ; } return array ; } 
string encrypt ( string s ) { string ans = "" ; for ( char c : s ) { if ( isalpha ( c ) ) { ans . push_back ( 'a' + ( c - 'a' + 4 ) % 26 ) ; } else { ans . push_back ( c ) ; } } return ans ; } 
int isBored ( string s ) { bool isStart = true ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == '.' || s [ i ] == '?' || s [ i ] == '!' ) { isStart = true ; } else if ( isStart ) { if ( s [ i ] == ' ' ) { continue ; } if ( s . compare ( i , 2 , "I " ) == 0 ) { sum += 1 ; } isStart = false ; } } return sum ; } 
string encode ( string message ) { string vowels = "aeiouAEIOU" ; stringstream ret ; for ( char c : message ) { if ( isupper ( c ) ) { c = tolower ( c ) ; if ( vowels . find ( c ) != string :: npos ) { c = 'a' + ( c - 'a' + 2 ) % 26 ; } } else if ( islower ( c ) ) { c = toupper ( c ) ; if ( vowels . find ( c ) != string :: npos ) { c = 'A' + ( c - 'A' + 2 ) % 26 ; } } ret << c ; } return ret . str ( ) ; } 
int skjkasdkd ( vector < int > lst ) { int largest = 0 ; for ( int n : lst ) { if ( n > largest ) { bool prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } int sum = 0 ; string s = to_string ( largest ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum += s [ i ] - '0' ; } return sum ; } 
bool checkDictCase ( map < string , string > dict ) { if ( dict . empty ( ) ) { return false ; } int isLower = 0 ; int isUpper = 0 ; for ( auto const & key : dict ) { for ( char c : key . first ) { if ( islower ( c ) ) { isLower = 1 ; } else if ( isupper ( c ) ) { isUpper = 1 ; } else { return false ; } } } return ( isLower + isUpper == 1 ) ; } 
int multiply ( int a , int b ) { return ( abs ( a ) % 10 ) * ( abs ( b ) % 10 ) ; } 
int countUpper ( string s ) { string uVowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i += 2 ) { if ( uVowel . find ( s [ i ] ) != string :: npos ) { count += 1 ; } } return count ; } 
vector < string > byLength ( vector < int > arr ) { map < int , string > numTo = { { 1 , "One" } , { 2 , "Two" } , { 3 , "Three" } , { 4 , "Four" } , { 5 , "Five" } , { 6 , "Six" } , { 7 , "Seven" } , { 8 , "Eight" } , { 9 , "Nine" } } ; vector < int > sortedArr = arr ; sort ( sortedArr . begin ( ) , sortedArr . end ( ) , greater < int > ( ) ) ; vector < string > newArr ; for ( int n : sortedArr ) { if ( n >= 1 && n <= 9 ) { newArr . push_back ( numTo [ n ] ) ; } } return newArr ; } 
vector < int > f ( int n ) { int sum = 0 ; int prod = 1 ; vector < int > result ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) { result . push_back ( prod ) ; } else { result . push_back ( sum ) ; } } return result ; } 
vector < int > evenOddPalindrome ( int n ) { int evenCount = 0 , oddCount = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { string s = to_string ( i ) ; string rStr = s ; reverse ( rStr . begin ( ) , rStr . end ( ) ) ; if ( s == rStr ) { if ( i % 2 == 1 ) { oddCount += 1 ; } else { evenCount += 1 ; } } } return { evenCount , oddCount } ; } 
std :: map < char , int > histogram ( std :: string test ) { std :: map < char , int > count ; int max = 0 ; for ( int i = 0 ; i < test . length ( ) ; i ++ ) { if ( test [ i ] != ' ' ) { count [ test [ i ] ] = count . count ( test [ i ] ) ? count [ test [ i ] ] + 1 : 1 ; if ( count [ test [ i ] ] > max ) { max = count [ test [ i ] ] ; } } } std :: map < char , int > result ; for ( auto item : count ) { if ( item . second == max ) { result [ item . first ] = item . second ; } } return result ; } 
vector < string > reverseDelete ( string s , string c ) { string ret = "" ; for ( char ch : s ) { if ( c . find ( ch ) == string :: npos ) { ret += ch ; } } string flag = "False" ; if ( ret == string ( ret . rbegin ( ) , ret . rend ( ) ) ) { flag = "True" ; } vector < string > arr = { ret , flag } ; return arr ; } 
std :: vector < int > sortArray ( std :: vector < int > arr ) { std :: vector < int > bin ; for ( auto i : arr ) { int b = 0 ; int n = abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . push_back ( b ) ; } for ( auto i = arr . begin ( ) ; i != arr . end ( ) ; i ++ ) { for ( auto j = std :: next ( i ) ; j != arr . end ( ) ; j ++ ) { auto index_i = std :: distance ( arr . begin ( ) , i ) ; auto index_j = std :: distance ( arr . begin ( ) , j ) ; if ( bin [ index_j ] < bin [ index_i ] || ( bin [ index_j ] == bin [ index_i ] && arr [ index_j ] < arr [ index_i ] ) ) { std :: swap ( bin [ index_i ] , bin [ index_j ] ) ; std :: swap ( arr [ index_i ] , arr [ index_j ] ) ; } } } return arr ; } 
std :: string getClosestVowel ( std :: string word ) { std :: string vowels = "AEIOUaeiou" ; for ( int i = word . length ( ) - 2 ; i > 0 ; i -- ) { if ( vowels . find ( word [ i ] ) != std :: string :: npos && vowels . find ( word [ i + 1 ] ) == std :: string :: npos && vowels . find ( word [ i - 1 ] ) == std :: string :: npos ) { return std :: string ( 1 , word [ i ] ) ; } } return "" ; } 
std :: string matchParens ( std :: vector < std :: string > lst ) { std :: vector < std :: string > strings = { lst . front ( ) + * ( ++ lst . begin ( ) ) , * ( ++ lst . begin ( ) ) + lst . front ( ) } ; for ( auto l : strings ) { int count = 0 ; for ( char c : l ) { if ( c == '(' ) { count += 1 ; } else { count -= 1 ; } if ( count < 0 ) { break ; } } if ( count == 0 ) { return "Yes" ; } } return "No" ; } 
vector < int > maximum ( vector < int > arr , int k ) { if ( k == 0 ) { return { } ; } sort ( arr . begin ( ) , arr . end ( ) ) ; return vector < int > ( arr . end ( ) - k , arr . end ( ) ) ; } 
bool validDate ( string date ) { if ( date . length ( ) != 10 ) { return false ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 || i == 5 ) { if ( date [ i ] != '-' ) { return false ; } } else if ( ! isdigit ( date [ i ] ) ) { return false ; } } int month = stoi ( date . substr ( 0 , 2 ) ) ; int day = stoi ( date . substr ( 3 , 2 ) ) ; int year = stoi ( date . substr ( 6 , 4 ) ) ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) { return false ; } if ( day == 30 && month == 2 ) { return false ; } return true ; } 
vector < string > splitWords ( string txt ) { stringstream current ; vector < string > result ; if ( txt . find ( ' ' ) != -1 ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt [ i ] == ' ' ) { if ( current . str ( ) . length ( ) > 0 ) { result . push_back ( current . str ( ) ) ; } current . str ( "" ) ; } else { current << txt [ i ] ; } } return result ; } if ( txt . find ( ',' ) != -1 ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt [ i ] == ',' ) { if ( current . str ( ) . length ( ) > 0 ) { result . push_back ( current . str ( ) ) ; } current . str ( "" ) ; } else { current << txt [ i ] ; } } return result ; } int num = 0 ; for ( char c : txt ) { if ( islower ( c ) && c % 2 == 0 ) { num += 1 ; } } return { to_string ( num ) } ; } 
vector < int > tri ( int n ) { if ( n == 0 ) { return { 1 } ; } vector < int > tris { 1 , 3 } ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { tris . push_back ( i / 2 + 1 ) ; } else { tris . push_back ( tris [ i - 1 ] + tris [ i - 2 ] + ( i + 3 ) / 2 ) ; } } return tris ; } 
bool checkIfLastCharIsALetter ( string txt ) { if ( txt . empty ( ) ) { return false ; } return isalpha ( txt [ txt . length ( ) - 1 ] ) && ( txt . length ( ) == 1 || ! isalpha ( txt [ txt . length ( ) - 2 ] ) ) ; } 
vector < int > orderByPoints ( vector < int > nums ) { vector < int > result ( nums . size ( ) ) ; for ( int i = 0 ; i < nums . size ( ) ; i ++ ) { int num = nums [ i ] ; string w = to_string ( abs ( num ) ) ; int sum = 0 ; for ( char c : w ) { sum += c - '0' ; } if ( num < 0 ) { sum -= 2 * ( w [ 0 ] - '0' ) ; } result [ i ] = sum ; } for ( int i = 0 ; i < nums . size ( ) ; i ++ ) { for ( int j = 1 ; j < nums . size ( ) ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { swap ( result [ j - 1 ] , result [ j ] ) ; swap ( nums [ j - 1 ] , nums [ j ] ) ; } } } return nums ; } 
vector < string > bf ( string planet1 , string planet2 ) { vector < string > planets = { "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" } ; int idx1 = find ( planets . begin ( ) , planets . end ( ) , planet1 ) - planets . begin ( ) ; int idx2 = find ( planets . begin ( ) , planets . end ( ) , planet2 ) - planets . begin ( ) ; if ( idx1 == ( int ) planets . size ( ) || idx2 == ( int ) planets . size ( ) || idx1 == idx2 ) { return vector < string > ( ) ; } return idx1 > idx2 ? vector < string > ( planets . begin ( ) + idx2 + 1 , planets . begin ( ) + idx1 ) : vector < string > ( planets . begin ( ) + idx1 + 1 , planets . begin ( ) + idx2 ) ; } 
vector < string > sortedvectorSum ( vector < string > lst ) { vector < string > result ; for ( auto i : lst ) { if ( i . length ( ) % 2 == 0 ) { result . push_back ( i ) ; } } sort ( result . begin ( ) , result . end ( ) , [ ] ( string l , string r ) -> bool { if ( l . length ( ) == r . length ( ) ) { return l . compare ( r ) < 0 ; } return l . length ( ) < r . length ( ) ; } ) ; return result ; } 
bool cycpatternCheck ( string a , string b ) { for ( int i = 0 ; i <= b . length ( ) ; i ++ ) { string rotate = b . substr ( i ) + b . substr ( 0 , i ) ; if ( a . find ( rotate ) != string :: npos ) { return true ; } } return false ; } 
vector < int > evenOddCount ( int num ) { int evenCount = 0 , oddCount = 0 ; string num_str = to_string ( abs ( num ) ) ; for ( char i : num_str ) { if ( i % 2 == 0 ) { evenCount ++ ; } else { oddCount ++ ; } } vector < int > result ; result . push_back ( evenCount ) ; result . push_back ( oddCount ) ; return result ; } 
std :: string findMax ( std :: vector < std :: string > words ) { std :: string max = "" ; int maxLength = 0 ; for ( auto word : words ) { std :: vector < char > unique ; for ( char w : word ) { if ( std :: find ( unique . begin ( ) , unique . end ( ) , w ) == unique . end ( ) ) { unique . push_back ( w ) ; } } if ( unique . size ( ) > maxLength || ( unique . size ( ) == maxLength && word . compare ( max ) < 0 ) ) { max = word ; maxLength = unique . size ( ) ; } } return max ; } 
string solve ( string s ) { bool noLetter = true ; string result = "" ; for ( char ch : s ) { if ( isupper ( ch ) ) { ch = tolower ( ch ) ; noLetter = false ; } else if ( islower ( ch ) ) { ch = toupper ( ch ) ; noLetter = false ; } result += ch ; } if ( noLetter ) { reverse ( result . begin ( ) , result . end ( ) ) ; return result ; } else { return result ; } } 
int mostFrequent ( vector < int > arr , int n ) { map < int , int > hp ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . count ( arr [ i ] ) ) { hp [ arr [ i ] ] ++ ; } else { hp [ arr [ i ] ] = 1 ; } } int maxCount = 0 , res = -1 ; for ( auto entry : hp ) { if ( maxCount < entry . second ) { res = entry . first ; maxCount = entry . second ; } } return res ; } 
int find ( vector < int > a , vector < int > b , int k , int n1 , int n2 ) { set < int > s ; for ( int i = 0 ; i < n2 ; i ++ ) { s . insert ( b . front ( ) ) ; b . pop_front ( ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( s . find ( a . front ( ) ) == s . end ( ) ) { missing ++ ; } if ( missing == k ) { return a . front ( ) ; } a . pop_front ( ) ; } return -1 ; } 
int solveQuery ( int start , int end , vector < int > arr ) { unordered_map < int , int > mp ; for ( int i = start ; i <= end ; i ++ ) { mp [ arr . front ( ) ] = mp . find ( arr . front ( ) ) == mp . end ( ) ? 1 : mp [ arr . front ( ) ] + 1 ; arr . pop_front ( ) ; } int count = 0 ; for ( auto entry : mp ) { if ( entry . first == entry . second ) { count ++ ; } } return count ; } 
int segregate ( vector < int > arr , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr . front ( ) <= 0 ) { swap ( arr . front ( ) , arr [ j ] ) ; j ++ ; } arr . pop_front ( ) ; } return j ; } 
int countTriplets ( std :: vector < int > a , int n ) { std :: set < int > s ; for ( int i = 0 ; i < n ; i ++ ) { s . insert ( a . front ( ) ) ; a . pop_front ( ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int temp1 = a . front ( ) ; a . pop_front ( ) ; for ( int j = i + 1 ; j < n ; j ++ ) { int temp2 = a . front ( ) ; a . pop_front ( ) ; int xr = temp1 ^ temp2 ; if ( s . count ( xr ) && xr != temp1 && xr != temp2 ) { count ++ ; } a . push_back ( temp2 ) ; } a . push_front ( temp1 ) ; } return count / 3 ; } 
int leastFrequent ( vector < int > arr , int n ) { map < int , int > hp ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . count ( arr [ i ] ) > 0 ) { hp [ arr [ i ] ] ++ ; } else { hp [ arr [ i ] ] = 1 ; } } int minCount = n + 1 , res = -1 ; for ( auto entry : hp ) { if ( minCount >= entry . second ) { res = entry . first ; minCount = entry . second ; } } return res ; } 
int findPermutations ( vector < int > arr ) { int cnt = 0 ; int maxInd = -1 , minInd = 10000000 ; int n = arr . size ( ) ; map < int , int > indexOf ; vector < int > :: iterator it = arr . begin ( ) ; for ( int i = 0 ; i < n ; i ++ ) { auto temp = * ( it ++ ) ; indexOf [ temp ] = i + 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { maxInd = max ( maxInd , indexOf . find ( i ) != indexOf . end ( ) ? indexOf [ i ] : 0 ) ; minInd = min ( minInd , indexOf . find ( i ) != indexOf . end ( ) ? indexOf [ i ] : 0 ) ; if ( maxInd - minInd + 1 == i ) { cnt ++ ; } } return cnt ; } 
int formQuadruplets ( vector < int > arr , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; arr . sort ( greater < int > ( ) ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr . front ( ) ; arr . pop_front ( ) ; arr . pop_front ( ) ; arr . pop_front ( ) ; } return ans ; } 
std :: string lexicographicallyMaximum ( std :: string s , int n ) { std :: map < char , int > m ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . count ( s [ i ] ) ) { m [ s [ i ] ] ++ ; } else { m [ s [ i ] ] = 1 ; } } std :: vector < char > v ; for ( char i = 'a' ; i < 'a' + std :: min ( n , 25 ) ; ++ i ) { if ( m . find ( i ) == m . end ( ) ) { v . push_back ( i ) ; } } int j = v . size ( ) - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( s [ i ] >= 'a' + std :: min ( n , 25 ) || ( m . count ( s [ i ] ) && m [ s [ i ] ] > 1 ) ) { if ( v [ j ] < s [ i ] ) { continue ; } m [ s [ i ] ] -- ; s = s . substr ( 0 , i ) + v [ j ] + s . substr ( i + 1 ) ; j -- ; } if ( j < 0 ) { break ; } } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) { break ; } if ( s [ i ] >= 'a' + std :: min ( n , 25 ) || ( m . count ( s [ i ] ) && m [ s [ i ] ] > 1 ) ) { m [ s [ i ] ] -- ; s = s . substr ( 0 , i ) + v [ l ] + s . substr ( i + 1 ) ; l ++ ; } } return s ; } 
int noOfValidKbers ( int k , std :: vector < int > arr ) { std :: set < int > s ; while ( k != 0 ) { s . insert ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { int no = arr . front ( ) ; arr . pop_front ( ) ; bool flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( s . find ( digit ) == s . end ( ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag ) { count ++ ; } } return count ; } 
int delCost ( string s , vector < int > cost ) { int ans = 0 ; map < char , int > forMax ; map < char , int > forTot ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( forMax . find ( s [ i ] ) == forMax . end ( ) ) { forMax [ s [ i ] ] = cost [ i ] ; } else { forMax [ s [ i ] ] = max ( cost [ i ] , forMax [ s [ i ] ] ) ; } if ( forTot . find ( s [ i ] ) == forTot . end ( ) ) { forTot [ s [ i ] ] = cost [ i ] ; } else { forTot [ s [ i ] ] += cost [ i ] ; } } for ( auto i : forMax ) { ans += forTot [ i . first ] - i . second ; } return ans ; } 
vector < string > replaceDuplicates ( vector < string > names ) { map < string , int > hash ; for ( int i = 0 ; i < names . size ( ) ; i ++ ) { if ( hash . find ( names [ i ] ) == hash . end ( ) ) { hash [ names [ i ] ] = 1 ; } else { int count = hash [ names [ i ] ] ; hash [ names [ i ] ] ++ ; names [ i ] += to_string ( count ) ; } } return names ; } 
vector < int > minmaxNumbers ( vector < vector < int > > matrix , vector < int > res ) { unordered_set < int > set ; for ( int i = 0 ; i < matrix . size ( ) ; i ++ ) { int minR = INT_MAX ; for ( int j = 0 ; j < matrix [ i ] . size ( ) ; j ++ ) { minR = min ( minR , matrix [ i ] [ j ] ) ; } set . insert ( minR ) ; } for ( int j = 0 ; j < matrix [ 0 ] . size ( ) ; j ++ ) { int maxC = INT_MIN ; for ( int i = 0 ; i < matrix . size ( ) ; i ++ ) { maxC = max ( maxC , matrix [ i ] [ j ] ) ; } if ( set . count ( maxC ) ) { res . push_back ( maxC ) ; } } return res ; } 
int lengthOfLongestAP ( vector < int > a , int n ) { unordered_map < int , unordered_map < int , int > > dp ; int res = 2 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int d = a [ j ] - a [ i ] ; if ( dp . count ( d ) ) { if ( dp [ d ] . count ( i ) ) { dp [ d ] [ j ] = dp [ d ] [ i ] + 1 ; } else { dp [ d ] [ j ] = 2 ; } } else { dp [ d ] = unordered_map < int , int > ( ) ; dp [ d ] [ j ] = 2 ; } res = max ( res , dp [ d ] [ j ] ) ; } } return res ; } 
char findKthChar ( int n , int k ) { string prev = "A" ; string cur = "" ; if ( n == 1 ) { return 'A' ; } for ( int j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . length ( ) ; i ++ ) { if ( prev [ i ] == 'A' ) { prev [ i ] = 'B' ; } else { prev [ i ] = 'A' ; } } reverse ( prev . begin ( ) , prev . end ( ) ) ; cur += prev ; prev = cur ; } return cur [ k - 1 ] ; } 
char FindKthLargest ( string s , int k ) { vector < char > tmp ; for ( char c : s ) { tmp . push_back ( c ) ; } sort ( tmp . begin ( ) , tmp . end ( ) ) ; reverse ( tmp . begin ( ) , tmp . end ( ) ) ; return tmp . at ( k - 1 ) ; } 
int subArraylen ( vector < int > arr , int n , int k ) { unordered_map < int , int > mp ; mp [ arr [ 0 ] ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] += arr [ i - 1 ] ; mp [ arr [ i ] ] = i ; } int len = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) { continue ; } else { int x = arr [ i ] - k ; if ( x == 0 ) { len = min ( len , i ) ; } if ( mp . find ( x ) == mp . end ( ) ) { continue ; } else { len = min ( len , i - mp [ x ] ) ; } } } return len ; } 
int findMaxLen ( vector < int > a , int k ) { int n = a . size ( ) ; sort ( a . begin ( ) , a . end ( ) ) ; vector < bool > vis ( n , false ) ; unordered_map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) { mp [ a [ i ] ] = i ; } int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( ! vis [ i ] ) { int check = a [ i ] * k ; if ( mp . count ( check ) ) { c ++ ; vis [ mp [ check ] ] = true ; } } } return n - c ; } 
vector < int > minDistancePoints ( vector < int > a , int k , int n ) { unordered_map < int , int > m ; queue < int > q ; for ( int i = 0 ; i < n ; ++ i ) { m [ a [ i ] ] = 1 ; q . push ( a [ i ] ) ; } vector < int > ans ; while ( k > 0 ) { int x = q . front ( ) ; q . pop ( ) ; if ( ! m . count ( x - 1 ) && k > 0 ) { m [ x - 1 ] = 1 ; q . push ( x - 1 ) ; ans . push_back ( x - 1 ) ; k -- ; } if ( ! m . count ( x + 1 ) && k > 0 ) { m [ x + 1 ] = 1 ; q . push ( x + 1 ) ; ans . push_back ( x + 1 ) ; k -- ; } } return ans ; } 
bool isValidLen ( string s , int len , int k ) { int n = s . length ( ) ; unordered_map < char , int > mp ; int right = 0 ; while ( right < len ) { if ( mp . count ( s [ right ] ) ) { mp [ s [ right ] ] ++ ; } else { mp [ s [ right ] ] = 1 ; } right ++ ; } if ( mp . size ( ) <= k ) { return true ; } while ( right < n ) { if ( mp . count ( s [ right ] ) ) { mp [ s [ right ] ] ++ ; } else { mp [ s [ right ] ] = 1 ; } if ( mp . count ( s [ right - len ] ) ) { mp [ s [ right - len ] ] -- ; } if ( mp [ s [ right - len ] ] == 0 ) { mp . erase ( s [ right - len ] ) ; } if ( mp . size ( ) <= k ) { return true ; } right ++ ; } return mp . size ( ) <= k ; } 
int partition ( vector < int > arr , int low , int high ) { int pivot = arr . back ( ) ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr . front ( ) <= pivot ) { i ++ ; swap ( arr . front ( ) , arr [ i ] ) ; } } swap ( arr [ i + 1 ] , arr . back ( ) ) ; return i + 1 ; } 
int strScore ( vector < string > strs , string s , int n ) { unordered_map < string , int > m ; for ( int i = 0 ; i < n ; i ++ ) { m [ strs [ i ] ] = i + 1 ; } if ( m . find ( s ) == m . end ( ) ) { return 0 ; } int score = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { score += s [ i ] - 'a' + 1 ; } score = score * m [ s ] ; return score ; } 
std :: vector < int > countEle ( std :: vector < int > s , std :: vector < int > a , int n ) { std :: unordered_map < int , bool > mp ; std :: vector < int > ans ; for ( int i = 0 ; i < n ; ++ i ) { int num = a [ i ] ; if ( mp . count ( num ) ) { ans . push_back ( 0 ) ; } else { int cnt = 0 ; while ( s [ 0 ] != num ) { mp [ s [ 0 ] ] = true ; s . erase ( s . begin ( ) ) ; cnt ++ ; } s . erase ( s . begin ( ) ) ; cnt ++ ; ans . push_back ( cnt ) ; } } return ans ; } 
int maxDistinctChar ( string s , int n , int k ) { unordered_map < char , int > freq ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . find ( s [ i ] ) != freq . end ( ) ) { freq [ s [ i ] ] ++ ; } else { freq [ s [ i ] ] = 1 ; } } vector < int > v ; for ( auto it : freq ) { v . push_back ( it . second ) ; } sort ( v . begin ( ) , v . end ( ) ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = min ( v [ i ] - 1 , k ) ; v [ i ] -= mn ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = min ( v [ i ] , k ) ; v [ i ] -= mn ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v [ i ] == 1 ) { res ++ ; } } return res ; } 
int findKth ( std :: vector < int > arr , int n , int k ) { std :: unordered_set < int > missing ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . insert ( arr . front ( ) ) ; arr . pop_front ( ) ; } int maxM = * std :: max_element ( arr . begin ( ) , arr . end ( ) ) ; int minM = * std :: min_element ( arr . begin ( ) , arr . end ( ) ) ; for ( int i = minM + 1 ; i < maxM ; i ++ ) { if ( missing . find ( i ) == missing . end ( ) ) { count ++ ; } if ( count == k ) { return i ; } } return -1 ; } 
bool almostSort ( vector < int > a , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a . front ( ) > a . next ( ) ) { swap ( * n , * ( n + 1 ) ) ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a . front ( ) > a . next ( ) ) { return false ; } } return true ; } 
int maximumSum ( string s , int n , int k ) { int sum = 0 ; vector < int > freq ( 256 , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ s [ i ] ] ++ ; } sort ( freq . rbegin ( ) , freq . rend ( ) ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; } 
int findMinOperations ( vector < int > arr , int N , int K ) { int operations = 0 ; for ( int i = 0 ; i < K ; i ++ ) { unordered_map < int , int > freq ; for ( int j = i ; j < N ; j += K ) { freq [ arr [ j ] ] ++ ; } int max1 = 0 , num = 0 ; for ( auto entry : freq ) { if ( entry . second > max1 ) { max1 = entry . second ; num = entry . first ; } } for ( auto entry : freq ) { if ( entry . first != num ) { operations += entry . second ; } } } return operations ; } 
vector < string > subString ( string s , int n ) { vector < string > v ; for ( int i = 0 ; i < n ; i ++ ) { for ( int len = 1 ; len <= n - i ; len ++ ) { string find = s . substr ( i , len ) ; v . push_back ( find ) ; } } return v ; } 
bool checkUniqueFrequency ( vector < int > arr , int n ) { map < int , int > freq ; for ( int i = 0 ; i < n ; i ++ ) { freq [ arr . front ( ) ] = freq [ arr . front ( ) ] + 1 ; arr . pop_front ( ) ; } set < int > uniqueFreq ; for ( auto entry : freq ) { if ( uniqueFreq . count ( entry . second ) ) { return false ; } else { uniqueFreq . insert ( entry . second ) ; } } return true ; } 
int minCost ( string str1 , string str2 , int n ) { int cost = 0 ; char * tmp = & str1 [ 0 ] ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 . at ( i ) ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 . at ( i + 1 ) ) { char c = tmp [ i ] ; tmp [ i ] = tmp [ i + 1 ] ; tmp [ i + 1 ] = c ; cost ++ ; } else { cost ++ ; } } } return cost ; } 
bool isValidNum ( string x ) { unordered_map < int , int > mp ; int n = x . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . count ( x [ i ] - '0' ) ) { return false ; } else if ( x [ i ] - '0' > 5 ) { return false ; } else { mp [ x [ i ] - '0' ] = 1 ; } } return true ; } 
int minimizeDiff ( vector < int > arr , int n , int k ) { int max = * max_element ( arr . begin ( ) , arr . end ( ) ) ; int min = * min_element ( arr . begin ( ) , arr . end ( ) ) ; if ( max - min <= k ) { return max - min ; } int avg = ( max + min ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = * max_element ( arr . begin ( ) , arr . end ( ) ) ; min = * min_element ( arr . begin ( ) , arr . end ( ) ) ; return max - min ; } 
int getMinCost ( vector < int > arr , int n ) { int minEle = * min_element ( arr . begin ( ) , arr . end ( ) ) ; return minEle * ( n - 1 ) ; } 
bool possibility ( map < int , int > m , int length , string s ) { int countOdd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( m [ s [ i ] - '0' ] & 1 ) != 0 ) { countOdd ++ ; } if ( countOdd > 1 ) { return false ; } } return true ; } 
int minimumCostOfBreaking ( vector < int > x , vector < int > y , int m , int n ) { int res = 0 ; sort ( x . begin ( ) , x . end ( ) , greater < int > ( ) ) ; sort ( y . begin ( ) , y . end ( ) , greater < int > ( ) ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += x [ i ++ ] ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y [ j ++ ] ; } res += total * hzntl ; return res ; } 
int findMaximumScore ( vector < int > a , int n ) { unordered_map < int , int > freq ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . count ( a [ i ] ) ) { freq [ a [ i ] ] ++ ; } else { freq [ a [ i ] ] = 1 ; } } vector < int > dp ( * max_element ( a . begin ( ) , a . end ( ) ) + 1 ) ; dp [ 0 ] = 0 ; dp [ 1 ] = freq . count ( 1 ) ? freq [ 1 ] : 0 ; for ( int i = 2 ; i < dp . size ( ) ; i ++ ) { dp [ i ] = max ( dp [ i - 1 ] , dp [ i - 2 ] + ( freq . count ( i ) ? freq [ i ] * i : 0 ) ) ; } return dp . back ( ) ; } 
int countWays ( string s , string t , int k , int mod ) { int n = s . length ( ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { string p = s . substr ( i , n - i ) + s . substr ( 0 , i ) ; if ( p == t ) { a ++ ; } else { b ++ ; } } int dp1 [ k + 1 ] ; int dp2 [ k + 1 ] ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * b ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; } return dp1 [ k ] ; } 
int findSubarraySum ( vector < int > arr , int n , int k ) { map < int , int > prevSum ; int res = 0 ; int currSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { currSum += arr [ i ] ; if ( currSum == k ) { res ++ ; } if ( prevSum . count ( currSum - k ) ) { res += prevSum [ currSum - k ] ; } prevSum [ currSum ] = prevSum [ currSum ] + 1 ; } return res ; } 
int maximumOccurrence ( string s ) { int n = s . length ( ) ; map < string , int > freq ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { string temp = "" ; temp += s [ i ] ; freq [ temp ] = freq [ temp ] + 1 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { string temp = "" ; temp += s [ i ] ; temp += s [ j ] ; freq [ temp ] = freq [ temp ] + 1 ; } } int answer = INT_MIN ; for ( auto entry : freq ) { answer = max ( answer , entry . second ) ; } return answer ; } 
int countCharacters ( std :: vector < std :: string > strings , std :: string chars ) { int res = 0 ; std :: unordered_map < char , int > freq ; for ( int i = 0 ; i < chars . length ( ) ; i ++ ) { freq [ chars [ i ] ] = freq [ chars [ i ] ] + 1 ; } for ( std :: string st : strings ) { bool flag = true ; for ( char c : st ) { if ( freq . find ( c ) == freq . end ( ) ) { flag = false ; break ; } } if ( flag ) { res += st . length ( ) ; } } return res ; } 
int distinctSubstring ( string p , string q , int k , int n ) { unordered_set < string > ss ; for ( int i = 0 ; i < n ; ++ i ) { int sum = 0 ; string s = "" ; for ( int j = i ; j < n ; ++ j ) { int pos = p [ j ] - 'a' ; sum += q [ pos ] - '0' ; s += p [ j ] ; if ( sum <= k ) { ss . insert ( s ) ; } else { break ; } } } return ss . size ( ) ; } 
int uniqueMorseRep ( vector < string > arr ) { vector < string > morseCode = { ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , "...." , ".." , ".---" , "-.-" , ".-.." , "--" , "-." , "---" , ".--." , "--.-" , ".-." , "..." , "-" , "..-" , "...-" , ".--" , "-..-" , "-.--" , "--.." } ; unordered_set < string > st ; int n = arr . size ( ) ; for ( int i = 0 ; i < n ; i ++ ) { string temp = "" ; int m = arr [ i ] . length ( ) ; for ( int j = 0 ; j < m ; j ++ ) { temp += morseCode [ arr [ i ] [ j ] - 'a' ] ; } st . insert ( temp ) ; } return st . size ( ) ; } 
int countSubstrings ( string st , int k ) { int n = st . length ( ) ; int answer = 0 ; unordered_map < char , int > mp ; for ( int i = 0 ; i < k ; i ++ ) { if ( mp . find ( st [ i ] ) == mp . end ( ) ) { mp [ st [ i ] ] = 1 ; } else { mp [ st [ i ] ] ++ ; } } if ( mp . size ( ) == k ) { answer ++ ; } for ( int i = k ; i < n ; i ++ ) { if ( mp . find ( st [ i ] ) == mp . end ( ) ) { mp [ st [ i ] ] = 1 ; } else { mp [ st [ i ] ] ++ ; } mp [ st [ i - k ] ] -- ; if ( mp [ st [ i - k ] ] == 0 ) { mp . erase ( st [ i - k ] ) ; } if ( mp . size ( ) == k ) { answer ++ ; } } return answer ; } 
bool canConstruct ( string s , int k ) { unordered_map < char , int > m ; int p = 0 ; if ( s . length ( ) == k ) { return true ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { m [ s [ i ] ] = m [ s [ i ] ] + 1 ; } if ( k > s . length ( ) ) { return false ; } else { for ( auto h : m ) { if ( h . second % 2 != 0 ) { p = p + 1 ; } } } if ( k < p ) { return false ; } return true ; } 
bool equalIgnoreCase ( string str1 , string str2 ) { transform ( str1 . begin ( ) , str1 . end ( ) , str1 . begin ( ) , :: toupper ) ; transform ( str2 . begin ( ) , str2 . end ( ) , str2 . begin ( ) , :: toupper ) ; return str1 == str2 ; } 
int findLongestSub ( string bin ) { int n = bin . length ( ) , i ; int sum = 0 ; unordered_map < int , int > prevSum ; int maxLen = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin [ i ] == '1' ) { sum ++ ; } else { sum -- ; } if ( sum > 0 ) { maxLen = i + 1 ; } else if ( sum <= 0 ) { if ( prevSum . count ( sum - 1 ) ) { int currLen = i - prevSum [ sum - 1 ] ; maxLen = max ( maxLen , currLen ) ; } } if ( ! prevSum . count ( sum ) ) { prevSum [ sum ] = i ; } } return maxLen ; } 
bool hasAllCodes ( string s , int k ) { set < string > us ; for ( int i = 0 ; i + k <= s . length ( ) ; i ++ ) { us . insert ( s . substr ( i , k ) ) ; } return us . size ( ) == ( 1 << k ) ; } 
bool checkPalin ( string word ) { int n = word . length ( ) ; transform ( word . begin ( ) , word . end ( ) , word . begin ( ) , :: tolower ) ; for ( int i = 0 ; i < n ; i ++ , n -- ) { if ( word [ i ] != word [ n - 1 ] ) { return false ; } } return true ; } 
string convert ( string st ) { string w = "" , z = "" ; st = toupper ( st ) + " " ; for ( int i = 0 ; i < st . length ( ) ; i ++ ) { char ch = st [ i ] ; if ( ch != ' ' ) { w += ch ; } else { z += tolower ( w [ 0 ] ) + w . substr ( 1 ) + " " ; w = "" ; } } return z ; } 
int maxLines ( int n , std :: vector < int > x1 , std :: vector < int > y1 , std :: vector < int > x2 , std :: vector < int > y2 ) { std :: set < double > s ; double slope ; for ( int i = 0 ; i < n ; ++ i ) { if ( x1 [ i ] == x2 [ i ] ) { slope = std :: numeric_limits < int > :: max ( ) ; } else { slope = static_cast < double > ( y2 [ i ] - y1 [ i ] ) / static_cast < double > ( x2 [ i ] - x1 [ i ] ) ; } s . insert ( slope ) ; } return s . size ( ) ; } 
unordered_map < int , int > PrimeFactor ( int n ) { unordered_map < int , int > primef ; while ( n % 2 == 0 ) { if ( primef . find ( 2 ) != primef . end ( ) ) { primef [ 2 ] = primef [ 2 ] + 1 ; } else { primef [ 2 ] = 1 ; } n /= 2 ; } for ( int i = 3 ; i <= sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { if ( primef . find ( i ) != primef . end ( ) ) { primef [ i ] = primef [ i ] + 1 ; } else { primef [ i ] = 1 ; } n /= i ; } } if ( n > 2 ) { primef [ n ] = 1 ; } return primef ; } 
string isDivisibleByDivisor ( int s , int d ) { s %= d ; unordered_set < int > hashMap ; hashMap . insert ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hashMap . count ( s ) ) { if ( s == 0 ) { return "Yes" ; } return "No" ; } else { hashMap . insert ( s ) ; } } return "Yes" ; } 
bool oddSum ( vector < int > a , int n , int k ) { unordered_set < int > odd ; unordered_set < int > even ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { even . insert ( a [ i ] ) ; } else { odd . insert ( a [ i ] ) ; } } if ( odd . size ( ) >= k ) { return true ; } bool flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= even . size ( ) ) { return true ; } } return flag ; } 
int dayOfYear ( string date ) { vector < int > days = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int year = stoi ( date . substr ( 0 , 4 ) ) ; int month = stoi ( date . substr ( 5 , 2 ) ) ; int day = stoi ( date . substr ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days [ month - 2 ] ; -- month ; } return day ; } 
bool isPerfectSquare ( vector < int > arr , int n ) { unordered_map < int , int > umap ; for ( int i = 0 ; i < n ; i ++ ) { umap [ arr [ i ] ] = umap [ arr [ i ] ] + 1 ; } for ( auto itr : umap ) { if ( itr . second % 2 == 1 ) { return false ; } } return true ; } 
int minMoves ( int n ) { string s = to_string ( n ) ; int ans = INT_MAX ; int length = s . length ( ) ; for ( int i = 0 ; i < length ; ++ i ) { for ( int j = 0 ; j < length ; ++ j ) { if ( i == j ) { continue ; } char t [ length + 1 ] ; strcpy ( t , s . c_str ( ) ) ; int cur = 0 ; for ( int k = i ; k < length - 1 ; ++ k ) { char c = t [ k ] ; t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = c ; ++ cur ; } for ( int k = j - ( j > i ? 1 : 0 ) ; k < length - 2 ; ++ k ) { char c = t [ k ] ; t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = c ; ++ cur ; } int pos = -1 ; for ( int k = 0 ; k < length ; ++ k ) { if ( t [ k ] != '0' ) { pos = k ; break ; } } for ( int k = pos ; k > 0 ; -- k ) { char c = t [ k ] ; t [ k ] = t [ k - 1 ] ; t [ k - 1 ] = c ; ++ cur ; } int nn = atoi ( t ) ; if ( nn % 25 == 0 ) { ans = min ( ans , cur ) ; } } } if ( ans == INT_MAX ) { return -1 ; } return ans ; } 
int minimumOperations ( vector < int > a , int n ) { unordered_map < int , int > mp ; for ( auto it = a . begin ( ) ; it != a . end ( ) ; it ++ ) { mp [ * it ] = mp [ * it ] + 1 ; } int count = 0 ; for ( auto & entry : mp ) { if ( entry . second > 1 ) { count += entry . second - 1 ; } } return count ; } 
int kaprekarRec ( int n , int prev ) { if ( n == 0 ) { return 0 ; } prev = n ; int digits [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } std :: sort ( digits , digits + 4 ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } std :: sort ( digits , digits + 4 ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } int diff = abs ( asc - desc ) ; if ( diff == prev ) { return diff ; } return kaprekarRec ( diff , prev ) ; } 
std :: string fractionToDecimal ( int numr , int denr ) { std :: string res = "" ; std :: unordered_map < int , int > mp ; int rem = numr % denr ; while ( rem != 0 && mp . find ( rem ) == mp . end ( ) ) { mp [ rem ] = res . length ( ) ; rem = rem * 10 ; int resPart = rem / denr ; res += std :: to_string ( resPart ) ; rem = rem % denr ; } if ( rem == 0 ) { return "" ; } if ( mp . find ( rem ) != mp . end ( ) ) { return res . substr ( mp [ rem ] ) ; } return "" ; } 
bool isFancy ( string num ) { map < char , char > fp ; fp [ '0' ] = '0' ; fp [ '1' ] = '1' ; fp [ '6' ] = '9' ; fp [ '8' ] = '8' ; fp [ '9' ] = '6' ; int n = num . length ( ) ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( fp . count ( num [ l ] ) == 0 || fp [ num [ l ] ] != num [ r ] ) { return false ; } l ++ ; r -- ; } return true ; } 
