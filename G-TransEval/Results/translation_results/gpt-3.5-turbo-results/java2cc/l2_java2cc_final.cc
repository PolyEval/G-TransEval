bool hasCloseElements ( vector < double > numbers , double threshold ) { for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < numbers . size ( ) ; j ++ ) { double distance = abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) return true ; } } return false ; } 
double truncateNumber ( double number ) { return fmod ( number , 1.0 ) ; } 
bool belowZero ( vector < int > operations ) { int balance = 0 ; for ( auto op : operations ) { balance += op ; if ( balance < 0 ) { return true ; } } return false ; } 
double meanAbsoluteDeviation ( std :: vector < double > numbers ) { double sumNum = 0 ; for ( double num : numbers ) { sumNum += num ; } double mean = sumNum / numbers . size ( ) ; double sumAbsDiff = 0 ; for ( double num : numbers ) { sumAbsDiff += std :: abs ( num - mean ) ; } return sumAbsDiff / numbers . size ( ) ; } 
vector < int > intersperse ( vector < int > numbers , int delimiter ) { vector < int > result ; if ( numbers . empty ( ) ) { return result ; } for ( int i = 0 ; i < numbers . size ( ) - 1 ; i ++ ) { result . push_back ( numbers [ i ] ) ; result . push_back ( delimiter ) ; } result . push_back ( numbers [ numbers . size ( ) - 1 ] ) ; return result ; } 
vector < int > sumProduct ( vector < int > numbers ) { int sumValue = 0 ; int prodValue = 1 ; for ( int n : numbers ) { sumValue += n ; prodValue *= n ; } return { sumValue , prodValue } ; } 
std :: vector < std :: string > allPrefixes ( std :: string s ) { std :: vector < std :: string > result ; for ( int i = 1 ; i <= s . length ( ) ; i ++ ) { result . push_back ( s . substr ( 0 , i ) ) ; } return result ; } 
std :: vector < int > parseMusic ( std :: string musicString ) { std :: stringstream current ; std :: vector < int > result ; for ( int i = 0 ; i <= musicString . length ( ) ; i ++ ) { if ( i == musicString . length ( ) || musicString [ i ] == ' ' ) { if ( current . str ( ) == "o" ) { result . push_back ( 4 ) ; } if ( current . str ( ) == "o|" ) { result . push_back ( 2 ) ; } if ( current . str ( ) == ".|" ) { result . push_back ( 1 ) ; } current . str ( std :: string ( ) ) ; } else { current << musicString [ i ] ; } } return result ; } 
int strlen ( string s ) { return s . length ( ) ; } 
vector < int > factorize ( int n ) { vector < int > factors ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n /= i ; factors . push_back ( i ) ; i -- ; } } return factors ; } 
std :: string concatenate ( std :: vector < std :: string > strings ) { std :: string result ; for ( auto s : strings ) { result . append ( s ) ; } return result ; } 
std :: vector < double > getPositive ( std :: vector < double > l ) { std :: vector < double > result ; for ( auto it = l . begin ( ) ; it != l . end ( ) ; ++ it ) { if ( * it > 0 ) { result . push_back ( * it ) ; } } return result ; } 
vector < double > sortEven ( vector < double > l ) { vector < double > evens ; for ( int i = 0 ; i < l . size ( ) ; i += 2 ) { evens . push_back ( l [ i ] ) ; } sort ( evens . begin ( ) , evens . end ( ) ) ; vector < double > result ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 2 == 0 ) { result . push_back ( evens [ i / 2 ] ) ; } if ( i % 2 == 1 ) { result . push_back ( l [ i ] ) ; } } return result ; } 
std :: string decodeCyclic ( std :: string s ) { std :: string output ; int i = 0 ; while ( i <= s . length ( ) - 3 ) { std :: string x = std :: string ( 1 , s [ i + 2 ] ) + s . substr ( i , 2 ) ; output += x ; i += 3 ; } return output + s . substr ( i ) ; } 
int carRaceCollision ( int n ) { return pow ( n , 2 ) ; } 
vector < int > incrvector ( vector < int > l ) { vector < int > result ; for ( int i : l ) { result . push_back ( i + 1 ) ; } return result ; } 
bool pairsSumToZero ( vector < int > l ) { for ( auto it1 = l . begin ( ) ; it1 != l . end ( ) ; it1 ++ ) { for ( auto it2 = next ( it1 ) ; it2 != l . end ( ) ; it2 ++ ) { if ( * it1 + * it2 == 0 ) { return true ; } } } return false ; } 
std :: string changeBase ( int x , int b ) { std :: string ret ; while ( x > 0 ) { ret . insert ( 0 , std :: to_string ( x % b ) ) ; x /= b ; } return ret ; } 
double median ( vector < double > l ) { l . sort ( ) ; if ( l . size ( ) % 2 == 1 ) { return l . front ( ) + ( ( l . size ( ) - 1 ) / 2 ) ; } return ( l . front ( ) + ( ( l . size ( ) - 1 ) / 2 - 1 ) + l . front ( ) + ( ( l . size ( ) - 1 ) / 2 ) ) / 2.0 ; } 
string decodeShift ( string s ) { string result ; for ( char ch : s ) { char w = ( char ) ( ( ch + 21 - 'a' ) % 26 + 'a' ) ; result += w ; } return result ; } 
bool belowThreshold ( std :: vector < int > l , int t ) { for ( int n : l ) { if ( n >= t ) { return false ; } } return true ; } 
bool correctBracketing ( string brackets ) { int depth = 0 ; for ( char b : brackets ) { if ( b == '<' ) { depth += 1 ; } if ( b == '>' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; } 
bool monotonic ( vector < double > l ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . size ( ) ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr != 2 ; } 
std :: vector < double > derivative ( std :: vector < double > xs ) { std :: vector < double > result ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) { result . push_back ( i * xs [ i ] ) ; } return result ; } 
int vowelsCount ( string s ) { string vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch : s ) { if ( vowels . find ( ch ) != string :: npos ) { count += 1 ; } } if ( s [ s . length ( ) - 1 ] == 'y' || s [ s . length ( ) - 1 ] == 'Y' ) { count += 1 ; } return count ; } 
int digitSum ( string s ) { int sum = 0 ; for ( char c : s ) { if ( isupper ( c ) ) { sum += c ; } } return sum ; } 
int fruitDistribution ( string s , int n ) { string num1 = "" ; string num2 = "" ; bool flag = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( isdigit ( s [ i ] ) ) { if ( ! flag ) { num1 += s [ i ] ; } if ( flag ) { num2 += s [ i ] ; } } else if ( ! flag && num1 . length ( ) > 0 ) { flag = true ; } } return n - stoi ( num1 ) - stoi ( num2 ) ; } 
vector < int > pluck ( vector < int > arr ) { vector < int > result ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . empty ( ) ) { result . push_back ( arr [ i ] ) ; result . push_back ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } } return result ; } 
vector < int > strangeSortvector ( vector < int > lst ) { vector < int > res ; sort ( lst . begin ( ) , lst . end ( ) ) ; int l = 0 ; int r = lst . size ( ) - 1 ; while ( l < r ) { res . push_back ( lst [ l ] ) ; l += 1 ; res . push_back ( lst [ r ] ) ; r -= 1 ; } if ( l == r ) { res . push_back ( lst [ l ] ) ; } return res ; } 
double triangleArea ( double a , double b , double c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return -1 ; } double s = ( a + b + c ) / 2 ; return sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; } 
bool willItFly ( vector < int > q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . size ( ) ; i ++ ) { if ( q . front ( ) != q . back ( ) ) { return false ; } sum += q . front ( ) ; q . pop_front ( ) ; if ( ! q . empty ( ) ) { q . pop_back ( ) ; } } return sum <= w ; } 
bool isCube ( int a ) { a = abs ( a ) ; int i = ( int ) round ( pow ( a , 1.0 / 3 ) ) ; return pow ( i , 3 ) == a ; } 
int hexKey ( string num ) { string key = "2357BD" ; int total = 0 ; for ( char c : num ) { if ( key . find ( c ) != string :: npos ) { total += 1 ; } } return total ; } 
std :: string decimalToBinary ( int dec ) { std :: string ans ; if ( dec != 0 ) { while ( dec > 0 ) { ans . insert ( 0 , std :: to_string ( dec % 2 ) ) ; dec /= 2 ; } } else { ans . append ( "0" ) ; } return "db" + ans + "db" ; } 
bool primeLength ( string s ) { int l = s . length ( ) ; if ( l < 2 ) { return false ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return false ; } } return true ; } 
int startsOneEnds ( int n ) { if ( n < 1 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return ( int ) ( 18 * pow ( 10 , n - 2 ) ) ; } 
int add ( vector < int > lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . size ( ) ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; } 
std :: vector < std :: vector < int > > getRow ( std :: vector < std :: vector < int > > lst , int x ) { std :: vector < std :: vector < int > > coords ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { for ( int j = lst [ i ] . size ( ) - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] [ j ] == x ) { coords . push_back ( { i , j } ) ; } } } return coords ; } 
int nextSmallest ( vector < int > lst ) { lst . sort ( ) ; for ( auto it = lst . begin ( ) ; it != lst . end ( ) ; it ++ ) { if ( it != lst . begin ( ) && * it != * ( it - 1 ) ) { return * it ; } } return -1 ; } 
bool anyInt ( double a , double b , double c ) { if ( round ( a ) != a || round ( b ) != b || round ( c ) != c ) { return false ; } return a + b == c || a + c == b || b + c == a ; } 
std :: vector < int > countUpTo ( int n ) { std :: vector < int > primes ; for ( int i = 2 ; i < n ; i ++ ) { bool isPrime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { primes . push_back ( i ) ; } } return primes ; } 
int closestInteger ( string value ) { double w = stod ( value ) ; return round ( w ) ; } 
vector < int > makeAPile ( int n ) { vector < int > result ; for ( int i = 0 ; i < n ; i ++ ) { result . push_back ( n + 2 * i ) ; } return result ; } 
vector < string > wordStrings ( string s ) { string current = "" ; vector < string > words ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . at ( i ) == ' ' || s . at ( i ) == ',' ) { if ( current . length ( ) > 0 ) { words . push_back ( current ) ; current = "" ; } } else { current += s . at ( i ) ; } } return words ; } 
string roundedAvg ( int n , int m ) { if ( n > m ) { return "-1" ; } int num = ( m + n ) / 2 ; string ret = "" ; while ( num > 0 ) { ret . insert ( 0 , to_string ( num % 2 ) ) ; num /= 2 ; } return ret ; } 
std :: vector < int > uniqueDigits ( std :: vector < int > x ) { std :: vector < int > digits ; for ( int i : x ) { bool isUnique = true ; std :: string i_str = std :: to_string ( i ) ; for ( char c : i_str ) { if ( c % 2 == 0 ) { isUnique = false ; break ; } } if ( isUnique ) { digits . push_back ( i ) ; } } std :: sort ( digits . begin ( ) , digits . end ( ) ) ; return digits ; } 
int countNums ( vector < int > arr ) { int num = 0 ; for ( int n : arr ) { int neg = n < 0 ? -1 : 1 ; n = abs ( n ) ; vector < int > digits ; for ( char c : to_string ( n ) ) { digits . push_back ( c - '0' ) ; } digits [ 0 ] = digits [ 0 ] * neg ; int sum = 0 ; for ( int d : digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; } 
bool moveOneBall ( vector < int > arr ) { if ( arr . empty ( ) ) { return true ; } int num = 0 ; for ( int i = 1 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ arr . size ( ) - 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; } 
string exchange ( vector < int > lst1 , vector < int > lst2 ) { int odd = 0 ; int even = 0 ; for ( int n : lst1 ) { if ( n % 2 == 1 ) { odd += 1 ; } } for ( int n : lst2 ) { if ( n % 2 == 0 ) { even += 1 ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; } 
vector < string > oddCount ( vector < string > lst ) { vector < string > results ; string originalStr = "the number of odd elements in the string i of the input." ; for ( string s : lst ) { int sum = 0 ; for ( char d : s ) { if ( isdigit ( d ) && d % 2 == 1 ) { sum += 1 ; } } string result = "" ; for ( char c : originalStr ) { if ( c == 'i' ) { result += to_string ( sum ) ; } else { result += c ; } } results . push_back ( result ) ; } return results ; } 
int minSubArraySum ( vector < int > nums ) { int minSum = INT_MAX ; int sum = 0 ; for ( int num : nums ) { sum += num ; if ( minSum > sum ) { minSum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return minSum ; } 
int maxFill ( vector < vector < int > > grid , int capacity ) { int res = 0 ; for ( auto well : grid ) { int sum = 0 ; for ( int n : well ) { sum += n ; } if ( sum > 0 ) { res += ( sum - 1 ) / capacity + 1 ; } } return res ; } 
vector < string > selectWords ( string s , int n ) { string vowels = "aeiouAEIOU" ; string current ; vector < string > result ; int consonantNum = 0 ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s [ i ] == ' ' ) { if ( consonantNum == n ) { result . push_back ( current ) ; } current . clear ( ) ; consonantNum = 0 ; } else { current . push_back ( s [ i ] ) ; if ( vowels . find ( s [ i ] ) == string :: npos ) { consonantNum += 1 ; } } } return result ; } 
int solution ( vector < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . size ( ) ; i += 2 ) { if ( ( lst [ i ] % 2 ) == 1 ) { sum += lst [ i ] ; } } return sum ; } 
int addElements ( vector < int > arr , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr . front ( ) >= -99 && arr . front ( ) <= 99 ) { sum += arr . front ( ) ; } arr . pop_front ( ) ; } return sum ; } 
vector < int > getOddCollatz ( int n ) { vector < int > oddCollatz ; while ( n != 1 ) { if ( n % 2 == 1 ) { oddCollatz . push_back ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } oddCollatz . push_back ( 1 ) ; oddCollatz . sort ( ) ; return oddCollatz ; } 
bool isSorted ( vector < int > lst ) { for ( int i = 1 ; i < lst . size ( ) ; i ++ ) { if ( lst . get ( i ) < lst . get ( i - 1 ) ) { return false ; } if ( i >= 2 && lst . get ( i ) == lst . get ( i - 1 ) && lst . get ( i ) == lst . get ( i - 2 ) ) { return false ; } } return true ; } 
std :: string intersection ( std :: vector < int > interval1 , std :: vector < int > interval2 ) { int inter1 = std :: max ( interval1 . front ( ) , interval2 . front ( ) ) ; int inter2 = std :: min ( interval1 . back ( ) , interval2 . back ( ) ) ; int l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return "NO" ; } } return "YES" ; } 
int prodSigns ( vector < int > arr ) { if ( arr . empty ( ) ) { return -32768 ; } int sum = 0 ; int prods = 1 ; for ( int i : arr ) { sum += abs ( i ) ; if ( i == 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; } 
vector < int > minPath ( vector < vector < int > > grid , int k ) { int n = grid . size ( ) ; int minNum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { vector < int > tmp ; if ( i != 0 ) { tmp . push_back ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . push_back ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . push_back ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . push_back ( grid [ i ] [ j + 1 ] ) ; } minNum = * min_element ( tmp . begin ( ) , tmp . end ( ) ) ; } } } vector < int > ans ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . push_back ( 1 ) ; } else { ans . push_back ( minNum ) ; } } return ans ; } 
int digits ( int n ) { int prod = 0 ; string str = to_string ( n ) ; for ( char digit : str ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) { prod = 1 ; } prod *= digit - '0' ; } } return prod ; } 
bool isNested ( string s ) { int count = 0 ; int maxCount = 0 ; for ( char ch : s ) { if ( ch == '[' ) { count += 1 ; } if ( ch == ']' ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > maxCount ) { maxCount = count ; } if ( count <= maxCount - 2 ) { return true ; } } return false ; } 
int sumSquares ( vector < double > lst ) { int sum = 0 ; for ( double i : lst ) { sum += ceil ( i ) * ceil ( i ) ; } return sum ; } 
int canArrange ( vector < int > arr ) { int index = -1 ; int i = 0 ; for ( auto it = arr . begin ( ) ; it != arr . end ( ) ; it ++ , i ++ ) { if ( * it <= i ) { index = i ; } } return index ; } 
std :: vector < int > largestSmallestIntegers ( std :: vector < int > lst ) { int maxNeg = 0 , minPos = 0 ; for ( int n : lst ) { if ( n < 0 && ( maxNeg == 0 || n > maxNeg ) ) { maxNeg = n ; } if ( n > 0 && ( minPos == 0 || n < minPos ) ) { minPos = n ; } } return { maxNeg , minPos } ; } 
std :: string fixSpaces ( std :: string text ) { std :: stringstream res ; int spaceLen = 0 ; for ( int i = 0 ; i <= text . length ( ) ; i ++ ) { if ( i == text . length ( ) || text [ i ] != ' ' ) { if ( spaceLen == 1 ) { res << '_' ; } if ( spaceLen == 2 ) { res << "__" ; } if ( spaceLen > 2 ) { res << '-' ; } spaceLen = 0 ; if ( i != text . length ( ) ) { res << text [ i ] ; } } else { spaceLen += 1 ; } } return res . str ( ) ; } 
std :: string fileNameCheck ( std :: string fileName ) { int digitNum = 0 , dotNum = 0 ; if ( fileName . length ( ) < 5 || ! isalpha ( fileName [ 0 ] ) ) { return "No" ; } std :: string suffix = fileName . substr ( fileName . length ( ) - 4 ) ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) { return "No" ; } for ( char c : fileName ) { if ( isdigit ( c ) ) { digitNum += 1 ; } if ( c == '.' ) { dotNum += 1 ; } } if ( digitNum > 3 || dotNum != 1 ) { return "No" ; } return "Yes" ; } 
int sumSquares ( vector < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { if ( i % 3 == 0 ) { sum += pow ( lst [ i ] , 2 ) ; } else if ( i % 4 == 0 ) { sum += pow ( lst [ i ] , 3 ) ; } else { sum += lst [ i ] ; } } return sum ; } 
std :: string wordsInSentence ( std :: string sentence ) { std :: stringstream result ; std :: stringstream current ; for ( int i = 0 ; i <= sentence . length ( ) ; i ++ ) { if ( i == sentence . length ( ) || sentence [ i ] == ' ' ) { bool isPrime = true ; int l = current . str ( ) . length ( ) ; if ( l < 2 ) { isPrime = false ; } for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { result << current . str ( ) << ' ' ; } current . str ( "" ) ; } else { current << sentence [ i ] ; } } std :: string stringResult = result . str ( ) ; if ( stringResult . length ( ) > 0 ) { stringResult . pop_back ( ) ; } return stringResult ; } 
bool simplify ( string x , string n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x [ i ] == '/' ) { a = stoi ( x . substr ( 0 , i ) ) ; b = stoi ( x . substr ( i + 1 ) ) ; } } for ( int i = 0 ; i < n . length ( ) ; i ++ ) { if ( n [ i ] == '/' ) { c = stoi ( n . substr ( 0 , i ) ) ; d = stoi ( n . substr ( i + 1 ) ) ; } } return ( a * c ) % ( b * d ) == 0 ; } 
int specialFilter ( vector < int > nums ) { int count = 0 ; for ( int num : nums ) { if ( num > 10 ) { string w = to_string ( num ) ; if ( w [ 0 ] % 2 == 1 && w [ w . length ( ) - 1 ] % 2 == 1 ) { count += 1 ; } } } return count ; } 
int getMaxTriples ( int n ) { vector < int > arr ; for ( int i = 1 ; i <= n ; i ++ ) { arr . push_back ( i * i - i + 1 ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) { count += 1 ; } } } } return count ; } 
int doubleTheDifference ( vector < double > lst ) { int sum = 0 ; for ( double d : lst ) { int num = ( int ) round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) { sum += num * num ; } } } return sum ; } 
std :: vector < int > compare ( std :: vector < int > game , std :: vector < int > guess ) { std :: vector < int > result ; for ( int i = 0 ; i < game . size ( ) ; i ++ ) { result . push_back ( abs ( game [ i ] - guess [ i ] ) ) ; } return result ; } 
string strongestExtension ( string className , vector < string > extensions ) { string strongest = "" ; int max = INT_MIN ; for ( auto extension : extensions ) { int strength = 0 ; for ( char chr : extension ) { if ( isupper ( chr ) ) { strength += 1 ; } if ( islower ( chr ) ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return className + "." + strongest ; } 
string intToMiniRoman ( int number ) { vector < int > num = { 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 } ; vector < string > sym = { "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" } ; int pos = 0 ; string res = "" ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res += sym [ pos ] ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } return res ; } 
std :: vector < int > eat ( int number , int need , int remaining ) { if ( need > remaining ) { return { number + remaining , 0 } ; } else { return { number + need , remaining - need } ; } } 
int doAlgebra ( vector < string > ops , vector < int > operands ) { vector < int > nums ( operands ) ; vector < string > currentOps ( ops ) ; int i = currentOps . size ( ) - 1 ; while ( i >= 0 ) { if ( currentOps [ i ] == "**" ) { nums [ i ] = pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . erase ( nums . begin ( ) + i + 1 ) ; currentOps . erase ( currentOps . begin ( ) + i ) ; } i -- ; } i = 0 ; while ( i < currentOps . size ( ) ) { if ( currentOps [ i ] == "*" ) { nums [ i ] = nums [ i ] * nums [ i + 1 ] ; nums . erase ( nums . begin ( ) + i + 1 ) ; currentOps . erase ( currentOps . begin ( ) + i ) ; } else if ( currentOps [ i ] == "//" ) { nums [ i ] = nums [ i ] / nums [ i + 1 ] ; nums . erase ( nums . begin ( ) + i + 1 ) ; currentOps . erase ( currentOps . begin ( ) + i ) ; } else { i ++ ; } } i = 0 ; while ( i < currentOps . size ( ) ) { if ( currentOps [ i ] == "+" ) { nums [ i ] = nums [ i ] + nums [ i + 1 ] ; nums . erase ( nums . begin ( ) + i + 1 ) ; currentOps . erase ( currentOps . begin ( ) + i ) ; } else if ( currentOps [ i ] == "-" ) { nums [ i ] = nums [ i ] - nums [ i + 1 ] ; nums . erase ( nums . begin ( ) + i + 1 ) ; currentOps . erase ( currentOps . begin ( ) + i ) ; } else { i ++ ; } } return nums [ 0 ] ; } 
vector < int > generateIntegers ( int a , int b ) { int lower = max ( 2 , min ( a , b ) ) ; int upper = min ( 8 , max ( a , b ) ) ; vector < int > result ; for ( int i = lower ; i <= upper ; i += 2 ) { result . push_back ( i ) ; } return result ; } 
bool isStepNum ( int n ) { int prevDigit = -1 ; while ( n > 0 ) { int curDigit = n % 10 ; if ( prevDigit != -1 ) { if ( abs ( curDigit - prevDigit ) != 1 ) { return false ; } } n /= 10 ; prevDigit = curDigit ; } return true ; } 
int numOfWays ( int n , int k ) { int p = 1 ; if ( k % 2 != 0 ) { p = -1 ; } return ( int ) ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; } 
vector < int > findDivisors ( int n ) { vector < int > v ; for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { v . push_back ( i ) ; } else { v . push_back ( i ) ; v . push_back ( n / i ) ; } } } return v ; } 
int eggDrop ( int n , int k ) { if ( k == 1 || k == 0 ) { return k ; } if ( n == 1 ) { return k ; } int min = INT_MAX ; int x , res ; for ( x = 1 ; x <= k ; x ++ ) { res = max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , k - x ) ) ; if ( res < min ) { min = res ; } } return min + 1 ; } 
bool isPowerOfTwo ( int n ) { if ( n == 0 ) { return false ; } return ceil ( log ( n ) / log ( 2 ) ) == floor ( log ( n ) / log ( 2 ) ) ; } 
string shortestPalindrome ( string s ) { int n = s . length ( ) ; vector < string > v ; for ( int i = 0 ; i < n ; i ++ ) { int l = i ; int r = i ; string ans1 = "" ; string ans2 = "" ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans1 += s [ l ] ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans2 += s [ l ] ; l -- ; r ++ ; } v . push_back ( ans1 ) ; v . push_back ( ans2 ) ; } string ans = v [ 0 ] ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v [ i ] != "" ) { if ( ans [ 0 ] >= v [ i ] [ 0 ] ) { ans = v [ i ] ; } } } return ans ; } 
int minimumAdjacentDifference ( vector < int > a , int n , int k ) { int minDiff = INT_MAX ; for ( int i = 0 ; i <= k ; i ++ ) { int maxDiff = INT_MIN ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { maxDiff = max ( maxDiff , a [ p + 1 ] - a [ p ] ) ; } } minDiff = min ( minDiff , maxDiff ) ; } return minDiff ; } 
int cal ( vector < int > arr , int mid ) { int chocolate = 0 ; for ( auto i : arr ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; } 
bool check ( int v , vector < int > a , int m ) { int tec = 0 , ans = 0 ; vector < int > b ( a . size ( ) + 3 , 0 ) ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans += mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; } 
int largestNum ( vector < int > arr ) { int res = 0 ; arr . sort ( ) ; int l = 0 , r = arr . size ( ) - 1 ; while ( l < r ) { int sum = arr . front ( ) + arr . back ( ) ; if ( sum == 0 ) { res = max ( res , max ( arr . front ( ) , arr . back ( ) ) ) ; return res ; } else if ( sum < 0 ) { arr . pop_front ( ) ; } else { arr . pop_back ( ) ; } } return res ; } 
int binarySearch ( std :: vector < int > p , int n ) { int i = 0 ; int j = p . size ( ) - 1 ; int index = -1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; } 
int findMinLength ( vector < int > arr ) { int index = arr . size ( ) - 1 ; while ( index > 0 && arr . back ( ) >= arr [ index - 1 ] ) { index -- ; arr . pop_back ( ) ; } return index ; } 
int minDigits ( int n , int k ) { int digitsNum = floor ( log10 ( n ) + 1 ) ; int tempSum = 0 ; int temp = digitsNum ; int result = 0 ; int x , v ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = n / pow ( 10 , temp - 1 ) ; tempSum += v % 10 ; if ( tempSum >= k ) { v /= 10 ; v ++ ; result = v * pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; } return -1 ; } 
int checkForPerfectSquare ( vector < int > arr , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr . front ( ) ; arr . pop_front ( ) ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return -1 ; } 
int minFlips ( vector < vector < int > > mat , string s ) { int n = mat . size ( ) ; int m = mat [ 0 ] . size ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s [ i + j ] - '0' ) { count ++ ; } } } return count ; } 
vector < vector < int > > constructTree ( int n , vector < vector < int > > edges ) { vector < vector < int > > adjl ( n ) ; for ( int i = 0 ; i < n ; i ++ ) { adjl . push_back ( vector < int > ( ) ) ; } for ( auto e : edges ) { int u = e [ 0 ] ; int v = e [ 1 ] ; adjl [ u ] . push_back ( v ) ; adjl [ v ] . push_back ( u ) ; } return adjl ; } 
int findSumOfValues ( int v , vector < int > parent , vector < int > valuesChildren ) { int curNode = v ; int sum = 0 ; while ( curNode != -1 ) { sum += valuesChildren [ curNode ] ; curNode = parent [ curNode ] ; } return sum ; } 
int getDistinct ( int d , int count ) { int num = 0 ; count = ( int ) pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; } 
bool isIncreasing ( vector < int > arr ) { for ( int i = 0 ; i < arr . size ( ) - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; } 
int minAdjSwaps ( vector < vector < int > > mat ) { int n = mat . size ( ) ; vector < int > cntZero ( n , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 && mat [ i ] [ j ] == 0 ; j -- ) { cntZero [ i ] ++ ; } } int cntSwaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cntZero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cntZero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) { return -1 ; } while ( first > i ) { swap ( cntZero [ first ] , cntZero [ first - 1 ] ) ; first -- ; cntSwaps ++ ; } } } return cntSwaps ; } 
int solve ( vector < int > values , vector < int > salary , int mod ) { int ret = 1 ; int amt = 0 ; values . sort ( ) ; salary . sort ( ) ; while ( salary . size ( ) > 0 ) { while ( values . size ( ) > 0 && values . back ( ) >= salary . back ( ) ) { amt ++ ; values . pop_back ( ) ; } if ( amt == 0 ) { return 0 ; } ret *= amt -- ; ret %= mod ; salary . pop_back ( ) ; } return ret ; } 
std :: vector < int > organizeInOrder ( std :: vector < int > vec , std :: vector < char > op , int n ) { std :: vector < int > result ( n , 0 ) ; std :: sort ( vec . begin ( ) , vec . end ( ) ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; } 
int countPoints ( int n , int m , vector < int > a , vector < int > b , int x , int y ) { a . sort ( ) ; b . sort ( ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a . front ( ) + y < b . front ( ) ) { break ; } if ( b . front ( ) >= a . front ( ) - x && b . front ( ) <= a . front ( ) + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } b . pop_front ( ) ; } a . pop_front ( ) ; } return count ; } 
bool areSame ( vector < int > a , vector < int > b ) { a . sort ( ) ; b . sort ( ) ; return a == b ; } 
int countNumberOfStrings ( string s ) { int n = s . length ( ) - 1 ; int count = ( int ) pow ( 2 , n ) ; return count ; } 
vector < int > primePower ( int x ) { vector < int > primePow ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } primePow . push_back ( p ) ; } } if ( x > 1 ) { primePow . push_back ( x ) ; } return primePow ; } 
bool isPerfect ( int n0 ) { double n = sqrt ( n0 ) ; if ( floor ( n ) != ceil ( n ) ) { return false ; } return true ; } 
int findSum ( int l , int r ) { vector < int > arr ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . push_back ( i + x ) ; if ( i + 1 <= r ) { arr . push_back ( i + 1 + x ) ; } x *= -1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr [ i ] ; } return sum ; } 
int results ( int n , int k ) { return ( int ) round ( pow ( n , 1.0 / pow ( 2.0 , k ) ) ) ; } 
vector < int > factors ( int n ) { vector < int > v ; v . push_back ( 1 ) ; for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . push_back ( i ) ; if ( n / i != i ) { v . push_back ( n / i ) ; } } } return v ; } 
int smallestNum ( int n ) { double x = pow ( 10 , ( n - 1 ) / 2.0 ) ; return ( int ) ceil ( x ) ; } 
int smallest ( string s ) { vector < int > a ( s . length ( ) , 0 ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = s [ i ] - '0' ; } vector < int > b ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { if ( a [ i ] % 2 != 0 ) { b . push_back ( a [ i ] ) ; } } sort ( b . begin ( ) , b . end ( ) ) ; if ( b . size ( ) > 1 ) { return b [ 0 ] * 10 + b [ 1 ] ; } return -1 ; } 
vector < double > Diagonals ( double a , double b , double c , double d ) { vector < double > ans ; ans . push_back ( sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . push_back ( sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; } 
int findNumberOfDigits ( int n , int bas ) { int dig = ( int ) floor ( log ( n ) / log ( bas ) ) + 1 ; return dig ; } 
double nGon ( int n ) { double proAngleVar ; if ( n % 4 == 0 ) { proAngleVar = M_PI * ( 180.0 / n ) / 180 ; } else { proAngleVar = M_PI * ( 180.0 / ( 2 * n ) ) / 180 ; } double negX = 1.0e+99 , posX = -1.0e+99 , negY = 1.0e+99 , posY = -1.0e+99 ; for ( int j = 0 ; j < n ; ++ j ) { double px = cos ( 2 * M_PI * j / n + proAngleVar ) ; double py = sin ( 2 * M_PI * j / n + proAngleVar ) ; negX = min ( negX , px ) ; posX = max ( posX , px ) ; negY = min ( negY , py ) ; posY = max ( posY , py ) ; } double opt2 = max ( posX - negX , posY - negY ) ; return opt2 / sin ( M_PI / n ) / 2 ; } 
int findMaxK ( int n ) { int p = ( int ) ( log ( n ) / log ( 2 ) ) ; return ( int ) pow ( 2 , p ) ; } 
int nthFibo ( int n ) { double a = ( sqrt ( 5 ) + 1 ) / 2 ; double b = ( -1 * sqrt ( 5 ) + 1 ) / 2 ; double r = sqrt ( 5 ) ; double ans = ( pow ( a , n ) - pow ( b , n ) ) / r ; return ( int ) ans ; } 
double findProb ( int l , int r ) { double countOfPs = floor ( sqrt ( r ) ) - ceil ( sqrt ( l ) ) + 1 ; double total = r - l + 1 ; double prob = countOfPs / total ; return prob ; } 
int previousFibonacci ( int n ) { double phi = ( 1 + sqrt ( 5 ) ) / 2 ; double a = n / phi ; return ( int ) round ( a / phi ) ; } 
std :: vector < int > distPrime ( std :: vector < int > arr , std :: vector < int > allPrimes ) { std :: vector < int > vector1 ; for ( int i : allPrimes ) { for ( int j : arr ) { if ( j % i == 0 ) { vector1 . push_back ( i ) ; break ; } } } return vector1 ; } 
vector < int > getArray ( int n ) { vector < int > ans ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans . push_back ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; } 
int maximumLength ( vector < int > a ) { vector < int > counts ( 11 , 0 ) ; int ans = 0 ; for ( int index = 0 ; index < a . size ( ) ; index ++ ) { counts [ a [ index ] ] ++ ; vector < int > k ; for ( auto i : counts ) { if ( i != 0 ) { k . push_back ( i ) ; } } sort ( k . begin ( ) , k . end ( ) ) ; if ( k . size ( ) == 1 || ( k [ 0 ] == k [ k . size ( ) - 2 ] && k [ k . size ( ) - 1 ] - k [ k . size ( ) - 2 ] == 1 ) || ( k [ 0 ] == 1 && k [ 1 ] == k [ k . size ( ) - 1 ] ) ) { ans = index ; } } return ans + 1 ; } 
int maxEdges ( double n ) { double edges = floor ( n * n / 4 ) ; return ( int ) edges ; } 
int findK ( int n , int k ) { vector < int > a ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a . push_back ( i ) ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a . push_back ( i ) ; } } return a [ k - 1 ] ; } 
bool isKeith ( int x , int temp ) { vector < int > terms ; int n = 0 ; while ( temp > 0 ) { terms . push_back ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } reverse ( terms . begin ( ) , terms . end ( ) ) ; int nextTerm = 0 , i = n ; while ( nextTerm < x ) { nextTerm = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { nextTerm += terms [ i - j ] ; } terms . push_back ( nextTerm ) ; i ++ ; } return nextTerm == x ; } 
bool factors ( int n , int k ) { vector < int > v ; while ( n % 2 == 0 ) { v . push_back ( 2 ) ; n /= 2 ; } if ( v . size ( ) >= k ) { return true ; } for ( int i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n /= i ; v . push_back ( i ) ; } if ( v . size ( ) >= k ) { return true ; } } if ( n > 2 ) { v . push_back ( n ) ; } if ( v . size ( ) >= k ) { return true ; } return false ; } 
