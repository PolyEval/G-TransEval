boolean has_close_elements ( int [ ] numbers , int threshold ) { for ( int i = 0 ; i < numbers . length ; i ++ ) { for ( int j = i + 1 ; j < numbers . length ; j ++ ) { int distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) { return true ; } } } return false ; } 
double truncateNumber ( double number ) { return number % 1 ; } 
boolean below_zero ( int [ ] operations ) { int balance = 0 ; for ( int op : operations ) { balance += op ; if ( balance < 0 ) { return true ; } } return false ; } 
double meanAbsoluteDeviation ( double [ ] numbers ) { double sumNum = 0 ; for ( double num : numbers ) { sumNum += num ; } double mean = sumNum / numbers . length ; double sumAbsDiff = 0 ; for ( double num : numbers ) { sumAbsDiff += Math . abs ( num - mean ) ; } return sumAbsDiff / numbers . length ; } 
List < String > intersperse ( List < String > numbers , String delimiter ) { List < String > result = new ArrayList < String > ( ) ; if ( numbers . isEmpty ( ) ) { return result ; } for ( int i = 0 ; i < numbers . size ( ) - 1 ; i ++ ) { result . add ( numbers . get ( i ) ) ; result . add ( delimiter ) ; } result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ; return result ; } 
int [ ] sumProduct ( int [ ] numbers ) { int sum_value = 0 ; int prod_value = 1 ; for ( int n : numbers ) { sum_value += n ; prod_value *= n ; } return new int [ ] { sum_value , prod_value } ; } 
List < String > allPrefixes ( String string ) { List < String > result = new ArrayList < > ( ) ; for ( int i = 1 ; i <= string . length ( ) ; i ++ ) { result . add ( string . substring ( 0 , i ) ) ; } return result ; } 
List < Integer > parseMusic ( String musicString ) { List < Integer > result = new ArrayList < > ( ) ; List < Character > current = new ArrayList < > ( ) ; for ( int i = 0 ; i <= musicString . length ( ) ; i ++ ) { if ( i == musicString . length ( ) || musicString . charAt ( i ) == ' ' ) { if ( current . toString ( ) . equals ( "o" ) ) { result . add ( 4 ) ; } if ( current . toString ( ) . equals ( "o|" ) ) { result . add ( 2 ) ; } if ( current . toString ( ) . equals ( ".|" ) ) { result . add ( 1 ) ; } current . clear ( ) ; } else { current . add ( musicString . charAt ( i ) ) ; } } return result ; } 
int strlen ( String s ) { return s . length ( ) ; } 
ArrayList < Integer > factorize ( int n ) { ArrayList < Integer > factors = new ArrayList < Integer > ( ) ; int i = 2 ; while ( i <= n ) { if ( n % i == 0 ) { factors . add ( i ) ; n /= i ; } else { i ++ ; } } return factors ; } 
String concatenate ( String [ ] strings ) { List < String > result = new ArrayList < > ( ) ; for ( String s : strings ) { result . add ( s ) ; } return String . join ( "" , result ) ; } 
ArrayList < Integer > getPositive ( ArrayList < Integer > l ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( l . get ( i ) > 0 ) { result . add ( l . get ( i ) ) ; } } return result ; } 
List < Integer > sortEven ( List < Integer > l ) { List < Integer > evens = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i += 2 ) { evens . add ( l . get ( i ) ) ; } Collections . sort ( evens ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 2 == 0 ) { result . add ( evens . get ( i / 2 ) ) ; } else { result . add ( l . get ( i ) ) ; } } return result ; } 
String decodeCyclic ( String s ) { List < String > output = new ArrayList < > ( ) ; int i = 0 ; while ( i <= s . length ( ) - 3 ) { String x = s . substring ( i + 2 , i + 3 ) + s . substring ( i , i + 2 ) ; output . add ( x ) ; i += 3 ; } return String . join ( "" , output ) + s . substring ( i ) ; } 
int car_race_collision ( int n ) { return ( int ) Math . pow ( n , 2 ) ; } 
List < Integer > incr_list ( List < Integer > l ) { List < Integer > result = new ArrayList < > ( ) ; for ( Integer i : l ) { result . add ( i + 1 ) ; } return result ; } 
boolean pairs_sum_to_zero ( int [ ] l ) { for ( int i = 0 ; i < l . length ; i ++ ) { for ( int j = i + 1 ; j < l . length ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) { return true ; } } } return false ; } 
String change_base ( int x , int b ) { ArrayList < String > ret = new ArrayList < String > ( ) ; while ( x > 0 ) { ret . add ( 0 , Integer . toString ( x % b ) ) ; x /= b ; } StringBuilder sb = new StringBuilder ( ) ; for ( String s : ret ) { sb . append ( s ) ; } return sb . toString ( ) ; } 
double median ( int [ ] l ) { Arrays . sort ( l ) ; if ( l . length % 2 == 1 ) { return l [ l . length / 2 ] ; } else { return ( double ) ( l [ l . length / 2 - 1 ] + l [ l . length / 2 ] ) / 2.0 ; } } 
String decodeShift ( String s ) { ArrayList < Character > result = new ArrayList < Character > ( ) ; for ( char ch : s . toCharArray ( ) ) { int w = ( ( int ) ch + 21 - ( int ) 'a' ) % 26 + ( int ) 'a' ; result . add ( ( char ) w ) ; } char [ ] charArray = new char [ result . size ( ) ] ; for ( int i = 0 ; i < result . size ( ) ; i ++ ) { charArray [ i ] = result . get ( i ) ; } return new String ( charArray ) ; } 
boolean below_threshold ( int [ ] l , int t ) { for ( int n : l ) { if ( n >= t ) { return false ; } } return true ; } 
boolean correctBracketing ( String brackets ) { int depth = 0 ; for ( int i = 0 ; i < brackets . length ( ) ; i ++ ) { if ( brackets . charAt ( i ) == '<' ) { depth ++ ; } else { depth -- ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; } 
boolean monotonic ( int [ ] l ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . length ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr != 2 ; } 
ArrayList < Double > derivative ( ArrayList < Double > xs ) { ArrayList < Double > result = new ArrayList < Double > ( ) ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) { result . add ( i * xs . get ( i ) ) ; } return result ; } 
int vowelsCount ( String s ) { String vowels = "aeiouAEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( vowels . indexOf ( ch ) != - 1 ) { count ++ ; } } if ( s . charAt ( s . length ( ) - 1 ) == 'y' || s . charAt ( s . length ( ) - 1 ) == 'Y' ) { count ++ ; } return count ; } 
int digit_sum ( String s ) { int sum = 0 ; for ( char c : s . toCharArray ( ) ) { if ( Character . isUpperCase ( c ) ) { sum += ( int ) c ; } } return sum ; } 
int fruit_distribution ( String s , int n ) { ArrayList < Integer > num1 = new ArrayList < Integer > ( ) ; ArrayList < Integer > num2 = new ArrayList < Integer > ( ) ; boolean flag = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( Character . isDigit ( s . charAt ( i ) ) ) { if ( ! flag ) { num1 . add ( Character . getNumericValue ( s . charAt ( i ) ) ) ; } if ( flag ) { num2 . add ( Character . getNumericValue ( s . charAt ( i ) ) ) ; } } else if ( ! flag && num1 . size ( ) > 0 ) { flag = true ; } } StringBuffer sb1 = new StringBuffer ( ) ; StringBuffer sb2 = new StringBuffer ( ) ; for ( Integer i : num1 ) { sb1 . append ( i ) ; } for ( Integer i : num2 ) { sb2 . append ( i ) ; } return n - Integer . parseInt ( sb1 . toString ( ) ) - Integer . parseInt ( sb2 . toString ( ) ) ; } 
int [ ] pluck ( int [ ] arr ) { int [ ] result = new int [ 2 ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . length == 0 ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } } return result ; } 
List < Integer > strangeSortList ( List < Integer > lst ) { List < Integer > res = new ArrayList < > ( ) ; Collections . sort ( lst ) ; int l = 0 ; int r = lst . size ( ) - 1 ; while ( l < r ) { res . add ( lst . get ( l ) ) ; l ++ ; res . add ( lst . get ( r ) ) ; r -- ; } if ( l == r ) { res . add ( lst . get ( l ) ) ; } return res ; } 
double triangle_area ( double a , double b , double c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return - 1.0 ; } double s = ( a + b + c ) / 2 ; double area = Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; return area ; } 
boolean will_it_fly ( int [ ] q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . length ; i ++ ) { if ( q [ i ] != q [ q . length - i - 1 ] ) { return false ; } sum += q [ i ] ; } return sum <= w ; } 
boolean isCube ( int a ) { a = Math . abs ( a ) ; int i = Math . round ( Math . pow ( a , 1.0 / 3 ) ) ; return Math . pow ( i , 3 ) == a ; } 
int hex_key ( String num ) { String key = "2357BD" ; int total = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) { char c = num . charAt ( i ) ; if ( key . indexOf ( c ) >= 0 ) { total ++ ; } } return total ; } 
String decimalToBinary ( int dec ) { List < String > ans = new ArrayList < String > ( ) ; if ( dec != 0 ) { while ( dec > 0 ) { ans . add ( 0 , String . valueOf ( dec % 2 ) ) ; dec /= 2 ; } } else { ans . add ( "0" ) ; } return "db" + String . join ( "" , ans ) + "db" ; } 
boolean prime_length ( String s ) { int l = s . length ( ) ; if ( l < 2 ) { return false ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return false ; } } return true ; } 
int startsOneEnds ( int n ) { if ( n < 1 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return 18 * ( int ) Math . pow ( 10 , n - 2 ) ; } 
int add ( int [ ] lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; } 
ArrayList < ArrayList < Integer > > getRow ( ArrayList < ArrayList < Integer > > lst , int x ) { ArrayList < ArrayList < Integer > > coords = new ArrayList < ArrayList < Integer > > ( ) ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { for ( int j = lst . get ( i ) . size ( ) - 1 ; j >= 0 ; j -- ) { if ( lst . get ( i ) . get ( j ) == x ) { coords . add ( new ArrayList < Integer > ( Arrays . asList ( i , j ) ) ) ; } } } return coords ; } 
int next_smallest ( int [ ] lst ) { Arrays . sort ( lst ) ; for ( int i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) { return lst [ i ] ; } } return - 1 ; } 
boolean anyInt ( double a , double b , double c ) { if ( Math . round ( a ) != a || Math . round ( b ) != b || Math . round ( c ) != c ) { return false ; } return a + b == c || a + c == b || b + c == a ; } 
List < Integer > countUpTo ( int n ) { List < Integer > primes = new ArrayList < Integer > ( ) ; for ( int i = 2 ; i < n ; i ++ ) { boolean isPrime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { primes . add ( i ) ; } } return primes ; } 
int closestInteger ( double value ) { double w = value ; return ( int ) Math . round ( w ) ; } 
int [ ] makeAPile ( int n ) { int [ ] result = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { result [ i ] = n + 2 * i ; } return result ; } 
List < String > wordsString ( String s ) { List < String > current = new ArrayList < > ( ) ; List < String > words = new ArrayList < > ( ) ; for ( int i = 0 ; i < s . length ( ) + 1 ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' || s . charAt ( i ) == ',' ) { if ( current . size ( ) > 0 ) { words . add ( String . join ( "" , current ) ) ; current . clear ( ) ; } } else { current . add ( String . valueOf ( s . charAt ( i ) ) ) ; } } return words ; } 
String roundedAvg ( int n , int m ) { if ( n > m ) { return "-1" ; } int num = ( n + m ) / 2 ; List < String > ret = new ArrayList < > ( ) ; while ( num > 0 ) { ret . add ( 0 , String . valueOf ( num % 2 ) ) ; num /= 2 ; } return String . join ( "" , ret ) ; } 
ArrayList < Integer > uniqueDigits ( ArrayList < Integer > x ) { ArrayList < Integer > digits = new ArrayList < Integer > ( ) ; for ( int n : x ) { boolean is_unique = true ; for ( char c : Integer . toString ( n ) . toCharArray ( ) ) { if ( ( ( int ) c ) % 2 == 0 ) { is_unique = false ; break ; } } if ( is_unique ) { digits . add ( n ) ; } } Collections . sort ( digits ) ; return digits ; } 
int count_nums ( int [ ] arr ) { int num = 0 ; for ( int n : arr ) { int neg = n < 0 ? - 1 : 1 ; n = Math . abs ( n ) ; List < Integer > digits = new ArrayList < > ( ) ; for ( char c : String . valueOf ( n ) . toCharArray ( ) ) { digits . add ( ( int ) c - ( int ) '0' ) ; } digits . set ( 0 , digits . get ( 0 ) * neg ) ; int sum = 0 ; for ( int d : digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; } 
boolean moveOneBall ( int [ ] arr ) { if ( arr == null || arr . length == 0 ) { return true ; } int num = 0 ; for ( int i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num ++ ; } } if ( arr [ arr . length - 1 ] > arr [ 0 ] ) { num ++ ; } if ( num < 2 ) { return true ; } else { return false ; } } 
String exchange ( List < Integer > lst1 , List < Integer > lst2 ) { int odd = 0 ; int even = 0 ; for ( int n : lst1 ) { if ( n % 2 == 1 ) { odd += 1 ; } } for ( int n : lst2 ) { if ( n % 2 == 0 ) { even += 1 ; } } if ( even >= odd ) { return "YES" ; } else { return "NO" ; } } 
ArrayList < String > odd_count ( ArrayList < String > lst ) { ArrayList < String > results = new ArrayList < String > ( ) ; String original_str = "the number of odd elements in the string i of the input." ; for ( String s : lst ) { int sum = 0 ; for ( char d : s . toCharArray ( ) ) { if ( Character . isDigit ( d ) && ( ( int ) d % 2 ) == 1 ) sum += 1 ; } ArrayList < String > result = new ArrayList < String > ( ) ; for ( char c : original_str . toCharArray ( ) ) { if ( c == 'i' ) result . add ( Integer . toString ( sum ) ) ; else result . add ( Character . toString ( c ) ) ; } results . add ( String . join ( "" , result ) ) ; } return results ; } 
int minSubArraySum ( int [ ] nums ) { int min_sum = Integer . MAX_VALUE ; int sum = 0 ; for ( int i = 0 ; i < nums . length ; i ++ ) { sum += nums [ i ] ; if ( min_sum > sum ) { min_sum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return min_sum ; } 
int maxFill ( int [ ] [ ] grid , int capacity ) { int res = 0 ; for ( int [ ] well : grid ) { int sum = 0 ; for ( int n : well ) { sum += n ; } if ( sum > 0 ) { res += ( sum - 1 ) / capacity + 1 ; } } return res ; } 
ArrayList < String > selectWords ( String s , int n ) { ArrayList < String > result = new ArrayList < > ( ) ; String vowels = "aeiouAEIOU" ; ArrayList < Character > current = new ArrayList < > ( ) ; int consonant_num = 0 ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { if ( consonant_num == n ) { StringBuilder word = new StringBuilder ( ) ; for ( char c : current ) { word . append ( c ) ; } result . add ( word . toString ( ) ) ; } current . clear ( ) ; consonant_num = 0 ; } else { current . add ( s . charAt ( i ) ) ; if ( vowels . indexOf ( s . charAt ( i ) ) < 0 ) { consonant_num ++ ; } } } return result ; } 
int solution ( int [ ] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 1 ) { sum += lst [ i ] ; } } return sum ; } 
int addElements ( int [ ] arr , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( - 99 <= arr [ i ] && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; } 
ArrayList < Integer > get_odd_collatz ( int n ) { ArrayList < Integer > odd_collatz = new ArrayList < Integer > ( ) ; while ( n > 1 ) { if ( n % 2 == 1 ) { odd_collatz . add ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } odd_collatz . add ( 1 ) ; Collections . sort ( odd_collatz ) ; return odd_collatz ; } 
boolean isSorted ( int [ ] lst ) { for ( int i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; } 
String intersection ( int [ ] interval1 , int [ ] interval2 ) { int inter1 = Math . max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = Math . min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return "NO" ; } } return "YES" ; } 
int prod_signs ( int [ ] arr ) { if ( arr . length == 0 ) { return - 32768 ; } int sum = 0 ; int prods = 1 ; for ( int i : arr ) { sum += Math . abs ( i ) ; if ( i == 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; } 
List < Integer > minPath ( int [ ] [ ] grid , int k ) { int n = grid . length ; int min_num = 0 ; List < Integer > ans = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { List < Integer > tmp = new ArrayList < Integer > ( ) ; if ( i != 0 ) { tmp . add ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . add ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . add ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . add ( grid [ i ] [ j + 1 ] ) ; } min_num = Collections . min ( tmp ) ; } } } for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . add ( 1 ) ; } else { ans . add ( min_num ) ; } } return ans ; } 
int digits ( int n ) { int prod = 1 ; for ( char digit : Integer . toString ( n ) . toCharArray ( ) ) { if ( ( int ) digit % 2 == 1 ) { if ( prod == 0 ) prod = 1 ; prod *= ( ( int ) digit - ( int ) '0' ) ; } } return prod ; } 
boolean isNested ( String s ) { int count = 0 ; int maxCount = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( ch == '[' ) { count ++ ; } else if ( ch == ']' ) { count -- ; } if ( count < 0 ) { count = 0 ; } if ( count > maxCount ) { maxCount = count ; } if ( count <= maxCount - 2 ) { return true ; } } return false ; } 
int sumSquares ( List < Integer > lst ) { int sum = 0 ; for ( int i : lst ) { sum += Math . ceil ( i ) * Math . ceil ( i ) ; } return sum ; } 
int can_arrange ( int [ ] arr ) { int index = - 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; } 
int [ ] largestSmallestIntegers ( List < Integer > lst ) { int maxNeg = 0 , minPos = 0 ; for ( int n : lst ) { if ( n < 0 && ( maxNeg == 0 || n > maxNeg ) ) { maxNeg = n ; } if ( n > 0 && ( minPos == 0 || n < minPos ) ) { minPos = n ; } } return new int [ ] { maxNeg , minPos } ; } 
String fix_spaces ( String text ) { ArrayList < String > res = new ArrayList < > ( ) ; int space_len = 0 ; for ( int i = 0 ; i <= text . length ( ) ; i ++ ) { if ( i == text . length ( ) || text . charAt ( i ) != ' ' ) { if ( space_len == 1 ) { res . add ( "_" ) ; } if ( space_len == 2 ) { res . add ( "__" ) ; } if ( space_len > 2 ) { res . add ( "-" ) ; } space_len = 0 ; if ( i != text . length ( ) ) { res . add ( String . valueOf ( text . charAt ( i ) ) ) ; } } else { space_len ++ ; } } return String . join ( "" , res ) ; } 
String fileNameCheck ( String fileName ) { int digit_num = 0 , dot_num = 0 ; if ( fileName . length ( ) < 5 || ! Character . isLetter ( fileName . charAt ( 0 ) ) ) { return "No" ; } String suffix = fileName . substring ( fileName . length ( ) - 4 ) ; if ( ! suffix . equals ( ".txt" ) && ! suffix . equals ( ".exe" ) && ! suffix . equals ( ".dll" ) ) { return "No" ; } for ( int i = 0 ; i < fileName . length ( ) ; i ++ ) { char c = fileName . charAt ( i ) ; if ( Character . isDigit ( c ) ) { digit_num ++ ; } if ( c == '.' ) { dot_num ++ ; } } if ( digit_num > 3 || dot_num != 1 ) { return "No" ; } return "Yes" ; } 
int sumSquares ( int [ ] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i ++ ) { if ( i % 3 == 0 ) { sum += lst [ i ] * lst [ i ] ; } else if ( i % 4 == 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else { sum += lst [ i ] ; } } return sum ; } 
String words_in_sentence ( String sentence ) { ArrayList < String > result = new ArrayList < > ( ) ; ArrayList < Character > current = new ArrayList < > ( ) ; for ( int i = 0 ; i < sentence . length ( ) + 1 ; i ++ ) { if ( i == sentence . length ( ) || sentence . charAt ( i ) == ' ' ) { boolean is_prime = true ; int l = current . size ( ) ; if ( l < 2 ) { is_prime = false ; } for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : current ) { sb . append ( c ) ; } result . add ( sb . toString ( ) + " " ) ; } current . clear ( ) ; } else { current . add ( sentence . charAt ( i ) ) ; } } StringBuilder sb = new StringBuilder ( ) ; for ( String s : result ) { sb . append ( s ) ; } String res = sb . toString ( ) ; if ( res . length ( ) > 0 ) { res = res . substring ( 0 , res . length ( ) - 1 ) ; } return res ; } 
boolean simplify ( String x , String n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x . charAt ( i ) == '/' ) { a = Integer . parseInt ( x . substring ( 0 , i ) ) ; b = Integer . parseInt ( x . substring ( i + 1 ) ) ; } } for ( int i = 0 ; i < n . length ( ) ; i ++ ) { if ( n . charAt ( i ) == '/' ) { c = Integer . parseInt ( n . substring ( 0 , i ) ) ; d = Integer . parseInt ( n . substring ( i + 1 ) ) ; } } return ( a * c ) % ( b * d ) == 0 ; } 
int specialFilter ( int [ ] nums ) { int count = 0 ; for ( int num : nums ) { if ( num > 10 ) { String w = Integer . toString ( num ) ; if ( w . charAt ( 0 ) % 2 == 1 && w . charAt ( w . length ( ) - 1 ) % 2 == 1 ) { count ++ ; } } } return count ; } 
int getMaxTriples ( int n ) { ArrayList < Integer > arr = new ArrayList < Integer > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { arr . add ( i * i - i + 1 ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr . get ( i ) + arr . get ( j ) + arr . get ( k ) ) % 3 == 0 ) { count ++ ; } } } } return count ; } 
int doubleTheDifference ( Double [ ] lst ) { int sum = 0 ; for ( double d : lst ) { int num = Math . round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) { sum += num * num ; } } } return sum ; } 
int [ ] compare ( int [ ] game , int [ ] guess ) { int [ ] result = new int [ game . length ] ; for ( int i = 0 ; i < game . length ; i ++ ) { result [ i ] = Math . abs ( game [ i ] - guess [ i ] ) ; } return result ; } 
String strongestExtension ( String className , String [ ] extensions ) { String strongest = "" ; int max = Integer . MIN_VALUE ; for ( String extension : extensions ) { int strength = 0 ; for ( int i = 0 ; i < extension . length ( ) ; i ++ ) { char chr = extension . charAt ( i ) ; if ( Character . isUpperCase ( chr ) ) { strength ++ ; } if ( Character . isLowerCase ( chr ) ) { strength -- ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return className + "." + strongest ; } 
String int_to_mini_roman ( int number ) { int [ ] num = { 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 } ; String [ ] sym = { "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" } ; int pos = 0 ; ArrayList < String > res = new ArrayList < String > ( ) ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res . add ( sym [ pos ] ) ; number -= num [ pos ] ; } if ( number > 0 ) { pos ++ ; } } String result = "" ; for ( String s : res ) { result += s ; } return result ; } 
int [ ] eat ( int number , int need , int remaining ) { if ( need > remaining ) { return new int [ ] { number + remaining , 0 } ; } else { return new int [ ] { number + need , remaining - need } ; } } 
double doAlgebra ( String [ ] ops , double [ ] operands ) { List < Double > nums = new ArrayList < > ( ) ; for ( double operand : operands ) { nums . add ( operand ) ; } List < String > currentOps = new ArrayList < > ( ) ; for ( String op : ops ) { currentOps . add ( op ) ; } int i = currentOps . size ( ) - 1 ; while ( i >= 0 ) { if ( currentOps . get ( i ) . equals ( "**" ) ) { nums . set ( i , Math . pow ( nums . get ( i ) , nums . get ( i + 1 ) ) ) ; nums . remove ( i + 1 ) ; currentOps . remove ( i ) ; } i -- ; } i = 0 ; while ( i < currentOps . size ( ) ) { if ( currentOps . get ( i ) . equals ( "*" ) ) { nums . set ( i , nums . get ( i ) * nums . get ( i + 1 ) ) ; nums . remove ( i + 1 ) ; currentOps . remove ( i ) ; } else if ( currentOps . get ( i ) . equals ( "//" ) ) { nums . set ( i , nums . get ( i ) / nums . get ( i + 1 ) ) ; nums . remove ( i + 1 ) ; currentOps . remove ( i ) ; } else { i ++ ; } } i = 0 ; while ( i < currentOps . size ( ) ) { if ( currentOps . get ( i ) . equals ( "+" ) ) { nums . set ( i , nums . get ( i ) + nums . get ( i + 1 ) ) ; nums . remove ( i + 1 ) ; currentOps . remove ( i ) ; } else if ( currentOps . get ( i ) . equals ( "-" ) ) { nums . set ( i , nums . get ( i ) - nums . get ( i + 1 ) ) ; nums . remove ( i + 1 ) ; currentOps . remove ( i ) ; } else { i ++ ; } } return nums . get ( 0 ) ; } 
List < Integer > generateIntegers ( int a , int b ) { int lower = Math . max ( 2 , Math . min ( a , b ) ) ; int upper = Math . min ( 8 , Math . max ( a , b ) ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = lower ; i <= upper ; i += 2 ) { result . add ( i ) ; } return result ; } 
boolean isStepNum ( int n ) { int prev_digit = - 1 ; while ( n > 0 ) { int cur_digit = n % 10 ; if ( prev_digit == - 1 ) { prev_digit = cur_digit ; } else { if ( Math . abs ( prev_digit - cur_digit ) != 1 ) { return false ; } prev_digit = cur_digit ; } n /= 10 ; } return true ; } 
int num_of_ways ( int n , int k ) { int p = 1 ; if ( k % 2 != 0 ) { p = - 1 ; } return ( ( int ) Math . pow ( ( n - 1 ) , k ) + p * ( n - 1 ) ) / n ; } 
List < Integer > findDivisors ( int n ) { List < Integer > v = new ArrayList < > ( ) ; for ( int i = 1 ; i <= ( int ) Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { v . add ( i ) ; } else { v . add ( i ) ; v . add ( n / i ) ; } } } return v ; } 
int egg_drop ( int n , int k ) { if ( k == 1 || k == 0 ) { return k ; } if ( n == 1 ) { return k ; } int min = Integer . MAX_VALUE ; for ( int x = 1 ; x <= k ; x ++ ) { int res = Math . max ( egg_drop ( n - 1 , x - 1 ) , egg_drop ( n , k - x ) ) ; if ( res < min ) { min = res ; } } return min + 1 ; } 
boolean isPowerOfTwo ( int n ) { return Math . ceil ( Math . log ( n ) / Math . log ( 2 ) ) == Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ; } 
String shortest_palindrome ( String s ) { int n = s . length ( ) ; List < String > v = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i ; int r = i ; String ans1 = "" ; String ans2 = "" ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans1 += s . charAt ( l ) ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans2 += s . charAt ( l ) ; l -- ; r ++ ; } v . add ( ans1 ) ; v . add ( ans2 ) ; } String ans = v . get ( 0 ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( ! v . get ( i ) . isEmpty ( ) ) { ans = ans . length ( ) < v . get ( i ) . length ( ) ? ans : v . get ( i ) ; } } return ans ; } 
int minimumAdjacentDifference ( int [ ] a , int n , int k ) { int min_diff = Integer . MAX_VALUE ; for ( int i = 0 ; i < k + 1 ; i ++ ) { int max_diff = Integer . MIN_VALUE ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p < i + j + 1 ; p ++ ) { max_diff = Math . max ( max_diff , a [ p + 1 ] - a [ p ] ) ; } } min_diff = Math . min ( min_diff , max_diff ) ; } return min_diff ; } 
int cal ( int [ ] a , int mid ) { int chocolate = 0 ; for ( int i : a ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; } 
boolean check ( int v , int [ ] a , int m ) { int tec = 0 ; int ans = 0 ; int [ ] b = new int [ a . length + 3 ] ; for ( int i = 0 ; i < a . length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans += mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; } 
int largest_num ( int [ ] arr ) { int res = 0 ; Arrays . sort ( arr ) ; int l = 0 ; int r = arr . length - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) { l ++ ; } else { r -- ; } } return res ; } 
int binarySearch ( int [ ] p , int n ) { int i = 0 ; int j = p . length - 1 ; int index = - 1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; } 
int findMinLength ( int [ ] arr ) { int index = arr . length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; } 
int min_digits ( int n , int k ) { int digits_num = ( int ) Math . floor ( Math . log10 ( n ) + 1 ) ; int temp_sum = 0 ; int temp = digits_num ; int result = 0 ; int x = 0 ; int v = 0 ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = n / ( int ) Math . pow ( 10 , temp - 1 ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v /= 10 ; v += 1 ; result = v * ( int ) Math . pow ( 10 , temp ) ; break ; } temp -= 1 ; } x = result - n ; } return x ; } 
int check_for_perfect_square ( int [ ] arr , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; } 
int minFlips ( int [ ] [ ] mat , String s ) { int n = mat . length ; int m = mat [ 0 ] . length ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != ( int ) s . charAt ( i + j ) - ( int ) '0' ) { count ++ ; } } } return count ; } 
List < List < Integer > > constructTree ( int n , int [ ] [ ] edges ) { List < List < Integer > > adjl = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { adjl . add ( new ArrayList < > ( ) ) ; } for ( int [ ] e : edges ) { int u = e [ 0 ] ; int v = e [ 1 ] ; adjl . get ( u ) . add ( v ) ; adjl . get ( v ) . add ( u ) ; } return adjl ; } 
int findSumOfValues ( int v , int [ ] parent , int [ ] valuesChildren ) { int curNode = v ; int sum = 0 ; while ( curNode != - 1 ) { sum += valuesChildren [ curNode ] ; curNode = parent [ curNode ] ; } return sum ; } 
int getDistinct ( int d , int count ) { int num = 0 ; count = ( int ) Math . pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; } 
boolean isIncreasing ( int [ ] arr ) { for ( int i = 0 ; i < arr . length - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; } 
int min_adj_swaps ( int [ ] [ ] mat ) { int n = mat . length ; int [ ] cnt_zero = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 ; j -- ) { if ( mat [ i ] [ j ] != 0 ) { break ; } cnt_zero [ i ] ++ ; } } int cnt_swaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cnt_zero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) { return - 1 ; } while ( first > i ) { int temp = cnt_zero [ first ] ; cnt_zero [ first ] = cnt_zero [ first - 1 ] ; cnt_zero [ first - 1 ] = temp ; first -- ; cnt_swaps ++ ; } } } return cnt_swaps ; } 
int solve ( int [ ] values , int [ ] salary , int mod ) { int ret = 1 ; int amt = 0 ; Arrays . sort ( values ) ; Arrays . sort ( salary ) ; while ( salary . length > 0 ) { while ( values . length > 0 && values [ values . length - 1 ] >= salary [ salary . length - 1 ] ) { amt ++ ; values = Arrays . copyOfRange ( values , 0 , values . length - 1 ) ; } if ( amt == 0 ) { return 0 ; } ret *= amt ; amt -- ; ret %= mod ; salary = Arrays . copyOfRange ( salary , 0 , salary . length - 1 ) ; } return ret ; } 
int [ ] organize_in_order ( int [ ] vec , char [ ] op , int n ) { int [ ] result = new int [ n ] ; Arrays . sort ( vec ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result [ k ] = vec [ i ] ; i ++ ; } else { result [ k ] = vec [ j ] ; j -- ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; } 
int count_points ( int n , int m , int [ ] a , int [ ] b , int x , int y ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; } 
boolean are_same ( int [ ] a , int [ ] b ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; return Arrays . equals ( a , b ) ; } 
int count_number_of_strings ( String s ) { int n = s . length ( ) - 1 ; int count = ( int ) Math . pow ( 2 , n ) ; return count ; } 
ArrayList < Integer > prime_power ( int x ) { ArrayList < Integer > prime_pow = new ArrayList < Integer > ( ) ; for ( int i = 2 ; i <= x ; i ++ ) { if ( i * i > x + 1 ) { break ; } if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } prime_pow . add ( p ) ; } } if ( x > 1 ) { prime_pow . add ( x ) ; } return prime_pow ; } 
int is_perfect ( int n0 ) { double n = Math . sqrt ( n0 ) ; if ( Math . floor ( n ) != Math . ceil ( n ) ) { return 0 ; } return 1 ; } 
int find_sum ( int l , int r ) { ArrayList < Integer > arr = new ArrayList < Integer > ( ) ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . add ( i + x ) ; if ( i + 1 <= r ) { arr . add ( i + 1 + x ) ; } x *= - 1 ; i += 2 ; } int sum = 0 ; for ( int j = l ; j <= r ; j ++ ) { sum += arr . get ( j ) ; } return sum ; } 
int results ( int n , int k ) { return ( int ) Math . round ( Math . pow ( n , 1.0 / Math . pow ( 2 , k ) ) ) ; } 
ArrayList < Integer > factors ( int n ) { ArrayList < Integer > v = new ArrayList < Integer > ( ) ; v . add ( 1 ) ; for ( int i = 2 ; i <= ( int ) Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . add ( i ) ; if ( n / i != i ) { v . add ( n / i ) ; } } } return v ; } 
int smallest_num ( int n ) { double x = Math . pow ( 10.0 , ( n - 1 ) / 2.0 ) ; return ( int ) Math . ceil ( x ) ; } 
int smallest ( String s ) { int [ ] a = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = s . charAt ( i ) - '0' ; } List < Integer > b = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] % 2 != 0 ) { b . add ( a [ i ] ) ; } } Collections . sort ( b ) ; if ( b . size ( ) > 1 ) { return b . get ( 0 ) * 10 + b . get ( 1 ) ; } return - 1 ; } 
double [ ] diagonals ( double a , double b , double c , double d ) { double [ ] ans = new double [ 2 ] ; ans [ 0 ] = Math . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ; ans [ 1 ] = Math . sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ; return ans ; } 
int find_number_of_digits ( int n , int base ) { double dig = Math . floor ( Math . log ( n ) / Math . log ( base ) ) + 1 ; return ( int ) dig ; } 
double n_gon ( int n ) { double pro_angle_var = 0 ; if ( n % 4 == 0 ) { pro_angle_var = Math . PI * ( 180.0 / n ) / 180 ; } else { pro_angle_var = Math . PI * ( 180.0 / ( 2 * n ) ) / 180 ; } double neg_x = 1.0e+99 ; double pos_x = - 1.0e+99 ; double neg_y = 1.0e+99 ; double pos_y = - 1.0e+99 ; for ( int j = 0 ; j < n ; j ++ ) { double px = Math . cos ( 2 * Math . PI * j / n + pro_angle_var ) ; double py = Math . sin ( 2 * Math . PI * j / n + pro_angle_var ) ; neg_x = Math . min ( neg_x , px ) ; pos_x = Math . max ( pos_x , px ) ; neg_y = Math . min ( neg_y , py ) ; pos_y = Math . max ( pos_y , py ) ; } double opt2 = Math . max ( pos_x - neg_x , pos_y - neg_y ) ; return opt2 / Math . sin ( Math . PI / n ) / 2 ; } 
int find_max_k ( int n ) { int p = ( int ) Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ; return ( int ) Math . pow ( 2 , p ) ; } 
int nth_fibo ( int n ) { double a = ( Math . sqrt ( 5 ) + 1 ) / 2 ; double b = ( - Math . sqrt ( 5 ) + 1 ) / 2 ; double r = Math . sqrt ( 5 ) ; double ans = ( Math . pow ( a , n ) - Math . pow ( b , n ) ) / r ; return ( int ) ans ; } 
double find_prob ( int l , int r ) { double count_of_ps = Math . floor ( Math . sqrt ( r ) ) - Math . ceil ( Math . sqrt ( l ) ) + 1 ; double total = r - l + 1 ; double prob = count_of_ps / total ; return prob ; } 
int previousFibonacci ( int n ) { double a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return Math . round ( ( float ) a ) ; } 
ArrayList < Integer > dist_prime ( int [ ] arr , ArrayList < Integer > all_primes ) { ArrayList < Integer > list1 = new ArrayList < Integer > ( ) ; for ( int i : all_primes ) { for ( int j : arr ) { if ( j % i == 0 ) { list1 . add ( i ) ; break ; } } } return list1 ; } 
List < Integer > getArray ( int n ) { List < Integer > ans = new ArrayList < > ( ) ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans . add ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; } 
int maximum_length ( int [ ] a ) { int [ ] counts = new int [ 11 ] ; int ans = 0 ; for ( int index = 0 ; index < a . length ; index ++ ) { counts [ a [ index ] ] ++ ; } List < Integer > k = new ArrayList < > ( ) ; for ( int i : counts ) { if ( i != 0 ) { k . add ( i ) ; } } Collections . sort ( k ) ; if ( k . size ( ) == 1 || ( k . get ( 0 ) == k . get ( k . size ( ) - 2 ) && k . get ( k . size ( ) - 1 ) - k . get ( k . size ( ) - 2 ) == 1 ) || ( k . get ( 0 ) == 1 && k . get ( 1 ) == k . get ( k . size ( ) - 1 ) ) ) { ans = a . length ; } return ans + 1 ; } 
int max_edges ( int n ) { double edges = Math . floor ( n * n / 4 )  return ( int ) edges ; } 
int find_k ( int n , int k ) { ArrayList < Integer > a = new ArrayList < Integer > ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a . add ( i ) ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a . add ( i ) ; } } return a . get ( k - 1 ) ; } 
boolean is_keith ( int x , int temp ) { List < Integer > terms = new ArrayList < > ( ) ; int n = 0 ; while ( temp > 0 ) { terms . add ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } Collections . reverse ( terms ) ; int next_term = 0 , i = n ; while ( next_term < x ) { next_term = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { next_term += terms . get ( i - j ) ; } terms . add ( next_term ) ; i ++ ; } return next_term == x ; } 
boolean factors ( int n , int k ) { List < Integer > v = new ArrayList < > ( ) ; while ( n % 2 == 0 ) { v . add ( 2 ) ; n /= 2 ; } if ( v . size ( ) >= k ) { return true ; } for ( int i = 3 ; i <= n ; i += 2 ) { if ( i * i > n ) { break ; } while ( n % i == 0 ) { n /= i ; v . add ( i ) ; } if ( v . size ( ) >= k ) { return true ; } } if ( n > 2 ) { v . add ( n ) ; } if ( v . size ( ) >= k ) { return true ; } return false ; } 
