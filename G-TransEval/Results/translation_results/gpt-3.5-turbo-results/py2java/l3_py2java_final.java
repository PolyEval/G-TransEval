ArrayList < String > separate_paren_groups ( String paren_string ) { ArrayList < String > all_parens = new ArrayList < > ( ) ; ArrayList < Character > current_paren = new ArrayList < > ( ) ; int current_depth = 0 ; for ( int i = 0 ; i < paren_string . length ( ) ; i ++ ) { char c = paren_string . charAt ( i ) ; if ( c == '(' ) { current_depth ++ ; current_paren . add ( c ) ; } else if ( c == ')' ) { current_depth -- ; current_paren . add ( c ) ; if ( current_depth == 0 ) { all_parens . add ( String . valueOf ( current_paren ) ) ; current_paren . clear ( ) ; } } } return all_parens ; } 
List < Integer > parse_nested_parens ( String paren_string ) { List < Integer > all_levels = new ArrayList < Integer > ( ) ; int level = 0 ; int max_level = 0 ; for ( int i = 0 ; i < paren_string . length ( ) ; i ++ ) { char chr = paren_string . charAt ( i ) ; if ( chr == '(' ) { level ++ ; if ( level > max_level ) { max_level = level ; } } if ( chr == ')' ) { level -- ; if ( level == 0 ) { all_levels . add ( max_level ) ; max_level = 0 ; } } } return all_levels ; } 
List < String > filterBySubstring ( List < String > strings , String substring ) { List < String > result = new ArrayList < > ( ) ; for ( String s : strings ) { if ( s . contains ( substring ) ) { result . add ( s ) ; } } return result ; } 
List < Integer > rollingMax ( List < Integer > numbers ) { int runningMax = 0 ; List < Integer > result = new ArrayList < > ( ) ; for ( int n : numbers ) { if ( n > runningMax ) { runningMax = n ; } result . add ( runningMax ) ; } return result ; } 
String makePalindrome ( String s ) { if ( s . isEmpty ( ) ) { return "" ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String r_str = s . substring ( i ) ; if ( r_str . equals ( new StringBuilder ( r_str ) . reverse ( ) . toString ( ) ) ) { String n_str = s . substring ( 0 , i ) ; StringBuilder n2_str = new StringBuilder ( n_str ) . reverse ( ) ; return s + n2_str ; } } return s . substring ( 0 , s . length ( ) - 1 ) + new StringBuilder ( s ) . reverse ( ) . toString ( ) ; } 
String stringXor ( String a , String b ) { List < String > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) { result . add ( "0" ) ; } else { result . add ( "1" ) ; } } return String . join ( "" , result ) ; } 
String longest ( String [ ] strings ) { if ( strings == null || strings . length == 0 ) { return "" ; } int maxLen = Arrays . stream ( strings ) . mapToInt ( String :: length ) . max ( ) . getAsInt ( ) ; for ( String s : strings ) { if ( s . length ( ) == maxLen ) { return s ; } } return "" ; } 
String string_sequence ( int n ) { ArrayList < String > s = new ArrayList < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( Integer . toString ( i ) ) ; } s . add ( " " ) ; s . add ( Integer . toString ( n ) ) ; return String . join ( "" , s ) ; } 
int countDistinctCharacters ( String s ) { Set < Character > distinct = new HashSet < > ( ) ; for ( char c : s . toLowerCase ( ) . toCharArray ( ) ) { distinct . add ( c ) ; } return distinct . size ( ) ; } 
int how_many_times ( String s , String sub ) { int times = 0 ; for ( int i = 0 ; i < s . length ( ) - sub . length ( ) + 1 ; i ++ ) { if ( s . substring ( i , i + sub . length ( ) ) . equals ( sub ) ) { times += 1 ; } } return times ; } 
String sort_numbers ( String numbers ) { Map < String , Integer > to_num = new HashMap < > ( ) ; to_num . put ( "zero" , 0 ) ; to_num . put ( "one" , 1 ) ; to_num . put ( "two" , 2 ) ; to_num . put ( "three" , 3 ) ; to_num . put ( "four" , 4 ) ; to_num . put ( "five" , 5 ) ; to_num . put ( "six" , 6 ) ; to_num . put ( "seven" , 7 ) ; to_num . put ( "eight" , 8 ) ; to_num . put ( "nine" , 9 ) ; Map < Integer , String > from_num = new HashMap < > ( ) ; from_num . put ( 0 , "zero" ) ; from_num . put ( 1 , "one" ) ; from_num . put ( 2 , "two" ) ; from_num . put ( 3 , "three" ) ; from_num . put ( 4 , "four" ) ; from_num . put ( 5 , "five" ) ; from_num . put ( 6 , "six" ) ; from_num . put ( 7 , "seven" ) ; from_num . put ( 8 , "eight" ) ; from_num . put ( 9 , "nine" ) ; List < Integer > ints = new ArrayList < > ( ) ; List < String > current = new ArrayList < > ( ) ; for ( int i = 0 ; i < numbers . length ( ) + 1 ; i ++ ) { if ( i == numbers . length ( ) || numbers . charAt ( i ) == ' ' ) { if ( String . join ( "" , current ) . equals ( "" ) ) { continue ; } if ( to_num . containsKey ( String . join ( "" , current ) ) ) { ints . add ( to_num . get ( String . join ( "" , current ) ) ) ; current . clear ( ) ; } } else { current . add ( Character . toString ( numbers . charAt ( i ) ) ) ; } } Collections . sort ( ints ) ; List < String > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { result . add ( from_num . get ( ints . get ( i ) ) ) ; if ( i != ints . size ( ) - 1 ) { result . add ( " " ) ; } } return String . join ( "" , result ) ; } 
int [ ] find_closest_elements ( int [ ] numbers ) { int [ ] closest_pair = { numbers [ 0 ] , numbers [ 1 ] } ; int distance = Math . abs ( closest_pair [ 0 ] - closest_pair [ 1 ] ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { for ( int j = i + 1 ; j < numbers . length ; j ++ ) { if ( Math . abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closest_pair [ 0 ] = numbers [ i ] ; closest_pair [ 1 ] = numbers [ j ] ; distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; } } } Arrays . sort ( closest_pair ) ; return closest_pair ; } 
ArrayList < Double > rescaleToUnit ( ArrayList < Double > numbers ) { double minNum = Collections . min ( numbers ) ; double maxNum = Collections . max ( numbers ) ; ArrayList < Double > result = new ArrayList < > ( ) ; for ( double n : numbers ) { result . add ( ( n - minNum ) / ( maxNum - minNum ) ) ; } return result ; } 
List < Integer > filterIntegers ( List < Object > values ) { List < Integer > result = new ArrayList < > ( ) ; for ( Object e : values ) { if ( e instanceof Integer ) { result . add ( ( Integer ) e ) ; } } return result ; } 
List < Integer > removeDuplicates ( int [ ] numbers ) { Map < Integer , Integer > counter = new HashMap < > ( ) ; for ( int i : numbers ) { int count = counter . getOrDefault ( i , 0 ) ; counter . put ( i , count + 1 ) ; } List < Integer > result = new ArrayList < > ( ) ; for ( int i : numbers ) { if ( counter . get ( i ) == 1 ) { result . add ( i ) ; } } return result ; } 
String flip_case ( String s ) { String result = "" ; for ( char c : s . toCharArray ( ) ) { if ( Character . isLowerCase ( c ) ) { result += Character . toUpperCase ( c ) ; } else { result += Character . toLowerCase ( c ) ; } } return result ; } 
ArrayList < String > filterByPrefix ( ArrayList < String > strings , String prefix ) { ArrayList < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < strings . size ( ) ; i ++ ) { if ( strings . get ( i ) . startsWith ( prefix ) ) { result . add ( strings . get ( i ) ) ; } } return result ; } 
double find_zero ( double [ ] xs ) { double ans = 0 ; double value = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) { value += xs [ i ] * Math . pow ( ans , i ) ; } while ( Math . abs ( value ) > 1e-6 ) { double driv = 0 ; for ( int i = 1 ; i < xs . length ; i ++ ) { driv += xs [ i ] * Math . pow ( ans , ( i - 1 ) ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) { value += xs [ i ] * Math . pow ( ans , i ) ; } } return ans ; } 
List < Integer > sortThird ( List < Integer > l ) { List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i += 3 ) { thirds . add ( l . get ( i ) ) ; } Collections . sort ( thirds ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 3 == 0 ) { result . add ( thirds . get ( i / 3 ) ) ; } else { result . add ( l . get ( i ) ) ; } } return result ; } 
List < Integer > unique ( List < Integer > l ) { List < Integer > result = new ArrayList < > ( new HashSet < > ( l ) ) ; Collections . sort ( result ) ; return result ; } 
< T extends Comparable < T > > T max_element ( List < T > l ) { return Collections . max ( l ) ; } 
boolean triplesSumToZero ( int [ ] l ) { for ( int i = 0 ; i < l . length ; i ++ ) { for ( int j = i + 1 ; j < l . length ; j ++ ) { for ( int k = j + 1 ; k < l . length ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) { return true ; } } } } return false ; } 
int fib4 ( int n ) { ArrayList < Integer > results = new ArrayList < Integer > ( ) ; results . add ( 0 ) ; results . add ( 0 ) ; results . add ( 2 ) ; results . add ( 0 ) ; for ( int i = 4 ; i <= n ; i ++ ) { results . add ( results . get ( i - 4 ) + results . get ( i - 3 ) + results . get ( i - 2 ) + results . get ( i - 1 ) ) ; } return results . get ( n ) ; } 
boolean isPalindrome ( String text ) { String pr = new StringBuilder ( text ) . reverse ( ) . toString ( ) ; return pr . equals ( text ) ; } 
String removeVowels ( String text ) { List < Character > result = new ArrayList < > ( ) ; String vowels = "aeiou" ; for ( char ch : text . toCharArray ( ) ) { if ( ! vowels . contains ( Character . toString ( ch ) . toLowerCase ( ) ) ) { result . add ( ch ) ; } } StringBuilder builder = new StringBuilder ( result . size ( ) ) ; for ( Character ch : result ) { builder . append ( ch ) ; } return builder . toString ( ) ; } 
boolean sameChars ( String s0 , String s1 ) { Set < Character > set0 = new HashSet < Character > ( ) ; for ( char c : s0 . toCharArray ( ) ) { set0 . add ( c ) ; } Set < Character > set1 = new HashSet < Character > ( ) ; for ( char c : s1 . toCharArray ( ) ) { set1 . add ( c ) ; } return set0 . equals ( set1 ) ; } 
List < Integer > common ( List < Integer > l1 , List < Integer > l2 ) { Set < Integer > us = new HashSet < Integer > ( ) ; for ( Integer e1 : l1 ) { for ( Integer e2 : l2 ) { if ( e1 . equals ( e2 ) ) { us . add ( e1 ) ; } } } List < Integer > ret = new ArrayList < Integer > ( us ) ; Collections . sort ( ret ) ; return ret ; } 
boolean correct_bracketing ( String brackets ) { int depth = 0 ; for ( int i = 0 ; i < brackets . length ( ) ; i ++ ) { if ( brackets . charAt ( i ) == '(' ) { depth ++ ; } else { depth -- ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; } 
String circular_shift ( int x , int shift ) { String s = Integer . toString ( x ) ; if ( shift > s . length ( ) ) { return new StringBuilder ( s ) . reverse ( ) . toString ( ) ; } return s . substring ( s . length ( ) - shift ) + s . substring ( 0 , s . length ( ) - shift ) ; } 
int search ( int [ ] lst ) { HashMap < Integer , Integer > counter = new HashMap < Integer , Integer > ( ) ; for ( int i : lst ) { if ( counter . containsKey ( i ) ) { counter . put ( i , counter . get ( i ) + 1 ) ; } else { counter . put ( i , 1 ) ; } } int ans = - 1 ; for ( Map . Entry < Integer , Integer > entry : counter . entrySet ( ) ) { int key = entry . getKey ( ) ; int value = entry . getValue ( ) ; if ( value >= key && key > ans ) { ans = key ; } } return ans ; } 
int smallestChange ( int [ ] arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . length / 2 ; i ++ ) { if ( arr [ i ] != arr [ arr . length - i - 1 ] ) { ans ++ ; } } return ans ; } 
List < String > total_match ( List < String > lst1 , List < String > lst2 ) { int sum1 = 0 ; for ( String st : lst1 ) { sum1 += st . length ( ) ; } int sum2 = 0 ; for ( String st : lst2 ) { sum2 += st . length ( ) ; } return sum1 > sum2 ? lst2 : lst1 ; } 
boolean isHappy ( String s ) { if ( s . length ( ) < 3 ) { return false ; } for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) || s . charAt ( i ) == s . charAt ( i + 2 ) ) { return false ; } } return true ; } 
ArrayList < String > numericalLetterGrade ( double [ ] grades ) { ArrayList < String > letterGrade = new ArrayList < > ( ) ; for ( double gpa : grades ) { if ( gpa == 4.0 ) { letterGrade . add ( "A+" ) ; } else if ( gpa > 3.7 ) { letterGrade . add ( "A" ) ; } else if ( gpa > 3.3 ) { letterGrade . add ( "A-" ) ; } else if ( gpa > 3.0 ) { letterGrade . add ( "B+" ) ; } else if ( gpa > 2.7 ) { letterGrade . add ( "B" ) ; } else if ( gpa > 2.3 ) { letterGrade . add ( "B-" ) ; } else if ( gpa > 2.0 ) { letterGrade . add ( "C+" ) ; } else if ( gpa > 1.7 ) { letterGrade . add ( "C" ) ; } else if ( gpa > 1.3 ) { letterGrade . add ( "C-" ) ; } else if ( gpa > 1.0 ) { letterGrade . add ( "D+" ) ; } else if ( gpa > 0.7 ) { letterGrade . add ( "D" ) ; } else if ( gpa > 0.0 ) { letterGrade . add ( "D-" ) ; } else { letterGrade . add ( "E" ) ; } } return letterGrade ; } 
String solve ( int n ) { ArrayList < String > bi_str = new ArrayList < String > ( ) ; int sum = 0 ; for ( char c : Integer . toString ( n ) . toCharArray ( ) ) { sum += ( int ) c - ( int ) '0' ; } while ( sum > 0 ) { bi_str . add ( 0 , Integer . toString ( sum % 2 ) ) ; sum /= 2 ; } String result = "" ; for ( String s : bi_str ) { result += s ; } return result ; } 
String anti_shuffle ( String s ) { List < String > ret = new ArrayList < > ( ) ; List < String > current = new ArrayList < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == " " ) { Collections . sort ( current ) ; if ( ret . size ( ) > 0 ) { ret . add ( " " ) ; } ret . add ( String . join ( "" , current ) ) ; current . clear ( ) ; } else { current . add ( String . valueOf ( s . charAt ( i ) ) ) ; } } return String . join ( "" , ret ) ; } 
int [ ] sortArray ( int [ ] array ) { if ( array . length == 0 ) { return array ; } if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) { Arrays . sort ( array ) ; } else { Arrays . sort ( array ) ; int i = 0 , j = array . length - 1 ; while ( i < j ) { int temp = array [ i ] ; array [ i ] = array [ j ] ; array [ j ] = temp ; i ++ ; j -- ; } } return array ; } 
String encrypt ( String s ) { List < Character > ans = new ArrayList < > ( ) ; for ( char c : s . toCharArray ( ) ) { if ( Character . isAlphabetic ( c ) ) { ans . add ( ( char ) ( 'a' + ( c - 'a' + 4 ) % 26 ) ) ; } else { ans . add ( c ) ; } } StringBuilder result = new StringBuilder ( ) ; for ( char c : ans ) { result . append ( c ) ; } return result . toString ( ) ; } 
int is_bored ( String s ) { Boolean is_start = true ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char letter = s . charAt ( i ) ; if ( letter == '.' || letter == '?' || letter == '!' ) { is_start = true ; } else if ( is_start ) { if ( letter == ' ' ) { continue ; } if ( s . substring ( i , i + 2 ) . equals ( "I " ) ) { sum += 1 ; } is_start = false ; } } return sum ; } 
String encode ( String message ) { String vowels = "aeiouAEIOU" ; List < Character > ret = new ArrayList < > ( ) ; for ( char c : message . toCharArray ( ) ) { if ( Character . isUpperCase ( c ) ) { c = Character . toLowerCase ( c ) ; if ( vowels . indexOf ( c ) != - 1 ) { c = ( char ) ( ( 'a' + ( ( c - 'a' + 2 ) % 26 ) ) ) ; } } else if ( Character . isLowerCase ( c ) ) { c = Character . toUpperCase ( c ) ; if ( vowels . indexOf ( c ) != - 1 ) { c = ( char ) ( ( 'A' + ( ( c - 'A' + 2 ) % 26 ) ) ) ; } } ret . add ( c ) ; } StringBuilder result = new StringBuilder ( ret . size ( ) ) ; for ( Character c : ret ) { result . append ( c ) ; } return result . toString ( ) ; } 
int skjkasdkd ( ArrayList < Integer > lst ) { int largest = 0 ; for ( int n : lst ) { if ( n > largest ) { boolean prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } int sum = 0 ; String s = Integer . toString ( largest ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum += ( int ) s . charAt ( i ) - ( int ) '0' ; } return sum ; } 
boolean checkDictCase ( Map < String , String > dict ) { if ( dict == null || dict . isEmpty ( ) ) { return false ; } int isLower = 0 ; int isUpper = 0 ; for ( String key : dict . keySet ( ) ) { for ( char c : key . toCharArray ( ) ) { if ( Character . isLowerCase ( c ) ) { isLower = 1 ; } else if ( Character . isUpperCase ( c ) ) { isUpper = 1 ; } else { return false ; } } } return isLower + isUpper == 1 ; } 
int multiply ( int a , int b ) { return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ; } 
int count_upper ( String s ) { String u_vowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i += 2 ) { if ( u_vowel . contains ( String . valueOf ( s . charAt ( i ) ) ) ) { count ++ ; } } return count ; } 
ArrayList < String > by_length ( int [ ] arr ) { HashMap < Integer , String > num_to = new HashMap < Integer , String > ( ) ; num_to . put ( 1 , "One" ) ; num_to . put ( 2 , "Two" ) ; num_to . put ( 3 , "Three" ) ; num_to . put ( 4 , "Four" ) ; num_to . put ( 5 , "Five" ) ; num_to . put ( 6 , "Six" ) ; num_to . put ( 7 , "Seven" ) ; num_to . put ( 8 , "Eight" ) ; num_to . put ( 9 , "Nine" ) ; Arrays . sort ( arr ) ; ArrayList < String > new_arr = new ArrayList < String > ( ) ; for ( int i = arr . length - 1 ; i >= 0 ; i -- ) { int n = arr [ i ] ; if ( n >= 1 && n <= 9 ) { new_arr . add ( num_to . get ( n ) ) ; } } return new_arr ; } 
ArrayList < Integer > f ( int n ) { int sum = 0 ; int prod = 1 ; ArrayList < Integer > result = new ArrayList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) { result . add ( prod ) ; } else { result . add ( sum ) ; } } return result ; } 
int [ ] even_odd_palindrome ( int n ) { int even_count = 0 ; int odd_count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { String s = Integer . toString ( i ) ; String r_str = new StringBuilder ( s ) . reverse ( ) . toString ( ) ; if ( s . equals ( r_str ) ) { if ( i % 2 == 1 ) { odd_count ++ ; } else { even_count ++ ; } } } return new int [ ] { even_count , odd_count } ; } 
Map < Character , Integer > histogram ( String test ) { Map < Character , Integer > count = new HashMap < > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . length ( ) ; i ++ ) { if ( test . charAt ( i ) != ' ' ) { count . put ( test . charAt ( i ) , count . getOrDefault ( test . charAt ( i ) , 0 ) + 1 ) ; if ( count . get ( test . charAt ( i ) ) > max ) { max = count . get ( test . charAt ( i ) ) ; } } } Map < Character , Integer > result = new HashMap < > ( ) ; for ( Map . Entry < Character , Integer > entry : count . entrySet ( ) ) { if ( entry . getValue ( ) == max ) { result . put ( entry . getKey ( ) , entry . getValue ( ) ) ; } } return result ; } 
String [ ] reverse_delete ( String s , String c ) { List < Character > ret = new ArrayList < > ( ) ; for ( char ch : s . toCharArray ( ) ) { if ( c . indexOf ( ch ) == - 1 ) { ret . add ( ch ) ; } } String flag = "False" ; if ( String . join ( "" , ret ) . equals ( String . join ( "" , ret . stream ( ) . map ( e -> e . toString ( ) ) . collect ( Collectors . toList ( ) ) ) ) ) { flag = "True" ; } return new String [ ] { String . join ( "" , ret ) , flag } ; } 
int [ ] sortArray ( int [ ] arr ) { List < Integer > bin = new ArrayList < Integer > ( ) ; for ( int i : arr ) { int b = 0 ; int n = Math . abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . add ( b ) ; } for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 1 ; j < arr . length ; j ++ ) { if ( bin . get ( j ) < bin . get ( j - 1 ) || ( bin . get ( j ) == bin . get ( j - 1 ) && arr [ j ] < arr [ j - 1 ] ) ) { int tempBin = bin . get ( j ) ; bin . set ( j , bin . get ( j - 1 ) ) ; bin . set ( j - 1 , tempBin ) ; int tempArr = arr [ j ] ; arr [ j ] = arr [ j - 1 ] ; arr [ j - 1 ] = tempArr ; } } } return arr ; } 
String getClosestVowel ( String word ) { String vowels = "AEIOUaeiou" ; for ( int i = word . length ( ) - 2 ; i >= 1 ; i -- ) { if ( vowels . contains ( String . valueOf ( word . charAt ( i ) ) ) && ! vowels . contains ( String . valueOf ( word . charAt ( i + 1 ) ) ) && ! vowels . contains ( String . valueOf ( word . charAt ( i - 1 ) ) ) ) { return String . valueOf ( word . charAt ( i ) ) ; } } return "" ; } 
String matchParens ( String [ ] lst ) { ArrayList < String > strings = new ArrayList < String > ( ) ; strings . add ( lst [ 0 ] + lst [ 1 ] ) ; strings . add ( lst [ 1 ] + lst [ 0 ] ) ; for ( String l : strings ) { int count = 0 ; for ( char c : l . toCharArray ( ) ) { if ( c == '(' ) { count ++ ; } if ( c == ')' ) { count -- ; } if ( count < 0 ) { break ; } } if ( count == 0 ) { return "Yes" ; } } return "No" ; } 
List < Integer > maximum ( List < Integer > arr , int k ) { if ( k == 0 ) { return new ArrayList < Integer > ( ) ; } Collections . sort ( arr ) ; return arr . subList ( arr . size ( ) - k , arr . size ( ) ) ; } 
boolean valid_date ( String date ) { if ( date . length ( ) != 10 ) { return false ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 || i == 5 ) { if ( date . charAt ( i ) != '-' ) { return false ; } } else if ( ! Character . isDigit ( date . charAt ( i ) ) ) { return false ; } } int month = Integer . parseInt ( date . substring ( 0 , 2 ) ) ; int day = Integer . parseInt ( date . substring ( 3 , 5 ) ) ; int year = Integer . parseInt ( date . substring ( 6 , 10 ) ) ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) { return false ; } if ( day == 30 && month == 2 ) { return false ; } return true ; } 
ArrayList < String > splitWords ( String txt ) { ArrayList < String > result = new ArrayList < String > ( ) ; ArrayList < Character > current = new ArrayList < Character > ( ) ; boolean foundSpace = false ; boolean foundComma = false ; for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == ' ' ) { if ( foundSpace ) { if ( current . size ( ) > 0 ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : current ) { sb . append ( c ) ; } result . add ( sb . toString ( ) ) ; current . clear ( ) ; foundSpace = false ; } } } else { current . add ( txt . charAt ( i ) ) ; foundSpace = true ; } } if ( ! result . isEmpty ( ) ) { return result ; } for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == ',' ) { if ( foundComma ) { if ( current . size ( ) > 0 ) { StringBuilder sb = new StringBuilder ( ) ; for ( char c : current ) { sb . append ( c ) ; } result . add ( sb . toString ( ) ) ; current . clear ( ) ; foundComma = false ; } } } else { current . add ( txt . charAt ( i ) ) ; foundComma = true ; } } if ( ! result . isEmpty ( ) ) { return result ; } int num = 0 ; for ( char c : txt . toCharArray ( ) ) { if ( Character . isLowerCase ( c ) && c % 2 == 0 ) { num ++ ; } } result . add ( Integer . toString ( num ) ) ; return result ; } 
ArrayList < Integer > tri ( int n ) { ArrayList < Integer > tris = new ArrayList < Integer > ( ) ; if ( n == 0 ) { tris . add ( 1 ) ; return tris ; } tris . add ( 1 ) ; tris . add ( 3 ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { tris . add ( i / 2 + 1 ) ; } else { tris . add ( tris . get ( i - 1 ) + tris . get ( i - 2 ) + ( i + 3 ) / 2 ) ; } } return tris ; } 
boolean checkIfLastCharIsALetter ( String txt ) { if ( txt == null || txt . isEmpty ( ) ) { return false ; } return Character . isLetter ( txt . charAt ( txt . length ( ) - 1 ) ) && ( txt . length ( ) == 1 || ! Character . isLetter ( txt . charAt ( txt . length ( ) - 2 ) ) ) ; } 
int [ ] orderByPoints ( int [ ] nums ) { List < Integer > result = new ArrayList < > ( ) ; for ( int num : nums ) { String w = Integer . toString ( Math . abs ( num ) ) ; int sum = 0 ; for ( char c : w . toCharArray ( ) ) { sum += ( int ) c - ( int ) '0' ; } if ( num < 0 ) { sum -= 2 * ( ( int ) w . charAt ( 0 ) - ( int ) '0' ) ; } result . add ( sum ) ; } for ( int i = 0 ; i < nums . length ; i ++ ) { for ( int j = 1 ; j < nums . length ; j ++ ) { if ( result . get ( j - 1 ) > result . get ( j ) ) { int temp1 = result . get ( j - 1 ) ; result . set ( j - 1 , result . get ( j ) ) ; result . set ( j , temp1 ) ; int temp2 = nums [ j - 1 ] ; nums [ j - 1 ] = nums [ j ] ; nums [ j ] = temp2 ; } } } return nums ; } 
List < String > bf ( String planet1 , String planet2 ) { List < String > planets = Arrays . asList ( "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" ) ; int idx1 = planets . indexOf ( planet1 ) != - 1 ? planets . indexOf ( planet1 ) : - 1 ; int idx2 = planets . indexOf ( planet2 ) != - 1 ? planets . indexOf ( planet2 ) : - 1 ; if ( idx1 == - 1 || idx2 == - 1 || idx1 == idx2 ) { return new ArrayList < > ( ) ; } if ( idx1 > idx2 ) { return planets . subList ( idx2 + 1 , idx1 ) ; } else { return planets . subList ( idx1 + 1 , idx2 ) ; } } 
List < String > sorted_list_sum ( List < String > lst ) { List < String > result = new ArrayList < > ( ) ; for ( String i : lst ) { if ( i . length ( ) % 2 == 0 ) { result . add ( i ) ; } } Collections . sort ( result , new Comparator < String > ( ) { @ Override int compare ( String s1 , String s2 ) { if ( s1 . length ( ) != s2 . length ( ) ) { return s1 . length ( ) - s2 . length ( ) ; } else { return s1 . compareTo ( s2 ) ; } } 
boolean cycpattern_check ( String a , String b ) { for ( int i = 0 ; i < b . length ( ) ; i ++ ) { String rotate = b . substring ( i ) + b . substring ( 0 , i ) ; if ( a . contains ( rotate ) ) { return true ; } } return false ; } 
int [ ] even_odd_count ( int num ) { int even_count = 0 ; int odd_count = 0 ; for ( char c : Integer . toString ( Math . abs ( num ) ) . toCharArray ( ) ) { if ( Integer . parseInt ( String . valueOf ( c ) ) % 2 == 0 ) { even_count ++ ; } else { odd_count ++ ; } } return new int [ ] { even_count , odd_count } ; } 
String find_max ( String [ ] words ) { String max = "" ; int max_length = 0 ; for ( String word : words ) { ArrayList < Character > unique = new ArrayList < > ( ) ; for ( char w : word . toCharArray ( ) ) { if ( ! unique . contains ( w ) ) { unique . add ( w ) ; } } if ( unique . size ( ) > max_length || ( unique . size ( ) == max_length && word . compareTo ( max ) < 0 ) ) { max = word ; max_length = unique . size ( ) ; } } return max ; } 
String solve ( String s ) { boolean no_letter = true ; List < Character > result = new ArrayList < Character > ( ) ; for ( char ch : s . toCharArray ( ) ) { if ( Character . isUpperCase ( ch ) ) { ch = Character . toLowerCase ( ch ) ; no_letter = false ; } else if ( Character . isLowerCase ( ch ) ) { ch = Character . toUpperCase ( ch ) ; no_letter = false ; } result . add ( ch ) ; } if ( no_letter ) { return new StringBuilder ( String . join ( "" , result ) ) . reverse ( ) . toString ( ) ; } else { return String . join ( "" , result ) ; } } 
int most_frequent ( int [ ] arr , int n ) { HashMap < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) { hp . put ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . put ( arr [ i ] , 1 ) ; } } int max_count = 0 , res = - 1 ; for ( Map . Entry < Integer , Integer > entry : hp . entrySet ( ) ) { if ( max_count < entry . getValue ( ) ) { res = entry . getKey ( ) ; max_count = entry . getValue ( ) ; } } return res ; } 
int find ( int [ ] a , int [ ] b , int k , int n1 , int n2 ) { Set < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { s . add ( b [ i ] ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( ! s . contains ( a [ i ] ) ) { missing ++ ; } if ( missing == k ) { return a [ i ] ; } } return - 1 ; } 
int solve_query ( int start , int end , int [ ] arr ) { Map < Integer , Integer > frequency = new HashMap < > ( ) ; for ( int i = start ; i <= end ; i ++ ) { frequency . put ( arr [ i ] , frequency . getOrDefault ( arr [ i ] , 0 ) + 1 ) ; } int count = 0 ; for ( Map . Entry < Integer , Integer > entry : frequency . entrySet ( ) ) { if ( entry . getKey ( ) == entry . getValue ( ) ) { count ++ ; } } return count ; } 
int segregate ( int [ ] arr , int size ) { NEWLINE INDENT  int j = 0 ; NEWLINE for  ( int i = 0 ; i < size ; i ++ ) { NEWLINE INDENT  if ( arr [ i ] <= 0 ) { NEWLINE INDENT  int temp = arr [ i ] ; NEWLINE arr [ i ] = arr [ j ] ; NEWLINE arr [ j ] = temp ; NEWLINE j ++ ; NEWLINE } DEDENT  } DEDENT return j ; NEWLINE  } } 
int count_triplets ( int [ ] a , int n ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( a [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( s . contains ( xr ) && xr != a [ i ] && xr != a [ j ] ) { count ++ ; } } } return ( int ) ( count / 3 ) ; } 
int leastFrequent ( int [ ] arr , int n ) { HashMap < Integer , Integer > hp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) { hp . put ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . put ( arr [ i ] , 1 ) ; } } int minCount = n + 1 ; int res = - 1 ; for ( Map . Entry < Integer , Integer > entry : hp . entrySet ( ) ) { int value = entry . getValue ( ) ; if ( minCount >= value ) { res = entry . getKey ( ) ; minCount = value ; } } return res ; } 
int find_permutations ( int [ ] arr ) { int cnt = 0 ; int max_ind = - 1 , min_ind = 10000000 ; int n = arr . length ; HashMap < Integer , Integer > index_of = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { index_of . put ( arr [ i ] , i + 1 ) ; } for ( int i = 1 ; i < n + 1 ; i ++ ) { max_ind = Math . max ( max_ind , index_of . getOrDefault ( i , 0 ) ) ; min_ind = Math . min ( min_ind , index_of . getOrDefault ( i , 0 ) ) ; if ( max_ind - min_ind + 1 == i ) { cnt ++ ; } } return cnt ; } 
int form_quadruplets ( int [ ] arr , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; } 
String lexicographically_maximum ( String s , int n ) { HashMap < Character , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; } else { m . put ( s . charAt ( i ) , 1 ) ; } } List < Character > v = new ArrayList < > ( ) ; for ( int i = ( int ) 'a' ; i < ( int ) 'a' + Math . min ( n , 25 ) ; i ++ ) { if ( ! m . containsKey ( ( char ) i ) ) { v . add ( ( char ) i ) ; } } int j = v . size ( ) - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) >= ( char ) 'a' + Math . min ( n , 25 ) || ( m . containsKey ( s . charAt ( i ) ) && m . get ( s . charAt ( i ) ) > 1 ) ) { if ( v . get ( j ) < s . charAt ( i ) ) { continue ; } m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) - 1 ) ; s = s . substring ( 0 , i ) + v . get ( j ) + s . substring ( i + 1 ) ; j -= 1 ; } if ( j < 0 ) { break ; } } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) { break ; } if ( s . charAt ( i ) >= ( char ) 'a' + Math . min ( n , 25 ) || ( m . containsKey ( s . charAt ( i ) ) && m . get ( s . charAt ( i ) ) > 1 ) ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) - 1 ) ; s = s . substring ( 0 , i ) + v . get ( l ) + s . substring ( i + 1 ) ; l += 1 ; } } return s ; } 
int no_of_valid_kbers ( int k , int [ ] arr ) { Set < Integer > st = new HashSet < Integer > ( ) ; while ( k != 0 ) { st . add ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { int no = arr [ i ] ; boolean flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( ! st . contains ( digit ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag == true ) { count += 1 ; } } return count ; } 
int delCost ( String s , int [ ] cost ) { int ans = 0 ; Map < Character , Integer > forMax = new HashMap < > ( ) ; Map < Character , Integer > forTot = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! forMax . containsKey ( s . charAt ( i ) ) ) { forMax . put ( s . charAt ( i ) , cost [ i ] ) ; } else { forMax . put ( s . charAt ( i ) , Math . max ( cost [ i ] , forMax . get ( s . charAt ( i ) ) ) ) ; } if ( ! forTot . containsKey ( s . charAt ( i ) ) ) { forTot . put ( s . charAt ( i ) , cost [ i ] ) ; } else { forTot . put ( s . charAt ( i ) , forTot . get ( s . charAt ( i ) ) + cost [ i ] ) ; } } for ( Character key : forMax . keySet ( ) ) { ans += forTot . get ( key ) - forMax . get ( key ) ; } return ans ; } 
String [ ] replaceDuplicates ( String [ ] names ) { HashMap < String , Integer > hash = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < names . length ; i ++ ) { if ( ! hash . containsKey ( names [ i ] ) ) { hash . put ( names [ i ] , 1 ) ; } else { int count = hash . get ( names [ i ] ) ; hash . put ( names [ i ] , count + 1 ) ; names [ i ] += count ; } } return names ; } 
ArrayList < Integer > minmax_numbers ( int [ ] [ ] matrix , ArrayList < Integer > res ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < matrix . length ; i ++ ) { int min_r = Integer . MAX_VALUE ; for ( int j = 0 ; j < matrix [ i ] . length ; j ++ ) { min_r = Math . min ( min_r , matrix [ i ] [ j ] ) ; } s . add ( min_r ) ; } for ( int j = 0 ; j < matrix [ 0 ] . length ; j ++ ) { int max_c = Integer . MIN_VALUE ; for ( int i = 0 ; i < matrix . length ; i ++ ) { max_c = Math . max ( max_c , matrix [ i ] [ j ] ) ; } if ( s . contains ( max_c ) ) { res . add ( max_c ) ; } } return res ; } 
int length_of_longest_ap ( int [ ] a , int n ) { HashMap < Integer , HashMap < Integer , Integer > > dp = new HashMap < > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int d = a [ j ] - a [ i ] ; if ( dp . containsKey ( d ) ) { if ( dp . get ( d ) . containsKey ( i ) ) { dp . get ( d ) . put ( j , dp . get ( d ) . get ( i ) + 1 ) ; } else { dp . get ( d ) . put ( j , 2 ) ; } } else { dp . put ( d , new HashMap < > ( ) ) ; dp . get ( d ) . put ( j , 2 ) ; } res = Math . max ( res , dp . get ( d ) . get ( j ) ) ; } } return res ; } 
String find_kth_char ( int n , int k ) { char prev = 'A' ; String cur = "" ; if ( n == 1 ) { return "A" ; } for ( int i = 2 ; i <= n ; i ++ ) { cur = prev + "B" ; for ( int j = 0 ; j < prev . length ( ) ; j ++ ) { if ( prev . charAt ( j ) == 'A' ) { prev = prev . substring ( 0 , j ) + "B" + prev . substring ( j + 1 ) ; } else { prev = prev . substring ( 0 , j ) + "A" + prev . substring ( j + 1 ) ; } } prev = new StringBuilder ( prev ) . reverse ( ) . toString ( ) ; cur += prev ; prev = cur ; } return Character . toString ( cur . charAt ( k - 1 ) ) ; } 
int find_kth_largest ( int [ ] s , int k ) { int [ ] tmp = Arrays . copyOf ( s , s . length ) ; Arrays . sort ( tmp ) ; return tmp [ ( tmp . length - k ) ] ; } 
int sub_arraylen ( int [ ] arr , int n , int k ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; mp . put ( arr [ 0 ] , 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp . put ( arr [ i ] , i ) ; } int len = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) { continue ; } else { int x = arr [ i ] - k ; if ( x == 0 ) { len = Math . min ( len , i ) ; } if ( ! mp . containsKey ( x ) ) { continue ; } else { len = Math . min ( len , i - mp . get ( x ) ) ; } } } return len ; } 
int findMaxLen ( int [ ] a , int k ) { int n = a . length ; Arrays . sort ( a ) ; boolean [ ] vis = new boolean [ n ] ; Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a [ i ] , i ) ; } int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! vis [ i ] ) { int check = a [ i ] * k ; if ( mp . containsKey ( check ) ) { c ++ ; vis [ mp . get ( check ) ] = true ; } } } return n - c ; } 
ArrayList < Integer > min_distance_points ( int [ ] a , int k , int n ) { HashMap < Integer , Integer > m = new HashMap < > ( ) ; ArrayList < Integer > q = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . put ( a [ i ] , 1 ) ; q . add ( a [ i ] ) ; } ArrayList < Integer > ans = new ArrayList < > ( ) ; while ( k > 0 ) { int x = q . get ( 0 ) ; q . remove ( 0 ) ; if ( ! m . containsKey ( x - 1 ) && k > 0 ) { m . put ( x - 1 , 1 ) ; q . add ( x - 1 ) ; ans . add ( x - 1 ) ; k -- ; } if ( ! m . containsKey ( x + 1 ) && k > 0 ) { m . put ( x + 1 , 1 ) ; q . add ( x + 1 ) ; ans . add ( x + 1 ) ; k -- ; } } return ans ; } 
boolean isValidLen ( String s , int length , int k ) { int n = s . length ( ) ; HashMap < Character , Integer > mp = new HashMap < > ( ) ; int right = 0 ; while ( right < length ) { if ( mp . containsKey ( s . charAt ( right ) ) ) { mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; } else { mp . put ( s . charAt ( right ) , 1 ) ; } right ++ ; } if ( mp . size ( ) <= k ) { return true ; } while ( right < n ) { if ( mp . containsKey ( s . charAt ( right ) ) ) { mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; } else { mp . put ( s . charAt ( right ) , 1 ) ; } mp . put ( s . charAt ( right - length ) , mp . get ( s . charAt ( right - length ) ) - 1 ) ; if ( mp . get ( s . charAt ( right - length ) ) == 0 ) { mp . remove ( s . charAt ( right - length ) ) ; } if ( mp . size ( ) <= k ) { return true ; } right ++ ; } return mp . size ( ) <= k ; } 
int partition ( int [ ] arr , int low , int high ) { int pivot = arr [ high ] ; int i = low - 1 ; for ( int j = low ; j < high ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } int temp = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ high ] ; arr [ high ] = temp ; return i + 1 ; } 
int strScore ( String [ ] strs , String s , int n ) { HashMap < String , Integer > m = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . put ( strs [ i ] , i + 1 ) ; } if ( ! m . containsKey ( s ) ) { return 0 ; } int score = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { score += s . charAt ( i ) - 'a' + 1 ; } score = score * m . get ( s ) ; return score ; } 
ArrayList < Integer > count_ele ( ArrayList < Integer > s , int [ ] a , int n ) { HashMap < Integer , Boolean > mp = new HashMap < Integer , Boolean > ( ) ; ArrayList < Integer > ans = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; if ( mp . containsKey ( num ) ) { ans . add ( 0 ) ; } else { int cnt = 0 ; while ( s . get ( 0 ) != num ) { mp . put ( s . get ( 0 ) , true ) ; s . remove ( 0 ) ; cnt ++ ; } s . remove ( 0 ) ; cnt ++ ; ans . add ( cnt ) ; } } return ans ; } 
int maxDistinctChar ( String s , int n , int k ) { Map < Character , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { char c = s . charAt ( i ) ; freq . put ( c , freq . getOrDefault ( c , 0 ) + 1 ) ; } List < Integer > v = new ArrayList < > ( freq . values ( ) ) ; Collections . sort ( v ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) - 1 , k ) ; v . set ( i , v . get ( i ) - mn ) ; k -= mn ; if ( k <= 0 ) { break ; } } if ( k > 0 ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) , k ) ; v . set ( i , v . get ( i ) - mn ) ; k -= mn ; if ( k <= 0 ) { break ; } } } int res = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . get ( i ) == 1 ) { res ++ ; } } return res ; } 
int find_kth ( int [ ] arr , int n , int k ) { HashMap < Integer , Integer > missing = new HashMap < > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . put ( arr [ i ] , 1 ) ; } int max_m = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int min_m = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; for ( int i = min_m + 1 ; i < max_m ; i ++ ) { if ( ! missing . containsKey ( i ) ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; } 
boolean almostSort ( int [ ] a , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { int temp = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = temp ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { return false ; } } return true ; } 
int maximum_sum ( String s , int n , int k ) { int sum = 0 ; int [ ] freq = new int [ 256 ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ ( int ) s . charAt ( i ) ] ++ ; } Arrays . sort ( freq ) ; for ( int i = 255 ; i >= 0 ; i -- ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; } 
int findMinOperations ( int [ ] arr , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int j = i ; j < n ; j += k ) { freq . put ( arr [ j ] , freq . getOrDefault ( arr [ j ] , 0 ) + 1 ) ; } int max1 = 0 ; int num = 0 ; for ( Map . Entry < Integer , Integer > entry : freq . entrySet ( ) ) { int value = entry . getValue ( ) ; if ( value > max1 ) { max1 = value ; num = entry . getKey ( ) ; } } for ( Map . Entry < Integer , Integer > entry : freq . entrySet ( ) ) { int key = entry . getKey ( ) ; int value = entry . getValue ( ) ; if ( key != num ) { operations += value ; } } } return operations ; } 
ArrayList < String > subString ( String s , int n ) { ArrayList < String > v = new ArrayList < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int len = 1 ; len <= n - i ; len ++ ) { String find = s . substring ( i , i + len ) ; v . add ( find ) ; } } return v ; } 
boolean checkUniqueFrequency ( int [ ] arr , int n ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq . put ( arr [ i ] , freq . getOrDefault ( arr [ i ] , 0 ) + 1 ) ; } HashSet < Integer > uniqueFreq = new HashSet < > ( ) ; for ( int value : freq . values ( ) ) { if ( uniqueFreq . contains ( value ) ) { return false ; } else { uniqueFreq . add ( value ) ; } } return true ; } 
int minCost ( String str1 , String str2 , int n ) { int cost = 0 ; char [ ] tmp = str1 . toCharArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 . charAt ( i ) ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 . charAt ( i + 1 ) ) { char temp = tmp [ i ] ; tmp [ i ] = tmp [ i + 1 ] ; tmp [ i + 1 ] = temp ; cost ++ ; } else { cost ++ ; } } } return cost ; } 
boolean is_valid_num ( String x ) { Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { int ord = x . charAt ( i ) - '0' ; if ( mp . containsKey ( ord ) ) { return false ; } else if ( ord > 5 ) { return false ; } else { mp . put ( ord , 1 ) ; } } return true ; } 
int minimize_diff ( int [ ] arr , int n , int k ) { int max_element = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int min_element = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; if ( max_element - min_element <= k ) { return max_element - min_element ; } int avg = ( max_element + min_element ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max_element = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; min_element = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; return max_element - min_element ; } 
int getMinCost ( int [ ] arr , int n ) { int min_ele = arr [ 0 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( min_ele > arr [ i ] ) { min_ele = arr [ i ] ; } } return min_ele * ( n - 1 ) ; } 
boolean possibility ( int [ ] m , int length , String s ) { int count_odd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( m [ s . charAt ( i ) - '0' ] & 1 ) == 1 ) { count_odd += 1 ; } } if ( count_odd > 1 ) { return false ; } else { return true ; } } 
int minimum_cost_of_breaking ( int [ ] x , int [ ] y , int m , int n ) { int res = 0 ; Arrays . sort ( x ) ; Arrays . sort ( y ) ; int hzntl = 1 ; int vert = 1 ; int i = 0 ; int j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += x [ i ] ; i ++ ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y [ j ] ; j ++ ; } res += total * hzntl ; return res ; } 
int findMaximumScore ( int [ ] a , int n ) { Map < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( a [ i ] ) ) { freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; } else { freq . put ( a [ i ] , 1 ) ; } } int [ ] dp = new int [ Collections . max ( Arrays . asList ( a ) ) + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = freq . getOrDefault ( 1 , 0 ) ; for ( int i = 2 ; i < dp . length ; i ++ ) { dp [ i ] = Math . max ( dp [ i - 1 ] , dp [ i - 2 ] + freq . getOrDefault ( i , 0 ) * i ) ; } return dp [ dp . length - 1 ] ; } 
int countWays ( String s , String t , int k , int mod ) { int n = s . length ( ) ; int a = 0 ; int b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String p = s . substring ( i , n ) + s . substring ( 0 , i ) ; if ( p . equals ( t ) ) { a ++ ; } else { b ++ ; } } int [ ] dp1 = new int [ k + 1 ] ; int [ ] dp2 = new int [ k + 1 ] ; if ( s . equals ( t ) ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * b ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; } return dp1 [ k ] ; } 
int findSubarraySum ( int [ ] arr , int n , int k ) { Map < Integer , Integer > prevSum = new HashMap < > ( ) ; int res = 0 ; int currSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { currSum += arr [ i ] ; if ( currSum == k ) { res ++ ; } if ( prevSum . containsKey ( currSum - k ) ) { res += prevSum . get ( currSum - k ) ; } prevSum . put ( currSum , prevSum . getOrDefault ( currSum , 0 ) + 1 ) ; } return res ; } 
int maximum_occurrence ( String s ) { int n = s . length ( ) ; Map < String , Integer > freq = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String temp = "" ; temp += s . charAt ( i ) ; freq . put ( temp , freq . getOrDefault ( temp , 0 ) + 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { String temp = "" ; temp += s . charAt ( i ) ; temp += s . charAt ( j ) ; freq . put ( temp , freq . getOrDefault ( temp , 0 ) + 1 ) ; } } int answer = Integer . MIN_VALUE ; for ( Map . Entry < String , Integer > entry : freq . entrySet ( ) ) { answer = Math . max ( answer , entry . getValue ( ) ) ; } return answer ; } 
int countCharacters ( String [ ] strings , String chars ) { int res = 0 ; Map < Character , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < chars . length ( ) ; i ++ ) { char c = chars . charAt ( i ) ; freq . put ( c , freq . getOrDefault ( c , 0 ) + 1 ) ; } for ( String st : strings ) { boolean flag = true ; for ( char c : st . toCharArray ( ) ) { if ( ! freq . containsKey ( c ) ) { flag = false ; break ; } } if ( flag ) { res += st . length ( ) ; } } return res ; } 
int distinctSubstring ( String p , String q , int k , int n ) { Set < String > ss = new HashSet < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; String s = "" ; for ( int j = i ; j < n ; j ++ ) { int pos = ( int ) p . charAt ( j ) - ( int ) 'a' ; sum += ( int ) q . charAt ( pos ) - ( int ) '0' ; s += p . charAt ( j ) ; if ( sum <= k ) { ss . add ( s ) ; } else { break ; } } } return ss . size ( ) ; } 
int unique_morse_rep ( String [ ] arr ) { String [ ] morse_code = { ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , "...." , ".." , ".---" , "-.-" , ".-.." , "--" , "-." , "---" , ".--." , "--.-" , ".-." , "..." , "-" , "..-" , "...-" , ".--" , "-..-" , "-.--" , "--.." } ; Set < String > st = new HashSet < > ( ) ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { String temp = "" ; int m = arr [ i ] . length ( ) ; for ( int j = 0 ; j < m ; j ++ ) { temp += morse_code [ arr [ i ] . charAt ( j ) - 'a' ] ; } st . add ( temp ) ; } return st . size ( ) ; } 
int count_substrings ( String str , int k ) { int n = str . length ( ) ; int answer = 0 ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( ! map . containsKey ( str . charAt ( i ) ) ) { map . put ( str . charAt ( i ) , 1 ) ; } else { map . put ( str . charAt ( i ) , map . get ( str . charAt ( i ) ) + 1 ) ; } if ( map . size ( ) == k ) { answer ++ ; } } for ( int i = k ; i < n ; i ++ ) { if ( ! map . containsKey ( str . charAt ( i ) ) ) { map . put ( str . charAt ( i ) , 1 ) ; } else { map . put ( str . charAt ( i ) , map . get ( str . charAt ( i ) ) + 1 ) ; } map . put ( str . charAt ( i - k ) , map . get ( str . charAt ( i - k ) ) - 1 ) ; if ( map . get ( str . charAt ( i - k ) ) == 0 ) { map . remove ( str . charAt ( i - k ) ) ; } if ( map . size ( ) == k ) { answer ++ ; } } return answer ; } 
boolean can_construct ( String s , int k ) { HashMap < Character , Integer > m = new HashMap < > ( ) ; int p = 0 ; if ( s . length ( ) == k ) { return true ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { m . put ( s . charAt ( i ) , m . getOrDefault ( s . charAt ( i ) , 0 ) + 1 ) ; } if ( k > s . length ( ) ) { return false ; } else { for ( Map . Entry < Character , Integer > entry : m . entrySet ( ) ) { if ( entry . getValue ( ) % 2 != 0 ) { p ++ ; } } } if ( k < p ) { return false ; } return true ; } 
boolean equalIgnoreCase ( String str1 , String str2 ) { str1 = str1 . toUpperCase ( ) ; str2 = str2 . toUpperCase ( ) ; return str1 . equals ( str2 ) ; } 
int find_longest_sub ( String bin ) { int n = bin . length ( ) ; int sum = 0 ; Map < Integer , Integer > prev_sum = new HashMap < Integer , Integer > ( ) ; int max_len = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( bin . charAt ( i ) == '1' ) { sum += 1 ; } else { sum -= 1 ; } if ( sum > 0 ) { max_len = i + 1 ; } else if ( sum <= 0 ) { if ( prev_sum . containsKey ( sum - 1 ) ) { int curr_len = i - prev_sum . get ( sum - 1 ) ; max_len = Math . max ( max_len , curr_len ) ; } } if ( ! prev_sum . containsKey ( sum ) ) { prev_sum . put ( sum , i ) ; } } return max_len ; } 
boolean hasAllCodes ( String s , int k ) { Set < String > us = new HashSet < > ( ) ; for ( int i = 0 ; i <= s . length ( ) - k ; i ++ ) { us . add ( s . substring ( i , i + k ) ) ; } return us . size ( ) == ( 1 << k ) ; } 
boolean checkPalin ( String word ) { int n = word . length ( ) ; word = word . toLowerCase ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( word . charAt ( i ) != word . charAt ( n - 1 ) ) { return false ; } n -- ; } return true ; } 
String convert ( String st ) { String w = "" ; String z = "" ; st = st . toUpperCase ( ) + " " ; for ( int i = 0 ; i < st . length ( ) ; i ++ ) { char ch = st . charAt ( i ) ; if ( ch != ' ' ) { w += ch ; } else { z += Character . toLowerCase ( w . charAt ( 0 ) ) + w . substring ( 1 , w . length ( ) ) + " " ; w = "" ; } } return z ; } 
int max_lines ( int n , int [ ] x1 , int [ ] y1 , int [ ] x2 , int [ ] y2 ) { Set < Double > s = new HashSet < Double > ( ) ; double slope ; for ( int i = 0 ; i < n ; i ++ ) { if ( x1 [ i ] == x2 [ i ] ) { slope = Double . POSITIVE_INFINITY ; } else { slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; } s . add ( slope ) ; } return s . size ( ) ; } 
HashMap < Integer , Integer > prime_factor ( int n ) { HashMap < Integer , Integer > primef = new HashMap < > ( ) ; while ( n % 2 == 0 ) { if ( primef . containsKey ( 2 ) ) { primef . put ( 2 , primef . get ( 2 ) + 1 ) ; } else { primef . put ( 2 , 1 ) ; } n = n / 2 ; } for ( int i = 3 ; i <= ( int ) Math . sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { if ( primef . containsKey ( i ) ) { primef . put ( i , primef . get ( i ) + 1 ) ; } else { primef . put ( i , 1 ) ; } n = n / i ; } } if ( n > 2 ) { primef . put ( n , 1 ) ; } return primef ; } 
String is_divisible_by_divisor ( int s , int d ) { s %= d ; Set < Integer > hash_map = new HashSet < > ( ) ; hash_map . add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hash_map . contains ( s ) ) { if ( s == 0 ) { return "Yes" ; } else { hash_map . add ( s ) ; } } } return "No" ; } 
boolean oddSum ( int [ ] a , int n , int k ) { Set < Integer > odd = new HashSet < > ( ) ; Set < Integer > even = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { even . add ( a [ i ] ) ; } else { odd . add ( a [ i ] ) ; } } if ( odd . size ( ) >= k ) { return true ; } boolean flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= even . size ( ) ) { return true ; } } return flag ; } 
int day_of_year ( String date ) { int [ ] days = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int year = Integer . parseInt ( date . substring ( 0 , 4 ) ) ; int month = Integer . parseInt ( date . substring ( 5 , 7 ) ) ; int day = Integer . parseInt ( date . substring ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { day ++ ; } while ( month > 1 ) { day += days [ month - 2 ] ; month -- ; } return day ; } 
boolean is_perfect_square ( int [ ] arr , int n ) { HashMap < Integer , Integer > umap = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( umap . containsKey ( arr [ i ] ) ) { umap . put ( arr [ i ] , umap . get ( arr [ i ] ) + 1 ) ; } else { umap . put ( arr [ i ] , 1 ) ; } } for ( Map . Entry < Integer , Integer > entry : umap . entrySet ( ) ) { if ( entry . getValue ( ) % 2 == 1 ) { return false ; } } return true ; } 
int minMoves ( int n ) { String s = Integer . toString ( n ) ; int ans = Integer . MAX_VALUE ; int length = s . length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { for ( int j = 0 ; j < length ; j ++ ) { if ( i == j ) { continue ; } char [ ] t = s . toCharArray ( ) ; int cur = 0 ; for ( int k = i ; k < length - 1 ; k ++ ) { char temp = t [ k ] ; t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = temp ; cur ++ ; } for ( int k = j - ( j > i ) ; k < length - 1 ; k ++ ) { char temp = t [ k ] ; t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = temp ; cur ++ ; } int pos = - 1 ; for ( int k = 0 ; k < length ; k ++ ) { if ( t [ k ] != '0' ) { pos = k ; break ; } } for ( int k = pos ; k > 0 ; k -- ) { char temp = t [ k ] ; t [ k ] = t [ k - 1 ] ; t [ k - 1 ] = temp ; cur ++ ; } int nn = Integer . parseInt ( new String ( t ) ) ; if ( nn % 25 == 0 ) { ans = Math . min ( ans , cur ) ; } } } if ( ans == Integer . MAX_VALUE ) { return - 1 ; } return ans ; } 
int minimumOperations ( int [ ] a , int n ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a [ i ] , mp . getOrDefault ( a [ i ] , 0 ) + 1 ) ; } int count = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) > 1 ) { count += entry . getValue ( ) - 1 ; } } return count ; } 
int kaprekar_rec ( int n , int prev ) { if ( n == 0 ) { return 0 ; } prev = n ; int [ ] digits = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } Arrays . sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } Arrays . sort ( digits ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } int diff = Math . abs ( asc - desc ) ; if ( diff == prev ) { return diff ; } return kaprekar_rec ( diff , prev ) ; } 
String fractionToDecimal ( int numr , int denr ) { String res = "" ; HashMap < Integer , Integer > mp = new HashMap < > ( ) ; int rem = numr % denr ; while ( rem != 0 && ! mp . containsKey ( rem ) ) { mp . put ( rem , res . length ( ) ) ; rem = rem * 10 ; int res_part = rem / denr ; res += Integer . toString ( res_part ) ; rem = rem % denr ; } if ( rem == 0 ) { return "" ; } if ( mp . containsKey ( rem ) ) { return res . substring ( mp . get ( rem ) ) ; } return "" ; } 
boolean is_fancy ( String num ) { Map < String , String > fp = new HashMap < String , String > ( ) ; fp . put ( "0" , "0" ) ; fp . put ( "1" , "1" ) ; fp . put ( "6" , "9" ) ; fp . put ( "8" , "8" ) ; fp . put ( "9" , "6" ) ; int n = num . length ( ) ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( ! fp . containsKey ( String . valueOf ( num . charAt ( l ) ) ) || ! fp . get ( String . valueOf ( num . charAt ( l ) ) ) . equals ( String . valueOf ( num . charAt ( r ) ) ) ) { return false ; } l ++ ; r -- ; } return true ; } 
