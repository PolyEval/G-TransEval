List < String > separateParenGroups ( String parenString ) { List < String > allParens = new ArrayList < > ( ) ; String currentParen = "" ; int currentDepth = 0 ; for ( char c : parenString . toCharArray ( ) ) { if ( c == '(' ) { currentDepth ++ ; currentParen += c ; } else if ( c == ')' ) { currentDepth -- ; currentParen += c ; if ( currentDepth == 0 ) { allParens . add ( currentParen ) ; currentParen = "" ; } } } return allParens ; } 
List < Integer > ParseNestedParens ( String paren_string ) { List < Integer > all_levels = new ArrayList < > ( ) ; int level = 0 ; int max_level = 0 ; for ( int i = 0 ; i < paren_string . length ( ) ; i ++ ) { char chr = paren_string . charAt ( i ) ; if ( chr == '(' ) { level ++ ; if ( level > max_level ) { max_level = level ; } } if ( chr == ')' ) { level -- ; if ( level == 0 ) { all_levels . add ( max_level ) ; max_level = 0 ; } } } return all_levels ; } 
List < String > filterBySubstring ( List < String > strings , String substring ) { List < String > result = new ArrayList < String > ( ) ; for ( String s : strings ) { if ( s . contains ( substring ) ) { result . add ( s ) ; } } return result ; } 
ArrayList < Integer > RollingMax ( ArrayList < Integer > numbers ) { int running_max = 0 ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int n : numbers ) { if ( n > running_max ) { running_max = n ; } result . add ( running_max ) ; } return result ; } 
String makePalindrome ( String s ) { if ( s . isEmpty ( ) ) { return "" ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String r_str = s . substring ( i ) ; if ( r_str . equals ( new StringBuilder ( r_str ) . reverse ( ) . toString ( ) ) ) { String n_str = s . substring ( 0 , i ) ; String n2_str = new StringBuilder ( n_str ) . reverse ( ) . toString ( ) ; return s + n2_str ; } } return s . substring ( 0 , s . length ( ) - 1 ) + new StringBuilder ( s ) . reverse ( ) . toString ( ) ; } 
String StringXor ( String a , String b ) { String result = "" ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) { result += '0' ; } else { result += '1' ; } } return result ; } 
String longest ( ArrayList < String > strings ) { if ( strings . isEmpty ( ) ) { return "" ; } int maxLen = Collections . max ( strings , Comparator . comparing ( String :: length ) ) . length ( ) ; for ( String s : strings ) { if ( s . length ( ) == maxLen ) { return s ; } } return "" ; } 
String StringSequence ( int n ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { sb . append ( Integer . toString ( i ) ) . append ( " " ) ; } sb . append ( Integer . toString ( n ) ) ; return sb . toString ( ) ; } 
int CountDistinctCharacter ( String s ) { Set < Character > distinct = new HashSet < > ( ) ; s = s . toLowerCase ( ) ; for ( char c : s . toCharArray ( ) ) { distinct . add ( c ) ; } return distinct . size ( ) ; } 
int HowManyTimes ( String s , String sub ) { int times = 0 ; for ( int i = 0 ; i <= s . length ( ) - sub . length ( ) ; i ++ ) { if ( s . substring ( i , i + sub . length ( ) ) . equals ( sub ) ) { times += 1 ; } } return times ; } 
String sortNumbers ( String numbers ) { Map < String , Integer > to_num = new HashMap < String , Integer > ( ) ; to_num . put ( "zero" , 0 ) ; to_num . put ( "one" , 1 ) ; to_num . put ( "two" , 2 ) ; to_num . put ( "three" , 3 ) ; to_num . put ( "four" , 4 ) ; to_num . put ( "five" , 5 ) ; to_num . put ( "six" , 6 ) ; to_num . put ( "seven" , 7 ) ; to_num . put ( "eight" , 8 ) ; to_num . put ( "nine" , 9 ) ; Map < Integer , String > from_num = new HashMap < Integer , String > ( ) ; from_num . put ( 0 , "zero" ) ; from_num . put ( 1 , "one" ) ; from_num . put ( 2 , "two" ) ; from_num . put ( 3 , "three" ) ; from_num . put ( 4 , "four" ) ; from_num . put ( 5 , "five" ) ; from_num . put ( 6 , "six" ) ; from_num . put ( 7 , "seven" ) ; from_num . put ( 8 , "eight" ) ; from_num . put ( 9 , "nine" ) ; List < Integer > ints = new ArrayList < Integer > ( ) ; String current = "" ; for ( int i = 0 ; i <= numbers . length ( ) ; i ++ ) { if ( i == numbers . length ( ) || numbers . charAt ( i ) == ' ' ) { if ( to_num . containsKey ( current ) ) { ints . add ( to_num . get ( current ) ) ; current = "" ; } } else { current += numbers . charAt ( i ) ; } } Collections . sort ( ints ) ; String result = "" ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { result += from_num . get ( ints . get ( i ) ) ; if ( i != ints . size ( ) - 1 ) { result += " " ; } } return result ; } 
import java . util . ArrayList ; 
ArrayList < Double > rescaleToUnit ( ArrayList < Double > numbers ) { double min_num = Collections . min ( numbers ) ; double max_num = Collections . max ( numbers ) ; ArrayList < Double > result = new ArrayList < Double > ( ) ; for ( double n : numbers ) { result . add ( ( n - min_num ) / ( max_num - min_num ) ) ; } return result ; } 
ArrayList < Integer > filterIntegers ( ArrayList < Object > values ) { ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( Object e : values ) { if ( e instanceof Integer ) { result . add ( ( Integer ) e ) ; } } return result ; } 
ArrayList < Integer > removeDuplicates ( ArrayList < Integer > numbers ) { HashMap < Integer , Integer > counter = new HashMap < > ( ) ; for ( int i : numbers ) { counter . put ( i , counter . getOrDefault ( i , 0 ) + 1 ) ; } ArrayList < Integer > result = new ArrayList < > ( ) ; for ( int i : numbers ) { if ( counter . get ( i ) == 1 ) { result . add ( i ) ; } } return result ; } 
String FlipCase ( String s ) { String result = "" ; for ( char c : s . toCharArray ( ) ) { if ( Character . isLowerCase ( c ) ) { result += Character . toUpperCase ( c ) ; } else { result += Character . toLowerCase ( c ) ; } } return result ; } 
ArrayList < String > filterByPrefix ( ArrayList < String > strings , String prefix ) { ArrayList < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < strings . size ( ) ; i ++ ) { if ( strings . get ( i ) . startsWith ( prefix ) ) { result . add ( strings . get ( i ) ) ; } } return result ; } 
double FindZero ( ArrayList < Double > xs ) { double ans = 0 ; double value = 0 ; for ( int i = 0 ; i < xs . size ( ) ; i ++ ) { value += xs . get ( i ) * Math . pow ( ans , i ) ; } while ( Math . abs ( value ) > 1e-6 ) { double driv = 0 ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) { driv += xs . get ( i ) * Math . pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . size ( ) ; i ++ ) { value += xs . get ( i ) * Math . pow ( ans , i ) ; } } return ans ; } 
ArrayList < Integer > sortThird ( ArrayList < Integer > l ) { ArrayList < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i += 3 ) { thirds . add ( l . get ( i ) ) ; } Collections . sort ( thirds ) ; ArrayList < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 3 == 0 ) { result . add ( thirds . get ( i / 3 ) ) ; } else { result . add ( l . get ( i ) ) ; } } return result ; } 
ArrayList < Integer > Unique ( ArrayList < Integer > l ) { HashSet < Integer > s = new HashSet < Integer > ( l ) ; ArrayList < Integer > result = new ArrayList < Integer > ( s ) ; Collections . sort ( result ) ; return result ; } 
double maxElement ( ArrayList < Double > l ) { return Collections . max ( l ) ; } 
boolean TriplesSumToZero ( ArrayList < Integer > l ) { for ( int i = 0 ; i < l . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < l . size ( ) ; j ++ ) { for ( int k = j + 1 ; k < l . size ( ) ; k ++ ) { if ( l . get ( i ) + l . get ( j ) + l . get ( k ) == 0 ) { return true ; } } } } return false ; } 
int Fib4 ( int n ) { List < Integer > results = new ArrayList < > ( Arrays . asList ( 0 , 0 , 2 , 0 ) ) ; for ( int i = 4 ; i <= n ; i ++ ) { results . add ( results . get ( i - 4 ) + results . get ( i - 3 ) + results . get ( i - 2 ) + results . get ( i - 1 ) ) ; } return results . get ( n ) ; } 
boolean IsPalindrome ( String text ) { String pr = new StringBuilder ( text ) . reverse ( ) . toString ( ) ; return pr . equals ( text ) ; } 
String removeVowels ( String text ) { String result = "" ; String vowels = "aeiou" ; for ( int i = 0 ; i < text . length ( ) ; i ++ ) { char ch = text . charAt ( i ) ; if ( vowels . indexOf ( Character . toLowerCase ( ch ) ) == - 1 ) { result += ch ; } } return result ; } 
boolean sameChars ( String s0 , String s1 ) { HashSet < Character > set0 = new HashSet < Character > ( ) ; for ( char c : s0 . toCharArray ( ) ) { set0 . add ( c ) ; } HashSet < Character > set1 = new HashSet < Character > ( ) ; for ( char c : s1 . toCharArray ( ) ) { set1 . add ( c ) ; } return set0 . equals ( set1 ) ; } 
List < Integer > Common ( List < Integer > l1 , List < Integer > l2 ) { HashSet < Integer > hs = new HashSet < > ( ) ; for ( int e1 : l1 ) { for ( int e2 : l2 ) { if ( e1 == e2 ) { hs . add ( e1 ) ; } } } List < Integer > ret = new ArrayList < > ( hs ) ; Collections . sort ( ret ) ; return ret ; } 
boolean CorrectBracketing ( String brackets ) { int depth = 0 ; for ( char b : brackets . toCharArray ( ) ) { if ( b == '(' ) { depth += 1 ; } if ( b == ')' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; } 
String circularShift ( int x , int shift ) { String xs = Integer . toString ( x ) ; if ( shift > xs . length ( ) ) { return new StringBuilder ( xs ) . reverse ( ) . toString ( ) ; } return xs . substring ( xs . length ( ) - shift ) + xs . substring ( 0 , xs . length ( ) - shift ) ; } 
int Search ( Vector < Integer > lst ) { HashMap < Integer , Integer > counter = new HashMap < Integer , Integer > ( ) ; for ( int i : lst ) { counter . put ( i , counter . getOrDefault ( i , 0 ) + 1 ) ; } int ans = - 1 ; for ( Map . Entry < Integer , Integer > entry : counter . entrySet ( ) ) { int key = entry . getKey ( ) ; int value = entry . getValue ( ) ; if ( value >= key && key > ans ) { ans = key ; } } return ans ; } 
int smallestChange ( List < Integer > arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . size ( ) / 2 ; i ++ ) { if ( arr . get ( i ) != arr . get ( arr . size ( ) - i - 1 ) ) { ans += 1 ; } } return ans ; } 
List < String > TotalMatch ( List < String > lst1 , List < String > lst2 ) { int sum1 = 0 ; for ( String st : lst1 ) { sum1 += st . length ( ) ; } int sum2 = 0 ; for ( String st : lst2 ) { sum2 += st . length ( ) ; } return sum1 > sum2 ? lst2 : lst1 ; } 
boolean isHappy ( String s ) { if ( s . length ( ) < 3 ) { return false ; } for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i ) == s . charAt ( i + 2 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) { return false ; } } return true ; } 
List < String > NumericalLetterGrade ( List < Double > grades ) { List < String > letterGrade = new ArrayList < > ( ) ; for ( double gpa : grades ) { if ( gpa == 4.0 ) { letterGrade . add ( "A+" ) ; } else if ( gpa > 3.7 ) { letterGrade . add ( "A" ) ; } else if ( gpa > 3.3 ) { letterGrade . add ( "A-" ) ; } else if ( gpa > 3.0 ) { letterGrade . add ( "B+" ) ; } else if ( gpa > 2.7 ) { letterGrade . add ( "B" ) ; } else if ( gpa > 2.3 ) { letterGrade . add ( "B-" ) ; } else if ( gpa > 2.0 ) { letterGrade . add ( "C+" ) ; } else if ( gpa > 1.7 ) { letterGrade . add ( "C" ) ; } else if ( gpa > 1.3 ) { letterGrade . add ( "C-" ) ; } else if ( gpa > 1.0 ) { letterGrade . add ( "D+" ) ; } else if ( gpa > 0.7 ) { letterGrade . add ( "D" ) ; } else if ( gpa > 0.0 ) { letterGrade . add ( "D-" ) ; } else { letterGrade . add ( "E" ) ; } } return letterGrade ; } 
String solve ( int n ) { String bi_str = "" ; int sum = 0 ; String n_str = String . valueOf ( n ) ; for ( int i = 0 ; i < n_str . length ( ) ; i ++ ) { sum += Integer . parseInt ( String . valueOf ( n_str . charAt ( i ) ) ) ; } while ( sum > 0 ) { bi_str = String . valueOf ( sum % 2 ) + bi_str ; sum /= 2 ; } return bi_str ; } 
String AntiShuffle ( String s ) { String ret = "" ; String current = "" ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { char [ ] tempArray = current . toCharArray ( ) ; Arrays . sort ( tempArray ) ; current = new String ( tempArray ) ; if ( ! ret . isEmpty ( ) ) { ret += ' ' ; } ret += current ; current = "" ; } else { current += s . charAt ( i ) ; } } return ret ; } 
List < Integer > sortArray ( List < Integer > array ) { if ( array . isEmpty ( ) ) { return array ; } if ( ( array . get ( 0 ) + array . get ( array . size ( ) - 1 ) ) % 2 == 1 ) { Collections . sort ( array ) ; } else { Collections . sort ( array , Collections . reverseOrder ( ) ) ; } return array ; } 
String encrypt ( String s ) { StringBuilder ans = new StringBuilder ( ) ; for ( char c : s . toCharArray ( ) ) { if ( Character . isLetter ( c ) ) { ans . append ( ( char ) ( 'a' + ( c - 'a' + 4 ) % 26 ) ) ; } else { ans . append ( c ) ; } } return ans . toString ( ) ; } 
int isBored ( String s ) { boolean is_start = true ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '.' || s . charAt ( i ) == '?' || s . charAt ( i ) == '!' ) { is_start = true ; } else if ( is_start ) { if ( s . charAt ( i ) == ' ' ) { continue ; } if ( s . substring ( i , i + 2 ) . equals ( "I " ) ) { sum += 1 ; } is_start = false ; } } return sum ; } 
String Encode ( String message ) { String vowels = "aeiouAEIOU" ; String ret = "" ; for ( char c : message . toCharArray ( ) ) { if ( Character . isUpperCase ( c ) ) { c = Character . toLowerCase ( c ) ; if ( vowels . indexOf ( c ) != - 1 ) { c = ( char ) ( 'a' + ( c - 'a' + 2 ) % 26 ) ; } } else if ( Character . isLowerCase ( c ) ) { c = Character . toUpperCase ( c ) ; if ( vowels . indexOf ( c ) != - 1 ) { c = ( char ) ( 'A' + ( c - 'A' + 2 ) % 26 ) ; } } ret += c ; } return ret ; } 
int Skjkasdkd ( ArrayList < Integer > lst ) { int largest = 0 ; for ( int n : lst ) { if ( n > largest ) { boolean prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } int sum = 0 ; String s = Integer . toString ( largest ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum += Character . getNumericValue ( s . charAt ( i ) ) ; } return sum ; } 
boolean checkDictCase ( Map < String , String > dict ) { if ( dict . isEmpty ( ) ) { return false ; } int isLower = 0 ; int isUpper = 0 ; for ( Map . Entry < String , String > entry : dict . entrySet ( ) ) { String key = entry . getKey ( ) ; for ( char c : key . toCharArray ( ) ) { if ( Character . isLowerCase ( c ) ) { isLower = 1 ; } else if ( Character . isUpperCase ( c ) ) { isUpper = 1 ; } else { return false ; } } } return isLower + isUpper == 1 ; } 
int multiply ( int a , int b ) { return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ; } 
int CountUpper ( String s ) { String u_vowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i += 2 ) { if ( u_vowel . contains ( Character . toString ( s . charAt ( i ) ) . toUpperCase ( ) ) ) { count += 1 ; } } return count ; } 
List < String > ByLength ( List < Integer > arr ) { Map < Integer , String > numTo = new HashMap < > ( ) { { put ( 1 , "One" ) ; put ( 2 , "Two" ) ; put ( 3 , "Three" ) ; put ( 4 , "Four" ) ; put ( 5 , "Five" ) ; put ( 6 , "Six" ) ; put ( 7 , "Seven" ) ; put ( 8 , "Eight" ) ; put ( 9 , "Nine" ) ; } 
import java . util . ArrayList ; 
int [ ] evenOddPalindrome ( int n ) { int even_count = 0 , odd_count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { String s = Integer . toString ( i ) ; String r_str = new StringBuilder ( s ) . reverse ( ) . toString ( ) ; if ( s . equals ( r_str ) ) { if ( i % 2 == 1 ) { odd_count += 1 ; } else { even_count += 1 ; } } } int [ ] result = { even_count , odd_count } ; return result ; } 
HashMap < Character , Integer > histogram ( String test ) { HashMap < Character , Integer > count = new HashMap < > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . length ( ) ; i ++ ) { if ( test . charAt ( i ) != ' ' ) { if ( count . containsKey ( test . charAt ( i ) ) ) { count . put ( test . charAt ( i ) , count . get ( test . charAt ( i ) ) + 1 ) ; } else { count . put ( test . charAt ( i ) , 1 ) ; } if ( count . get ( test . charAt ( i ) ) > max ) { max = count . get ( test . charAt ( i ) ) ; } } } HashMap < Character , Integer > result = new HashMap < > ( ) ; for ( Map . Entry < Character , Integer > entry : count . entrySet ( ) ) { char key = entry . getKey ( ) ; int value = entry . getValue ( ) ; if ( value == max ) { result . put ( key , value ) ; } } return result ; } 
ArrayList < String > ReverseDelete ( String s , String c ) { String ret = "" ; for ( char ch : s . toCharArray ( ) ) { if ( c . indexOf ( ch ) == - 1 ) { ret += ch ; } } String flag = "False" ; if ( ret . equals ( new StringBuilder ( ret ) . reverse ( ) . toString ( ) ) ) { flag = "True" ; } return new ArrayList < String > ( Arrays . asList ( ret , flag ) ) ; } 
ArrayList < Integer > SortArray ( ArrayList < Integer > arr ) { ArrayList < Integer > bin = new ArrayList < Integer > ( ) ; for ( int i : arr ) { int b = 0 ; int n = Math . abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . add ( b ) ; } for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { for ( int j = 1 ; j < arr . size ( ) ; j ++ ) { if ( bin . get ( j ) < bin . get ( j - 1 ) || ( bin . get ( j ) == bin . get ( j - 1 ) && arr . get ( j ) < arr . get ( j - 1 ) ) ) { Collections . swap ( bin , j , j - 1 ) ; Collections . swap ( arr , j , j - 1 ) ; } } } return arr ; } 
String getClosestVowel ( String word ) { String vowels = "AEIOUaeiou" ; for ( int i = word . length ( ) - 2 ; i > 0 ; i -- ) { if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 && vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) { return String . valueOf ( word . charAt ( i ) ) ; } } return "" ; } 
String matchParens ( List < String > lst ) { List < String > strings = new ArrayList < > ( ) ; strings . add ( lst . get ( 0 ) + lst . get ( 1 ) ) ; strings . add ( lst . get ( 1 ) + lst . get ( 0 ) ) ; for ( String l : strings ) { int count = 0 ; for ( char c : l . toCharArray ( ) ) { if ( c == '(' ) { count += 1 ; } if ( c == ')' ) { count -= 1 ; } if ( count < 0 ) { break ; } } if ( count == 0 ) { return "Yes" ; } } return "No" ; } 
List < Integer > Maximum ( List < Integer > arr , int k ) { if ( k == 0 ) { return new ArrayList < Integer > ( ) ; } Collections . sort ( arr ) ; return arr . subList ( arr . size ( ) - k , arr . size ( ) ) ; } 
boolean ValidDate ( String date ) { if ( date . length ( ) != 10 ) { return false ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 || i == 5 ) { if ( date . charAt ( i ) != '-' ) { return false ; } } else if ( ! Character . isDigit ( date . charAt ( i ) ) ) { return false ; } } int month = Integer . parseInt ( date . substring ( 0 , 2 ) ) ; int day = Integer . parseInt ( date . substring ( 3 , 5 ) ) ; int year = Integer . parseInt ( date . substring ( 6 ) ) ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) { return false ; } if ( day == 30 && month == 2 ) { return false ; } return true ; } 
List < String > SplitWords ( String txt ) { String current = "" ; List < String > result = new ArrayList < String > ( ) ; if ( txt . contains ( " " ) ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == ' ' ) { if ( current . length ( ) > 0 ) { result . add ( current ) ; } current = "" ; } else { current += txt . charAt ( i ) ; } } return result ; } if ( txt . contains ( "," ) ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == ',' ) { if ( current . length ( ) > 0 ) { result . add ( current ) ; } current = "" ; } else { current += txt . charAt ( i ) ; } } return result ; } int num = 0 ; for ( char c : txt . toCharArray ( ) ) { if ( Character . isLowerCase ( c ) && c % 2 == 0 ) { num += 1 ; } } return Collections . singletonList ( Integer . toString ( num ) ) ; } 
import java . util . * ; 
boolean checkIfLastCharIsALetter ( String txt ) { if ( txt . isEmpty ( ) ) { return false ; } return Character . isLetter ( txt . charAt ( txt . length ( ) - 1 ) ) && ( txt . length ( ) == 1 || ! Character . isLetter ( txt . charAt ( txt . length ( ) - 2 ) ) ) ; } 
List < Integer > OrderByPoints ( List < Integer > nums ) { List < Integer > result = new ArrayList < > ( ) ; for ( int num : nums ) { String w = Integer . toString ( Math . abs ( num ) ) ; int sum = 0 ; for ( char c : w . toCharArray ( ) ) { sum += c - '0' ; } if ( num < 0 ) { sum -= 2 * ( w . charAt ( 0 ) - '0' ) ; } result . add ( sum ) ; } for ( int i = 0 ; i < nums . size ( ) ; i ++ ) { for ( int j = 1 ; j < nums . size ( ) ; j ++ ) { if ( result . get ( j - 1 ) > result . get ( j ) ) { Collections . swap ( result , j , j - 1 ) ; Collections . swap ( nums , j , j - 1 ) ; } } } return nums ; } 
ArrayList < String > bf ( String planet1 , String planet2 ) { ArrayList < String > planets = new ArrayList < > ( Arrays . asList ( "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" ) ) ; int idx1 = planets . indexOf ( planet1 ) ; int idx2 = planets . indexOf ( planet2 ) ; if ( idx1 == - 1 || idx2 == - 1 || idx1 == idx2 ) { return new ArrayList < > ( ) ; } return idx1 > idx2 ? new ArrayList < > ( planets . subList ( idx2 + 1 , idx1 ) ) : new ArrayList < > ( planets . subList ( idx1 + 1 , idx2 ) ) ; } 
ArrayList < String > SortedListSum ( ArrayList < String > lst ) { ArrayList < String > result = new ArrayList < String > ( ) ; for ( String i : lst ) { if ( i . length ( ) % 2 == 0 ) { result . add ( i ) ; } } result . sort ( new Comparator < String > ( ) { int compare ( String l , String r ) { if ( l . length ( ) == r . length ( ) ) { return l . compareTo ( r ) ; } return Integer . compare ( l . length ( ) , r . length ( ) ) ; } 
boolean CycpatternCheck ( String a , String b ) { for ( int i = 0 ; i < b . length ( ) ; i ++ ) { String rotate = b . substring ( i ) + b . substring ( 0 , i ) ; if ( a . indexOf ( rotate ) != - 1 ) { return true ; } } return false ; } 
List < Integer > evenOddCount ( int num ) { int even_count = 0 , odd_count = 0 ; String numStr = String . valueOf ( Math . abs ( num ) ) ; for ( int i = 0 ; i < numStr . length ( ) ; i ++ ) { int digit = Character . getNumericValue ( numStr . charAt ( i ) ) ; if ( digit % 2 == 0 ) { even_count ++ ; } else { odd_count ++ ; } } List < Integer > result = new ArrayList < > ( ) ; result . add ( even_count ) ; result . add ( odd_count ) ; return result ; } 
String FindMax ( List < String > words ) { String max = "" ; int max_length = 0 ; for ( String word : words ) { List < Character > unique = new ArrayList < > ( ) ; for ( char w : word . toCharArray ( ) ) { if ( ! unique . contains ( w ) ) { unique . add ( w ) ; } } if ( unique . size ( ) > max_length || ( unique . size ( ) == max_length && word . compareTo ( max ) < 0 ) ) { max = word ; max_length = unique . size ( ) ; } } return max ; } 
String Solve ( String s ) { boolean no_letter = true ; StringBuilder result = new StringBuilder ( ) ; for ( char ch : s . toCharArray ( ) ) { if ( Character . isUpperCase ( ch ) ) { ch = Character . toLowerCase ( ch ) ; no_letter = false ; } else if ( Character . isLowerCase ( ch ) ) { ch = Character . toUpperCase ( ch ) ; no_letter = false ; } result . append ( ch ) ; } if ( no_letter ) { return new StringBuilder ( s ) . reverse ( ) . toString ( ) ; } else { return result . toString ( ) ; } } 
int MostFrequent ( List < Integer > arr , int n ) { HashMap < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr . get ( i ) ) ) { hp . put ( arr . get ( i ) , hp . get ( arr . get ( i ) ) + 1 ) ; } else { hp . put ( arr . get ( i ) , 1 ) ; } } int max_count = 0 , res = - 1 ; for ( Map . Entry < Integer , Integer > entry : hp . entrySet ( ) ) { if ( max_count < entry . getValue ( ) ) { res = entry . getKey ( ) ; max_count = entry . getValue ( ) ; } } return res ; } 
int Find ( List < Integer > a , List < Integer > b , int k , int n1 , int n2 ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { s . add ( b . get ( i ) ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( ! s . contains ( a . get ( i ) ) ) { missing ++ ; } if ( missing == k ) { return a . get ( i ) ; } } return - 1 ; } 
int SolveQuery ( int start , int end , List < Integer > arr ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = start ; i <= end ; i ++ ) { int num = arr . get ( i ) ; mp . put ( num , mp . getOrDefault ( num , 0 ) + 1 ) ; } int count = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { int key = entry . getKey ( ) ; int value = entry . getValue ( ) ; if ( key == value ) { count ++ ; } } return count ; } 
int segregate ( List < Integer > arr , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr . get ( i ) <= 0 ) { Collections . swap ( arr , i , j ) ; j ++ ; } } return j ; } 
int CountTriplets ( ArrayList < Integer > a , int n ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( a . get ( i ) ) ; } int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a . get ( i ) ^ a . get ( j ) ; if ( s . contains ( xr ) && xr != a . get ( i ) && xr != a . get ( j ) ) { count ++ ; } } } return count / 3 ; } 
int leastFrequent ( ArrayList < Integer > arr , int n ) { Map < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr . get ( i ) ) ) { hp . put ( arr . get ( i ) , hp . get ( arr . get ( i ) ) + 1 ) ; } else { hp . put ( arr . get ( i ) , 1 ) ; } } int min_count = n + 1 ; int res = - 1 ; for ( Map . Entry < Integer , Integer > entry : hp . entrySet ( ) ) { if ( min_count >= entry . getValue ( ) ) { res = entry . getKey ( ) ; min_count = entry . getValue ( ) ; } } return res ; } 
int FindPermutations ( List < Integer > arr ) { int cnt = 0 ; int max_ind = - 1 , min_ind = 10000000 ; int n = arr . size ( ) ; Map < Integer , Integer > index_of = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { index_of . put ( arr . get ( i ) , i + 1 ) ; } for ( int i = 1 ; i <= n ; i ++ ) { max_ind = Math . max ( max_ind , index_of . get ( i ) ) ; min_ind = Math . min ( min_ind , index_of . get ( i ) ) ; if ( max_ind - min_ind + 1 == i ) { cnt ++ ; } } return cnt ; } 
int FormQuadruplets ( ArrayList < Integer > arr , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; Collections . sort ( arr , Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr . get ( i + 2 ) ; } return ans ; } 
String lexicographicallyMaximum ( String s , int n ) { HashMap < Character , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; } else { m . put ( s . charAt ( i ) , 1 ) ; } } ArrayList < Character > v = new ArrayList < > ( ) ; for ( char i = 'a' ; i < 'a' + Math . min ( n , 25 ) ; i ++ ) { if ( ! m . containsKey ( i ) ) { v . add ( i ) ; } } int j = v . size ( ) - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) >= 'a' + Math . min ( n , 25 ) || ( m . containsKey ( s . charAt ( i ) ) && m . get ( s . charAt ( i ) ) > 1 ) ) { if ( v . get ( j ) < s . charAt ( i ) ) { continue ; } m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) - 1 ) ; s = s . substring ( 0 , i ) + v . get ( j ) + s . substring ( i + 1 ) ; j -- ; } if ( j < 0 ) { break ; } } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) { break ; } if ( s . charAt ( i ) >= 'a' + Math . min ( n , 25 ) || ( m . containsKey ( s . charAt ( i ) ) && m . get ( s . charAt ( i ) ) > 1 ) ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) - 1 ) ; s = s . substring ( 0 , i ) + v . get ( l ) + s . substring ( i + 1 ) ; l ++ ; } } return s ; } 
int NoOfValidKbers ( int k , List < Integer > arr ) { Set < Integer > s = new HashSet < > ( ) ; while ( k != 0 ) { s . add ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { int no = arr . get ( i ) ; boolean flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( ! s . contains ( digit ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag ) { count ++ ; } } return count ; } 
int DelCost ( String s , List < Integer > cost ) { int ans = 0 ; Map < Character , Integer > for_max = new HashMap < Character , Integer > ( ) ; Map < Character , Integer > for_tot = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char c = s . charAt ( i ) ; if ( ! for_max . containsKey ( c ) ) { for_max . put ( c , cost . get ( i ) ) ; } else { for_max . put ( c , Math . max ( cost . get ( i ) , for_max . get ( c ) ) ) ; } if ( ! for_tot . containsKey ( c ) ) { for_tot . put ( c , cost . get ( i ) ) ; } else { for_tot . put ( c , for_tot . get ( c ) + cost . get ( i ) ) ; } } for ( Map . Entry < Character , Integer > entry : for_max . entrySet ( ) ) { char c = entry . getKey ( ) ; int maxCost = entry . getValue ( ) ; ans += for_tot . get ( c ) - maxCost ; } return ans ; } 
ArrayList < String > replaceDuplicates ( ArrayList < String > names ) { HashMap < String , Integer > hash = new HashMap < > ( ) ; for ( int i = 0 ; i < names . size ( ) ; i ++ ) { if ( ! hash . containsKey ( names . get ( i ) ) ) { hash . put ( names . get ( i ) , 1 ) ; } else { int count = hash . get ( names . get ( i ) ) ; hash . put ( names . get ( i ) , count + 1 ) ; names . set ( i , names . get ( i ) + Integer . toString ( count ) ) ; } } return names ; } 
ArrayList < Integer > minmaxNumbers ( ArrayList < ArrayList < Integer > > matrix , ArrayList < Integer > res ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < matrix . size ( ) ; i ++ ) { int min_r = Integer . MAX_VALUE ; for ( int j = 0 ; j < matrix . get ( i ) . size ( ) ; j ++ ) { min_r = Math . min ( min_r , matrix . get ( i ) . get ( j ) ) ; } s . add ( min_r ) ; } for ( int j = 0 ; j < matrix . get ( 0 ) . size ( ) ; j ++ ) { int max_c = Integer . MIN_VALUE ; for ( int i = 0 ; i < matrix . size ( ) ; i ++ ) { max_c = Math . max ( max_c , matrix . get ( i ) . get ( j ) ) ; } if ( s . contains ( max_c ) ) { res . add ( max_c ) ; } } return res ; } 
int lengthOfLongestAp ( ArrayList < Integer > a , int n ) { HashMap < Integer , HashMap < Integer , Integer > > dp = new HashMap < Integer , HashMap < Integer , Integer > > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = i + 1 ; j < n ; ++ j ) { int d = a . get ( j ) - a . get ( i ) ; if ( dp . containsKey ( d ) ) { if ( dp . get ( d ) . containsKey ( i ) ) { dp . get ( d ) . put ( j , dp . get ( d ) . get ( i ) + 1 ) ; } else { dp . get ( d ) . put ( j , 2 ) ; } } else { dp . put ( d , new HashMap < Integer , Integer > ( ) ) ; dp . get ( d ) . put ( j , 2 ) ; } res = Math . max ( res , dp . get ( d ) . get ( j ) ) ; } } return res ; } 
char FindKthChar ( int n , int k ) { String prev = "A" ; String cur = "" ; if ( n == 1 ) { return 'A' ; } for ( int j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . length ( ) ; i ++ ) { if ( prev . charAt ( i ) == 'A' ) { prev = prev . substring ( 0 , i ) + 'B' + prev . substring ( i + 1 ) ; } else { prev = prev . substring ( 0 , i ) + 'A' + prev . substring ( i + 1 ) ; } } prev = new StringBuilder ( prev ) . reverse ( ) . toString ( ) ; cur += prev ; prev = cur ; } return cur . charAt ( k - 1 ) ; } 
char findKthLargest ( String s , int k ) { String tmp = s ; char [ ] tmpArr = tmp . toCharArray ( ) ; Arrays . sort ( tmpArr ) ; for ( int i = 0 , j = tmpArr . length - 1 ; i < j ; i ++ , j -- ) { char temp = tmpArr [ i ] ; tmpArr [ i ] = tmpArr [ j ] ; tmpArr [ j ] = temp ; } return tmpArr [ k - 1 ] ; } 
int SubArraylen ( List < Integer > arr , int n , int k ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; mp . put ( arr . get ( 0 ) , 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr . set ( i , arr . get ( i ) + arr . get ( i - 1 ) ) ; mp . put ( arr . get ( i ) , i ) ; } int length = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr . get ( i ) < k ) { continue ; } else { int x = arr . get ( i ) - k ; if ( x == 0 ) { length = Math . min ( length , i ) ; } if ( ! mp . containsKey ( x ) ) { continue ; } else { length = Math . min ( length , i - mp . get ( x ) ) ; } } } return length ; } 
int findMaxLen ( List < Integer > a , int k ) { int n = a . size ( ) ; Collections . sort ( a ) ; boolean [ ] vis = new boolean [ n ] ; Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a . get ( i ) , i ) ; } int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! vis [ i ] ) { int check = a . get ( i ) * k ; if ( mp . containsKey ( check ) ) { c ++ ; vis [ mp . get ( check ) ] = true ; } } } return n - c ; } 
ArrayList < Integer > MinDistancePoints ( ArrayList < Integer > a , int k , int n ) { HashMap < Integer , Integer > m = new HashMap < > ( ) ; Queue < Integer > q = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { m . put ( a . get ( i ) , 1 ) ; q . add ( a . get ( i ) ) ; } ArrayList < Integer > ans = new ArrayList < > ( ) ; while ( k > 0 ) { int x = q . poll ( ) ; if ( ! m . containsKey ( x - 1 ) && k > 0 ) { m . put ( x - 1 , 1 ) ; q . add ( x - 1 ) ; ans . add ( x - 1 ) ; k -- ; } if ( ! m . containsKey ( x + 1 ) && k > 0 ) { m . put ( x + 1 , 1 ) ; q . add ( x + 1 ) ; ans . add ( x + 1 ) ; k -- ; } } return ans ; } 
boolean isValidLen ( String s , int length , int k ) { int n = s . length ( ) ; Map < Character , Integer > mp = new HashMap < Character , Integer > ( ) ; int right = 0 ; while ( right < length ) { if ( mp . containsKey ( s . charAt ( right ) ) ) { mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; } else { mp . put ( s . charAt ( right ) , 1 ) ; } right ++ ; } if ( mp . size ( ) <= k ) { return true ; } while ( right < n ) { if ( mp . containsKey ( s . charAt ( right ) ) ) { mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; } else { mp . put ( s . charAt ( right ) , 1 ) ; } if ( mp . containsKey ( s . charAt ( right - length ) ) ) { mp . put ( s . charAt ( right - length ) , mp . get ( s . charAt ( right - length ) ) - 1 ) ; } if ( mp . get ( s . charAt ( right - length ) ) == 0 ) { mp . remove ( s . charAt ( right - length ) ) ; } if ( mp . size ( ) <= k ) { return true ; } right ++ ; } return mp . size ( ) <= k ; } 
int partition ( ArrayList < Integer > arr , int low , int high ) { int pivot = arr . get ( high ) ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr . get ( j ) <= pivot ) { i ++ ; Collections . swap ( arr , i , j ) ; } } Collections . swap ( arr , i + 1 , high ) ; return i + 1 ; } 
int strScore ( ArrayList < String > strs , String s , int n ) { Map < String , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . put ( strs . get ( i ) , i + 1 ) ; } if ( ! m . containsKey ( s ) ) { return 0 ; } int score = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { score += s . charAt ( i ) - 'a' + 1 ; } score = score * m . get ( s ) ; return score ; } 
List < Integer > countEle ( List < Integer > s , List < Integer > a , int n ) { Map < Integer , Boolean > mp = new HashMap < > ( ) ; List < Integer > ans = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int num = a . get ( i ) ; if ( mp . containsKey ( num ) ) { ans . add ( 0 ) ; } else { int cnt = 0 ; while ( s . get ( 0 ) != num ) { mp . put ( s . get ( 0 ) , true ) ; s . remove ( 0 ) ; cnt ++ ; } s . remove ( 0 ) ; cnt ++ ; ans . add ( cnt ) ; } } return ans ; } 
int MaxDistinctChar ( String s , int n , int k ) { Map < Character , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { char c = s . charAt ( i ) ; freq . put ( c , freq . getOrDefault ( c , 0 ) + 1 ) ; } List < Integer > v = new ArrayList < > ( freq . values ( ) ) ; Collections . sort ( v ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) - 1 , k ) ; v . set ( i , v . get ( i ) - mn ) ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) , k ) ; v . set ( i , v . get ( i ) - mn ) ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . get ( i ) == 1 ) { res ++ ; } } return res ; } 
int findKth ( List < Integer > arr , int n , int k ) { Set < Integer > missing = new HashSet < > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . add ( arr . get ( i ) ) ; } int max_m = Collections . max ( arr ) ; int min_m = Collections . min ( arr ) ; for ( int i = min_m + 1 ; i < max_m ; i ++ ) { if ( ! missing . contains ( i ) ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; } 
boolean almostSort ( List < Integer > a , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a . get ( i ) > a . get ( i + 1 ) ) { Collections . swap ( a , i , i + 1 ) ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a . get ( i ) > a . get ( i + 1 ) ) { return false ; } } return true ; } 
int MaximumSum ( String s , int n , int k ) { int sum = 0 ; int [ ] freq = new int [ 256 ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ s . charAt ( i ) ] ++ ; } Arrays . sort ( freq ) ; for ( int i = 255 ; i >= 0 ; i -- ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; } 
int findMinOperations ( List < Integer > arr , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int j = i ; j < n ; j += k ) { freq . put ( arr . get ( j ) , freq . getOrDefault ( arr . get ( j ) , 0 ) + 1 ) ; } int max1 = 0 , num = 0 ; for ( Map . Entry < Integer , Integer > entry : freq . entrySet ( ) ) { int value = entry . getValue ( ) ; if ( value > max1 ) { max1 = value ; num = entry . getKey ( ) ; } } for ( Map . Entry < Integer , Integer > entry : freq . entrySet ( ) ) { int key = entry . getKey ( ) ; int value = entry . getValue ( ) ; if ( key != num ) { operations += value ; } } } return operations ; } 
List < String > SubString ( String s , int n ) { List < String > v = new ArrayList < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int length = 1 ; length <= n - i ; length ++ ) { String find = s . substring ( i , i + length ) ; v . add ( find ) ; } } return v ; } 
boolean checkUniqueFrequency ( List < Integer > arr , int n ) { Map < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq . put ( arr . get ( i ) , freq . getOrDefault ( arr . get ( i ) , 0 ) + 1 ) ; } Set < Integer > uniqueFreq = new HashSet < > ( ) ; for ( Map . Entry < Integer , Integer > entry : freq . entrySet ( ) ) { int value = entry . getValue ( ) ; if ( uniqueFreq . contains ( value ) ) { return false ; } else { uniqueFreq . add ( value ) ; } } return true ; } 
int minCost ( String str1 , String str2 , int n ) { int cost = 0 ; String tmp = str1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp . charAt ( i ) != str2 . charAt ( i ) ) { if ( i < n - 1 && tmp . charAt ( i + 1 ) != str2 . charAt ( i + 1 ) ) { tmp = swap ( tmp , i , i + 1 ) ; cost ++ ; } else { cost ++ ; } } } return cost ; } 
boolean isValidNum ( String x ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( mp . containsKey ( x . charAt ( i ) - '0' ) ) { return false ; } else if ( x . charAt ( i ) - '0' > 5 ) { return false ; } else { mp . put ( x . charAt ( i ) - '0' , 1 ) ; } } return true ; } 
int MinimizeDiff ( ArrayList < Integer > arr , int n , int k ) { int max = Collections . max ( arr ) ; int min = Collections . min ( arr ) ; if ( max - min <= k ) { return max - min ; } int avg = ( max + min ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr . get ( i ) > avg ) { arr . set ( i , arr . get ( i ) - k ) ; } else { arr . set ( i , arr . get ( i ) + k ) ; } } max = Collections . max ( arr ) ; min = Collections . min ( arr ) ; return max - min ; } 
int getMinCost ( ArrayList < Integer > arr , int n ) { int min_ele = Collections . min ( arr ) ; return min_ele * ( n - 1 ) ; } 
boolean Possibility ( HashMap < Integer , Integer > m , int length , String s ) { int count_odd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( m . get ( Character . getNumericValue ( s . charAt ( i ) ) ) & 1 ) != 0 ) { count_odd ++ ; } if ( count_odd > 1 ) { return false ; } } return true ; } 
int minimumCostOfBreaking ( List < Integer > x , List < Integer > y , int m , int n ) { int res = 0 ; Collections . sort ( x , Collections . reverseOrder ( ) ) ; Collections . sort ( y , Collections . reverseOrder ( ) ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x . get ( i ) > y . get ( j ) ) { res += x . get ( i ) * vert ; hzntl ++ ; i ++ ; } else { res += y . get ( j ) * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += x . get ( i ++ ) ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y . get ( j ++ ) ; } res += total * hzntl ; return res ; } 
int FindMaximumScore ( ArrayList < Integer > a , int n ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( a . get ( i ) ) ) { freq . put ( a . get ( i ) , freq . get ( a . get ( i ) ) + 1 ) ; } else { freq . put ( a . get ( i ) , 1 ) ; } } ArrayList < Integer > dp = new ArrayList < Integer > ( Collections . nCopies ( Collections . max ( a ) + 1 , 0 ) ) ; dp . set ( 0 , 0 ) ; dp . set ( 1 , freq . get ( 1 ) ) ; for ( int i = 2 ; i < dp . size ( ) ; i ++ ) { dp . set ( i , Math . max ( dp . get ( i - 1 ) , dp . get ( i - 2 ) + freq . get ( i ) * i ) ) ; } return dp . get ( dp . size ( ) - 1 ) ; } 
int CountWays ( String s , String t , int k , int mod ) { int n = s . length ( ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String p = s . substring ( i , n ) + s . substring ( 0 , i ) ; if ( p . equals ( t ) ) { a ++ ; } else { b ++ ; } } int [ ] dp1 = new int [ k + 1 ] ; int [ ] dp2 = new int [ k + 1 ] ; if ( s . equals ( t ) ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; } return dp1 [ k ] ; } 
int FindSubarraySum ( ArrayList < Integer > arr , int n , int k ) { HashMap < Integer , Integer > prev_sum = new HashMap < Integer , Integer > ( ) ; int res = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr_sum += arr . get ( i ) ; if ( curr_sum == k ) { res ++ ; } if ( prev_sum . containsKey ( curr_sum - k ) ) { res += prev_sum . get ( curr_sum - k ) ; } prev_sum . put ( curr_sum , prev_sum . getOrDefault ( curr_sum , 0 ) + 1 ) ; } return res ; } 
int MaximumOccurrence ( String s ) { int n = s . length ( ) ; Map < String , Integer > freq = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String temp = "" ; temp += s . charAt ( i ) ; freq . put ( temp , freq . getOrDefault ( temp , 0 ) + 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { String temp = "" ; temp += s . charAt ( i ) ; temp += s . charAt ( j ) ; freq . put ( temp , freq . getOrDefault ( temp , 0 ) + 1 ) ; } } int answer = Integer . MIN_VALUE ; for ( Map . Entry < String , Integer > entry : freq . entrySet ( ) ) { answer = Math . max ( answer , entry . getValue ( ) ) ; } return answer ; } 
int countCharacters ( List < String > strings , String chars ) { int res = 0 ; HashMap < Character , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < chars . length ( ) ; i ++ ) { char c = chars . charAt ( i ) ; freq . put ( c , freq . getOrDefault ( c , 0 ) + 1 ) ; } for ( String st : strings ) { boolean flag = true ; for ( int i = 0 ; i < st . length ( ) ; i ++ ) { char c = st . charAt ( i ) ; if ( ! freq . containsKey ( c ) ) { flag = false ; break ; } } if ( flag ) { res += st . length ( ) ; } } return res ; } 
int DistinctSubstring ( String p , String q , int k , int n ) { HashSet < String > ss = new HashSet < String > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int sum = 0 ; String s = "" ; for ( int j = i ; j < n ; ++ j ) { int pos = p . charAt ( j ) - 'a' ; sum += q . charAt ( pos ) - '0' ; s += p . charAt ( j ) ; if ( sum <= k ) { ss . add ( s ) ; } else { break ; } } } return ss . size ( ) ; } 
int uniqueMorseRep ( List < String > arr ) { String [ ] morseCode = { ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , "...." , ".." , ".---" , "-.-" , ".-.." , "--" , "-." , "---" , ".--." , "--.-" , ".-." , "..." , "-" , "..-" , "...-" , ".--" , "-..-" , "-.--" , "--.." } ; Set < String > st = new HashSet < > ( ) ; int n = arr . size ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String temp = "" ; int m = arr . get ( i ) . length ( ) ; for ( int j = 0 ; j < m ; j ++ ) { temp += morseCode [ arr . get ( i ) . charAt ( j ) - 'a' ] ; } st . add ( temp ) ; } return st . size ( ) ; } 
int CountSubstrings ( String st , int k ) { int n = st . length ( ) ; int answer = 0 ; HashMap < Character , Integer > map = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( ! map . containsKey ( st . charAt ( i ) ) ) { map . put ( st . charAt ( i ) , 1 ) ; } else { map . put ( st . charAt ( i ) , map . get ( st . charAt ( i ) ) + 1 ) ; } } if ( map . size ( ) == k ) { answer ++ ; } for ( int i = k ; i < n ; i ++ ) { if ( ! map . containsKey ( st . charAt ( i ) ) ) { map . put ( st . charAt ( i ) , 1 ) ; } else { map . put ( st . charAt ( i ) , map . get ( st . charAt ( i ) ) + 1 ) ; } map . put ( st . charAt ( i - k ) , map . get ( st . charAt ( i - k ) ) - 1 ) ; if ( map . get ( st . charAt ( i - k ) ) == 0 ) { map . remove ( st . charAt ( i - k ) ) ; } if ( map . size ( ) == k ) { answer ++ ; } } return answer ; } 
boolean CanConstruct ( String s , int k ) { Map < Character , Integer > m = new HashMap < > ( ) ; int i = 0 , j = 0 , p = 0 ; if ( s . length ( ) == k ) { return true ; } for ( i = 0 ; i < s . length ( ) ; i ++ ) { char c = s . charAt ( i ) ; m . put ( c , m . getOrDefault ( c , 0 ) + 1 ) ; } if ( k > s . length ( ) ) { return false ; } else { for ( Map . Entry < Character , Integer > entry : m . entrySet ( ) ) { if ( entry . getValue ( ) % 2 != 0 ) { p = p + 1 ; } } } if ( k < p ) { return false ; } return true ; } 
boolean equalIgnoreCase ( String str1 , String str2 ) { str1 = str1 . toUpperCase ( ) ; str2 = str2 . toUpperCase ( ) ; return str1 . equals ( str2 ) ; } 
int findLongestSub ( String bin ) { int n = bin . length ( ) , i ; int sum = 0 ; HashMap < Integer , Integer > prevSum = new HashMap < Integer , Integer > ( ) ; int maxLen = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin . charAt ( i ) == '1' ) { sum ++ ; } else { sum -- ; } if ( sum > 0 ) { maxLen = i + 1 ; } else if ( sum <= 0 ) { if ( prevSum . containsKey ( sum - 1 ) ) { int currLen = i - prevSum . get ( sum - 1 ) ; maxLen = Math . max ( maxLen , currLen ) ; } } if ( ! prevSum . containsKey ( sum ) ) { prevSum . put ( sum , i ) ; } } return maxLen ; } 
boolean hasAllCodes ( String s , int k ) { HashSet < String > hashSet = new HashSet < > ( ) ; for ( int i = 0 ; i + k <= s . length ( ) ; i ++ ) { hashSet . add ( s . substring ( i , i + k ) ) ; } return hashSet . size ( ) == ( 1 << k ) ; } 
boolean checkPalin ( String word ) { int n = word . length ( ) ; word = word . toLowerCase ( ) ; for ( int i = 0 ; i < n ; i ++ , n -- ) { if ( word . charAt ( i ) != word . charAt ( n - 1 ) ) { return false ; } } return true ; } 
String Convert ( String st ) { String w = "" ; String z = "" ; st = st . toUpperCase ( ) ; st += " " ; for ( int i = 0 ; i < st . length ( ) ; i ++ ) { char ch = st . charAt ( i ) ; if ( ch != ' ' ) { w += ch ; } else { z += Character . toLowerCase ( w . charAt ( 0 ) ) + w . substring ( 1 ) + " " ; w = "" ; } } return z ; } 
int MaxLines ( int n , List < Integer > x1 , List < Integer > y1 , List < Integer > x2 , List < Integer > y2 ) { HashSet < Double > s = new HashSet < > ( ) ; Double slope ; for ( int i = 0 ; i < n ; i ++ ) { if ( x1 . get ( i ) == x2 . get ( i ) ) { slope = Double . POSITIVE_INFINITY ; } else { slope = ( y2 . get ( i ) - y1 . get ( i ) ) * 1.0 / ( x2 . get ( i ) - x1 . get ( i ) ) ; } s . add ( slope ) ; } return s . size ( ) ; } 
HashMap < Integer , Integer > primeFactor ( int n ) { HashMap < Integer , Integer > primef = new HashMap < Integer , Integer > ( ) ; while ( n % 2 == 0 ) { if ( primef . containsKey ( 2 ) ) { primef . put ( 2 , primef . get ( 2 ) + 1 ) ; } else { primef . put ( 2 , 1 ) ; } n /= 2 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { if ( primef . containsKey ( i ) ) { primef . put ( i , primef . get ( i ) + 1 ) ; } else { primef . put ( i , 1 ) ; } n /= i ; } } if ( n > 2 ) { primef . put ( n , 1 ) ; } return primef ; } 
String isDivisibleByDivisor ( int s , int d ) { s %= d ; HashSet < Integer > hashSet = new HashSet < Integer > ( ) ; hashSet . add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hashSet . contains ( s ) ) { if ( s == 0 ) { return "Yes" ; } return "No" ; } else { hashSet . add ( s ) ; } } return "Yes" ; } 
boolean oddSum ( ArrayList < Integer > a , int n , int k ) { Set < Integer > odd = new HashSet < > ( ) ; Set < Integer > even = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a . get ( i ) % 2 == 0 ) { even . add ( a . get ( i ) ) ; } else { odd . add ( a . get ( i ) ) ; } } if ( odd . size ( ) >= k ) { return true ; } boolean flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= even . size ( ) ) { return true ; } } return flag ; } 
int DayOfYear ( String date ) { List < Integer > days = new ArrayList < > ( Arrays . asList ( 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 ) ) ; int year = Integer . parseInt ( date . substring ( 0 , 4 ) ) ; int month = Integer . parseInt ( date . substring ( 5 , 7 ) ) ; int day = Integer . parseInt ( date . substring ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { day ++ ; } while ( month > 1 ) { day += days . get ( month - 2 ) ; month -- ; } return day ; } 
boolean isPerfectSquare ( List < Integer > arr , int n ) { Map < Integer , Integer > umap = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { umap . put ( arr . get ( i ) , umap . getOrDefault ( arr . get ( i ) , 0 ) + 1 ) ; } for ( Map . Entry < Integer , Integer > itr : umap . entrySet ( ) ) { if ( itr . getValue ( ) % 2 == 1 ) { return false ; } } return true ; } 
int MinMoves ( int n ) { String s = Integer . toString ( n ) ; int ans = Integer . MAX_VALUE ; int length = s . length ( ) ; for ( int i = 0 ; i < length ; ++ i ) { for ( int j = 0 ; j < length ; ++ j ) { if ( i == j ) { continue ; } String t = s ; int cur = 0 ; for ( int k = i ; k < length - 1 ; ++ k ) { swap ( t , k , k + 1 ) ; ++ cur ; } for ( int k = j - ( j > i ) ; k < length - 2 ; ++ k ) { swap ( t , k , k + 1 ) ; ++ cur ; } int pos = - 1 ; for ( int k = 0 ; k < length ; ++ k ) { if ( t . charAt ( k ) != '0' ) { pos = k ; break ; } } for ( int k = pos ; k > 0 ; -- k ) { swap ( t , k , k - 1 ) ; ++ cur ; } int nn = Integer . parseInt ( t ) ; if ( nn % 25 == 0 ) { ans = Math . min ( ans , cur ) ; } } } if ( ans == Integer . MAX_VALUE ) { return - 1 ; } return ans ; } 
int minimumOperations ( int [ ] a , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( a [ i ] ) ) { mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; } else { mp . put ( a [ i ] , 1 ) ; } } int count = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) > 1 ) { count += entry . getValue ( ) - 1 ; } } return count ; } 
int KaprekarRec ( int n , int prev ) { if ( n == 0 ) { return 0 ; } prev = n ; int [ ] digits = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } Arrays . sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } Arrays . sort ( digits ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } int diff = Math . abs ( asc - desc ) ; if ( diff == prev ) { return diff ; } return KaprekarRec ( diff , prev ) ; } 
String FractionToDecimal ( int numr , int denr ) { String res = "" ; Map < Integer , Integer > mp = new HashMap < > ( ) ; int rem = numr % denr ; while ( rem != 0 && ! mp . containsKey ( rem ) ) { mp . put ( rem , res . length ( ) ) ; rem = rem * 10 ; int res_part = rem / denr ; res += Integer . toString ( res_part ) ; rem = rem % denr ; } if ( rem == 0 ) { return "" ; } if ( mp . containsKey ( rem ) ) { return res . substring ( mp . get ( rem ) ) ; } return "" ; } 
boolean isFancy ( String num ) { HashMap < Character , Character > fp = new HashMap < > ( ) ; fp . put ( '0' , '0' ) ; fp . put ( '1' , '1' ) ; fp . put ( '6' , '9' ) ; fp . put ( '8' , '8' ) ; fp . put ( '9' , '6' ) ; int n = num . length ( ) ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( ! fp . containsKey ( num . charAt ( l ) ) || fp . get ( num . charAt ( l ) ) != num . charAt ( r ) ) { return false ; } l ++ ; r -- ; } return true ; } 
