List < String > separateParenGroups ( String parenString ) { List < String > allParens = new ArrayList < String > ( ) ; StringBuilder currentParen = new StringBuilder ( ) ; int currentDepth = 0 ; for ( char c : parenString . toCharArray ( ) ) { if ( c == '(' ) { currentDepth += 1 ; currentParen . append ( c ) ; } else if ( c == ')' ) { currentDepth -= 1 ; currentParen . append ( c ) ; if ( currentDepth == 0 ) { allParens . add ( currentParen . toString ( ) ) ; currentParen . setLength ( 0 ) ; } } } return allParens ; } 
List < Integer > parseNestedParens ( String parenString ) { List < Integer > allLevels = new ArrayList < > ( ) ; int level = 0 ; int maxLevel = 0 ; for ( int i = 0 ; i < parenString . length ( ) ; i ++ ) { char chr = parenString . charAt ( i ) ; if ( chr == '(' ) { level += 1 ; if ( level > maxLevel ) { maxLevel = level ; } } if ( chr == ')' ) { level -= 1 ; if ( level == 0 ) { allLevels . add ( maxLevel ) ; maxLevel = 0 ; } } } return allLevels ; } 
List < String > filterBySubstring ( List < String > strings , String substring ) { List < String > result = new ArrayList < > ( ) ; for ( String s : strings ) { if ( s . contains ( substring ) ) { result . add ( s ) ; } } return result ; } 
List < Integer > rollingMax ( List < Integer > numbers ) { List < Integer > result = new ArrayList < > ( ) ; int runningMax = 0 ; for ( int n : numbers ) { if ( n > runningMax ) { runningMax = n ; } result . add ( runningMax ) ; } return result ; } 
String makePalindrome ( String s ) { if ( s . length ( ) == 0 ) { return "" ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String rStr = s . substring ( i ) ; if ( rStr . equals ( new StringBuilder ( rStr ) . reverse ( ) . toString ( ) ) ) { String nStr = s . substring ( 0 , i ) ; String n2Str = new StringBuilder ( nStr ) . reverse ( ) . toString ( ) ; return s + n2Str ; } } return s . substring ( 0 , s . length ( ) - 1 ) + new StringBuilder ( s ) . reverse ( ) . toString ( ) ; } 
String StringXor ( String a , String b ) { StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) { result . append ( '0' ) ; } else { result . append ( '1' ) ; } } return result . toString ( ) ; } 
String Longest ( List < String > strings ) { if ( strings . size ( ) == 0 ) return "" ; int maxLen = strings . stream ( ) . mapToInt ( String :: length ) . max ( ) . getAsInt ( ) ; for ( String s : strings ) { if ( s . length ( ) == maxLen ) { return s ; } } return "" ; } 
String StringSequence ( int n ) { StringBuilder s = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . append ( i ) ; s . append ( " " ) ; } s . append ( n ) ; return s . toString ( ) ; } 
int CountDistinctChars ( String s ) { HashSet < Character > distinct = new HashSet < > ( ) ; for ( char c : s . toLowerCase ( ) . toCharArray ( ) ) { distinct . add ( c ) ; } return distinct . size ( ) ; } 
int HowManyTimes ( String s , String sub ) { int times = 0 ; for ( int i = 0 ; i <= s . length ( ) - sub . length ( ) ; i ++ ) { if ( s . substring ( i , i + sub . length ( ) ) . equals ( sub ) ) { times += 1 ; } } return times ; } 
String sortNumbers ( String numbers ) { Map < String , Integer > toNum = new HashMap < > ( ) ; toNum . put ( "zero" , 0 ) ; toNum . put ( "one" , 1 ) ; toNum . put ( "two" , 2 ) ; toNum . put ( "three" , 3 ) ; toNum . put ( "four" , 4 ) ; toNum . put ( "five" , 5 ) ; toNum . put ( "six" , 6 ) ; toNum . put ( "seven" , 7 ) ; toNum . put ( "eight" , 8 ) ; toNum . put ( "nine" , 9 ) ; Map < Integer , String > fromNum = new HashMap < > ( ) ; fromNum . put ( 0 , "zero" ) ; fromNum . put ( 1 , "one" ) ; fromNum . put ( 2 , "two" ) ; fromNum . put ( 3 , "three" ) ; fromNum . put ( 4 , "four" ) ; fromNum . put ( 5 , "five" ) ; fromNum . put ( 6 , "six" ) ; fromNum . put ( 7 , "seven" ) ; fromNum . put ( 8 , "eight" ) ; fromNum . put ( 9 , "nine" ) ; List < Integer > ints = new ArrayList < > ( ) ; StringBuilder current = new StringBuilder ( ) ; for ( int i = 0 ; i <= numbers . length ( ) ; i ++ ) { if ( i == numbers . length ( ) || numbers . charAt ( i ) == ' ' ) { if ( toNum . containsKey ( current . toString ( ) ) ) { ints . add ( toNum . get ( current . toString ( ) ) ) ; current . setLength ( 0 ) ; } } else { current . append ( numbers . charAt ( i ) ) ; } } Collections . sort ( ints ) ; StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { result . append ( fromNum . get ( ints . get ( i ) ) ) ; if ( i != ints . size ( ) - 1 ) { result . append ( " " ) ; } } return result . toString ( ) ; } 
List < Double > findClosestElements ( List < Double > numbers ) { List < Double > closestPair = new ArrayList < Double > ( ) ; closestPair . add ( numbers . get ( 0 ) ) ; closestPair . add ( numbers . get ( 1 ) ) ; double distance = Math . abs ( numbers . get ( 0 ) - numbers . get ( 1 ) ) ; for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < numbers . size ( ) ; j ++ ) { if ( Math . abs ( numbers . get ( i ) - numbers . get ( j ) ) < distance ) { closestPair . set ( 0 , numbers . get ( i ) ) ; closestPair . set ( 1 , numbers . get ( j ) ) ; distance = Math . abs ( numbers . get ( i ) - numbers . get ( j ) ) ; } } } Collections . sort ( closestPair ) ; return closestPair ; } 
List < Double > rescaleToUnit ( List < Double > numbers ) { double minNum = Collections . min ( numbers ) ; double maxNum = Collections . max ( numbers ) ; List < Double > result = new ArrayList < > ( ) ; for ( Double n : numbers ) { result . add ( ( n - minNum ) / ( maxNum - minNum ) ) ; } return result ; } 
List < Integer > FilterIntegers ( List < Object > values ) { List < Integer > result = new ArrayList < > ( ) ; for ( Object e : values ) { if ( e instanceof Integer ) { result . add ( ( Integer ) e ) ; } } return result ; } 
List < Integer > removeDuplicates ( List < Integer > numbers ) { Map < Integer , Integer > c = new HashMap < Integer , Integer > ( ) ; for ( int i : numbers ) { c . put ( i , c . getOrDefault ( i , 0 ) + 1 ) ; } List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i : numbers ) { if ( c . get ( i ) == 1 ) { result . add ( i ) ; } } return result ; } 
String flipCase ( String s ) { StringBuilder result = new StringBuilder ( ) ; for ( char c : s . toCharArray ( ) ) { if ( Character . isLowerCase ( c ) ) { result . append ( Character . toUpperCase ( c ) ) ; } else { result . append ( Character . toLowerCase ( c ) ) ; } } return result . toString ( ) ; } 
List < String > FilterByPrefix ( List < String > strings , String prefix ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < strings . size ( ) ; i ++ ) { if ( strings . get ( i ) . startsWith ( prefix ) ) { result . add ( strings . get ( i ) ) ; } } return result ; } 
double FindZero ( List < Double > xs ) { double ans = 0 ; double value = 0 ; for ( int i = 0 ; i < xs . size ( ) ; i ++ ) { value += xs . get ( i ) * Math . pow ( ans , i ) ; } while ( Math . abs ( value ) > 1e-6 ) { double driv = 0 ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) { driv += xs . get ( i ) * Math . pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . size ( ) ; i ++ ) { value += xs . get ( i ) * Math . pow ( ans , i ) ; } } return ans ; } 
List < Integer > SortThird ( List < Integer > l ) { List < Integer > thirds = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i += 3 ) { thirds . add ( l . get ( i ) ) ; } Collections . sort ( thirds ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 3 == 0 ) { result . add ( thirds . get ( i / 3 ) ) ; } else { result . add ( l . get ( i ) ) ; } } return result ; } 
List < Integer > unique ( List < Integer > l ) { List < Integer > result = new ArrayList < > ( new HashSet < > ( l ) ) ; Collections . sort ( result ) ; return result ; } 
double MaxElement ( List < Double > list ) { return Collections . max ( list ) ; } 
boolean triplesSumToZero ( List < Integer > l ) { for ( int i = 0 ; i < l . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < l . size ( ) ; j ++ ) { for ( int k = j + 1 ; k < l . size ( ) ; k ++ ) { if ( l . get ( i ) + l . get ( j ) + l . get ( k ) == 0 ) { return true ; } } } } return false ; } 
int Fib4 ( int n ) { List < Integer > results = new ArrayList < Integer > ( Arrays . asList ( 0 , 0 , 2 , 0 ) ) ; for ( int i = 4 ; i <= n ; i ++ ) { results . add ( results . get ( i - 4 ) + results . get ( i - 3 ) + results . get ( i - 2 ) + results . get ( i - 1 ) ) ; } return results . get ( n ) ; } 
boolean isPalindrome ( String text ) { String pr = new StringBuilder ( text ) . reverse ( ) . toString ( ) ; return pr . equals ( text ) ; } 
String removeVowels ( String text ) { StringBuilder result = new StringBuilder ( ) ; String vowels = "aeiou" ; for ( int i = 0 ; i < text . length ( ) ; i ++ ) { char ch = text . charAt ( i ) ; if ( ! vowels . contains ( Character . toString ( Character . toLowerCase ( ch ) ) ) ) { result . append ( ch ) ; } } return result . toString ( ) ; } 
boolean SameChars ( String s0 , String s1 ) { Set < Character > set0 = new HashSet < > ( ) ; for ( char c : s0 . toCharArray ( ) ) { set0 . add ( c ) ; } Set < Character > set1 = new HashSet < > ( ) ; for ( char c : s1 . toCharArray ( ) ) { set1 . add ( c ) ; } return set0 . equals ( set1 ) ; } 
List < Integer > Common ( List < Integer > l1 , List < Integer > l2 ) { HashSet < Integer > us = new HashSet < Integer > ( ) ; for ( int e1 : l1 ) { for ( int e2 : l2 ) { if ( e1 == e2 ) { us . add ( e1 ) ; } } } List < Integer > ret = new ArrayList < Integer > ( us ) ; Collections . sort ( ret ) ; return ret ; } 
boolean correctBracketing ( String brackets ) { int depth = 0 ; for ( int i = 0 ; i < brackets . length ( ) ; i ++ ) { char b = brackets . charAt ( i ) ; if ( b == '(' ) { depth += 1 ; } if ( b == ')' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; } 
String circularShift ( int x , int shift ) { String xs = Integer . toString ( x ) ; if ( shift > xs . length ( ) ) { return new StringBuilder ( xs ) . reverse ( ) . toString ( ) ; } return xs . substring ( xs . length ( ) - shift ) + xs . substring ( 0 , xs . length ( ) - shift ) ; } 
int search ( List < Integer > lst ) { Map < Integer , Integer > counter = new HashMap < > ( ) ; for ( int i : lst ) { counter . put ( i , counter . getOrDefault ( i , 0 ) + 1 ) ; } int ans = - 1 ; for ( Map . Entry < Integer , Integer > entry : counter . entrySet ( ) ) { if ( entry . getValue ( ) >= entry . getKey ( ) && entry . getKey ( ) > ans ) { ans = entry . getKey ( ) ; } } return ans ; } 
int smallestChange ( List < Integer > arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . size ( ) / 2 ; i ++ ) { if ( ! arr . get ( i ) . equals ( arr . get ( arr . size ( ) - i - 1 ) ) ) { ans += 1 ; } } return ans ; } 
List < String > TotalMatch ( List < String > lst1 , List < String > lst2 ) { int sum1 = 0 ; for ( String st : lst1 ) { sum1 += st . length ( ) ; } int sum2 = 0 ; for ( String st : lst2 ) { sum2 += st . length ( ) ; } return ( sum1 > sum2 ) ? lst2 : lst1 ; } 
boolean IsHappy ( String s ) { if ( s . length ( ) < 3 ) { return false ; } for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i ) == s . charAt ( i + 2 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) { return false ; } } return true ; } 
List < String > NumericalLetterGrade ( List < Double > grades ) { List < String > letterGrade = new ArrayList < > ( ) ; for ( Double gpa : grades ) { if ( gpa == 4.0 ) { letterGrade . add ( "A+" ) ; } else if ( gpa > 3.7 ) { letterGrade . add ( "A" ) ; } else if ( gpa > 3.3 ) { letterGrade . add ( "A-" ) ; } else if ( gpa > 3.0 ) { letterGrade . add ( "B+" ) ; } else if ( gpa > 2.7 ) { letterGrade . add ( "B" ) ; } else if ( gpa > 2.3 ) { letterGrade . add ( "B-" ) ; } else if ( gpa > 2.0 ) { letterGrade . add ( "C+" ) ; } else if ( gpa > 1.7 ) { letterGrade . add ( "C" ) ; } else if ( gpa > 1.3 ) { letterGrade . add ( "C-" ) ; } else if ( gpa > 1.0 ) { letterGrade . add ( "D+" ) ; } else if ( gpa > 0.7 ) { letterGrade . add ( "D" ) ; } else if ( gpa > 0.0 ) { letterGrade . add ( "D-" ) ; } else { letterGrade . add ( "E" ) ; } } return letterGrade ; } 
String solve ( int n ) { StringBuilder biStr = new StringBuilder ( ) ; int sum = 0 ; String nString = String . valueOf ( n ) ; for ( int i = 0 ; i < nString . length ( ) ; i ++ ) { sum += Integer . parseInt ( String . valueOf ( nString . charAt ( i ) ) ) ; } while ( sum > 0 ) { biStr . insert ( 0 , sum % 2 ) ; sum /= 2 ; } return biStr . toString ( ) ; } 
String AntiShuffle ( String s ) { StringBuilder ret = new StringBuilder ( ) ; StringBuilder current = new StringBuilder ( ) ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { char [ ] tmp = current . toString ( ) . toCharArray ( ) ; Arrays . sort ( tmp ) ; if ( ret . length ( ) != 0 ) { ret . append ( ' ' ) ; } ret . append ( new String ( tmp ) ) ; current . setLength ( 0 ) ; } else { current . append ( s . charAt ( i ) ) ; } } return ret . toString ( ) ; } 
List < Integer > sortArray ( List < Integer > array ) { if ( array . size ( ) == 0 ) { return array ; } if ( ( array . get ( 0 ) + array . get ( array . size ( ) - 1 ) ) % 2 == 1 ) { Collections . sort ( array ) ; } else { Collections . sort ( array , Collections . reverseOrder ( ) ) ; } return array ; } 
String Encrypt ( String s ) { StringBuilder ans = new StringBuilder ( ) ; for ( char c : s . toCharArray ( ) ) { if ( Character . isLetter ( c ) ) { ans . append ( ( char ) ( 'a' + ( c - 'a' + 4 ) % 26 ) ) ; } else { ans . append ( c ) ; } } return ans . toString ( ) ; } 
int IsBored ( String s ) { boolean isStart = true ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '.' || s . charAt ( i ) == '?' || s . charAt ( i ) == '!' ) { isStart = true ; } else if ( isStart ) { if ( s . charAt ( i ) == ' ' ) { continue ; } if ( s . substring ( i , i + 2 ) . equals ( "I " ) ) { sum += 1 ; } isStart = false ; } } return sum ; } 
String encode ( String message ) { String vowels = "aeiouAEIOU" ; StringBuilder ret = new StringBuilder ( ) ; for ( char c0 : message . toCharArray ( ) ) { char c = c0 ; if ( Character . isUpperCase ( c ) ) { c = Character . toLowerCase ( c ) ; if ( vowels . contains ( String . valueOf ( c ) ) ) { c = ( char ) ( 'a' + ( c - 'a' + 2 ) % 26 ) ; } } else if ( Character . isLowerCase ( c ) ) { c = Character . toUpperCase ( c ) ; if ( vowels . contains ( String . valueOf ( c ) ) ) { c = ( char ) ( 'A' + ( c - 'A' + 2 ) % 26 ) ; } } ret . append ( c ) ; } return ret . toString ( ) ; } 
int Skjkasdkd ( List < Integer > lst ) { int largest = 0 ; for ( int n : lst ) { if ( n > largest ) { boolean prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } int sum = 0 ; String s = Integer . toString ( largest ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum += Character . getNumericValue ( s . charAt ( i ) ) ; } return sum ; } 
boolean CheckDictCase ( Dictionary < String , String > dict ) { if ( dict . size ( ) == 0 ) { return false ; } int isLower = 0 ; int isUpper = 0 ; for ( String key : dict . keySet ( ) ) { for ( char c : key . toCharArray ( ) ) { if ( Character . isLowerCase ( c ) ) { isLower = 1 ; } else if ( Character . isUpperCase ( c ) ) { isUpper = 1 ; } else { return false ; } } } return isLower + isUpper == 1 ; } 
int multiply ( int a , int b ) { return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ; } 
int countUpper ( String s ) { String uVowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i += 2 ) { if ( uVowel . contains ( String . valueOf ( s . charAt ( i ) ) ) ) { count += 1 ; } } return count ; } 
List < String > byLength ( List < Integer > arr ) { Map < Integer , String > numTo = new HashMap < Integer , String > ( ) ; numTo . put ( 1 , "One" ) ; numTo . put ( 2 , "Two" ) ; numTo . put ( 3 , "Three" ) ; numTo . put ( 4 , "Four" ) ; numTo . put ( 5 , "Five" ) ; numTo . put ( 6 , "Six" ) ; numTo . put ( 7 , "Seven" ) ; numTo . put ( 8 , "Eight" ) ; numTo . put ( 9 , "Nine" ) ; List < Integer > sortedArr = new ArrayList < Integer > ( arr ) ; Collections . sort ( sortedArr , Comparator . reverseOrder ( ) ) ; List < String > newArr = new ArrayList < String > ( ) ; for ( int n : sortedArr ) { if ( n >= 1 && n <= 9 ) { newArr . add ( numTo . get ( n ) ) ; } } return newArr ; } 
List < Integer > F ( int n ) { int sum = 0 ; int prod = 1 ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) { result . add ( prod ) ; } else { result . add ( sum ) ; } } return result ; } 
List < Integer > EvenOddPalindrome ( int n ) { int evenCount = 0 , oddCount = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { String s = Integer . toString ( i ) ; String rStr = new StringBuilder ( s ) . reverse ( ) . toString ( ) ; if ( s . equals ( rStr ) ) { if ( i % 2 == 1 ) { oddCount += 1 ; } else { evenCount += 1 ; } } } List < Integer > result = new ArrayList < > ( ) ; result . add ( evenCount ) ; result . add ( oddCount ) ; return result ; } 
Map < Character , Integer > histogram ( String test ) { Map < Character , Integer > count = new HashMap < > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . length ( ) ; i ++ ) { if ( test . charAt ( i ) != ' ' ) { count . put ( test . charAt ( i ) , count . getOrDefault ( test . charAt ( i ) , 0 ) + 1 ) ; if ( count . get ( test . charAt ( i ) ) > max ) { max = count . get ( test . charAt ( i ) ) ; } } } Map < Character , Integer > result = new HashMap < > ( ) ; for ( Map . Entry < Character , Integer > item : count . entrySet ( ) ) { if ( item . getValue ( ) == max ) { result . put ( item . getKey ( ) , item . getValue ( ) ) ; } } return result ; } 
List < String > ReverseDelete ( String s , String c ) { StringBuilder ret = new StringBuilder ( ) ; for ( char ch : s . toCharArray ( ) ) { if ( ! c . contains ( String . valueOf ( ch ) ) ) { ret . append ( ch ) ; } } String flag = "False" ; if ( ret . toString ( ) . equals ( new String ( ret . toString ( ) . toCharArray ( ) ) ) ) { flag = "True" ; } return Arrays . asList ( ret . toString ( ) , flag ) ; } 
List < Integer > sortArray ( List < Integer > arr ) { List < Integer > bin = new ArrayList < Integer > ( ) ; for ( int i : arr ) { int b = 0 ; int n = Math . abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . add ( b ) ; } for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { for ( int j = 1 ; j < arr . size ( ) ; j ++ ) { if ( bin . get ( j ) < bin . get ( j - 1 ) || ( bin . get ( j ) == bin . get ( j - 1 ) && arr . get ( j ) < arr . get ( j - 1 ) ) ) { Collections . swap ( bin , j , j - 1 ) ; Collections . swap ( arr , j , j - 1 ) ; } } } return arr ; } 
String getClosestVowel ( String word ) { String vowels = "AEIOUaeiou" ; for ( int i = word . length ( ) - 2 ; i > 0 ; i -- ) { if ( vowels . contains ( "" + word . charAt ( i ) ) && ! vowels . contains ( "" + word . charAt ( i + 1 ) ) && ! vowels . contains ( "" + word . charAt ( i - 1 ) ) ) { return "" + word . charAt ( i ) ; } } return "" ; } 
String matchParens ( List < String > lst ) { List < String > strings = new ArrayList < String > ( ) ; strings . add ( lst . get ( 0 ) + lst . get ( 1 ) ) ; strings . add ( lst . get ( 1 ) + lst . get ( 0 ) ) ; for ( String l : strings ) { int count = 0 ; for ( char c : l . toCharArray ( ) ) { if ( c == '(' ) { count ++ ; } else { count -- ; } if ( count < 0 ) { break ; } } if ( count == 0 ) { return "Yes" ; } } return "No" ; } 
List < Integer > maximum ( List < Integer > arr , int k ) { if ( k == 0 ) { return new ArrayList < > ( ) ; } Collections . sort ( arr ) ; return arr . subList ( arr . size ( ) - k , arr . size ( ) ) ; } 
boolean validDate ( String date ) { if ( date . length ( ) != 10 ) { return false ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 || i == 5 ) { if ( date . charAt ( i ) != '-' ) { return false ; } } else if ( ! Character . isDigit ( date . charAt ( i ) ) ) { return false ; } } int month = Integer . parseInt ( date . substring ( 0 , 2 ) ) ; int day = Integer . parseInt ( date . substring ( 3 , 5 ) ) ; int year = Integer . parseInt ( date . substring ( 6 , 10 ) ) ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) { return false ; } if ( day == 30 && month == 2 ) { return false ; } return true ; } 
List < String > splitWords ( String txt ) { StringBuilder current = new StringBuilder ( ) ; List < String > result = new ArrayList < String > ( ) ; if ( txt . contains ( " " ) ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == ' ' ) { if ( current . length ( ) > 0 ) { result . add ( current . toString ( ) ) ; } current . setLength ( 0 ) ; } else { current . append ( txt . charAt ( i ) ) ; } } return result ; } if ( txt . contains ( "," ) ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == ',' ) { if ( current . length ( ) > 0 ) { result . add ( current . toString ( ) ) ; } current . setLength ( 0 ) ; } else { current . append ( txt . charAt ( i ) ) ; } } return result ; } int num = 0 ; for ( char c : txt . toCharArray ( ) ) { if ( Character . isLowerCase ( c ) && c % 2 == 0 ) { num += 1 ; } } return Arrays . asList ( Integer . toString ( num ) ) ; } 
List < Integer > tri ( int n ) { if ( n == 0 ) { return new ArrayList < Integer > ( Arrays . asList ( 1 ) ) ; } List < Integer > tris = new ArrayList < Integer > ( Arrays . asList ( 1 , 3 ) ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { tris . add ( i / 2 + 1 ) ; } else { tris . add ( tris . get ( i - 1 ) + tris . get ( i - 2 ) + ( i + 3 ) / 2 ) ; } } return tris ; } 
boolean checkIfLastCharIsALetter ( String txt ) { if ( txt . length ( ) == 0 ) { return false ; } return Character . isLetter ( txt . charAt ( txt . length ( ) - 1 ) ) && ( txt . length ( ) == 1 || ! Character . isLetter ( txt . charAt ( txt . length ( ) - 2 ) ) ) ; } 
List < Integer > orderByPoints ( List < Integer > nums ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int num : nums ) { String w = String . valueOf ( Math . abs ( num ) ) ; int sum = 0 ; for ( int i = 0 ; i < w . length ( ) ; i ++ ) { sum += Character . getNumericValue ( w . charAt ( i ) ) ; } if ( num < 0 ) { sum -= 2 * ( Character . getNumericValue ( w . charAt ( 0 ) ) ) ; } result . add ( sum ) ; } for ( int i = 0 ; i < nums . size ( ) ; i ++ ) { for ( int j = 1 ; j < nums . size ( ) ; j ++ ) { if ( result . get ( j - 1 ) > result . get ( j ) ) { Collections . swap ( result , j - 1 , j ) ; Collections . swap ( nums , j - 1 , j ) ; } } } return nums ; } 
List < String > Bf ( String planet1 , String planet2 ) { List < String > planets = new ArrayList < > ( Arrays . asList ( "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" ) ) ; int idx1 = planets . indexOf ( planet1 ) ; int idx2 = planets . indexOf ( planet2 ) ; if ( idx1 == - 1 || idx2 == - 1 || idx1 == idx2 ) { return new ArrayList < > ( ) ; } return idx1 > idx2 ? planets . subList ( idx2 + 1 , idx1 ) : planets . subList ( idx1 + 1 , idx2 ) ; } 
List < String > sortedListSum ( List < String > lst ) { List < String > result = new ArrayList < String > ( ) ; for ( String i : lst ) { if ( i . length ( ) % 2 == 0 ) { result . add ( i ) ; } } Collections . sort ( result , new Comparator < String > ( ) { int compare ( String l , String r ) { if ( l . length ( ) == r . length ( ) ) { return l . compareTo ( r ) ; } return l . length ( ) - r . length ( ) ; } 
boolean CycpatternCheck ( String a , String b ) { for ( int i = 0 ; i <= b . length ( ) ; i ++ ) { String rotate = b . substring ( i ) + b . substring ( 0 , i ) ; if ( a . contains ( rotate ) ) { return true ; } } return false ; } 
List < Integer > evenOddCount ( int num ) { int evenCount = 0 , oddCount = 0 ; String numStr = Integer . toString ( Math . abs ( num ) ) ; for ( char c : numStr . toCharArray ( ) ) { if ( c % 2 == 0 ) { evenCount ++ ; } else { oddCount ++ ; } } return Arrays . asList ( evenCount , oddCount ) ; } 
String findMax ( List < String > words ) { String max = "" ; int maxLength = 0 ; for ( String word : words ) { List < Character > unique = new ArrayList < Character > ( ) ; for ( char w : word . toCharArray ( ) ) { if ( ! unique . contains ( w ) ) { unique . add ( w ) ; } } if ( unique . size ( ) > maxLength || ( unique . size ( ) == maxLength && word . compareTo ( max ) < 0 ) ) { max = word ; maxLength = unique . size ( ) ; } } return max ; } 
String solve ( String s ) { Boolean noLetter = true ; StringBuilder result = new StringBuilder ( ) ; for ( char ch0 : s . toCharArray ( ) ) { char ch = ch0 ; if ( Character . isUpperCase ( ch ) ) { ch = Character . toLowerCase ( ch ) ; noLetter = false ; } else if ( Character . isLowerCase ( ch ) ) { ch = Character . toUpperCase ( ch ) ; noLetter = false ; } result . append ( ch ) ; } if ( noLetter ) { return new String ( result . reverse ( ) . toString ( ) . toCharArray ( ) ) ; } else { return result . toString ( ) ; } } 
int MostFrequent ( List < Integer > arr , int n ) { HashMap < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr . get ( i ) ) ) { hp . put ( arr . get ( i ) , hp . get ( arr . get ( i ) ) + 1 ) ; } else { hp . put ( arr . get ( i ) , 1 ) ; } } int maxCount = 0 , res = - 1 ; for ( Map . Entry < Integer , Integer > entry : hp . entrySet ( ) ) { if ( maxCount < entry . getValue ( ) ) { res = entry . getKey ( ) ; maxCount = entry . getValue ( ) ; } } return res ; } 
int Find ( List < Integer > a , List < Integer > b , int k , int n1 , int n2 ) { HashSet < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { s . add ( b . get ( i ) ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( ! s . contains ( a . get ( i ) ) ) { missing ++ ; } if ( missing == k ) { return a . get ( i ) ; } } return - 1 ; } 
int SolveQuery ( int start , int end , List < Integer > arr ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = start ; i <= end ; i ++ ) { mp . put ( arr . get ( i ) , mp . getOrDefault ( arr . get ( i ) , 0 ) + 1 ) ; } int count = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getKey ( ) == entry . getValue ( ) ) { count ++ ; } } return count ; } 
int segregate ( List < Integer > arr , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr . get ( i ) <= 0 ) { Collections . swap ( arr , i , j ) ; j ++ ; } } return j ; } 
int CountTriplets ( List < Integer > a , int n ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( a . get ( i ) ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a . get ( i ) ^ a . get ( j ) ; if ( s . contains ( xr ) && xr != a . get ( i ) && xr != a . get ( j ) ) { count ++ ; } } } return count / 3 ; } 
int leastFrequent ( List < Integer > arr , int n ) { HashMap < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr . get ( i ) ) ) { hp . put ( arr . get ( i ) , hp . get ( arr . get ( i ) ) + 1 ) ; } else { hp . put ( arr . get ( i ) , 1 ) ; } } int minCount = n + 1 , res = - 1 ; for ( Map . Entry < Integer , Integer > entry : hp . entrySet ( ) ) { if ( minCount >= entry . getValue ( ) ) { res = entry . getKey ( ) ; minCount = entry . getValue ( ) ; } } return res ; } 
int findPermutations ( List < Integer > arr ) { int cnt = 0 ; int maxInd = - 1 , minInd = 10000000 ; int n = arr . size ( ) ; HashMap < Integer , Integer > indexOf = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { indexOf . put ( arr . get ( i ) , i + 1 ) ; } for ( int i = 1 ; i <= n ; i ++ ) { maxInd = Math . max ( maxInd , indexOf . getOrDefault ( i , 0 ) ) ; minInd = Math . min ( minInd , indexOf . getOrDefault ( i , 0 ) ) ; if ( maxInd - minInd + 1 == i ) { cnt ++ ; } } return cnt ; } 
int FormQuadruplets ( List < Integer > arr , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; Collections . sort ( arr , Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr . get ( i + 2 ) ; } return ans ; } 
String lexicographicallyMaximum ( String s , int n ) { Map < Character , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { char c = s . charAt ( i ) ; if ( m . containsKey ( c ) ) { m . put ( c , m . get ( c ) + 1 ) ; } else { m . put ( c , 1 ) ; } } List < Character > v = new ArrayList < > ( ) ; for ( char i = 'a' ; i < 'a' + Math . min ( n , 25 ) ; i ++ ) { if ( ! m . containsKey ( i ) ) { v . add ( i ) ; } } int j = v . size ( ) - 1 ; for ( int i = 0 ; i < n ; i ++ ) { char c = s . charAt ( i ) ; if ( c >= 'a' + Math . min ( n , 25 ) || ( m . containsKey ( c ) && m . get ( c ) > 1 ) ) { if ( v . get ( j ) < c ) { continue ; } m . put ( c , m . get ( c ) - 1 ) ; s = s . substring ( 0 , i ) + v . get ( j ) + s . substring ( i + 1 ) ; j -- ; } if ( j < 0 ) { break ; } } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { char c = s . charAt ( i ) ; if ( l > j ) { break ; } if ( c >= 'a' + Math . min ( n , 25 ) || ( m . containsKey ( c ) && m . get ( c ) > 1 ) ) { m . put ( c , m . get ( c ) - 1 ) ; s = s . substring ( 0 , i ) + v . get ( l ) + s . substring ( i + 1 ) ; l ++ ; } } return s ; } 
int NoOfValidKbers ( int k , List < Integer > arr ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; while ( k != 0 ) { s . add ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { int no = arr . get ( i ) ; boolean flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( ! s . contains ( digit ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag ) { count ++ ; } } return count ; } 
int DelCost ( String s , List < Integer > cost ) { int ans = 0 ; HashMap < Character , Integer > forMax = new HashMap < > ( ) ; HashMap < Character , Integer > forTot = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! forMax . containsKey ( s . charAt ( i ) ) ) { forMax . put ( s . charAt ( i ) , cost . get ( i ) ) ; } else { forMax . put ( s . charAt ( i ) , Math . max ( cost . get ( i ) , forMax . get ( s . charAt ( i ) ) ) ) ; } if ( ! forTot . containsKey ( s . charAt ( i ) ) ) { forTot . put ( s . charAt ( i ) , cost . get ( i ) ) ; } else { forTot . put ( s . charAt ( i ) , forTot . get ( s . charAt ( i ) ) + cost . get ( i ) ) ; } } for ( Map . Entry < Character , Integer > entry : forMax . entrySet ( ) ) { ans += forTot . get ( entry . getKey ( ) ) - entry . getValue ( ) ; } return ans ; } 
List < String > replaceDuplicates ( List < String > names ) { HashMap < String , Integer > hash = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < names . size ( ) ; i ++ ) { if ( ! hash . containsKey ( names . get ( i ) ) ) { hash . put ( names . get ( i ) , 1 ) ; } else { int count = hash . get ( names . get ( i ) ) ; hash . put ( names . get ( i ) , count + 1 ) ; names . set ( i , names . get ( i ) + count ) ; } } return names ; } 
List < Integer > MinmaxNumbers ( List < List < Integer > > matrix , List < Integer > res ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < matrix . size ( ) ; i ++ ) { int minR = Integer . MAX_VALUE ; for ( int j = 0 ; j < matrix . get ( i ) . size ( ) ; j ++ ) { minR = Math . min ( minR , matrix . get ( i ) . get ( j ) ) ; } s . add ( minR ) ; } for ( int j = 0 ; j < matrix . get ( 0 ) . size ( ) ; j ++ ) { int maxC = Integer . MIN_VALUE ; for ( int i = 0 ; i < matrix . size ( ) ; i ++ ) { maxC = Math . max ( maxC , matrix . get ( i ) . get ( j ) ) ; } if ( s . contains ( maxC ) ) { res . add ( maxC ) ; } } return res ; } 
int lengthOfLongestAP ( List < Integer > a , int n ) { Map < Integer , Map < Integer , Integer > > dp = new HashMap < > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int d = a . get ( j ) - a . get ( i ) ; if ( dp . containsKey ( d ) ) { if ( dp . get ( d ) . containsKey ( i ) ) { dp . get ( d ) . put ( j , dp . get ( d ) . get ( i ) + 1 ) ; } else { dp . get ( d ) . put ( j , 2 ) ; } } else { dp . put ( d , new HashMap < > ( ) ) ; dp . get ( d ) . put ( j , 2 ) ; } res = Math . max ( res , dp . get ( d ) . get ( j ) ) ; } } return res ; } 
char findKthChar ( int n , int k ) { String prev = "A" ; String cur = "" ; if ( n == 1 ) { return 'A' ; } for ( int j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . length ( ) ; i ++ ) { if ( prev . charAt ( i ) == 'A' ) { prev = prev . substring ( 0 , i ) + 'B' + prev . substring ( i + 1 ) ; } else { prev = prev . substring ( 0 , i ) + 'A' + prev . substring ( i + 1 ) ; } } prev = new StringBuilder ( prev ) . reverse ( ) . toString ( ) ; cur += prev ; prev = cur ; } return cur . charAt ( k - 1 ) ; } 
char findKthLargest ( String s , int k ) { char [ ] tmp = s . toCharArray ( ) ; Arrays . sort ( tmp ) ; ArrayUtils . reverse ( tmp ) ; return tmp [ k - 1 ] ; } 
int SubArraylen ( List < Integer > arr , int n , int k ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; mp . put ( arr . get ( 0 ) , 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr . set ( i , arr . get ( i ) + arr . get ( i - 1 ) ) ; mp . put ( arr . get ( i ) , i ) ; } int length = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr . get ( i ) < k ) { continue ; } else { int x = arr . get ( i ) - k ; if ( x == 0 ) { length = Math . min ( length , i ) ; } if ( ! mp . containsKey ( x ) ) { continue ; } else { length = Math . min ( length , i - mp . get ( x ) ) ; } } } return length ; } 
int FindMaxLen ( List < Integer > a , int k ) { int n = a . size ( ) ; Collections . sort ( a ) ; List < Boolean > vis = new ArrayList < > ( Collections . nCopies ( n , false ) ) ; Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a . get ( i ) , i ) ; } int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( ! vis . get ( i ) ) { int check = a . get ( i ) * k ; if ( mp . containsKey ( check ) ) { c ++ ; vis . set ( mp . get ( check ) , true ) ; } } } return n - c ; } 
List < Integer > MinDistancePoints ( List < Integer > a , int k , int n ) { HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; Queue < Integer > q = new LinkedList < Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { m . put ( a . get ( i ) , 1 ) ; q . offer ( a . get ( i ) ) ; } List < Integer > ans = new ArrayList < Integer > ( ) ; while ( k > 0 ) { int x = q . poll ( ) ; if ( ! m . containsKey ( x - 1 ) && k > 0 ) { m . put ( x - 1 , 1 ) ; q . offer ( x - 1 ) ; ans . add ( x - 1 ) ; k -- ; } if ( ! m . containsKey ( x + 1 ) && k > 0 ) { m . put ( x + 1 , 1 ) ; q . offer ( x + 1 ) ; ans . add ( x + 1 ) ; k -- ; } } return ans ; } 
boolean isValidLen ( String s , int length , int k ) { int n = s . length ( ) ; Map < Character , Integer > mp = new HashMap < Character , Integer > ( ) ; int right = 0 ; while ( right < length ) { if ( mp . containsKey ( s . charAt ( right ) ) ) { mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; } else { mp . put ( s . charAt ( right ) , 1 ) ; } right ++ ; } if ( mp . size ( ) <= k ) { return true ; } while ( right < n ) { if ( mp . containsKey ( s . charAt ( right ) ) ) { mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; } else { mp . put ( s . charAt ( right ) , 1 ) ; } if ( mp . containsKey ( s . charAt ( right - length ) ) ) { mp . put ( s . charAt ( right - length ) , mp . get ( s . charAt ( right - length ) ) - 1 ) ; } if ( mp . get ( s . charAt ( right - length ) ) == 0 ) { mp . remove ( s . charAt ( right - length ) ) ; } if ( mp . size ( ) <= k ) { return true ; } right ++ ; } return mp . size ( ) <= k ; } 
int Partition ( List < Integer > arr , int low , int high ) { int pivot = arr . get ( high ) ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr . get ( j ) <= pivot ) { i ++ ; Collections . swap ( arr , i , j ) ; } } Collections . swap ( arr , ( i + 1 ) , high ) ; return ( i + 1 ) ; } 
int strScore ( List < String > strs , String s , int n ) { Map < String , Integer > m = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . put ( strs . get ( i ) , i + 1 ) ; } if ( ! m . containsKey ( s ) ) { return 0 ; } int score = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { score += s . charAt ( i ) - 'a' + 1 ; } score = score * m . get ( s ) ; return score ; } 
List < Integer > CountEle ( List < Integer > s , List < Integer > a , int n ) { HashMap < Integer , Boolean > mp = new HashMap < Integer , Boolean > ( ) ; List < Integer > ans = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int num = a . get ( i ) ; if ( mp . containsKey ( num ) ) { ans . add ( 0 ) ; } else { int cnt = 0 ; while ( s . get ( 0 ) != num ) { mp . put ( s . get ( 0 ) , true ) ; s . remove ( 0 ) ; cnt ++ ; } s . remove ( 0 ) ; cnt ++ ; ans . add ( cnt ) ; } } return ans ; } 
int MaxDistinctChar ( String s , int n , int k ) { HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( s . charAt ( i ) ) ) { freq . put ( s . charAt ( i ) , freq . get ( s . charAt ( i ) ) + 1 ) ; } else { freq . put ( s . charAt ( i ) , 1 ) ; } } List < Integer > v = new ArrayList < Integer > ( ) ; for ( Map . Entry < Character , Integer > entry : freq . entrySet ( ) ) { v . add ( entry . getValue ( ) ) ; } Collections . sort ( v ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) - 1 , k ) ; v . set ( i , v . get ( i ) - mn ) ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) , k ) ; v . set ( i , v . get ( i ) - mn ) ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . get ( i ) == 1 ) { res ++ ; } } return res ; } 
int findKth ( List < Integer > arr , int n , int k ) { HashSet < Integer > missing = new HashSet < Integer > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . add ( arr . get ( i ) ) ; } int maxM = Collections . max ( arr ) ; int minM = Collections . min ( arr ) ; for ( int i = minM + 1 ; i < maxM ; i ++ ) { if ( ! missing . contains ( i ) ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; } 
boolean almostSort ( List < Integer > a , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a . get ( i ) > a . get ( i + 1 ) ) { Collections . swap ( a , i , i + 1 ) ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a . get ( i ) > a . get ( i + 1 ) ) return false ; } return true ; } 
int MaximumSum ( String s , int n , int k ) { int sum = 0 ; List < Integer > freq = new ArrayList < > ( Collections . nCopies ( 256 , 0 ) ) ; for ( int i = 0 ; i < n ; i ++ ) { freq . set ( s . charAt ( i ) , freq . get ( s . charAt ( i ) ) + 1 ) ; } freq . sort ( ( a , b ) -> b - a ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq . get ( i ) ) { sum += freq . get ( i ) * freq . get ( i ) ; k -= freq . get ( i ) ; } else { sum += freq . get ( i ) * k ; break ; } } return sum ; } 
int FindMinOperations ( List < Integer > arr , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int j = i ; j < n ; j += k ) { freq . put ( arr . get ( j ) , freq . getOrDefault ( arr . get ( j ) , 0 ) + 1 ) ; } int max1 = 0 , num = 0 ; for ( Map . Entry < Integer , Integer > entry : freq . entrySet ( ) ) { if ( entry . getKey ( ) > max1 ) { max1 = entry . getValue ( ) ; num = entry . getKey ( ) ; } } for ( Map . Entry < Integer , Integer > entry : freq . entrySet ( ) ) { if ( entry . getKey ( ) != num ) { operations += entry . getValue ( ) ; } } } return operations ; } 
List < String > subString ( String s , int n ) { List < String > v = new ArrayList < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int length = 1 ; length <= n - i ; length ++ ) { String find = s . substring ( i , i + length ) ; v . add ( find ) ; } } return v ; } 
boolean CheckUniqueFrequency ( List < Integer > arr , int n ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq . put ( arr . get ( i ) , freq . getOrDefault ( arr . get ( i ) , 0 ) + 1 ) ; } HashSet < Integer > uniqueFreq = new HashSet < Integer > ( ) ; for ( Map . Entry < Integer , Integer > entry : freq . entrySet ( ) ) { if ( uniqueFreq . contains ( entry . getValue ( ) ) ) { return false ; } else { uniqueFreq . add ( entry . getValue ( ) ) ; } } return true ; } 
int minCost ( String str1 , String str2 , int n ) { int cost = 0 ; char [ ] tmp = str1 . toCharArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 . charAt ( i ) ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 . charAt ( i + 1 ) ) { char temp = tmp [ i ] ; tmp [ i ] = tmp [ i + 1 ] ; tmp [ i + 1 ] = temp ; cost ++ ; } else { cost ++ ; } } } return cost ; } 
boolean isValidNum ( String x ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( mp . containsKey ( x . charAt ( i ) - '0' ) ) { return false ; } else if ( x . charAt ( i ) - '0' > 5 ) { return false ; } else { mp . put ( x . charAt ( i ) - '0' , 1 ) ; } } return true ; } 
int minimizeDiff ( List < Integer > arr , int n , int k ) { int max = Collections . max ( arr ) ; int min = Collections . min ( arr ) ; if ( max - min <= k ) { return max - min ; } int avg = ( max + min ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr . get ( i ) > avg ) { arr . set ( i , arr . get ( i ) - k ) ; } else { arr . set ( i , arr . get ( i ) + k ) ; } } max = Collections . max ( arr ) ; min = Collections . min ( arr ) ; return max - min ; } 
int getMinCost ( List < Integer > arr , int n ) { int minEle = Collections . min ( arr ) ; return minEle * ( n - 1 ) ; } 
boolean possibility ( HashMap < Integer , Integer > m , int length , String s ) { int countOdd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( m . get ( s . charAt ( i ) - '0' ) & 1 ) != 0 ) { countOdd ++ ; } if ( countOdd > 1 ) { return false ; } } return true ; } 
int minimumCostOfBreaking ( List < Integer > x , List < Integer > y , int m , int n ) { int res = 0 ; Collections . sort ( x , Collections . reverseOrder ( ) ) ; Collections . sort ( y , Collections . reverseOrder ( ) ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x . get ( i ) > y . get ( j ) ) { res += x . get ( i ) * vert ; hzntl ++ ; i ++ ; } else { res += y . get ( j ) * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += x . get ( i ++ ) ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y . get ( j ++ ) ; } res += total * hzntl ; return res ; } 
int findMaximumScore ( List < Integer > a , int n ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( a . get ( i ) ) ) { freq . put ( a . get ( i ) , freq . get ( a . get ( i ) ) + 1 ) ; } else { freq . put ( a . get ( i ) , 1 ) ; } } int [ ] dp = new int [ Collections . max ( a ) + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = freq . getOrDefault ( 1 , 0 ) ; for ( int i = 2 ; i < dp . length ; i ++ ) { dp [ i ] = Math . max ( dp [ i - 1 ] , dp [ i - 2 ] + freq . getOrDefault ( i , 0 ) * i ) ; } return dp [ dp . length - 1 ] ; } 
int CountWays ( String s , String t , int k , int mod ) { int n = s . length ( ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String p = s . substring ( i , n ) + s . substring ( 0 , i ) ; if ( p . equals ( t ) ) { a ++ ; } else { b ++ ; } } int [ ] dp1 = new int [ k + 1 ] ; int [ ] dp2 = new int [ k + 1 ] ; if ( s . equals ( t ) ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ) ; dp2 [ i ] = ( ( ( dp1 [ i - 1 ] * b ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ) ; } return dp1 [ k ] ; } 
int FindSubarraySum ( List < Integer > arr , int n , int k ) { Map < Integer , Integer > prevSum = new HashMap < Integer , Integer > ( ) ; int res = 0 ; int currSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { currSum += arr . get ( i ) ; if ( currSum == k ) { res ++ ; } if ( prevSum . containsKey ( currSum - k ) ) { res += prevSum . get ( currSum - k ) ; } prevSum . put ( currSum , prevSum . getOrDefault ( currSum , 0 ) + 1 ) ; } return res ; } 
int MaximumOccurrence ( String s ) { int n = s . length ( ) ; HashMap < String , Integer > freq = new HashMap < String , Integer > ( ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { String temp = "" + s . charAt ( i ) ; freq . put ( temp , freq . getOrDefault ( temp , 0 ) + 1 ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { String temp = "" + s . charAt ( i ) + s . charAt ( j ) ; freq . put ( temp , freq . getOrDefault ( temp , 0 ) + 1 ) ; } } int answer = Integer . MIN_VALUE ; for ( Map . Entry < String , Integer > entry : freq . entrySet ( ) ) { answer = Math . max ( answer , entry . getValue ( ) ) ; } return answer ; } 
int countCharacters ( List < String > strings , String chars ) { int res = 0 ; HashMap < Character , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < chars . length ( ) ; i ++ ) { freq . put ( chars . charAt ( i ) , freq . getOrDefault ( chars . charAt ( i ) , 0 ) + 1 ) ; } for ( String st : strings ) { boolean flag = true ; for ( char c : st . toCharArray ( ) ) { if ( ! freq . containsKey ( c ) ) { flag = false ; break ; } } if ( flag ) { res += st . length ( ) ; } } return res ; } 
int DistinctSubstring ( String p , String q , int k , int n ) { HashSet < String > ss = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int sum = 0 ; String s = "" ; for ( int j = i ; j < n ; ++ j ) { int pos = p . charAt ( j ) - 'a' ; sum += q . charAt ( pos ) - '0' ; s += p . charAt ( j ) ; if ( sum <= k ) { ss . add ( s ) ; } else { break ; } } } return ss . size ( ) ; } 
int uniqueMorseRep ( List < String > arr ) { List < String > morseCode = Arrays . asList ( ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , "...." , ".." , ".---" , "-.-" , ".-.." , "--" , "-." , "---" , ".--." , "--.-" , ".-." , "..." , "-" , "..-" , "...-" , ".--" , "-..-" , "-.--" , "--.." ) ; HashSet < String > st = new HashSet < String > ( ) ; int n = arr . size ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String temp = "" ; int m = arr . get ( i ) . length ( ) ; for ( int j = 0 ; j < m ; j ++ ) { temp += morseCode . get ( arr . get ( i ) . charAt ( j ) - 'a' ) ; } st . add ( temp ) ; } return st . size ( ) ; } 
int CountSubstrings ( String st , int k ) { int n = st . length ( ) ; int answer = 0 ; Map < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( ! map . containsKey ( st . charAt ( i ) ) ) { map . put ( st . charAt ( i ) , 1 ) ; } else { map . put ( st . charAt ( i ) , map . get ( st . charAt ( i ) ) + 1 ) ; } } if ( map . size ( ) == k ) { answer ++ ; } for ( int i = k ; i < n ; i ++ ) { if ( ! map . containsKey ( st . charAt ( i ) ) ) { map . put ( st . charAt ( i ) , 1 ) ; } else { map . put ( st . charAt ( i ) , map . get ( st . charAt ( i ) ) + 1 ) ; } map . put ( st . charAt ( i - k ) , map . get ( st . charAt ( i - k ) ) - 1 ) ; if ( map . get ( st . charAt ( i - k ) ) == 0 ) { map . remove ( st . charAt ( i - k ) ) ; } if ( map . size ( ) == k ) { answer ++ ; } } return answer ; } 
boolean canConstruct ( String s , int k ) { Map < Character , Integer > m = new HashMap < Character , Integer > ( ) ; int p = 0 ; if ( s . length ( ) == k ) { return true ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char c = s . charAt ( i ) ; m . put ( c , m . getOrDefault ( c , 0 ) + 1 ) ; } if ( k > s . length ( ) ) { return false ; } else { for ( Map . Entry < Character , Integer > entry : m . entrySet ( ) ) { if ( entry . getValue ( ) % 2 != 0 ) { p = p + 1 ; } } } if ( k < p ) { return false ; } return true ; } 
boolean equalIgnoreCase ( String str1 , String str2 ) { str1 = str1 . toUpperCase ( ) ; str2 = str2 . toUpperCase ( ) ; return str1 . equals ( str2 ) ; } 
int FindLongestSub ( String bin ) { int n = bin . length ( ) ; int i ; int sum = 0 ; HashMap < Integer , Integer > prevSum = new HashMap < Integer , Integer > ( ) ; int maxLen = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin . charAt ( i ) == '1' ) { sum ++ ; } else { sum -- ; } if ( sum > 0 ) { maxLen = i + 1 ; } else if ( sum <= 0 ) { if ( prevSum . containsKey ( sum - 1 ) ) { int currLen = i - prevSum . get ( sum - 1 ) ; maxLen = Math . max ( maxLen , currLen ) ; } } if ( ! prevSum . containsKey ( sum ) ) { prevSum . put ( sum , i ) ; } } return maxLen ; } 
boolean hasAllCodes ( String s , int k ) { HashSet < String > us = new HashSet < > ( ) ; for ( int i = 0 ; i + k <= s . length ( ) ; i ++ ) { us . add ( s . substring ( i , i + k ) ) ; } return us . size ( ) == ( 1 << k ) ; } 
boolean checkPalin ( String word ) { int n = word . length ( ) ; word = word . toLowerCase ( ) ; for ( int i = 0 ; i < n ; i ++ , n -- ) { if ( word . charAt ( i ) != word . charAt ( n - 1 ) ) { return false ; } } return true ; } 
String convert ( String st ) { String w = "" , z = "" ; st = st . toUpperCase ( ) + " " ; for ( int i = 0 ; i < st . length ( ) ; i ++ ) { char ch = st . charAt ( i ) ; if ( ch != ' ' ) { w += ch ; } else { z += Character . toLowerCase ( w . charAt ( 0 ) ) + w . substring ( 1 ) + " " ; w = "" ; } } return z ; } 
int maxLines ( int n , List < Integer > x1 , List < Integer > y1 , List < Integer > x2 , List < Integer > y2 ) { HashSet < Double > s = new HashSet < Double > ( ) ; double slope ; for ( int i = 0 ; i < n ; ++ i ) { if ( x1 . get ( i ) == x2 . get ( i ) ) { slope = Double . POSITIVE_INFINITY ; } else { slope = ( y2 . get ( i ) - y1 . get ( i ) ) * 1.0 / ( x2 . get ( i ) - x1 . get ( i ) ) ; } s . add ( slope ) ; } return s . size ( ) ; } 
Map < Integer , Integer > primeFactor ( int n ) { Map < Integer , Integer > primef = new HashMap < > ( ) ; while ( n % 2 == 0 ) { if ( primef . containsKey ( 2 ) ) { primef . put ( 2 , primef . get ( 2 ) + 1 ) ; } else { primef . put ( 2 , 1 ) ; } n /= 2 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { if ( primef . containsKey ( i ) ) { primef . put ( i , primef . get ( i ) + 1 ) ; } else { primef . put ( i , 1 ) ; } n /= i ; } } if ( n > 2 ) { primef . put ( n , 1 ) ; } return primef ; } 
String IsDivisibleByDivisor ( int s , int d ) { s %= d ; List < Integer > hashMap = new ArrayList < Integer > ( ) ; hashMap . add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hashMap . contains ( s ) ) { if ( s == 0 ) { return "Yes" ; } return "No" ; } else { hashMap . add ( s ) ; } } return "Yes" ; } 
boolean oddSum ( List < Integer > a , int n , int k ) { HashSet < Integer > odd = new HashSet < Integer > ( ) ; HashSet < Integer > even = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a . get ( i ) % 2 == 0 ) { even . add ( a . get ( i ) ) ; } else { odd . add ( a . get ( i ) ) ; } } if ( odd . size ( ) >= k ) { return true ; } boolean flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= even . size ( ) ) { return true ; } } return flag ; } 
int dayOfYear ( String date ) { List < Integer > days = Arrays . asList ( 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 ) ; int year = Integer . parseInt ( date . substring ( 0 , 4 ) ) ; int month = Integer . parseInt ( date . substring ( 5 , 7 ) ) ; int day = Integer . parseInt ( date . substring ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days . get ( month - 2 ) ; -- month ; } return day ; } 
boolean isPerfectSquare ( List < Integer > arr , int n ) { Map < Integer , Integer > umap = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { umap . put ( arr . get ( i ) , umap . getOrDefault ( arr . get ( i ) , 0 ) + 1 ) ; } for ( Map . Entry < Integer , Integer > entry : umap . entrySet ( ) ) { if ( entry . getValue ( ) % 2 == 1 ) { return false ; } } return true ; } 
int MinMoves ( int n ) { String s = Integer . toString ( n ) ; int ans = Integer . MAX_VALUE ; int length = s . length ( ) ; for ( int i = 0 ; i < length ; ++ i ) { for ( int j = 0 ; j < length ; ++ j ) { if ( i == j ) { continue ; } char [ ] t = s . toCharArray ( ) ; int cur = 0 ; for ( int k = i ; k < length - 1 ; ++ k ) { char temp = t [ k ] ; t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = temp ; ++ cur ; } for ( int k = j - ( j > i ? 1 : 0 ) ; k < length - 2 ; ++ k ) { char temp = t [ k ] ; t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = temp ; ++ cur ; } int pos = - 1 ; for ( int k = 0 ; k < length ; ++ k ) { if ( t [ k ] != '0' ) { pos = k ; break ; } } for ( int k = pos ; k > 0 ; -- k ) { char temp = t [ k ] ; t [ k ] = t [ k - 1 ] ; t [ k - 1 ] = temp ; ++ cur ; } int nn = Integer . parseInt ( new String ( t ) ) ; if ( nn % 25 == 0 ) { ans = Math . min ( ans , cur ) ; } } } if ( ans == Integer . MAX_VALUE ) { return - 1 ; } return ans ; } 
int MinimumOperations ( List < Integer > a , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a . get ( i ) , mp . getOrDefault ( a . get ( i ) , 0 ) + 1 ) ; } int count = 0 ; for ( HashMap . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) > 1 ) { count += entry . getValue ( ) - 1 ; } } return count ; } 
int KaprekarRec ( int n , int prev ) { if ( n == 0 ) { return 0 ; } prev = n ; int [ ] digits = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } Arrays . sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } Arrays . sort ( digits ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } int diff = Math . abs ( asc - desc ) ; if ( diff == prev ) { return diff ; } return KaprekarRec ( diff , prev ) ; } 
String FractionToDecimal ( int numr , int denr ) { String res = "" ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; int rem = numr % denr ; while ( rem != 0 && ! mp . containsKey ( rem ) ) { mp . put ( rem , res . length ( ) ) ; rem = rem * 10 ; int resPart = rem / denr ; res += Integer . toString ( resPart ) ; rem = rem % denr ; } if ( rem == 0 ) { return "" ; } if ( mp . containsKey ( rem ) ) { return res . substring ( mp . get ( rem ) ) ; } return "" ; } 
boolean isFancy ( String num ) { HashMap < Character , Character > fp = new HashMap < > ( ) ; fp . put ( '0' , '0' ) ; fp . put ( '1' , '1' ) ; fp . put ( '6' , '9' ) ; fp . put ( '8' , '8' ) ; fp . put ( '9' , '6' ) ; int n = num . length ( ) ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( ! fp . containsKey ( num . charAt ( l ) ) || fp . get ( num . charAt ( l ) ) != num . charAt ( r ) ) { return false ; } l ++ ; r -- ; } return true ; } 
