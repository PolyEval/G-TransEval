int greatest_common_divisor ( int a , int b ) throw ( ) {
  if ( a == 0 || b == 0 ) return a + b ;
  if ( a == b ) return a ;
  if ( a > b ) return greatest_common_divisor ( a % b , b ) ;
  else return greatest_common_divisor ( a , b % a ) ;
}

***Example ends here:
int largest_divisor ( int n ) {
  for ( int i = 2 ;
  i <= n ;
  i ++ ) {
    if ( n % i == 0 ) return n / i ;
  }
  return 1 ;
}

***Example ends here:
bool is_prime ( int n ) {
  if ( n < 2 ) return false ;
  for ( int k = 2 ;
  k < n ;
  k ++ ) if ( n % k == 0 ) return false ;
  return true ;
}

***Example ends here:
int fizzBuzz ( int n ) {
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( i % 11 == 0 || i % 13 == 0 ) {
      int q = i ;
      while ( q > 0 ) {
        if ( q % 10 == 7 ) count ++ ;
        q /= 10 ;
      }
    }
  }
  return count ;
}

***Example ends here:
int prime_fib ( int n ) {
  int f0 = 0 ;
  int f1 = 1 ;
  while ( n > 0 ) {
    int p = f0 + f1 ;
    bool is_prime = p >= 2 ;
    for ( int i = 2 ;
    i < p ;
    i ++ ) {
      if ( p % i == 0 ) {
        is_prime = false ;
        break ;
      }
    }
    if ( is_prime ) n -- ;
    f0 = f1 ;
    f1 = p ;
  }
  return f1 ;
}

***Example ends here:
double triangle_area ( double a , double h ) {
  return a * h / 2 ;
}

***Example ends here:
int modp ( int n , int p ) {
  int ret = 1 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) ret = ( ret * 2 ) % p ;
  return ret ;
}

***Example ends here:
int add ( int x , int y ) {
  return x + y ;
}

***Example ends here:
int fib ( int n ) {
  if ( n == 0 ) return 0 ;
  if ( n == 1 ) return 1 ;
  return fib ( n - 1 ) + fib ( n - 2 ) ;
}

***Example ends here:
int largest_prime_factor ( int n ) {
  for ( int i = 2 ;
  i < n ;
  i ++ ) while ( n % i == 0 && n > i ) n /= i ;
  return n ;
}

***Example ends here:
int sum_to_n ( int n ) {
  int result = 0 ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) result += i ;
  return result ;
}

***Example ends here:
int fibfib ( int n ) {
  if ( n == 0 ) return 0 ;
  if ( n == 1 ) return 0 ;
  if ( n == 2 ) return 1 ;
  return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ;
}

***Example ends here:
bool is_multiply_prime ( int a ) {
  int num = 0 ;
  for ( int i = 2 ;
  i <= a ;
  i ++ ) {
    while ( a % i == 0 && a >= i ) {
      a /= i ;
      num ++ ;
    }
  }
  return num == 3 ;
}

***Example ends here:
bool is_simple_power ( int x , int n ) {
  if ( n == 1 ) return x == 1 ;
  int power = 1 ;
  while ( power < x ) power *= n ;
  return power == x ;
}

***Example ends here:
int choose_num ( int x , int y ) {
  if ( x > y ) return - 1 ;
  if ( y % 2 == 0 ) return y ;
  if ( x == y ) return - 1 ;
  return y - 1 ;
}

***Example ends here:
bool is_equal_to_sum_even ( int n ) {
  return n % 2 == 0 && n >= 8 ;
}

***Example ends here:
int special_factorial ( int n ) {
  int fact = 1 ;
  int special_fact = 1 ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) {
    fact *= i ;
    special_fact *= fact ;
  }
  return special_fact ;
}

***Example ends here:
int x_or_y ( int n , int x , int y ) {
  bool is_prime = n >= 2 ;
  for ( int i = 2 ;
  i < n ;
  i ++ ) {
    if ( n % i == 0 ) {
      is_prime = false ;
      break ;
    }
  }
  if ( is_prime ) return x ;
  return y ;
}

***Example ends here:
bool rightAngleTriangle ( int a , int b , int c ) {
  return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b ;
}

***Example ends here:
int fast_pow ( int n , int k ) {
  if ( k == 0 ) return 1 ;
  int temp = fast_pow ( n , k / 2 ) ;
  if ( k % 2 == 0 ) return temp * temp ;
  else return n * temp * temp ;
}

***Example ends here:
bool is_palin ( string s ) {
  int l = s . size ( ) / 2 ;
  for ( int i = 0 ;
  i < l ;
  i ++ ) {
    if ( s [ i ] != s [ s . size ( ) - i - 1 ] ) return false ;
  }
  return true ;
}

***Example ends here:
int findSum ( int n ) {
  int ans = 0 ;
  int temp = 0 ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) {
    if ( ! temp < n ) break ;
    temp = i - 1 ;
    int num = 1 ;
    while ( temp < n ) {
      if ( temp + i <= n ) ans += i * num ;
      else ans += ( n - temp ) * num ;
      temp += i ;
      num ++ ;
    }
  }
  return ans ;
}

***Example ends here:
int getNextGap ( int gap ) {
  gap = gap * 10 / 13 ;
  if ( gap < 1 ) return 1 ;
  return gap ;
}

***Example ends here:
int countNonDecreasing ( int n ) {
  int k = 10 ;
  int count = 1 ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) {
    count *= k + i - 1 ;
    count /= i ;
  }
  return count ;
}

***Example ends here:
int power ( int x , int y ) {
  if ( y == 0 ) return 1 ;
  else if ( y % 2 == 0 ) return power ( x , y / 2 ) * power ( x , y / 2 ) ;
  else return x * power ( x , y / 2 ) * power ( x , y / 2 ) ;
}

***Example ends here:
int power ( int x , int y ) {
  if ( y == 0 ) return 1 ;
  int temp = power ( x , y / 2 ) ;
  if ( y % 2 == 0 ) return temp * temp ;
  else {
    if ( y > 0 ) return x * temp * temp ;
    else return temp * temp / x ;
  }
  ;
}

***Example ends here:
int multiply ( int x , int y ) {
  if ( y == 0 ) return 0 ;
  if ( y > 0 ) return x + multiply ( x , y - 1 ) ;
  if ( y < 0 ) return - multiply ( x , - y ) ;
  return 0 ;
}

***Example ends here:
int smallest ( int x , int y , int z ) {
  if ( ! y / x ) return y ? ( ! y / z ) : z ;
  return x ? ( ! x / z ) : z ;
}

***Example ends here:
bool is_power_of_four ( int n ) {
  if ( n == 0 ) return false ;
  while ( n != 1 ) {
    if ( n % 4 != 0 ) return false ;
    n = n / 4 ;
  }
  return true ;
}

***Example ends here:
int mod_inverse ( int a , int m ) {
  int m0 = m ;
  int x0 = 0 , x1 = 1 ;
  if ( m == 1 ) return 0 ;
  while ( a > 1 ) {
    int q = a / m ;
    int t = m ;
    m = a % m ;
    a = t ;
    t = x0 ;
    x0 = x1 - q * x0 ;
    x1 = t ;
  }
  if ( x1 < 0 ) x1 += m0 ;
  return x1 ;
}

***Example ends here:
int cntRotations ( string s , int n ) {
  string s2 = s + s ;
  int pre [ 2 * n ] = {
    0 }
    ;
    for ( int i = 0 ;
    i < 2 * n ;
    i ++ ) {
      if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ;
      if ( s2 [ i ] == 'a' || s2 [ i ] == 'e' || s2 [ i ] == 'i' || s2 [ i ] == 'o' || s2 [ i ] == 'u' ) pre [ i ] ++ ;
    }
    int ans = 0 ;
    for ( int i = n - 1 ;
    i < 2 * n - 1 ;
    i ++ ) {
      int r , l ;
      int x1 = pre [ r ] ;
      if ( l >= 0 ) x1 -= pre [ l ] ;
      r = i - n / 2 ;
      int left = pre [ r ] ;
      if ( l >= 0 ) left -= pre [ l ] ;
      int right = x1 - left ;
      if ( left > right ) ans ++ ;
    }
    return ans ;
  }
  
***Example ends here:
int binomial_coeff ( int n , int k ) {
  int res = 1 ;
  if ( k > n - k ) k = n - k ;
  for ( int i = 0 ;
  i < k ;
  i ++ ) {
    res *= n - i ;
    res /= i + 1 ;
  }
  return res ;
}

***Example ends here:
bool is_prefix ( string temp , string s ) {
  if ( temp . size ( ) < s . size ( ) ) {
    return false ;
  }
  else {
    for ( int i = 0 ;
    i < s . size ( ) ;
    i ++ ) {
      if ( ( s [ i ] != temp [ i ] ) && ( s [ i ] != temp [ i ] ) ) {
        return false ;
      }
    }
    return true ;
  }
}

***Example ends here:
string lexicographicallySmallestString ( string s , int n ) {
  int last_ze = - 1 ;
  string ans = "" ;
  for ( int i = n - 1 ;
  i >= 0 ;
  i -- ) {
    if ( s [ i ] == '0' ) {
      last_ze = i ;
      break ;
    }
  }
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( i <= last_ze && s [ i ] == '0' ) {
      ans += s [ i ] ;
    }
    else if ( i > last_ze ) {
      ans += s [ i ] ;
    }
  }
  return ans ;
}

***Example ends here:
int calculate_max ( int n , int m , int k ) {
  int ans = - 1 ;
  int low = 0 , high = m ;
  while ( low <= high ) {
    int mid = ( low + high ) / 2 ;
    int val = 0 ;
    int l = k - 1 ;
    int r = n - k ;
    val += mid ;
    if ( mid >= l ) val += l * ( 2 * mid - l - 1 ) / 2 ;
    else val += mid * ( mid - 1 ) / 2 + ( l - mid ) ;
    if ( mid >= r ) val += r * ( 2 * mid - r - 1 ) / 2 ;
    else val += mid * ( mid - 1 ) / 2 + ( r - mid ) ;
    if ( val <= m ) {
      ans = max ( ans , mid ) ;
      low = mid + 1 ;
    }
    else high = mid - 1 ;
  }
  return ans ;
}

***Example ends here:
int find_length ( string s , int i , int j ) {
  int required = i ;
  int length = 0 ;
  for ( int curr = 0 ;
  curr < s . size ( ) ;
  curr ++ ) {
    if ( s [ curr ] == required ) {
      length ++ ;
      if ( required == i ) required = j ;
      else required = i ;
    }
  }
  return length ;
}

***Example ends here:
bool check_reverse ( int left_sum , int right_sum ) {
  int rev = 0 ;
  int temp = right_sum ;
  while ( temp != 0 ) {
    rev = rev * 10 + temp % 10 ;
    temp /= 10 ;
  }
  if ( rev == left_sum ) return true ;
  return false ;
}

***Example ends here:
bool is_composite ( int n ) {
  if ( n <= 1 ) return false ;
  if ( n <= 3 ) return false ;
  if ( n % 2 == 0 || n % 3 == 0 ) return true ;
  for ( int i = 5 ;
  i <= n ;
  i += 6 ) {
    if ( i * i > n ) break ;
    if ( n % i == 0 || n % ( i + 2 ) == 0 ) return true ;
  }
  return false ;
}

***Example ends here:
int minDeletion ( string s ) {
  int n = s . length ( ) ;
  int firstidx1 = - 1 ;
  int lastidx0 = - 1 ;
  for ( int i = 0 ;
  i <= n ;
  i ++ ) {
    if ( s [ i ] == '1' ) {
      firstidx1 = i ;
      break ;
    }
  }
  for ( int i = n - 1 ;
  i >= 0 ;
  i -- ) {
    if ( s [ i ] == '0' ) {
      lastidx0 = i ;
      break ;
    }
  }
  if ( firstidx1 == - 1 || lastidx0 == - 1 ) return 0 ;
  int count1 = 0 , count0 = 0 ;
  for ( int i = 0 ;
  i <= lastidx0 ;
  i ++ ) {
    if ( s [ i ] == '1' ) count1 ++ ;
  }
  for ( int i = firstidx1 + 1 ;
  i < n ;
  i ++ ) {
    if ( s [ i ] == '1' ) count0 ++ ;
  }
  return min ( count0 , count1 ) ;
}

***Example ends here:
int minSteps ( string s , int n ) {
  int cost = 0 ;
  vector < int > f ( 26 , 0 ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    int currEle = ( char ) s [ i ] - ( char ) 'a' ;
    int smaller = 0 ;
    for ( int j = 0 ;
    j < currEle + 1 ;
    j ++ ) {
      if ( f [ j ] != 0 ) smaller += f [ j ] ;
    }
    if ( smaller == 0 ) cost += i + 1 ;
    else cost += i - smaller + 1 ;
    f [ ( char ) s [ i ] - ( char ) 'a' ] ++ ;
  }
  return cost ;
}

***Example ends here:
int numberOfWays ( int n ) {
  int count = 0 ;
  for ( int a = 1 ;
  a <= n ;
  a ++ ) {
    for ( int b = 1 ;
    b <= n ;
    b ++ ) {
      int c = n - ( a + b ) ;
      if ( a < b + c && b < a + c && c < a + b ) {
        count ++ ;
      }
    }
  }
  return count ;
}

***Example ends here:
int slopeOfNum ( int num [ ] , int n ) {
  int slope = 0 ;
  for ( int i = 1 ;
  i <= n - 1 ;
  i ++ ) {
    if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) {
      slope ++ ;
    }
    else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) {
      slope ++ ;
    }
  }
  return slope ;
}

***Example ends here:
int middle_of_three ( int a , int b , int c ) {
  int x = a - b ;
  int y = b - c ;
  int z = a - c ;
  if ( x * y > 0 ) return b ;
  else if ( x * z > 0 ) return c ;
  else return a ;
}

***Example ends here:
uint32_t count_max_set_bits ( uint32_t left , uint32_t right ) {
  while ( ( left | ( left + 1 ) ) <= right ) {
    left |= left + 1 ;
  }
  return left ;
}

***Example ends here:
int find_s ( int s ) {
  int l = 1 ;
  int r = s / 2 + 1 ;
  while ( l <= r ) {
    int mid = ( l + r ) / 2 ;
    int sum = mid * ( mid + 1 ) / 2 ;
    if ( sum == s ) return mid ;
    else if ( sum > s ) r = mid - 1 ;
    else l = mid + 1 ;
  }
  return - 1 ;
}

***Example ends here:
bool check ( string s ) {
  int min = INT_MAX ;
  int max = - INT_MAX ;
  int sum = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    int ascii = ( int ) s [ i ] ;
    if ( ascii < 96 || ascii > 122 ) return false ;
    sum += ascii ;
    if ( min > ascii ) min = ascii ;
    if ( max < ascii ) max = ascii ;
  }
  min -- ;
  int e_sum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ;
  return sum == e_sum ;
}

***Example ends here:
int minimumPossibleProduct ( int k ) {
  int res = 1 ;
  int r = ( 1 << k ) - 1 ;
  for ( int i = 0 ;
  i < k ;
  i ++ ) res *= r - 1 ;
  res *= r ;
  return res ;
}

***Example ends here:
int find_in_grid ( int i , int j ) {
  if ( i == j ) return i * i - ( i - 1 ) ;
  else if ( i > j ) {
    if ( i % 2 == 0 ) return i * i - ( j - 1 ) ;
    else return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ;
  }
  else {
    if ( j % 2 == 0 ) return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ;
    else return j * j - ( i - 1 ) ;
  }
}

***Example ends here:
int find_min_operations_req_emp_str ( string s ) {
  int cnt_one = 0 ;
  int cnt_zero = 0 ;
  int n = s . length ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( s [ i ] == '0' ) {
      if ( cnt_one > 0 ) cnt_one = cnt_one - 1 ;
      cnt_zero = cnt_zero + 1 ;
    }
    else {
      if ( cnt_zero > 0 ) cnt_zero = cnt_zero - 1 ;
      cnt_one = cnt_one + 1 ;
    }
  }
  return cnt_one + cnt_zero ;
}

***Example ends here:
bool is_reachable ( int x1 , int y1 , int x2 , int y2 ) {
  while ( x2 > x1 && y2 > y1 ) {
    if ( x2 > y2 ) x2 %= y2 ;
    else y2 %= x2 ;
  }
  if ( x2 == x1 ) return y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ;
  else if ( y2 == y1 ) return x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ;
  else return false ;
}

***Example ends here:
int find_max_soln ( int n , int x , int y ) {
  int ans = - INT_MAX ;
  for ( int k = 0 ;
  k < n + 1 ;
  k ++ ) {
    if ( k % x == y ) ans = max ( ans , k ) ;
  }
  return ans == 0 ? - 1 : ans ;
}

***Example ends here:
int numberOfPairs ( int n ) {
  int count = 0 ;
  int i = 1 ;
  int j = n - 1 ;
  while ( i < j ) {
    if ( ( i + j ) == n ) count ++ ;
    i ++ ;
    j -- ;
  }
  return count ;
}

***Example ends here:
int minChanges ( string s , int n ) {
  int count = 0 , zeros = 0 , ones = 0 ;
  if ( s [ 0 ] != '1' ) {
    count ++ ;
    ones ++ ;
  }
  for ( int i = 1 ;
  i < n ;
  i ++ ) {
    if ( s [ i ] == '0' ) zeros ++ ;
    else ones ++ ;
    if ( zeros > ones ) {
      zeros -- ;
      ones ++ ;
      count ++ ;
    }
  }
  return count ;
}

***Example ends here:
int k_visible_from_left ( int n , int k ) {
  if ( n == k ) return 1 ;
  if ( k == 1 ) {
    int ans = 1 ;
    for ( int i = 1 ;
    i < n ;
    i ++ ) ans *= i ;
    return ans ;
  }
  return k_visible_from_left ( n - 1 , k - 1 ) + ( n - 1 ) * k_visible_from_left ( n - 1 , k ) ;
}

***Example ends here:
double find ( int n , int sum ) {
  if ( sum > 6 * n || sum < n ) return 0 ;
  if ( n == 1 ) {
    if ( sum >= 1 && sum <= 6 ) return 1.0 / 6 ;
    else return 0 ;
  }
  double s = 0 ;
  for ( int i = 1 ;
  i <= 7 ;
  i ++ ) s += find ( n - 1 , sum - i ) / 6 ;
  return s ;
}

***Example ends here:
int bin_coff ( int n , int r ) {
  int val = 1 ;
  if ( r > ( n - r ) ) r = n - r ;
  for ( int i = 0 ;
  i < r ;
  i ++ ) {
    val *= n - i ;
    val /= i + 1 ;
  }
  return val ;
}

***Example ends here:
int get_mask ( int val ) {
  int mask = 0 ;
  if ( val == 0 ) return 1 ;
  while ( val ) {
    int d = val % 10 ;
    mask |= ( 1 << d ) ;
    val /= 10 ;
  }
  return mask ;
}

***Example ends here:
int ways_to_k_adjacent_set_bits ( int n , int k , int current_index , int adjacent_set_bits , int last_bit ) {
  if ( current_index == n ) {
    if ( adjacent_set_bits == k ) return 1 ;
    return 0 ;
  }
  int no_of_ways = 0 ;
  if ( last_bit == 1 ) {
    no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits + 1 , 1 ) ;
    no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ;
  }
  else if ( last_bit != 1 ) {
    no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 1 ) ;
    no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ;
  }
  return no_of_ways ;
}

***Example ends here:
int check_func ( int i , int j , char * st ) {
  if ( st [ i ] == '(' && st [ j ] == ')' ) return 1 ;
  if ( st [ i ] == '(' && st [ j ] == '?' ) return 1 ;
  if ( st [ i ] == '?' && st [ j ] == ')' ) return 1 ;
  if ( st [ i ] == '[' && st [ j ] == ']' ) return 1 ;
  return 0 ;
}

***Example ends here:
int find_golomb ( int n ) {
  if ( n == 1 ) return 1 ;
  return 1 + find_golomb ( n - find_golomb ( find_golomb ( n - 1 ) ) ) ;
}

***Example ends here:
bool all_ones ( string s , int n ) {
  int co = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) co += 1 == s [ i ] ? 1 : 0 ;
  return co == n ;
}

***Example ends here:
int pad ( int n ) {
  int p_prev_prev = 1 , p_prev , p_curr , p_next ;
  for ( int i = 3 ;
  i <= n ;
  i ++ ) {
    p_next = p_prev_prev + p_prev ;
    p_prev_prev = p_prev ;
    p_prev = p_curr ;
    p_curr = p_next ;
  }
  return p_next ;
}

***Example ends here:
int odd_length_palindrome ( int k ) {
  int palin = k ;
  k = k / 10 ;
  while ( k > 0 ) {
    int rev = k % 10 ;
    palin = palin * 10 + rev ;
    k = k / 10 ;
  }
  return palin ;
}

***Example ends here:
string change_string ( string s0 ) {
  string s ( s0 ) ;
  int n = s0 . size ( ) ;
  if ( s [ 0 ] == '?' ) {
    s [ 0 ] = 'a' ;
    if ( s [ 0 ] == s [ 1 ] ) s [ 0 ] = ( char ) ( tolower ( s [ 0 ] ) + 1 ) ;
  }
  for ( int i = 1 ;
  i < n - 1 ;
  i ++ ) {
    if ( s [ i ] == '?' ) {
      s [ i ] = 'a' ;
      if ( s [ i ] == s [ i - 1 ] ) s [ i ] = ( char ) ( tolower ( s [ i ] ) + 1 ) ;
      if ( s [ i ] == s [ i + 1 ] ) s [ i ] = ( char ) ( tolower ( s [ i ] ) + 1 ) ;
      if ( s [ i ] == s [ i - 1 ] ) s [ i ] = ( char ) ( tolower ( s [ i ] ) + 1 ) ;
    }
  }
  if ( s [ n - 1 ] == '?' ) {
    s [ n - 1 ] = 'a' ;
    if ( s [ n - 1 ] == s [ n - 2 ] ) s [ n - 1 ] = ( char ) ( tolower ( s [ n - 1 ] ) + 1 ) ;
  }
  return s ;
}

***Example ends here:
int totalHammingDistance ( int n ) {
  int i = 1 , sum = 0 ;
  while ( n / i > 0 ) {
    sum = sum + n / i ;
    i = i * 2 ;
  }
  return sum ;
}

***Example ends here:
int check_bitonic ( string s ) {
  int i = 1 ;
  for ( i = 1 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s [ i ] > s [ i - 1 ] ) continue ;
    if ( s [ i ] <= s [ i - 1 ] ) break ;
  }
  if ( i == s . length ( ) - 1 ) return 1 ;
  int j ;
  for ( j = i + 1 ;
  j < s . length ( ) ;
  j ++ ) {
    if ( s [ j ] < s [ j - 1 ] ) continue ;
    if ( s [ j ] >= s [ j - 1 ] ) break ;
  }
  i = j ;
  if ( i != s . length ( ) - 1 ) return 0 ;
  return 1 ;
}

***Example ends here:
bool ends_with ( const char * str , const char * pat ) {
  int pat_len = strlen ( pat ) ;
  int str_len = strlen ( str ) ;
  if ( pat_len > str_len ) return false ;
  pat_len -- ;
  str_len -- ;
  while ( pat_len >= 0 ) {
    if ( pat [ pat_len ] != str [ str_len ] ) return false ;
    pat_len -- ;
    str_len -- ;
  }
  return true ;
}

***Example ends here:
int get_sum ( int n , int d ) {
  if ( n < d ) return 0 ;
  while ( n % 10 != d ) n -- ;
  int k = n / 10 ;
  return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ;
}

***Example ends here:
int balanceStringBySwapping ( string s ) {
  int unbalancePair = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( unbalancePair > 0 && s [ i ] == ']' ) {
      unbalancePair -- ;
    }
    else if ( s [ i ] == '[' ) {
      unbalancePair ++ ;
    }
  }
  return ( unbalancePair + 1 ) / 2 ;
}

***Example ends here:
unsigned int compute_hash ( const char * s ) {
  const unsigned int p = 31 ;
  const unsigned int mod = 10 * 9 + 7 ;
  unsigned int hash_val = 0 ;
  unsigned int mul = 1 ;
  for ( char ch = * s ;
  ch != '\0' ;
  ch = * s ) {
    hash_val = ( hash_val + ( ( unsigned int ) ch - ( unsigned int ) 'a' + 1 ) * mul ) % mod ;
    mul = mul * p % mod ;
  }
  return hash_val ;
}

***Example ends here:
int countOfSubstringWithOnlyOnes ( string s ) {
  int res = 0 , count = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    count = count + 1 == s [ i ] ? 0 : 1 ;
    res = res + count ;
  }
  return res ;
}

***Example ends here:
int composite ( int n ) {
  int flag = 0 ;
  int c = 0 ;
  for ( int j = 1 ;
  j <= n ;
  j ++ ) {
    if ( n % j == 0 ) c ++ ;
  }
  if ( c >= 3 ) flag = 1 ;
  return flag ;
}

***Example ends here:
bool is_div_by_six ( string s , int n ) {
  int sum = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) sum += ( char ) s [ i ] - ( char ) 'a' + 1 ;
  if ( sum % 3 != 0 ) return false ;
  int last_digit = ( ( char ) s [ n - 1 ] - ( char ) 'a' + 1 ) % 10 ;
  if ( last_digit % 2 != 0 ) return false ;
  return true ;
}

***Example ends here:
bool IsRedundantBraces ( string s ) {
  int a = 0 , b = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s [ i ] == '(' && s [ i + 2 ] == ')' ) return true ;
    if ( s [ i ] == '*' || s [ i ] == '+' || s [ i ] == '-' || s [ i ] == '/' ) a ++ ;
    if ( s [ i ] == '(' ) b ++ ;
  }
  if ( b > a ) return true ;
  return false ;
}

***Example ends here:
int countSubStr ( string s , int n ) {
  int count = 0 ;
  int i = 0 ;
  while ( i < ( n - 2 ) ) {
    if ( s [ i ] == '0' && s [ i + 1 ] == '1' && s [ i + 2 ] == '0' ) {
      count ++ ;
      i += 3 ;
    }
    else if ( s [ i ] == '1' && s [ i + 1 ] == '0' && s [ i + 2 ] == '1' ) {
      count ++ ;
      i += 3 ;
    }
    else {
      i ++ ;
    }
  }
  return count ;
}

***Example ends here:
int prefix_occurrences ( string s ) {
  char c = s [ 0 ] ;
  int count_c = 0 ;
  for ( int i = 1 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s [ i ] == c ) {
      count_c ++ ;
    }
  }
  return count_c ;
}

***Example ends here:
bool is_valid ( const char * s , int len ) {
  for ( int i = 1 ;
  i < len ;
  i ++ ) {
    if ( s [ i ] == s [ i - 1 ] ) return false ;
  }
  return true ;
}

***Example ends here:
int count ( string s , int k ) {
  int n = s . size ( ) ;
  int d = 0 ;
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) d += ( int ) s [ i ] ;
  if ( d % k == 0 ) count ++ ;
  for ( int i = k ;
  i < n ;
  i ++ ) {
    int prev = ( int ) s [ i - k ] ;
    d -= prev ;
    d += ( int ) s [ i ] ;
    if ( d % k == 0 ) count ++ ;
  }
  return count ;
}

***Example ends here:
int findSubstringCount ( string s ) {
  int result = 0 ;
  int n = s . size ( ) ;
  int i = 0 ;
  while ( i < n - 1 ) {
    if ( isdigit ( s [ i ] ) + 1 == s [ i + 1 ] ) {
      result ++ ;
      while ( i < n - 1 && isdigit ( s [ i ] ) + 1 == s [ i + 1 ] ) {
        i ++ ;
      }
    }
    i ++ ;
  }
  return result ;
}

***Example ends here:
bool find ( string s1 , string s2 ) {
  int len1 = s1 . length ( ) ;
  int len2 = s2 . length ( ) ;
  if ( len1 != len2 ) return false ;
  int d [ len1 ] = {
    0 }
    ;
    d [ 0 ] = ( int ) s2 [ 0 ] - ( int ) s1 [ 0 ] ;
    for ( int i = 1 ;
    i < len1 ;
    i ++ ) {
      if ( s1 [ i ] > s2 [ i ] ) return false ;
      else d [ i ] = ( int ) s2 [ i ] - ( int ) s1 [ i ] ;
    }
    for ( int i = 0 ;
    i < len1 - 1 ;
    i ++ ) {
      if ( d [ i ] < d [ i + 1 ] ) return false ;
    }
    return true ;
  }
  
***Example ends here:
bool is_in_given_base ( string s , int bas ) {
  if ( bas > 16 ) {
    return false ;
  }
  else if ( bas <= 10 ) {
    for ( int i = 0 ;
    i < s . size ( ) ;
    i ++ ) {
      if ( ! ( isdigit ( s [ i ] ) && isdigit ( s [ i ] ) ) ) {
        return false ;
      }
    }
  }
  else {
    for ( int i = 0 ;
    i < s . size ( ) ;
    i ++ ) {
      if ( ! ( ( isdigit ( s [ i ] ) && isdigit ( s [ i ] ) ) || ( isdigit ( s [ i ] ) && isdigit ( s [ i ] ) ) ) ) {
        return false ;
      }
    }
  }
  return true ;
}

***Example ends here:
int count_non_empty_substr ( string s ) {
  int n = s . size ( ) ;
  return n * ( n + 1 ) / 2 ;
}

***Example ends here:
int evenDecimalValue ( string s , int n ) {
  int result = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = i ;
    j < n ;
    j ++ ) {
      int decimalValue = 0 ;
      int powerOf2 = 1 ;
      for ( int k = i ;
      k <= j ;
      k ++ ) {
        decimalValue += ( ( char ) s [ k ] - '0' ) * powerOf2 ;
        powerOf2 *= 2 ;
      }
      if ( decimalValue % 2 == 0 ) {
        result ++ ;
      }
    }
  }
  return result ;
}

***Example ends here:
int calculate ( string s ) {
  int ans = 6 ;
  for ( int i = 0 ;
  i < 10 ;
  i ++ ) {
    for ( int j = 0 ;
    j < 10 ;
    j ++ ) {
      for ( int k = 0 ;
      k < 10 ;
      k ++ ) {
        for ( int l = 0 ;
        l < 10 ;
        l ++ ) {
          for ( int m = 0 ;
          m < 10 ;
          m ++ ) {
            for ( int n = 0 ;
            n < 10 ;
            n ++ ) {
              if ( i + j + k == l + m + n ) {
                int c = 0 ;
                if ( i != toupper ( s [ 0 ] - '0' ) ) c ++ ;
                if ( j != toupper ( s [ 1 ] - '0' ) ) c ++ ;
                if ( k != toupper ( s [ 2 ] - '0' ) ) c ++ ;
                if ( l != toupper ( s [ 3 ] - '0' ) ) c ++ ;
                if ( m != toupper ( s [ 4 ] - '0' ) ) c ++ ;
                if ( n != toupper ( s [ 5 ] - '0' ) ) c ++ ;
                if ( c < ans ) ans = c ;
              }
            }
          }
        }
      }
    }
  }
  return ans ;
}

***Example ends here:
int xor_zero ( string s ) {
  int one_count = 0 ;
  int zero_count = 0 ;
  int n = s . length ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( s [ i ] == '1' ) one_count ++ ;
    else zero_count ++ ;
  }
  if ( one_count % 2 == 0 ) return zero_count ;
  return one_count ;
}

***Example ends here:
int even_length ( vector < int > n ) {
  int res = n . size ( ) ;
  for ( int j = n . size ( ) - 1 ;
  j >= 0 ;
  j -- ) {
    res += n [ j ] ;
  }
  return res ;
}

***Example ends here:
int countSubstringWithEqualEnds ( string s ) {
  int result = 0 ;
  int n = s . size ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = i ;
    j < n ;
    j ++ ) {
      if ( s [ i ] == s [ j ] ) {
        result = result + 1 ;
      }
    }
  }
  return result ;
}

***Example ends here:
double normal_slope ( double a , double b , double x1 , double y1 ) {
  double g = a / 2 ;
  double f = b / 2 ;
  if ( g - x1 == 0 ) return - 1 ;
  double slope = ( f - y1 ) / ( g - x1 ) ;
  if ( slope == 0 ) return - 2 ;
  return slope ;
}

***Example ends here:
bool orthogonality ( double x1 , double y1 , double x2 , double y2 , double r1 , double r2 ) {
  double dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;
  if ( dsquare == r1 * r1 + r2 * r2 ) return true ;
  else return false ;
}

***Example ends here:
double find_area_shaded ( double a ) {
  double sq_area = a * a ;
  double semi_circle_area = ( 3.14 * ( a * a ) / 8 ) ;
  double shaded_area = 4 * semi_circle_area - sq_area ;
  return shaded_area ;
}

***Example ends here:
int factorial ( int a , int b ) {
  int res = 1 ;
  for ( int i = 1 ;
  i <= a ;
  i ++ ) res = res * i ;
  for ( int i = 1 ;
  i <= a ;
  i ++ ) res = res / i ;
  for ( int i = 1 ;
  i <= b ;
  i ++ ) res = res / i ;
  return res ;
}

***Example ends here:
int factorTree ( int n ) {
  int height = 0 ;
  while ( n > 1 ) {
    bool flag = false ;
    for ( int i = 2 ;
    i <= ( int ) sqrt ( n ) ;
    i ++ ) {
      if ( n % i == 0 ) {
        n = n / i ;
        flag = true ;
        break ;
      }
    }
    height ++ ;
    if ( ! flag ) break ;
  }
  return height ;
}

***Example ends here:
string find_if_possible ( int n , int s , int x ) {
  if ( s >= x && s % 2 == x % 2 ) {
    if ( n >= 3 ) return "Yes" ;
    if ( n == 1 ) {
      if ( s == x ) return "Yes" ;
      else return "No" ;
    }
    if ( n == 2 ) {
      int c = ( s - x ) / 2 ;
      int a = c ;
      int b = c ;
      a = a + x ;
      if ( ( a ^ b ) == x ) return "Yes" ;
      else return "No" ;
    }
  }
  else return "No" ;
}

***Example ends here:
int maximum_triplet_xor ( int a , int b , int c ) {
  int ans = 0 ;
  for ( int i = 30 ;
  i >= 0 ;
  i -- ) {
    int cur = 1 << i ;
    if ( a >= cur ) {
      ans += cur ;
      a -= cur ;
    }
    else if ( b >= cur ) {
      ans += cur ;
      b -= cur ;
    }
    else if ( c >= cur ) {
      ans += cur ;
      c -= cur ;
    }
  }
  return ans ;
}

***Example ends here:
int item_type ( int n ) {
  int count = 0 ;
  int day = 1 ;
  while ( count + day * ( day + 1 ) / 2 < n ) {
    count += day * ( day + 1 ) / 2 ;
    day ++ ;
  }
  for ( int type = day ;
  type >= 0 ;
  -- type ) {
    count += type ;
    if ( count >= n ) return type ;
  }
  return 0 ;
}

***Example ends here:
int max_gcd_in_range ( int l , int r ) {
  int ans = 1 ;
  for ( int z = r ;
  z > 0 ;
  z -- ) {
    if ( r / z - ( l - 1 ) / z > 1 ) {
      ans = z ;
      break ;
    }
  }
  return ans ;
}

***Example ends here:
int sumOfDigits ( int n ) {
  int sum = 0 ;
  while ( n != 0 ) {
    sum += ( n % 10 ) ;
    n = n / 10 ;
  }
  return sum ;
}

***Example ends here:
bool is_rep_unit_num ( int n , int b ) {
  int length = 0 ;
  int count_one = 0 ;
  while ( ( n != 0 ) && ( count_one < b ) ) {
    int r = n % b ;
    length ++ ;
    if ( r == 1 ) count_one ++ ;
    n = n / b ;
  }
  return count_one >= 3 && count_one == length ;
}

***Example ends here:
bool is_straigh_line_num ( int n ) {
  if ( ( n <= 99 ) && ( n > 0 ) ) return false ;
  string s = to_string ( n ) ;
  int d = ( char ) s [ 1 ] - ( char ) s [ 0 ] ;
  for ( int i = 2 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( ( char ) s [ i ] - ( char ) s [ i - 1 ] != d ) return false ;
  }
  return true ;
}

***Example ends here:
int get_count ( int d , int n ) {
  int no = n / d ;
  int result = no ;
  for ( int p = 2 ;
  p <= no ;
  p ++ ) {
    if ( p * p > no ) break ;
    if ( no % p == 0 ) {
      while ( no % p == 0 ) no /= p ;
      result -= result / p ;
    }
  }
  if ( no > 1 ) result -= result / no ;
  return result ;
}

***Example ends here:
bool is_even_parity ( unsigned x ) {
  unsigned parity = 0 ;
  while ( x != 0 ) {
    if ( x & 1 ) ++ parity ;
    x = x >> 1 ;
  }
  if ( parity % 2 == 0 ) return true ;
  else return false ;
}

***Example ends here:
int isPerfect ( int n ) {
  int sum = 1 ;
  for ( int i = 2 ;
  i <= n ;
  i ++ ) {
    if ( i * i > n ) break ;
    if ( n % i == 0 ) {
      if ( i * i != n ) sum = sum + i + n / i ;
      else sum = sum + i ;
    }
  }
  if ( sum == n && n != 1 ) return n ;
  return 0 ;
}

***Example ends here:
int log_a_to_base_b ( int a , int b ) {
  return 1 + log_a_to_base_b ( a / b , b ) ? a : ( b - 1 ) ;
}

***Example ends here:
int using_binary_search ( int start , int end , int n , int s ) {
  if ( start >= end ) return start ;
  int mid = start + ( end - start ) / 2 ;
  int total_sum = ( n * ( n + 1 ) ) / 2 ;
  int mid_sum = ( mid * ( mid + 1 ) ) / 2 ;
  if ( total_sum - mid_sum <= s ) return using_binary_search ( start , mid , n , s ) ;
  return using_binary_search ( mid + 1 , end , n , s ) ;
}

***Example ends here:
string min_int ( string s ) {
  string s1 ( s ) ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) {
    if ( isdigit ( s1 [ i ] ) && s1 [ i ] >= '5' ) s1 [ i ] = ( char ) ( '9' - s1 [ i ] + '0' ) ;
  }
  if ( s1 [ 0 ] == '0' ) s1 [ 0 ] = '9' ;
  return s1 ;
}

***Example ends here:
int countTriplets ( int a , int b , int c ) {
  int ans = 0 ;
  for ( int i = 1 ;
  i <= a ;
  i ++ ) {
    for ( int j = 1 ;
    j <= b ;
    j ++ ) {
      for ( int k = 1 ;
      k <= c ;
      k ++ ) {
        if ( i * k > j * j ) {
          ans ++ ;
        }
      }
    }
  }
  return ans ;
}

***Example ends here:
bool topsy_turvy ( string s ) {
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s [ i ] == '2' || s [ i ] == '4' || s [ i ] == '5' || s [ i ] == '6' || s [ i ] == '7' || s [ i ] == '9' ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int sum_of_last_dig ( int n , int m ) {
  int sum = 0 ;
  int k = n / m ;
  int arr [ 10 ] = {
    0 }
    ;
    for ( int i = 0 ;
    i < 10 ;
    i ++ ) {
      arr [ i ] = m * ( i + 1 ) % 10 ;
      sum += arr [ i ] ;
    }
    int rem = k % 10 ;
    int ans = k / 10 * sum ;
    for ( int i = 0 ;
    i < rem ;
    i ++ ) ans += arr [ i ] ;
    return ans ;
  }
  
***Example ends here:
int total_pay ( int total_items , int price_of_one_item , int n , int m ) {
  int free_items ;
  int actual ;
  free_items = total_items / ( n + m ) ;
  actual = total_items - free_items ;
  int amount = actual * price_of_one_item ;
  return amount ;
}

***Example ends here:
int min_operations ( int x , int y , int p , int q ) {
  if ( y % x != 0 ) return - 1 ;
  int d = y / x ;
  int a = 0 ;
  while ( d % p == 0 ) {
    d /= p ;
    a ++ ;
  }
  int b = 0 ;
  while ( d % q == 0 ) {
    d /= q ;
    b ++ ;
  }
  if ( d != 1 ) return - 1 ;
  return a + b ;
}

***Example ends here:
bool is_mersenne ( int n ) {
  while ( n != 0 ) {
    int r = n % 2 ;
    if ( r == 0 ) return false ;
    n /= 2 ;
  }
  return true ;
}

***Example ends here:
int find_third_digit ( int n ) {
  if ( n < 3 ) return 0 ;
  return 1 == n ? 6 : 7 ;
}

***Example ends here:
bool IsOddLength ( int num ) {
  int count = 0 ;
  while ( num > 0 ) {
    num = num / 10 ;
    count ++ ;
  }
  if ( count % 2 != 0 ) return true ;
  return false ;
}

***Example ends here:
bool check_is_possible ( int l , int r , int k ) {
  int count = 0 ;
  for ( int i = l ;
  i <= r ;
  i ++ ) {
    if ( i % k == 0 ) {
      count ++ ;
    }
  }
  return count > 1 ;
}

***Example ends here:
qint64 bytes ( qint64 kilobytes ) {
  qint64 b = kilobytes * 1024 ;
  return b ;
}

***Example ends here:
int octahedral_num ( int n ) {
  return n * ( 2 * n * n + 1 ) / 3 ;
}

***Example ends here:
string checkEqual ( string s ) {
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) {
    if ( s [ i ] != '1' && s [ i ] != '0' && s [ i ] != '8' ) return "No" ;
  }
  int start = 0 ;
  int end = s . size ( ) - 1 ;
  while ( start < end ) {
    if ( s [ start ] != s [ end ] ) return "No" ;
    start ++ ;
    end -- ;
  }
  return "Yes" ;
}

***Example ends here:
bool is_undulating ( string n ) {
  if ( n . size ( ) <= 2 ) return false ;
  for ( int i = 2 ;
  i < n . size ( ) ;
  i ++ ) if ( n [ i - 2 ] != n [ i ] ) return false ;
  return true ;
}

***Example ends here:
int first_digit ( int n ) {
  while ( n >= 10 ) n /= 10 ;
  return n ;
}

***Example ends here:
int count_digit ( int n ) {
  if ( n == 0 ) return 0 ;
  return 1 + count_digit ( n / 10 ) ;
}

***Example ends here:
bool is_divisible_by_5 ( string s ) {
  int n = s . size ( ) ;
  return s [ n - 1 ] == '0' || s [ n - 1 ] == '5' ;
}

***Example ends here:
int inv ( int a , int m ) {
  int m0 = m ;
  int x0 = 0 , x1 = 1 ;
  if ( m == 1 ) return 0 ;
  while ( a > 1 ) {
    int q = a / m ;
    int t = m ;
    m = a % m ;
    a = t ;
    t = x0 ;
    x0 = x1 - q * x0 ;
    x1 = t ;
  }
  if ( x1 < 0 ) x1 = x1 + m0 ;
  return x1 ;
}

***Example ends here:
bool only_first_and_last_are_set ( int n ) {
  if ( n == 1 ) return true ;
  if ( n == 2 ) return false ;
  return ( ( n - 1 ) & ( n - 2 ) ) == 0 ;
}

***Example ends here:
int divide ( int dividend , int divisor ) {
  int sign = - 1 == ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? 1 : - 1 ;
  dividend = abs ( dividend ) ;
  divisor = abs ( divisor ) ;
  int quotient = 0 ;
  int temp = 0 ;
  for ( int i = 31 ;
  i >= 0 ;
  i -- ) {
    if ( temp + ( divisor << i ) <= dividend ) {
      temp += divisor << i ;
      quotient |= 1 << i ;
    }
  }
  if ( sign == - 1 ) quotient = - quotient ;
  return quotient ;
}

***Example ends here:
char find_profession ( int level , int pos ) {
  if ( level == 1 ) return 'e' ;
  if ( find_profession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) return 'd' ;
  return 'e' ;
}

***Example ends here:
bool hasCloseElements ( vector < int > numbers , int threshold ) {
  for ( int i = 0 ;
  i < numbers . size ( ) ;
  i ++ ) {
    for ( int j = i + 1 ;
    j < numbers . size ( ) ;
    j ++ ) {
      int distance = abs ( numbers [ i ] - numbers [ j ] ) ;
      if ( distance < threshold ) return true ;
    }
  }
  return false ;
}

***Example ends here:
int truncateNumber ( int number ) {
  return number % 1 ;
}

***Example ends here:
bool below_zero ( vector < int > operations ) {
  int balance = 0 ;
  for ( int i = 0 ;
  i < operations . size ( ) ;
  i ++ ) {
    balance += operations [ i ] ;
    if ( balance < 0 ) return true ;
  }
  return false ;
}

***Example ends here:
double mean_absolute_deviation ( vector < double > numbers ) {
  double sum_num = 0 ;
  for ( int i = 0 ;
  i < numbers . size ( ) ;
  i ++ ) sum_num += numbers [ i ] ;
  double mean = sum_num / numbers . size ( ) ;
  double sum_abs_diff = 0 ;
  for ( int i = 0 ;
  i < numbers . size ( ) ;
  i ++ ) sum_abs_diff += fabs ( numbers [ i ] - mean ) ;
  return sum_abs_diff / numbers . size ( ) ;
}

***Example ends here:
vector < string > intersperse ( vector < string > numbers , string delimiter ) {
  vector < string > result ;
  if ( numbers . empty ( ) ) return result ;
  for ( int i = 0 ;
  i < numbers . size ( ) - 1 ;
  i ++ ) {
    result . push_back ( numbers [ i ] ) ;
    result . push_back ( delimiter ) ;
  }
  result . push_back ( numbers [ numbers . size ( ) - 1 ] ) ;
  return result ;
}

***Example ends here:
vector < int > sumProduct ( vector < int > numbers ) {
  int sumValue = 0 ;
  int prodValue = 1 ;
  for ( int n : numbers ) {
    sumValue += n ;
    prodValue *= n ;
  }
  return {
    sumValue , prodValue }
    ;
  }
  
***Example ends here:
Vector < String > allPrefixes ( String string ) {
  Vector < String > result ;
  for ( unsigned i = 1 ;
  i <= string . length ( ) ;
  ++ i ) result . append ( string . substring ( 0 , i ) ) ;
  return result ;
}

***Example ends here:
std :: vector < std :: string > parseMusic ( std :: string musicString ) {
  std :: string current ;
  std :: vector < std :: string > result ;
  for ( size_t i = 0 ;
  i < musicString . length ( ) + 1 ;
  i ++ ) {
    if ( i == musicString . length ( ) || musicString [ i ] == ' ' ) {
      if ( strcmp ( current . c_str ( ) , "o" ) == 0 ) result . push_back ( 4 ) ;
      if ( strcmp ( current . c_str ( ) , "o|" ) == 0 ) result . push_back ( 2 ) ;
      if ( strcmp ( current . c_str ( ) , ".|" ) == 0 ) result . push_back ( 1 ) ;
      current . clear ( ) ;
    }
    else {
      current . push_back ( musicString [ i ] ) ;
    }
  }
  return result ;
}

***Example ends here:
int strlen ( const char * str ) {
  return strlen ( str ) ;
}

***Example ends here:
vector < int > factorize ( int n ) {
  vector < int > factors ;
  int i = 2 ;
  while ( i <= n ) {
    if ( n % i == 0 ) {
      factors . push_back ( i ) ;
      n /= i ;
    }
    else {
      i ++ ;
    }
  }
  return factors ;
}

***Example ends here:
String concatenate ( Vector < String > strings ) {
  StringBuilder result ;
  for ( size_t i = 0 ;
  i < strings . size ( ) ;
  ++ i ) result . append ( strings [ i ] ) ;
  return result . toString ( ) ;
}

***Example ends here:
foreach ( int i , l ) {
  if ( l [ i ] > 0 ) result . push_back ( l [ i ] ) ;
}

***Example ends here:
vector < int > sortEven ( vector < int > l ) {
  vector < int > evens ;
  for ( int i = 0 ;
  i < l . size ( ) ;
  i += 2 ) evens . push_back ( l [ i ] ) ;
  sort ( evens . begin ( ) , evens . end ( ) ) ;
  vector < int > result ;
  for ( int i = 0 ;
  i < l . size ( ) ;
  i ++ ) {
    if ( i % 2 == 0 ) result . push_back ( evens [ i / 2 ] ) ;
    if ( i % 2 == 1 ) result . push_back ( l [ i ] ) ;
  }
  return result ;
}

***Example ends here:
string decode_cyclic ( string s ) {
  string output ;
  int i = 0 ;
  while ( i <= s . size ( ) - 3 ) {
    string x = s [ i + 2 ] + s [ i ] ;
    output . push_back ( x ) ;
    i += 3 ;
  }
  return output + s . substr ( i ) ;
}

***Example ends here:
int car_race_collision ( int n ) {
  return n * n ;
}

***Example ends here:
std :: vector < int > incrVector ( std :: vector < int > l ) {
  std :: vector < int > result ;
  for ( std :: vector < int > :: iterator i = l . begin ( ) ;
  i != l . end ( ) ;
  ++ i ) result . push_back ( * i + 1 ) ;
  return result ;
}

***Example ends here:
bool pairs_sum_to_zero ( vector < int > l ) {
  for ( int i = 0 ;
  i < l . size ( ) ;
  i ++ ) {
    for ( int j = i + 1 ;
    j < l . size ( ) ;
    j ++ ) {
      if ( l [ i ] + l [ j ] == 0 ) {
        return true ;
      }
    }
  }
  return false ;
}

***Example ends here:
string change_base ( int x , int b ) {
  string ret ;
  while ( x > 0 ) {
    ret . insert ( ret . end ( ) , to_string ( x % b ) ) ;
    x /= b ;
  }
  return ret ;
}

***Example ends here:
double median ( vector < double > l ) {
  sort ( l . begin ( ) , l . end ( ) ) ;
  if ( l . size ( ) % 2 == 1 ) return l [ l . size ( ) / 2 ] ;
  else return ( l [ l . size ( ) / 2 - 1 ] + l [ l . size ( ) / 2 ] ) / 2.0 ;
}

***Example ends here:
QString decodeShift ( QString s ) {
  QString result ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  ++ i ) {
    int w = ( s [ i ] + 21 - s [ i ] ) % 26 + s [ i ] ;
    result . append ( QChar ( w ) ) ;
  }
  return result ;
}

***Example ends here:
bool below_threshold ( vector < int > l , int t ) {
  for ( int n = 0 ;
  n < l . size ( ) ;
  n ++ ) {
    if ( l [ n ] >= t ) return false ;
  }
  return true ;
}

***Example ends here:
bool correctBracketing ( string brackets ) {
  int depth = 0 ;
  for ( string b : brackets ) {
    if ( b == "<" ) depth ++ ;
    else depth -- ;
    if ( depth < 0 ) return false ;
  }
  return depth == 0 ;
}

***Example ends here:
bool monotonic ( vector < int > l ) {
  int incr = 0 ;
  int decr = 0 ;
  for ( int i = 1 ;
  i < l . size ( ) ;
  i ++ ) {
    if ( l [ i ] > l [ i - 1 ] ) incr = 1 ;
    if ( l [ i ] < l [ i - 1 ] ) decr = 1 ;
  }
  return incr + decr != 2 ;
}

***Example ends here:
vector < double > derivative ( vector < double > xs ) {
  vector < double > result ;
  for ( int i = 1 ;
  i < xs . size ( ) ;
  i ++ ) result . push_back ( i * xs [ i ] ) ;
  return result ;
}

***Example ends here:
int vowelsCount ( string s ) {
  string vowels = "aeiouAEIOU" ;
  int count = 0 ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) {
    if ( s [ i ] == vowels [ i ] ) {
      count ++ ;
    }
  }
  if ( s [ s . size ( ) - 1 ] == 'y' || s [ s . size ( ) - 1 ] == 'Y' ) {
    count ++ ;
  }
  return count ;
}

***Example ends here:
int digit_sum ( string s ) {
  int sum = 0 ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) {
    if ( s [ i ] . isupper ( ) ) sum += toupper ( s [ i ] ) ;
  }
  return sum ;
}

***Example ends here:
int fruitDistribution ( string s , int n ) {
  vector < int > num1 ;
  vector < int > num2 ;
  bool flag = false ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) {
    if ( s [ i ] . isdigit ( ) ) {
      if ( ! flag ) num1 . push_back ( s [ i ] ) ;
      if ( flag ) num2 . push_back ( s [ i ] ) ;
    }
    else if ( ! flag && num1 . size ( ) > 0 ) flag = true ;
  }
  return n - ( int ) num1 . size ( ) - ( int ) num2 . size ( ) ;
}

***Example ends here:
vector < int > pluck ( vector < int > arr ) {
  vector < int > result ;
  for ( int i = 0 ;
  i < arr . size ( ) ;
  i ++ ) {
    if ( arr [ i ] % 2 == 0 ) {
      if ( ! result . empty ( ) ) {
        result . push_back ( arr [ i ] ) ;
        result . push_back ( i ) ;
      }
      else if ( arr [ i ] < result [ 0 ] ) {
        result [ 0 ] = arr [ i ] ;
        result [ 1 ] = i ;
      }
    }
  }
  return result ;
}

***Example ends here:
vector < string > strange_sort_vector ( vector < string > lst ) {
  vector < string > res ;
  sort ( lst . begin ( ) , lst . end ( ) ) ;
  int l = 0 ;
  int r = lst . size ( ) - 1 ;
  while ( l < r ) {
    res . push_back ( lst [ l ] ) ;
    l ++ ;
    res . push_back ( lst [ r ] ) ;
    r -- ;
  }
  if ( l == r ) res . push_back ( lst [ l ] ) ;
  return res ;
}

***Example ends here:
double triangle_area ( double a , double b , double c ) {
  if ( a + b <= c || a + c <= b || b + c <= a ) return - 1.0 ;
  double s = ( a + b + c ) / 2 ;
  double area = sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ;
  return area ;
}

***Example ends here:
bool will_it_fly ( vector < int > q , int w ) {
  int sum = 0 ;
  for ( int i = 0 ;
  i < q . size ( ) ;
  i ++ ) {
    if ( q [ i ] != q [ q . size ( ) - i - 1 ] ) return false ;
    sum += q [ i ] ;
  }
  return sum <= w ;
}

***Example ends here:
bool is_cube ( double a ) {
  a = fabs ( a ) ;
  int i = round ( a * ( 1.0 / 3 ) ) ;
  return i * 3 == a ;
}

***Example ends here:
int hexKey ( string num ) {
  string key = "2357BD" ;
  int total = 0 ;
  for ( int i = 0 ;
  i < num . size ( ) ;
  i ++ ) {
    if ( num [ i ] == key [ i ] ) {
      total ++ ;
    }
  }
  return total ;
}

***Example ends here:
string decimal_to_binary ( int dec ) {
  string ans ;
  if ( dec != 0 ) {
    while ( dec > 0 ) {
      ans . insert ( 0 , to_string ( dec % 2 ) ) ;
      dec /= 2 ;
    }
  }
  else {
    ans += "0" ;
  }
  return "db" + to_string ( ans ) + "db" ;
}

***Example ends here:
bool prime_length ( string s ) {
  int l = s . length ( ) ;
  if ( l < 2 ) return false ;
  for ( int i = 2 ;
  i < l ;
  i ++ ) if ( l % i == 0 ) return false ;
  return true ;
}

***Example ends here:
int starts_one_ends ( int n ) {
  if ( n < 1 ) return 0 ;
  if ( n == 1 ) return 1 ;
  return 18 * ( 10 * ( n - 2 ) ) ;
}

***Example ends here:
int add ( vector < int > lst ) {
  int sum = 0 ;
  for ( int i = 1 ;
  i < lst . size ( ) ;
  i += 2 ) {
    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;
  }
  return sum ;
}

***Example ends here:
foreach ( int i , lst . count ( ) ) {
  for ( int j = lst [ i ] . count ( ) - 1 ;
  j >= 0 ;
  j -- ) {
    if ( lst [ i ] [ j ] == x ) {
      coords . append ( QPair < int , int > ( i , j ) ) ;
    }
  }
}

***Example ends here:
int next_smallest ( vector < int > v ) {
  sort ( v . begin ( ) , v . end ( ) ) ;
  for ( int i = 1 ;
  i < v . size ( ) ;
  i ++ ) {
    if ( v [ i ] != v [ i - 1 ] ) return v [ i ] ;
  }
  return - 1 ;
}

***Example ends here:
bool any_int ( int a , int b , int c ) {
  if ( round ( a ) != a || round ( b ) != b || round ( c ) != c ) return false ;
  return a + b == c || a + c == b || b + c == a ;
}

***Example ends here:
vector < int > countUpTo ( int n ) {
  vector < int > primes ;
  for ( int i = 2 ;
  i <= n ;
  i ++ ) {
    bool isPrime = true ;
    for ( int j = 2 ;
    j <= i ;
    j ++ ) {
      if ( i % j == 0 ) {
        isPrime = false ;
        break ;
      }
    }
    if ( isPrime ) {
      primes . push_back ( i ) ;
    }
  }
  return primes ;
}

***Example ends here:
int closestInteger ( double value ) {
  double w = static_cast < double > ( value ) ;
  return qRound ( w ) ;
}

***Example ends here:
std :: vector < int > make_a_pile ( int n ) {
  std :: vector < int > result ;
  for ( int i = 0 ;
  i < n ;
  ++ i ) result . push_back ( n + 2 * i ) ;
  return result ;
}

***Example ends here:
vector < string > words_string ( string s ) {
  vector < string > current ;
  vector < string > words ;
  for ( int i = 0 ;
  i < s . length ( ) + 1 ;
  i ++ ) {
    if ( i == s . length ( ) || s [ i ] == ' ' || s [ i ] == ',' ) {
      if ( current . size ( ) > 0 ) {
        words . push_back ( "" . join ( current ) ) ;
        current . clear ( ) ;
      }
    }
    else {
      current . push_back ( s [ i ] ) ;
    }
  }
  return words ;
}

***Example ends here:
string roundedAvg ( int n , int m ) {
  if ( n > m ) return - 1 ;
  int num = ( n + m ) / 2 ;
  string ret ;
  while ( num > 0 ) {
    ret . insert ( ret . end ( ) , to_string ( num % 2 ) ) ;
    num /= 2 ;
  }
  return ret ;
}

***Example ends here:
vector < int > uniqueDigits ( vector < int > x ) {
  vector < int > digits ;
  for ( int n = 0 ;
  n < x . size ( ) ;
  n ++ ) {
    bool isUnique = true ;
    for ( char c : string ( x [ n ] ) ) {
      if ( isdigit ( c ) % 2 == 0 ) {
        isUnique = false ;
        break ;
      }
    }
    if ( isUnique ) digits . push_back ( n ) ;
  }
  sort ( digits . begin ( ) , digits . end ( ) ) ;
  return digits ;
}

***Example ends here:
int countNums ( vector < int > arr ) {
  int num = 0 ;
  for ( int n : arr ) {
    int neg = - 1 < n ? 1 : - 1 ;
    n = abs ( n ) ;
    vector < int > digits ;
    for ( char c : string ( n ) ) digits . push_back ( ( int ) ( c - '0' ) ) ;
    digits . back ( ) *= neg ;
    int sum = 0 ;
    for ( int d : digits ) sum += d ;
    if ( sum > 0 ) num ++ ;
  }
  return num ;
}

***Example ends here:
bool move_one_ball ( vector < int > arr ) {
  if ( arr . empty ( ) ) return true ;
  int num = 0 ;
  for ( int i = 1 ;
  i < arr . size ( ) ;
  i ++ ) {
    if ( arr [ i ] < arr [ i - 1 ] ) num ++ ;
  }
  if ( arr [ arr . size ( ) - 1 ] > arr [ 0 ] ) num ++ ;
  if ( num < 2 ) return true ;
  return false ;
}

***Example ends here:
string exchange ( vector < int > lst1 , vector < int > lst2 ) {
  int odd = 0 ;
  int even = 0 ;
  for ( int n : lst1 ) {
    if ( n % 2 == 1 ) odd ++ ;
  }
  for ( int n : lst2 ) {
    if ( n % 2 == 0 ) even ++ ;
  }
  if ( even >= odd ) return "YES" ;
  return "NO" ;
}

***Example ends here:
vector < string > odd_count ( vector < string > lst ) {
  vector < string > results ;
  string original_str = "the number of odd elements in the string i of the input." ;
  for ( auto s : lst ) {
    int sum = 0 ;
    for ( auto d : s ) {
      if ( d . isdigit ( ) && ( int ) d % 2 == 1 ) {
        sum ++ ;
      }
    }
    string result ;
    for ( auto c : original_str ) {
      if ( c == "i" ) {
        result . push_back ( to_string ( sum ) ) ;
      }
      else {
        result . push_back ( c ) ;
      }
    }
    results . push_back ( result ) ;
  }
  return results ;
}

***Example ends here:
int minSubArraySum ( vector < int > nums ) {
  int min_sum = INT_MAX ;
  int sum = 0 ;
  for ( int num : nums ) {
    sum += num ;
    if ( min_sum > sum ) min_sum = sum ;
    if ( sum > 0 ) sum = 0 ;
  }
  return min_sum ;
}

***Example ends here:
int maxFill ( vector < vector < int >> grid , int capacity ) {
  int res = 0 ;
  for ( auto well : grid ) {
    int sum = 0 ;
    for ( auto n : well ) sum += n ;
    if ( sum > 0 ) res += ( sum - 1 ) / capacity + 1 ;
  }
  return res ;
}

***Example ends here:
vector < string > selectWords ( string s , int n ) {
  string vowels = "aeiouAEIOU" ;
  vector < string > current ;
  vector < string > result ;
  int consonantNum = 0 ;
  for ( int i = 0 ;
  i < s . size ( ) + 1 ;
  i ++ ) {
    if ( i == s . size ( ) || s [ i ] == " " ) {
      if ( consonantNum == n ) {
        result . push_back ( "" ) ;
      }
      current . clear ( ) ;
      consonantNum = 0 ;
    }
    else {
      current . push_back ( s [ i ] ) ;
      if ( s [ i ] != vowels ) {
        consonantNum ++ ;
      }
    }
  }
  return result ;
}

***Example ends here:
int solution ( vector < int > lst ) {
  int sum = 0 ;
  for ( int i = 0 ;
  i < lst . size ( ) ;
  i += 2 ) if ( lst [ i ] % 2 == 1 ) sum += lst [ i ] ;
  return sum ;
}

***Example ends here:
int add_elements ( int arr [ ] , int k ) {
  int sum = 0 ;
  for ( int i = 0 ;
  i < k ;
  i ++ ) if ( - 99 <= arr [ i ] && arr [ i ] <= 99 ) sum += arr [ i ] ;
  return sum ;
}

***Example ends here:
vector < int > get_odd_collatz ( int n ) {
  vector < int > odd_collatz ;
  while ( n > 1 ) {
    if ( n % 2 == 1 ) {
      odd_collatz . push_back ( n ) ;
      n = n * 3 + 1 ;
    }
    else {
      n /= 2 ;
    }
  }
  odd_collatz . push_back ( 1 ) ;
  odd_collatz . sort ( ) ;
  return odd_collatz ;
}

***Example ends here:
bool is_sorted ( vector < int > v ) {
  for ( int i = 1 ;
  i < v . size ( ) ;
  i ++ ) {
    if ( v [ i ] < v [ i - 1 ] ) return false ;
    if ( i >= 2 && v [ i ] == v [ i - 1 ] && v [ i ] == v [ i - 2 ] ) return false ;
  }
  return true ;
}

***Example ends here:
string intersection ( pair < int , int > interval1 , pair < int , int > interval2 ) {
  int inter1 = max ( interval1 . first , interval2 . first ) ;
  int inter2 = min ( interval1 . second , interval2 . second ) ;
  int l = inter2 - inter1 ;
  if ( l < 2 ) return "NO" ;
  for ( int i = 2 ;
  i < l ;
  i ++ ) {
    if ( l % i == 0 ) return "NO" ;
  }
  return "YES" ;
}

***Example ends here:
int prod_signs ( vector < int > arr ) {
  if ( arr . empty ( ) ) return - 32768 ;
  int sum = 0 ;
  int prods = 1 ;
  for ( int i = 0 ;
  i < arr . size ( ) ;
  i ++ ) {
    sum += abs ( arr [ i ] ) ;
    if ( arr [ i ] == 0 ) prods = 0 ;
    if ( arr [ i ] < 0 ) prods = - prods ;
  }
  return sum * prods ;
}

***Example ends here:
vector < int > minPath ( vector < vector < int >> grid , int k ) {
  int n = grid . size ( ) ;
  int min_num = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = 0 ;
    j < n ;
    j ++ ) {
      if ( grid [ i ] [ j ] == 1 ) {
        vector < int > tmp ;
        if ( i != 0 ) tmp . push_back ( grid [ i - 1 ] [ j ] ) ;
        if ( j != 0 ) tmp . push_back ( grid [ i ] [ j - 1 ] ) ;
        if ( i != n - 1 ) tmp . push_back ( grid [ i + 1 ] [ j ] ) ;
        if ( j != n - 1 ) tmp . push_back ( grid [ i ] [ j + 1 ] ) ;
        min_num = min ( tmp ) ;
      }
    }
  }
  vector < int > ans ;
  for ( int i = 0 ;
  i < k ;
  i ++ ) {
    if ( i % 2 == 0 ) ans . push_back ( 1 ) ;
    else ans . push_back ( min_num ) ;
  }
  return ans ;
}

***Example ends here:
int digits ( int n ) {
  int prod = 1 ;
  for ( int i = 0 ;
  i < int ( n ) ;
  i ++ ) {
    if ( isdigit ( n [ i ] ) ) {
      if ( prod == 0 ) prod == 1 ;
      prod *= ( n [ i ] - '0' ) ;
    }
  }
  return prod ;
}

***Example ends here:
bool is_nested ( std :: string str ) {
  int count = 0 ;
  int max_count = 0 ;
  for ( auto ch : str ) {
    if ( ch == '[' ) ++ count ;
    if ( ch == ']' ) -- count ;
    if ( count < 0 ) count = 0 ;
    if ( count > max_count ) max_count = count ;
    if ( count <= max_count - 2 ) return true ;
  }
  return false ;
}

***Example ends here:
int sum_squares ( vector < int > lst ) {
  int sum = 0 ;
  for ( int i = 0 ;
  i < lst . size ( ) ;
  i ++ ) sum += ceil ( lst [ i ] ) * ceil ( lst [ i ] ) ;
  return sum ;
}

***Example ends here:
int canArrange ( vector < int > arr ) {
  int index = - 1 ;
  for ( int i = 0 ;
  i < arr . size ( ) ;
  i ++ ) {
    if ( arr [ i ] <= i ) {
      index = i ;
    }
  }
  return index ;
}

***Example ends here:
vector < int > largestSmallestIntegers ( vector < int > lst ) {
  int maxNeg = 0 , minPos = 0 ;
  for ( int n = 0 ;
  n < lst . size ( ) ;
  n ++ ) {
    if ( lst [ n ] < 0 && ( maxNeg == 0 || lst [ n ] > maxNeg ) ) maxNeg = lst [ n ] ;
    if ( lst [ n ] > 0 && ( minPos == 0 || lst [ n ] < minPos ) ) minPos = lst [ n ] ;
  }
  return {
    maxNeg , minPos }
    ;
  }
  
***Example ends here:
QString fixSpaces ( QString text ) {
  QString res ;
  int spaceLen = 0 ;
  for ( int i = 0 ;
  i < text . length ( ) + 1 ;
  i ++ ) {
    if ( i == text . length ( ) || text [ i ] != QLatin1Char ( ' ' ) ) {
      if ( spaceLen == 1 ) res . append ( QLatin1Char ( '_' ) ) ;
      if ( spaceLen == 2 ) res . append ( QLatin1Char ( '__' ) ) ;
      if ( spaceLen > 2 ) res . append ( QLatin1Char ( '-' ) ) ;
      spaceLen = 0 ;
      if ( i != text . length ( ) ) res . append ( text [ i ] ) ;
    }
    else spaceLen ++ ;
  }
  return res ;
}

***Example ends here:
QString fileNameCheck ( QString fileName ) {
  int digit_num = 0 , dot_num = 0 ;
  if ( fileName . length ( ) < 5 || ! fileName . at ( 0 ) . isLetter ( ) ) return "No" ;
  QString suffix = fileName . mid ( fileName . length ( ) - 4 ) ;
  if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) return "No" ;
  for ( int i = 0 ;
  i < fileName . length ( ) ;
  ++ i ) {
    if ( fileName . at ( i ) . isDigit ( ) ) ++ digit_num ;
    if ( fileName . at ( i ) == '.' ) ++ dot_num ;
  }
  if ( digit_num > 3 || dot_num != 1 ) return "No" ;
  return "Yes" ;
}

***Example ends here:
int sum_squares ( vector < int > v ) {
  int sum = 0 ;
  for ( int i = 0 ;
  i < v . size ( ) ;
  i ++ ) {
    if ( i % 3 == 0 ) sum += v [ i ] * v [ i ] ;
    else if ( i % 4 == 0 ) sum += v [ i ] * v [ i ] * v [ i ] ;
    else sum += v [ i ] ;
  }
  return sum ;
}

***Example ends here:
string wordsInSentence ( string sentence ) {
  string result ;
  string current ;
  for ( int i = 0 ;
  i < sentence . length ( ) + 1 ;
  i ++ ) {
    if ( i == sentence . length ( ) || sentence [ i ] == ' ' ) {
      bool isPrime = true ;
      int l = current . length ( ) ;
      if ( l < 2 ) isPrime = false ;
      for ( int j = 2 ;
      j < l ;
      j ++ ) {
        if ( l % j == 0 ) {
          isPrime = false ;
          break ;
        }
      }
      if ( isPrime ) result . append ( "" ) ;
      current . clear ( ) ;
    }
    else {
      current . append ( sentence [ i ] ) ;
    }
  }
  result . append ( "" ) ;
  if ( result . length ( ) > 0 ) result . erase ( result . length ( ) - 1 ) ;
  return result ;
}

***Example ends here:
bool simplify ( string x , string n ) {
  int a = 0 , b = 0 , c = 0 , d = 0 ;
  for ( int i = 0 ;
  i < x . length ( ) ;
  i ++ ) {
    if ( x [ i ] == '/' ) {
      a = atoi ( x . c_str ( ) + i ) ;
      b = atoi ( x . c_str ( ) + i + 1 ) ;
    }
  }
  for ( int i = 0 ;
  i < n . length ( ) ;
  i ++ ) {
    if ( n [ i ] == '/' ) {
      c = atoi ( n . c_str ( ) + i ) ;
      d = atoi ( n . c_str ( ) + i + 1 ) ;
    }
  }
  return ( a * c ) % ( b * d ) == 0 ;
}

***Example ends here:
int specialFilter ( vector < int > nums ) {
  int count = 0 ;
  for ( int num : nums ) {
    if ( num > 10 ) {
      string w = to_string ( num ) ;
      if ( tolower ( w [ 0 ] ) % 2 == 1 && tolower ( w [ w . length ( ) - 1 ] ) % 2 == 1 ) {
        count ++ ;
      }
    }
  }
  return count ;
}

***Example ends here:
int getMaxTriples ( int n ) {
  int arr [ n + 1 ] ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) {
    arr [ i ] = i * i - i + 1 ;
  }
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = i + 1 ;
    j < n ;
    j ++ ) {
      for ( int k = j + 1 ;
      k < n ;
      k ++ ) {
        if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) {
          count ++ ;
        }
      }
    }
  }
  return count ;
}

***Example ends here:
double doubleTheDifference ( vector < double > lst ) {
  double sum = 0 ;
  for ( int i = 0 ;
  i < lst . size ( ) ;
  i ++ ) {
    double num = round ( lst [ i ] ) ;
    if ( lst [ i ] == num ) {
      if ( num > 0 && num % 2 == 1 ) sum += num * num ;
    }
  }
  return sum ;
}

***Example ends here:
vector < int > compare ( vector < int > game , vector < int > guess ) {
  vector < int > result ;
  for ( int i = 0 ;
  i < game . size ( ) ;
  i ++ ) {
    result . push_back ( abs ( game [ i ] - guess [ i ] ) ) ;
  }
  return result ;
}

***Example ends here:
string strongest_extension ( string class_name , vector < string > extensions ) {
  string strongest = "" ;
  int max = - numeric_limits < int > :: max ( ) ;
  for ( vector < string > :: iterator it = extensions . begin ( ) ;
  it != extensions . end ( ) ;
  it ++ ) {
    int strength = 0 ;
    for ( string & chr : * it ) {
      if ( chr . isupper ( ) ) strength ++ ;
      if ( chr . islower ( ) ) strength -- ;
    }
    if ( strength > max ) {
      max = strength ;
      strongest = * it ;
    }
  }
  return class_name + "." + strongest ;
}

***Example ends here:
string int_to_mini_roman ( int number ) {
  int num [ ] = {
    1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 }
    ;
    string sym [ ] = {
      "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" }
      ;
      int pos = 0 ;
      string res ;
      while ( number > 0 ) {
        while ( number >= num [ pos ] ) {
          res += sym [ pos ] ;
          number -= num [ pos ] ;
        }
        if ( number > 0 ) pos ++ ;
      }
      return res ;
    }
    
***Example ends here:
void eat ( int number , int need , int remaining ) {
  eat ( number + remaining , 0 ) ;
  eat ( number + need , remaining - need ) ;
}

***Example ends here:
int doAlgebra ( vector < string > ops , vector < string > operands ) {
  vector < int > nums ( operands ) ;
  vector < string > currentOps ( ops ) ;
  int i = currentOps . size ( ) - 1 ;
  while ( i >= 0 ) {
    if ( currentOps [ i ] == "**" ) {
      nums [ i ] = pow ( nums [ i ] , nums [ i + 1 ] ) ;
      nums . erase ( nums . begin ( ) + i + 1 ) ;
      currentOps . erase ( currentOps . begin ( ) + i ) ;
    }
    i -- ;
  }
  i = 0 ;
  while ( i < currentOps . size ( ) ) {
    if ( currentOps [ i ] == "*" ) {
      nums [ i ] *= nums [ i + 1 ] ;
      nums . erase ( nums . begin ( ) + i + 1 ) ;
      currentOps . erase ( currentOps . begin ( ) + i ) ;
    }
    else if ( currentOps [ i ] == "//" ) {
      nums [ i ] /= nums [ i + 1 ] ;
      nums . erase ( nums . begin ( ) + i + 1 ) ;
      currentOps . erase ( currentOps . begin ( ) + i ) ;
    }
    else i ++ ;
  }
  i = 0 ;
  while ( i < currentOps . size ( ) ) {
    if ( currentOps [ i ] == "+" ) {
      nums [ i ] += nums [ i + 1 ] ;
      nums . erase ( nums . begin ( ) + i + 1 ) ;
      currentOps . erase ( currentOps . begin ( ) + i ) ;
    }
    else if ( currentOps [ i ] == "-" ) {
      nums [ i ] -= nums [ i + 1 ] ;
      nums . erase ( nums . begin ( ) + i + 1 ) ;
      currentOps . erase ( currentOps . begin ( ) + i ) ;
    }
    else i ++ ;
  }
  return nums [ 0 ] ;
}

***Example ends here:
vector < int > generateIntegers ( int a , int b ) {
  int lower = max ( 2 , min ( a , b ) ) ;
  int upper = min ( 8 , max ( a , b ) ) ;
  vector < int > result ;
  for ( int i = lower ;
  i <= upper ;
  i += 2 ) {
    result . push_back ( i ) ;
  }
  return result ;
}

***Example ends here:
bool isStepNum ( int n ) {
  int prevDigit = - 1 ;
  while ( n > 0 ) {
    int curDigit = n % 10 ;
    if ( prevDigit == - 1 ) {
      prevDigit = curDigit ;
    }
    else {
      if ( abs ( prevDigit - curDigit ) != 1 ) {
        return false ;
      }
    }
    prevDigit = curDigit ;
    n /= 10 ;
  }
  return true ;
}

***Example ends here:
int num_of_ways ( int n , int k ) {
  int p = 1 ;
  if ( k % 2 ) p = - 1 ;
  return ( ( n - 1 ) * k + p * ( n - 1 ) ) / n ;
}

***Example ends here:
vector < int > findDivisors ( int n ) {
  vector < int > v ;
  for ( int i = 1 ;
  i <= ( int ) sqrt ( n ) ;
  i ++ ) {
    if ( n % i == 0 ) {
      if ( n / i == i ) v . push_back ( i ) ;
      else {
        v . push_back ( i ) ;
        v . push_back ( n / i ) ;
      }
    }
  }
  return v ;
}

***Example ends here:
int egg_drop ( int n , int k ) {
  if ( k == 1 || k == 0 ) return k ;
  if ( n == 1 ) return k ;
  int min = INT_MAX ;
  for ( int x = 1 ;
  x <= k ;
  x ++ ) {
    int res = max ( egg_drop ( n - 1 , x - 1 ) , egg_drop ( n , k - x ) ) ;
    if ( res < min ) min = res ;
  }
  return min + 1 ;
}

***Example ends here:
bool is_power_of_two ( int n ) {
  return ceil ( log2 ( n ) ) == floor ( log2 ( n ) ) ;
}

***Example ends here:
string shortestPalindrome ( string s ) {
  int n = s . length ( ) ;
  vector < string > v ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    int l = i ;
    int r = i ;
    string ans1 = "" ;
    string ans2 = "" ;
    while ( l >= 0 && r < n && s [ l ] == s [ r ] ) {
      ans1 += s [ l ] ;
      l -- ;
      r ++ ;
    }
    l = i - 1 ;
    r = i ;
    while ( l >= 0 && r < n && s [ l ] == s [ r ] ) {
      ans2 += s [ l ] ;
      l -- ;
      r ++ ;
    }
    v . push_back ( ans1 ) ;
    v . push_back ( ans2 ) ;
  }
  string ans = v [ 0 ] ;
  for ( int i = 0 ;
  i < v . size ( ) ;
  i ++ ) {
    if ( v [ i ] != "" ) ans = min ( ans , v [ i ] ) ;
  }
  return ans ;
}

***Example ends here:
int minimumAdjacentDifference ( int a [ ] , int n , int k ) {
  int minDiff = INT_MAX ;
  for ( int i = 0 ;
  i < k + 1 ;
  i ++ ) {
    int maxDiff = - INT_MAX ;
    for ( int j = 0 ;
    j < n - k - 1 ;
    j ++ ) {
      for ( int p = i ;
      p < i + j + 1 ;
      p ++ ) maxDiff = max ( maxDiff , a [ p + 1 ] - a [ p ] ) ;
    }
    minDiff = min ( minDiff , maxDiff ) ;
  }
  return minDiff ;
}

***Example ends here:
int cal ( int a [ ] , int mid ) {
  int chocolate = 0 ;
  for ( int i = 0 ;
  i < a . length ;
  i ++ ) {
    if ( a [ i ] >= mid ) chocolate += a [ i ] - mid ;
  }
  return chocolate ;
}

***Example ends here:
bool check ( int v , vector < int > a , int m ) {
  int tec = 0 ;
  int ans = 0 ;
  vector < int > b ( a . size ( ) + 3 , 0 ) ;
  for ( int i = 0 ;
  i < a . size ( ) ;
  i ++ ) {
    tec -= b [ i ] ;
    if ( a [ i ] + tec < v ) {
      int mov = v - a [ i ] - tec ;
      ans = ans + mov ;
      tec += mov ;
      b [ i + 2 ] = mov ;
    }
  }
  return ans <= m ;
}

***Example ends here:
int largegestNum ( vector < int > arr ) {
  int res = 0 ;
  sort ( arr . begin ( ) , arr . end ( ) ) ;
  int l = 0 , r = arr . size ( ) - 1 ;
  while ( l < r ) {
    int sum = arr [ l ] + arr [ r ] ;
    if ( sum == 0 ) {
      res = max ( res , max ( arr [ l ] , arr [ r ] ) ) ;
      return res ;
    }
    else if ( sum < 0 ) {
      l ++ ;
    }
    else {
      r -- ;
    }
  }
  return res ;
}

***Example ends here:
int binarySearch ( vector < int > p , int n ) {
  int i = 0 ;
  int j = p . size ( ) - 1 ;
  int index = - 1 ;
  while ( i <= j ) {
    int mid = i + ( j - i ) / 2 ;
    if ( p [ mid ] >= n ) {
      index = mid ;
      j = mid - 1 ;
    }
    else {
      i = mid + 1 ;
    }
  }
  return index ;
}

***Example ends here:
int findMinLength ( vector < int > arr ) {
  int index = arr . size ( ) - 1 ;
  while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) index -- ;
  return index ;
}

***Example ends here:
int min_digits ( int n , int k ) {
  int digits_num = floor ( log10 ( n ) + 1 ) ;
  int temp_sum = 0 ;
  int temp = digits_num ;
  int result ;
  int x , v ;
  int sum = 0 ;
  int num2 = n ;
  while ( num2 != 0 ) {
    sum += num2 % 10 ;
    num2 /= 10 ;
  }
  if ( sum <= k ) {
    x = 0 ;
  }
  else {
    while ( temp > 0 ) {
      v = n / ( 10 * ( temp - 1 ) ) ;
      temp_sum += v % 10 ;
      if ( temp_sum >= k ) {
        v /= 10 ;
        v ++ ;
        result = v * ( 10 * temp ) ;
        break ;
      }
      temp -- ;
    }
    x = result - n ;
    return x ;
  }
  return - 1 ;
}

***Example ends here:
int checkForPerfectSquare ( int * arr , int i , int j ) {
  int mid , sum = 0 ;
  for ( int m = i ;
  m <= j ;
  m ++ ) sum += arr [ m ] ;
  int low = 0 , high = sum / 2 ;
  while ( low <= high ) {
    mid = low + ( high - low ) / 2 ;
    if ( mid * mid == sum ) return mid ;
    else if ( mid * mid > sum ) high = mid - 1 ;
    else low = mid + 1 ;
  }
  return - 1 ;
}

***Example ends here:
int min_flips ( vector < vector < char >> mat , string s ) {
  int n = mat . size ( ) ;
  int m = mat [ 0 ] . size ( ) ;
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = 0 ;
    j < m ;
    j ++ ) {
      if ( mat [ i ] [ j ] != ( char ) s [ i + j ] - ( char ) '0' ) {
        count ++ ;
      }
    }
  }
  return count ;
}

***Example ends here:
vector < vector < int >> constructTree ( int n , vector < pair < int , int >> edges ) {
  vector < vector < int >> adjl ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    adjl . push_back ( vector < int > ( ) ) ;
  }
  for ( auto e : edges ) {
    int u = e . first ;
    int v = e . second ;
    adjl [ u ] . push_back ( v ) ;
    adjl [ v ] . push_back ( u ) ;
  }
  return adjl ;
}

***Example ends here:
int find_sum_of_values ( int v , int * parent , int * values_children ) {
  int cur_node = v ;
  int Sum = 0 ;
  while ( cur_node != - 1 ) {
    Sum += values_children [ cur_node ] ;
    cur_node = parent [ cur_node ] ;
  }
  return Sum ;
}

***Example ends here:
int get_distinct ( int d , int count ) {
  int num = 0 ;
  count = 10 * ( count - 1 ) ;
  while ( count > 0 ) {
    num += count * d ;
    count /= 10 ;
  }
  return num ;
}

***Example ends here:
bool is_increasing ( vector < int > arr ) {
  for ( int i = 0 ;
  i < arr . size ( ) - 1 ;
  i ++ ) {
    if ( arr [ i ] > arr [ i + 1 ] ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int minAdjSwaps ( vector < vector < int >> mat ) {
  int n = mat . size ( ) ;
  vector < int > cnt_zero ( n , 0 ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = n - 1 ;
    j >= 0 ;
    j -- ) {
      if ( mat [ i ] [ j ] != 0 ) break ;
      cnt_zero [ i ] ++ ;
    }
  }
  int cnt_swaps = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( cnt_zero [ i ] < ( n - i - 1 ) ) {
      int first = i ;
      while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) first ++ ;
      if ( first == n ) return - 1 ;
      while ( first > i ) {
        cnt_zero [ first ] = cnt_zero [ first - 1 ] ;
        cnt_zero [ first - 1 ] = cnt_zero [ first ] ;
        first -- ;
        cnt_swaps ++ ;
      }
    }
  }
  return cnt_swaps ;
}

***Example ends here:
int solve ( vector < int > values , vector < int > salary , int mod ) {
  int ret = 1 ;
  int amt = 0 ;
  sort ( values . begin ( ) , values . end ( ) ) ;
  sort ( salary . begin ( ) , salary . end ( ) ) ;
  while ( salary . size ( ) > 0 ) {
    while ( values . size ( ) > 0 && values . back ( ) >= salary . back ( ) ) {
      amt ++ ;
      values . pop_back ( ) ;
    }
    if ( amt == 0 ) return 0 ;
    ret *= amt ;
    amt -- ;
    ret %= mod ;
    salary . pop_back ( ) ;
  }
  return ret ;
}

***Example ends here:
vector < int > organizeInOrder ( vector < int > vec , char op [ ] , int n ) {
  vector < int > result ( n , 0 ) ;
  sort ( vec . begin ( ) , vec . end ( ) ) ;
  int i = 0 , j = n - 1 , k = 0 ;
  while ( i <= j && k <= n - 2 ) {
    if ( op [ k ] == '<' ) {
      result [ k ] = vec [ i ] ;
      i ++ ;
    }
    else {
      result [ k ] = vec [ j ] ;
      j -- ;
    }
    k ++ ;
  }
  result [ n - 1 ] = vec [ i ] ;
  return result ;
}

***Example ends here:
int count_points ( int n , int m , vector < int > a , vector < int > b , int x , int y ) {
  sort ( a . begin ( ) , a . end ( ) ) ;
  sort ( b . begin ( ) , b . end ( ) ) ;
  int j = 0 ;
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    while ( j < m ) {
      if ( a [ i ] + y < b [ j ] ) break ;
      if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) {
        count ++ ;
        j ++ ;
        break ;
      }
      else {
        j ++ ;
      }
    }
  }
  return count ;
}

***Example ends here:
bool are_same ( vector < string > a , vector < string > b ) {
  sort ( a . begin ( ) , a . end ( ) ) ;
  sort ( b . begin ( ) , b . end ( ) ) ;
  return a == b ;
}

***Example ends here:
int countNumberOfStrings ( string s ) {
  int n = s . size ( ) - 1 ;
  int count = 2 * n ;
  return count ;
}

***Example ends here:
vector < int > prime_power ( int x ) {
  vector < int > prime_pow ;
  for ( int i = 2 ;
  i <= x ;
  i ++ ) {
    if ( i * i > x + 1 ) break ;
    if ( x % i == 0 ) {
      int p = 1 ;
      while ( x % i == 0 ) {
        x /= i ;
        p *= i ;
      }
      prime_pow . push_back ( p ) ;
    }
  }
  if ( x > 1 ) prime_pow . push_back ( x ) ;
  return prime_pow ;
}

***Example ends here:
int is_perfect ( double n0 ) {
  double n = sqrt ( n0 ) ;
  if ( floor ( n ) != ceil ( n ) ) return 0 ;
  return 1 ;
}

***Example ends here:
int findSum ( int l , int r ) {
  vector < int > arr ;
  int i = 0 ;
  int x = 2 ;
  while ( i <= r ) {
    arr . push_back ( i + x ) ;
    if ( i + 1 <= r ) arr . push_back ( i + 1 + x ) ;
    x *= - 1 ;
    i += 2 ;
  }
  int sum = 0 ;
  for ( int i = l ;
  i <= r ;
  i ++ ) sum += arr [ i ] ;
  return sum ;
}

***Example ends here:
int results ( int n , int k ) {
  return round ( n * ( 1.0 / 2 * k ) ) ;
}

***Example ends here:
vector < int > factors ( int n ) {
  vector < int > v ;
  v . push_back ( 1 ) ;
  for ( int i = 2 ;
  i <= ( int ) sqrt ( n ) ;
  i += 1 ) {
    if ( n % i == 0 ) {
      v . push_back ( i ) ;
      if ( n / i != i ) v . push_back ( n / i ) ;
    }
  }
  return v ;
}

***Example ends here:
double smallest_num ( int n ) {
  double x = 10.0 * ( ( n - 1 ) / 2.0 ) ;
  return ceil ( x ) ;
}

***Example ends here:
int smallest ( string s ) {
  vector < int > a ( s . size ( ) ) ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) a [ i ] = ( char ) ( s [ i ] - '0' ) ;
  vector < int > b ;
  for ( int i = 0 ;
  i < a . size ( ) ;
  i ++ ) if ( a [ i ] % 2 != 0 ) b . push_back ( a [ i ] ) ;
  sort ( b . begin ( ) , b . end ( ) ) ;
  if ( b . size ( ) > 1 ) return b [ 0 ] * 10 + b [ 1 ] ;
  return - 1 ;
}

***Example ends here:
vector < double > diagonals ( double a , double b , double c , double d ) {
  vector < double > ans ;
  ans . push_back ( sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ;
  ans . push_back ( sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ;
  return ans ;
}

***Example ends here:
int find_number_of_digits ( int n , int base ) {
  int dig = floor ( log ( n ) / log ( base ) ) + 1 ;
  return dig ;
}

***Example ends here:
double n_gon ( int n ) {
  double pro_angle_var ;
  if ( n % 4 == 0 ) pro_angle_var = M_PI * ( 180.0 / n ) / 180 ;
  else pro_angle_var = M_PI * ( 180.0 / ( 2 * n ) ) / 180 ;
  double neg_x = 1.0e+99 ;
  double pos_x = - 1.0e+99 ;
  double neg_y = 1.0e+99 ;
  double pos_y = - 1.0e+99 ;
  for ( int j = 0 ;
  j < n ;
  j ++ ) {
    double px = cos ( 2 * M_PI * j / n + pro_angle_var ) ;
    double py = sin ( 2 * M_PI * j / n + pro_angle_var ) ;
    neg_x = min ( neg_x , px ) ;
    pos_x = max ( pos_x , px ) ;
    neg_y = min ( neg_y , py ) ;
    pos_y = max ( pos_y , py ) ;
  }
  double opt2 = max ( pos_x - neg_x , pos_y - neg_y ) ;
  return opt2 / sin ( M_PI / n ) / 2 ;
}

***Example ends here:
int find_max_k ( int n ) {
  int p = ( int ) log2 ( n ) ;
  return 2 * p ;
}

***Example ends here:
int nth_fibo ( int n ) {
  double a = ( 5 * 0.5 + 1 ) / 2 ;
  double b = ( - 5 * 0.5 + 1 ) / 2 ;
  double r = 5 * 0.5 ;
  double ans = ( a * n - b * n ) / r ;
  return ( int ) ans ;
}

***Example ends here:
double find_prob ( double l , double r ) {
  double count_of_ps = floor ( sqrt ( r ) ) - ceil ( sqrt ( l ) ) + 1 ;
  double total = r - l + 1 ;
  double prob = count_of_ps / total ;
  return prob ;
}

***Example ends here:
int previous_fibonacci ( int n ) {
  double a = n / ( ( 1 + sqrt ( 5 ) ) / 2.0 ) ;
  return round ( a ) ;
}

***Example ends here:
vector < int > distPrime ( vector < int > arr , vector < int > allPrimes ) {
  vector < int > list1 ;
  for ( int i = 0 ;
  i < allPrimes . size ( ) ;
  i ++ ) {
    for ( int j = 0 ;
    j < arr . size ( ) ;
    j ++ ) {
      if ( arr [ j ] % i == 0 ) {
        list1 . push_back ( i ) ;
        break ;
      }
    }
  }
  return list1 ;
}

***Example ends here:
vector < int > get_array ( int n ) {
  vector < int > ans ;
  int p2 = 1 ;
  while ( n > 0 ) {
    if ( n % 2 == 1 ) ans . push_back ( p2 ) ;
    n >>= 1 ;
    p2 *= 2 ;
  }
  return ans ;
}

***Example ends here:
int maximumLength ( vector < int > a ) {
  vector < int > counts ( 11 , 0 ) ;
  int ans = 0 ;
  for ( int index = 0 ;
  index < a . size ( ) ;
  ++ index ) {
    counts [ a [ index ] ] ++ ;
    vector < int > k ;
    for ( int i = 0 ;
    i < counts . size ( ) ;
    ++ i ) {
      if ( counts [ i ] != 0 ) k . push_back ( i ) ;
    }
    sort ( k . begin ( ) , k . end ( ) ) ;
    if ( k . size ( ) == 1 || ( k [ 0 ] == k [ k . size ( ) - 2 ] && k [ k . size ( ) - 1 ] - k [ k . size ( ) - 2 ] == 1 ) || ( k [ 0 ] == 1 && k [ 1 ] == k [ k . size ( ) - 1 ] ) ) {
      ans = index ;
    }
  }
  return ans + 1 ;
}

***Example ends here:
int max_edges ( int n ) {
  int edges = floor ( n * n / 4 ) ;
  return edges ;
}

***Example ends here:
int find_k ( int n , int k ) {
  vector < int > a ;
  for ( int i = 1 ;
  i < n ;
  i ++ ) if ( i % 2 == 1 ) a . push_back ( i ) ;
  for ( int i = 1 ;
  i < n ;
  i ++ ) if ( i % 2 == 0 ) a . push_back ( i ) ;
  return a [ k - 1 ] ;
}

***Example ends here:
bool is_keith ( int x , int temp ) {
  vector < int > terms ;
  int n = 0 ;
  while ( temp > 0 ) {
    terms . push_back ( temp % 10 ) ;
    temp = temp / 10 ;
    n ++ ;
  }
  terms . reverse ( ) ;
  int next_term = 0 , i = n ;
  while ( next_term < x ) {
    next_term = 0 ;
    for ( int j = 1 ;
    j <= n ;
    j ++ ) next_term += terms [ i - j ] ;
    terms . push_back ( next_term ) ;
    i ++ ;
  }
  return next_term == x ;
}

***Example ends here:
bool factors ( int n , int k ) {
  vector < int > v ;
  while ( n % 2 == 0 ) {
    v . push_back ( 2 ) ;
    n /= 2 ;
  }
  if ( v . size ( ) >= k ) return true ;
  for ( int i = 3 ;
  i <= n ;
  i += 2 ) {
    if ( i * i > n ) break ;
    while ( n % i == 0 ) {
      n = n / i ;
      v . push_back ( i ) ;
    }
    if ( v . size ( ) >= k ) return true ;
  }
  if ( n > 2 ) v . push_back ( n ) ;
  if ( v . size ( ) >= k ) return true ;
  return false ;
}

***Example ends here:
QStringList separateParenGroups ( QString parenString ) {
  QStringList allParens ;
  QString currentParen ;
  int currentDepth = 0 ;
  for ( int i = 0 ;
  i < parenString . length ( ) ;
  ++ i ) {
    if ( parenString . at ( i ) == QLatin1Char ( '(' ) ) {
      ++ currentDepth ;
      currentParen . append ( parenString . at ( i ) ) ;
    }
    else if ( parenString . at ( i ) == QLatin1Char ( ')' ) ) {
      -- currentDepth ;
      currentParen . append ( parenString . at ( i ) ) ;
      if ( currentDepth == 0 ) {
        allParens . append ( QLatin1String ( "" ) ) ;
        currentParen . clear ( ) ;
      }
    }
  }
  return allParens ;
}

***Example ends here:
std :: vector < int > parseNestedParens ( std :: string parenString ) {
  std :: vector < int > allLevels ;
  int level = 0 ;
  int maxLevel = 0 ;
  for ( std :: string :: const_iterator i = parenString . begin ( ) ;
  i != parenString . end ( ) ;
  ++ i ) {
    char chr = * i ;
    if ( chr == '(' ) {
      ++ level ;
      if ( level > maxLevel ) maxLevel = level ;
    }
    if ( chr == ')' ) {
      -- level ;
      if ( level == 0 ) {
        allLevels . push_back ( maxLevel ) ;
        maxLevel = 0 ;
      }
    }
  }
  return allLevels ;
}

***Example ends here:
Vector < String > filterBySubstring ( Vector < String > strings , String substring ) {
  Vector < String > result ;
  for ( size_t i = 0 ;
  i < strings . size ( ) ;
  ++ i ) {
    if ( substring . contains ( strings [ i ] ) ) result . append ( strings [ i ] ) ;
  }
  return result ;
}

***Example ends here:
vector < int > rollingMax ( vector < int > numbers ) {
  int runningMax = 0 ;
  vector < int > result ;
  for ( int n : numbers ) {
    if ( n > runningMax ) runningMax = n ;
    result . push_back ( runningMax ) ;
  }
  return result ;
}

***Example ends here:
string make_palindrome ( string s ) {
  if ( s . empty ( ) ) return "" ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) {
    string r_str = s . substr ( i ) ;
    if ( r_str == r_str . substr ( 0 , i ) ) {
      string n_str = s . substr ( 0 , i ) ;
      string n2_str = n_str . substr ( 0 , i ) ;
      return s + n2_str ;
    }
  }
  return s . substr ( 0 , s . size ( ) - 2 ) + s . substr ( 0 , s . size ( ) - 1 ) ;
}

***Example ends here:
std :: string string_xor ( std :: string a , std :: string b ) {
  std :: string result ;
  for ( size_t i = 0 ;
  i < a . size ( ) ;
  ++ i ) {
    if ( a [ i ] == b [ i ] ) result . push_back ( "0" ) ;
    else result . push_back ( "1" ) ;
  }
  return result ;
}

***Example ends here:
string longest ( vector < string > strings ) {
  if ( strings . empty ( ) ) return "" ;
  size_t maxLen = max ( strings . size ( ) , strings [ 0 ] . length ( ) ) ;
  for ( size_t i = 1 ;
  i < strings . size ( ) ;
  i ++ ) {
    if ( strings [ i ] . length ( ) == maxLen ) return strings [ i ] ;
  }
  return "" ;
}

***Example ends here:
string string_sequence ( int n ) {
  string s ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    s . push_back ( to_string ( i ) ) ;
    s . push_back ( " " ) ;
  }
  s . push_back ( to_string ( n ) ) ;
  return s ;
}

***Example ends here:
unsigned countDistinctCharacters ( String s ) {
  HashSet < UChar > distinct ;
  for ( unsigned i = 0 ;
  i < s . length ( ) ;
  ++ i ) distinct . add ( s [ i ] ) ;
  return distinct . size ( ) ;
}

***Example ends here:
int how_many_times ( string s , string sub ) {
  int times = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) - sub . length ( ) + 1 ;
  i ++ ) {
    if ( s . substr ( i , sub . length ( ) ) == sub ) times ++ ;
  }
  return times ;
}

***Example ends here:
string sort_numbers ( string numbers ) {
  unordered_map < string , int > to_num = {
    {
      "zero" , 0 }
      , {
        "one" , 1 }
        , {
          "two" , 2 }
          , {
            "three" , 3 }
            , {
              "four" , 4 }
              , {
                "five" , 5 }
                , {
                  "six" , 6 }
                  , {
                    "seven" , 7 }
                    , {
                      "eight" , 8 }
                      , {
                        "nine" , 9 }
                      }
                      ;
                      unordered_map < string , int > from_num = {
                        {
                          "zero" , 0 }
                          , {
                            "one" , 1 }
                            , {
                              "two" , 2 }
                              , {
                                "three" , 3 }
                                , {
                                  "four" , 4 }
                                  , {
                                    "five" , 5 }
                                    , {
                                      "six" , 6 }
                                      , {
                                        "seven" , 7 }
                                        , {
                                          "eight" , 8 }
                                          , {
                                            "nine" , 9 }
                                          }
                                          ;
                                          vector < int > ints ;
                                          vector < string > current ;
                                          for ( int i = 0 ;
                                          i < numbers . size ( ) + 1 ;
                                          i ++ ) {
                                            if ( i == numbers . size ( ) || numbers [ i ] == " " ) {
                                              if ( string :: find ( current . begin ( ) , current . end ( ) , numbers [ i ] ) != string :: npos ) {
                                                ints . push_back ( to_num [ string :: find ( current . begin ( ) , current . end ( ) , numbers [ i ] ) ] ) ;
                                                current . clear ( ) ;
                                              }
                                            }
                                            else {
                                              current . push_back ( numbers [ i ] ) ;
                                            }
                                          }
                                          sort ( ints . begin ( ) , ints . end ( ) ) ;
                                          string result ;
                                          for ( int i = 0 ;
                                          i < ints . size ( ) ;
                                          i ++ ) {
                                            result += from_num [ ints [ i ] ] ;
                                            if ( i != ints . size ( ) - 1 ) result += " " ;
                                          }
                                          return result ;
                                        }
                                        
***Example ends here:
vector < int > findClosestElements ( vector < int > numbers ) {
  vector < int > closestPair = {
    numbers [ 0 ] , numbers [ 1 ] }
    ;
    int distance = abs ( closestPair [ 0 ] - closestPair [ 1 ] ) ;
    for ( int i = 0 ;
    i < numbers . size ( ) ;
    i ++ ) {
      for ( int j = i + 1 ;
      j < numbers . size ( ) ;
      j ++ ) {
        if ( abs ( numbers [ i ] - numbers [ j ] ) < distance ) {
          closestPair [ 0 ] = numbers [ i ] ;
          closestPair [ 1 ] = numbers [ j ] ;
          distance = abs ( numbers [ i ] - numbers [ j ] ) ;
        }
      }
    }
    sort ( closestPair . begin ( ) , closestPair . end ( ) ) ;
    return closestPair ;
  }
  
***Example ends here:
vector < double > rescaleToUnit ( vector < double > numbers ) {
  double minNum = min ( numbers ) ;
  double maxNum = max ( numbers ) ;
  vector < double > result ;
  for ( int n = 0 ;
  n < numbers . size ( ) ;
  n ++ ) {
    result . push_back ( ( numbers [ n ] - minNum ) / ( maxNum - minNum ) ) ;
  }
  return result ;
}

***Example ends here:
Vector < int > filterIntegers ( Vector < int > values ) {
  Vector < int > result ;
  for ( int e = 0 ;
  e < values . size ( ) ;
  e ++ ) {
    if ( values [ e ] > 0 ) result . append ( e ) ;
  }
  return result ;
}

***Example ends here:
vector < int > removeDuplicates ( vector < int > numbers ) {
  unordered_map < int , int > counter ;
  for ( int i : numbers ) {
    counter [ i ] = counter . find ( i ) + 1 ;
  }
  vector < int > result ;
  for ( int i : numbers ) {
    if ( counter [ i ] == 1 ) {
      result . push_back ( i ) ;
    }
  }
  return result ;
}

***Example ends here:
std :: string flip_case ( std :: string s ) {
  std :: string result ;
  for ( auto c : s ) {
    if ( c . islower ( ) ) {
      result . push_back ( c . toupper ( ) ) ;
    }
    else {
      result . push_back ( c . tolower ( ) ) ;
    }
  }
  return result ;
}

***Example ends here:
Vector < String > filterByPrefix ( Vector < String > strings , String prefix ) {
  Vector < String > result ;
  for ( size_t i = 0 ;
  i < strings . size ( ) ;
  ++ i ) {
    if ( strings [ i ] . startsWith ( prefix ) ) result . append ( strings [ i ] ) ;
  }
  return result ;
}

***Example ends here:
double find_zero ( vector < double > xs ) {
  double ans = 0 ;
  double value = 0 ;
  for ( int i = 0 ;
  i < xs . size ( ) ;
  i ++ ) {
    value += xs [ i ] * ans * i ;
  }
  while ( fabs ( value ) > 1e - 6 ) {
    double driv = 0 ;
    for ( int i = 1 ;
    i < xs . size ( ) ;
    i ++ ) {
      driv += xs [ i ] * ans * ( i - 1 ) * i ;
    }
    ans -= value / driv ;
    value = 0 ;
    for ( int i = 0 ;
    i < xs . size ( ) ;
    i ++ ) {
      value += xs [ i ] * ans * i ;
    }
  }
  return ans ;
}

***Example ends here:
vector < int > sortThird ( vector < int > l ) {
  vector < int > thirds ;
  for ( int i = 0 ;
  i < l . size ( ) ;
  i += 3 ) {
    thirds . push_back ( l [ i ] ) ;
  }
  sort ( thirds . begin ( ) , thirds . end ( ) ) ;
  vector < int > result ;
  for ( int i = 0 ;
  i < l . size ( ) ;
  i ++ ) {
    if ( i % 3 == 0 ) {
      result . push_back ( thirds [ i / 3 ] ) ;
    }
    else {
      result . push_back ( l [ i ] ) ;
    }
  }
  return result ;
}

***Example ends here:
std :: list < std :: string > unique ( std :: list < std :: string > l ) {
  std :: list < std :: string > result ;
  std :: transform ( l . begin ( ) , l . end ( ) , result . begin ( ) , :: tolower ) ;
  return result ;
}

***Example ends here:
int max_element ( list < int > l ) {
  return max ( l ) ;
}

***Example ends here:
bool triples_sum_to_zero ( int l [ ] ) {
  for ( int i = 0 ;
  i < l . length ;
  i ++ ) {
    for ( int j = i + 1 ;
    j < l . length ;
    j ++ ) {
      for ( int k = j + 1 ;
      k < l . length ;
      k ++ ) {
        if ( l [ i ] + l [ j ] + l [ k ] == 0 ) {
          return true ;
        }
      }
    }
  }
  return false ;
}

***Example ends here:
int fib4 ( int n ) {
  int results [ ] = {
    0 , 0 , 2 , 0 }
    ;
    for ( int i = 4 ;
    i <= n ;
    i ++ ) {
      results [ i ] = results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ;
    }
    return results [ n ] ;
  }
  
***Example ends here:
bool is_palindrome ( string text ) {
  string pr = text . substr ( 0 , text . length ( ) - 1 ) ;
  return pr == text ;
}

***Example ends here:
QString removeVowels ( QString text ) {
  QString result ;
  QString vowels = "aeiou" ;
  for ( int i = 0 ;
  i < text . size ( ) ;
  ++ i ) {
    QChar ch = text . at ( i ) ;
    if ( ch . isLetterOrNumber ( ) ) result . append ( ch ) ;
  }
  return result ;
}

***Example ends here:
bool same_chars ( std :: string s0 , std :: string s1 ) {
  std :: set < char > set0 ;
  for ( std :: string :: const_iterator i = s0 . begin ( ) ;
  i != s0 . end ( ) ;
  ++ i ) {
    set0 . insert ( * i ) ;
  }
  std :: set < char > set1 ;
  for ( std :: string :: const_iterator i = s1 . begin ( ) ;
  i != s1 . end ( ) ;
  ++ i ) {
    set1 . insert ( * i ) ;
  }
  return set0 == set1 ;
}

***Example ends here:
vector < string > common ( vector < string > l1 , vector < string > l2 ) {
  set < string > us ;
  for ( string e1 : l1 ) for ( string e2 : l2 ) if ( e1 == e2 ) us . insert ( e1 ) ;
  vector < string > ret ( us ) ;
  sort ( ret . begin ( ) , ret . end ( ) ) ;
  return ret ;
}

***Example ends here:
bool correctBracketing ( string brackets ) {
  int depth = 0 ;
  for ( string b : brackets ) {
    if ( b == "(" ) {
      depth ++ ;
    }
    else {
      depth -- ;
    }
    if ( depth < 0 ) {
      return false ;
    }
  }
  return depth == 0 ;
}

***Example ends here:
string circular_shift ( int x , int shift ) {
  string s = to_string ( x ) ;
  if ( shift > s . length ( ) ) return s . substr ( 0 , s . length ( ) - shift ) ;
  return s . substr ( s . length ( ) - shift ) ;
}

***Example ends here:
int search ( vector < int > lst ) {
  unordered_map < int , int > counter ;
  for ( int i = 0 ;
  i < lst . size ( ) ;
  i ++ ) {
    counter [ lst [ i ] ] = counter . find ( lst [ i ] ) + 1 ;
  }
  int ans = - 1 ;
  for ( unordered_map < int , int > :: iterator it = counter . begin ( ) ;
  it != counter . end ( ) ;
  it ++ ) {
    if ( it -> second >= ans ) {
      ans = it -> first ;
    }
  }
  return ans ;
}

***Example ends here:
int smallestChange ( vector < int > arr ) {
  int ans = 0 ;
  for ( int i = 0 ;
  i < arr . size ( ) / 2 ;
  i ++ ) {
    if ( arr [ i ] != arr [ arr . size ( ) - i - 1 ] ) {
      ans ++ ;
    }
  }
  return ans ;
}

***Example ends here:
vector < string > totalMatch ( vector < string > lst1 , vector < string > lst2 ) {
  int sum1 = 0 ;
  for ( auto & st : lst1 ) sum1 += st . size ( ) ;
  int sum2 = 0 ;
  for ( auto & st : lst2 ) sum2 += st . size ( ) ;
  return lst2 . empty ( ) ? lst1 : lst2 ;
}

***Example ends here:
bool is_happy ( string s ) {
  if ( s . size ( ) < 3 ) return false ;
  for ( int i = 0 ;
  i < s . size ( ) - 2 ;
  i ++ ) {
    if ( s [ i ] == s [ i + 1 ] || s [ i + 1 ] == s [ i + 2 ] || s [ i ] == s [ i + 2 ] ) return false ;
  }
  return true ;
}

***Example ends here:
vector < string > numericalLetterGrade ( vector < double > grades ) {
  vector < string > letter_grade ;
  for ( double gpa : grades ) {
    if ( gpa == 4.0 ) {
      letter_grade . push_back ( "A+" ) ;
    }
    else if ( gpa > 3.7 ) {
      letter_grade . push_back ( "A" ) ;
    }
    else if ( gpa > 3.3 ) {
      letter_grade . push_back ( "A-" ) ;
    }
    else if ( gpa > 3.0 ) {
      letter_grade . push_back ( "B+" ) ;
    }
    else if ( gpa > 2.7 ) {
      letter_grade . push_back ( "B" ) ;
    }
    else if ( gpa > 2.3 ) {
      letter_grade . push_back ( "B-" ) ;
    }
    else if ( gpa > 2.0 ) {
      letter_grade . push_back ( "C+" ) ;
    }
    else if ( gpa > 1.7 ) {
      letter_grade . push_back ( "C" ) ;
    }
    else if ( gpa > 1.3 ) {
      letter_grade . push_back ( "C-" ) ;
    }
    else if ( gpa > 1.0 ) {
      letter_grade . push_back ( "D+" ) ;
    }
    else if ( gpa > 0.7 ) {
      letter_grade . push_back ( "D" ) ;
    }
    else if ( gpa > 0.0 ) {
      letter_grade . push_back ( "D-" ) ;
    }
    else {
      letter_grade . push_back ( "E" ) ;
    }
  }
  return letter_grade ;
}

***Example ends here:
string solve ( int n ) {
  string biStr ;
  int sum = 0 ;
  for ( int i = 0 ;
  i < string ( n ) . size ( ) ;
  i ++ ) sum += ( char ) ( n [ i ] - '0' ) ;
  while ( sum > 0 ) {
    biStr . insert ( biStr . begin ( ) , string ( sum % 2 ) ) ;
    sum /= 2 ;
  }
  return biStr ;
}

***Example ends here:
string anti_shuffle ( string s ) {
  string ret ;
  vector < string > current ;
  for ( int i = 0 ;
  i < s . size ( ) + 1 ;
  i ++ ) {
    if ( i == s . size ( ) || s [ i ] == " " ) {
      sort ( current . begin ( ) , current . end ( ) ) ;
      if ( ret . size ( ) ) ret += " " ;
      ret += "" ;
      current . clear ( ) ;
    }
    else {
      current . push_back ( s [ i ] ) ;
    }
  }
  return ret ;
}

***Example ends here:
void SortArray ( int * array ) {
  if ( ! array ) return ;
  if ( ( array [ 0 ] + array [ array - 1 ] ) % 2 == 1 ) {
    sort ( array , array + 1 ) ;
  }
  else {
    sort ( array , array + 1 ) ;
  }
}

***Example ends here:
string encrypt ( string s ) {
  string ans ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) {
    if ( s [ i ] . isalpha ( ) ) ans . push_back ( ( char ) ( 'a' + ( s [ i ] - 'a' + 4 ) % 26 ) ) ;
    else ans . push_back ( s [ i ] ) ;
  }
  return ans ;
}

***Example ends here:
int isBored ( string s ) {
  bool isStart = true ;
  int sum = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s [ i ] == '.' || s [ i ] == '?' || s [ i ] == '!' ) {
      isStart = true ;
    }
    else if ( isStart ) {
      if ( s [ i ] == ' ' ) continue ;
      if ( s [ i ] == 'I ' ) sum ++ ;
      isStart = false ;
    }
  }
  return sum ;
}

***Example ends here:
string encode ( string message ) {
  const string vowels = "aeiouAEIOU" ;
  string ret ;
  for ( size_t i = 0 ;
  i < message . size ( ) ;
  ++ i ) {
    if ( message [ i ] == ' ' ) {
      char c = message [ i ] ;
      if ( c < vowels . size ( ) ) {
        c = vowels [ c ] ;
      }
    }
    else if ( message [ i ] == '\t' ) {
      char c = message [ i ] ;
      if ( c < vowels . size ( ) ) {
        c = vowels [ c ] ;
      }
    }
    ret += c ;
  }
  return ret ;
}

***Example ends here:
int skjkasdkd ( vector < int > lst ) {
  int largest = 0 ;
  for ( int n = 0 ;
  n < lst . size ( ) ;
  n ++ ) {
    if ( lst [ n ] > largest ) {
      bool prime = true ;
      for ( int i = 2 ;
      i < lst [ n ] ;
      i ++ ) {
        if ( lst [ n ] % i == 0 ) prime = false ;
      }
      if ( prime ) largest = lst [ n ] ;
    }
  }
  int sum = 0 ;
  string s = to_string ( largest ) ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) {
    sum += ( int ) s [ i ] - ( int ) "0" ;
  }
  return sum ;
}

***Example ends here:
bool check_dict_case ( std :: unordered_map < std :: string , std :: string > dict ) {
  if ( dict . empty ( ) ) return false ;
  int is_lower = 0 ;
  int is_upper = 0 ;
  for ( std :: unordered_map < std :: string , std :: string > :: const_iterator it = dict . begin ( ) ;
  it != dict . end ( ) ;
  ++ it ) {
    for ( std :: string :: const_iterator c = it -> first ;
    c != it -> second ;
    ++ c ) {
      if ( c -> islower ( ) ) is_lower = 1 ;
      else if ( c -> isupper ( ) ) is_upper = 1 ;
      else return false ;
    }
  }
  return is_lower + is_upper == 1 ;
}

***Example ends here:
int multiply ( int a , int b ) {
  return ( abs ( a ) % 10 ) * ( abs ( b ) % 10 ) ;
}

***Example ends here:
int count_upper ( string s ) {
  string u_vowel = "AEIOU" ;
  int count = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i += 2 ) {
    if ( s [ i ] == u_vowel ) count ++ ;
  }
  return count ;
}

***Example ends here:
vector < string > byLength ( vector < string > arr ) {
  unordered_map < int , string > numTo = {
    {
      1 , "One" }
      , {
        2 , "Two" }
        , {
          3 , "Three" }
          , {
            4 , "Four" }
            , {
              5 , "Five" }
              , {
                6 , "Six" }
                , {
                  7 , "Seven" }
                  , {
                    8 , "Eight" }
                    , {
                      9 , "Nine" }
                    }
                    ;
                    sort ( arr . begin ( ) , arr . end ( ) ) ;
                    vector < string > newArr ;
                    for ( auto n : arr ) {
                      if ( n >= 1 && n <= 9 ) {
                        newArr . push_back ( numTo [ n ] ) ;
                      }
                    }
                    return newArr ;
                  }
                  
***Example ends here:
int f ( int n ) {
  int sum = 0 ;
  int prod = 1 ;
  int result ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) {
    sum += i ;
    prod *= i ;
    if ( i % 2 == 0 ) result += prod ;
    else result += sum ;
  }
  return result ;
}

***Example ends here:
int even_odd_palindrome ( int n ) {
  int even_count = 0 ;
  int odd_count = 0 ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) {
    string s = to_string ( i ) ;
    string r_str = s . substr ( 0 , s . size ( ) - 1 ) ;
    if ( s == r_str ) {
      if ( i % 2 == 1 ) odd_count ++ ;
      else even_count ++ ;
    }
  }
  return even_count ;
}

***Example ends here:
histogram ( string test ) {
  unordered_map < string , int > count ;
  int max = 0 ;
  for ( int i = 0 ;
  i < test . size ( ) ;
  i ++ ) {
    if ( test [ i ] != " " ) {
      count [ test [ i ] ] = count . find ( test [ i ] ) + 1 ;
      if ( count [ test [ i ] ] > max ) max = count [ test [ i ] ] ;
    }
  }
  unordered_map < string , int > result ;
  for ( unordered_map < string , int > :: iterator it = count . begin ( ) ;
  it != count . end ( ) ;
  it ++ ) {
    if ( it -> second == max ) result [ it -> first ] = it -> first ;
  }
  return result ;
}

***Example ends here:
string reverse_delete ( string s , char c ) {
  string ret ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) {
    if ( s [ i ] != c ) {
      ret . push_back ( s [ i ] ) ;
    }
  }
  string flag = "false" ;
  if ( string :: npos == ret . size ( ) ) {
    flag = "true" ;
  }
  return ret ;
}

***Example ends here:
void sortArray ( vector < int > arr ) {
  vector < int > bin ;
  for ( int i = 0 ;
  i < arr . size ( ) ;
  i ++ ) {
    int b = 0 ;
    int n = abs ( arr [ i ] ) ;
    while ( n > 0 ) {
      b += n % 2 ;
      n /= 2 ;
    }
    bin . push_back ( b ) ;
  }
  for ( int i = 0 ;
  i < arr . size ( ) ;
  i ++ ) {
    for ( int j = 1 ;
    j < arr . size ( ) ;
    j ++ ) {
      if ( bin [ j ] < bin [ j - 1 ] || ( bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) ) {
        bin [ j ] = bin [ j - 1 ] ;
        arr [ j ] = arr [ j - 1 ] ;
      }
    }
  }
}

***Example ends here:
string getClosestVowel ( string word ) {
  string vowels = "AEIOUaeiou" ;
  for ( int i = word . size ( ) - 2 ;
  i > 0 ;
  i -- ) {
    if ( word [ i ] == vowels && word [ i + 1 ] != vowels && word [ i - 1 ] != vowels ) {
      return word [ i ] ;
    }
  }
  return "" ;
}

***Example ends here:
QString matchParens ( QStringList lst ) {
  QStringList strings = {
    lst [ 0 ] + lst [ 1 ] , lst [ 1 ] + lst [ 0 ] }
    ;
    foreach ( const QString & l , strings ) {
      int count = 0 ;
      foreach ( const QChar & c , l ) {
        if ( c == QLatin1Char ( '(' ) ) ++ count ;
        if ( c == QLatin1Char ( ')' ) ) -- count ;
        if ( count < 0 ) break ;
      }
      if ( count == 0 ) return QLatin1String ( "Yes" ) ;
    }
    return QLatin1String ( "No" ) ;
  }
  
***Example ends here:
vector < int > maximum ( vector < int > arr , int k ) {
  if ( k == 0 ) return {
  }
  ;
  sort ( arr . begin ( ) , arr . end ( ) ) ;
  return arr . back ( ) ;
}

***Example ends here:
bool valid_date ( string date ) {
  if ( date . length ( ) != 10 ) return false ;
  for ( int i = 0 ;
  i < 10 ;
  i ++ ) {
    if ( i == 2 || i == 5 ) {
      if ( date [ i ] != '-' ) return false ;
    }
    else if ( ! date [ i ] . isdigit ( ) ) return false ;
  }
  int month = atoi ( date . substr ( 0 , 2 ) . c_str ( ) ) ;
  int day = atoi ( date . substr ( 3 , 5 ) . c_str ( ) ) ;
  int year = atoi ( date . substr ( 6 , 10 ) . c_str ( ) ) ;
  if ( month < 1 || month > 12 ) return false ;
  if ( day < 1 || day > 31 ) return false ;
  if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) return false ;
  if ( day == 30 && month == 2 ) return false ;
  return true ;
}

***Example ends here:
vector < string > splitWords ( string txt ) {
  vector < string > current ;
  vector < string > result ;
  if ( string :: npos == txt . find ( " " ) ) {
    for ( int i = 0 ;
    i < txt . length ( ) + 1 ;
    i ++ ) {
      if ( i == txt . length ( ) || txt [ i ] == ' ' ) {
        if ( current . size ( ) > 0 ) {
          result . push_back ( "" . join ( current ) ) ;
          current . clear ( ) ;
        }
      }
      else {
        current . push_back ( txt [ i ] ) ;
      }
    }
    return result ;
  }
  if ( string :: npos == txt . find ( "," ) ) {
    for ( int i = 0 ;
    i < txt . length ( ) + 1 ;
    i ++ ) {
      if ( i == txt . length ( ) || txt [ i ] == ',' ) {
        if ( current . size ( ) > 0 ) {
          result . push_back ( "" . join ( current ) ) ;
          current . clear ( ) ;
        }
      }
      else {
        current . push_back ( txt [ i ] ) ;
      }
    }
    return result ;
  }
  int num = 0 ;
  for ( int i = 0 ;
  i < txt . length ( ) ;
  i ++ ) {
    if ( txt [ i ] . islower ( ) && tolower ( txt [ i ] ) % 2 == 0 ) {
      num ++ ;
    }
  }
  return {
    string ( num ) }
    ;
  }
  
***Example ends here:
int tri ( int n ) {
  if ( n == 0 ) return 1 ;
  int tris [ 3 ] = {
    1 , 3 }
    ;
    for ( int i = 2 ;
    i <= n ;
    i ++ ) {
      if ( i % 2 == 0 ) tris [ i ] = i / 2 + 1 ;
      else tris [ i ] = tris [ i - 1 ] + tris [ i - 2 ] + ( i + 3 ) / 2 ;
    }
    return tris [ 0 ] ;
  }
  
***Example ends here:
bool check_if_last_char_is_a_letter ( std :: string txt ) {
  if ( txt . empty ( ) ) return false ;
  return txt [ txt . size ( ) - 1 ] . isalpha ( ) && ( txt . size ( ) == 1 || ! txt [ txt . size ( ) - 2 ] . isalpha ( ) ) ;
}

***Example ends here:
vector < int > orderByPoints ( vector < int > nums ) {
  vector < int > result ;
  for ( int num : nums ) {
    string w = to_string ( abs ( num ) ) ;
    int sum = 0 ;
    for ( int i = 0 ;
    i < w . size ( ) ;
    i ++ ) {
      sum += ( int ) w [ i ] - ( int ) '0' ;
    }
    if ( num < 0 ) {
      sum -= 2 * ( int ) w [ 0 ] - ( int ) '0' ;
    }
    result . push_back ( sum ) ;
  }
  for ( int i = 0 ;
  i < nums . size ( ) ;
  i ++ ) {
    for ( int j = 1 ;
    j < nums . size ( ) ;
    j ++ ) {
      if ( result [ j - 1 ] > result [ j ] ) {
        result [ j ] = result [ j - 1 ] ;
        nums [ j ] = nums [ j - 1 ] ;
      }
    }
  }
  return nums ;
}

***Example ends here:
vector < string > bf ( string planet1 , string planet2 ) {
  vector < string > planets ;
  planets . push_back ( "Mercury" ) ;
  planets . push_back ( "Venus" ) ;
  planets . push_back ( "Earth" ) ;
  planets . push_back ( "Mars" ) ;
  planets . push_back ( "Jupiter" ) ;
  planets . push_back ( "Saturn" ) ;
  planets . push_back ( "Uranus" ) ;
  planets . push_back ( "Neptune" ) ;
  int idx1 = planets . find ( planet1 ) == planets . end ( ) ? - 1 : 0 ;
  int idx2 = planets . find ( planet2 ) == planets . end ( ) ? - 1 : 0 ;
  if ( idx1 == - 1 || idx2 == - 1 || idx1 == idx2 ) return vector < string > ( ) ;
  return planets . substr ( idx2 + 1 , idx1 - idx2 - 1 ) . empty ( ) ? vector < string > ( ) : planets . substr ( idx1 + 1 , idx2 - idx1 - 1 ) ;
}

***Example ends here:
vector < int > sortedListSum ( vector < int > lst ) {
  vector < int > result ;
  for ( int i = 0 ;
  i < lst . size ( ) ;
  i ++ ) {
    if ( lst [ i ] % 2 == 0 ) {
      result . push_back ( i ) ;
    }
  }
  sort ( result . begin ( ) , result . end ( ) , [ ] ( int s ) {
    return ( int ) s ;
  }
  ) ;
  return result ;
}

***Example ends here:
bool cycpattern_check ( string a , string b ) {
  for ( int i = 0 ;
  i < b . size ( ) ;
  i ++ ) {
    string rotate = b . substr ( i ) + b . substr ( 0 , i ) ;
    if ( rotate == a ) return true ;
  }
  return false ;
}

***Example ends here:
int even_odd_count ( int num ) {
  int even_count = 0 , odd_count = 0 ;
  for ( int i = 0 ;
  i < str :: abs ( num ) ;
  i ++ ) {
    if ( int ( i ) % 2 == 0 ) even_count ++ ;
    else odd_count ++ ;
  }
  return even_count ;
}

***Example ends here:
string findMax ( vector < string > words ) {
  string max = "" ;
  int maxLength = 0 ;
  for ( string word : words ) {
    vector < string > unique ;
    for ( string w : word ) {
      if ( w != "" ) unique . push_back ( w ) ;
      if ( unique . size ( ) > maxLength || ( unique . size ( ) == maxLength && word < max ) ) {
        max = word ;
        maxLength = unique . size ( ) ;
      }
    }
  }
  return max ;
}

***Example ends here:
string solve ( string s ) {
  bool noLetter = true ;
  string result ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) {
    char ch = s [ i ] ;
    if ( ch == '_' ) {
      ch = s [ i ] ;
      noLetter = false ;
    }
    else if ( ch == '-' ) {
      ch = s [ i ] ;
      noLetter = false ;
    }
    result . push_back ( ch ) ;
  }
  if ( noLetter ) return result . substr ( 0 , result . size ( ) - 1 ) ;
  else return result ;
}

***Example ends here:
int most_frequent ( int arr [ ] , int n ) {
  unordered_map < int , int > hp ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( arr [ i ] < hp [ i ] ) hp [ arr [ i ] ] ++ ;
    else hp [ arr [ i ] ] = 1 ;
  }
  int max_count = 0 , res = - 1 ;
  for ( unordered_map < int , int > :: iterator it = hp . begin ( ) ;
  it != hp . end ( ) ;
  it ++ ) {
    if ( max_count < it -> second ) {
      res = it -> first ;
      max_count = it -> second ;
    }
  }
  return res ;
}

***Example ends here:
int find ( int a [ ] , int b [ ] , int k , int n1 , int n2 ) {
  set < int > s ;
  for ( int i = 0 ;
  i < n2 ;
  i ++ ) s . insert ( b [ i ] ) ;
  int missing = 0 ;
  for ( int i = 0 ;
  i < n1 ;
  i ++ ) {
    if ( a [ i ] != b [ i ] ) missing ++ ;
    if ( missing == k ) return a [ i ] ;
  }
  return - 1 ;
}

***Example ends here:
int solve_query ( int start , int end , int arr [ ] ) {
  unordered_map < int , int > frequency ;
  for ( int i = start ;
  i <= end ;
  i ++ ) {
    frequency [ arr [ i ] ] = frequency . find ( arr [ i ] ) + 1 ;
  }
  int count = 0 ;
  for ( unordered_map < int , int > :: iterator it = frequency . begin ( ) ;
  it != frequency . end ( ) ;
  it ++ ) {
    if ( it -> second == arr [ i ] ) {
      count ++ ;
    }
  }
  return count ;
}

***Example ends here:
int segregate ( int * arr , int size ) {
  int j = 0 ;
  for ( int i = 0 ;
  i < size ;
  i ++ ) {
    if ( arr [ i ] <= 0 ) {
      arr [ i ] = arr [ j ] ;
      j ++ ;
    }
  }
  return j ;
}

***Example ends here:
int countTriplets ( int a [ ] , int n ) {
  set < int > s ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) s . insert ( a [ i ] ) ;
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) for ( int j = i + 1 ;
  j < n ;
  j += 1 ) {
    int xr = a [ i ] ^ a [ j ] ;
    if ( xr < s . size ( ) && xr != a [ i ] && xr != a [ j ] ) count ++ ;
  }
  return ( int ) ( count / 3 ) ;
}

***Example ends here:
int leastFrequent ( int arr [ ] , int n ) {
  unordered_map < int , int > hp ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( arr [ i ] < hp . size ( ) ) hp [ arr [ i ] ] ++ ;
    else hp [ arr [ i ] ] = 1 ;
  }
  int minCount = n + 1 ;
  int res = - 1 ;
  for ( unordered_map < int , int > :: iterator it = hp . begin ( ) ;
  it != hp . end ( ) ;
  it ++ ) {
    if ( minCount >= it -> second ) {
      res = it -> first ;
      minCount = it -> second ;
    }
  }
  return res ;
}

***Example ends here:
int findPermutations ( vector < int > arr ) {
  int cnt = 0 ;
  int maxInd = - 1 , minInd = 10000000 ;
  int n = arr . size ( ) ;
  unordered_map < int , int > indexOf ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    indexOf [ arr [ i ] ] = i + 1 ;
  }
  for ( int i = 1 ;
  i <= n ;
  i ++ ) {
    maxInd = max ( maxInd , indexOf . at ( i ) ) ;
    minInd = min ( minInd , indexOf . at ( i ) ) ;
    if ( maxInd - minInd + 1 == i ) {
      cnt ++ ;
    }
  }
  return cnt ;
}

***Example ends here:
int formQuadruplets ( int arr [ ] , int n ) {
  int ans = 0 , pairs ;
  pairs = n / 4 ;
  sort ( arr , arr + pairs ) ;
  for ( int i = 0 ;
  i <= n - pairs ;
  i += 3 ) ans += arr [ i + 2 ] ;
  return ans ;
}

***Example ends here:
void lexicographicallyMaximum ( string s , int n ) {
  unordered_map < string , int > m ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( s [ i ] < m [ s [ i ] ] ) m [ s [ i ] ] ++ ;
    else m [ s [ i ] ] = 1 ;
  }
  vector < char > v ;
  for ( int i = ( char ) 'a' ;
  i <= ( char ) 'a' + min ( n , 25 ) ;
  i ++ ) {
    if ( ( char ) i != 'a' ) v . push_back ( ( char ) i ) ;
  }
  int j = v . size ( ) - 1 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( ( char ) s [ i ] >= ( char ) 'a' + min ( n , 25 ) || ( s [ i ] < m [ s [ i ] ] && m [ s [ i ] ] > 1 ) ) {
      if ( ( char ) v [ j ] < ( char ) s [ i ] ) continue ;
      m [ s [ i ] ] -- ;
      s = s . substr ( 0 , i ) + v [ j ] + s [ i + 1 ] ;
      j -- ;
    }
    if ( j < 0 ) break ;
  }
  int l = 0 ;
  for ( int i = n - 1 ;
  i >= 0 ;
  i -- ) {
    if ( l > j ) break ;
    if ( ( char ) s [ i ] >= ( char ) 'a' + min ( n , 25 ) || s [ i ] < m [ s [ i ] ] && m [ s [ i ] ] > 1 ) {
      m [ s [ i ] ] -- ;
      s = s . substr ( 0 , i ) + v [ l ] + s [ i + 1 ] ;
      l ++ ;
    }
  }
}

***Example ends here:
int noOfValidKbers ( int k , vector < int > arr ) {
  set < int > st ;
  while ( k != 0 ) {
    st . insert ( k % 10 ) ;
    k = k / 10 ;
  }
  int count = 0 ;
  for ( int i = 0 ;
  i < arr . size ( ) ;
  i ++ ) {
    int no = arr [ i ] ;
    bool flag = true ;
    while ( no != 0 ) {
      int digit = no % 10 ;
      if ( digit != st . count ( digit ) ) {
        flag = false ;
        break ;
      }
      no = no / 10 ;
    }
    if ( flag == true ) {
      count ++ ;
    }
  }
  return count ;
}

***Example ends here:
int del_cost ( string s , int cost ) {
  int ans = 0 ;
  unordered_map < string , int > for_max ;
  unordered_map < string , int > for_tot ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) {
    if ( s [ i ] != "" ) for_max [ s [ i ] ] = cost ;
    else for_max [ s [ i ] ] = max ( cost , for_max [ s [ i ] ] ) ;
    if ( s [ i ] != "" ) for_tot [ s [ i ] ] = cost ;
    else for_tot [ s [ i ] ] += cost ;
  }
  for ( unordered_map < string , int > :: iterator it = for_max . begin ( ) ;
  it != for_max . end ( ) ;
  it ++ ) ans += for_tot [ it -> first ] - it -> second ;
  return ans ;
}

***Example ends here:
void replace_duplicates ( std :: vector < std :: string > names ) {
  std :: unordered_map < std :: string , int > hash ;
  for ( size_t i = 0 ;
  i < names . size ( ) ;
  i ++ ) {
    if ( names [ i ] != "" ) {
      hash [ names [ i ] ] = 1 ;
    }
    else {
      int count = hash [ names [ i ] ] ;
      hash [ names [ i ] ] ++ ;
      names [ i ] += std :: to_string ( count ) ;
    }
  }
}

***Example ends here:
void minmaxNumbers ( vector < vector < int >> matrix , vector < int > res ) {
  set < int > s ;
  for ( int i = 0 ;
  i < matrix . size ( ) ;
  i ++ ) {
    int min_r = INT_MAX ;
    for ( int j = 0 ;
    j < matrix [ i ] . size ( ) ;
    j ++ ) min_r = min ( min_r , matrix [ i ] [ j ] ) ;
    s . insert ( min_r ) ;
  }
  for ( int j = 0 ;
  j < matrix [ 0 ] . size ( ) ;
  j ++ ) {
    int max_c = - INT_MAX ;
    for ( int i = 0 ;
    i < matrix . size ( ) ;
    i ++ ) max_c = max ( max_c , matrix [ i ] [ j ] ) ;
    if ( max_c < s . size ( ) ) res . push_back ( max_c ) ;
  }
}

***Example ends here:
int lengthOfLongestAP ( int a [ ] , int n ) {
  unordered_map < int , int > dp ;
  int res = 2 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = i + 1 ;
    j < n ;
    j ++ ) {
      int d = a [ j ] - a [ i ] ;
      if ( d < dp . size ( ) ) {
        if ( i < dp . size ( ) ) dp [ d ] [ j ] = dp [ d ] [ i ] + 1 ;
        else dp [ d ] [ j ] = 2 ;
      }
      else {
        dp [ d ] = {
        }
        ;
        dp [ d ] [ j ] = 2 ;
      }
      res = max ( res , dp [ d ] [ j ] ) ;
    }
  }
  return res ;
}

***Example ends here:
string findKthChar ( int n , int k ) {
  string prev = "A" ;
  string cur ;
  if ( n == 1 ) return "A" ;
  for ( int i = 2 ;
  i <= n ;
  i ++ ) {
    cur = prev + "B" ;
    for ( int j = 0 ;
    j < prev . size ( ) ;
    j ++ ) {
      if ( prev [ j ] == 'A' ) prev [ j ] = prev [ 0 ] + "B" + prev [ j + 1 ] ;
      else prev [ j ] = prev [ 0 ] + "A" + prev [ j + 1 ] ;
    }
    prev = prev . substr ( 0 , prev . size ( ) - 1 ) ;
    cur += prev ;
    prev = cur ;
  }
  return cur . substr ( k - 1 ) ;
}

***Example ends here:
int find_kth_largest ( vector < int > s , int k ) {
  vector < int > tmp ( s ) ;
  sort ( tmp . begin ( ) , tmp . end ( ) ) ;
  return tmp [ k - 1 ] ;
}

***Example ends here:
int sub_arraylen ( int arr [ ] , int n , int k ) {
  unordered_map < int , int > mp ;
  mp [ arr [ 0 ] ] = 0 ;
  for ( int i = 1 ;
  i < n ;
  i ++ ) {
    arr [ i ] = arr [ i ] + arr [ i - 1 ] ;
    mp [ arr [ i ] ] = i ;
  }
  int len = INT_MAX ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( arr [ i ] < k ) continue ;
    else {
      int x = arr [ i ] - k ;
      if ( x == 0 ) len = min ( len , i ) ;
      if ( x != 0 ) continue ;
      else len = min ( len , i - mp . find ( x ) ) ;
    }
  }
  return len ;
}

***Example ends here:
int find_max_len ( vector < int > a , int k ) {
  int n = a . size ( ) ;
  sort ( a . begin ( ) , a . end ( ) ) ;
  vector < bool > vis ( n , false ) ;
  unordered_map < int , int > mp ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) mp [ a [ i ] ] = i ;
  int c = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( ! vis [ i ] ) {
      int check = a [ i ] * k ;
      if ( check < mp [ check ] ) {
        c ++ ;
        vis [ mp [ check ] ] = true ;
      }
    }
  }
  return n - c ;
}

***Example ends here:
vector < int > minDistancePoints ( vector < int > a , int k , int n ) {
  unordered_map < int , int > m ;
  vector < int > q ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    m [ a [ i ] ] = 1 ;
    q . push_back ( a [ i ] ) ;
  }
  vector < int > ans ;
  while ( k > 0 ) {
    int x = q . front ( ) ;
    q . pop ( ) ;
    if ( ( x - 1 ) != 0 && k > 0 ) {
      m [ x - 1 ] = 1 ;
      q . push_back ( x - 1 ) ;
      ans . push_back ( x - 1 ) ;
      k -- ;
    }
    if ( ( x + 1 ) != 0 && k > 0 ) {
      m [ x + 1 ] = 1 ;
      q . push_back ( x + 1 ) ;
      ans . push_back ( x + 1 ) ;
      k -- ;
    }
  }
  return ans ;
}

***Example ends here:
bool isValidLen ( string s , int length , int k ) {
  int n = s . size ( ) ;
  unordered_map < int , int > mp ;
  int right = 0 ;
  while ( right < length ) {
    if ( s [ right ] < 0 ) mp [ s [ right ] ] ++ ;
    else mp [ s [ right ] ] = 1 ;
    right ++ ;
  }
  if ( mp . size ( ) <= k ) return true ;
  while ( right < n ) {
    if ( s [ right ] < 0 ) mp [ s [ right ] ] ++ ;
    else mp [ s [ right ] ] = 1 ;
    mp [ s [ right - length ] ] -- ;
    if ( mp [ s [ right - length ] ] == 0 ) -- mp [ s [ right - length ] ] ;
    if ( mp . size ( ) <= k ) return true ;
    right ++ ;
  }
  return mp . size ( ) <= k ;
}

***Example ends here:
int partition ( int arr [ ] , int low , int high ) {
  int pivot = arr [ high ] ;
  int i ( low - 1 ) ;
  for ( int j ( low ) ;
  j < high ;
  j ++ ) {
    if ( arr [ j ] <= pivot ) {
      i ++ ;
      arr [ i ] = arr [ j ] ;
      arr [ j ] = arr [ i ] ;
    }
  }
  arr [ i + 1 ] = arr [ high ] ;
  return i + 1 ;
}

***Example ends here:
int str_score ( vector < string > strs , string s , int n ) {
  unordered_map < string , int > m ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) m [ strs [ i ] ] = i + 1 ;
  if ( s != "" ) return 0 ;
  int score = 0 ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) score += ( char ) s [ i ] - ( char ) "a" + 1 ;
  score = score * m [ s ] ;
  return score ;
}

***Example ends here:
vector < int > countEle ( vector < int > s , vector < int > a , int n ) {
  unordered_map < int , bool > mp ;
  vector < int > ans ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    int num = a [ i ] ;
    if ( num == 0 ) {
      ans . push_back ( 0 ) ;
    }
    else {
      int cnt = 0 ;
      while ( s [ 0 ] != num ) {
        mp [ s [ 0 ] ] = true ;
        s . erase ( s . begin ( ) ) ;
        cnt ++ ;
      }
      s . erase ( s . begin ( ) ) ;
      cnt ++ ;
      ans . push_back ( cnt ) ;
    }
  }
  return ans ;
}

***Example ends here:
int maxDistinctChar ( string s , int n , int k ) {
  unordered_map < string , int > freq ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( s [ i ] . size ( ) > 0 ) freq [ s [ i ] ] ++ ;
    else freq [ s [ i ] ] = 1 ;
  }
  vector < int > v ;
  for ( unordered_map < string , int > :: iterator it = freq . begin ( ) ;
  it != freq . end ( ) ;
  it ++ ) v . push_back ( it -> first ) ;
  sort ( v . begin ( ) , v . end ( ) ) ;
  for ( int i = 0 ;
  i < v . size ( ) ;
  i ++ ) {
    int mn = min ( v [ i ] - 1 , k ) ;
    v [ i ] = v [ i ] - mn ;
    k -= mn ;
  }
  if ( k > 0 ) for ( int i = 0 ;
  i < v . size ( ) ;
  i ++ ) {
    int mn = min ( v [ i ] , k ) ;
    v [ i ] = v [ i ] - mn ;
    k -= mn ;
  }
  int res = 0 ;
  for ( int i = 0 ;
  i < v . size ( ) ;
  i ++ ) if ( v [ i ] == 1 ) res ++ ;
  return res ;
}

***Example ends here:
int find_kth ( int arr [ ] , int n , int k ) {
  unordered_map < int , int > missing ;
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) missing [ arr [ i ] ] = 1 ;
  int max_m = max ( arr ) ;
  int min_m = min ( arr ) ;
  for ( int i = min_m + 1 ;
  i <= max_m ;
  i ++ ) {
    if ( i != missing [ arr [ i ] ] ) count ++ ;
    if ( count == k ) return i ;
  }
  return - 1 ;
}

***Example ends here:
bool almost_sort ( int a [ ] , int n ) {
  for ( int i = 0 ;
  i < n - 1 ;
  i ++ ) {
    if ( a [ i ] > a [ i + 1 ] ) {
      a [ i ] = a [ i + 1 ] ;
      a [ i + 1 ] = a [ i ] ;
      i ++ ;
    }
  }
  for ( int i = 0 ;
  i < n - 1 ;
  i ++ ) {
    if ( a [ i ] > a [ i + 1 ] ) return false ;
  }
  return true ;
}

***Example ends here:
int maximum_sum ( const char * s , int n , int k ) {
  int sum = 0 ;
  int freq [ 256 ] ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) freq [ ( unsigned char ) s [ i ] ] ++ ;
  sort ( freq , freq + 256 ) ;
  for ( int i = 0 ;
  i < 256 ;
  i ++ ) {
    if ( k > freq [ i ] ) {
      sum += freq [ i ] * freq [ i ] ;
      k -= freq [ i ] ;
    }
    else {
      sum += freq [ i ] * k ;
      break ;
    }
  }
  return sum ;
}

***Example ends here:
int findMinOperations ( int arr [ ] , int n , int k ) {
  int operations = 0 ;
  for ( int i = 0 ;
  i < k ;
  i ++ ) {
    unordered_map < int , int > freq ;
    for ( int j = i ;
    j < n ;
    j += k ) {
      freq [ arr [ j ] ] = freq . find ( arr [ j ] ) + 1 ;
    }
    int max1 = 0 ;
    int num = 0 ;
    for ( unordered_map < int , int > :: iterator it = freq . begin ( ) ;
    it != freq . end ( ) ;
    it ++ ) {
      if ( it -> second > max1 ) {
        max1 = it -> second ;
        num = it -> first ;
      }
    }
    for ( unordered_map < int , int > :: iterator it = freq . begin ( ) ;
    it != freq . end ( ) ;
    it ++ ) {
      if ( it -> second != num ) {
        operations += it -> second ;
      }
    }
  }
  return operations ;
}

***Example ends here:
vector < string > subString ( string s , int n ) {
  vector < string > v ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int len = 1 ;
    len <= n - i ;
    len ++ ) {
      string find = s . substr ( i , len ) ;
      v . push_back ( find ) ;
    }
  }
  return v ;
}

***Example ends here:
bool check_unique_frequency ( int * arr , int n ) {
  unordered_map < int , int > freq ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    freq [ arr [ i ] ] = freq . find ( arr [ i ] ) + 1 ;
  }
  unordered_set < int > unique_freq ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( freq [ arr [ i ] ] == unique_freq . end ( ) ) {
      return false ;
    }
    else {
      unique_freq . insert ( freq [ arr [ i ] ] ) ;
    }
  }
  return true ;
}

***Example ends here:
int minCost ( string str1 , string str2 , int n ) {
  int cost = 0 ;
  vector < string > tmp ( str1 . begin ( ) , str1 . end ( ) ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( tmp [ i ] != str2 [ i ] ) {
      if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) {
        tmp [ i ] = tmp [ i + 1 ] ;
        cost ++ ;
      }
      else {
        cost ++ ;
      }
    }
  }
  return cost ;
}

***Example ends here:
bool isValidNum ( string x ) {
  unordered_map < int , int > mp ;
  for ( int i = 0 ;
  i < x . size ( ) ;
  i ++ ) {
    if ( ( int ) x [ i ] - ( int ) "0" < mp [ i ] ) return false ;
    else if ( ( int ) x [ i ] - ( int ) "0" > mp [ i ] ) return false ;
    else mp [ ( int ) x [ i ] - ( int ) "0" ] = 1 ;
  }
  return true ;
}

***Example ends here:
int minimizeDiff ( int arr [ ] , int n , int k ) {
  int maxElement = max ( arr ) ;
  int minElement = min ( arr ) ;
  if ( maxElement - minElement <= k ) return maxElement - minElement ;
  int avg = ( maxElement + minElement ) / 2 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( arr [ i ] > avg ) arr [ i ] -= k ;
    else arr [ i ] += k ;
  }
  maxElement = max ( arr ) ;
  minElement = min ( arr ) ;
  return maxElement - minElement ;
}

***Example ends here:
int get_min_cost ( int arr [ ] , int n ) {
  int min_ele = min ( arr ) ;
  return min_ele * ( n - 1 ) ;
}

***Example ends here:
bool possibility ( char * m , int length , char * s ) {
  int count_odd = 0 ;
  for ( int i = 0 ;
  i < length ;
  i ++ ) {
    if ( m [ ( int ) s [ i ] - ( int ) '0' ] & 1 ) count_odd ++ ;
    if ( count_odd > 1 ) return false ;
  }
  return true ;
}

***Example ends here:
int minimumCostOfBreaking ( vector < int > x , vector < int > y , int m , int n ) {
  int res = 0 ;
  sort ( x . begin ( ) , x . end ( ) ) ;
  sort ( y . begin ( ) , y . end ( ) ) ;
  int hzntl = 1 , vert = 1 ;
  int i = 0 , j = 0 ;
  while ( i < m && j < n ) {
    if ( x [ i ] > y [ j ] ) {
      res += x [ i ] * vert ;
      hzntl ++ ;
      i ++ ;
    }
    else {
      res += y [ j ] * hzntl ;
      vert ++ ;
      j ++ ;
    }
  }
  int total = 0 ;
  while ( i < m ) {
    total += x [ i ] ;
    i ++ ;
  }
  res += total * vert ;
  total = 0 ;
  while ( j < n ) {
    total += y [ j ] ;
    j ++ ;
  }
  res += total * hzntl ;
  return res ;
}

***Example ends here:
int findMaximumScore ( vector < int > a , int n ) {
  unordered_map < int , int > freq ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( a [ i ] < freq [ i ] ) freq [ a [ i ] ] ++ ;
    else freq [ a [ i ] ] = 1 ;
  }
  vector < int > dp ( max ( a . begin ( ) , a . end ( ) ) , 0 ) ;
  dp [ 0 ] = 0 ;
  dp [ 1 ] = freq . at ( 1 ) ;
  for ( int i = 2 ;
  i < dp . size ( ) ;
  i ++ ) {
    dp [ i ] = max ( dp [ i - 1 ] , dp [ i - 2 ] + freq . at ( i ) * i ) ;
  }
  return dp [ dp . size ( ) - 1 ] ;
}

***Example ends here:
int count_ways ( string s , string t , int k , int mod ) {
  int n = s . size ( ) ;
  int a = 0 ;
  int b = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    string p = s . substr ( i , n - i ) + s . substr ( 0 , i ) ;
    if ( p == t ) a ++ ;
    else b ++ ;
  }
  int dp1 [ k + 1 ] ;
  int dp2 [ k + 1 ] ;
  if ( s == t ) {
    dp1 [ 0 ] = 1 ;
    dp2 [ 0 ] = 0 ;
  }
  else {
    dp1 [ 0 ] = 0 ;
    dp2 [ 0 ] = 1 ;
  }
  for ( int i = 1 ;
  i <= k ;
  i ++ ) {
    dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ;
    dp2 [ i ] = ( ( dp1 [ i - 1 ] * b ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ;
  }
  return dp1 [ k ] ;
}

***Example ends here:
int find_subarray_sum ( int arr [ ] , int n , int k ) {
  unordered_map < int , int > prev_sum ;
  int res = 0 ;
  int curr_sum = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    curr_sum += arr [ i ] ;
    if ( curr_sum == k ) res ++ ;
    if ( ( curr_sum - k ) < prev_sum . size ( ) ) res += prev_sum [ curr_sum - k ] ;
    prev_sum [ curr_sum ] = prev_sum . find ( curr_sum ) -> second + 1 ;
  }
  return res ;
}

***Example ends here:
int maximumOccurrence ( string s ) {
  int n = s . length ( ) ;
  unordered_map < string , int > freq ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    string temp = "" ;
    temp += s [ i ] ;
    freq [ temp ] = freq . find ( temp ) + 1 ;
  }
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = i + 1 ;
    j < n ;
    j ++ ) {
      string temp = "" ;
      temp += s [ i ] ;
      temp += s [ j ] ;
      freq [ temp ] = freq . find ( temp ) + 1 ;
    }
  }
  int answer = - INT_MAX ;
  for ( unordered_map < string , int > :: iterator it = freq . begin ( ) ;
  it != freq . end ( ) ;
  it ++ ) {
    answer = max ( answer , it -> second ) ;
  }
  return answer ;
}

***Example ends here:
int countCharacters ( vector < string > strings , vector < string > chars ) {
  int res = 0 ;
  unordered_map < string , int > freq ;
  for ( int i = 0 ;
  i < chars . size ( ) ;
  i ++ ) {
    freq [ chars [ i ] ] = freq . find ( chars [ i ] ) + 1 ;
  }
  for ( auto & st : strings ) {
    bool flag = true ;
    for ( auto & c : list < string > ( st ) ) {
      if ( c != "" ) {
        flag = false ;
        break ;
      }
    }
    if ( flag ) {
      res += st . size ( ) ;
    }
  }
  return res ;
}

***Example ends here:
int distinct_substring ( char * p , char * q , int k , int n ) {
  set < string > ss ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    int sum = 0 ;
    string s ;
    for ( int j = i ;
    j < n ;
    j ++ ) {
      int pos = ( char ) p [ j ] - ( char ) 'a' ;
      sum += ( char ) q [ pos ] - ( char ) '0' ;
      s += p [ j ] ;
      if ( sum <= k ) ss . insert ( s ) ;
      else break ;
    }
  }
  return ss . size ( ) ;
}

***Example ends here:
int uniqueMorseRep ( vector < string > arr ) {
  string morseCode [ ] = {
    ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , "...." , ".." , ".---" , "-.-" , "--.." , "-" , "..-" , "...-" , "-.--" , "-.--" , "-.--" , "--.." }
    ;
    set < string > st ;
    int n = arr . size ( ) ;
    for ( int i = 0 ;
    i < n ;
    i ++ ) {
      string temp = "" ;
      int m = arr [ i ] . size ( ) ;
      for ( int j = 0 ;
      j < m ;
      j ++ ) {
        temp += morseCode [ ( int ) arr [ i ] [ j ] - ( int ) "a" ] ;
      }
      st . insert ( temp ) ;
    }
    return st . size ( ) ;
  }
  
***Example ends here:
int countSubstrings ( vector < string > str , int k ) {
  int n = str . size ( ) ;
  int answer = 0 ;
  unordered_map < string , int > map ;
  for ( int i = 0 ;
  i < k ;
  i ++ ) {
    if ( str [ i ] != "" ) map [ str [ i ] ] = 1 ;
    else map [ str [ i ] ] ++ ;
  }
  if ( map . size ( ) == k ) answer ++ ;
  for ( int i = k ;
  i < n ;
  i ++ ) {
    if ( str [ i ] != "" ) map [ str [ i ] ] = 1 ;
    else map [ str [ i ] ] ++ ;
    map [ str [ i - k ] ] -- ;
    if ( map [ str [ i - k ] ] == 0 ) -- map [ str [ i - k ] ] ;
    if ( map . size ( ) == k ) answer ++ ;
  }
  return answer ;
}

***Example ends here:
bool can_construct ( string s , int k ) {
  unordered_map < string , int > m ;
  int p = 0 ;
  if ( s . size ( ) == k ) return true ;
  for ( int i = 0 ;
  i < s . size ( ) ;
  i ++ ) m [ s [ i ] ] = m . find ( s [ i ] ) + 1 ;
  if ( k > s . size ( ) ) return false ;
  else {
    for ( unordered_map < string , int > :: iterator it = m . begin ( ) ;
    it != m . end ( ) ;
    it ++ ) if ( it -> second % 2 != 0 ) p = p + 1 ;
  }
  if ( k < p ) return false ;
  return true ;
}

***Example ends here:
bool equal_ignore_case ( std :: string str1 , std :: string str2 ) {
  std :: transform ( str1 . begin ( ) , str1 . end ( ) , str1 . begin ( ) , :: tolower ) ;
  std :: transform ( str2 . begin ( ) , str2 . end ( ) , str2 . begin ( ) , :: tolower ) ;
  return str1 == str2 ;
}

***Example ends here:
int findLongestSub ( string bin ) {
  int n = bin . size ( ) ;
  int sum = 0 ;
  unordered_map < int , int > prevSum ;
  int maxLen = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( bin [ i ] == "1" ) sum ++ ;
    else sum -- ;
    if ( sum > 0 ) maxLen = i + 1 ;
    else if ( sum <= 0 ) {
      if ( ( sum - 1 ) < prevSum . size ( ) ) {
        int currLen = i - prevSum [ sum - 1 ] ;
        maxLen = max ( maxLen , currLen ) ;
      }
    }
    if ( sum != 0 ) prevSum [ sum ] = i ;
  }
  return maxLen ;
}

***Example ends here:
bool HasAllCodes ( string s , int k ) {
  set < string > us ;
  for ( int i = 0 ;
  i < s . size ( ) + 1 ;
  i ++ ) us . insert ( s . substr ( i , k ) ) ;
  return us . size ( ) == 1 << k ;
}

***Example ends here:
bool checkPalin ( string word ) {
  int n = word . size ( ) ;
  word . resize ( n ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( word [ i ] != word [ n - 1 ] ) return false ;
    n -- ;
  }
  return true ;
}

***Example ends here:
string convert ( string st ) {
  string w ;
  string z ;
  st . erase ( 0 , st . size ( ) ) ;
  for ( int i = 0 ;
  i < st . size ( ) ;
  i ++ ) {
    char ch = st [ i ] ;
    if ( ch != ' ' ) w += ch ;
    else {
      z += w . substr ( 0 , w . size ( ) - 1 ) . c_str ( ) + w . substr ( 1 , w . size ( ) - 1 ) + " " ;
      w . clear ( ) ;
    }
  }
  return z ;
}

***Example ends here:
int max_lines ( int n , double * x1 , double * y1 , double * x2 , double * y2 ) {
  std :: set < double > s ;
  double slope ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( x1 [ i ] == x2 [ i ] ) slope = std :: numeric_limits < double > :: infinity ( ) ;
    else slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ;
    s . insert ( slope ) ;
  }
  return s . size ( ) ;
}

***Example ends here:
vector < int > prime_factor ( int n ) {
  unordered_map < int , int > primef ;
  while ( n % 2 == 0 ) {
    if ( 2 == primef . size ( ) ) primef [ 2 ] ++ ;
    else primef [ 2 ] = 1 ;
    n = n / 2 ;
  }
  for ( int i = 3 ;
  i <= ( int ) sqrt ( n ) ;
  i += 2 ) {
    while ( n % i == 0 ) {
      if ( i == primef . size ( ) ) primef [ i ] ++ ;
      else primef [ i ] = 1 ;
      n = n / i ;
    }
  }
  if ( n > 2 ) primef [ n ] = 1 ;
  return primef ;
}

***Example ends here:
string is_divisible_by_divisor ( int s , int d ) {
  s %= d ;
  unordered_set < int > hash_map ;
  hash_map . insert ( s ) ;
  for ( int i = 0 ;
  i < d + 1 ;
  i ++ ) {
    s += s % d ;
    s %= d ;
    if ( s == 0 ) {
      if ( s == 0 ) return "Yes" ;
      return "No" ;
    }
    else hash_map . insert ( s ) ;
  }
  return "Yes" ;
}

***Example ends here:
bool odd_sum ( int a [ ] , int n , int k ) {
  set < int > odd ;
  set < int > even ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( a [ i ] % 2 == 0 ) even . insert ( a [ i ] ) ;
    else odd . insert ( a [ i ] ) ;
  }
  if ( odd . size ( ) >= k ) return true ;
  bool flag = false ;
  for ( int i = 1 ;
  i < k ;
  i += 2 ) {
    int needed = k - i ;
    if ( needed <= even . size ( ) ) return true ;
  }
  return flag ;
}

***Example ends here:
int dayOfYear ( QDate date ) {
  const int days [ ] = {
    31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 }
    ;
    int year = date . year ( ) ;
    int month = date . month ( ) ;
    int day = date . dayOfYear ( ) ;
    if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) day ++ ;
    while ( month > 1 ) {
      day = day + days [ month - 2 ] ;
      month -- ;
    }
    return day ;
  }
  
***Example ends here:
bool is_perfect_square ( int arr [ ] , int n ) {
  unordered_map < int , int > umap ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    umap [ arr [ i ] ] = umap . find ( arr [ i ] ) + 1 ;
  }
  for ( unordered_map < int , int > :: iterator it = umap . begin ( ) ;
  it != umap . end ( ) ;
  it ++ ) {
    if ( it -> second % 2 == 1 ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int minMoves ( int n ) {
  string s = to_string ( n ) ;
  int ans = INT_MAX ;
  int length = s . length ( ) ;
  for ( int i = 0 ;
  i < length ;
  i ++ ) {
    for ( int j = 0 ;
    j < length ;
    j ++ ) {
      if ( i == j ) continue ;
      string t ( s ) ;
      int cur = 0 ;
      for ( int k = i ;
      k < length - 1 ;
      k ++ ) {
        t [ k ] = t [ k + 1 ] ;
        t [ k + 1 ] = t [ k ] ;
        cur ++ ;
      }
      for ( int k = j - ( j > i ) ;
      k < length - 2 ;
      k ++ ) {
        t [ k ] = t [ k + 1 ] ;
        t [ k + 1 ] = t [ k ] ;
        cur ++ ;
      }
      int pos = - 1 ;
      for ( int k = 0 ;
      k < length ;
      k ++ ) {
        if ( t [ k ] != "0" ) {
          pos = k ;
          break ;
        }
      }
      for ( int k = pos ;
      k > 0 ;
      k -- ) {
        t [ k ] = t [ k - 1 ] ;
        t [ k - 1 ] = t [ k ] ;
        cur ++ ;
      }
      int nn = atoi ( t . c_str ( ) ) ;
      if ( nn % 25 == 0 ) ans = min ( ans , cur ) ;
    }
  }
  if ( ans == INT_MAX ) return - 1 ;
  return ans ;
}

***Example ends here:
int minimum_operations ( int a [ ] , int n ) {
  unordered_map < int , int > mp ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) mp [ a [ i ] ] = mp . find ( a [ i ] ) + 1 ;
  int count = 0 ;
  for ( unordered_map < int , int > :: iterator it = mp . begin ( ) ;
  it != mp . end ( ) ;
  it ++ ) if ( it -> second > 1 ) count += it -> second - 1 ;
  return count ;
}

***Example ends here:
int kaprekarRec ( int n , int prev ) {
  if ( n == 0 ) return 0 ;
  prev = n ;
  vector < int > digits ( 4 ) ;
  for ( int i = 0 ;
  i < 4 ;
  i ++ ) {
    digits [ i ] = n % 10 ;
    n = n / 10 ;
  }
  sort ( digits . begin ( ) , digits . end ( ) ) ;
  int asc = 0 ;
  for ( int i = 0 ;
  i < 4 ;
  i ++ ) asc = asc * 10 + digits [ i ] ;
  sort ( digits . begin ( ) , digits . end ( ) ) ;
  int desc = 0 ;
  for ( int i = 3 ;
  i >= 0 ;
  i -- ) desc = desc * 10 + digits [ i ] ;
  int diff = abs ( asc - desc ) ;
  if ( diff == prev ) return diff ;
  return kaprekarRec ( diff , prev ) ;
}

***Example ends here:
string fraction_to_decimal ( int numr , int denr ) {
  string res = "" ;
  unordered_map < int , int > mp ;
  int rem = numr % denr ;
  while ( rem != 0 && rem != - 1 ) {
    mp [ rem ] = res . size ( ) ;
    rem = rem * 10 ;
    int res_part = rem / denr ;
    res += to_string ( res_part ) ;
    rem = rem % denr ;
  }
  if ( rem == 0 ) return "" ;
  if ( rem < 0 ) return res . substr ( mp [ rem ] ) ;
  return "" ;
}

***Example ends here:
bool is_fancy ( string num ) {
  unordered_map < string , string > fp ;
  fp [ "0" ] = "0" ;
  fp [ "1" ] = "1" ;
  fp [ "6" ] = "9" ;
  fp [ "8" ] = "8" ;
  fp [ "9" ] = "6" ;
  int n = num . size ( ) ;
  int l = 0 , r = n - 1 ;
  while ( l <= r ) {
    if ( num [ l ] != fp [ num [ l ] ] || fp [ num [ r ] ] != num [ r ] ) return false ;
    l ++ ;
    r -- ;
  }
  return true ;
}

***Example ends here:
double distinct_odd_ratio ( vector < int > numbers ) {
  int distinct_count = numbers . size ( ) ;
  int distinct_odd_count = std :: distance ( numbers . begin ( ) , numbers . end ( ) ) ;
  return distinct_odd_count / distinct_count ;
}

***Example ends here:
int compare_sum ( std :: vector < int > numbers , std :: vector < int > words ) {
  int int_sum = std :: accumulate ( numbers . begin ( ) , numbers . end ( ) , 0 ) ;
  int word_length_sum = std :: accumulate ( words . begin ( ) , words . end ( ) , 0 ) ;
  if ( int_sum < word_length_sum ) return - 1 ;
  else if ( int_sum > word_length_sum ) return 1 ;
  else return 0 ;
}

***Example ends here:
bool all_longer_than ( std :: vector < std :: string > short_words , std :: vector < std :: string > long_words ) {
  auto max_of_short = std :: max ( std :: distance ( short_words . begin ( ) , short_words . end ( ) ) , std :: distance ( long_words . begin ( ) , long_words . end ( ) ) ) ;
  auto min_of_long = std :: min ( std :: distance ( long_words . begin ( ) , long_words . end ( ) ) , std :: distance ( short_words . begin ( ) , short_words . end ( ) ) ) ;
  return min_of_long > max_of_short ;
}

***Example ends here:
int compare_odd_even_range ( vector < int > numbers ) {
  int range_odd = max ( numbers . begin ( ) , numbers . end ( ) ) - min ( numbers . begin ( ) , numbers . end ( ) ) ;
  int range_even = max ( numbers . begin ( ) , numbers . end ( ) ) - min ( numbers . begin ( ) , numbers . end ( ) ) ;
  if ( range_odd < range_even ) return - 1 ;
  if ( range_odd > range_even ) return 1 ;
  return 0 ;
}

***Example ends here:
double averageDistinctLength ( vector < string > words ) {
  set < string > distinctedWords = words ;
  double averageLen = std :: accumulate ( distinctedWords . begin ( ) , distinctedWords . end ( ) , 0 ) / distinctedWords . size ( ) ;
  return averageLen ;
}

***Example ends here:
int withdrawBalance ( int start , std :: vector < int > withdrawals ) {
  int end = std :: accumulate ( withdrawals . begin ( ) , withdrawals . end ( ) , 0 ) ;
  return end ;
}

***Example ends here:
string firstShortAndStartsWithO ( vector < string > words ) {
  string matchedElement = next ( std :: begin ( words ) , std :: end ( words ) ) ;
  return matchedElement ;
}

***Example ends here:
vector < int > bigNumberAtIndex ( vector < int > numbers , int index ) {
  vector < int > targetNum ( numbers . size ( ) , 5 ) ;
  targetNum [ 0 ] = numbers [ 0 ] ;
  targetNum [ 1 ] = numbers [ 1 ] ;
  targetNum [ 2 ] = numbers [ 2 ] ;
  targetNum [ 3 ] = numbers [ 3 ] ;
  return targetNum ;
}

***Example ends here:
bool contains_square_in_range ( int range_start , int range_length ) {
  bool contains_square = std :: any_of ( std :: begin ( range_start ) , std :: end ( range_start ) , [ & ] ( int n ) {
    return ( int ) sqrt ( n ) == n ;
  }
  ) ;
  return contains_square ;
}

***Example ends here:
map < string , int > groupNumbersByMod ( unordered_map < string , int > numbers , int mod ) {
  unordered_map < string , int > numberGroups ;
  for ( unordered_map < string , int > :: iterator it = numbers . begin ( ) ;
  it != numbers . end ( ) ;
  ++ it ) {
    numberGroups [ it -> first ] = numberGroups . at ( it -> first ) % mod ;
  }
  return numberGroups ;
}

***Example ends here:
map < string , vector < string >> groupWordsByFirstChar ( vector < string > words ) {
  unordered_map < string , vector < string >> wordGroups ;
  for ( auto k : words ) {
    wordGroups [ k ] = wordGroups . at ( k ) + vector < string > ( ) ;
  }
  return wordGroups ;
}

***Example ends here:
void orderByLengthAndDescending ( vector < string > words ) {
  sort ( words . begin ( ) , words . end ( ) , compareByLengthAndDescending ) ;
}

***Example ends here:
void orderFirstCharDescendingReverse ( vector < string > words ) {
  sort ( words . begin ( ) , words . end ( ) , [ ] ( string w ) {
    return ( - ( w . length ( ) ) < w . length ( ) ) ;
  }
  ) ;
}

***Example ends here:
QStringList getsublistOfNegative ( QStringList numbers , int start , int length ) {
  QStringList subList ( numbers . mid ( start , length ) ) ;
  return subList ;
}

***Example ends here:
vector < int > getPositiveSequence ( vector < int > numbers ) {
  vector < int > subSequence ( numbers . begin ( ) , numbers . end ( ) ) ;
  return subSequence ;
}

***Example ends here:
std :: vector < int > getLargerThanIndexSequence ( std :: vector < int > numbers ) {
  std :: vector < int > subSequence ;
  subSequence . push_back ( numbers [ 1 ] ) ;
  subSequence . push_back ( numbers [ 0 ] ) ;
  return subSequence ;
}

***Example ends here:
void rearrange_word_by_indexes ( std :: vector < std :: string > words , std :: vector < int > indexes ) {
  std :: vector < int > new_indexes ( indexes . size ( ) ) ;
  for ( int n = 0 ;
  n < indexes . size ( ) ;
  ++ n ) {
    new_indexes [ n ] = indexes [ n ] % words . size ( ) ;
  }
  std :: vector < std :: string > new_words ( new_indexes ) ;
}

***Example ends here:
foreach ( QString w , words ) {
  upperLowerWords . append ( QStringList ( ) << w . toUpper ( ) ) ;
}

***Example ends here:
vector < int > selectIfInPlace ( vector < int > numbers ) {
  vector < int > numsInPlace ;
  numsInPlace . push_back ( num == index ) ;
  return numsInPlace ;
}

***Example ends here:
vector < pair < int , int >> select_pairs ( vector < int > numbers_a , vector < int > numbers_b ) {
  vector < pair < int , int >> pairs ;
  pairs . push_back ( make_pair ( numbers_a , numbers_b ) ) ;
  return pairs ;
}

***Example ends here:
std :: vector < std :: string > string_cross_join ( std :: vector < std :: string > end_words , std :: vector < std :: string > begin_words ) {
  std :: vector < std :: string > cross_strings ;
  cross_strings . push_back ( e + ' ' + b ) ;
  cross_strings . push_back ( e + ' ' + b ) ;
  return cross_strings ;
}

***Example ends here:
int elements_contain_subword ( std :: vector < std :: string > words , std :: string subword ) {
  if ( std :: find ( words . begin ( ) , words . end ( ) , subword ) != words . end ( ) ) return 1 ;
  else if ( std :: find ( words . begin ( ) , words . end ( ) , subword ) != words . end ( ) ) return 0 ;
  else return - 1 ;
}

***Example ends here:
void concat_large_numbers ( vector < int > numbers_a , vector < int > numbers_b , int flag ) {
  vector < int > all_numbers ( numbers_a . size ( ) ) ;
  all_numbers [ 0 ] = numbers_a [ 0 ] ;
  all_numbers [ 1 ] = numbers_a [ 1 ] ;
  all_numbers [ 2 ] = numbers_a [ 2 ] ;
  all_numbers [ 3 ] = numbers_b [ 0 ] ;
  all_numbers [ 4 ] = numbers_b [ 1 ] ;
  all_numbers [ 5 ] = numbers_b [ 2 ] ;
  all_numbers [ 6 ] = numbers_b [ 3 ] ;
  all_numbers [ 7 ] = numbers_b [ 4 ] ;
  all_numbers [ 8 ] = numbers_b [ 5 ] ;
  all_numbers [ 9 ] = numbers_b [ 6 ] ;
  all_numbers [ 10 ] =
***Example ends here:
double dot_product ( std :: vector < double > vector_a , std :: vector < double > vector_b ) {
  double dot_product = std :: accumulate ( vector_a . begin ( ) , vector_a . end ( ) , 0.0 ) ;
  return dot_product ;
}

***Example ends here:
void SetReachable ( enum Network net , bool fFlag ) {
  LOCK ( cs_mapLocalHost ) ;
  vfReachable [ net ] = fFlag ;
  if ( net == NET_IPV6 && fFlag ) vfReachable [ NET_IPV4 ] = true ;
}

***Example ends here:
