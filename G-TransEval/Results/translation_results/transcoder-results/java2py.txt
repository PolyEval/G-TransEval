def greatestCommonDivisor ( a , b ) :
    if a == 0 or b == 0 :
        return a + b
    if a == b :
        return a
    if a > b :
        return greatestCommonDivisor ( a % b , b )
    else :
        return greatestCommonDivisor ( a , b % a )

***Example ends here:
def largestDivisor ( n ) :
    for i in range ( 2 , n + 1 ) :
        if n % i == 0 :
            return n // i
    return 1

***Example ends here:
def isPrime ( n ) :
    if n < 2 :
        return False
    for k in range ( 2 , n ) :
        if n % k == 0 :
            return False
    return True

***Example ends here:
def fizz_buzz ( n ) :
    count = 0
    for i in range ( 1 , n ) :
        if i % 11 == 0 or i % 13 == 0 :
            q = i
            while q > 0 :
                if q % 10 == 7 :
                    count += 1
                q //= 10
    return count

***Example ends here:
def primeFib ( n ) :
    f0 = 0
    f1 = 1
    while n > 0 :
        p = f0 + f1
        isPrime = p >= 2
        for i in range ( 2 , p ) :
            if p % i == 0 :
                isPrime = False
                break
        if isPrime :
            n -= 1
        f0 = f1
        f1 = p
    return f1

***Example ends here:
def triangleArea ( a , h ) :
    return a * h / 2

***Example ends here:
def modP ( n , p ) :
    ret = 1
    for i in range ( n ) :
        ret = ( ret * 2 ) % p
    return ret

***Example ends here:
def add ( x , y ) :
    return x + y

***Example ends here:
def fib ( n ) :
    if n == 0 :
        return 0
    if n == 1 :
        return 1
    return fib ( n - 1 ) + fib ( n - 2 )

***Example ends here:
def largestPrimeFactor ( n ) :
    for i in range ( 2 , n ) :
        while n % i == 0 and n > i :
            n /= i
    return n

***Example ends here:
def sum_to_n ( n ) :
    result = 0
    for i in range ( 1 , n + 1 ) :
        result += i
    return result

***Example ends here:
def fibfib ( n ) :
    if n == 0 :
        return 0
    if n == 1 :
        return 0
    if n == 2 :
        return 1
    return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 )

***Example ends here:
def isMultiplyPrime ( a ) :
    num = 0
    for i in range ( 2 , a + 1 ) :
        while a % i == 0 and a >= i :
            a //= i
            num += 1
    return num == 3

***Example ends here:
def is_simple_power ( x , n ) :
    if n == 1 :
        return x == 1
    power = 1
    while power < x :
        power *= n
    return power == x

***Example ends here:
def chooseNum ( x , y ) :
    if x > y :
        return - 1
    if y % 2 == 0 :
        return y
    if x == y :
        return - 1
    return y - 1

***Example ends here:
def is_equal_to_sum_even ( n ) :
    return n % 2 == 0 and n >= 8

***Example ends here:
def specialFactorial ( n ) :
    fact , specialFact = 1 , 1
    for i in range ( 1 , n + 1 ) :
        fact *= i
        specialFact *= fact
    return specialFact

***Example ends here:
def x_or_y ( n , x , y ) :
    is_prime = n >= 2
    for i in range ( 2 , n ) :
        if n % i == 0 :
            is_prime = False
            break
    if is_prime :
        return x
    return y

***Example ends here:
def rightAngleTriangle ( a , b , c ) :
    return a * a == b * b + c * c or b * b == a * a + c * c or c * c == a * a + b * b

***Example ends here:
def fastPow ( n , k ) :
    if k == 0 :
        return 1
    temp = fastPow ( n , k / 2 )
    if k % 2 == 0 :
        return temp ** 2
    else :
        return n * temp ** 2

***Example ends here:
def isPalin ( s ) :
    l = len ( s ) / 2
    for i in range ( l ) :
        if s [ i ] != s [ - i - 1 ] :
            return False
    return True

***Example ends here:
def findSum ( n ) :
    ans , temp = 0 , 0
    for i in range ( 1 , n + 1 ) :
        temp = i - 1
        num = 1
        while temp < n :
            if temp + i <= n :
                ans += i * num
            else :
                ans += ( n - temp ) * num
            temp += i
            num += 1
    return ans

***Example ends here:
def getNextGap ( gap ) :
    gap = gap * 10 / 13
    if gap < 1 :
        return 1
    return gap

***Example ends here:
def countNonDecreasing ( n ) :
    k = 10
    count = 1
    for i in range ( 1 , n + 1 ) :
        count *= k + i - 1
        count /= i
    return count

***Example ends here:
def power ( x , y ) :
    if y == 0 :
        return 1
    elif y % 2 == 0 :
        return power ( x , y / 2 ) * power ( x , y / 2 )
    else :
        return x * power ( x , y / 2 ) * power ( x , y / 2 )

***Example ends here:
def power ( x , y ) :
    if y == 0 :
        return 1
    temp = power ( x , y / 2 )
    if y % 2 == 0 :
        return temp ** 2
    else :
        if y > 0 :
            return x * temp ** 2
        else :
            return temp ** 2 / x

***Example ends here:
def multiply ( x , y ) :
    if y == 0 :
        return 0
    elif y > 0 :
        return x + multiply ( x , y - 1 )
    else :
        return - multiply ( x , - y )

***Example ends here:
def smallest ( x , y , z ) :
    if y / x == 0 :
        return y / z == 0
    return x / z == 0

***Example ends here:
def isPowerOfFour ( n ) :
    if n == 0 :
        return False
    while n != 1 :
        if n % 4 != 0 :
            return False
        n = n / 4
    return True

***Example ends here:
def modInverse ( a , m ) :
    m0 = m
    x0 , x1 = 0 , 1
    if m == 1 :
        return 0
    while a > 1 :
        q = a // m
        t = m
        m = a % m
        a , t = t , x0
        x0 , x1 = x1 - q * x0 , t
    if x1 < 0 :
        x1 += m0
    return x1

***Example ends here:
def cntRotations ( s , n ) :
    s2 = s + s
    pre = [ 0 ] * ( 2 * n )
    for i in range ( 2 * n ) :
        if i != 0 : pre [ i ] += pre [ i - 1 ]
        if s2 [ i ] in [ 'a' , 'e' , 'i' , 'o' , 'u' ] : pre [ i ] += 1
    ans = 0
    for i in range ( n - 1 , 2 * n - 1 ) :
        r , l = i , i - n
        x1 = pre [ r ]
        if l >= 0 : x1 -= pre [ l ]
        r = i - n // 2
        left = pre [ r ]
        if l >= 0 : left -= pre [ l ]
        right = x1 - left
        if left > right : ans += 1
    return ans

***Example ends here:
def binomial_coeff ( n , k ) :
    res = 1
    if k > n - k :
        k = n - k
    for i in range ( k ) :
        res *= n - i
        res /= i + 1
    return res

***Example ends here:
def isPrefix ( temp , s ) :
    if len ( temp ) < len ( s ) :
        return False
    else :
        for i in range ( len ( s ) ) :
            if s [ i ] != temp [ i ] :
                return False
        return True

***Example ends here:
def lexicographicallySmallestString ( s , n ) :
    lastZe = - 1
    ans = ""
    for i in range ( n - 1 , - 1 , - 1 ) :
        if s [ i ] == '0' :
            lastZe = i
            break
    for i in range ( n ) :
        if i <= lastZe and s [ i ] == '0' :
            ans += s [ i ]
        elif i > lastZe :
            ans += s [ i ]
    return ans

***Example ends here:
def calculate_max ( n , m , k ) :
    ans = - 1
    low , high = 0 , m
    while low <= high :
        mid = ( low + high ) / 2
        val = 0
        l = k - 1
        r = n - k
        val += mid
        if mid >= l :
            val += l * ( 2 * mid - l - 1 ) / 2
        else :
            val += mid * ( mid - 1 ) / 2 + ( l - mid )
        if mid >= r :
            val += r * ( 2 * mid - r - 1 ) / 2
        else :
            val += mid * ( mid - 1 ) / 2 + ( r - mid )
        if val <= m :
            ans = max ( ans , mid )
            low = mid + 1
        else :
            high = mid - 1
    return ans

***Example ends here:
def findLength ( s , i , j ) :
    required = i
    length = 0
    for curr in s :
        if curr == required :
            length += 1
            if required == i :
                required = j
            else :
                required = i
    return length

***Example ends here:
def checkReverse ( leftSum , rightSum ) :
    rev = 0
    temp = rightSum
    while temp != 0 :
        rev = rev * 10 + temp % 10
        temp /= 10
    if rev == leftSum :
        return True
    return False

***Example ends here:
def isComposite ( n ) :
    if n <= 1 :
        return False
    if n <= 3 :
        return False
    if n % 2 == 0 or n % 3 == 0 :
        return True
    for i in range ( 5 , n * i <= n , 6 ) :
        if n % i == 0 or n % ( i + 2 ) == 0 :
            return True
    return False

***Example ends here:
def minDeletion ( s ) :
    n = len ( s )
    firstIdx1 = - 1
    lastIdx0 = - 1
    for i in range ( n ) :
        if s [ i ] == '1' :
            firstIdx1 = i
            break
    for i in range ( n - 1 , - 1 , - 1 ) :
        if s [ i ] == '0' :
            lastIdx0 = i
            break
    if firstIdx1 == - 1 or lastIdx0 == - 1 :
        return 0
    count1 , count0 = 0 , 0
    for i in range ( lastIdx0 ) :
        if s [ i ] == '1' :
            count1 += 1
    for i in range ( firstIdx1 + 1 , n ) :
        if s [ i ] == '1' :
            count0 += 1
    return min ( count0 , count1 )

***Example ends here:
def minSteps ( s , n ) :
    smaller , cost = 0 , 0
    f = range ( 26 )
    for i in range ( n ) :
        currEle = s [ i ] - 'a'
        smaller = 0
        for j in range ( 0 , currEle ) :
            if f [ j ] != 0 :
                smaller += f [ j ]
        if smaller == 0 :
            cost += i + 1
        else :
            cost += i - smaller + 1
        f [ s [ i ] - 'a' ] += 1
    return cost

***Example ends here:
def number_of_ways ( n ) :
    count = 0
    for a in range ( 1 , n ) :
        for b in range ( n ) :
            c = n - ( a + b )
            if a + b > c and a + c > b and b + c > a :
                count += 1
    return count

***Example ends here:
def slope_of_num ( num , n ) :
    slope = 0
    for i in range ( 1 , n - 1 ) :
        if num [ i ] > num [ i - 1 ] and num [ i ] > num [ i + 1 ] :
            slope += 1
        elif num [ i ] < num [ i - 1 ] and num [ i ] < num [ i + 1 ] :
            slope += 1
    return slope

***Example ends here:
def middleOfThree ( a , b , c ) :
    x = a - b
    y = b - c
    z = a - c
    if x * y > 0 :
        return b
    elif x * z > 0 :
        return c
    else :
        return a

***Example ends here:
def countMaxSetBits ( left , right ) :
    while ( left | ( left + 1 ) ) <= right :
        left |= left + 1
    return left

***Example ends here:
def findS ( s ) :
    l , r = 1 , ( s // 2 ) + 1
    while l <= r :
        mid = ( l + r ) // 2
        sum = mid * ( mid + 1 ) // 2
        if sum == s :
            return mid
        elif sum > s :
            r = mid - 1
        else :
            l = mid + 1
    return - 1

***Example ends here:
def check ( s ) :
    min = sys.maxint
    max = sys.maxint
    sum = 0
    for c in s :
        ascii = ord ( c )
        if ascii < 96 or ascii > 122 :
            return False
        sum += ascii
        if min > ascii : min = ascii
        if max < ascii : max = ascii
    min -= 1
    e_sum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2
    return sum == e_sum

***Example ends here:
def minimumPossibleProduct ( k ) :
    res = 1
    r = ( 1 << k ) - 1
    for i in range ( k ) :
        res *= r - 1
    res *= r
    return res

***Example ends here:
def findInGrid ( i , j ) :
    if i == j :
        return i * i - ( i - 1 )
    elif i > j :
        if i % 2 == 0 :
            return i * i - ( j - 1 )
        else :
            return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 )
    else :
        if j % 2 == 0 :
            return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 )
        else :
            return j * j - ( i - 1 )

***Example ends here:
def findMinOperationsReqEmpStr ( s ) :
    cntOne = 0
    cntZero = 0
    n = len ( s )
    for i in range ( n ) :
        if s [ i ] == '0' :
            if cntOne != 0 : cntOne -= 1
            cntZero += 1
        else :
            if cntZero != 0 : cntZero -= 1
            cntOne += 1
    return cntOne + cntZero

***Example ends here:
def isReachable ( x1 , y1 , x2 , y2 ) :
    while x2 > x1 and y2 > y1 :
        if x2 > y2 :
            x2 %= y2
        else :
            y2 %= x2
    if x2 == x1 :
        return ( y2 - y1 ) >= 0 and ( y2 - y1 ) % x1 == 0
    elif y2 == y1 :
        return ( x2 - x1 ) >= 0 and ( x2 - x1 ) % y1 == 0
    else :
        return False

***Example ends here:
def findMaxSoln ( n , x , y ) :
    ans = int ( 0 )
    for k in range ( 0 , n ) :
        if k % x == y :
            ans = max ( ans , k )
    return ans >= 0 and ans <= n

***Example ends here:
def number_of_pairs ( n ) :
    count = 0
    i , j = 1 , n - 1
    while i < j :
        if i + j == n :
            count += 1
        i += 1
        j -= 1
    return count

***Example ends here:
def minChanges ( s , n ) :
    count , zeros , ones = 0 , 0 , 0
    if s [ 0 ] != '1' :
        count += 1
        ones += 1
    for i in range ( 1 , n ) :
        if s [ i ] == '0' : zeros += 1
        else : ones += 1
        if zeros > ones :
            zeros -= 1
            ones += 1
            count += 1
    return count

***Example ends here:
def kVisibleFromLeft ( n , k ) :
    if n == k :
        return 1
    if k == 1 :
        ans = 1
        for i in range ( 1 , n ) :
            ans *= i
        return ans
    return kVisibleFromLeft ( n - 1 , k - 1 ) + ( n - 1 ) * kVisibleFromLeft ( n - 1 , k )

***Example ends here:
def find ( n , sum ) :
    if sum > 6 * n or sum < n :
        return 0
    if n == 1 :
        if sum >= 1 and sum <= 6 :
            return 1.0 / 6
        else :
            return 0
    s = 0
    for i in range ( 1 , 6 ) :
        s += find ( n - 1 , sum - i ) / 6
    return s

***Example ends here:
def binCoff ( n , r ) :
    val = 1
    if r > n - r : r = n - r
    for i in range ( r ) :
        val *= n - i
        val /= i + 1
    return val

***Example ends here:
def getMask ( val ) :
    mask = 0
    if val == 0 :
        return 1
    while val > 0 :
        d = val % 10
        mask |= 1 << d
        val /= 10
    return mask

***Example ends here:
def waysToKAdjacentSetBits ( n , k , currentIndex , adjacentSetBits , lastBit ) :
    if currentIndex == n :
        if adjacentSetBits == k :
            return 1
        return 0
    noOfWays = 0
    if lastBit == 1 :
        noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits + 1 , 1 )
        noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 )
    elif lastBit == 0 :
        noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 1 )
        noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 )
    return noOfWays

***Example ends here:
def checkFunc ( i , j , st ) :
    if st [ i ] == '(' and st [ j ] == ')' :
        return 1
    if st [ i ] == '(' and st [ j ] == '?' :
        return 1
    if st [ i ] == '?' and st [ j ] == ')' :
        return 1
    if st [ i ] == '[' and st [ j ] == ']' :
        return 1
    if st [ i ] == '?' and st [ j ] == ']' :
        return 1
    if st [ i ] == '{' and st [ j ] == '}' :
        return 1
    if st [ i ] == '{' and st [ j ] == '}' :
        return 1
    if st [ i ] == '?' and st [ j ] == '}' :
        return 1
    return 0

***Example ends here:
def findGolomb ( n ) :
    if n == 1 :
        return 1
    return 1 + findGolomb ( n - findGolomb ( findGolomb ( n - 1 ) ) )

***Example ends here:
def allOnes ( s , n ) :
    co = 0
    for c in s :
        co += c == '1'
    return co == n

***Example ends here:
def pad ( n ) :
    pPrevPrev , pPrev , pCurr , pNext = 1 , 1 , 1 , 1
    for i in range ( 3 , n ) :
        pNext = pPrevPrev + pPrev
        pPrevPrev = pPrev
        pPrev = pCurr
        pCurr = pNext
    return pNext

***Example ends here:
def oddLengthPalindrome ( k ) :
    palin = k
    k = k / 10
    while k > 0 :
        rev = k % 10
        palin = palin * 10 + rev
        k = k / 10
    return palin

***Example ends here:
def changeString ( s0 ) :
    s = s0 [ : ]
    n = len ( s0 )
    if s [ 0 ] == '?' :
        s [ 0 ] = 'a'
        if s [ 0 ] == s [ 1 ] : s [ 0 ] += 1
    for i in range ( 1 , n - 1 ) :
        if s [ i ] == '?' :
            s [ i ] = 'a'
            if s [ i ] == s [ i - 1 ] : s [ i ] += 1
            if s [ i ] == s [ i + 1 ] : s [ i ] += 1
            if s [ i ] == s [ i - 1 ] : s [ i ] += 1
    if s [ n - 1 ] == '?' :
        s [ n - 1 ] = 'a'
        if s [ n - 1 ] == s [ n - 2 ] : s [ n - 1 ] += 1
    return ''.join ( s )

***Example ends here:
def total_hammingDistance ( n ) :
    i , sum = 1 , 0
    while n / i > 0 :
        sum = sum + n / i
        i = i * 2
    return sum

***Example ends here:
def checkBitonic ( s ) :
    i = 1
    for c in s :
        if c > s [ i - 1 ] :
            continue
        if c <= s [ i - 1 ] :
            break
    if i == len ( s ) - 1 :
        return 1
    j = i + 1
    for c in s :
        if c < s [ j - 1 ] :
            continue
        if c >= s [ j - 1 ] :
            break
    i = j
    if i != len ( s ) :
        return 0
    return 1

***Example ends here:
def endswith ( str , pat ) :
    patlen = len ( pat )
    strlen = len ( str )
    if patlen > strlen :
        return False
    patlen -= 1
    strlen -= 1
    while patlen >= 0 :
        if pat [ patlen ] != str [ strlen ] :
            return False
        patlen -= 1
        strlen -= 1
    return True

***Example ends here:
def getSum ( n , d ) :
    if n < d :
        return 0
    while n % 10 != d :
        n -= 1
    k = n / 10
    return ( k + 1 ) * d + ( k * 10 + 10 * k ** 2 ) / 2

***Example ends here:
def balancedStringBySwapping ( s ) :
    unbalancedPair = 0
    for c in s :
        if unbalancedPair and c == ']' :
            del unbalancedPair
        elif c == '[' :
            yield unbalancedPair

***Example ends here:
def compute_hash ( s ) :
    p = 31
    mod = int ( 1e9 + 7 )
    hash_val = 0
    mul = 1
    for ch in s :
        hash_val = ( hash_val + ( ch - 'a' + 1 ) * mul ) % mod
        mul = mul * p % mod
    return int ( hash_val )

***Example ends here:
def countOfSubstringWithOnlyOnes ( s ) :
    res , count = 0 , 0
    for c in s :
        count = c == '1' and count + 1 or 0
        res = res + count
    return res

***Example ends here:
def composite ( n ) :
    flag = 0
    c = 0
    for j in range ( 1 , n + 1 ) :
        if n % j == 0 :
            c += 1
    if c >= 3 :
        flag = 1
    return flag

***Example ends here:
def isDivBySix ( s , n ) :
    sum = 0
    for i in range ( n ) :
        sum += s [ i ] - 'a' + 1
    if sum % 3 != 0 :
        return False
    lastDigit = ( s [ n - 1 ] - 'a' + 1 ) % 10
    if lastDigit % 2 != 0 :
        return False
    return True

***Example ends here:
def IsRedundantBraces ( s ) :
    a , b = 0 , 0
    for c in s :
        if c == '(' and c [ 2 : ] == ')' :
            return True
        if c == '*' or c == '+' or c == '-' or c == '/' :
            a += 1
        if c == '(' :
            b += 1
    if b > a :
        return True
    return False

***Example ends here:
def countSubStr ( s , n ) :
    count = 0
    for i in range ( n - 2 ) :
        if s [ i ] == '0' and s [ i + 1 ] == '1' and s [ i + 2 ] == '0' :
            count += 1
            i += 3
        elif s [ i ] == '1' and s [ i + 1 ] == '0' and s [ i + 2 ] == '1' :
            count += 1
            i += 3
        else :
            i += 1
    return count

***Example ends here:
def prefix_occurrences ( s ) :
    c = s [ 0 ]
    count_c = 0
    for c in s [ 1 : ] :
        if c == c :
            count_c += 1
    return count_c

***Example ends here:
def is_valid ( s , length ) :
    for i in range ( 1 , length ) :
        if s [ i ] == s [ i - 1 ] :
            return False
    return True

***Example ends here:
def count ( s , k ) :
    n = len ( s )
    d = 0
    count = 0
    for i in range ( n ) :
        d += s [ i ]
    if d % k == 0 :
        count += 1
    for i in range ( k , n ) :
        prev = s [ i - k ]
        d -= prev
        d += s [ i ]
        if d % k == 0 :
            count += 1
    return count

***Example ends here:
def findSubstringCount ( s ) :
    result = 0
    n = len ( s )
    i = 0
    while i < n - 1 :
        if s [ i ] + 1 == s [ i + 1 ] :
            result += 1
            while i < n - 1 and s [ i ] + 1 == s [ i + 1 ] :
                i += 1
        i += 1
    return result

***Example ends here:
def find ( s1 , s2 ) :
    len1 , len2 = len ( s1 ) , len ( s2 )
    if len1 != len2 :
        return False
    d = [ s2 [ 0 ] - s1 [ 0 ] ]
    for i in range ( 1 , len1 ) :
        if s1 [ i ] > s2 [ i ] :
            return False
        else :
            d.append ( s2 [ i ] - s1 [ i ] )
    for i in range ( len1 - 1 ) :
        if d [ i ] < d [ i + 1 ] :
            return False
    return True

***Example ends here:
def in_given_base ( s , bas ) :
    if bas > 16 :
        return False
    elif bas <= 10 :
        for c in s :
            if not ( c >= '0' and c < '0' + bas ) :
                return False
    else :
        for c in s :
            if not ( ( c >= '0' and c < '0' + bas ) or ( c >= 'A' and c < 'A' + bas - 10 ) ) :
                return False
    return True

***Example ends here:
def countNonEmptySubstr ( s ) :
    n = len ( s )
    return n * ( n + 1 ) // 2

***Example ends here:
def evenDecimalValue ( s , n ) :
    result = 0
    for i in range ( n ) :
        for j in range ( i , n ) :
            decimalValue = 0
            powerOf2 = 1
            for k in range ( i , j ) :
                decimalValue += ( s [ k ] - '0' ) * powerOf2
                powerOf2 *= 2
            if decimalValue % 2 == 0 :
                result += 1
    return result

***Example ends here:
def calculate ( s ) :
    ans = 6
    for i in range ( 10 ) :
        for j in range ( 10 ) :
            for k in range ( 10 ) :
                for l in range ( 10 ) :
                    for m in range ( 10 ) :
                        for n in range ( 10 ) :
                            if i + j + k == l + m + n :
                                c = 0
                                if i != s [ 0 ] - '0' :
                                    c += 1
                                if j != s [ 1 ] - '0' :
                                    c += 1
                                if k != s [ 2 ] - '0' :
                                    c += 1
                                if l != s [ 3 ] - '0' :
                                    c += 1
                                if m != s [ 4 ] - '0' :
                                    c += 1
                                if n != s [ 5 ] - '0' :
                                    c += 1
                                if c < ans :
                                    ans = c
    return ans

***Example ends here:
def xorZero ( s ) :
    oneCount , zeroCount = 0 , 0
    n = len ( s )
    for i in range ( n ) :
        if s [ i ] == '1' : oneCount += 1
        else : zeroCount += 1
    if oneCount % 2 == 0 : return zeroCount
    return oneCount

***Example ends here:
def evenLength ( n ) :
    res = n
    for j in range ( len ( n ) - 1 , - 1 , - 1 ) :
        res += n [ j ]
    return res

***Example ends here:
def countSubstringWithEqualEnds ( s ) :
    result = 0
    n = len ( s )
    for i in range ( n ) :
        for j in range ( i , n ) :
            if s [ i ] == s [ j ] :
                result += 1
    return result

***Example ends here:
def normal_slope ( a , b , x1 , y1 ) :
    g = a / 2
    f = b / 2
    if g - x1 == 0 :
        return - 1
    slope = ( f - y1 ) / ( g - x1 )
    if slope == 0 :
        return - 2
    return slope

***Example ends here:
def orthogonality ( x1 , y1 , x2 , y2 , r1 , r2 ) :
    dsquare = ( x1 - x2 ) ** 2 + ( y1 - y2 ) ** 2
    if dsquare == r1 * r1 + r2 * r2 :
        return True
    else :
        return False

***Example ends here:
def findAreaShaded ( a ) :
    sqArea = a * a
    semiCircleArea = 3.14 * ( a * a ) / 8
    shadedArea = 4 * semiCircleArea - sqArea
    return shadedArea

***Example ends here:
def factorial ( a , b ) :
    res = 1
    for i in range ( 1 , a + b + 1 ) :
        res = res * i
    for i in range ( 1 , a + 1 ) :
        res = res / i
    for i in range ( 1 , b + 1 ) :
        res = res / i
    return res

***Example ends here:
def factorTree ( n ) :
    height = 0
    while n > 1 :
        flag = False
        for i in range ( 2 , math.sqrt ( n ) ) :
            if n % i == 0 :
                n = n / i
                flag = True
                break
        height += 1
        if not flag :
            break
    return height

***Example ends here:
def findIfPossible ( n , s , x ) :
    if s >= x and s % 2 == x % 2 :
        if n >= 3 :
            return "Yes"
        if n == 1 :
            if s == x :
                return "Yes"
            else :
                return "No"
        if n == 2 :
            c = ( s - x ) / 2
            a = c
            b = c
            a = a + x
            if ( a ^ b ) == x :
                return "Yes"
            else :
                return "No"
    return "No"

***Example ends here:
def maximum_triplet_xor ( a , b , c ) :
    ans = 0
    for i in range ( 30 , - 1 , - 1 ) :
        cur = 1 << i
        if a >= cur :
            ans += cur
            a -= cur
        elif b >= cur :
            ans += cur
            b -= cur
        elif c >= cur :
            ans += cur
            c -= cur
    return ans

***Example ends here:
def itemType ( n ) :
    count = 0
    day = 1
    while count + day * ( day + 1 ) / 2 < n :
        count += day * ( day + 1 ) / 2
        day += 1
    for type in range ( day , 0 , - 1 ) :
        count += type
        if count >= n :
            return type

***Example ends here:
def maxGcdInRange ( l , r ) :
    ans = 1
    for z in range ( r , 1 , - 1 ) :
        if r / z - ( l - 1 ) / z > 1 :
            ans = z
            break
    return ans

***Example ends here:
def sum_of_digits ( n ) :
    sum = 0
    while n != 0 :
        sum += n % 10
        n = n / 10
    return sum

***Example ends here:
def is_rep_unit_num ( n , b ) :
    length = 0
    count_one = 0
    while n != 0 :
        r = n % b
        length += 1
        if r == 1 :
            count_one += 1
        n = n / b
    return count_one >= 3 and count_one == length

***Example ends here:
def isStraightLineNum ( n ) :
    if n <= 99 :
        return False
    s = str ( n )
    d = s [ 1 ] - s [ 0 ]
    for i in range ( 2 , len ( s ) ) :
        if s [ i ] - s [ i - 1 ] != d :
            return False
    return True

***Example ends here:
def getCount ( d , n ) :
    no = n // d
    result = no
    for p in range ( 2 , p * p <= no ) :
        if no % p == 0 :
            while no % p == 0 :
                no /= p
            result -= result // p
    if no > 1 :
        result -= result // no
    return result

***Example ends here:
def isEvenParity ( x ) :
    parity = 0
    while x != 0 :
        if x % 2 == 1 :
            parity += 1
        x = x >> 1
    if parity % 2 == 0 :
        return True
    else :
        return False

***Example ends here:
def isPerfect ( n ) :
    sum = 1
    for i in range ( 2 , n * i <= n ) :
        if n % i == 0 :
            if i * i != n :
                sum = sum + i + n / i
            else :
                sum = sum + i
    if sum == n and n != 1 :
        return n

***Example ends here:
def log_a_to_base_b ( a , b ) :
    return a > b - 1

***Example ends here:
def using_binary_search ( start , end , n , s ) :
    if start >= end :
        return start
    mid = start + ( end - start ) / 2
    total_sum = n * ( n + 1 ) / 2
    mid_sum = mid * ( mid + 1 ) / 2
    if total_sum - mid_sum <= s :
        return using_binary_search ( start , mid , n , s )
    return using_binary_search ( mid + 1 , end , n , s )

***Example ends here:
def minInt ( s ) :
    s1 = s.split ( )
    for i in range ( len ( s ) ) :
        if s1 [ i ] >= '5' :
            s1 [ i ] = chr ( '9' - s1 [ i ] + '0' )
    if s1 [ 0 ] == '0' :
        s1 [ 0 ] = '9'
    return ''.join ( s1 )

***Example ends here:
def countTriplets ( a , b , c ) :
    ans = 0
    for i in range ( 1 , a + 1 ) :
        for j in range ( 1 , b + 1 ) :
            for k in range ( 1 , c + 1 ) :
                if i * k > j * j :
                    ans += 1
    return ans

***Example ends here:
def topsyTurvy ( s ) :
    for c in s :
        if c in [ '2' , '4' , '5' , '6' , '7' , '8' , '9' ] :
            return False
    return True

***Example ends here:
def sumOfLastDig ( n , m ) :
    sum = 0
    k = n // m
    arr = [ m * ( i + 1 ) % 10 for i in range ( 10 ) ]
    rem = k % 10
    ans = k // 10 * sum
    for i in range ( rem ) :
        ans += arr [ i ]
    return ans

***Example ends here:
def total_pay ( total_items , price_of_one_item , n , m ) :
    free_items , actual = total_items // ( n + m ) , total_items - free_items
    amount = actual * price_of_one_item
    return amount

***Example ends here:
def min_operations ( x , y , p , q ) :
    if y % x != 0 :
        return - 1
    d = y / x
    a = 0
    while d % p == 0 :
        d /= p
        a += 1
    b = 0
    while d % q == 0 :
        d /= q
        b += 1
    if d != 1 :
        return - 1
    return a + b

***Example ends here:
def is_mersenne ( n ) :
    while n != 0 :
        r = n % 2
        if r == 0 :
            return False
        n //= 2
    return True

***Example ends here:
def findThirdDigit ( n ) :
    if n < 3 :
        return 0
    return ( n & 1 ) and 1 or 6

***Example ends here:
def isOddLength ( num ) :
    count = 0
    while num > 0 :
        num /= 10
        count += 1
    if count % 2 != 0 :
        return True
    return False

***Example ends here:
def check_is_possible ( l , r , k ) :
    count = 0
    for i in range ( l , r + 1 ) :
        if i % k == 0 :
            count += 1
    return count > 1

***Example ends here:
def bytes ( kilobytes ) :
    b = kilobytes * 1024
    return b

***Example ends here:
def octahedralNum ( n ) :
    return n * ( 2 * n * n + 1 ) / 3

***Example ends here:
def checkEqual ( s ) :
    for c in s :
        if c not in [ '1' , '0' , '8' ] :
            return 'No'
    start , end = 0 , len ( s ) - 1
    while start < end :
        if s [ start ] != s [ end ] :
            return 'No'
        start += 1
        end -= 1
    return 'Yes'

***Example ends here:
def isUndulating ( n ) :
    if len ( n ) <= 2 :
        return False
    for i in range ( 2 , len ( n ) ) :
        if n [ i - 2 ] != n [ i ] :
            return False
    return True

***Example ends here:
def first_digit ( n ) :
    while n >= 10 :
        n /= 10
    return n

***Example ends here:
def count_digit ( n ) :
    if n == 0 :
        return 0
    return 1 + count_digit ( n / 10 )

***Example ends here:
def isDivisibleBy5 ( s ) :
    n = len ( s )
    return s [ n - 1 ] - '0' == 0 or s [ n - 1 ] - '0' == 5

***Example ends here:
def inv ( a , m ) :
    m0 = m
    x0 , x1 = 0 , 1
    if m == 1 :
        return 0
    while a > 1 :
        q = a // m
        t = m
        m = a % m
        a , t = t , x0
        x0 , x1 = x1 - q * x0 , t
    if x1 < 0 :
        x1 += m0
    return x1

***Example ends here:
def only_first_and_last_are_set ( n ) :
    if n == 1 :
        return True
    if n == 2 :
        return False
    return ( ( n - 1 ) & ( n - 2 ) ) == 0

***Example ends here:
def divide ( dividend , divisor ) :
    sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) )
    dividend = abs ( dividend )
    divisor = abs ( divisor )
    quotient = 0
    temp = 0
    for i in range ( 31 , - 1 , - 1 ) :
        if temp + ( ( long ( divisor ) << i ) <= dividend ) :
            temp += long ( divisor ) << i
            quotient |= 1 << i
    if sign == - 1 :
        quotient = - quotient
    return quotient

***Example ends here:
def findProfession ( level , pos ) :
    if level == 1 :
        return 'e'
    if findProfession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' :
        return pos % 2 != 0
    return pos % 2 != 0

***Example ends here:
def hasCloseElements ( numbers , threshold ) :
    for i in range ( len ( numbers ) ) :
        for j in range ( i + 1 , len ( numbers ) ) :
            distance = abs ( numbers [ i ] - numbers [ j ] )
            if distance < threshold :
                return True
    return False

***Example ends here:
def truncateNumber ( number ) :
    return number % 1.0

***Example ends here:
def below_zero ( operations ) :
    balance = 0
    for op in operations :
        balance += op
        if balance < 0 :
            return True
    return False

***Example ends here:
def mean_absolute_deviation ( numbers ) :
    sum_num = 0
    for num in numbers :
        sum_num += num
    mean = sum_num / len ( numbers )
    sum_abs_diff = 0
    for num in numbers :
        sum_abs_diff += abs ( num - mean )
    return sum_abs_diff / len ( numbers )

***Example ends here:
def intersperse ( numbers , delimiter ) :
    result = [ ]
    if not numbers :
        return result
    for i in range ( len ( numbers ) - 1 ) :
        result.append ( numbers [ i ] )
        result.append ( delimiter )
    result.append ( numbers [ - 1 ] )
    return result

***Example ends here:
def sum_product ( numbers ) :
    sum_value = 0
    prod_value = 1
    for n in numbers :
        sum_value += n
        prod_value *= n
    return list ( zip ( sum_value , prod_value ) )

***Example ends here:
def allPrefixes ( s ) :
    result = [ ]
    for i in range ( 1 , len ( s ) + 1 ) :
        result.append ( s [ : i ] )
    return result

***Example ends here:
def parseMusic ( musicString ) :
    current = [ ]
    result = [ ]
    for i in range ( 0 , len ( musicString ) ) :
        if i == len ( musicString ) or musicString [ i ] == ' ' :
            if current [ 0 ] == 'o' :
                result.append ( 4 )
            if current [ 0 ] == 'o|' :
                result.append ( 2 )
            if current [ 0 ] == '.|' :
                result.append ( 1 )
            current = [ ]
        else :
            current.append ( musicString [ i ] )
    return result

***Example ends here:
def strlen ( s ) :
    return len ( s )

***Example ends here:
def factorize ( n ) :
    factors = [ ]
    for i in range ( 2 , n + 1 ) :
        if n % i == 0 :
            n /= i
            factors.append ( i )
            i -= 1
    return factors

***Example ends here:
def concatenate ( strings ) :
    result = [ ]
    for s in strings :
        result.append ( s )
    return ''.join ( result )

***Example ends here:
def getPositive ( l ) :
    result = [ ]
    for i in range ( len ( l ) ) :
        if l [ i ] > 0 :
            result.append ( l [ i ] )
    return result

***Example ends here:
def sortEven ( l ) :
    evens = [ ]
    for i in range ( 0 , len ( l ) , 2 ) :
        evens.append ( l [ i ] )
    evens.sort ( )
    result = [ ]
    for i in range ( len ( l ) ) :
        if i % 2 == 0 :
            result.append ( evens [ i / 2 ] )
        if i % 2 == 1 :
            result.append ( l [ i ] )
    return result

***Example ends here:
def decodeCyclic ( s ) :
    output = [ ]
    i = 0
    while i <= len ( s ) - 3 :
        x = s [ i + 2 ] + s [ i : i + 2 ]
        output.append ( x )
        i += 3
    return ''.join ( output ) + s [ i : ]

***Example ends here:
def carRaceCollision ( n ) :
    return int ( math.pow ( n , 2 ) )

***Example ends here:
def incr_list ( l ) :
    result = [ ]
    for i in l :
        result.append ( i + 1 )
    return result

***Example ends here:
def pairs_sum_to_zero ( l ) :
    for i in range ( len ( l ) ) :
        for j in range ( i + 1 , len ( l ) ) :
            if l [ i ] + l [ j ] == 0 :
                return True
    return False

***Example ends here:
def changeBase ( x , b ) :
    ret = [ ]
    while x > 0 :
        ret.insert ( 0 , x % b )
        x /= b
    return ''.join ( ret )

***Example ends here:
def median ( l ) :
    l.sort ( )
    if len ( l ) % 2 == 1 :
        return l [ len ( l ) / 2 ]
    return ( l [ len ( l ) / 2 - 1 ] + l [ len ( l ) / 2 ] ) / 2.0

***Example ends here:
def decodeShift ( s ) :
    s = [ ]
    for ch in s :
        w = chr ( ( ch + 21 - 'a' ) % 26 + 'a' )
        s.append ( w )
    return ''.join ( s )

***Example ends here:
def below_threshold ( l , t ) :
    for n in l :
        if n >= t :
            return False
    return True

***Example ends here:
def correct_bracketing ( brackets ) :
    depth = 0
    for b in brackets :
        if b == '<' : depth += 1
        if b == '>' : depth -= 1
        if depth < 0 :
            return False
    return depth == 0

***Example ends here:
def monotonic ( l ) :
    incr = 0
    decr = 0
    for i in range ( 1 , len ( l ) ) :
        if l [ i ] > l [ i - 1 ] : incr = 1
        if l [ i ] < l [ i - 1 ] : decr = 1
    return incr + decr != 2

***Example ends here:
def derivative ( xs ) :
    result = [ ]
    for i in range ( 1 , len ( xs ) ) :
        result.append ( i * xs [ i ] )
    return result

***Example ends here:
def vowels_count ( s ) :
    vowels = 'aeiouAEIOU'
    count = 0
    for ch in s :
        if vowels.find ( ch ) != - 1 :
            count += 1
    if s [ - 1 ] in [ 'y' , 'Y' ] :
        count += 1
    return count

***Example ends here:
def digitsum ( s ) :
    sum = 0
    for c in s :
        if ord ( c ) < 128 :
            sum += c
    return sum

***Example ends here:
def fruitDistribution ( s , n ) :
    num1 = [ ]
    num2 = [ ]
    flag = False
    for c in s :
        if ord ( c ) < 128 :
            if not flag :
                num1.append ( c )
            if flag :
                num2.append ( c )
        elif not flag and len ( num1 ) > 0 :
            flag = True
    return n - int ( num1 ) - int ( num2 )

***Example ends here:
def pluck ( arr ) :
    result = [ ]
    for i in range ( len ( arr ) ) :
        if arr [ i ] % 2 == 0 :
            if not result :
                result.append ( arr [ i ] )
                result.append ( i )
            elif arr [ i ] < result [ 0 ] :
                result [ 0 ] = arr [ i ]
                result [ 1 ] = i
    return result

***Example ends here:
def strange_sort_list ( lst ) :
    res = [ ]
    lst.sort ( )
    l = 0
    r = len ( lst ) - 1
    while l < r :
        res.append ( lst [ l ] )
        l += 1
        res.append ( lst [ r ] )
        r -= 1
    if l == r :
        res.append ( lst [ l ] )
    return res

***Example ends here:
def triangleArea ( a , b , c ) :
    if a + b <= c or a + c <= b or b + c <= a :
        return - 1
    s = ( a + b + c ) / 2
    return math.sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) )

***Example ends here:
def willItFly ( q , w ) :
    sum = 0
    for i in range ( len ( q ) ) :
        if not q [ i ] :
            return False
        sum += q [ i ]
    return sum <= w

***Example ends here:
def iscube ( a ) :
    a = abs ( a )
    i = int ( round ( math.pow ( a , 1.0 / 3 ) ) )
    return int ( math.pow ( i , 3 ) ) == a

***Example ends here:
def hexKey ( num ) :
    key = '2357BD'
    total = 0
    for c in num :
        if key.find ( c ) != - 1 :
            total += 1
    return total

***Example ends here:
def decimal_to_binary ( dec ) :
    ans = [ ]
    if dec is not None :
        while dec :
            ans.insert ( 0 , dec % 2 )
            dec /= 2
    else :
        ans.append ( '0' )
    return 'db' + ''.join ( ans ) + 'db'

***Example ends here:
def primeLength ( s ) :
    l = len ( s )
    if l < 2 :
        return False
    for i in range ( 2 , l ) :
        if l % i == 0 :
            return False
    return True

***Example ends here:
def startsOneEnds ( n ) :
    if n < 1 :
        return 0
    if n == 1 :
        return 1
    return int ( 18 * pow ( 10 , n - 2 ) )

***Example ends here:
def add ( lst ) :
    sum = 0
    for i in range ( 1 , len ( lst ) , 2 ) :
        if lst [ i ] % 2 == 0 :
            sum += lst [ i ]
    return sum

***Example ends here:
def getRow ( lst , x ) :
    coords = [ ]
    for i in range ( len ( lst ) ) :
        for j in range ( len ( lst [ i ] ) - 1 , - 1 , - 1 ) :
            if lst [ i ] [ j ] == x :
                coords.append ( tuple ( [ i , j ] ) )
    return coords

***Example ends here:
def nextSmallest ( lst ) :
    lst.sort ( )
    for i in range ( 1 , len ( lst ) ) :
        if not lst [ i ] == lst [ i - 1 ] :
            return lst [ i ]
    return - 1

***Example ends here:
def any_int ( a , b , c ) :
    if round ( a ) != a or round ( b ) != b or round ( c ) != c :
        return False
    return a + b == c or a + c == b or b + c == a

***Example ends here:
def countUpTo ( n ) :
    primes = [ ]
    for i in range ( 2 , n ) :
        isPrime = True
        for j in range ( 2 , i ) :
            if i % j == 0 :
                isPrime = False
                break
        if isPrime :
            primes.append ( i )
    return primes

***Example ends here:
def closestInteger ( value ) :
    w = float ( value )
    return int ( round ( w ) )

***Example ends here:
def makeAPile ( n ) :
    result = [ ]
    for i in range ( n ) :
        result.append ( n + 2 * i )
    return result

***Example ends here:
def wordStrings ( s ) :
    current = [ ]
    words = [ ]
    for i in range ( 0 , len ( s ) ) :
        if i == len ( s ) or s [ i ] in [ ' ',' , ' ] :
            if current :
                words.append ( current )
                current = [ ]
        else :
            current.append ( s [ i ] )
    return words

***Example ends here:
def rounded_avg ( n , m ) :
    if n > m :
        return '-1'
    num = ( m + n ) // 2
    ret = [ ]
    while num > 0 :
        ret.insert ( 0 , num % 2 )
        num /= 2
    return ''.join ( ret )

***Example ends here:
def unique_digits ( x ) :
    digits = [ ]
    for i in x :
        is_unique = True
        for c in str ( i ) :
            if c % 2 == 0 :
                is_unique = False
                break
        if is_unique :
            digits.append ( i )
    digits.sort ( )
    return digits

***Example ends here:
def count_nums ( arr ) :
    num = 0
    for n in arr :
        neg = n < 0
        n = abs ( n )
        digits = [ ]
        for c in str ( n ).split ( '.' ) :
            digits.append ( c - '0' )
        digits [ 0 ] = digits [ 0 ] * neg
        sum = 0
        for d in digits :
            sum += d
        if sum > 0 :
            num += 1
    return num

***Example ends here:
def move_one_ball ( arr ) :
    if not arr :
        return True
    num = 0
    for i in range ( 1 , len ( arr ) ) :
        if arr [ i ] < arr [ i - 1 ] :
            num += 1
    if arr [ - 1 ] > arr [ 0 ] :
        num += 1
    if num < 2 :
        return True
    return False

***Example ends here:
def exchange ( lst1 , lst2 ) :
    odd = 0
    even = 0
    for n in lst1 :
        if n % 2 == 1 : odd += 1
    for n in lst2 :
        if n % 2 == 0 : even += 1
    if even >= odd :
        return "YES"
    return "NO"

***Example ends here:
def oddCount ( lst ) :
    results = [ ]
    originalStr = "the number of odd elements in the string i of the input."
    for s in lst :
        sum = 0
        for d in s :
            if type ( d ) == int and d % 2 == 1 :
                sum += 1
        result = [ ]
        for c in originalStr :
            if c == 'i' :
                result.append ( sum )
            else :
                result.append ( c )
        results.append ( ''.join ( result ) )
    return results

***Example ends here:
def minSubArraySum ( nums ) :
    minSum = sys.maxint
    sum = 0
    for num in nums :
        sum += num
        if minSum > sum : minSum = sum
        if sum > 0 : sum = 0
    return minSum

***Example ends here:
def maxFill ( grid , capacity ) :
    res = 0
    for well in grid :
        sum = 0
        for n in well :
            sum += n
        if sum :
            res += ( sum - 1 ) / capacity + 1
    return res

***Example ends here:
def select_words ( s , n ) :
    vowels = 'aeiouAEIOU'
    current = [ ]
    result = [ ]
    consonant_num = 0
    for i in range ( 0 , len ( s ) ) :
        if i == len ( s ) or s [ i ] == ' ' :
            if consonant_num == n :
                result.append ( current )
            current = [ ]
            consonant_num = 0
        else :
            current.append ( s [ i ] )
            if vowels.find ( s [ i ] ) == - 1 :
                consonant_num += 1
    return result

***Example ends here:
def solution ( lst ) :
    sum = 0
    for i in range ( 0 , len ( lst ) , 2 ) :
        if ( lst [ i ] % 2 ) == 1 :
            sum += lst [ i ]
    return sum

***Example ends here:
def add_elements ( arr , k ) :
    sum = 0
    for i in range ( k ) :
        if arr [ i ] >= - 99 and arr [ i ] <= 99 :
            sum += arr [ i ]
    return sum

***Example ends here:
def getOddCollatz ( n ) :
    oddCollatz = [ ]
    while n != 1 :
        if n % 2 == 1 :
            oddCollatz.append ( n )
            n = n * 3 + 1
        else :
            n /= 2
    oddCollatz.append ( 1 )
    oddCollatz.sort ( )
    return oddCollatz

***Example ends here:
def isSorted ( lst ) :
    for i in range ( 1 , len ( lst ) ) :
        if lst [ i ] < lst [ i - 1 ] :
            return False
        if i >= 2 and lst [ i ] == lst [ i - 1 ] and lst [ i ] == lst [ i - 2 ] :
            return False
    return True

***Example ends here:
def intersection ( interval1 , interval2 ) :
    inter1 = max ( interval1 [ 0 ] , interval2 [ 0 ] )
    inter2 = min ( interval1 [ 1 ] , interval2 [ 1 ] )
    l = inter2 - inter1
    if l < 2 :
        return "NO"
    for i in range ( 2 , l ) :
        if l % i == 0 :
            return "NO"
    return "YES"

***Example ends here:
def prodSigns ( arr ) :
    if not arr :
        return - 32768
    sum = 0
    prods = 1
    for i in arr :
        sum += abs ( i )
        if i == 0 :
            prods = 0
        if i < 0 :
            prods = - prods
    return sum * prods

***Example ends here:
def minPath ( grid , k ) :
    n = len ( grid )
    min_num = 0
    for i in range ( n ) :
        for j in range ( n ) :
            if grid [ i ] [ j ] == 1 :
                tmp = [ ]
                if i != 0 :
                    tmp.append ( grid [ i - 1 ] [ j ] )
                if j != 0 :
                    tmp.append ( grid [ i ] [ j - 1 ] )
                if i != n - 1 :
                    tmp.append ( grid [ i + 1 ] [ j ] )
                if j != n - 1 :
                    tmp.append ( grid [ i ] [ j + 1 ] )
                min_num = min ( tmp )
    ans = [ ]
    for i in range ( k ) :
        if i % 2 == 0 :
            ans.append ( 1 )
        else :
            ans.append ( min_num )
    return ans

***Example ends here:
def digits ( n ) :
    prod = None
    for digit in str ( n ) :
        if digit % 2 == 1 :
            if prod is None :
                prod = 1
            prod *= digit - '0'
    return prod

***Example ends here:
def is_nested ( s ) :
    count = 0
    maxCount = 0
    for ch in s :
        if ch == '[' :
            count += 1
        if ch == ']' :
            count -= 1
        if count < 0 :
            count = 0
        if count > maxCount :
            maxCount = count
        if count <= maxCount - 2 :
            return True
    return False

***Example ends here:
def sum_squares ( lst ) :
    sum = 0
    for i in lst :
        sum += math.ceil ( i ) ** 2
    return sum

***Example ends here:
def canArrange ( arr ) :
    index = - 1
    for i in range ( len ( arr ) ) :
        if arr [ i ] <= i :
            index = i
    return index

***Example ends here:
def largestSmallestIntegers ( lst ) :
    maxNeg , minPos = 0 , 0
    for n in lst :
        if n < 0 and ( maxNeg == 0 or n > maxNeg ) : maxNeg = n
        if n > 0 and ( minPos == 0 or n < minPos ) : minPos = n
    return list ( range ( maxNeg , minPos ) )

***Example ends here:
def fix_spaces ( text ) :
    res = [ ]
    space_len = 0
    for i in range ( 0 , len ( text ) ) :
        if i == len ( text ) or text [ i ] != '' :
            if space_len == 1 :
                res.append ( '_' )
            if space_len == 2 :
                res.append ( '__' )
            if space_len > 2 :
                res.append ( '-' )
            space_len = 0
            if i != len ( text ) :
                res.append ( text [ i ] )
        else :
            space_len += 1
    return ''.join ( res )

***Example ends here:
def filenameCheck ( fileName ) :
    digitNum , dotNum = 0 , 0
    if len ( fileName ) < 5 or not re.match ( "[0-9]+" , fileName [ 0 ] ) :
        return "No"
    suffix = fileName [ - 4 : ]
    if not suffix in [ ".txt" , ".exe" , ".dll" ] :
        return "No"
    for c in fileName :
        if re.match ( "[0-9]+" , c ) :
            digitNum += 1
        if c == "." :
            dotNum += 1
    if digitNum > 3 or dotNum != 1 :
        return "No"
    return "Yes"

***Example ends here:
def sum_squares ( lst ) :
    sum = 0
    for i in range ( len ( lst ) ) :
        if i % 3 == 0 :
            sum += lst [ i ] * lst [ i ]
        elif i % 4 == 0 :
            sum += lst [ i ] * lst [ i ] * lst [ i ]
        else :
            sum += lst [ i ]
    return sum

***Example ends here:
def words_in_sentence ( sentence ) :
    result = [ ]
    current = [ ]
    for i in range ( 0 , len ( sentence ) ) :
        if i == len ( sentence ) or sentence [ i ] == '' :
            is_prime = True
            l = len ( current )
            if l < 2 :
                is_prime = False
            for j in range ( 2 , l ) :
                if l % j == 0 :
                    is_prime = False
                    break
            if is_prime :
                result.append ( current [ 0 ] + '' )
            current = [ ]
        else :
            current.append ( sentence [ i ] )
    if result :
        result.reverse ( )
    return ''.join ( result )

***Example ends here:
def simplify ( x , n ) :
    a , b , c , d = 0 , 0 , 0 , 0
    for c in x :
        if c == '/' :
            a , b , c , d = int ( c ) , int ( b ) , int ( c ) , int ( d )
    for c in n :
        if c == '/' :
            c , b , c , d = int ( c ) , int ( b ) , int ( c ) , int ( d )
    return ( a * c ) % ( b * d ) == 0

***Example ends here:
def specialFilter ( nums ) :
    count = 0
    for num in nums :
        if num > 10 :
            w = str ( num )
            if w [ 0 ] % 2 == 1 and w [ - 1 ] % 2 == 1 :
                count += 1
    return count

***Example ends here:
def getMaxTriples ( n ) :
    arr = [ i * i - i + 1 for i in range ( 1 , n ) ]
    count = 0
    for i in range ( n ) :
        for j in range ( i + 1 , n ) :
            for k in range ( j + 1 , n ) :
                if ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 :
                    count += 1
    return count

***Example ends here:
def doubleTheDifference ( lst ) :
    sum = 0
    for d in lst :
        num = int ( round ( d ) )
        if d == num :
            if num > 0 and num % 2 == 1 :
                sum += num * num
    return sum

***Example ends here:
def compare ( game , guess ) :
    result = [ abs ( game [ i ] - guess [ i ] ) for i in range ( len ( game ) ) ]
    return result

***Example ends here:
def strongest_extension ( class_name , extensions ) :
    strongest = ''
    max = int ( '' )
    for extension in extensions :
        strength = 0
        for chr in extension :
            if ord ( chr ) < 128 : strength += 1
            if ord ( chr ) > 127 : strength -= 1
        if strength > max :
            max = strength
            strongest = extension
    return class_name + '.' + strongest

***Example ends here:
def intToMiniRoman ( number ) :
    num = list ( range ( 1000 , 900 ) )
    sym = [ 'm' , 'cm' , 'd' , 'cd' , 'c' , 'xc' , 'l' , 'xl' , 'x' , 'ix' , 'v' , 'iv' , 'i' ]
    pos = 0
    res = [ ]
    while number > 0 :
        while number >= num [ pos ] :
            res.append ( sym [ pos ] )
            number -= num [ pos ]
        if number > 0 :
            pos += 1
    return ''.join ( res )

***Example ends here:
def eat ( number , need , remaining ) :
    return [ number + remaining , 0 ] if need > remaining else [ number + need , remaining - need ]

***Example ends here:
def doAlgebra ( ops , operands ) :
    nums = copy.deepcopy ( operands )
    current_ops = copy.deepcopy ( ops )
    i = len ( current_ops ) - 1
    while i >= 0 :
        if current_ops [ i ] == '**' :
            nums [ i ] = int ( math.pow ( nums [ i ] , nums [ i + 1 ] ) )
            nums.pop ( i + 1 )
            current_ops.pop ( i )
        i -= 1
    i = 0
    while i < len ( current_ops ) :
        if current_ops [ i ] == '*' :
            nums [ i ] = nums [ i ] * nums [ i + 1 ]
            nums.pop ( i + 1 )
            current_ops.pop ( i )
        elif current_ops [ i ] == '/' :
            nums [ i ] = nums [ i ] / nums [ i + 1 ]
            nums.pop ( i + 1 )
            current_ops.pop ( i )
        else :
            i += 1
    i = 0
    while i < len ( current_ops ) :
        if current_ops [ i ] == '+' :
            nums [ i ] = nums [ i ] + nums [ i + 1 ]
            nums.pop ( i + 1 )
            current_ops.pop ( i )
        elif current_ops [ i ] == '-' :
            nums [ i ] = nums [ i ] - nums [ i + 1 ]
            nums.pop ( i + 1 )
            current_ops.pop ( i )
        else :
            i += 1
    return nums [ i ]

***Example ends here:
def generate_integers ( a , b ) :
    lower = max ( 2 , min ( a , b ) )
    upper = min ( 8 , max ( a , b ) )
    result = [ ]
    for i in range ( lower , upper , 2 ) :
        result.append ( i )
    return result

***Example ends here:
def isStepNum ( n ) :
    prevDigit = - 1
    while n > 0 :
        curDigit = n % 10
        if prevDigit != - 1 :
            if abs ( curDigit - prevDigit ) != 1 :
                return False
        n /= 10
        prevDigit = curDigit
    return True

***Example ends here:
def numOfWays ( n , k ) :
    p = 1
    if k % 2 != 0 :
        p = - 1
    return int ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n

***Example ends here:
def find_divisors ( n ) :
    v = [ ]
    for i in range ( 1 , math.sqrt ( n ) + 1 ) :
        if n % i == 0 :
            if n / i == i :
                v.append ( i )
            else :
                v.append ( i )
                v.append ( n / i )
    return v

***Example ends here:
def eggDrop ( n , k ) :
    if k == 1 or k == 0 :
        return k
    if n == 1 :
        return k
    min = sys.maxint
    x , res = 0
    for x in range ( 1 , k + 1 ) :
        res = max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , k - x ) )
        if res < min :
            min = res
    return min + 1

***Example ends here:
def isPowerOfTwo ( n ) :
    if n == 0 :
        return False
    return math.ceil ( math.log ( n , 2 ) / math.log ( 2 , 2 ) ) == math.floor ( math.log ( n , 2 ) / math.log ( 2 , 2 ) )

***Example ends here:
def shortestPalindrome ( s ) :
    n = len ( s )
    v = [ ]
    for i in range ( n ) :
        l = i
        r = i
        ans1 = ""
        ans2 = ""
        while l >= 0 and r < n and s [ l ] == s [ r ] :
            ans1 += s [ l ]
            l -= 1
            r += 1
        l = i - 1
        r = i
        while l >= 0 and r < n and s [ l ] == s [ r ] :
            ans2 += s [ l ]
            l -= 1
            r += 1
        v.append ( ans1 )
        v.append ( ans2 )
    ans = v [ 0 ]
    for i in range ( len ( v ) ) :
        if v [ i ] != "" :
            if ans [ 0 ] >= v [ i ] [ 0 ] :
                ans = v [ i ]
    return ans

***Example ends here:
def minimum_adjacent_difference ( a , n , k ) :
    min_diff = Integer ( 0 )
    for i in range ( 0 , k ) :
        max_diff = Integer ( 0 )
        for j in range ( 0 , n - k - 1 ) :
            for p in range ( i , i + j ) :
                max_diff = max ( max_diff , a [ p + 1 ] - a [ p ] )
        min_diff = min ( min_diff , max_diff )
    return min_diff

***Example ends here:
def cal ( arr , mid ) :
    chocolate = 0
    for i in arr :
        if i >= mid :
            chocolate += i - mid
    return chocolate

***Example ends here:
def check ( v , a , m ) :
    tec , ans = 0 , 0
    b = copy.copy ( a )
    for i in range ( len ( a ) ) :
        tec -= b [ i ]
        if a [ i ] + tec < v :
            mov = v - a [ i ] - tec
            ans = ans + mov
            tec += mov
            b [ i + 2 ] = mov
    return ans <= m

***Example ends here:
def largestNum ( arr ) :
    res = 0
    arr.sort ( )
    l , r = 0 , len ( arr ) - 1
    while l < r :
        sum = arr [ l ] + arr [ r ]
        if sum == 0 :
            res = max ( res , max ( arr [ l ] , arr [ r ] ) )
            return res
        elif sum < 0 :
            l += 1
        else :
            r -= 1
    return res

***Example ends here:
def binary_search ( p , n ) :
    i = 0
    j = len ( p ) - 1
    index = - 1
    while i <= j :
        mid = i + ( j - i ) // 2
        if p [ mid ] >= n :
            index = mid
            j = mid - 1
        else :
            i = mid + 1
    return index

***Example ends here:
def findMinLength ( arr ) :
    index = len ( arr ) - 1
    while index > 0 and arr [ index ] >= arr [ index - 1 ] :
        index -= 1
    return index

***Example ends here:
def minDigits ( n , k ) :
    digitsNum = int ( math.floor ( math.log ( n , 2 ) + 1 ) )
    tempSum = 0
    temp = digitsNum
    result = 0
    x , v = 0 , 0
    sum = 0
    num2 = n
    while num2 != 0 :
        sum += num2 % 10
        num2 /= 10
    if sum <= k :
        x = 0
    else :
        while temp > 0 :
            v = n / int ( math.pow ( 10 , temp - 1 ) )
            tempSum += v % 10
            if tempSum >= k :
                v /= 10
                v += 1
                result = v * int ( math.pow ( 10 , temp ) )
                break
            temp -= 1
        x = result - n
        return x
    return - 1

***Example ends here:
def checkForPerfectSquare ( arr , i , j ) :
    mid , sum = 0 , 0
    for m in range ( i , j + 1 ) :
        sum += arr [ m ]
    low , high = 0 , sum / 2
    while low <= high :
        mid = low + ( high - low ) / 2
        if mid * mid == sum :
            return mid
        elif mid * mid > sum :
            high = mid - 1
        else :
            low = mid + 1
    return - 1

***Example ends here:
def minFlips ( mat , s ) :
    n = len ( mat )
    m = len ( mat [ 0 ] )
    count = 0
    for i in range ( n ) :
        for j in range ( m ) :
            if mat [ i ] [ j ] != s [ i + j ] - '0' :
                count += 1
    return count

***Example ends here:
def construct_tree ( n , edges ) :
    adjl = [ [ ] for i in range ( n ) ]
    for e in edges :
        u , v = e
        adjl [ u ].append ( v )
        adjl [ v ].append ( u )
    return adjl

***Example ends here:
def findSumOfValues ( v , parent , valuesChildren ) :
    curNode = v
    sum = 0
    while curNode != - 1 :
        sum += valuesChildren [ curNode ]
        curNode = parent [ curNode ]
    return sum

***Example ends here:
def getDistinct ( d , count ) :
    num = 0
    count = int ( math.pow ( 10 , count - 1 ) )
    while count > 0 :
        num += count * d
        count /= 10
    return num

***Example ends here:
def isIncreasing ( arr ) :
    for i in range ( len ( arr ) - 1 ) :
        if arr [ i ] > arr [ i + 1 ] :
            return False
    return True

***Example ends here:
def minAdjSwaps ( mat ) :
    n = len ( mat )
    cntZero = [ 0 ] * n
    for i in range ( n ) :
        for j in range ( n - 1 , - 1 , - 1 ) :
            cntZero [ i ] = cntZero [ i ] + 1
    cntSwaps = 0
    for i in range ( n ) :
        if cntZero [ i ] < ( n - i - 1 ) :
            first = i
            while first < n and cntZero [ first ] < ( n - i - 1 ) :
                first += 1
            if first == n :
                return - 1
            while first > i :
                del cntZero [ first ]
                first -= 1
                cntSwaps += 1
    return cntSwaps

***Example ends here:
def solve ( values , salary , mod ) :
    ret = 1
    amt = 0
    values.sort ( )
    salary.sort ( )
    while salary :
        while len ( values ) > 0 and values [ - 1 ] >= salary [ - 1 ] :
            amt += 1
            values.pop ( )
        if amt == 0 :
            return 0
        ret *= amt -= 1
        ret %= mod
        salary.pop ( )
    return ret

***Example ends here:
def organize_in_order ( vec , op , n ) :
    result = [ ]
    result.sort ( )
    i , j = 0 , n - 1 , 0
    while i <= j and k <= n - 2 :
        if op [ k ] == '<' :
            result [ k ] = vec [ i ++ ]
        else :
            result [ k ] = vec [ j -- ]
        k += 1
    result [ n - 1 ] = vec [ i ]
    return result

***Example ends here:
def countPoints ( n , m , a , b , x , y ) :
    a.sort ( )
    b.sort ( )
    j = 0
    count = 0
    for i in range ( n ) :
        while j < m :
            if a [ i ] + y < b [ j ] :
                break
            if b [ j ] >= a [ i ] - x and b [ j ] <= a [ i ] + y :
                count += 1
                j += 1
                break
            else :
                j += 1
    return count

***Example ends here:
def are_same ( a , b ) :
    a.sort ( )
    b.sort ( )
    return a == b

***Example ends here:
def countNumberOfStrings ( s ) :
    n = len ( s ) - 1
    count = int ( math.pow ( 2 , n ) )
    return count

***Example ends here:
def primePower ( x ) :
    primePow = [ ]
    for i in range ( 2 , x ** 2 ) :
        if x % i == 0 :
            p = 1
            while x % i == 0 :
                x /= i
                p *= i
            primePow.append ( p )
    if x > 1 :
        primePow.append ( x )
    return primePow

***Example ends here:
def isPerfect ( n0 ) :
    n = math.sqrt ( n0 )
    if math.floor ( n ) != math.ceil ( n ) :
        return False
    return True

***Example ends here:
def findSum ( l , r ) :
    arr = [ ]
    i = 0
    x = 2
    while i <= r :
        arr.append ( i + x )
        if i + 1 <= r :
            arr.append ( i + 1 + x )
        x *= - 1
        i += 2
    sum = 0
    for i in range ( l , r + 1 ) :
        sum += arr [ i ]
    return sum

***Example ends here:
def results ( n , k ) :
    return int ( round ( math.pow ( n , 1.0 / math.pow ( 2.0 , k ) ) ) )

***Example ends here:
def factors ( n ) :
    v = [ 1 ]
    for i in range ( 2 , math.sqrt ( n ) + 1 ) :
        if n % i == 0 :
            v.append ( i )
            if n / i != i :
                v.append ( n / i )
    return v

***Example ends here:
def smallest_num ( n ) :
    x = math.pow ( 10 , ( n - 1 ) / 2.0 )
    return int ( math.ceil ( x ) )

***Example ends here:
def smallest ( s ) :
    a = sorted ( map ( int , s ) )
    b = [ ]
    for i in range ( len ( a ) ) :
        if a [ i ] % 2 != 0 :
            b.append ( a [ i ] )
    b.sort ( )
    if len ( b ) > 1 :
        return b [ 0 ] * 10 + b [ 1 ]
    return - 1

***Example ends here:
def Diagonals ( a , b , c , d ) :
    ans = [ math.sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) , math.sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ]
    return ans

***Example ends here:
def find_number_of_digits ( n , bas ) :
    dig = int ( math.floor ( math.log ( n , 2 ) / math.log ( bas , 2 ) ) + 1 )
    return dig

***Example ends here:
def nGon ( n ) :
    proAngleVar = 0
    if n % 4 == 0 : proAngleVar = pi * ( 180.0 / n ) / 180
    else : proAngleVar = pi * ( 180.0 / ( 2 * n ) ) / 180
    negX , posX , negY , posY = 1.0e+99 , 1.0e+99 , 1.0e+99 , - 1.0e+99
    for j in range ( n ) :
        px = cos ( 2 * pi * j / n + proAngleVar )
        py = sin ( 2 * pi * j / n + proAngleVar )
        negX = min ( negX , px )
        posX = max ( posX , px )
        negY = min ( negY , py )
        posY = max ( posY , py )
    opt2 = max ( posX - negX , posY - negY )
    return opt2 / sin ( pi / n ) / 2

***Example ends here:
def findMaxK ( n ) :
    p = int ( math.log ( n , 2 ) / math.log ( 2 , 2 ) )
    return int ( math.pow ( 2 , p ) )

***Example ends here:
def nthFibo ( n ) :
    a = ( math.pow ( 5 , 0.5 ) + 1 ) / 2
    b = ( - 1 * math.pow ( 5 , 0.5 ) + 1 ) / 2
    r = math.pow ( 5 , 0.5 )
    ans = ( math.pow ( a , n ) - math.pow ( b , n ) ) / r
    return int ( ans )

***Example ends here:
def find_prob ( l , r ) :
    count_of_ps = math.floor ( math.sqrt ( r ) ) - math.ceil ( math.sqrt ( l ) ) + 1
    total = r - l + 1
    prob = count_of_ps / total
    return prob

***Example ends here:
def previous_fibonacci ( n ) :
    a = n / ( ( 1 + math.sqrt ( 5 ) ) / 2.0 )
    return int ( round ( a ) )

***Example ends here:
def dist_prime ( arr , all_primes ) :
    list1 = [ ]
    for i in all_primes :
        for j in arr :
            if j % i == 0 :
                list1.append ( i )
                break
    return list1

***Example ends here:
def getArray ( n ) :
    ans = [ ]
    p2 = 1
    while n > 0 :
        if n % 2 == 1 :
            ans.append ( p2 )
        n >>= 1
        p2 *= 2
    return ans

***Example ends here:
def maximum_length ( a ) :
    counts = [ int ( i ) for i in sorted ( a ) ]
    ans = 0
    for index in range ( len ( a ) ) :
        counts [ a [ index ] ] = counts [ a [ index ] ] + 1
        k = [ ]
        for i in counts :
            if i != 0 :
                k.append ( i )
        k.sort ( )
        if len ( k ) == 1 or ( k [ 0 ] == k [ - 2 ] and k [ - 1 ] - k [ - 2 ] == 1 ) or ( k [ 0 ] == 1 and k [ 1 ] == k [ - 1 ] ) :
            ans = index
    return ans + 1

***Example ends here:
def maxEdges ( n ) :
    edges = math.floor ( n * n / 4 )
    return int ( edges )

***Example ends here:
def findK ( n , k ) :
    a = [ ]
    for i in range ( 1 , n ) :
        if i % 2 == 1 :
            a.append ( i )
    for i in range ( 1 , n ) :
        if i % 2 == 0 :
            a.append ( i )
    return a [ k - 1 ]

***Example ends here:
def isKeith ( x , temp ) :
    terms = [ ]
    n = 0
    while temp > 0 :
        terms.append ( temp % 10 )
        temp = temp / 10
        n += 1
    terms.reverse ( )
    nextTerm , i = 0 , n
    while nextTerm < x :
        nextTerm = 0
        for j in range ( 1 , n + 1 ) :
            nextTerm += terms [ i - j ]
        terms.append ( nextTerm )
        i += 1
    return nextTerm == x

***Example ends here:
def factors ( n , k ) :
    v = [ ]
    while n % 2 == 0 :
        v.append ( 2 )
        n //= 2
    if len ( v ) >= k :
        return True
    for i in range ( 3 , i * i <= n , i += 2 ) :
        while n % i == 0 :
            n = n // i
            v.append ( i )
        if len ( v ) >= k :
            return True
    if n > 2 :
        v.append ( n )
    if len ( v ) >= k :
        return True
    return False

***Example ends here:
def separate_paren_groups ( paren_string ) :
    all_parens = [ ]
    current_paren = [ ]
    current_depth = 0
    for c in paren_string :
        if c == '(' :
            current_depth += 1
            current_paren.append ( c )
        elif c == ')' :
            current_depth -= 1
            current_paren.append ( c )
            if current_depth == 0 :
                all_parens.append ( current_paren )
                current_paren = [ ]
    return all_parens

***Example ends here:
def parseNestedParens ( paren_string ) :
    all_levels = [ ]
    level = 0
    max_level = 0
    for char in paren_string :
        if char == '(' :
            level += 1
            if level > max_level :
                max_level = level
        if char == ')' :
            level -= 1
            if level == 0 :
                all_levels.append ( max_level )
                max_level = 0
    return all_levels

***Example ends here:
def filter_by_substring ( strings , substring ) :
    result = [ ]
    for s in strings :
        if s in substring :
            result.append ( s )
    return result

***Example ends here:
def rolling_max ( numbers ) :
    result = [ ]
    running_max = 0
    for n in numbers :
        if n > running_max :
            running_max = n
        result.append ( running_max )
    return result

***Example ends here:
def make_palindrome ( s ) :
    if not s :
        return ''
    for i in range ( len ( s ) ) :
        r_str = s [ i ]
        if r_str == [ ] :
            n_str = s [ : i ]
            n2_str = [ ]
            return s + n2_str
    return s [ : : - 1 ] + [ s ]

***Example ends here:
def string_xor ( a , b ) :
    result = [ ]
    for c in a :
        if c == b :
            result.append ( '0' )
        else :
            result.append ( '1' )
    return ''.join ( result )

***Example ends here:
def longest ( strings ) :
    if not strings :
        return ''
    max_len = len ( strings [ 0 ] )
    for s in strings [ 1 : ] :
        if len ( s ) == max_len :
            return s
    return ''

***Example ends here:
def StringSequence ( n ) :
    s = [ ]
    for i in range ( n ) :
        s.append ( i )
        s.append ( "" )
    s.append ( n )
    return "".join ( s )

***Example ends here:
def countDistinctCharacters ( s ) :
    distinct = set ( )
    for c in s.lower ( ).split ( ) :
        distinct.add ( c )
    return len ( distinct )

***Example ends here:
def howManyTimes ( s , sub ) :
    times = 0
    for i in range ( 0 , len ( s ) - len ( sub ) ) :
        if s.startswith ( sub , i ) :
            times += 1
    return times

***Example ends here:
def sortNumbers ( numbers ) :
    toNum = dict ( [ ( 'zero' , 0 ) , ( 'one' , 1 ) , ( 'two' , 2 ) , ( 'three' , 3 ) , ( 'four' , 4 ) , ( 'five' , 5 ) , ( 'six' , 6 ) , ( 'seven' , 7 ) , ( 'eight' , 8 ) , ( 'nine' , 9 ) ] )
    fromNum = dict ( [ ( 0 , 'zero' ) , ( 1 , 'one' ) , ( 2 , 'two' ) , ( 3 , 'three' ) , ( 4 , 'four' ) , ( 5 , 'five' ) , ( 6 , 'six' ) , ( 7 , 'seven' ) , ( 8 , 'eight' ) , ( 9 , 'nine' ) ] )
    ints = [ ]
    current = [ ]
    for i in range ( 0 , len ( numbers ) ) :
        if i == len ( numbers ) or numbers [ i ] == '' :
            if toNum.has_key ( current [ 0 ] ) :
                ints.append ( toNum [ current [ 0 ] ] )
                current = [ ]
        else :
            current.append ( numbers [ i ] )
    ints.sort ( )
    result = ''
    for i in range ( len ( ints ) ) :
        result += fromNum [ ints [ i ] ]
        if i != len ( ints ) - 1 :
            result += ''
    return result

***Example ends here:
def findClosestElements ( numbers ) :
    closestPair = [ [ numbers [ 0 ] , numbers [ 1 ] ] ]
    distance = abs ( numbers [ 0 ] - numbers [ 1 ] )
    for i in range ( len ( numbers ) ) :
        for j in range ( i + 1 , len ( numbers ) ) :
            if abs ( numbers [ i ] - numbers [ j ] ) < distance :
                closestPair [ 0 ].append ( numbers [ i ] )
                closestPair [ 1 ].append ( numbers [ j ] )
                distance = abs ( numbers [ i ] - numbers [ j ] )
    closestPair.sort ( )
    return closestPair

***Example ends here:
def rescale_to_unit ( numbers ) :
    min_num = min ( numbers )
    max_num = max ( numbers )
    result = [ ( n - min_num ) / ( max_num - min_num ) for n in numbers ]
    return result

***Example ends here:
def filter_intergers ( values ) :
    result = [ ]
    for e in values :
        if isinstance ( e , int ) :
            result.append ( e )
    return result

***Example ends here:
def removeDuplicates ( numbers ) :
    c = { }
    for i in numbers :
        c [ i ] = c.get ( i , 0 ) + 1
    result = [ ]
    for i in numbers :
        if c [ i ] == 1 :
            result.append ( i )
    return result

***Example ends here:
def flipCase ( s ) :
    result = [ ]
    for c in s :
        if ord ( c ) < 128 :
            result.append ( ord ( c ) )
        else :
            result.append ( ord ( c ) )
    return ''.join ( result )

***Example ends here:
def filter_by_prefix ( strings , prefix ) :
    result = [ ]
    for string in strings :
        if string.startswith ( prefix ) :
            result.append ( string )
    return result

***Example ends here:
def find_zero ( xs ) :
    ans = 0
    value = 0
    for i in range ( len ( xs ) ) :
        value += xs [ i ] * math.pow ( ans , i )
    while abs ( value ) > 1e-6 :
        driv = 0
        for i in range ( 1 , len ( xs ) ) :
            driv += xs [ i ] * math.pow ( ans , i - 1 ) ** i
        ans -= value / driv
        value = 0
        for i in range ( len ( xs ) ) :
            value += xs [ i ] * math.pow ( ans , i )
    return ans

***Example ends here:
def sortThird ( l ) :
    thirds = [ l [ i ] for i in range ( 0 , len ( l ) , 3 ) ]
    thirds.sort ( )
    result = [ ]
    for i in range ( 0 , len ( l ) ) :
        if i % 3 == 0 :
            result.append ( thirds [ i / 3 ] )
        else :
            result.append ( l [ i ] )
    return result

***Example ends here:
def unique ( l ) :
    result = sorted ( set ( l ) )
    return result

***Example ends here:
def maxElement ( l ) :
    return max ( l )

***Example ends here:
def triplesSumToZero ( l ) :
    for i in range ( len ( l ) ) :
        for j in range ( i + 1 , len ( l ) ) :
            for k in range ( j + 1 , len ( l ) ) :
                if l [ i ] + l [ j ] + l [ k ] == 0 :
                    return True
    return False

***Example ends here:
def fib4 ( n ) :
    results = [ 0 , 0 , 2 , 0 ]
    for i in range ( 4 , n + 1 ) :
        results.append ( results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] )
    return results [ n ]

***Example ends here:
def is_palindrome ( text ) :
    pr = [ text ].reverse ( ).encode ( 'utf-8' )
    return pr == text

***Example ends here:
def removeVowels ( text ) :
    result = [ ]
    vowels = 'aeiou'
    for ch in text :
        if vowels.find ( ord ( ch ) ) == - 1 :
            result.append ( ch )
    return ''.join ( result )

***Example ends here:
def sameChars ( s0 , s1 ) :
    set0 = set ( s0 )
    set1 = set ( s1 )
    return set0 == set1

***Example ends here:
def common ( l1 , l2 ) :
    us = set ( )
    for e1 in l1 :
        for e2 in l2 :
            if e1 == e2 :
                us.add ( e1 )
    ret = sorted ( us )
    return ret

***Example ends here:
def correct_bracketing ( brackets ) :
    depth = 0
    for b in brackets :
        if b == '(' :
            depth += 1
        if b == ')' :
            depth -= 1
        if depth < 0 :
            return False
    return depth == 0

***Example ends here:
def circular_shift ( x , shift ) :
    xs = str ( x )
    if shift > len ( xs ) :
        return [ xs ] * shift
    return xs [ - shift : ] + xs [ : - shift ]

***Example ends here:
def search ( lst ) :
    counter = { }
    for i in lst :
        counter [ i ] = counter.get ( i , 0 ) + 1
    ans = - 1
    for item in counter.items ( ) :
        if item [ 1 ] >= item [ 0 ] and item [ 0 ] > ans :
            ans = item [ 0 ]
    return ans

***Example ends here:
def smallest_change ( arr ) :
    ans = 0
    for i in range ( len ( arr ) / 2 ) :
        if not arr [ i ] == arr [ len ( arr ) - i - 1 ] :
            ans += 1
    return ans

***Example ends here:
def total_match ( lst1 , lst2 ) :
    sum1 = 0
    for var in lst1 :
        sum1 += len ( var )
    sum2 = 0
    for var in lst2 :
        sum2 += len ( var )
    return sum1 > sum2 , lst2

***Example ends here:
def isHappy ( s ) :
    if len ( s ) < 3 :
        return False
    for i in range ( len ( s ) - 2 ) :
        if s [ i ] == s [ i + 1 ] or s [ i ] == s [ i + 2 ] or s [ i + 1 ] == s [ i + 2 ] :
            return False
    return True

***Example ends here:
def numerical_letter_grade ( grades ) :
    letterGrade = [ ]
    for gpa in grades :
        if gpa == 4.0 :
            letterGrade.append ( 'A+' )
        elif gpa > 3.7 :
            letterGrade.append ( 'A' )
        elif gpa > 3.3 :
            letterGrade.append ( 'A-' )
        elif gpa > 3.0 :
            letterGrade.append ( 'B+' )
        elif gpa > 2.7 :
            letterGrade.append ( 'B' )
        elif gpa > 2.3 :
            letterGrade.append ( 'B-' )
        elif gpa > 2.0 :
            letterGrade.append ( 'C+' )
        elif gpa > 1.7 :
            letterGrade.append ( 'C' )
        elif gpa > 1.3 :
            letterGrade.append ( 'C-' )
        elif gpa > 1.0 :
            letterGrade.append ( 'D+' )
        elif gpa > 0.7 :
            letterGrade.append ( 'D' )
        elif gpa > 0.0 :
            letterGrade.append ( 'D-' )
        else :
            letterGrade.append ( 'E' )
    return letterGrade

***Example ends here:
def solve ( n ) :
    bi_str = [ ]
    sum = 0
    for c in str ( n ) :
        sum += c - '0'
    while sum > 0 :
        bi_str.insert ( 0 , sum % 2 )
        sum /= 2
    return ''.join ( bi_str )

***Example ends here:
def antiShuffle ( s ) :
    ret = [ ]
    current = [ ]
    for i in range ( 0 , len ( s ) ) :
        if i == len ( s ) or s [ i ] == '' :
            tmp = current
            tmp.sort ( )
            if not ret :
                ret.append ( '' )
            ret.append ( str ( tmp ) )
            current = [ ]
        else :
            current.append ( s [ i ] )
    return ''.join ( ret )

***Example ends here:
def sortArray ( array ) :
    if not array :
        return array
    if ( array [ 0 ] + array [ len ( array ) - 1 ] ) % 2 == 1 :
        array.sort ( )
    else :
        array.sort ( )
    return array

***Example ends here:
def encrypt ( s ) :
    ans = [ ]
    for c in s :
        if ord ( c ) < 128 :
            ans.append ( chr ( ord ( 'a' ) + ( ord ( c ) - ord ( 'a' ) + 4 ) % 26 ) )
        else :
            ans.append ( c )
    return ''.join ( ans )

***Example ends here:
def isBored ( s ) :
    isStart = True
    sum = 0
    for c in s :
        if c == '.' or c == '?' or c == '!' :
            isStart = True
        elif isStart :
            if c == ' ' :
                continue
            if c.startswith ( 'I ' , 1 ) :
                sum += 1
            isStart = False
    return sum

***Example ends here:
def encode ( message ) :
    vowels = 'aeiouAEIOU'
    ret = [ ]
    for c in message :
        if ord ( c ) < 128 :
            c = ord ( c )
            if vowels.find ( c ) != - 1 :
                c = chr ( ord ( 'a' ) + ( ord ( 'A' ) - ord ( 'a' ) + 2 ) % 26 )
        elif ord ( c ) < 256 :
            c = ord ( c )
            if vowels.find ( c ) != - 1 :
                c = chr ( ord ( 'A' ) + ( ord ( 'a' ) - ord ( 'A' ) + 2 ) % 26 )
        ret.append ( c )
    return ''.join ( ret )

***Example ends here:
def skjkasdkd ( lst ) :
    largest = 0
    for n in lst :
        if n > largest :
            prime = True
            for i in range ( 2 , n ) :
                if n % i == 0 :
                    prime = False
            if prime :
                largest = n
    sum = 0
    s = str ( largest )
    for i in range ( len ( s ) ) :
        sum += s [ i ] - '0'
    return sum

***Example ends here:
def checkDictCase ( dict ) :
    if not dict :
        return False
    isLower = 0
    isUpper = 0
    for key in dict :
        for c in key :
            if ord ( c ) < 128 :
                isLower = 1
            elif ord ( c ) > 127 :
                isUpper = 1
            else :
                return False
    return isLower + isUpper == 1

***Example ends here:
def multiply ( a , b ) :
    return ( abs ( a ) % 10 ) * ( abs ( b ) % 10 )

***Example ends here:
def countUpper ( s ) :
    uVowel = 'AEIOU'
    count = 0
    for i in range ( 0 , len ( s ) , 2 ) :
        if uVowel.find ( s [ i ] ) != - 1 :
            count += 1
    return count

***Example ends here:
def by_length ( arr ) :
    num_to = dict ( [ ( 1 , 'One' ) , ( 2 , 'Two' ) , ( 3 , 'Three' ) , ( 4 , 'Four' ) , ( 5 , 'Five' ) , ( 6 , 'Six' ) , ( 7 , 'Seven' ) , ( 8 , 'Eight' ) , ( 9 , 'Nine' ) ] )
    sorted_arr = sorted ( arr , key = len )
    new_arr = [ ]
    for n in sorted_arr :
        if n >= 1 and n <= 9 :
            new_arr.append ( num_to [ n ] )
    return new_arr

***Example ends here:
def f ( n ) :
    sum = 0
    prod = 1
    result = [ ]
    for i in range ( 1 , n ) :
        sum += i
        prod *= i
        if i % 2 == 0 :
            result.append ( prod )
        else :
            result.append ( sum )
    return result

***Example ends here:
def evenOddPalindrome ( n ) :
    evenCount , oddCount = 0 , 0
    for i in range ( 1 , n + 1 ) :
        s = str ( i )
        rStr = [ s ] * len ( s )
        if s == rStr :
            if i % 2 == 1 :
                oddCount += 1
            else :
                evenCount += 1
    return [ evenCount , oddCount ]

***Example ends here:
def histogram ( test ) :
    count = { }
    max = 0
    for char in test :
        if char not in count :
            count [ char ] = count.setdefault ( char , 0 ) + 1
            if count [ char ] > max :
                max = count [ char ]
    result = { }
    for item in count.items ( ) :
        if item [ 1 ] == max :
            result [ item [ 0 ] ] = item [ 2 ]
    return result

***Example ends here:
def reverse_delete ( s , c ) :
    ret = [ ]
    for ch in s :
        if c.find ( ch ) == - 1 :
            ret.append ( ch )
    flag = "False"
    if ret == [ ] :
        flag = "True"
    return list ( ret )

***Example ends here:
def sort_array ( arr ) :
    bin = [ ]
    for i in arr :
        b = 0
        n = abs ( i )
        while n > 0 :
            b += n % 2
            n /= 2
        bin.append ( b )
    for i in range ( len ( arr ) ) :
        for j in range ( 1 , len ( arr ) ) :
            if bin [ j ] < bin [ j - 1 ] or ( bin [ j ] == bin [ j - 1 ] and arr [ j ] < arr [ j - 1 ] ) :
                del bin [ j ]
                del arr [ j ]
    return arr

***Example ends here:
def getClosestVowel ( word ) :
    vowels = "AEIOUaeiou"
    for i in range ( len ( word ) - 2 , 0 , - 1 ) :
        if vowels.find ( word [ i ] ) != - 1 and vowels.find ( word [ i + 1 ] ) == - 1 and vowels.find ( word [ i - 1 ] ) == - 1 :
            return str ( word [ i ] )
    return ""

***Example ends here:
def matchParens ( lst ) :
    strings = list ( lst [ 0 ] + lst [ 1 ] )
    for l in strings :
        count = 0
        for c in l :
            if c == '(' :
                count += 1
            else :
                count -= 1
            if count < 0 :
                break
        if count == 0 :
            return "Yes"
    return "No"

***Example ends here:
def maximum ( arr , k ) :
    if k == 0 :
        return [ ]
    arr.sort ( )
    return arr [ - k : ]

***Example ends here:
def valid_date ( date ) :
    if len ( date ) != 10 :
        return False
    for i in range ( 10 ) :
        if i == 2 or i == 5 :
            if date [ i ] != '-' :
                return False
        elif not isdigit ( date [ i ] ) :
            return False
    month = int ( date [ 0 : 2 ] )
    day = int ( date [ 3 : 5 ] )
    year = int ( date [ 6 : 10 ] )
    if month < 1 or month > 12 :
        return False
    if day < 1 or day > 31 :
        return False
    if day == 31 and ( month == 4 or month == 6 or month == 9 or month == 11 or month == 2 ) :
        return False
    if day == 30 and month == 2 :
        return False
    return True

***Example ends here:
def splitWords ( txt ) :
    current = [ ]
    result = [ ]
    if txt.find ( ' ' ) != - 1 :
        for i in range ( 0 , len ( txt ) ) :
            if i == len ( txt ) or txt [ i ] == ' ' :
                if current :
                    result.append ( current )
                current = [ ]
            else :
                current.append ( txt [ i ] )
        return result
    if txt.find ( ',' ) != - 1 :
        for i in range ( 0 , len ( txt ) ) :
            if i == len ( txt ) or txt [ i ] == ',' :
                if current :
                    result.append ( current )
                current = [ ]
            else :
                current.append ( txt [ i ] )
        return result
    num = 0
    for c in txt :
        if ord ( c ) < 128 and c % 2 == 0 :
            num += 1
    return list ( str ( num ) )

***Example ends here:
def tri ( n ) :
    if n == 0 :
        return list ( range ( 1 , 3 ) )
    tris = [ 1 ] * n
    for i in range ( 2 , n + 1 ) :
        if i % 2 == 0 :
            tris [ i / 2 + 1 ] += 1
        else :
            tris [ i - 1 ] += tris [ i - 2 ] + ( i + 3 ) / 2
    return tris

***Example ends here:
def checkIfLastCharIsALetter ( txt ) :
    if not txt :
        return False
    return Character.isLetter ( txt [ - 1 ] ) and ( len ( txt ) == 1 or not Character.isLetter ( txt [ - 2 ] ) )

***Example ends here:
def orderByPoints ( nums ) :
    result = [ ]
    for num in nums :
        w = str ( abs ( num ) )
        sum = 0
        for c in w :
            sum += c - '0'
        if num < 0 :
            sum -= 2 ** ( w [ 0 ] - '0' )
        result.append ( sum )
    for i in range ( len ( nums ) ) :
        for j in range ( 1 , len ( nums ) ) :
            if result [ j - 1 ] > result [ j ] :
                del result [ j ]
                del nums [ j ]
    return nums

***Example ends here:
def bf ( planet1 , planet2 ) :
    planets = list ( set ( [ 'Mercury' , 'Venus' , 'Earth' , 'Mars' , 'Jupiter' , 'Saturn' , 'Uranus' , 'Neptune' ] ) )
    idx1 = planets.index ( planet1 )
    idx2 = planets.index ( planet2 )
    if idx1 == - 1 or idx2 == - 1 or idx1 == idx2 :
        return [ ]
    return idx1 > idx2 and planets [ idx2 + 1 : idx1 ] or planets [ idx1 + 1 : idx2 ]

***Example ends here:
def sortedListSum ( lst ) :
    result = [ ]
    for i in lst :
        if len ( i ) % 2 == 0 :
            result.append ( i )
    result.sort ( ( l , r ) )
    return result

***Example ends here:
def cycpatternCheck ( a , b ) :
    for i in range ( 0 , len ( b ) ) :
        rotate = b [ i ] + b [ 0 ]
        if a.find ( rotate ) != - 1 :
            return True
    return False

***Example ends here:
def evenOddCount ( num ) :
    evenCount , oddCount = 0 , 0
    for i in str ( abs ( num ) ).split ( '.' ) :
        if i % 2 == 0 :
            evenCount += 1
        else :
            oddCount += 1
    return [ evenCount , oddCount ]

***Example ends here:
def findMax ( words ) :
    max = ""
    maxLength = 0
    for var in words :
        unique = [ ]
        for w in var :
            if not unique.count ( w ) :
                unique.append ( w )
        if len ( unique ) > maxLength or ( len ( unique ) == maxLength and word < max ) :
            max = word
            maxLength = len ( unique )
    return max

***Example ends here:
def solve ( s ) :
    noLetter = True
    result = [ ]
    for ch in s :
        if isupper ( ch ) :
            ch = ord ( ch )
            noLetter = False
        elif islower ( ch ) :
            ch = ord ( ch )
            noLetter = False
        result.append ( ch )
    if noLetter :
        return ''.join ( result ).lower ( )
    else :
        return ''.join ( result )

***Example ends here:
def most_frequent ( arr , n ) :
    hp = { }
    for i in range ( n ) :
        if hp.has_key ( arr [ i ] ) :
            hp [ arr [ i ] ] = hp [ arr [ i ] ] + 1
        else :
            hp [ arr [ i ] ] = 1
    maxCount , res = 0 , - 1
    for var , val in hp.items ( ) :
        if maxCount < val :
            res = var
            maxCount = val
    return res

***Example ends here:
def find ( a , b , k , n1 , n2 ) :
    s = set ( )
    for i in range ( n2 ) :
        s.add ( b [ i ] )
    missing = 0
    for i in range ( n1 ) :
        if not s.intersection ( a [ i ] ) :
            missing += 1
        if missing == k :
            return a [ i ]
    return - 1

***Example ends here:
def solve_query ( start , end , arr ) :
    mp = { }
    for i in range ( start , end + 1 ) :
        mp [ arr [ i ] ] = mp.get ( arr [ i ] , 0 ) + 1
    count = 0
    for key , val in mp.items ( ) :
        if key == val :
            count += 1
    return count

***Example ends here:
def segregate ( arr , size ) :
    j = 0
    for i in range ( size ) :
        if arr [ i ] <= 0 :
            del arr [ i ]
            j += 1
    return j

***Example ends here:
def count_triplets ( a , n ) :
    s = set ( )
    for i in range ( n ) :
        s.add ( a [ i ] )
    count = 0
    for i in range ( n ) :
        for j in range ( i + 1 , n ) :
            xr = a [ i ] ^ a [ j ]
            if s.intersection ( xr ) and xr != a [ i ] and xr != a [ j ] :
                count += 1
    return count // 3

***Example ends here:
def leastFrequent ( arr , n ) :
    hp = { }
    for i in range ( n ) :
        if hp.has_key ( arr [ i ] ) :
            hp [ arr [ i ] ] = hp [ arr [ i ] ] + 1
        else :
            hp [ arr [ i ] ] = 1
    minCount , res = n + 1 , - 1
    for var , val in hp.items ( ) :
        if minCount >= val :
            res = var
            minCount = val
    return res

***Example ends here:
def findPermutations ( arr ) :
    cnt = 0
    maxInd , minInd = - 1 , 10000000
    n = len ( arr )
    indexOf = { }
    for i in range ( n ) :
        indexOf [ arr [ i ] ] = i + 1
    for i in range ( 1 , n + 1 ) :
        maxInd = max ( maxInd , indexOf.get ( i , 0 ) )
        minInd = min ( minInd , indexOf.get ( i , 0 ) )
        if maxInd - minInd + 1 == i :
            cnt += 1
    return cnt

***Example ends here:
def formQuadruplets ( arr , n ) :
    ans , pairs = 0 , 0
    pairs = n // 4
    arr.sort ( reverse = True )
    for i in range ( 0 , n - pairs , 3 ) :
        ans += arr [ i + 2 ]
    return ans

***Example ends here:
def lexicographicallyMaximum ( s , n ) :
    m = { }
    for i in range ( n ) :
        if m.has_key ( s [ i ] ) :
            m [ s [ i ] ] = m [ s [ i ] ] + 1
        else :
            m [ s [ i ] ] = 1
    v = [ ]
    for i in [ 'a' , 'a' + min ( n , 25 ) ] :
        if not m.has_key ( i ) :
            v.append ( i )
    j = len ( v ) - 1
    for i in range ( n ) :
        if s [ i ] >= 'a' + min ( n , 25 ) or ( m.has_key ( s [ i ] ) and m [ s [ i ] ] > 1 ) :
            if v [ j ] < s [ i ] :
                continue
            m [ s [ i ] ] = m [ s [ i ] ] - 1
            s = s [ : i ] + v [ j ] + s [ i + 1 : ]
            j -= 1
        if j < 0 :
            break
    l = 0
    for i in range ( n - 1 , - 1 , - 1 ) :
        if l > j :
            break
        if s [ i ] >= 'a' + min ( n , 25 ) or m.has_key ( s [ i ] ) and m [ s [ i ] ] > 1 :
            m [ s [ i ] ] = m [ s [ i ] ] - 1
            s = s [ : i ] + v [ l ] + s [ i + 1 : ]
            l += 1
    return s

***Example ends here:
def noOfValidKbers ( k , arr ) :
    s = set ( )
    while k != 0 :
        s.add ( k % 10 )
        k = k / 10
    count = 0
    for i in range ( len ( arr ) ) :
        no = arr [ i ]
        flag = True
        while no != 0 :
            digit = no % 10
            if not s.intersection ( digit ) :
                flag = False
                break
            no = no / 10
        if flag :
            count += 1
    return count

***Example ends here:
def del_cost ( s , cost ) :
    ans = 0
    for_max = { }
    for_to_t = { }
    for i in range ( len ( s ) ) :
        if not for_max.has_key ( s [ i ] ) :
            for_max [ s [ i ] ] = cost [ i ]
        else :
            for_max [ s [ i ] ] = max ( cost [ i ] , for_max [ s [ i ] ] )
        if not for_to_t.has_key ( s [ i ] ) :
            for_to_t [ s [ i ] ] = cost [ i ]
        else :
            for_to_t [ s [ i ] ] = for_to_t [ s [ i ] ] + cost [ i ]
    for i in for_max :
        ans += for_to_t [ i [ 0 ] ] - i [ 1 ]
    return ans

***Example ends here:
def replace_duplicates ( names ) :
    hash = { }
    for name in names :
        if not hash.has_key ( name ) :
            hash [ name ] = 1
        else :
            count = hash [ name ]
            hash [ name ] = hash [ name ] + 1
            names [ name ] = names [ name ] + str ( count )
    return names

***Example ends here:
def minmax_numbers ( matrix , res ) :
    set = set ( )
    for i in range ( len ( matrix ) ) :
        min_r = float ( 'inf' )
        for j in range ( len ( matrix [ i ] ) ) :
            min_r = min ( min_r , matrix [ i ] [ j ] )
        set.add ( min_r )
    for j in range ( len ( matrix [ 0 ] ) ) :
        max_c = float ( 'inf' )
        for i in range ( len ( matrix ) ) :
            max_c = max ( max_c , matrix [ i ] [ j ] )
        if set.intersection ( max_c ) :
            res.add ( max_c )
    return res

***Example ends here:
def lengthOfLongestAP ( a , n ) :
    dp = { }
    res = 2
    for i in range ( n ) :
        for j in range ( i + 1 , n ) :
            d = a [ j ] - a [ i ]
            if dp.has_key ( d ) :
                if dp [ d ].has_key ( i ) :
                    dp [ d ] [ j ] = dp [ d ] [ i ] + 1
                else :
                    dp [ d ] [ j ] = 2
            else :
                dp [ d ] = { }
                dp [ d ] [ j ] = 2
            res = max ( res , dp [ d ] [ j ] )
    return res

***Example ends here:
def findKthChar ( n , k ) :
    prev = 'A'
    cur = ''
    if n == 1 :
        return 'A'
    for j in range ( 2 , n + 1 ) :
        cur = prev + 'B'
        for i in range ( len ( prev ) ) :
            if prev [ i ] == 'A' :
                prev = prev [ : i ] + 'B' + prev [ i + 1 : ]
            else :
                prev = prev [ : i ] + 'A' + prev [ i + 1 : ]
        prev = [ prev ] + prev [ : k - 1 ]
        cur += prev
        prev = cur
    return cur [ k - 1 ]

***Example ends here:
def findKthLargest ( s , k ) :
    tmp = s.chars ( ).sort ( )
    tmp.reverse ( )
    return tmp [ k - 1 ]

***Example ends here:
def subArraylen ( arr , n , k ) :
    mp = { arr [ 0 ] : 0 }
    for i in range ( 1 , n ) :
        arr [ i ] = arr [ i ] + arr [ i - 1 ]
        mp [ arr [ i ] ] = i
    len = sys.maxsize
    for i in range ( n ) :
        if arr [ i ] < k :
            continue
        else :
            x = arr [ i ] - k
            if x == 0 :
                len = min ( len , i )
            if not mp.has_key ( x ) :
                continue
            else :
                len = min ( len , i - mp [ x ] )
    return len

***Example ends here:
def findMaxLen ( a , k ) :
    n = len ( a )
    a.sort ( )
    vis = [ False ] * n
    mp = { }
    for i in range ( n ) :
        mp [ i ] = i
    c = 0
    for i in range ( n ) :
        if not vis [ i ] :
            check = a [ i ] * k
            if mp.has_key ( check ) :
                c += 1
                vis [ mp [ check ] ] = True
    return n - c

***Example ends here:
def min_distance_points ( a , k , n ) :
    m = { }
    q = Queue ( )
    for i in range ( n ) :
        m [ a [ i ] ] = 1
        q.put ( a [ i ] )
    ans = [ ]
    while k > 0 :
        x = q.get ( )
        if not m.has_key ( x - 1 ) and k > 0 :
            m [ x - 1 ] = 1
            q.put ( x - 1 )
            ans.append ( x - 1 )
            k -= 1
        if not m.has_key ( x + 1 ) and k > 0 :
            m [ x + 1 ] = 1
            q.put ( x + 1 )
            ans.append ( x + 1 )
            k -= 1
    return ans

***Example ends here:
def isValidLen ( s , len , k ) :
    n = len ( s )
    mp = { }
    right = 0
    while right < len :
        if mp.has_key ( s [ right ] ) :
            mp [ s [ right ] ] = mp [ s [ right ] ] + 1
        else :
            mp [ s [ right ] ] = 1
        right += 1
    if len ( mp ) <= k :
        return True
    while right < n :
        if mp.has_key ( s [ right ] ) :
            mp [ s [ right ] ] = mp [ s [ right ] ] + 1
        else :
            mp [ s [ right ] ] = 1
        if mp.has_key ( s [ right - len ] ) :
            mp [ s [ right - len ] ] = mp [ s [ right - len ] ] - 1
        if mp [ s [ right - len ] ] == 0 :
            mp.pop ( s [ right - len ] )
        if len ( mp ) <= k :
            return True
        right += 1
    return len ( mp ) <= k

***Example ends here:
def partition ( arr , low , high ) :
    pivot = arr [ high ]
    i = ( low - 1 )
    for j in range ( low , high - 1 ) :
        if arr [ j ] <= pivot :
            i += 1
            del arr [ i ]
    del arr [ i + 1 : ]
    return i + 1

***Example ends here:
def strScore ( strs , s , n ) :
    m = { }
    for i in range ( n ) :
        m [ strs [ i ] ] = i + 1
    if not m.has_key ( s ) :
        return 0
    score = 0
    for c in s :
        score += c - 'a' + 1
    score = score * m [ s ]
    return score

***Example ends here:
def countEle ( s , a , n ) :
    mp = { }
    ans = [ ]
    for i in range ( n ) :
        num = a [ i ]
        if mp.has_key ( num ) :
            ans.append ( 0 )
        else :
            cnt = 0
            while s [ 0 ] != num :
                mp [ s [ 0 ] ] = True
                s.pop ( 0 )
                cnt += 1
            s.pop ( 0 )
            cnt += 1
            ans.append ( cnt )
    return ans

***Example ends here:
def max_distinct_char ( s , n , k ) :
    freq = { }
    for i in range ( n ) :
        if freq.has_key ( s [ i ] ) :
            freq [ s [ i ] ] = freq [ s [ i ] ] + 1
        else :
            freq [ s [ i ] ] = 1
    v = [ ]
    for it in freq.items ( ) :
        v.append ( it.value )
    v.sort ( )
    for i in range ( len ( v ) ) :
        mn = min ( v [ i ] - 1 , k )
        v [ i ] = v [ i ] - mn
        k -= mn
    if k > 0 :
        for i in range ( len ( v ) ) :
            mn = min ( v [ i ] , k )
            v [ i ] = v [ i ] - mn
            k -= mn
    res = 0
    for i in range ( len ( v ) ) :
        if v [ i ] == 1 :
            res += 1
    return res

***Example ends here:
def find_kth ( arr , n , k ) :
    missing = set ( )
    count = 0
    for i in range ( n ) :
        missing.add ( arr [ i ] )
    max_m = max ( arr )
    min_m = min ( arr )
    for i in range ( min_m + 1 , max_m ) :
        if not missing.intersection ( arr [ i ] ) :
            count += 1
        if count == k :
            return i
    return - 1

***Example ends here:
def almostSort ( a , n ) :
    for i in range ( n - 1 ) :
        if a [ i ] > a [ i + 1 ] :
            del a [ i ]
            i += 1
    for i in range ( n - 1 ) :
        if a [ i ] > a [ i + 1 ] :
            return False
    return True

***Example ends here:
def maximum_sum ( s , n , k ) :
    sum = 0
    freq = [ 0 ] * 256
    for i in range ( n ) :
        freq [ s [ i ] ] = freq [ s [ i ] ] + 1
    freq.sort ( )
    for i in range ( 256 ) :
        if k > freq [ i ] :
            sum += freq [ i ] * freq [ i ]
            k -= freq [ i ]
        else :
            sum += freq [ i ] * k
            break
    return sum

***Example ends here:
def findMinOperations ( arr , N , K ) :
    operations = 0
    for i in range ( K ) :
        freq = { }
        for j in range ( i , N , K ) :
            freq [ arr [ j ] ] = freq.get ( arr [ j ] , 0 ) + 1
        max1 , num = 0 , 0
        for key , value in freq.items ( ) :
            if value > max1 :
                max1 = value
                num = key
        for key , value in freq.items ( ) :
            if key != num :
                operations += value
    return operations

***Example ends here:
def substring ( s , n ) :
    v = [ ]
    for i in range ( n ) :
        for len in range ( 1 , n - i + 1 ) :
            find = s [ i : i + len ]
            v.append ( find )
    return v

***Example ends here:
def checkUniqueFrequency ( arr , n ) :
    freq = { }
    for i in range ( n ) :
        freq [ arr [ i ] ] = freq.get ( arr [ i ] , 0 ) + 1
    uniqueFreq = set ( )
    for key in freq :
        if uniqueFreq.issubset ( key ) :
            return False
        else :
            uniqueFreq.add ( key )
    return True

***Example ends here:
def minCost ( str1 , str2 , n ) :
    cost = 0
    tmp = str1
    for i in range ( n ) :
        if tmp [ i ] != str2 [ i ] :
            if i < n - 1 and tmp [ i + 1 ] != str2 [ i + 1 ] :
                c = tmp [ i ]
                tmp [ i ] = tmp [ i + 1 ]
                tmp [ i + 1 ] = c
                cost += 1
            else :
                cost += 1
    return cost

***Example ends here:
def isValidNum ( x ) :
    mp = { }
    for i in x :
        if mp.has_key ( i - '0' ) :
            return False
        elif i - '0' > 5 :
            return False
        else :
            mp [ i - '0' ] = 1
    return True

***Example ends here:
def minimize_diff ( arr , n , k ) :
    max = max ( arr )
    min = min ( arr )
    if max - min <= k :
        return max - min
    avg = ( max + min ) / 2
    for i in range ( n ) :
        if arr [ i ] > avg :
            arr [ i ] = arr [ i ] - k
        else :
            arr [ i ] = arr [ i ] + k
    max = max ( arr )
    min = min ( arr )
    return max - min

***Example ends here:
def getMinCost ( arr , n ) :
    minEle = min ( arr )
    return minEle * ( n - 1 )

***Example ends here:
def possibility ( m , length , s ) :
    countOdd = 0
    for i in range ( length ) :
        if ( m [ s [ i ] - '0' ] & 1 ) :
            countOdd += 1
        if countOdd > 1 :
            return False
    return True

***Example ends here:
def minimumCostOfBreaking ( x , y , m , n ) :
    res = 0
    x.sort ( )
    y.sort ( )
    hzntl , vert = 1 , 1
    i , j = 0 , 0
    while i < m and j < n :
        if x [ i ] > y [ j ] :
            res += x [ i ] * vert
            hzntl += 1
            i += 1
        else :
            res += y [ j ] * hzntl
            vert += 1
            j += 1
    total = 0
    while i < m :
        total += x [ i ]
    res += total * vert
    total = 0
    while j < n :
        total += y [ j ]
    res += total * hzntl
    return res

***Example ends here:
def findMaximumScore ( a , n ) :
    freq = { }
    for i in range ( n ) :
        if freq.has_key ( a [ i ] ) :
            freq [ a [ i ] ] = freq [ a [ i ] ] + 1
        else :
            freq [ a [ i ] ] = 1
    dp = [ 0 ] * max ( a ) + [ 1 ] * len ( a )
    dp [ 0 ] = 0
    dp [ 1 ] = freq.get ( 1 , 0 )
    for i in range ( 2 , len ( dp ) ) :
        dp [ i ] = max ( dp [ i - 1 ] , dp [ i - 2 ] + freq.get ( i , 0 ) * i )
    return dp [ - 1 ]

***Example ends here:
def countWays ( s , t , k , mod ) :
    n = len ( s )
    a , b = 0 , 0
    for i in range ( n ) :
        p = s [ i : i + n ] + s [ : i ]
        if p == t : a += 1
        else : b += 1
    dp1 = [ ]
    dp2 = [ ]
    if s == t :
        dp1.append ( 1 )
        dp2.append ( 0 )
    else :
        dp1.append ( 0 )
        dp2.append ( 1 )
    for i in range ( 1 , k + 1 ) :
        dp1.append ( ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod )
        dp2.append ( ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod )
    return dp1 , dp2

***Example ends here:
def findSubarraySum ( arr , n , k ) :
    prevSum = { }
    res = 0
    currSum = 0
    for i in range ( n ) :
        currSum += arr [ i ]
        if currSum == k :
            res += 1
        if prevSum.has_key ( currSum - k ) :
            res += prevSum [ currSum - k ]
        prevSum [ currSum ] = prevSum.get ( currSum , 0 ) + 1
    return res

***Example ends here:
def maximum_occurrence ( s ) :
    n = len ( s )
    freq = { }
    i , j = 0 , 0
    for i in range ( n ) :
        temp = "".join ( [ s [ i ] , s [ j ] ] )
        freq [ temp ] = freq.get ( temp , 0 ) + 1
    for i in range ( n ) :
        for j in range ( i + 1 , n ) :
            temp = "".join ( [ s [ i ] , s [ j ] ] )
            freq [ temp ] = freq.get ( temp , 0 ) + 1
    answer = int ( 0 )
    for var , count in freq.items ( ) :
        answer = max ( answer , count )
    return answer

***Example ends here:
def countCharacters ( strings , chars ) :
    res = 0
    freq = { }
    for c in chars :
        freq [ c ] = freq.get ( c , 0 ) + 1
    for st in strings :
        flag = True
        for c in st :
            if not freq.has_key ( c ) :
                flag = False
                break
        if flag :
            res += len ( st )
    return res

***Example ends here:
def distinctSubstring ( p , q , k , n ) :
    ss = set ( )
    for i in range ( n ) :
        sum = 0
        s = ""
        for j in range ( i , n ) :
            pos = p [ j ] - 'a'
            sum += q [ pos ] - '0'
            s += p [ j ]
            if sum <= k :
                ss.add ( s )
            else :
                break
    return len ( ss )

***Example ends here:
def uniqueMorseRep ( arr ) :
    morseCode = list ( map ( lambda x : '.-' + x , arr ) )
    st = set ( )
    n = len ( arr )
    for i in range ( n ) :
        temp = ''
        m = len ( arr [ i ] )
        for j in range ( m ) :
            temp += morseCode [ arr [ i ] [ j ] - 'a' ]
        st.add ( temp )
    return len ( st )

***Example ends here:
def countSubstrings ( st , k ) :
    n = len ( st )
    answer = 0
    d = { }
    for i in range ( k ) :
        if not d.has_key ( st [ i ] ) :
            d [ st [ i ] ] = 1
        else :
            d [ st [ i ] ] = d [ st [ i ] ] + 1
    if len ( d ) == k :
        answer += 1
    for i in range ( k , n ) :
        if not d.has_key ( st [ i ] ) :
            d [ st [ i ] ] = 1
        else :
            d [ st [ i ] ] = d [ st [ i ] ] + 1
        d [ st [ i - k ] ] = d [ st [ i - k ] ] - 1
        if d [ st [ i - k ] ] == 0 :
            d.pop ( st [ i - k ] )
        if len ( d ) == k :
            answer += 1
    return answer

***Example ends here:
def can_construct ( s , k ) :
    m = { }
    p = 0
    if len ( s ) == k :
        return True
    for c in s :
        m [ c ] = m.get ( c , 0 ) + 1
    if k > len ( s ) :
        return False
    else :
        for h in m.items ( ) :
            if h [ 1 ] % 2 != 0 :
                p = p + 1
    if k < p :
        return False
    return True

***Example ends here:
def equal_ ( str1 , str2 ) :
    str1 = str1.upper ( )
    str2 = str2.upper ( )
    return str1 == str2

***Example ends here:
def findLongestSub ( bin ) :
    n , i = len ( bin ) , 0
    sum = 0
    prevSum = { }
    maxLen = 0
    for i in range ( n ) :
        if bin [ i ] == '1' :
            sum += 1
        else :
            sum -= 1
        if sum > 0 :
            maxLen = i + 1
        elif sum <= 0 :
            if prevSum.has_key ( sum - 1 ) :
                currLen = i - prevSum [ sum - 1 ]
                maxLen = max ( maxLen , currLen )
        if not prevSum.has_key ( sum ) :
            prevSum [ sum ] = i
    return maxLen

***Example ends here:
def has_all_codes ( s , k ) :
    us = set ( )
    for i in range ( 0 , len ( s ) ) :
        us.add ( s [ i : i + k ] )
    return len ( us ) == 1 << k

***Example ends here:
def checkPalin ( word ) :
    n = len ( word )
    word = word.lower ( )
    for i in range ( n ) :
        if word [ i ] != word [ n - 1 ] :
            return False
    return True

***Example ends here:
def convert ( st ) :
    w , z = "" , ""
    st = st.upper ( ) + ""
    for ch in st :
        if ch != "" :
            w += ch
        else :
            z += chr ( ord ( w [ 0 ] ) ) + w [ 1 : ] + ""
            w = ""
    return z

***Example ends here:
def maxLines ( n , x1 , y1 , x2 , y2 ) :
    s = set ( )
    slope = None
    for i in range ( n ) :
        if x1 [ i ] == x2 [ i ] :
            slope = float ( 'inf' )
        else :
            slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] )
        s.add ( slope )
    return len ( s )

***Example ends here:
def PrimeFactor ( n ) :
    primef = { }
    while n % 2 == 0 :
        if primef.has_key ( 2 ) :
            primef [ 2 ] = primef [ 2 ] + 1
        else :
            primef [ 2 ] = 1
        n /= 2
    for i in range ( 3 , math.sqrt ( n ) + 1 ) :
        while n % i == 0 :
            if primef.has_key ( i ) :
                primef [ i ] = primef [ i ] + 1
            else :
                primef [ i ] = 1
            n /= i
    if n > 2 :
        primef [ n ] = 1
    return primef

***Example ends here:
def isDivisibleByDivisor ( s , d ) :
    s %= d
    hashDict = { s : 0 }
    for i in range ( 0 , d ) :
        s += s % d
        s %= d
        if hashDict.has_key ( s ) :
            if s == 0 :
                return "Yes"
            return "No"
        else :
            hashDict [ s ] += 1
    return "Yes"

***Example ends here:
def oddSum ( a , n , k ) :
    odd = set ( )
    even = set ( )
    for i in range ( n ) :
        if a [ i ] % 2 == 0 :
            even.add ( a [ i ] )
        else :
            odd.add ( a [ i ] )
    if len ( odd ) >= k :
        return True
    flag = False
    for i in range ( 1 , k , 2 ) :
        needed = k - i
        if needed <= len ( even ) :
            return True
    return flag

***Example ends here:
def dayOfYear ( date ) :
    days = list ( range ( 31 , 28 , 31 ) )
    year = int ( date [ 0 : 4 ] )
    month = int ( date [ 5 : 7 ] )
    day = int ( date [ 8 : 10 ] )
    if month > 2 and year % 4 == 0 and ( year % 100 != 0 or year % 400 == 0 ) :
        day += 1
    while month > 1 :
        day = day + days [ month - 2 ]
        month -= 1
    return day

***Example ends here:
def isPerfectSquare ( arr , n ) :
    udict = { }
    for i in range ( n ) :
        udict [ arr [ i ] ] = udict.get ( arr [ i ] , 0 ) + 1
    for itr in udict.keys ( ) :
        if itr % 2 == 1 :
            return False
    return True

***Example ends here:
def minMoves ( n ) :
    s = str ( n )
    ans = sys.maxint
    length = len ( s )
    for i in range ( length ) :
        for j in range ( length ) :
            if i == j :
                continue
            t = s [ i ]
            cur = 0
            for k in range ( i , length - 1 ) :
                c = t [ k ]
                t [ k ] = t [ k + 1 ]
                t [ k + 1 ] = c
                cur += 1
            for k in range ( j - ( j > i and 1 or 0 ) , length - 2 ) :
                c = t [ k ]
                t [ k ] = t [ k + 1 ]
                t [ k + 1 ] = c
                cur += 1
            pos = - 1
            for k in range ( length ) :
                if t [ k ] != '0' :
                    pos = k
                    break
            for k in range ( pos , 0 , - 1 ) :
                c = t [ k ]
                t [ k ] = t [ k - 1 ]
                t [ k - 1 ] = c
                cur += 1
            nn = int ( str ( t ) )
            if nn % 25 == 0 :
                ans = min ( ans , cur )
    if ans == sys.maxint :
        return - 1
    return ans

***Example ends here:
def minimumOperations ( a , n ) :
    mp = { }
    for i in range ( n ) :
        mp [ a [ i ] ] = mp.get ( a [ i ] , 0 ) + 1
    count = 0
    for var , val in mp.items ( ) :
        if val > 1 :
            count += val - 1
    return count

***Example ends here:
def kaprekarRec ( n , prev ) :
    if n == 0 :
        return 0
    prev = n
    digits = [ ]
    for i in range ( 4 ) :
        digits.append ( n % 10 )
        n = n / 10
    digits.sort ( )
    asc = 0
    for i in range ( 4 ) :
        asc = asc * 10 + digits [ i ]
    digits.sort ( )
    desc = 0
    for i in range ( 3 , - 1 , - 1 ) :
        desc = desc * 10 + digits [ i ]
    diff = abs ( asc - desc )
    if diff == prev :
        return diff
    return kaprekarRec ( diff , prev )

***Example ends here:
def fraction_to_decimal ( numr , denr ) :
    res = ""
    mp = { }
    rem = numr % denr
    while rem != 0 and not mp.has_key ( rem ) :
        mp [ rem ] = len ( res )
        rem = rem * 10
        res_part = rem / denr
        res += str ( res_part )
        rem = rem % denr
    if rem == 0 :
        return ""
    if mp.has_key ( rem ) :
        return res [ mp [ rem ] ]
    return ""

***Example ends here:
def isFancy ( num ) :
    fp = { '0' : '0' , '1' : '1' , '6' : '9' , '8' : '8' , '9' : '6' }
    n = len ( num )
    l , r = 0 , n - 1
    while l <= r :
        if not fp.has_key ( num [ l ] ) or fp [ num [ l ] ] != num [ r ] :
            return False
        l += 1
        r -= 1
    return True

***Example ends here:
def distinctOddRatio ( numbers ) :
    distinctCount = int ( len ( numbers ) )
    distinctOddCount = int ( len ( numbers ) / distinctCount )
    return float ( distinctOddCount ) / distinctCount

***Example ends here:
def compare_sum ( numbers , words ) :
    int_sum = numbers.sum ( )
    word_length_sum = words.sum ( )
    if int_sum < word_length_sum :
        return - 1
    if int_sum > word_length_sum :
        return 1
    return 0

***Example ends here:
def all_longer ( short_words , long_words ) :
    max_of_short = len ( short_words )
    min_of_long = len ( long_words )
    return min_of_long > max_of_short

***Example ends here:
def compareOddEvenRange ( numbers ) :
    rangeOdd = numbers [ 0 ] % 2 == 1
    rangeEven = numbers [ 1 ] % 2 == 1
    if rangeOdd < rangeEven :
        return - 1
    if rangeOdd > rangeEven :
        return 1
    return 0

***Example ends here:
def average_distinct_length ( words ) :
    average_len = len ( words )
    return average_len

***Example ends here:
def withDrawBalance ( start , withdrawals ) :
    end = withdrawals.index ( start , ( balance , nextWithdrawal ) )
    return end

***Example ends here:
def firstShortAndStartsWithO ( words ) :
    matchedElement = words [ 0 : 5 ]
    return matchedElement

***Example ends here:
def bigNumberAtIndex ( numbers , index ) :
    targetNum = numbers.filter ( lambda n : n > 5 , index ).skip ( index ) [ 0 ]
    return targetNum

***Example ends here:
def contains_square_in_range ( range_start , range_length ) :
    contains_square = intbitset ( range ( range_start , range_start + range_length ) ).intersection ( range ( range_start , range_start + range_length ) )
    return contains_square

***Example ends here:
def group_numbers_by_mod ( numbers , mod ) :
    global number_groups
    number_groups = numbers.groupby ( mod )
    return number_groups

***Example ends here:
def group_words_by_first_char ( words ) :
    var word_groups = words.groupby ( lambda w : w [ 0 ] )
    return word_groups

***Example ends here:
def orderByLengthAndDescending ( words ) :
    sorted_words = words [ : ]
    sorted_words.sort ( key = len )
    return sorted_words

***Example ends here:
def order_first_char_descending_reverse ( words ) :
    var sorted_words = words [ : : - 1 ]
    sorted_words.reverse ( )
    return sorted_words

***Example ends here:
def getSubListOfNegative ( numbers , start , length ) :
    subList = numbers [ start : start + length ]
    return subList

***Example ends here:
def getPositiveSequence ( numbers ) :
    subSequence = numbers.dropwhile ( lambda n : n <= 0 ).takewhile ( lambda n : n >= 0 )
    return subSequence

***Example ends here:
def getLargerThanIndexSequence ( numbers ) :
    subSequence = IntStream ( range ( 0 , len ( numbers ) ) ).dropWhile ( lambda i : numbers [ i ] < i ).takeWhile ( lambda i : numbers [ i ] >= i ).map ( lambda i : numbers [ i ] )
    return subSequence

***Example ends here:
def rearrangeWordByIndexes ( words , indexes ) :
    newIndexes = indexes.filter ( lambda n : n >= len ( words ) , words )
    newWords = newIndexes.filter ( lambda n : n % len ( words ) == 0 )
    return newWords

***Example ends here:
def get_words_upper_lower ( words ) :
    var upper_lower_words = words.copy ( )
    upper_lower_words.pop ( )
    upper_lower_words.pop ( )
    upper_lower_words.pop ( )
    upper_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_lower_words.pop ( )
    lower_@@
***Example ends here:
def select_if_inplace ( numbers ) :
    nums_in_place = intbitset ( numbers )
    return nums_in_place

***Example ends here:
def selectPairs ( numbersA , numbersB ) :
    pairs = numbersA + numbersB
    return pairs

***Example ends here:
def string_cross_join ( end_words , begin_words ) :
    cross_strings = begin_words + end_words + end_words
    return cross_strings

***Example ends here:
def elements_contain_subword ( words , subword ) :
    if words.stream ( ).limit ( 5 ).all ( ) :
        return 1
    elif words.stream ( ).limit ( 5 ).any ( ) :
        return 0
    else :
        return - 1

***Example ends here:
def ConcatLargeNumbers ( numbersA , numbersB , flag = 0 ) :
    allNumbers = sum ( numbersA + numbersB )
    return allNumbers

***Example ends here:
def DotProduct ( vector_a , vector_b ) :
    dot_product = intbv ( 0 , min = len ( vector_a ) , max = len ( vector_b ) )
    return dot_product

***Example ends here:
def SetDifference ( set_a , set_b ) :
    difference = copy.copy ( set_a )
    difference.update ( set_b )
    intersection = copy.copy ( set_a )
    intersection.update ( set_b )
    difference.difference_update ( intersection )
    difference.sort ( )
    return difference

***Example ends here:
