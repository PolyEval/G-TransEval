int greatest_common_divisor ( int a , int b ) { if ( a == 0 b == 0 ) return a + b ; if ( a == b ) return a ; if ( a > b ) return greatest_common_divisor ( a % b , b ) ; else return greatest_common_divisor ( a , b % a ) ; }
int largest_divisor ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) return n / i ; } return 1 ; }
bool is_prime ( int n ) { if ( n < 2 ) { return false ; } for ( int k = 2 ; k < n ; k ++ ) { if ( n % k == 0 ) { return false ; } } return true ; }
int fizz_buzz ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 11 == 0 i % 13 == 0 ) { int q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) count ++ ; q /= 10 ; } } } return count ; }
int prime_fib ( int n ) { int f0 = 0 , f1 = 1 ; while ( n > 0 ) { int p = f0 + f1 ; bool is_prime = p >= 2 ; for ( int i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) n -- ; f0 = f1 ; f1 = p ; } return f1 ; }
float triangle_area ( float a , float h ) { return a * h / 2 ; }
long modp ( long n , long p ) { long ret = 1 ; for ( int i = 0 ; i < n ; i ++ ) ret = ( ret * 2 ) % p ; return ret ; }
int add ( int x , int y ) { return x + y ; }
int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 1 ; return fib ( n - 1 ) + fib ( n - 2 ) ; }
int largest_prime_factor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) while ( n % i == 0 && n > i ) n /= i ; return n ; }
int sum_to_n ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) result += i ; return result ; }
int fibfib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 0 ; if ( n == 2 ) return 1 ; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
bool is_multiply_prime ( int a ) { int num = 0 ; for ( int i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) { a /= i ; num ++ ; } } return num == 3 ; }
bool is_simple_power ( int x , int n ) { if ( n == 1 ) return ( x == 1 ) ; int power = 1 ; while ( power < x ) power *= n ; return power == x ; }
int choose_num ( int x , int y ) { if ( x > y ) return - 1 ; if ( y % 2 == 0 ) return y ; if ( x == y ) return - 1 ; return y - 1 ; }
bool is_equal_to_sum_even ( int n ) { return n % 2 == 0 && n >= 8 ; }
int special_factorial ( int n ) { int fact = 1 , special_fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; special_fact *= fact ; } return special_fact ; }
int x_or_y ( int n , int x , int y ) { bool is_prime = n >= 2 ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) return x ; return y ; }
bool right_angle_triangle ( int a , int b , int c ) { return a * a == b * b + c * c == a * a + c * c == a * a + b * b ; }
int fast_pow ( int n , int k ) { int temp ; if ( k == 0 ) return 1 ; temp = fast_pow ( n , k / 2 ) ; if ( k % 2 == 0 ) return temp * temp ; else return n * temp * temp ; }
bool is_palin ( string s ) { int l = s . Length / 2 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s [ i ] != s [ s . Length - i - 1 ] ) { return false ; } } return true ; }
int find_sum ( int n ) { int ans = 0 , temp = 0 , num ; for ( int i = 1 ; i <= n && temp < n ; i ++ ) { temp = i - 1 ; num = 1 ; while ( temp < n ) { if ( temp + i <= n ) ans += ( i * num ) ; else ans += ( ( n - temp ) * num ) ; temp += i ; num ++ ; } } return ans ; }
int get_next_gap ( int gap ) { gap = gap * 10 / 13 ; if ( gap < 1 ) return 1 ; return gap ; }
int count_non_decreasing ( int n ) { int k = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count /= i ; } return count ; }
int power ( int x , int y ) { if ( y == 0 ) return 1 ; else if ( y % 2 == 0 ) return power ( x , y / 2 ) * power ( x , y / 2 ) ; else return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; }
float power ( float x , int y ) { float temp ; if ( y == 0 ) return 1 ; temp = power ( x , y / 2 ) ; if ( y % 2 == 0 ) return temp * temp ; else { if ( y > 0 ) return x * temp * temp ; else return temp * temp / x ; } }
int multiply ( int x , int y ) { if ( y == 0 ) return 0 ; if ( y > 0 ) return x + multiply ( x , y - 1 ) ; if ( y < 0 ) return - multiply ( x , - y ) ; return 0 ; }
int smallest ( int x , int y , int z ) { if ( y / x == 0 ) return ( ( z == 0 ) ? y : z ) ; return ( ( x / z == 0 ) ? x : z ) ; }
bool is_power_of_four ( int n ) { if ( n == 0 ) return false ; while ( n != 1 ) { if ( n % 4 != 0 ) return false ; n = n / 4 ; } return true ; }
int mod_inverse ( int a , int m ) { int m0 = m , t , q ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { q = a / m ; t = m ; m = a % m ; a = t  ; t = x0 ; x0 = x1 - q * x0 ; x1 = t  ; } if ( x1 < 0 ) x1 += m0 ; return x1 ; }
int cnt_rotations ( string s , int n ) { string s2 = s + s ; int [ ] pre = new int [ 2 * n ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; if ( s2 [ i ] == 'a' s2 [ i ] == 'e' s2 [ i ] == 'i' s2 [ i ] == 'o' s2 [ i ] == 'u' ) pre [ i ] ++ ; } int ans = 0 ; for ( int i = n - 1 ; i < 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) x1 -= pre [ l ] ; r = i - n / 2 ; int left = pre [ r ] ; if ( l >= 0 ) left -= pre [ l ] ; int right = x1 - left ; if ( left > right ) ans ++ ; } return ans ; }
int binomial_coeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= n - i ; res /= i + 1 ; } return res ; }
bool is_prefix ( string temp , string s ) { if ( temp . Length < s . Length ) return false ; else { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] != temp [ i ] ) return false ; } return true ; } }
string lexicographically_smallest_string ( string s , int n ) { int last_ze = - 1 ; string ans = "" ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { last_ze = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i <= last_ze && s [ i ] == '0' ) ans += s [ i ] ; else if ( i > last_ze ) ans += s [ i ] ; } return ans ; }
int calculate_max ( int n , int m , int k ) { int ans = - 1 ; int low = 0 , high = m ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int val = 0 ; int l = k - 1 , r = n - k ; val += mid ; if ( mid >= l ) { val += l * ( 2 * mid - l - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( l - mid )  ; } if ( mid >= r ) { val += r * ( 2 * mid - r - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( r - mid )  ; } if ( val <= m ) { ans = Math . Max ( ans , mid ) ; low = mid + 1 ; } else { high = mid - 1 ; } } return ans ; }
int find_length ( string s , int i , int j ) { int required = i ; int length = 0 ; foreach ( char curr in s . ToCharArray ( ) ) { if ( curr == required ) { length ++ ; if ( required == i ) required = j ; else required = i ; } } return length ; }
bool check_reverse ( int left_sum , int right_sum ) { int rev = 0 ; int temp = right_sum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp /= 10 ; } if ( rev == left_sum ) { return true ; } return false ; }
bool is_composite ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return false ; if ( n % 2 == 0 n % 3 == 0 ) return true ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return true ; return false ; }
int min_deletion ( string s ) { int n = s . Length ; int first_idx1 = - 1 ; int last_idx0 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { first_idx1 = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { last_idx0 = i ; break ; } } if ( first_idx1 == - 1 last_idx0 == - 1 ) return 0 ; int count1 = 0 , count0 = 0 ; for ( int i = 0 ; i < last_idx0 ; i ++ ) { if ( s [ i ] == '1' ) { count1 ++ ; } } for ( int i = first_idx1 + 1 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { count0 ++ ; } } return Math . Min ( count0 , count1 ) ; }
int min_steps ( string s , int n ) { int smaller , cost = 0 ; int [ ] f = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int curr_ele = s [ i ] - 'a' ; smaller = 0 ; for ( int j = 0 ; j <= curr_ele ; j ++ ) { if ( f [ j ] != 0 ) smaller += f [ j ] ; } if ( smaller == 0 ) cost += i + 1 ; else cost += i - smaller + 1 ; f [ s [ i ] - 'a' ] ++ ; } return cost ; }
int number_of_ways ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 1 ; b < n ; b ++ ) { int c = n - ( a + b ) ; if ( a < b + c && b < a + c && c < a + b ) count ++ ; } } return count ; }
int slope_of_num ( int [ ] num , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) slope ++ ; else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) slope ++ ; } return slope ; }
int middle_of_three ( int a , int b , int c ) { int x = a - b ; int y = b - c ; int z = a - c ; if ( x * y > 0 ) return b ; else if ( x * z > 0 ) return c ; else return a ; }
int count_max_set_bits ( int left , int right ) { while ( ( left | ( left + 1 ) ) <= right ) { left |= left + 1 ; } return left ; }
int find_s ( int s ) { int l = 1 , r = s / 2 + 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) return mid ; else if ( sum > s ) r = mid - 1 ; else l = mid + 1 ; } return - 1 ; }
bool check ( string s ) { int min = Int32 . MaxValue ; int max = Int32 . MinValue ; int sum = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { int ascii = ( int ) s [ i ] ; if ( ascii < 96 ascii > 122 ) return false ; sum += ascii ; if ( min > ascii ) min = ascii ; if ( max < ascii ) max = ascii ; } min -= 1 ; int e_sum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == e_sum ; }
long minimum_possible_product ( int k ) { long res = 1 ; long r = ( 1 << k ) - 1 ; for ( int i = 0 ; i < k ; i ++ ) { res *= r - 1 ; } res *= r ; return res ; }
int find_in_grid ( int i , int j ) { if ( i == j ) return i * i - ( i - 1 ) ; else if ( i > j ) { if ( i % 2 == 0 ) return i * i - ( j - 1 ) ; else return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } else { if ( j % 2 == 0 ) return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; else return j * j - ( i - 1 ) ; } }
int find_min_operations_req_emp_str ( string s ) { int cnt_one = 0 , cnt_zero = 0 ; int n = s . Length ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '0' ) { if ( cnt_one != 0 ) { cnt_one -- ; } cnt_zero ++ ; } else { if ( cnt_zero != 0 ) { cnt_zero -- ; } cnt_one ++ ; } } return ( cnt_one + cnt_zero ) ; }
bool is_reachable ( int x1 , int y1 , int x2 , int y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) x2 %= y2 ; else y2 %= x2 ; } if ( x2 == x1 ) { return ( y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ) ; } else if ( y2 == y1 ) { return ( x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ) ; } else return false ; }
int find_max_soln ( int n , int x , int y ) { int ans = int . MinValue ; for ( int k = 0 ; k <= n ; k ++ ) { if ( k % x == y ) ans = Math . Max ( ans , k ) ; } return ans >= 0 && ans <= n ; }
int number_of_pairs ( int n ) { int count = 0 ; for ( int i = 1 , j = n - 1 ; i < j ; i ++ , j -- ) if ( ( i + j ) == n ) count ++ ; return count ; }
int min_changes ( String s , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( s [ 0 ] != '1' ) { count ++ ; ones ++ ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s [ i ] == '0' ) zeros ++ ; else ones ++ ; if ( zeros > ones ) { zeros -- ; ones ++ ; count ++ ; } } return count ; }
int k_visible_from_left ( int n , int k ) { if ( n == k ) return 1 ; if ( k == 1 ) { int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) ans *= i ; return ans ; } return k_visible_from_left ( n - 1 , k - 1 ) + ( n - 1 ) * k_visible_from_left ( n - 1 , k ) ; }
double find ( int n , int sum ) { if ( sum > 6 * n sum < n ) return 0 ; if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) return 1.0 / 6 ; else return 0 ; } double s = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) s += find ( n - 1 , sum - i ) / 6 ; return s ; }
int bin_coff ( int n , int r ) { int val = 1 ; if ( r > ( n - r ) ) r = n - r ; for ( int i = 0 ; i < r ; ++ i ) { val *= n - i ; val /= i + 1 ; } return val ; }
int get_mask ( int val ) { int mask = 0 ; if ( val == 0 ) return 1 ; while ( val > 0 ) { int d = val % 10 ; mask |= ( 1 << d )  ; val /= 10 ; } return mask ; }
int ways_to_k_adjacent_set_bits ( int n , int k , int current_index , int adjacent_set_bits , int last_bit ) { if ( current_index == n ) { if ( adjacent_set_bits == k ) { return 1 ; } return 0 ; } int no_of_ways = 0 ; if ( last_bit == 1 ) { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits + 1 , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } else if ( last_bit != 1 ) { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } return no_of_ways ; }
int check_func ( int i , int j , char [ ] str ) { if ( str [ i ] == '(' && str [ j ] == ')' ) return 1 ; if ( str [ i ] == '(' && str [ j ] == '?' ) return 1 ; if ( str [ i ] == '?' && str [ j ] == ')' ) return 1 ; if ( str [ i ] == '[' && str [ j ] == ']' ) return 1 ; if ( str [ i ] == '[' && str [ j ] == '?' ) return 1  ; if ( str [ i ] == '[' && str [ j ] == '?' ) return 1  ; if ( str [ i ] == '[' && str [ j ] == '?' ) return 1  ; if ( str [ i ] == '?' && str [ j ] == ']' ) return 1 ; if ( str [ i ] == '{' && str [ j ] == '}' ) return 1 ; if ( str [ i ] == '{' && str [ j ] == '?' ) return 1 ; if ( str [ i ] == '?' && str [ j ] == '}' ) return 1 ; return 0 ; }
int find_golomb ( int n ) { if ( n == 1 ) return 1 ; return 1 + find_golomb ( n - find_golomb ( find_golomb ( n - 1 ) ) ) ; }
bool all_ones ( string s , int n ) { int co = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) co += s [ i ] == '1' ? 1 : 0 ; return ( co == n ) ; }
int pad ( int n ) { int p_prev_prev , p_prev , p_curr , p_next ; p_prev_prev = p_prev + p_prev  ; p_prev = p_curr  ; p_curr = p_next  ; return p_next ; }
int odd_length_palindrome ( int k ) { int palin = k ; k /= 10 ; while ( k > 0 ) { int rev = k % 10 ; palin = palin * 10 + rev ; k /= 10 ; } return palin ; }
string change_string ( string s0 ) { string s = s0 . ToCharArray ( ) ; int n = s0 . Length ; if ( s [ 0 ] == '?' ) { s [ 0 ] = 'a' ; if ( s [ 0 ] == s [ 1 ] ) s [ 0 ] = ( char ) ( s [ 0 ] + 1 ) ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == '?' ) { s [ i ] = 'a' ; if ( s [ i ] == s [ i - 1 ] ) s [ i ] = ( char ) ( s [ i ] + 1 ) ; if ( s [ i ] == s [ i + 1 ] ) s [ i ] = ( char ) ( s [ i ] + 1 ) ; if ( s [ i ] == s [ i - 1 ] ) s [ i ] = ( char ) ( s [ i ] + 1 ) ; } } if ( s [ n - 1 ] == '?' ) { s [ n - 1 ] = 'a' ; if ( s [ n - 1 ] == s [ n - 2 ] ) s [ n - 1 ] = ( char ) ( s [ n - 1 ] + 1 ) ; } return s ; }
int total_hamming_distance ( int n ) { int i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + n / i ; i = i * 2 ; } return sum ; }
int check_bitonic ( char [ ] s ) { int i ; for ( i = 1 ; i < s . Length ; i ++ ) { if ( s [ i ] > s [ i - 1 ] ) continue ; if ( s [ i ] <= s [ i - 1 ] ) break ; } if ( i == s . Length - 1 ) return 1 ; int j ; for ( j = i + 1 ; j < s . Length ; j ++ ) { if ( s [ j ] < s [ j - 1 ] ) continue ; if ( s [ j ] >= s [ j - 1 ] ) break ; } i = j ; if ( i != s . Length ) return 0 ; return 1 ; }
bool ends_with ( string str , string pat ) { int pat_len = pat . Length ; int str_len = str . Length ; if ( pat_len > str_len ) { return false ; } pat_len -- ; str_len -- ; while ( pat_len >= 0 ) { if ( pat [ pat_len ] != str [ str_len ] ) { return false ; } pat_len -- ; str_len -- ; } return true ; }
int get_sum ( int n , int d ) { if ( n < d ) return 0 ; while ( n % 10 != d ) n -- ; int k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
int balanced_string_by_swapping ( string s ) { int unbalanced_pair = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( unbalanced_pair > 0 && s [ i ] == ']' ) unbalanced_pair -- ; else if ( s [ i ] == '[' ) unbalanced_pair ++ ; } return ( unbalanced_pair + 1 ) / 2 ; }
int compute_hash ( string s ) { int p = 31 ; int mod = ( int ) 1e9 + 7 ; int hash_val = 0 ; int mul = 1 ; for ( int i = 0 ; i < s . Length ; i ++ ) { char ch = s [ i ] ; hash_val = ( hash_val + ( ch - 'a' + 1 ) * mul ) % mod ; mul = mul * p % mod ; } return hash_val ; }
int count_of_substring_with_only_ones ( String s ) { int res = 0 , count = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { count = ( s [ i ] == '1' ? count + 1 : 0 ) ; res = res + count ; } return res ; }
int composite ( int n ) { int flag = 0 ; int c = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) { c += 1 ; } } if ( c >= 3 ) { flag = 1 ; } return flag ; }
bool is_div_by_six ( String s , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += ( int ) ( s [ i ] - 'a' + 1 ) ; } if ( sum % 3 != 0 ) return false ; int last_digit = ( ( int ) ( s [ n - 1 ] - 'a' + 1 ) ) % 10 ; if ( last_digit % 2 != 0 ) return false ; return true ; }
bool is_redundant_braces ( String s ) { int a = 0 , b = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == '(' && s [ i + 2 ] == ')' ) return true ; if ( s [ i ] == '*' s [ i ] == '+' s [ i ] == '-' s [ i ] == '/' ) a ++ ; if ( s [ i ] == '(' ) b ++ ; } if ( b > a ) return true ; return false ; }
int count_sub_str ( string s , int n ) { int count = 0 ; int i = 0 ; while ( i < ( n - 2 ) ) { if ( s [ i ] == '0' && s [ i + 1 ] == '1' && s [ i + 2 ] == '0' ) { count ++ ; i += 3 ; } else if ( s [ i ] == '1' && s [ i + 1 ] == '0' && s [ i + 2 ] == '1' ) { count ++ ; i += 3 ; } else i += 1 ; } return count ; }
int prefix_occurrences ( string s ) { char c = s [ 0 ] ; int count_c = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == c ) count_c ++ ; } return count_c ; }
bool is_valid ( string s , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( s [ i ] == s [ i - 1 ] ) return false ; } return true ; }
int count ( string s , int k ) { int n = s . Length ; int d = 0 , i ; int count = 0 ; for ( i = 0 ; i < n ; i ++ ) d += s [ i ] ; if ( d % k == 0 ) count += 1 ; for ( i = k ; i < n ; i ++ ) { int prev = s [ i - k ] ; d -= prev ; d += s [ i ] ; if ( d % k == 0 ) count += 1 ; } return count ; }
int find_substring_count ( string s ) { int result = 0 ; int n = s . Length ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s [ i ] + 1 == s [ i + 1 ] ) { result ++ ; while ( i < n - 1 && s [ i ] + 1 == s [ i + 1 ] ) { i ++ ; } } } return result ; }
bool find ( string s1 , string s2 ) { int len = s1 . Length ; int len2 = s2 . Length ; if ( len != len2 ) return false ; int [ ] d = new int [ len ] ; d [ 0 ] = s2 [ 0 ] - s1 [ 0 ] ; for ( int i = 1 ; i < len ; i ++ ) if ( s1 [ i ] > s2 [ i ] ) return false ; else d [ i ] = s2 [ i ] - s1 [ i ] ; for ( int i = 0 ; i < len - 1 ; i ++ ) if ( d [ i ] < d [ i + 1 ] ) return false ; return true ; }
bool is_in_given_base ( String s , int bas ) { if ( bas > 16 ) return false ; else if ( bas <= 10 ) { for ( int i = 0 ; i < s . Length ; i ++ ) if ( ! ( s [ i ] >= '0' && s [ i ] < '0' + bas ) ) return false ; } else { for ( int i = 0 ; i < s . Length ; i ++ ) if ( ! ( ( s [ i ] >= '0' && s [ i ] < '0' + bas ) || ( s [ i ] >= 'A' && s [ i ] < ( 'A' + bas - 10 ) ) ) ) return false ; } return true ; }
int count_non_empty_substr ( String s ) { int n = s . Length ; return n * ( n + 1 ) / 2 ; }
int even_decimal_value ( String s , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimal_value = 0 ; int power_of_2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimal_value += ( s [ k ] - '0' ) * power_of_2 ; power_of_2 *= 2 ; } if ( decimal_value % 2 == 0 ) result ++ ; } } return result ; }
int calculate ( String s ) { int ans = 6 ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { for ( int k = 0 ; k < 10 ; k ++ ) { for ( int l = 0 ; l < 10 ; l ++ ) { for ( int m = 0 ; m < 10 ; m ++ ) { for ( int n = 0 ; n < 10 ; n ++ ) { if ( i + j + k == l + m + n ) { int c = 0 ; if ( i != s [ 0 ] - '0' ) c ++ ; if ( j != s [ 1 ] - '0' ) c ++ ; if ( k != s [ 2 ] - '0' ) c ++ ; if ( l != s [ 3 ] - '0' ) c ++ ; if ( m != s [ 4 ] - '0' ) c ++ ; if ( n != s [ 5 ] - '0' ) c ++ ; if ( c < ans ) ans = c ; } } } } } } } return ans ; }
int xor_zero ( String s ) { int one_count = 0 , zero_count = 0 ; int n = s . Length ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) one_count ++ ; else zero_count ++ ; } if ( one_count % 2 == 0 ) return zero_count  ; return one_count ; }
int even_length ( String n ) { int res = n . Length ; for ( int j = n . Length - 1 ; j >= 0 ; j -- ) res += n [ j ] ; return res ; }
int count_substring_with_equal_ends ( String s ) { int result = 0 ; int n = s . Length ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( s [ i ] == s [ j ] ) { result ++ ; } } } return result ; }
double normal_slope ( double a , double b , double x1 , double y1 ) { double g = a / 2 ; double f = b / 2 ; if ( g - x1 == 0 ) return - 1 ; double slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) return - 2 ; return slope ; }
bool orthogonality ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) { int dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) return true ; else return false ; }
double find_area_shaded ( double a ) { double sq_area = a * a ; double semi_circle_area = ( 3.14 * ( a * a ) / 8 ) ; double shaded_area = 4 * semi_circle_area - sq_area ; return shaded_area ; }
int factorial ( int a , int b ) { int res = 1 ; for ( int i = 1 ; i <= a + b ; i ++ ) res = res * i ; for ( int i = 1 ; i <= a ; i ++ ) res = res / i ; for ( int i = 1 ; i <= b ; i ++ ) res = res / i ; return res ; }
int factor_tree ( int n ) { int height = 0 ; while ( n > 1 ) { bool flag = false ; for ( int i = 2 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( ! flag ) break ; } return height ; }
string find_if_possible ( int n , int s , int x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) return "Yes" ; if ( n == 1 ) { if ( s == x ) return "Yes" ; else return "No" ; } if ( n == 2 ) { int c = ( s - x ) / 2 ; int a = c  , b = c  ; a = a + x  ; if ( ( a ^ b ) == x ) return "Yes" ; else return "No" ; } else return "No" ; }
int maximum_triplet_xor ( int a , int b , int c ) { int ans = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int cur = 1 << i ; if ( a >= cur ) { ans += cur  ; a -= cur  ; } else if ( b >= cur ) { ans += cur  ; b -= cur  ; } else if ( c >= cur ) { ans += cur ; c -= cur  ; } } return ans ; }
int item_type ( int n ) { int count = 0 ; for ( int day = 1 ; count + day * ( day + 1 ) / 2 < n ; day ++ ) { count += day * ( day + 1 ) / 2 ; } for ( int type = day ; type >= 0 ; type -- ) { count += type ; if ( count >= n ) return type ; } return 0 ; }
int max_gcd_in_range ( int l , int r ) { int ans = 1 ; for ( int z = r ; z > 0 ; z -- ) { if ( r / z - ( l - 1 ) / z > 1 ) { ans = z ; break ; } } return ans ; }
int sum_of_digits ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += ( n % 10 ) ; n = n / 10 ; } return sum ; }
bool is_rep_unit_num ( int n , int b ) { int len = 0 , count_one = 0 ; while ( n != 0 ) { int r = n % b ; len ++ ; if ( r == 1 ) count_one ++ ; n = n / b ; } return count_one >= 3 && count_one == len ; }
bool is_straigh_line_num ( int n ) { if ( n <= 99 ) return false ; string s = n . ToString ( ) ; int d = s [ 1 ] - s [ 0 ] ; for ( int i = 2 ; i < s . Length ; i ++ ) if ( s [ i ] - s [ i - 1 ] != d ) return false ; return true ; }
int get_count ( int d , int n ) { int no = n / d ; int result = no ; for ( int p = 2 ; p * p <= no ; ++ p ) { if ( no % p == 0 ) { while ( no % p == 0 ) no /= p ; result -= result / p ; } } if ( no > 1 ) result -= result / no ; return result ; }
bool is_even_parity ( int x ) { int parity = 0 ; while ( x != 0 ) { if ( ( x & 1 ) != 0 ) parity ++ ; x = x >> 1 ; } if ( parity % 2 == 0 ) return true ; else return false ; }
int is_perfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) sum = sum + i + n / i ; else sum = sum + i ; } } if ( sum == n && n != 1 ) return n ; return 0 ; }
int log_a_to_base_b ( int a , int b ) { return ( a > ( b - 1 ) ? 1 + log_a_to_base_b ( a / b , b ) : 0 ) ; }
int using_binary_search ( int start , int end , int n , int s ) { if ( start >= end ) return start ; int mid = start + ( end - start ) / 2 ; int total_sum = ( n * ( n + 1 ) ) / 2 ; int mid_sum = ( mid * ( mid + 1 ) ) / 2 ; if ( total_sum - mid_sum <= s ) return using_binary_search ( start , mid , n , s ) ; return using_binary_search ( mid + 1 , end , n , s ) ; }
string min_int ( string s ) { StringBuilder s1 = new StringBuilder ( s ) ; for ( int i = 0 ; i < s . Length ; i ++ ) s1 . Insert ( i , ( char ) ( '9' - s1 [ i ] + '0' ) ) ; if ( s1 [ 0 ] == '0' ) s1 . Insert ( 0 , '9' ) ; return s1 . ToString ( ) ; }
int count_triplets ( int a , int b , int c ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { for ( int k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) ans ++ ; } } } return ans ; }
bool topsy_turvy ( char [ ] s ) { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == '2' s [ i ] == '4' s [ i ] == '5' s [ i ] == '6' s [ i ] == '7' s [ i ] == '9' ) { return false ; } } return true ; }
int sum_of_last_dig ( int n , int m ) { int sum = 0 ; int k = n / m ; int [ ] arr = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ]  } int rem = k % 10 ; int ans = k / 10 * sum ; for ( int i = 0 ; i < rem ; i ++ ) ans += arr [ i ]  ; return ans ; }
int total_pay ( int total_items , int price_of_one_item , int n , int m ) { int free_items = 0 ; int actual = 0 ; free_items = total_items / ( n + m ) ; actual = total_items - free_items ; int amount = actual * price_of_one_item ; return amount ; }
int min_operations ( int x , int y , int p , int q ) { if ( y % x != 0 ) return - 1 ; int d = y / x  ; int a = 0 ; while ( d % p == 0 ) { d /= p ; a ++ ; } int b = 0 ; while ( d % q == 0 ) { d /= q ; b ++ ; } if ( d != 1 ) return - 1 ; return a + b ; }
bool is_mersenne ( int n ) { while ( n != 0 ) { int r = n % 2 ; if ( r == 0 ) return false ; n /= 2 ; } return true ; }
int find_third_digit ( int n ) { if ( n < 3 ) return 0 ; return ( n & 1 ) ? 1 : 6 ; }
bool is_odd_length ( int num ) { int count = 0 ; while ( num > 0 ) { num = num / 10 ; count ++ ; } if ( count % 2 != 0 ) return true ; return false ; }
bool check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) count ++ ; } return count > 1 ; }
long bytes ( int kilobytes ) { long b = kilobytes * 1024 ; return b ; }
int octahedral_num ( int n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
string check_equal ( string s ) { int i ; for ( i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] != '1' && s [ i ] != '0' && s [ i ] != '8' ) { return "No" ; } } int start = 0 ; int end = s . Length - 1 ; while ( start < end ) { if ( s [ start ] != s [ end ] ) { return "No" ; } start ++ ; end -- ; } return "Yes" ; }
bool is_undulating ( string n ) { if ( n . Length <= 2 ) { return false ; } for ( int i = 2 ; i < n . Length ; i ++ ) { if ( n [ i - 2 ] != n [ i ] ) { return false ; } } return true ; }
int first_digit ( int n ) { while ( n >= 10 ) n /= 10 ; return n ; }
int count_digit ( int n ) { if ( n == 0 ) return 0 ; return 1 + count_digit ( n / 10 ) ; }
bool is_divisible_by_5 ( String s ) { int n = s . Length ; return ( s [ n - 1 ] == '0' s [ n - 1 ] == '5' ) ; }
int inv ( int a , int m ) { int m0 = m , t , q ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { q = a / m ; t = m ; m = a % m ; a = t  ; t = x0 ; x0 = x1 - q * x0 ; x1 = t  ; } if ( x1 < 0 ) x1 += m0 ; return x1 ; }
bool only_first_and_last_are_set ( int n ) { if ( n == 1 ) return true ; if ( n == 2 ) return false ; return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
long divide ( long dividend , long divisor ) { long sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? - 1 : 1 ; dividend = Math . Abs ( dividend ) ; divisor = Math . Abs ( divisor ) ; long quotient = 0 , temp = 0 ; for ( int i = 31 ; i >= 0 ; -- i ) { if ( temp + ( divisor << i ) <= dividend ) { temp += divisor << i ; quotient |= 1L L << i ; } } if ( sign == - 1 ) quotient = - quotient ; return quotient ; }
char find_profession ( int level , int pos ) { if ( level == 1 ) return 'e' ; if ( find_profession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) return ( pos % 2 > 0 ) ? 'd' : 'e' ; return ( pos % 2 > 0 ) ? 'e' : 'd' ; }
bool has_close_elements ( int [ ] numbers , int threshold ) { for ( int i = 0 ; i < numbers . Length ; i ++ ) { for ( int j = i + 1 ; j < numbers . Length ; j ++ ) { int distance = Math . Abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) { return true ; } } } return false ; }
int truncate_number ( int number ) { return number % 1 ; }
bool below_zero ( List < int > operations ) { int balance = 0 ; foreach ( int op in operations ) { balance += op ; if ( balance < 0 ) return true ; } return false ; }
double mean_absolute_deviation ( int [ ] numbers ) { int sum_num = 0 ; foreach ( int num in numbers ) sum_num += num ; double mean = sum_num / numbers . Length ; double sum_abs_diff = 0 ; foreach ( int num in numbers ) sum_abs_diff += Math . Abs ( num - mean ) ; return sum_abs_diff / numbers . Length ; }
List < int > intersperse ( List < int > numbers , int delimiter ) { List < int > result = new List < int > ( ) ; if ( numbers . Count == 0 ) { return result ; } for ( int i = 0 ; i < numbers . Count - 1 ; i ++ ) { result . Add ( numbers [ i ] ) ; result . Add ( delimiter ) ; } result . Add ( numbers [ numbers . Count - 1 ] ) ; return result ; }
int [ ] sum_product ( int [ ] numbers ) { int sum_value = 0 ; int prod_value = 1 ; foreach ( int n in numbers ) { sum_value += n ; prod_value *= n ; } return new int [ ] { sum_value , prod_value } ; }
List < string > all_prefixes ( string str ) { List < string > result = new List < string > ( ) ; for ( int i = 1 ; i <= str . Length ; i ++ ) result . Add ( str . Substring ( 0 , i ) ) ; return result ; }
List < int > parse_music ( String music_String ) { List < int > current = new List < int > ( ) ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i <= music_String . Length ; i ++ ) { if ( i == music_String . Length music_String [ i ] == ' ' ) { if ( current . IndexOf ( "o" ) != - 1 ) result . Add ( 4 ) ; if ( current . IndexOf ( "o|" ) != - 1 ) result . Add ( 2 ) ; if ( current . IndexOf ( "." ) != - 1 ) result . Add ( 1 ) ; current . Clear ( ) ; } else { current . Add ( music_String [ i ] ) ; } } return result ; }
int strlen ( String s ) { return s . Length ; }
List < int > factorize ( int n ) { List < int > factors = new List < int > ( ) ; int i = 2 ; while ( i <= n ) { if ( n % i == 0 ) { factors . Add ( i ) ; n /= i ; } else i ++ ; } return factors ; }
string concatenate ( string [ ] str ) { string result = "" ; foreach ( string s in str ) result += s ; return result ; }
List < int > get_positive ( List < int > l ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) if ( l [ i ] > 0 ) result . Add ( l [ i ] ) ; return result ; }
List < int > sort_even ( List < int > l ) { List < int > evens = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i += 2 ) { evens . Add ( l [ i ] ) ; } evens . Sort ( ) ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( i % 2 == 0 ) result . Add ( evens [ i / 2 ] ) ; if ( i % 2 == 1 ) result . Add ( l [ i ] ) ; } return result ; }
string decode_cyclic ( string s ) { string output = "" ; int i = 0 ; while ( i <= s . Length - 3 ) { string x = s [ i + 2 ] + s . Substring ( i , 2 ) ; output += x ; i += 3 ; } return output + s . Substring ( i ) ; }
int car_race_collision ( int n ) { return ( int ) Math . Pow ( n , 2 ) ; }
List < int > incr_list ( List < int > l ) { List < int > result = new List < int > ( ) ; foreach ( int i in l ) result . Add ( i + 1 ) ; return result ; }
bool pairs_sum_to_zero ( List < int > l ) { for ( int i = 0 ; i < l . Count ; i ++ ) for ( int j = i + 1 ; j < l . Count ; j ++ ) if ( l [ i ] + l [ j ] == 0 ) return true ; return false ; }
string change_base ( int x , int b ) { string ret = "" ; while ( x > 0 ) { ret += x % b ; x /= b ; } return ret ; }
double median ( List < int > l ) { l . Sort ( ) ; if ( l . Count % 2 == 1 ) return l [ l . Count / 2 ] ; else return ( l [ l . Count / 2 - 1 ] + l [ l . Count / 2 ] ) / 2.0 ; }
string decode_shift ( string s ) { string result = "" ; for ( int i = 0 ; i < s . Length ; i ++ ) { char w = ( s [ i ] + 21 - 'a' ) % 26 + 'a' ; result += ( char ) w ; } return result ; }
bool below_threshold ( List < int > l , int t ) { foreach ( int n in l ) { if ( n >= t ) return false ; } return true ; }
bool correct_bracketing ( String [ ] brackets ) { int depth = 0 ; foreach ( char b in brackets ) { if ( b == '<' ) depth += 1 ; else depth -= 1 ; if ( depth < 0 ) return false ; } return depth == 0 ; }
bool monotonic ( List < int > l ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . Count ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) incr = 1 ; if ( l [ i ] < l [ i - 1 ] ) decr = 1 ; } return incr + decr != 2 ; }
List < int > derivative ( List < int > xs ) { List < int > result = new List < int > ( ) ; for ( int i = 1 ; i < xs . Count ; i ++ ) result . Add ( i * xs [ i ] ) ; return result ; }
int vowels_count ( string s ) { string vowels = "aeiouAEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { char ch = s [ i ] ; if ( vowels . IndexOf ( ch ) >= 0 ) { count ++ ; } } if ( s [ s . Length - 1 ] == "y" s [ s . Length - 1 ] == "Y" ) { count ++ ; } return count ; }
int digit_sum ( string s ) { int sum = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { char c = s [ i ] ; if ( char . IsUpper ( c ) ) sum += ( int ) c ; } return sum ; }
int fruit_distribution ( string s , int n ) { List < char > num1 = new List < char > ( ) ; List < char > num2 = new List < char > ( ) ; bool flag = false ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( char . IsDigit ( s [ i ] ) ) { if ( ! flag ) num1 . Add ( s [ i ] ) ; if ( flag ) num2 . Add ( s [ i ] ) ; } else if ( ! flag && num1 . Count > 0 ) flag = true ; } return n - num1 . Count - num2 . Count ; }
List < int > pluck ( List < int > arr ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < arr . Count ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result == null ) { result . Add ( arr [ i ] ) ; result . Add ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ]  ; result [ 1 ] = i ; } } } return result ; }
List < int > strange_sort_list ( List < int > lst ) { List < int > res = new List < int > ( ) ; Array . Sort ( lst ) ; int l = 0 , r = lst . Count - 1 ; while ( l < r ) { res . Add ( lst [ l ] ) ; l ++ ; res . Add ( lst [ r ] ) ; r -- ; } if ( l == r ) res . Add ( lst [ l ] ) ; return res ; }
double triangle_area ( int a , int b , int c ) { if ( a + b <= c a + c <= b b + c <= a ) return - 1.0 ; double s = ( a + b + c ) / 2 ; double area = Math . Sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; return area ; }
bool will_it_fly ( Query [ ] q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . Length ; i ++ ) { if ( q [ i ] != q [ q . Length - 1 ] ) return false ; sum += q [ i ] ; } return sum <= w ; }
bool is_cube ( int a ) { a = Math . Abs ( a ) ; int i = ( int ) Math . Round ( Math . Cbrt ( a ) ) ; return ( i * i * i == a ) ; }
int hex_key ( String num ) { string key = "2357BD" ; int total = 0 ; foreach ( char c in num ) { if ( key . IndexOf ( c ) >= 0 ) total += 1 ; } return total ; }
string decimal_to_binary ( int dec ) { List < string > ans = new List < string > ( ) ; if ( dec != 0 ) { while ( dec > 0 ) { ans . Add ( dec % 2 ) ; dec /= 2 ; } } else ans += "0" ; return "db" + ans . ToString ( ) + "db" ; }
bool prime_length ( string s ) { int l = s . Length ; if ( l < 2 ) { return false ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return false ; } } return true ; }
int starts_one_ends ( int n ) { if ( n < 1 ) return 0 ; if ( n == 1 ) return 1 ; return 18 * ( ( int ) Math . Pow ( 10 , n - 2 ) ) ; }
int add ( List < int > lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . Count ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; }
List < pair > get_row ( List < pair > lst , char x ) { List < pair > coords = new List < pair > ( ) ; for ( int i = 0 ; i < lst . Count ; i ++ ) { for ( int j = lst [ i ] . Count - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] [ j ] == x ) { coords . Add ( new pair ( i , j ) ) ; } } } return coords ; }
int next_smallest ( List < int > lst ) { lst . Sort ( ) ; for ( int i = 1 ; i < lst . Count ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) { return lst [ i ] ; } } return - 1 ; }
bool any_int ( int a , int b , int c ) { if ( a < 0 a < 0 b < 0 c < 0 ) return false ; if ( a + b == c a + c == b b + c == a ) return true ; return false ; }
List < int > count_up_to ( int n ) { List < int > primes = new List < int > ( ) ; for ( int i = 2 ; i < n ; i ++ ) { bool is_prime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) primes . Add ( i ) ; } return primes ; }
double closest_integer ( double value ) { double w = ( double ) value ; return w ; }
List < int > make_a_pile ( int n ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) result . Add ( n + 2 * i ) ; return result ; }
List < String > words_string ( String s ) { List < String > current = new List < String > ( ) ; List < String > words = new List < String > ( ) ; for ( int i = 0 ; i <= s . Length ; i ++ ) { if ( i == s . Length s [ i ] == ' ' s [ i ] == ',' ) { if ( current . Count > 0 ) { words . Add ( current ) ; current . Clear ( ) ; } } else { current . Add ( s [ i ] ) ; } } return words ; }
string rounded_avg ( int n , int m ) { if ( n > m ) return "-1" ; int num = ( n + m ) / 2 ; string ret = "" ; while ( num > 0 ) { ret += num % 2 ; num /= 2 ; } return ret ; }
List < int > unique_digits ( int [ ] x ) { List < int > digits = new List < int > ( ) ; foreach ( int n in x ) { bool is_unique = true ; foreach ( int c in n ) { if ( c % 2 == 0 ) { is_unique = false ; break ; } } if ( is_unique ) digits . Add ( n ) ; } digits . Sort ( ) ; return digits ; }
int count_nums ( int [ ] arr ) { int num = 0 ; for ( int i = 0 ; i < arr . Length ; i ++ ) { int neg = ( n < 0 ) ? - 1 : 1 ; n = Math . Abs ( n ) ; List < int > digits = new List < int > ( ) ; foreach ( int c in n ) { digits . Add ( c - '0' ) ; } digits [ 0 ] *= neg ; int sum = 0 ; foreach ( int d in digits ) sum += d ; if ( sum > 0 ) num ++ ; } return num ; }
bool move_one_ball ( List < int > arr ) { if ( arr . Count <= 1 ) return true ; int num = 0 ; for ( int i = 1 ; i < arr . Count ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) num ++ ; } if ( arr [ arr . Count - 1 ] > arr [ 0 ] ) num ++ ; if ( num < 2 ) return true ; return false ; }
string exchange ( int [ ] lst1 , int [ ] lst2 ) { int odd = 0 , even = 0 ; foreach ( int n in lst1 ) { if ( n % 2 == 1 ) { odd ++ ; } } foreach ( int n in lst2 ) { if ( n % 2 == 0 ) { even ++ ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; }
List < string > odd_count ( string [ ] lst ) { List < string > results = new List < string > ( ) ; string original_str = "the number of odd elements in the string i of the input." ; foreach ( string s in lst ) { int sum = 0 ; foreach ( char d in s ) { if ( d . IsDigit ( ) && d % 2 == 1 ) sum ++ ; } string result = "" ; foreach ( char c in original_str ) { if ( c == 'i' ) result . Add ( sum ) ; else result . Add ( c ) ; } results . Add ( result ) ; } return results ; }
int minSubArraySum ( int [ ] nums ) { int min_sum = int . MaxValue ; int sum = 0 ; foreach ( int num in nums ) { sum += num ; if ( min_sum > sum ) min_sum = sum ; if ( sum > 0 ) sum = 0 ; } return min_sum ; }
int max_fill ( ArrayList grid , int capacity ) { int res = 0 ; foreach ( int [ ] well in grid ) { int sum = 0 ; foreach ( int n in well ) sum += n ; if ( sum > 0 ) res += ( sum - 1 ) / capacity + 1 ; } return res ; }
List < String > select_words ( String s , int n ) { List < char > vowels = new List < char > ( ) ; List < String > current = new List < String > ( ) ; List < String > result = new List < String > ( ) ; int consonant_num = 0 ; for ( int i = 0 ; i <= s . Length ; i ++ ) { if ( i == s . Length s [ i ] == ' ' ) { if ( consonant_num == n ) { result . Add ( current ) ; } current . Clear ( ) ; consonant_num = 0 ; } else { current . Add ( s [ i ] ) ; if ( ! vowels . Contains ( s [ i ] ) ) consonant_num ++ ; } } return result ; }
int solution ( List < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . Count ; i += 2 ) { if ( lst [ i ] % 2 == 1 ) { sum += lst [ i ] ; } } return sum ; }
int add_elements ( int [ ] arr , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( - 99 <= arr [ i ] <= 99 ) sum += arr [ i ] ; } return sum ; }
List < int > get_odd_collatz ( int n ) { List < int > odd_collatz = new List < int > ( ) ; while ( n > 1 ) { if ( n % 2 == 1 ) { odd_collatz . Add ( n ) ; n = n * 3 + 1 ; } else n /= 2 ; } odd_collatz . Add ( 1 ) ; odd_collatz . Sort ( ) ; return odd_collatz ; }
bool is_sorted ( List < int > lst ) { for ( int i = 1 ; i < lst . Count ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; }
string intersection ( interval1 , interval2 ) { int inter1 = Math . Max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = Math . Min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) return "NO" ; for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) return "NO" ; } return "YES" ; }
int prod_signs ( int [ ] arr ) { if ( arr . Length == 0 ) return - 32768 ; int sum = 0 ; int prods = 1 ; for ( int i = 0 ; i < arr . Length ; i ++ ) { sum += Math . Abs ( arr [ i ] ) ; if ( i == 0 ) prods = 0 ; if ( i < 0 ) prods = - prods ; } return sum * prods ; }
List < int > minPath ( int [ , ] grid , int k ) { int n = grid . GetLength ( 0 ) ; int min_num = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i , j ] == 1 ) { List < int > tmp = new List < int > ( ) ; if ( i != 0 ) { tmp . Add ( grid [ i - 1 , j ] ) ; } if ( j != 0 ) { tmp . Add ( grid [ i , j - 1 ] ) ; } if ( i != n - 1 ) { tmp . Add ( grid [ i + 1 , j ] ) ; } if ( j != n - 1 ) { tmp . Add ( grid [ i , j + 1 ] ) ; } min_num = Math . Min ( tmp ) ; } } } List < int > ans = new List < int > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . Add ( 1 ) ; } else { ans . Add ( min_num ) ; } } return ans ; }
int digits ( int n ) { int prod = 1 ; for ( int i = 0 ; i < n . Length ; i ++ ) { if ( n [ i ] % 2 == 1 ) { if ( prod == 0 ) prod == 1 ; prod *= n [ i ] - '0' ; } } return prod ; }
bool is_nested ( String s ) { int count = 0 ; int max_count = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { char ch = s [ i ] ; if ( ch == '[' ) count ++ ; if ( ch == ']' ) count -- ; if ( count < 0 ) count = 0 ; if ( count > max_count ) max_count = count ; if ( count <= max_count - 2 ) return true ; } return false ; }
int sum_squares ( List < int > lst ) { int sum = 0 ; foreach ( int i in lst ) { sum += ( int ) Math . Ceiling ( i ) * ( int ) Math . Ceiling ( i ) ; } return sum ; }
int can_arrange ( int [ ] arr ) { int index = - 1 ; for ( int i = 0 ; i < arr . Length ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
int [ ] largest_smallest_integers ( int [ ] lst ) { int max_neg = 0 , min_pos = 0 ; for ( int i = 0 ; i < lst . Length ; i ++ ) { if ( lst [ i ] < 0 && ( max_neg == 0 n > max_neg ) ) max_neg = n ; if ( n > 0 && ( min_pos == 0 n < min_pos ) ) min_pos = n ; } return new int [ ] { max_neg , min_pos } ; }
string fix_spaces ( string text ) { string res = "" ; int space_len = 0 ; for ( int i = 0 ; i <= text . Length ; i ++ ) { if ( i == text . Length text [ i ] != ' ' ) { if ( space_len == 1 ) res . Add ( '_' ) ; if ( space_len == 2 ) res . Add ( '__' ) ; if ( space_len > 2 ) res . Add ( '-' ) ; space_len = 0 ; if ( i != text . Length ) res . Add ( text [ i ] ) ; } else { space_len ++ ; } } return res ; }
string file_name_check ( string file_name ) { int digit_num = 0 , dot_num = 0 ; if ( file_name . Length < 5 || ! char . Isalpha ( file_name [ 0 ] ) ) return "No" ; string suffix = file_name . Substring ( file_name . Length - 4 ) ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) return "No" ; foreach ( char c in file_name ) { if ( char . IsDigit ( c ) ) digit_num ++ ; if ( c == '.' ) dot_num ++ ; } if ( digit_num > 3 dot_num != 1 ) return "No" ; return "Yes" ; }
int sum_squares ( List < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . Count ; i ++ ) { if ( i % 3 == 0 ) sum += lst [ i ] * lst [ i ] ; else if ( i % 4 == 0 ) sum += lst [ i ] * lst [ i ] * lst [ i ] ; else sum += lst [ i ]  ; } return sum ; }
void words_in_sentence ( String sentence ) { List < String > result = new List < String > ( ) ; List < String > current = new List < String > ( ) ; for ( int i = 0 ; i <= sentence . Length ; i ++ ) { if ( i == sentence . Length sentence [ i ] == ' ' ) { bool is_prime = true ; int l = current . Count ; if ( l < 2 ) is_prime = false ; for ( int j = 2 ; j < l ; j ++ ) { if ( j % 2 == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { result . Add ( current + " " ) ; } current . Clear ( ) ; } else current . Add ( sentence [ i ] ) ; } result . Join ( "" ) ; if ( result . Count > 0 ) { result = reverse ( result ) ; } }
bool simplify ( String x , String n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . Length ; i ++ ) if ( x [ i ] == '/' ) { a = x . Substring ( 0 , i ) ; b = x . Substring ( i + 1 ) ; } for ( int i = 0 ; i < n . Length ; i ++ ) if ( n [ i ] == '/' ) { c = n . Substring ( 0 , i ) ; d = n . Substring ( i + 1 ) ; } return ( a * c ) % ( b * d ) == 0 ; }
int specialFilter ( int [ ] nums ) { int count = 0 ; foreach ( int num in nums ) { if ( num > 10 ) { string w = num . ToString ( ) ; if ( w [ 0 ] % 2 == 1 && w [ w . Length - 1 ] % 2 == 1 ) count += 1 ; } } return count ; }
int get_max_triples ( int n ) { int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = i * i - i + 1 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) count ++ ; } } } return count ; }
int double_the_difference ( int [ ] lst ) { int sum = 0 ; foreach ( int d in lst ) { int num = ( int ) Math . Round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) sum += num * num ; } } return sum ; }
List < int > compare ( List < int > game , List < int > guess ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < game . Count ; ++ i ) result . Add ( Math . Abs ( game [ i ] - guess [ i ] ) ) ; return result ; }
string strongest_extension ( string class_name , string [ ] extensions ) { string strongest = "" ; int max = int . MinValue ; foreach ( string extension in extensions ) { int strength = 0 ; foreach ( char chr in extension ) { if ( Char . IsUpper ( chr ) ) { strength ++ ; } if ( Char . IsLower ( chr ) ) { strength -- ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return class_name + "." + strongest ; }
void int_to_mini_roman ( int number ) { String num = { 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 } ; String sym = { "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" } ; int pos = 0 ; String res = "" ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res += sym [ pos ] ; number -= num [ pos ] ; } if ( number > 0 ) { pos ++ ; } } Console . Write ( res ) ; }
int [ ] eat ( int number , int need , int remaining ) { return need > remaining ? new int [ number + remaining , 0 ] : new int [ need , remaining - need ] ; }
int do_algebra ( List < int > ops , List < int > operands ) { List < int > nums = new List < int > ( ) ; List < int > current_ops = new List < int > ( ) ; for ( int i = 0 ; i < current_ops . Count - 1 ; i -- ) { if ( current_ops [ i ] == "**" ) { nums [ i ] = ( int ) Math . Pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . RemoveAt ( i + 1 ) ; current_ops . RemoveAt ( i ) ; } } for ( int i = 0 ; i < current_ops . Count ; i ++ ) { if ( current_ops [ i ] == '*' ) { nums [ i ] *= nums [ i + 1 ] ; nums . RemoveAt ( i + 1 ) ; current_ops . RemoveAt ( i ) ; } else if ( current_ops [ i ] == "//" ) { nums [ i ] /= nums [ i + 1 ] ; nums . RemoveAt ( i + 1 ) ; current_ops . RemoveAt ( i ) ; } else { i ++ ; } } for ( int i = 0 ; i < current_ops . Count ; i ++ ) { if ( current_ops [ i ] == "+" ) { nums [ i ] += nums [ i + 1 ] ; nums . RemoveAt ( i + 1 ) ; current_ops . RemoveAt ( i ) ; } else if ( current_ops [ i ] == "-" ) { nums [ i ] -= nums [ i + 1 ] ; nums . RemoveAt ( i + 1 ) ; current_ops . RemoveAt ( i ) ; } else { i ++ ; } } return nums [ 0 ] ; }
List < int > generate_integers ( int a , int b ) { int lower = Math . Max ( 2 , Math . Min ( a , b ) ) ; int upper = Math . Min ( 8 , Math . Max ( a , b ) ) ; List < int > result = new List < int > ( ) ; for ( int i = lower ; i <= upper ; i = i + 2 ) { result . Add ( i ) ; } return result ; }
bool isStepNum ( int n ) { int prev_digit = - 1 ; while ( n > 0 ) { int cur_digit = n % 10 ; if ( prev_digit == - 1 ) { prev_digit = cur_digit ; } else { if ( Math . Abs ( prev_digit - cur_digit ) != 1 ) { return false ; } } prev_digit = cur_digit ; n /= 10 ; } return true ; }
int num_of_ways ( int n , int k ) { int p = 1 ; if ( k % 2 == 1 ) p = - 1 ; return ( ( int ) Math . Pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; }
List < int > find_divisors ( int n ) { List < int > v = new List < int > ( ) ; for ( int i = 1 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) v . Add ( i ) ; else { v . Add ( i ) ; v . Add ( n / i ) ; } } } return v ; }
int egg_drop ( int n , int k ) { if ( k == 1 k == 0 ) return k ; if ( n == 1 ) return k ; int min = int . MaxValue ; for ( int x = 1 ; x <= k ; x ++ ) { int res = Math . Max ( egg_drop ( n - 1 , x - 1 ) , egg_drop ( n , k - x ) ) ; if ( res < min ) min = res ; } return min + 1 ; }
bool is_power_of_two ( int n ) { return ( Math . Ceiling ( Math . Log ( n ) / Math . Log ( 2 ) ) == Math . Floor ( Math . Log ( n ) / Math . Log ( 2 ) ) ) ; }
string shortest_palindrome ( string s ) { int n = s . Length ; List < string > v = new List < string > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i , r = i ; string ans1 = "" , ans2 = "" ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans1 += s [ l ] ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans2 += s [ l ] ; l -- ; r ++ ; } v . Add ( ans1 ) ; v . Add ( ans2 ) ; } string ans = v [ 0 ] ; for ( int i = 0 ; i < v . Count ; i ++ ) { if ( v [ i ] != "" ) { ans = Math . Min ( ans , v [ i ] ) ; } } return ans ; }
int minimum_adjacent_difference ( int [ ] a , int n , int k ) { int min_diff = int . MaxValue ; for ( int i = 0 ; i <= k ; i ++ ) { int max_diff = int . MinValue ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { max_diff = Math . Max ( max_diff , a [ p + 1 ] - a [ p ] ) ; } } min_diff = Math . Min ( min_diff , max_diff ) ; } return min_diff ; }
int cal ( List < int > a , int mid ) { int chocolate = 0 ; foreach ( int i in a ) { if ( i >= mid ) chocolate += i - mid ; } return chocolate ; }
bool check ( long v , long [ ] a , long m ) { long tec = 0 , ans = 0 ; long [ ] b = new long [ a . Length + 3 ] ; for ( int i = 0 ; i < a . Length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { long mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; }
int largest_num ( int [ ] arr ) { int res = 0 ; Array . Sort ( arr ) ; int l = 0 , r = arr . Length - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . Max ( res , Math . Max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) l ++ ; else r -- ; } return res ; }
int binary_search ( int [ ] p , int n ) { int i = 0 ; int j = p . Length - 1 ; int index = - 1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
int find_min_length ( List < int > arr ) { int index = arr . Count - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) index -- ; return index ; }
int min_digits ( int n , int k ) { int digits_num = ( int ) Math . Floor ( Math . Log10 ( n ) + 1 ) ; int temp_sum = 0 , temp = digits_num ; int result = 0 , x = 0 , v = 0 ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) x = 0 ; else { while ( temp > 0 ) { v = n / ( int ) Math . Pow ( 10 , temp - 1 ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v /= 10 ; v += 1 ; result = v * ( int ) Math . Pow ( 10 , temp ) ; break ; } temp -= 1 ; } x = result - n ; return x ; } }
int check_for_perfect_square ( int [ ] arr , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; }
int min_flips ( String [ ] mat , String s ) { int n = mat . GetLength ( 0 ) ; int m = mat . GetLength ( 1 ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s [ i + j ] - '0' ) count ++ ; } } return count ; }
List < List < int > > construct_tree ( int n , int [ , ] edges ) { List < List < int > > adjl = new List < List < int > > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { adjl . Add ( new List < int > ( ) ) ; } foreach ( int [ ] e in edges ) { int u = e [ 0 ] , v = e [ 1 ] ; adjl [ u ] . Add ( v ) ; adjl [ v ] . Add ( u ) ; } return adjl ; }
int find_sum_of_values ( int v , int [ ] parent , int [ ] values_children ) { int cur_node = v ; int sum = 0 ; while ( cur_node != - 1 ) { sum += values_children [ cur_node ] ; cur_node = parent [ cur_node ] ; } return sum ; }
long get_distinct ( long d , long count ) { long num = 0 ; count = ( long ) Math . Pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; }
bool is_increasing ( int [ ] arr ) { for ( int i = 0 ; i < arr . Length - 1 ; i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) return false ; return true ; }
int min_adj_swaps ( int [ , ] mat ) { int n = mat . GetLength ( 0 ) ; int [ ] cnt_zero = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 ; j -- ) { if ( mat [ i , j ] != 0 ) break ; cnt_zero [ i ] ++ ; } } int cnt_swaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cnt_zero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) first ++ ; if ( first == n ) return - 1 ; while ( first > i ) { int temp = cnt_zero [ first ] ; cnt_zero [ first ] = cnt_zero [ first - 1 ] ; cnt_zero [ first - 1 ] = temp ; first -- ; cnt_swaps ++ ; } } } return cnt_swaps ; }
int solve ( ArrayList values , ArrayList salary , int mod ) { int ret = 1 ; int amt = 0 ; values . Sort ( ) ; salary . Sort ( ) ; while ( salary . Count > 0 ) { while ( values . Count > 0 && ( int ) values [ values . Count - 1 ] >= ( int ) salary [ salary . Count - 1 ] ) { amt ++ ; values . RemoveAt ( values . Count - 1 ) ; } if ( amt == 0 ) return 0 ; ret *= amt -- ; ret %= mod ; salary . RemoveAt ( salary . Count - 1 ) ; } return ret ; }
int [ ] organize_in_order ( int [ ] vec , int [ ] op , int n ) { int [ ] result = new int [ n ] ; Array . Sort ( vec ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; }
int count_points ( int n , int m , int [ ] a , int [ ] b , int x , int y ) { Array . Sort ( a ) ; Array . Sort ( b ) ; int j = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) break ; if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else j ++ ; } } return count ; }
bool are_same ( int a , int b ) { Array . Sort ( a ) ; Array . Sort ( b ) ; return a == b ; }
int count_number_of_strings ( string s ) { int n = s . Length - 1 ; int count = ( int ) Math . Pow ( 2 , n ) ; return count ; }
List < int > prime_power ( int x ) { List < int > prime_pow = new List < int > ( ) ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } prime_pow . Add ( p ) ; } } if ( x > 1 ) prime_pow . Add ( x ) ; return prime_pow ; }
int is_perfect ( int n0 ) { double n = Math . Sqrt ( n0 ) ; if ( Math . Floor ( n ) != Math . Ceiling ( n ) ) return 0 ; return 1 ; }
int find_sum ( int l , int r ) { List < int > arr = new List < int > ( ) ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . Add ( i + x ) ; if ( i + 1 <= r ) arr . Add ( i + 1 + x ) ; x *= - 1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; i ++ ) sum += arr [ i ] ; return sum ; }
int results ( int n , int k ) { return ( int ) Math . Round ( Math . Pow ( n , ( int ) 1.0 / 2.0 ) ) ; }
List < int > factors ( int n ) { List < int > v = new List < int > ( ) ; v . Add ( 1 ) ; for ( int i = 2 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . Add ( i ) ; if ( n / i != i ) v . Add ( n / i ) ; } } return v ; }
int smallest_num ( int n ) { float x = ( float ) ( Math . Pow ( 10 , ( n - 1 ) / 2.0 ) ) ; return ( int ) ( Math . Ceiling ( x ) ) ; }
int smallest ( String s ) { int [ ] a = new int [ s . Length ] ; for ( int i = 0 ; i < s . Length ; i ++ ) { a [ i ] = ( int ) ( s [ i ] - '0' ) ; } List < int > b = new List < int > ( ) ; for ( int i = 0 ; i < a . Length ; i ++ ) { if ( a [ i ] % 2 != 0 ) b . Add ( a [ i ] ) ; } b . Sort ( ) ; if ( b . Count > 1 ) return b [ 0 ] * 10 + b [ 1 ] ; return - 1 ; }
List < double > diagonals ( int a , int b , int c , int d ) { List < double > ans = new List < double > ( ) ; ans . Add ( Math . Sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . Add ( Math . Sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; }
int find_number_of_digits ( int n , int base1 ) { int dig = ( int ) Math . Floor ( Math . Log ( n ) / Math . Log ( base1 ) ) + 1 ; return dig ; }
double n_gon ( int n ) { double pro_angle_var ; if ( n % 4 == 0 ) { pro_angle_var = Math . PI * ( 180.0 / n ) / 180 ; } else { pro_angle_var = Math . PI * ( 180.0 / ( 2 * n ) ) / 180 ; } double neg_x = 1.0e+99 , pos_x = - 1.0e+99 , neg_y = 1.0e+99 , pos_y = - 1.0e+99 ; for ( int j = 0 ; j < n ; ++ j ) { double px = Math . Cos ( 2 * Math . PI * j / n + pro_angle_var ) ; double py = Math . Sin ( 2 * Math . PI * j / n + pro_angle_var ) ; neg_x = Math . Min ( neg_x , px ) ; pos_x = Math . Max ( pos_x , px ) ; neg_y = Math . Min ( neg_y , py ) ; pos_y = Math . Max ( pos_y , py ) ; } double opt2 = Math . Max ( pos_x - neg_x , pos_y - neg_y )  ; return opt2 / Math . Sin ( Math . PI / n ) / 2 ; }
int find_max_k ( int n ) { int p = ( int ) ( Math . Log ( n ) / Math . Log ( 2 ) ) ; return ( int ) Math . Pow ( 2 , p ) ; }
int nth_fibo ( int n ) { double a = ( Math . Pow ( 5 , 0.5 ) + 1 ) / 2 ; double b = ( Math . Pow ( - 5 , 0.5 ) + 1 ) / 2 ; double r = Math . Pow ( 5 , 0.5 ) ; double ans = ( Math . Pow ( a , n ) - Math . Pow ( b , n ) ) / r ; return ( int ) ans ; }
float find_prob ( int l , int r ) { double count_of_ps = Math . Floor ( Math . Sqrt ( r ) ) - Math . Ceiling ( Math . Sqrt ( l ) ) + 1 ; double total = r - l + 1 ; float prob = count_of_ps / total ; return prob ; }
double previous_fibonacci ( double n ) { double a = n / ( ( 1 + Math . Sqrt ( 5 ) ) / 2.0 ) ; return Math . Round ( a ) ; }
List < int > dist_prime ( int [ ] arr , List < int > all_primes ) { List < int > list = new List < int > ( ) ; for ( int i = 0 ; i < all_primes . Count ; i ++ ) { foreach ( int j in arr ) { if ( j % i == 0 ) { list . Add ( i ) ; break ; } } } return list ; }
List < int > get_array ( int n ) { List < int > ans = new List < int > ( ) ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) ans . Add ( p2 ) ; n >>= 1 ; p2 *= 2 ; } return ans ; }
int maximum_length ( List < int > a ) { int [ ] counts = new int [ 11 ] ; int ans = 0 ; for ( int index = 0 ; index < a . Count ; index ++ ) { counts [ a [ index ] ] += 1 ; List < int > k = new List < int > ( ) ; foreach ( int i in counts ) if ( i != 0 ) k . Add ( i ) ; k . Sort ( ) ; if ( k . Count == 1 || ( k [ 0 ] == k [ k . Count - 2 ] && k [ k . Count - 1 ] - k [ k . Count - 2 ] == 1 ) || ( k [ 0 ] == 1 && k [ 1 ] == k [ k . Count - 1 ] ) ) ans = index ; } return ans + 1 ; }
double max_edges ( double n ) { double edges = Math . Floor ( n * n / 4 ) ; return edges ; }
int find_k ( int n , int k ) { List < int > a = new List < int > ( ) ; for ( int i = 1 ; i < n ; i ++ ) if ( i % 2 == 1 ) a . Add ( i ) ; for ( int i = 1 ; i < n ; i ++ ) if ( i % 2 == 0 ) a . Add ( i ) ; return a [ k - 1 ] ; }
bool is_keith ( int x , int temp ) { ArrayList terms = new ArrayList ( ) ; int n = 0 ; while ( temp > 0 ) { terms . Add ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } terms . Reverse ( ) ; int next_term = 0 , i = n ; while ( next_term < x ) { next_term = 0 ; for ( int j = 1 ; j <= n ; j ++ ) next_term += ( int ) terms [ i - j ] ; terms . Add ( next_term ) ; i ++ ; } return ( next_term == x ) ; }
bool factors ( int n , int k ) { List < int > v = new List < int > ( ) ; while ( n % 2 == 0 ) { v . Add ( 2 ) ; n /= 2 ; } if ( v . Count >= k ) return true ; for ( int i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n = n / i ; v . Add ( i ) ; } if ( v . Count >= k ) return true ; } if ( n > 2 ) v . Add ( n ) ; if ( v . Count >= k ) return true ; return false ; }
List < string > separate_paren_groups ( string paren_string ) { List < string > all_parens = new List < string > ( ) ; List < char > current_paren = new List < char > ( ) ; int current_depth = 0 ; for ( int i = 0 ; i < paren_string . Length ; i ++ ) { char c = paren_string [ i ] ; if ( c == '(' ) { current_depth ++ ; current_paren . Add ( c ) ; } else if ( c == ')' ) { current_depth -- ; current_paren . Add ( c ) ; if ( current_depth == 0 ) { all_parens . Add ( current_paren ) ; current_paren . Clear ( ) ; } } } return all_parens ; }
List < int > parse_nested_parens ( String paren_String ) { List < int > all_levels = new List < int > ( ) ; int level = 0 ; int max_level = 0 ; for ( int i = 0 ; i < paren_String . Length ; i ++ ) { char chr = paren_String [ i ] ; if ( chr == '(' ) { level ++ ; if ( level > max_level ) { max_level = level ; } } if ( chr == ')' ) { level -- ; if ( level == 0 ) { all_levels . Add ( max_level ) ; max_level = 0 ; } } } return all_levels ; }
List < String > filter_by_substring ( String [ ] strings , String substring ) { List < String > result = new List < String > ( ) ; foreach ( String s in strings ) { if ( substring . Equals ( s ) ) { result . Add ( s ) ; } } return result ; }
List < int > rolling_max ( int [ ] numbers ) { int running_max = 0 ; List < int > result = new List < int > ( ) ; foreach ( int n in numbers ) { if ( n > running_max ) running_max = n ; result . Add ( running_max ) ; } return result ; }
string make_palindrome ( string s ) { if ( s . Length == 0 ) { return "" ; } for ( int i = 0 ; i < s . Length ; i ++ ) { string r_str = s . Substring ( i ) ; if ( r_str == r_str . Substring ( 0 , i ) ) { string n_str = s . Substring ( 0 , i ) ; string n2_str = n_str . Substring ( 0 , i ) ; return s + n2_str ; } } return s . Substring ( 0 , 2 ) + s . Substring ( 2 ) ; }
string string_xor ( string a , string b ) { string result = "" ; for ( int i = 0 ; i < a . Length ; i ++ ) { if ( a [ i ] == b [ i ] ) result += "0" ; else result += "1" ; } return result ; }
string longest ( string [ ] str ) { if ( str . Length == 0 ) { return "" ; } int max_len = Math . Max ( str . Length , str . Length ) ; foreach ( string s in str ) { if ( s . Length == max_len ) { return s ; } } return "" ; }
string string_sequence ( int n ) { string s = "" ; for ( int i = 0 ; i < n ; i ++ ) { s += i + " " ; } s += n ; return s ; }
int count_distinct_characters ( string s ) { HashSet < char > distinct = new HashSet < char > ( ) ; foreach ( char c in Char . ToLower ( s ) ) { distinct . Add ( c ) ; } return distinct . Count ; }
int how_many_times ( string s , string sub ) { int times = 0 ; for ( int i = 0 ; i <= ( s . Length - sub . Length ) ; i ++ ) if ( s . Substring ( i , sub . Length ) . Equals ( sub ) ) times += 1 ; return times ; }
string sort_numbers ( string numbers ) { Dictionary < string , string > to_num = new Dictionary < string , string > ( ) ; to_num . Add ( "one" , 1 ) ; to_num . Add ( "two" , 2 ) ; int three = 3 , "four" : 4 , "five" : 5 ; int six" : 6 , "seven" : 7 , "eight" : 8 , "nine" : 9 } ; Dictionary < string , string > from_num = new Dictionary < string , string > ( ) ; from_num . Add ( 0 , "one" ) ; 2 . Add ( "two" , 1 ) ; 3 . Add ( "three" , 3 ) ; 4 . Add ( "four" , 5 ) ; 6 . Add ( "six" , 7 ) ; int 8 = "eight" , 9 = "nine" ; Dictionary < string , string > ints = new List < string > ( ) ; string current = new String ( ) ; for ( int i = 0 ; i <= numbers . Length ; i ++ ) { if ( i == numbers . Length numbers [ i ] == ' ' ) { if ( to_num . ContainsKey ( current ) ) { ints . Add ( to_num [ current ] ) ; current . Clear ( ) ; } } else { current . Add ( numbers [ i ] ) ; } } ints . Sort ( ) ; string result = new List < string > ( ) ; for ( int i = 0 ; i < ints . Count ; i ++ ) { result . Add ( from_num [ ints [ i ] ] ) ; if ( i != ints . Count - 1 ) result . Add ( " " ) ; } return result ; }
List < int > find_closest_elements ( List < int > numbers ) { List < int > closest_pair = new List < int > ( ) { numbers [ 0 ] , numbers [ 1 ] } ; int distance = Math . Abs ( closest_pair [ 0 ] - closest_pair [ 1 ] ) ; for ( int i = 0 ; i < numbers . Count ; i ++ ) { for ( int j = i + 1 ; j < numbers . Count ; j ++ ) { if ( Math . Abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closest_pair . Add ( numbers [ i ] ) ; closest_pair . Add ( numbers [ j ] ) ; distance = Math . Abs ( numbers [ i ] - numbers [ j ] ) ; } } } closest_pair . Sort ( ) ; return closest_pair ; }
List < float > rescale_to_unit ( int [ ] numbers ) { int min_num = numbers . Min ( ) ; int max_num = numbers . Max ( ) ; List < float > result = new List < float > ( ) ; foreach ( int n in numbers ) { result . Add ( ( n - min_num ) / ( max_num - min_num ) ) ; } return result ; }
List < int > filter_integers ( int [ ] values ) { List < int > result = new List < int > ( ) ; foreach ( int e in values ) { if ( Int32 . Parse ( e ) == 1 ) { result . Add ( e ) ; } } return result ; }
List < int > remove_duplicates ( List < int > numbers ) { Dictionary < int , int > counter = new Dictionary < int , int > ( ) ; foreach ( int i in numbers ) { if ( counter . ContainsKey ( i ) ) { counter [ i ] = counter [ i ] + 1 ; } else { counter . Add ( i , 1 ) ; } } List < int > result = new List < int > ( ) ; foreach ( int i in numbers ) { if ( counter [ i ] == 1 ) { result . Add ( i ) ; } } return result ; }
string flip_case ( string s ) { string result = "" ; for ( int i = 0 ; i < s . Length ; i ++ ) { char c = s [ i ] ; if ( char . IsLower ( c ) ) result += c . ToUpper ( ) ; else result += c . ToLower ( ) ; } return result ; }
List < String > filter_by_prefix ( String [ ] strings , String prefix ) { List < String > result = new List < String > ( ) ; for ( int i = 0 ; i < strings . Length ; i ++ ) { if ( strings [ i ] . StartsWith ( prefix ) ) { result . Add ( strings [ i ] ) ; } } return result ; }
double find_zero ( int [ ] xs ) { double ans = 0 ; double value = 0 ; for ( int i = 0 ; i < xs . Length ; i ++ ) { value += xs [ i ] * Math . Pow ( ans , i ) ; } while ( Math . Abs ( value ) > eps ) { double driv = 0 ; for ( int i = 1 ; i < xs . Length ; i ++ ) { driv += xs [ i ] * Math . Pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . Length ; i ++ ) { value += xs [ i ] * Math . Pow ( ans , i ) ; } } return ans ; }
List < int > sort_third ( List < int > l ) { List < int > thirds = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i += 3 ) { thirds . Add ( l [ i ] ) ; } thirds . Sort ( ) ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( i % 3 == 0 ) { result . Add ( thirds [ i / 3 ] ) ; } else { result . Add ( l [ i ] ) ; } } return result ; }
List < int > unique ( List < int > l ) { List < int > result = new List < int > ( ) ; unique_set ( l ) ; return result ; }
int max_element ( int [ ] l ) { return l . Max ( ) ; }
bool triples_sum_to_zero ( List < int > l ) { for ( int i = 0 ; i < l . Count ; i ++ ) { for ( int j = i + 1 ; j < l . Count ; j ++ ) { for ( int k = j + 1 ; k < l . Count ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) { return true ; } } } } return false ; }
int fib4 ( int n ) { int [ ] results = { 0 , 0 , 2 , 0 } ; for ( int i = 4 ; i <= n ; i ++ ) results [ i ] = results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ; return results [ n ] ; }
bool is_palindrome ( string text ) { string pr = text . Substring ( 0 , text . Length - 1 ) ; return ( pr . Equals ( text ) ) ; }
string remove_vowels ( string text ) { string result = "" ; string vowels = "aeiou" ; for ( int i = 0 ; i < text . Length ; i ++ ) { char ch = text [ i ] ; if ( ! vowels . IndexOf ( ch ) >= 0 ) { result += ch ; } } return result ; }
bool same_chars ( string s0 , string s1 ) { HashSet < char > set0 = new HashSet < char > ( ) ; for ( int i = 0 ; i < s0 . Length ; i ++ ) set0 . Add ( s0 [ i ] ) ; HashSet < char > set1 = new HashSet < char > ( ) ; for ( int i = 0 ; i < s1 . Length ; i ++ ) set1 . Add ( s1 [ i ] ) ; return set0 == set1 ; }
List < int > common ( List < int > l1 , List < int > l2 ) { HashSet < int > us = new HashSet < int > ( ) ; foreach ( int e1 in l1 ) foreach ( int e2 in l2 ) { if ( e1 == e2 ) us . Add ( e1 ) ; } List < int > ret = new List < int > ( ) ; foreach ( int us in us ) ret . Add ( us ) ; ret . Sort ( ) ; return ret ; }
bool correct_bracketing ( string [ ] brackets ) { int depth = 0 ; foreach ( char b in brackets ) { if ( b == '(' ) depth ++ ; else depth -- ; if ( depth < 0 ) return false ; } return depth == 0 ; }
string circular_shift ( int x , int shift ) { string s = x . ToString ( ) ; if ( shift > s . Length ) return s . Substring ( 0 , shift ) ; return s . Substring ( shift ) + s . Substring ( 0 , shift ) ; }
int search ( List < int > lst ) { Dictionary < int , int > counter = new Dictionary < int , int > ( ) ; foreach ( int i in lst ) { if ( counter . ContainsKey ( i ) ) { counter [ i ] = counter [ i ] + 1 ; } else { counter . Add ( i , 1 ) ; } } int ans = - 1 ; foreach ( KeyValuePair < int , int > entry in counter ) { if ( entry . Key >= ans ) { ans = entry . Key ; } } return ans ; }
int smallest_change ( List < int > arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . Count / 2 ; i ++ ) { if ( arr [ i ] != arr [ - i - 1 ] ) ans ++ ; } return ans ; }
List < string > total_match ( List < string > lst1 , List < string > lst2 ) { int sum1 = 0 ; foreach ( string str in lst1 ) { sum1 += str . Length ; } int sum2 = 0 ; foreach ( string str in lst2 ) { sum2 += str . Length ; } return ( sum1 > sum2 ) ? lst2 : lst1 ; }
bool is_happy ( string s ) { if ( s . Length < 3 ) return false ; for ( int i = 0 ; i < s . Length - 2 ; i ++ ) { if ( s [ i ] == s [ i + 1 ] s [ i + 1 ] == s [ i + 2 ] s [ i ] == s [ i + 2 ] ) return false ; } return true ; }
List < String > numerical_letter_grade ( List < String > grades ) { List < String > letter_grade = new List < String > ( ) ; foreach ( String gpa in grades ) { if ( gpa == 4.0 ) letter_grade . Add ( "A+" ) ; else if ( gpa > 3.7 ) letter_grade . Add ( "A" ) ; else if ( gpa > 3.3 ) letter_grade . Add ( "A-" ) ; else if ( gpa > 3.0 ) letter_grade . Add ( "B+" ) ; else if ( gpa > 2.7 ) letter_grade . Add ( "B" ) ; else if ( gpa > 2.3 ) letter_grade . Add ( "B-" ) ; else if ( gpa > 2.0 ) letter_grade . Add ( "C+" ) ; else if ( gpa > 1.7 ) letter_grade . Add ( "C" ) ; else if ( gpa > 1.3 ) letter_grade . Add ( "C-" ) ; else if ( gpa > 1.0 ) letter_grade . Add ( "D+" ) ; else if ( gpa > 0.7 ) letter_grade . Add ( "D" ) ; else if ( gpa > 0.0 ) letter_grade . Add ( "D-" ) ; else letter_grade . Add ( "E" ) ; } return letter_grade ; }
string solve ( int n ) { string bi_str = "" ; int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += n [ i ] - '0' ; } while ( sum > 0 ) { bi_str += sum % 2 ; sum /= 2 ; } return bi_str ; }
string anti_shuffle ( string s ) { string ret = "" ; List < string > current = new List < string > ( ) ; for ( int i = 0 ; i <= s . Length ; i ++ ) { if ( i == s . Length s [ i ] == ' ' ) { current . Sort ( ) ; if ( ret != "" ) ret += " " ; ret += current . ToString ( ) ; current . Clear ( ) ; } else { current . Add ( s [ i ] ) ; } } return ret ; }
void sort_array ( int [ ] array ) { if ( array . Length == 0 ) return ; if ( ( array [ 0 ] + array [ array . Length - 1 ] ) % 2 == 1 ) Array . Sort ( array ) ; else Array . Sort ( array ) ; Array . Reverse ( array ) ; }
string encrypt ( string s ) { string ans = "" ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( char . IsAlpha ( c ) ) { ans += ( char ) ( "a" + ( c - "a" + 4 ) % 26 ) ; } else { ans += c ; } } return ans ; }
int is_bored ( String s ) { bool is_start = true ; int sum = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == '.' s [ i ] == '?' s [ i ] == "!" ) is_start = true ; else if ( is_start ) { if ( s [ i ] == ' ' ) continue ; if ( s . Substring ( i , 2 ) . Equals ( "I" ) ) sum += 1 ; is_start = false ; } } return sum ; }
string encode ( string message ) { string vowels = "aeiouAEIOU" ; List < char > ret = new List < char > ( ) ; for ( int i = 0 ; i < message . Length ; i ++ ) { char c = message [ i ] ; if ( char . IsUpper ( c ) ) { c = char . ToLower ( c ) ; if ( vowels . Contains ( c ) ) { c = ( char ) ( "a" + ( c - "a" + 2 ) % 26 ) ; } } else if ( char . IsLower ( c ) ) { c = char . ToUpper ( c ) ; if ( vowels . Contains ( c ) ) { c = ( char ) ( "A" + ( c - "A" + 2 ) % 26 ) ; } } ret . Add ( c ) ; } return ret ; }
int skjkasdkd ( List < int > lst ) { int largest = 0 ; for ( int i = 0 ; i < lst . Count ; i ++ ) { if ( lst [ i ] > largest ) { bool prime = true ; for ( int j = 2 ; j < n ; j ++ ) { if ( n % j == 0 ) prime = false ; } if ( prime ) largest = n ; } } int sum = 0 ; string s = largest . ToString ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) sum += s [ i ] - '0' ; return sum ; }
bool check_dict_case ( Dictionary < char , char > dict ) { if ( dict == null ) return false ; int is_lower = 0 ; int is_upper = 0 ; foreach ( char c in dict . Keys . ToList ( ) ) { if ( char . IsLower ( c ) ) is_lower = 1 ; else if ( char . IsUpper ( c ) ) is_upper = 1 ; else return false ; } return ( is_lower + is_upper == 1 ) ; }
int multiply ( int a , int b ) { return ( Math . Abs ( a ) % 10 ) * ( Math . Abs ( b ) % 10 ) ; }
int count_upper ( string s ) { string u_vowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . Length ; i += 2 ) { if ( u_vowel . IndexOf ( s [ i ] ) >= 0 ) count += 1 ; } return count ; }
List < string > by_length ( List < string > arr ) { Dictionary < string , string > num_to = new Dictionary < string , string > ( ) ; num_to . Add ( 1 , "One" ) ; num_to . Add ( 2 , "Two" ) ; num_to . Add ( 3 , "Three" ) ; 4 . Add ( 4 , "Four" ) ; 5 . Add ( Five ) ; int 6 = "Six" ; int 7 = "Seven" ; int 8 = "Eight" , 9 = "Nine" ; List < string > sorted_arr = new List < string > ( ) ; sorted_arr . Sort ( ) ; sorted_arr . Reverse ( ) ; List < string > new_arr = new List < string > ( ) ; foreach ( string n in sorted_arr ) { if ( n >= 1 && n <= 9 ) { new_arr . Add ( num_to [ n ] ) ; } } return new_arr ; }
List < int > f ( int n ) { int sum = 0 , prod = 1 ; List < int > result = new List < int > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) result . Add ( prod ) ; else result . Add ( sum ) ; } return result ; }
void even_odd_palindrome ( int n ) { int even_count = 0 , odd_count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { string s = i . ToString ( ) ; string r_str = s . Substring ( 0 , i . Length - 1 ) ; if ( s == r_str ) { if ( i % 2 == 1 ) odd_count ++ ; else even_count ++ ; } } Console . WriteLine ( even_count + " " + odd_count ) ; }
Dictionary < char , int > histogram ( String test ) { Dictionary < char , int > count = new Dictionary < char , int > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . Length ; i ++ ) { if ( test [ i ] != ' ' ) { if ( count . ContainsKey ( test [ i ] ) ) { count [ test [ i ] ] = count [ test [ i ] ] + 1 ; } else { count . Add ( test [ i ] , 1 ) ; } if ( count [ test [ i ] ] > max ) max = count [ test [ i ] ] ; } } Dictionary < char , int > result = new Dictionary < char , int > ( ) ; foreach ( KeyValuePair < char , int > entry in count ) { if ( entry . Value == max ) result . Add ( entry . Key , entry . Value ) ; } return result ; }
void reverse_delete ( string s , string c ) { List < char > ret = new List < char > ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( ! c . Contains ( s [ i ] ) ) ret . Add ( s [ i ] ) ; } string flag = "False" ; if ( ret . Equals ( ret . Substring ( 0 , ret . Length - 1 ) ) ) flag = "True" ; Console . Write ( "[" + ret + "]" ) ; }
void sort_array ( int [ ] arr ) { ArrayList bin = new ArrayList ( ) ; for ( int i = 0 ; i < arr . Length ; i ++ ) { int b = 0 , n = Math . Abs ( arr [ i ] ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . Add ( b ) ; } for ( int i = 0 ; i < arr . Length ; i ++ ) { for ( int j = 1 ; j < arr . Length ; j ++ ) { if ( arr [ j ] < bin [ j - 1 ] || ( bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) ) { int temp = bin [ j ] ; bin [ j ] = bin [ j - 1 ] ; bin [ j - 1 ] = temp ; arr [ j ] = arr [ j ] ; arr [ j - 1 ] = temp ; } } } }
char get_closest_vowel ( string word ) { HashSet < char > vowels = new HashSet < char > ( ) ; for ( int i = word . Length - 2 ; i > 0 ; i -- ) { if ( vowels . Contains ( word [ i ] ) && ! vowels . Contains ( word [ i + 1 ] ) && ! vowels . Contains ( word [ i - 1 ] ) ) { return word [ i ] ; } } return "" ; }
string match_parens ( List < string > lst ) { List < string > list = new List < string > ( ) ; list . Add ( lst [ 0 ] + lst [ 1 ] ) ; list . Add ( lst [ 1 ] + lst [ 0 ] ) ; foreach ( string l in list ) { int count = 0 ; foreach ( char c in l ) { if ( c == '(' ) count ++ ; if ( c == ')' ) count -- ; if ( count < 0 ) break ; } if ( count == 0 ) return "Yes" ; } return "No" ; }
int maximum ( int [ ] arr , int k ) { if ( k == 0 ) return 0 ; Array . Sort ( arr ) ; return arr [ k - 1 ] ; }
bool valid_date ( string date ) { if ( date . Length != 10 ) return false ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 i == 5 ) { if ( date [ i ] != '-' ) return false ; } else if ( ! isdigit ( date [ i ] ) ) return false ; } int month = Int32 . Parse ( date . Substring ( 0 , 2 ) ) ; int day = Int32 . Parse ( date . Substring ( 3 , 5 ) ) ; int year = Int32 . Parse ( date . Substring ( 6 , 10 ) ) ; if ( month < 1 month > 12 ) return false ; if ( day < 1 day > 31 ) return false ; if ( day == 31 && ( month == 4 month == 6 month == 9 month == 11 month == 2 ) ) return false ; if ( day == 30 && month == 2 ) return false ; return true ; }
void split_words ( String txt ) { List < String > current = new List < String > ( ) ; List < char > result = new List < char > ( ) ; if ( txt . Contains ( " " ) ) { for ( int i = 0 ; i <= txt . Length ; i ++ ) { if ( i == txt . Length txt [ i ] == ' ' ) { if ( current . Count > 0 ) { result . Add ( current . ToString ( ) ) ; current . Clear ( ) ; } } else { current . Add ( txt [ i ] ) ; } } return result ; } if ( txt . Contains ( "," ) ) { for ( int i = 0 ; i <= txt . Length ; i ++ ) { if ( i == txt . Length txt [ i ] == ',' ) { if ( current . Count > 0 ) { result . Add ( current . ToString ( ) ) ; current . Clear ( ) ; } } else { current . Add ( txt [ i ] ) ; } } return result ; } int num = 0 ; foreach ( char c in txt ) { if ( char . IsLower ( c ) && c % 2 == 0 ) num ++ ; } Console . Write ( num ) ; }
List < int > tri ( int n ) { if ( n == 0 ) { List < int > temp = new List < int > ( ) ; temp . Add ( 1 ) ; return temp ; } List < int > tris = new List < int > ( ) ; tris . Add ( 1 ) ; tris . Add ( 3 ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) tris . Add ( i / 2 + 1 ) ; else tris . Add ( tris [ i - 1 ] + tris [ i - 2 ] + ( i + 3 ) / 2 ) ; } return tris ; }
bool check_if_last_char_is_a_letter ( string txt ) { if ( txt . Length == 0 ) return false ; return txt [ txt . Length - 1 ] == 'a' && ( txt . Length == 1 txt [ txt . Length - 2 ] == 'a' ) ; }
void order_by_points ( int [ ] nums ) { ArrayList result = new ArrayList ( ) ; foreach ( int num in nums ) { string w = Math . Abs ( num ) ; int sum = 0 ; foreach ( char c in w . ToCharArray ( ) ) { sum += c - '0' ; } if ( num < 0 ) sum -= 2 * ( w [ 0 ] - '0' ) ; result . Add ( sum ) ; } for ( int i = 0 ; i < nums . Count ; i ++ ) { for ( int j = 1 ; j < nums . Count ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { int temp = result [ j ] ; result [ j ] = result [ j - 1 ] ; result [ j - 1 ] = temp ; nums [ j ] = nums [ j - 1 ] ; nums [ j - 1 ] = temp ; } } } }
List < String > bf ( String planet1 , String planet2 ) { List < String > planets = new List < String > ( ) ; planets . Add ( planet1 ) ; planets . Add ( planet2 ) ; if ( planets . Contains ( planet1 ) ) { int idx1 = planets . IndexOf ( planet1 ) ; planets . Remove ( planet1 ) ; planets . Add ( planet2 ) ; } else planets . Add ( planet1 , - 1 ) ; int idx2 = planets . IndexOf ( planet2 ) ; if ( idx1 == - 1 idx2 == - 1 idx1 == idx2 ) return new List < String > ( ) ; return ( idx1 > idx2 ) ? planets . Substring ( idx2 + 1 , idx1 ) : planets . Substring ( idx1 + 1 , idx2 ) ; }
List < int > sorted_list_sum ( List < int > lst ) { List < int > result = new List < int > ( ) ; foreach ( int i in lst ) { if ( i . Count % 2 == 0 ) { result . Add ( i ) ; } } result . Sort ( ) ; return result ; }
bool cycpattern_check ( string a , string b ) { for ( int i = 0 ; i < b . Length ; i ++ ) { string rotate = b . Substring ( i ) + b . Substring ( 0 , i ) ; if ( a . Contains ( rotate ) ) { return true ; } } return false ; }
void even_odd_count ( int num ) { int even_count = 0 , odd_count = 0 ; for ( int i = 0 ; i < Math . Abs ( num ) ; i ++ ) { if ( i % 2 == 0 ) even_count ++ ; else odd_count ++ ; } Console . WriteLine ( even_count + " " + odd_count ) ; }
string find_max ( string [ ] words ) { string max = "" ; int max_length = 0 ; for ( int i = 0 ; i < words . Length ; i ++ ) { HashSet < string > unique = new HashSet < string > ( ) ; foreach ( string w in words ) { if ( ! unique . Contains ( w ) ) unique . Add ( w ) ; if ( unique . Count > max_length || ( unique . Count == max_length && word < max ) ) { max = word ; max_length = unique . Count ; } } } return max ; }
string solve ( string s ) { bool no_letter = true ; List < char > result = new List < char > ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { char ch = s [ i ] ; if ( char . IsUpper ( ch ) ) { ch = Char . ToLower ( ch ) ; no_letter = false ; } else if ( char . IsLower ( ch ) ) { ch = Char . ToUpper ( ch ) ; no_letter = false ; } result . Add ( ch ) ; } if ( no_letter ) return result ; else return result ; }
int most_frequent ( int [ ] arr , int n ) { Dictionary < int , int > hp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . ContainsKey ( arr [ i ] ) ) { hp [ arr [ i ] ] = hp [ arr [ i ] ] + 1 ; } else { hp . Add ( arr [ i ] , 1 ) ; } } int max_count = 0 , res = - 1 ; foreach ( KeyValuePair < int , int > i in hp ) { if ( max_count < i . Value ) { res = i . Key ; max_count = i . Value ; } } return res ; }
int find ( int [ ] a , int [ ] b , int k , int n1 , int n2 ) { HashSet < int > s = new HashSet < int > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) s . Add ( b [ i ] ) ; int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( ! s . Contains ( a [ i ] ) ) missing ++ ; if ( missing == k ) return a [ i ] ; } return - 1 ; }
int solve_query ( int start , int end , int [ ] arr ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = start ; i <= end ; i ++ ) { if ( mp . ContainsKey ( arr [ i ] ) ) mp [ arr [ i ] ] ++ ; else mp . Add ( arr [ i ] , 1 ) ; } int count = 0 ; foreach ( KeyValuePair < int , int > entry in mp ) { if ( entry . Key == entry . Value ) count ++ ; } return count ; }
int segregate ( int [ ] arr , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j ++ ; } } return j ; }
int count_triplets ( int [ ] a , int n ) { HashSet < int > s = new HashSet < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) s . Add ( a [ i ] ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( s . Contains ( xr ) && xr != a [ i ] && xr != a [ j ] ) count ++ ; } } return count / 3 ; }
int least_frequent ( int [ ] arr , int n ) { Dictionary < int , int > hp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . ContainsKey ( arr [ i ] ) ) { hp [ arr [ i ] ] = hp [ arr [ i ] ] + 1 ; } else { hp . Add ( arr [ i ] , 1 ) ; } } int min_count = n + 1 , res = - 1 ; foreach ( KeyValuePair < int , int > i in hp ) { if ( min_count >= i . Value ) { res = i . Key ; min_count = i . Value ; } } return res ; }
int find_permutations ( int [ ] arr ) { int cnt = 0 ; int max_ind = - 1 , min_ind = 10000000 ; int n = arr . Length ; Dictionary < int , int > index_of = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { index_of . Add ( arr [ i ] , i + 1 ) ; } for ( int i = 1 ; i <= n ; i ++ ) { max_ind = Math . Max ( max_ind , index_of [ i ] ) ; min_ind = Math . Min ( min_ind , index_of [ i ] ) ; if ( max_ind - min_ind + 1 == i ) cnt ++ ; } return cnt ; }
int form_quadruplets ( int [ ] arr , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; Array . Sort ( arr ) ; Array . Reverse ( arr ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; }
string lexicographically_maximum ( string s , int n ) { Dictionary < char , int > m = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . ContainsKey ( s [ i ] ) ) m [ s [ i ] ] ++ ; else m . Add ( s [ i ] , 1 ) ; } List < char > v = new List < char > ( ) ; for ( char i = "a" ; i < ( char ) ( "a" + Math . Min ( n , 25 ) ) ; ++ i ) { if ( m . ContainsKey ( i ) == false ) { v . Add ( i ) ; } } int j = v . Count - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( s [ i ] >= "a" + Math . Min ( n , 25 ) || ( m . ContainsKey ( s [ i ] ) && m [ s [ i ] ] > 1 ) ) { if ( v [ j ] < s [ i ] ) continue ; m [ s [ i ] ] -- ; s = s . Substring ( 0 , i ) + v [ j ] + s . Substring ( i + 1 ) ; j -- ; } if ( j < 0 ) break ; } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) break ; if ( s [ i ] >= "a" + Math . Min ( n , 25 ) || m . ContainsKey ( s [ i ] ) && m [ s [ i ] ] > 1 ) { m [ s [ i ] ] -- ; s = s . Substring ( 0 , i ) + v [ l ] + s . Substring ( i + 1 ) ; l ++ ; } } return s ; }
int no_of_valid_kbers ( int k , int [ ] arr ) { HashSet < int > set = new HashSet < int > ( ) ; while ( k != 0 ) { set . Add ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . Length ; i ++ ) { int no = arr [ i ] ; bool flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( ! set . Contains ( digit ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag == true ) { count ++ ; } } return count ; }
int del_cost ( string s , int [ ] cost ) { int ans = 0 ; Dictionary < int , int > for_max = new Dictionary < int , int > ( ) ; Dictionary < int , int > for_tot = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( ! for_max . ContainsKey ( s [ i ] ) ) { for_max [ s [ i ] ] = cost [ i ] ; } else { for_max [ s [ i ] ] = Math . Max ( cost [ i ] , for_max [ s [ i ] ] ) ; } if ( ! for_tot . ContainsKey ( s [ i ] ) ) { for_tot [ s [ i ] ] = cost [ i ] ; } else { for_tot [ s [ i ] ] += cost [ i ] ; } } foreach ( KeyValuePair < int , int > en in for_max ) { ans += for_tot [ en . Key ] - en . Value ; } return ans ; }
void replace_duplicates ( string [ ] names ) { Dictionary < string , int > hash = new Dictionary < string , int > ( ) ; for ( int i = 0 ; i < names . Length ; i ++ ) { if ( ! hash . ContainsKey ( names [ i ] ) ) hash [ names [ i ] ] = 1 ; else { int count = hash [ names [ i ] ] ; hash [ names [ i ] ] += 1 ; names [ i ] += count . ToString ( ) ; } } }
void minmax_numbers ( int [ , ] matrix , ArrayList res ) { HashSet < int > s = new HashSet < int > ( ) ; for ( int i = 0 ; i < GetRow ( matrix , 0 ) . Count ; i ++ ) { int min_r = int . MaxValue ; for ( int j = 0 ; j < GetRow ( matrix , i ) . Count ; j ++ ) { min_r = Math . Min ( min_r , GetRow ( matrix , i , j ) ) ; } s . Add ( min_r ) ; } for ( int j = 0 ; j < GetRow ( matrix , 0 ) . Count ; j ++ ) { int max_c = int . MinValue ; for ( int i = 0 ; i < GetRow ( matrix , 0 ) . Count ; i ++ ) { max_c = Math . Max ( max_c , GetRow ( matrix , 0 ) [ j ] ) ; } if ( s . Contains ( max_c ) ) res . Add ( max_c ) ; } }
int length_of_longest_ap ( int [ ] a , int n ) { Dictionary < int , Dictionary < int , int > > dp = new Dictionary < int , Dictionary < int , int > > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int d = a [ j ] - a [ i ] ; if ( dp . ContainsKey ( d ) ) { if ( dp [ d ] . ContainsKey ( i ) ) { dp [ d ] [ j ] = dp [ d ] [ i ] + 1 ; } else { dp [ d ] [ j ] = 2 ; } } else { dp [ d ] = new Dictionary < int , int > ( ) ; dp [ d ] [ j ] = 2 ; } res = Math . Max ( res , dp [ d ] [ j ] ) ; } } return res ; }
char find_kth_char ( int n , int k ) { String prev = "A" ; String cur = "" ; if ( n == 1 ) { return "A" ; } for ( int j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . Length ; i ++ ) { if ( prev [ i ] == "A" ) { prev = prev . Substring ( 0 , i ) + "B" + prev . Substring ( i + 1 ) ; } else { prev = prev . Substring ( 0 , i ) + "A" + prev . Substring ( i + 1 ) ; } } prev = reverse ( prev ) ; cur += prev ; prev = cur ; } return cur [ k ] ; }
char find_kth_largest ( string s , int k ) { List < char > tmp = new List < char > ( s ) ; tmp . Sort ( ) ; tmp . Reverse ( ) ; return tmp [ k - 1 ] ; }
int sub_arraylen ( int [ ] arr , int n , int k ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; mp . Add ( arr [ 0 ] , 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp . Add ( arr [ i ] , i ) ; } int len = int . MaxValue ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) continue ; else { int x = arr [ i ] - k ; if ( x == 0 ) len = Math . Min ( len , i ) ; if ( ! mp . ContainsKey ( x ) ) continue ; else { len = Math . Min ( len , i ) ; } } } return len ; }
int find_max_len ( int [ ] a , int k ) { int n = a . Length ; Array . Sort ( a ) ; bool [ ] vis = new bool [ n ] ; Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . Add ( a [ i ] , i ) ; } int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( vis [ i ] == false ) { int check = a [ i ] * k ; if ( mp . ContainsKey ( check ) ) { c ++ ; vis [ mp [ check ] ] = true ; } } } return n - c ; }
List < int > min_distance_points ( int [ ] a , int k , int n ) { Dictionary < int , Boolean > m = new Dictionary < int , Boolean > ( ) ; Queue < int > q = new Queue < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . Add ( a [ i ] , true ) ; q . Enqueue ( a [ i ] ) ; } List < int > ans = new List < int > ( ) ; while ( k > 0 ) { int x = q . Dequeue ( ) ; if ( ! m . ContainsKey ( x - 1 ) && k > 0 ) { m . Add ( x - 1 , true ) ; q . Enqueue ( x - 1 ) ; ans . Add ( x - 1 ) ; k -- ; } if ( ! m . ContainsKey ( x + 1 ) && k > 0 ) { m . Add ( x + 1 , true ) ; q . Enqueue ( x + 1 ) ; ans . Add ( x + 1 ) ; k -- ; } } return ans ; }
bool isValidLen ( string s , int len , int k ) { int n = s . Length ; Dictionary < char , int > mp = new Dictionary < char , int > ( ) ; int right = 0 ; while ( right < len ) { if ( mp . ContainsKey ( s [ right ] ) ) mp [ s [ right ] ] ++ ; else mp [ s [ right ] ] = 1 ; right ++ ; } if ( mp . Count <= k ) return true ; while ( right < n ) { if ( mp . ContainsKey ( s [ right ] ) ) mp [ s [ right ] ] ++ ; else mp [ s [ right ] ] = 1 ; mp [ s [ right - len ] ] -- ; if ( mp [ s [ right - len ] ] == 0 ) mp . Remove ( s [ right - len ] ) ; if ( mp . Count <= k ) return true ; right ++ ; } return mp . Count <= k ; }
int partition ( int [ ] arr , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } temp = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ high ] ; arr [ high ] = temp ; return i + 1 ; }
int str_score ( String [ ] strs , String s , int n ) { Dictionary < String , int > m = new Dictionary < String , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) m [ strs [ i ] ] = i + 1 ; if ( ! m . ContainsKey ( s ) ) return 0 ; int score = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) score += s [ i ] - 'a' + 1 ; score = score * m [ s ] ; return score ; }
List < int > count_ele ( Stack < int > s , int [ ] a , int n ) { Dictionary < int , bool > mp = new Dictionary < int , bool > ( ) ; List < int > ans = new List < int > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int num = a [ i ] ; if ( mp . ContainsKey ( num ) ) ans . Add ( 0 ) ; else { int cnt = 0 ; while ( s . Peek ( ) != num ) { mp . Add ( s . Peek ( ) , true ) ; s . Pop ( ) ; cnt ++ ; } s . Pop ( ) ; cnt ++ ; ans . Add ( cnt ) ; } } return ans ; }
int maxDistinctChar ( char [ ] s , int n , int k ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . ContainsKey ( ( int ) s [ i ] ) ) { freq [ ( int ) s [ i ] ] = freq [ ( int ) s [ i ] ] + 1 ; } else { freq . Add ( ( int ) s [ i ] , 1 ) ; } } List < int > v = new List < int > ( ) ; foreach ( KeyValuePair < int , int > x in freq ) { v . Add ( x . Value ) ; } v . Sort ( ) ; for ( int i = 0 ; i < v . Count ; i ++ ) { int mn = Math . Min ( v [ i ] - 1 , k ) ; v [ i ] = v [ i ] - mn  ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . Count ; i ++ ) { int mn = Math . Min ( v [ i ] , k ) ; v [ i ] = v [ i ] - mn  ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . Count ; i ++ ) if ( v [ i ] == 1 ) res ++ ; return res ; }
int find_kth ( int [ ] arr , int n , int k ) { HashSet < int > missing = new HashSet < int > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . Add ( arr [ i ] ) ; } int max_m = arr . Max ( ) ; int min_m = arr . Min ( ) ; for ( int i = min_m + 1 ; i < max_m ; i ++ ) { if ( ! missing . Contains ( i ) ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; }
bool almost_sort ( int [ ] a , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { int temp = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = temp ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) if ( a [ i ] > a [ i + 1 ] ) return false ; return true ; }
int maximum_sum ( string s , int n , int k ) { int sum = 0 ; int [ ] freq = new int [ 256 ] ; Array . Clear ( freq , 0 , 256 ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ s [ i ] ] ++ ; } Array . Sort ( freq ) ; Array . Reverse ( freq ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; }
int find_min_operations ( int [ ] arr , int n , int k ) { int operations = - 1 ; for ( int i = 0 ; i < k ; i ++ ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int j = i ; j < n ; j += k ) { if ( freq . ContainsKey ( arr [ j ] ) ) freq [ arr [ j ] ] ++ ; else freq [ arr [ j ] ] = 1 ; } int max1 = - 1 , num = 0 ; foreach ( KeyValuePair < int , int > entry in freq ) { if ( entry . Key > max1 ) { max1 = entry . Value ; num = entry . Key ; } } foreach ( KeyValuePair < int , int > entry in freq ) { if ( entry . Key != num ) operations += entry . Value ; } } return operations ; }
List < String > sub_string ( String s , int n ) { List < String > v = new List < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int len = 1 ; len <= n - i ; len ++ ) { String find = s . Substring ( i , len ) ; v . Add ( find ) ; } } return v ; }
bool check_unique_frequency ( int [ ] arr , int n ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . ContainsKey ( arr [ i ] ) ) { freq [ arr [ i ] ] = freq [ arr [ i ] ] + 1 ; } else { freq . Add ( arr [ i ] , 1 ) ; } } HashSet < int > unique_freq = new HashSet < int > ( ) ; foreach ( KeyValuePair < int , int > i in freq ) { if ( unique_freq . Contains ( i . Value ) ) return false ; else unique_freq . Add ( i . Value ) ; } return true ; }
int min_cost ( string str1 , string str2 , int n ) { int cost = 0 ; StringBuilder tmp = new StringBuilder ( str1 ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 [ i ] ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) { tmp = swap ( str1 , i , i + 1 ) ; cost += 1 ; } else cost += 1 ; } } return cost ; }
bool is_valid_num ( String x ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < x . Length ; i ++ ) { if ( mp . ContainsKey ( x [ i ] - "0" ) ) return false ; else if ( x [ i ] - "0" > 5 ) return false ; else { mp . Add ( x [ i ] - "0" , 1 ) ; } } return true ; }
int minimize_diff ( int [ ] arr , int n , int k ) { int max = arr . Max ( ) ; int min = arr . Min ( ) ; if ( max - min <= k ) { return max - min ; } int avg = ( max + min ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = arr . Max ( ) ; min = arr . Min ( ) ; return max - min ; }
int get_min_cost ( int [ ] arr , int n ) { int min_ele = arr . Min ( ) ; return min_ele * ( n - 1 ) ; }
bool possibility ( int [ ] m , int len , String s ) { int count_odd = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( ( m [ s [ i ] - '0' ] & 1 ) != 0 ) count_odd ++ ; if ( count_odd > 1 ) return false ; } return true ; }
int minimum_cost_of_breaking ( int [ ] x , int [ ] y , int m , int n ) { int res = 0 ; Array . Sort < int > ( x ) ; Array . Sort < int > ( y ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert  ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl  ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) total += x [ i ++ ]  ; res += total * vert  ; total = 0 ; while ( j < n ) total += y [ j ++ ]  ; res += total * hzntl ; return res ; }
int find_maximum_score ( int [ ] a , int n ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . ContainsKey ( a [ i ] ) ) { freq [ a [ i ] ] = freq [ a [ i ] ] + 1 ; } else { freq . Add ( a [ i ] , 1 ) ; } } int [ ] dp = new int [ a . Max ( ) + 1 ] ; for ( int i = 0 ; i <= a . Length ; i ++ ) { dp [ i ] = 0 ; } dp [ 0 ] = 0 ; if ( freq . ContainsKey ( 1 ) ) { dp [ 1 ] = freq [ 1 ] ; } else { freq . Add ( a [ i ] , 1 ) ; } } int temp ; for ( int i = 2 ; i < dp . Length ; i ++ ) { temp = Math . Max ( dp [ i - 1 ] , dp [ i - 2 ] + freq [ i , 0 ] * i ) ; dp [ i ] = temp ; } return dp [ a . Max ( ) ; }
long count_ways ( string s , string t , int k , long mod ) { int n = s . Length ; long a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { string p = s . Substring ( i , n ) + s . Substring ( 0 , i ) ; if ( p == t ) a ++ ; else b ++ ; } long [ ] dp1 = new long [ k + 1 ] ; long [ ] dp2 = new long [ k + 1 ] ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * b ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; } return dp1 [ k ] ; }
int find_subarray_sum ( int [ ] arr , int n , int k ) { Dictionary < int , int > prev_sum = new Dictionary < int , int > ( ) ; int res = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ] ; if ( curr_sum == k ) { res ++ ; } if ( prev_sum . ContainsKey ( curr_sum - k ) ) res += prev_sum [ curr_sum - k ] ; if ( prev_sum . ContainsKey ( curr_sum ) ) { prev_sum [ curr_sum ] = prev_sum [ curr_sum ] + 1 ; } else { prev_sum . Add ( curr_sum , 1 ) ; } } return res ; }
int maximum_occurrence ( string s ) { int n = s . Length ; Dictionary < string , int > freq = new Dictionary < string , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { string temp = "" ; temp += s [ i ] ; if ( freq . ContainsKey ( temp ) ) { freq [ temp ] ++ ; } else { freq [ temp ] = 1 ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { string temp = "" ; temp += s [ i ] ; temp += s [ j ] ; if ( freq . ContainsKey ( temp ) ) freq [ temp ] ++ ; else freq [ temp ] = 1 ; } } int answer = int . MinValue ; foreach ( KeyValuePair < string , int > entry in freq ) answer = Math . Max ( answer , entry . Value ) ; return answer ; }
int count_characters ( string [ ] str , char [ ] chars ) { int res = 0 ; Dictionary < char , int > freq = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < chars . Length ; i ++ ) { if ( freq . ContainsKey ( chars [ i ] ) ) { freq [ chars [ i ] ] ++ ; } else { freq [ chars [ i ] ] = 1 ; } } foreach ( string str in str ) { bool flag = true ; foreach ( char c in str ) { if ( ! freq . ContainsKey ( c ) ) { flag = false ; break ; } } if ( flag ) { res += str . Length ; } } return res ; }
int distinct_substring ( string p , string q , int k , int n ) { HashSet < string > ss = new HashSet < string > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; string s = "" ; for ( int j = i ; j < n ; j ++ ) { int pos = p [ j ] - 'a' ; sum += q [ pos ] - '0' ; s += p [ j ] ; if ( sum <= k ) ss . Add ( s ) ; else break ; } } return ss . Count ; }
int unique_morse_rep ( string [ ] arr ) { string [ ] morse_code = { ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , "...." , ".." , ".---" , "-.-" , ".-.." , "--" , "-." , "---" , ".-." , "..." , "-" , "..-" , "...-" , ".--" , "-..-" , "-.--" , "--.." } ; HashSet < string > st = new HashSet < string > ( ) ; int n = arr . Length ; for ( int i = 0 ; i < n ; i ++ ) { string temp = "" ; int m = arr [ i ] . Length ; for ( int j = 0 ; j < m ; j ++ ) { temp += morse_code [ arr [ i ] [ j ] - 'a' ] ; } st . Add ( temp ) ; } return st . Count ; }
int count_substrings ( string str , int k ) { int n = str . Length ; int answer = 0 ; Dictionary < char , int > map = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( ! map . ContainsKey ( str [ i ] ) ) map [ str [ i ] ] = 1 ; else map [ str [ i ] ] ++ ; } if ( map . Count == k ) answer ++ ; for ( int i = k ; i < n ; i ++ ) { if ( ! map . ContainsKey ( str [ i ] ) ) map [ str [ i ] ] = 1 ; else map [ str [ i ] ] ++ ; map [ str [ i - k ] ] -- ; if ( map [ str [ i - k ] ] == 0 ) map . Remove ( str [ i - k ] ) ; if ( map . Count == k ) answer ++ ; } return answer ; }
bool can_construct ( String s , int k ) { Dictionary < char , int > m = new Dictionary < char , int > ( ) ; int p = 0 ; if ( s . Length == k ) return true ; for ( int i = 0 ; i < s . Length ; i ++ ) if ( ! m . ContainsKey ( s [ i ] ) ) m . Add ( s [ i ] , 1 ) ; else m [ s [ i ] ] = m [ s [ i ] ] + 1 ; if ( k > s . Length ) return false ; else { foreach ( KeyValuePair < char , int > entry in m ) { if ( entry . Value % 2 != 0 ) p = p + 1 ; } } if ( k < p ) return false ; return true ; }
bool equal_ignore_case ( String str1 , String str2 ) { str1 = str1 . ToUpper ( ) ; str2 = str2 . ToUpper ( ) ; return str1 . Equals ( str2 ) ; }
int find_longest_sub ( String bin ) { int n = bin . Length , sum = 0 ; Dictionary < int , int > prev_sum = new Dictionary < int , int > ( ) ; int max_len = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( bin [ i ] == '1' ) sum ++ ; else sum -- ; if ( sum > 0 ) max_len = i + 1 ; else if ( sum <= 0 ) { if ( prev_sum . ContainsKey ( sum - 1 ) ) { int curr_len = i - ( prev_sum [ sum - 1 ] == 0 ? 1 : prev_sum [ sum - 1 ] ) ; max_len = Math . Max ( max_len , curr_len ) ; } } if ( ! prev_sum . ContainsKey ( sum ) ) prev_sum . Add ( sum , i ) ; } return max_len ; }
bool has_all_codes ( String s , int k ) { HashSet < String > us = new HashSet < String > ( ) ; for ( int i = 0 ; i <= s . Length ; i ++ ) us . Add ( s . Substring ( i , k ) ) ; return us . Count == 1 << k ; }
bool check_palin ( string word ) { int n = word . Length ; word = Char . ToLower ( word ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( word [ i ] != word [ n - 1 ] ) { return false ; } n -- ; } return true ; }
string convert ( string str ) { string w = "" , z = "" ; str = str . ToUpper ( ) + " " ; for ( int i = 0 ; i < str . Length ; i ++ ) { char ch = str [ i ] ; if ( ch != ' ' ) w += ch ; else { z += w [ 0 ] . ToLower ( ) + w . Substring ( 1 ) + " " ; w = "" ; } } return z ; }
int max_lines ( int n , int [ ] x1 , int [ ] y1 , int [ ] x2 , int [ ] y2 ) { HashSet < Double > s = new HashSet < Double > ( ) ; double slope ; for ( int i = 0 ; i < n ; ++ i ) { if ( x1 [ i ] == x2 [ i ] ) slope = int . MaxValue ; else slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; s . Add ( slope ) ; } return s . Count ; }
Dictionary < int , int > prime_factor ( int n ) { Dictionary < int , int > primef = new Dictionary < int , int > ( ) ; while ( n % 2 == 0 ) { if ( primef . ContainsKey ( 2 ) ) primef [ 2 ] = primef [ 2 ] + 1 ; else primef . Add ( 2 , 1 ) ; n = n / 2 ; } for ( int i = 3 ; i <= Math . Sqrt ( n ) ; i = i + 2 ) { while ( n % i == 0 ) { if ( primef . ContainsKey ( i ) ) primef [ i ] = primef [ i ] + 1 ; else primef . Add ( i , 1 ) ; n = n / i ; } } if ( n > 2 ) primef . Add ( n , 1 ) ; return primef ; }
string is_divisible_by_divisor ( int s , int d ) { s %= d ; HashSet < int > hash_map = new HashSet < int > ( ) ; hash_map . Add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hash_map . Contains ( s ) ) { if ( s == 0 ) return "Yes" ; else return "No" ; } else hash_map . Add ( s ) ; } return "Yes" ; }
bool odd_sum ( int [ ] a , int n , int k ) { HashSet < int > odd = new HashSet < int > ( ) ; HashSet < int > even = new HashSet < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) even . Add ( a [ i ] ) ; else odd . Add ( a [ i ] ) ; } if ( odd . Count >= k ) return true ; bool flag = false ; for ( int i = 1 ; i <= k - 1 ; i += 2 ) { int needed = k - i ; if ( needed <= even . Count ) return true ; } return flag ; }
int day_of_year ( string date ) { int [ ] days = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int year = Int32 . Parse ( date . Substring ( 0 , 4 ) ) ; int month = Int32 . Parse ( date . Substring ( 5 , 2 ) ) ; int day = Int32 . Parse ( date . Substring ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 year % 400 == 0 ) ) { ++ day ; } while ( -- month > 1 ) { day = day + days [ month - 2 ] ; } return day ; }
bool is_perfect_square ( int [ ] arr , int n ) { Dictionary < int , int > umap = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( umap . ContainsKey ( arr [ i ] ) ) umap [ arr [ i ] ] ++ ; else umap [ arr [ i ] ] = 1 ; } Dictionary < int , int > . ValueCollection valueColl = umap . Values ; foreach ( int val in valueColl ) { if ( val % 2 == 1 ) { return false ; } } return true ; }
int min_moves ( int n ) { string s = n . ToString ( ) ; int ans = int . MaxValue ; int len = s . Length ; for ( int i = 0 ; i < len ; i ++ ) { for ( int j = 0 ; j < len ; j ++ ) { if ( i == j ) continue ; String t = s . ToString ( ) ; int cur = 0 ; for ( int k = i ; k < len - 1 ; k ++ ) { t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = t [ k + 1 ] ; cur ++ ; } for ( int k = j - ( j > i ) ; k < len - 2 ; k ++ ) { t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = t [ k + 1 ] ; cur ++ ; } int pos = - 1 ; for ( int k = 0 ; k < len ; k ++ ) { if ( t [ k ] != "0" ) { pos = k ; break ; } } for ( int k = pos ; k >= 1 ; k -- ) { t [ k ] = t [ k - 1 ] ; t [ k - 1 ] = t [ k ]  ; cur ++ ; } int nn = int . Parse ( t ) ; if ( nn % 25 == 0 ) ans = Math . Min ( ans , cur ) ; } } if ( ans == int . MaxValue ) return - 1 ; return ans ; }
int minimum_operations ( int [ ] a , int n ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . ContainsKey ( a [ i ] ) ) { mp [ a [ i ] ] = mp [ a [ i ] ] + 1 ; } else { mp . Add ( a [ i ] , 1 ) ; } } int count = 0 ; foreach ( KeyValuePair < int , int > entry in mp ) { if ( entry . Value > 1 ) { count += entry . Value - 1 ; } } return count ; }
int kaprekar_rec ( int n , int prev ) { if ( n == 0 ) return 0 ; prev = n ; int [ ] digits = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } Array . Sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } Array . Sort ( digits ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } int diff = Math . Abs ( asc - desc ) ; if ( diff == prev ) return diff  ; return kaprekar_rec ( diff , prev ) ; }
string fraction_to_decimal ( int numr , int denr ) { string res = "" ; Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; int rem = numr % denr ; while ( rem != 0 && mp . ContainsKey ( rem ) ) { mp [ rem ] = res . Length ; rem = rem * 10 ; string res_part = rem / denr ; res += res_part ; rem = rem % denr ; } if ( rem == 0 ) return "" ; if ( mp . ContainsKey ( rem ) ) return res . Substring ( mp [ rem ] ) ; return "" ; }
bool is_fancy ( String num ) { Dictionary < char , char > fp = new Dictionary < char , char > ( ) ; fp . Add ( "0" , "0" ) ; fp . Add ( "1" , "1" ) ; fp . Add ( "6" , "9" ) ; fp . Add ( "8" , "8" ) ; fp . Add ( "9" , "6" ) ; int n = num . Length ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( ! fp . ContainsKey ( num [ l ] ) || fp [ num [ l ] ] != num [ r ] ) { return false ; } l ++ ; r -- ; } return true ; }
double distinct_odd_ratio ( int [ ] numbers ) { double distinct_count = 0 ; foreach ( int n in numbers ) { distinct_count ++ ; } double distinct_odd_count = 0 ; foreach ( int n in numbers ) { if ( n % 2 == 1 ) { distinct_odd_count ++ ; } } return ( distinct_odd_count / distinct_count ) ; }
int compare_sum ( String numbers , String words ) { int int_sum = 0 ; for ( int i = 0 ; i < numbers . Length ; i ++ ) int_sum += numbers [ i ] ; int word_length_sum = 0 ; for ( int i = 0 ; i < words . Length ; i ++ ) word_length_sum += words [ i ] ; if ( int_sum < word_length_sum ) return - 1 ; else if ( int_sum > word_length_sum ) return 1 ; else return 0 ; }
bool all_longer_than ( String [ ] short_words , String [ ] long_words ) { int max_of_short = short_words . Max ( ) ; int min_of_long = long_words . Min ( ) ; return min_of_long > max_of_short ; }
int compare_odd_even_range ( int [ ] numbers ) { int range_odd = max_element ( numbers , 2 ) - Math . Min ( numbers , 2 ) ; int range_even = max_element ( numbers , 2 ) - Math . Min ( numbers , 2 ) ; if ( range_odd < range_even ) return - 1 ; if ( range_odd > range_even ) return 1 ; return 0 ; }
double average_distinct_length ( string words ) { HashSet < string > distinct_words = new HashSet < string > ( ) ; foreach ( string w in words ) { distinct_words . Add ( w ) ; } double average_len = 0 ; foreach ( string w in distinct_words ) { average_len += ( double ) w . Length / distinct_words . Count ; } return average_len ; }
int withdraw_balance ( int start , int [ ] withdrawals ) { int end = reduce ( int . MinValue , 0 ) ; for ( int i = 0 ; i < withdrawals . Length ; i ++ ) { if ( nextWithdrawal <= balance ) balance -= nextWithdrawal ; else balance += withdrawals [ i ] ; } return end ; }
string first_short_and_starts_with_o ( string [ ] words ) { string matched_element = "" ; for ( int i = 0 ; i < words . Length ; i ++ ) { if ( ! words [ i ] . StartsWith ( 'o' ) ) matched_element = "" ; } return matched_element ; }
int big_number_at_index ( int [ , ] numbers , int index ) { int target_num = 0 ; for ( int i = 0 ; i < 5 ; i ++ ) { target_num = numbers [ i ] ; } if ( target_num > index ) return target_num ; return 0 ; }
bool contains_square_in_range ( int range_start , int range_length ) { bool contains_square = false ; for ( int n = range_start ; n <= range_start + range_length ; n ++ ) { contains_square = true ; } if ( contains_square ) { return true ; } return false ; }
Dictionary < int , List < int > > group_numbers_by_mod ( int [ ] numbers , int mod ) { Dictionary < int , List < int > > number_groups = new Dictionary < int , List < int > > ( ) ; foreach ( int n in numbers ) { int k = n % mod ; foreach ( int g in g ) { number_groups [ k ] . Add ( n , g ) ; } } return number_groups ; }
Dictionary < int , List < String > > group_words_by_first_char ( String words ) { Dictionary < int , List < String > > word_groups = new Dictionary < int , List < String > > ( ) ; foreach ( String w in words ) { List < String > g = new List < String > ( ) ; g . Add ( w . Substring ( 0 , 1 ) ) ; word_groups [ k ] = g ; } return word_groups ; }
List < String > order_by_length_and_descending ( String [ ] words ) { List < String > sorted_words = new List < String > ( ) ; sorted_words . Sort ( ) ; reverse ( sorted_words ) ; return sorted_words ; }
void order_first_char_descending_reverse ( String [ ] words ) { Array . Sort ( words ) ; Array . Reverse ( words ) ; }
List < int > get_sublist_of_negative ( int [ ] numbers , int start , int len ) { List < int > sub_list = new List < int > ( ) ; for ( int i = start ; i < len ; i ++ ) { if ( numbers [ i ] < 0 ) sub_list . Add ( numbers [ i ] ) ; } return sub_list ; }
List < int > get_positive_sequence ( int [ ] numbers ) { List < int > sub_sequence = new List < int > ( ) ; while ( true ) { if ( numbers [ 0 ] > 0 ) { sub_sequence . Add ( 0 ) ; } else { sub_sequence . Add ( 1 ) ; } } return sub_sequence ; }
List < int > get_larger_than_index_sequence ( List < int > numbers ) { List < int > sub_sequence = new List < int > ( ) ; foreach ( Tuple < int , int > x in itertools . takewhile ( x => x . Item2 >= x . Item1 , x . Item2 > ) ) { sub_sequence . Add ( x . Item2 ) ; } return sub_sequence ; }
void rearrange_word_by_indexes ( String [ ] words , int [ ] indexes ) { int [ ] new_indexes = new int [ indexes . Length ] ; for ( int i = 0 ; i < indexes . Length ; i ++ ) { new_indexes [ i ] = n % words . Length ; } String [ ] new_words = new String [ new_indexes . Length ] ; for ( int i = 0 ; i < new_indexes . Length ; i ++ ) { new_words [ i ] = words [ i ] ; } }
Dictionary < String , String > get_words_upper_lower ( String [ ] words ) { Dictionary < String , String > upper_lower_words = new Dictionary < String , String > ( ) ; for ( int i = 0 ; i < words . Length ; i ++ ) { upper_lower_words . Add ( words [ i ] , String . Join ( "" , w ) ) ; } return upper_lower_words ; }
bool [ ] select_if_in_place ( int [ ] numbers ) { bool [ ] nums_in_place = new bool [ numbers . Length ] ; for ( int i = 0 ; i < numbers . Length ; i ++ ) nums_in_place [ i ] = true ; return nums_in_place ; }
List < pair > select_pairs ( List < int > numbers_a , List < int > numbers_b ) { List < pair > pairs = new List < pair > ( ) ; for ( int i = 0 ; i < numbers_a . Count ; i ++ ) { for ( int j = 0 ; j < numbers_b . Count ; j ++ ) { pairs . Add ( new pair ( a , b ) ) ; } } return pairs ; }
void string_cross_join ( String [ ] end_words , String begin_words ) { String [ ] cross_strings = new String [ begin_words . Length ] ; for ( int i = 0 ; i < end_words . Length ; i ++ ) { cross_strings [ i ] = e + ' ' + b ; } }
int elements_contain_subword ( String [ ] words , String subword ) { if ( words . Contains ( subword ) ) return 1 ; else if ( words . Contains ( subword ) ) return 0 ; else return - 1 ; }
List < int > concat_large_numbers ( List < int > numbers_a , List < int > numbers_b , int flag ) { List < int > all_numbers = new List < int > ( ) ; for ( int i = 0 ; i < numbers_a . Count && i < numbers_b . Count ; i ++ ) { if ( numbers_a [ i ] > flag ) { all_numbers . Add ( numbers_a [ i ] ) ; } else { all_numbers . Add ( numbers_b [ i ] ) ; } } return all_numbers ; }
int dot_product ( int [ ] vector_a , int [ ] vector_b ) { int dot_product = 0 ; int i = 0 ; for ( i = 0 ; i < vector_a . Length ; i ++ ) for ( int j = 0 ; j < vector_b . Length ; j ++ ) dot_product += ( a * b ) ; return dot_product ; }
List < int > set_difference ( List < int > set_a , List < int > set_b ) { List < int > difference = new List < int > ( ) ; foreach ( int a in set_a ) { difference . Add ( a ) ; } difference . Sort ( ) ; return difference ; }
