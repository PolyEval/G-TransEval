int greatestCommonDivisor ( int a , int b ) { if ( a == 0 || b == 0 ) { return a + b ; } if ( a == b ) { return a ; } if ( a > b ) { return greatestCommonDivisor ( a % b , b ) ; } else { return greatestCommonDivisor ( a , b % a ) ; } }
int largestDivisor ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { return n / i ; } } return 1 ; }
bool isPrime ( int n ) { if ( n < 2 ) { return false ; } for ( int k = 2 ; k < n ; k ++ ) { if ( n % k == 0 ) { return false ; } } return true ; }
int fizzBuzz ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 11 == 0 || i % 13 == 0 ) { int q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) { count += 1 ; } q /= 10 ; } } } return count ; }
int primeFib ( int n ) { int f0 = 0 ; int f1 = 1 ; while ( n > 0 ) { int p = f0 + f1 ; bool isPrime = p >= 2 ; for ( int i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { n -= 1 ; } f0 = f1 ; f1 = p ; } return f1 ; }
float triangleArea ( float a , float h ) { return a * h / 2 ; }
int modp ( int n , int p ) { int ret = 1 ; for ( int i = 0 ; i < n ; i ++ ) { ret = ( ret * 2 ) % p ; } return ret ; }
int add ( int x , int y ) { return x + y ; }
int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 1 ; return fib ( n - 1 ) + fib ( n - 2 ) ; }
int largestPrimeFactor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) { while ( n % i == 0 && n > i ) { n /= i ; } } return n ; }
int sumToN ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { result += i ; } return result ; }
int fibfib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 0 ; if ( n == 2 ) return 1 ; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
bool isMultiplyPrime ( int a ) { int num = 0 ; for ( int i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) { a /= i ; num += 1 ; } } return num == 3 ; }
bool isSimplePower ( int x , int n ) { if ( n == 1 ) return x == 1 ; int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
int chooseNum ( int x , int y ) { if ( x > y ) { return -1 ; } if ( y % 2 == 0 ) { return y ; } if ( x == y ) { return -1 ; } return y - 1 ; }
bool isEqualToSumEven ( int n ) { return ( n % 2 == 0 && n >= 8 ) ; }
int specialFactorial ( int n ) { int fact = 1 ; int specialFact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; specialFact *= fact ; } return specialFact ; }
int xOrY ( int n , int x , int y ) { bool isPrime = n >= 2 ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { return x ; } return y ; }
bool rightAngleTriangle ( int a , int b , int c ) { return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b ; }
int fastPow ( int n , int k ) { if ( k == 0 ) { return 1 ; } int temp = fastPow ( n , k / 2 ) ; if ( k % 2 == 0 ) { return temp * temp ; } else { return n * temp * temp ; } }
bool isPalin ( string s ) { int l = s . length ( ) / 2 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s [ i ] != s [ s . length ( ) - i - 1 ] ) { return false ; } } return true ; }
int findSum ( int n ) { int ans = 0 , temp = 0 ; for ( int i = 1 ; i <= n && temp < n ; i ++ ) { temp = i - 1 ; int num = 1 ; while ( temp < n ) { if ( temp + i <= n ) { ans += i * num ; } else { ans += ( n - temp ) * num ; } temp += i ; num ++ ; } } return ans ; }
int getNextGap ( int gap ) { gap = trunc ( gap * 10 / 13 ) ; if ( gap < 1 ) { return 1 ; } return gap ; }
long long int countNonDecreasing ( int n ) { int k = 10 ; long long count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count /= i ; } return count ; }
int power ( int x , unsigned int y ) { if ( y == 0 ) { return 1 ; } else if ( y % 2 == 0 ) { return power ( x , y / 2 ) * power ( x , y / 2 ) ; } else { return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; } }
float power ( float x , int y ) { if ( y == 0 ) return 1 ; float temp = power ( x , y / 2 ) ; if ( y % 2 == 0 ) return temp * temp ; else { if ( y > 0 ) return x * temp * temp ; else return temp * temp / x ; } }
int multiply ( int x , int y ) { if ( y == 0 ) { return 0 ; } else if ( y > 0 ) { return x + multiply ( x , y - 1 ) ; } else { return - multiply ( x , - y ) ; } }
int smallest ( int x , int y , int z ) { if ( ! ( y / x ) ) { return ! ( y / z ) ? y : z ; } return ! ( x / z ) ? x : z ; }
bool isPowerOfFour ( int n ) { if ( n == 0 ) { return false ; } while ( n != 1 ) { if ( n % 4 != 0 ) { return false ; } n = n / 4 ; } return true ; }
int modInverse ( int a , int m ) { int m0 = m , t , q ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { q = a / m ; t = m ; m = a % m , a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
int cntRotations ( string s , int n ) { string s2 = s + s ; int pre [ 2 * n ] = { 0 } ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) { pre [ i ] += pre [ i - 1 ] ; } if ( s2 [ i ] == 'a' || s2 [ i ] == 'e' || s2 [ i ] == 'i' || s2 [ i ] == 'o' || s2 [ i ] == 'u' ) { pre [ i ] ++ ; } } int ans = 0 ; for ( int i = n - 1 ; i < 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) { x1 -= pre [ l ] ; } r = i - n / 2 ; int left = pre [ r ] ; if ( l >= 0 ) { left -= pre [ l ] ; } int right = x1 - left ; if ( left > right ) { ans ++ ; } } return ans ; }
unsigned long int binomialCoeff ( unsigned int n , unsigned int k ) { unsigned long int res = 1 ; if ( k > n - k ) { k = n - k ; } for ( int i = 0 ; i < k ; ++ i ) { res *= ( n - i ) ; res /= ( i + 1 ) ; } return res ; }
bool isPrefix ( string temp , string s ) { if ( temp . length ( ) < s . length ( ) ) { return false ; } else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] != temp [ i ] ) { return false ; } } return true ; } }
string lexicographicallySmallestString ( string s , int n ) { int lastZe = -1 ; string ans = "" ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { lastZe = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i <= lastZe && s [ i ] == '0' ) { ans += s [ i ] ; } else if ( i > lastZe ) { ans += s [ i ] ; } } return ans ; }
int calculateMax ( int n , int m , int k ) { int ans = -1 ; int low = 0 , high = m ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int val = 0 ; int l = k - 1 ; int r = n - k ; val += mid ; if ( mid >= l ) { val += l * ( 2 * mid - l - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( l - mid ) ; } if ( mid >= r ) { val += r * ( 2 * mid - r - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( r - mid ) ; } if ( val <= m ) { ans = max ( ans , mid ) ; low = mid + 1 ; } else { high = mid - 1 ; } } return ans ; }
int findLength ( string s , int i , int j ) { int required = i ; int length = 0 ; for ( auto curr : s ) { if ( curr == required ) { length += 1 ; if ( required == i ) { required = j ; } else { required = i ; } } } return length ; }
bool checkReverse ( int leftSum , int rightSum ) { int rev = 0 ; int temp = rightSum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp = temp / 10 ; } if ( rev == leftSum ) { return true ; } return false ; }
bool isComposite ( int n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return false ; } if ( n % 2 == 0 || n % 3 == 0 ) { return true ; } for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return true ; } } return false ; }
int minDeletion ( string s ) { int n = s . size ( ) ; int firstIdx1 = -1 ; int lastIdx0 = -1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { firstIdx1 = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { lastIdx0 = i ; break ; } } if ( firstIdx1 == -1 || lastIdx0 == -1 ) { return 0 ; } int count1 = 0 , count0 = 0 ; for ( int i = 0 ; i < lastIdx0 ; i ++ ) { if ( s [ i ] == '1' ) { count1 ++ ; } } for ( int i = firstIdx1 + 1 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { count0 ++ ; } } return min ( count0 , count1 ) ; }
int minSteps ( string s , int n ) { int smaller , cost = 0 ; int f [ 26 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { int currEle = s [ i ] - 'a' ; smaller = 0 ; for ( int j = 0 ; j <= currEle ; j ++ ) { if ( f [ j ] ) { smaller += f [ j ] ; } } if ( smaller == 0 ) { cost += ( i + 1 ) ; } else { cost += ( i - smaller + 1 ) ; } f [ s [ i ] - 'a' ] ++ ; } return cost ; }
int numberOfWays ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 1 ; b < n ; b ++ ) { int c = n - ( a + b ) ; if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } } return count ; }
int slopeOfNum ( int num [ ] , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) { slope ++ ; } else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) { slope ++ ; } } return slope ; }
int middleOfThree ( int a , int b , int c ) { int x = a - b ; int y = b - c ; int z = a - c ; if ( x * y > 0 ) { return b ; } else if ( x * z > 0 ) { return c ; } else { return a ; } }
int countMaxSetBits ( int left , int right ) { while ( ( left | ( left + 1 ) ) <= right ) { left |= left + 1 ; } return left ; }
int findS ( int s ) { int l = 1 , r = s / 2 + 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) { return mid ; } else if ( sum > s ) { r = mid - 1 ; } else { l = mid + 1 ; } } return -1 ; }
bool check ( string s ) { int min = INT_MAX ; int max = - INT_MAX ; int sum = 0 ; for ( int i = 0 ; i < s . size ( ) ; i ++ ) { int ascii = s [ i ] ; if ( ascii < 96 || ascii > 122 ) { return false ; } sum += ascii ; if ( min > ascii ) { min = ascii ; } if ( max < ascii ) { max = ascii ; } } min -= 1 ; int eSum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == eSum ; }
int minimumPossibleProduct ( int k ) { int res = 1 ; int r = ( 1 << k ) - 1 ; for ( int i = 0 ; i < k ; i ++ ) { res *= r - 1 ; } res *= r ; return res ; }
int findInGrid ( int i , int j ) { if ( i == j ) { return i * i - ( i - 1 ) ; } else if ( i > j ) { if ( i % 2 == 0 ) { return i * i - ( j - 1 ) ; } else { return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } } else { if ( j % 2 == 0 ) { return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; } else { return j * j - ( i - 1 ) ; } } }
int findMinOperationsReqEmpStr ( string s ) { int cntOne = 0 ; int cntZero = 0 ; int n = s . size ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '0' ) { if ( cntOne ) { cntOne -- ; } cntZero ++ ; } else { if ( cntZero ) { cntZero -- ; } cntOne ++ ; } } return cntOne + cntZero ; }
bool isReachable ( int x1 , int y1 , int x2 , int y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) { x2 %= y2 ; } else { y2 %= x2 ; } } if ( x2 == x1 ) { return ( y2 - y1 ) >= 0 && ( y2 - y1 ) % x1 == 0 ; } else if ( y2 == y1 ) { return ( x2 - x1 ) >= 0 && ( x2 - x1 ) % y1 == 0 ; } else { return false ; } }
int findMaxSoln ( int n , int x , int y ) { int ans = INT_MIN ; for ( int k = 0 ; k <= n ; k ++ ) { if ( k % x == y ) { ans = max ( ans , k ) ; } } return ans >= 0 && ans <= n ? ans : -1 ; }
int numberOfPairs ( int n ) { int count = 0 ; int i = 1 , j = n - 1 ; while ( i < j ) { if ( i + j == n ) { count ++ ; } i ++ ; j -- ; } return count ; }
int minChanges ( string s , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( s [ 0 ] != '1' ) { count ++ ; ones ++ ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s [ i ] == '0' ) { zeros ++ ; } else { ones ++ ; } if ( zeros > ones ) { zeros -- ; ones ++ ; count ++ ; } } return count ; }
int kVisibleFromLeft ( int n , int k ) { if ( n == k ) return 1 ; if ( k == 1 ) { int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { ans *= i ; } return ans ; } return kVisibleFromLeft ( n - 1 , k - 1 ) + ( n - 1 ) * kVisibleFromLeft ( n - 1 , k ) ; }
float find ( int n , int sum ) { if ( sum > 6 * n || sum < n ) { return 0 ; } if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) { return 1.0 / 6 ; } else { return 0 ; } } float s = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) { s += find ( n - 1 , sum - i ) / 6 ; } return s ; }
int binCoff ( int n , int r ) { int val = 1 ; int i ; if ( r > n - r ) { r = n - r ; } for ( i = 0 ; i < r ; i ++ ) { val *= ( n - i ) ; val /= ( i + 1 ) ; } return val ; }
int getMask ( int val ) { int mask = 0 ; if ( val == 0 ) { return 1 ; } while ( val ) { int d = val % 10 ; mask |= ( 1 << d ) ; val /= 10 ; } return mask ; }
int waysToKAdjacentSetBits ( int n , int k , int currentIndex , int adjacentSetBits , int lastBit ) { if ( currentIndex == n ) { if ( adjacentSetBits == k ) { return 1 ; } return 0 ; } int noOfWays = 0 ; if ( lastBit == 1 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits + 1 , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } else if ( ! lastBit ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } return noOfWays ; }
int checkFunc ( int i , int j , string st ) { if ( st [ i ] == '(' && st [ j ] == ')' ) { return 1 ; } if ( st [ i ] == '(' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == ')' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == ']' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == ']' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '}' ) { return 1 ; } return 0 ; }
int findGolomb ( int n ) { if ( n == 1 ) { return 1 ; } return 1 + findGolomb ( n - findGolomb ( findGolomb ( n - 1 ) ) ) ; }
bool allOnes ( string s , int n ) { int co = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { co += s [ i ] == '1' ? 1 : 0 ; } return co == n ; }
int pad ( int n ) { int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { pNext = pPrevPrev + pPrev ; pPrevPrev = pPrev ; pPrev = pCurr ; pCurr = pNext ; } return pNext ; }
int oddLengthPalindrome ( int k ) { int palin = k ; k /= 10 ; while ( k > 0 ) { int rev = k % 10 ; palin = palin * 10 + rev ; k /= 10 ; } return palin ; }
string changeString ( string s0 ) { string s ; int n = s0 . length ( ) ; if ( s [ 0 ] == '?' ) { s [ 0 ] = 'a' ; if ( s [ 0 ] == s [ 1 ] ) { s [ 0 ] = s [ 0 ] + 1 ; } } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == '?' ) { s [ i ] = 'a' ; if ( s [ i ] == s [ i - 1 ] ) { s [ i ] = s [ i ] + 1 ; } if ( s [ i ] == s [ i + 1 ] ) { s [ i ] = s [ i ] + 1 ; } if ( s [ i ] == s [ i - 1 ] ) { s [ i ] = s [ i ] + 1 ; } } } if ( s [ n - 1 ] == '?' ) { s [ n - 1 ] = 'a' ; if ( s [ n - 1 ] == s [ n - 2 ] ) { s [ n - 1 ] = s [ n - 1 ] + 1 ; } } return s ; }
int totalHammingDistance ( int n ) { int i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + n / i ; i = i * 2 ; } return sum ; }
int checkBitonic ( string s ) { int i = 1 ; for ( ; i < s . size ( ) ; i ++ ) { if ( s [ i ] > s [ i - 1 ] ) { continue ; } if ( s [ i ] <= s [ i - 1 ] ) { break ; } } if ( i == s . size ( ) - 1 ) { return 1 ; } int j = i + 1 ; for ( ; j < s . size ( ) ; j ++ ) { if ( s [ j ] < s [ j - 1 ] ) { continue ; } if ( s [ j ] >= s [ j - 1 ] ) { break ; } } i = j ; if ( i != s . size ( ) ) { return 0 ; } return 1 ; }
bool endsWith ( string str , string pat ) { int patLen = pat . length ( ) ; int strLen = str . length ( ) ; if ( patLen > strLen ) { return false ; } patLen -- ; strLen -- ; while ( patLen >= 0 ) { if ( pat [ patLen ] != str [ strLen ] ) { return false ; } patLen -- ; strLen -- ; } return true ; }
int getSum ( int n , int d ) { if ( n < d ) return 0 ; while ( n % 10 != d ) n -- ; int k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
int balancedStringBySwapping ( string s ) { int unbalancedPair = 0 ; for ( int i = 0 ; i < s . size ( ) ; ++ i ) { if ( unbalancedPair > 0 && s [ i ] == ']' ) { -- unbalancedPair ; } else if ( s [ i ] == '[' ) { ++ unbalancedPair ; } } return ( unbalancedPair + 1 ) / 2 ; }
long long computeHash ( string s ) { int p = 31 ; int mod = 1e9 + 7 ; long long hashVal = 0 ; long long mul = 1 ; for ( char ch : s ) { hashVal = ( hashVal + ( ch - 'a' + 1 ) * mul ) % mod ; mul = mul * p % mod ; } return hashVal ; }
int countOfSubstringWithOnlyOnes ( string s ) { int res = 0 , count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { count = s [ i ] == '1' ? count + 1 : 0 ; res = res + count ; } return res ; }
int composite ( int n ) { int flag = 0 ; int c = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) { c += 1 ; } } if ( c >= 3 ) { flag = 1 ; } return flag ; }
bool isDivBySix ( string s , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += s [ i ] - 'a' + 1 ; } if ( sum % 3 != 0 ) { return false ; } int lastDigit = ( s [ n - 1 ] - 'a' + 1 ) % 10 ; if ( lastDigit % 2 != 0 ) { return false ; } return true ; }
bool isRedundantBraces ( string s ) { int a = 0 , b = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == '(' && s [ i + 2 ] == ')' ) { return true ; } if ( s [ i ] == '*' || s [ i ] == '+' || s [ i ] == '-' || s [ i ] == '/' ) { a ++ ; } if ( s [ i ] == '(' ) { b ++ ; } } if ( b > a ) { return true ; } return false ; }
int countSubStr ( string s , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 2 ; ) { if ( s [ i ] == '0' && s [ i + 1 ] == '1' && s [ i + 2 ] == '0' ) { count ++ ; i += 3 ; } else if ( s [ i ] == '1' && s [ i + 1 ] == '0' && s [ i + 2 ] == '1' ) { count ++ ; i += 3 ; } else { i ++ ; } } return count ; }
int prefixOccurrences ( string s ) { char c = s [ 0 ] ; int countC = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == c ) { countC ++ ; } } return countC ; }
bool isValid ( string s , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( s [ i ] == s [ i - 1 ] ) { return false ; } } return true ; }
int count ( string s , int k ) { int n = s . length ( ) ; int d = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d += s [ i ] ; } if ( d % k == 0 ) { count += 1 ; } for ( int i = k ; i < n ; i ++ ) { int prev = s [ i - k ] ; d -= prev ; d += s [ i ] ; if ( d % k == 0 ) { count += 1 ; } } return count ; }
int findSubstringCount ( string s ) { int result = 0 ; int n = s . size ( ) ; int i = 0 ; while ( i < n - 1 ) { if ( s [ i ] + 1 == s [ i + 1 ] ) { result ++ ; while ( i < n - 1 && s [ i ] + 1 == s [ i + 1 ] ) { i ++ ; } } i ++ ; } return result ; }
bool find ( string s1 , string s2 ) { int len1 = s1 . length ( ) , len2 = s2 . length ( ) ; if ( len1 != len2 ) { return false ; } int d [ len1 ] ; d [ 0 ] = s2 [ 0 ] - s1 [ 0 ] ; for ( int i = 1 ; i < len1 ; i ++ ) { if ( s1 [ i ] > s2 [ i ] ) { return false ; } else { d [ i ] = s2 [ i ] - s1 [ i ] ; } } for ( int i = 0 ; i < len1 - 1 ; i ++ ) { if ( d [ i ] < d [ i + 1 ] ) { return false ; } } return true ; }
bool isInGivenBase ( string s , int base ) { if ( base > 16 ) { return false ; } else if ( base <= 10 ) { for ( int i = 0 ; i < s . size ( ) ; i ++ ) { if ( ! ( s [ i ] >= '0' and s [ i ] < '0' + base ) ) { return false ; } } } else { for ( int i = 0 ; i < s . size ( ) ; i ++ ) { if ( ! ( ( s [ i ] >= '0' && s [ i ] < '0' + base ) || ( s [ i ] >= 'A' && s [ i ] < 'A' + base - 10 ) ) ) { return false ; } } } return true ; }
int countNonEmptySubstr ( string s ) { int n = s . length ( ) ; return n * ( n + 1 ) / 2 ; }
int evenDecimalValue ( string s , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimalValue = 0 ; int powerOf2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimalValue += ( s [ k ] - '0' ) * powerOf2 ; powerOf2 *= 2 ; } if ( decimalValue % 2 == 0 ) result ++ ; } } return result ; }
int calculate ( string s ) { int ans = 6 ; for ( int i = 0 ; i < 10 ; ++ i ) { for ( int j = 0 ; j < 10 ; ++ j ) { for ( int k = 0 ; k < 10 ; ++ k ) { for ( int l = 0 ; l < 10 ; ++ l ) { for ( int m = 0 ; m < 10 ; ++ m ) { for ( int n = 0 ; n < 10 ; ++ n ) { if ( i + j + k == l + m + n ) { int c = 0 ; if ( i != s [ 0 ] - '0' ) { c ++ ; } if ( j != s [ 1 ] - '0' ) { c ++ ; } if ( k != s [ 2 ] - '0' ) { c ++ ; } if ( l != s [ 3 ] - '0' ) { c ++ ; } if ( m != s [ 4 ] - '0' ) { c ++ ; } if ( n != s [ 5 ] - '0' ) { c ++ ; } if ( c < ans ) { ans = c ; } } } } } } } } return ans ; }
int xorZero ( string s ) { int oneCount = 0 , zeroCount = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { oneCount ++ ; } else { zeroCount ++ ; } } if ( oneCount % 2 == 0 ) { return zeroCount ; } return oneCount ; }
int evenLength ( string n ) { int res = n ; for ( int j = n . length ( ) - 1 ; j >= 0 ; -- j ) { res += n [ j ] ; } return res ; }
int countSubstringWithEqualEnds ( string s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( s [ i ] == s [ j ] ) { result ++ ; } } } return result ; }
double normalSlope ( double a , double b , double x1 , double y1 ) { double g = a / 2 ; double f = b / 2 ; if ( g - x1 == 0 ) return -1 ; double slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) return -2 ; return slope ; }
bool orthogonality ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) { int dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) { return true ; } else { return false ; } }
double findAreaShaded ( double a ) { double sqArea = a * a ; double semiCircleArea = 3.14 * ( a * a ) / 8 ; double shadedArea = 4 * semiCircleArea - sqArea ; return shadedArea ; }
int factorial ( int a , int b ) { int res = 1 ; for ( int i = 1 ; i <= a + b ; i ++ ) { res = res * i ; } for ( int i = 1 ; i <= a ; i ++ ) { res = res / i ; } for ( int i = 1 ; i <= b ; i ++ ) { res = res / i ; } return res ; }
int factorTree ( int n ) { int height = 0 ; while ( n > 1 ) { bool flag = false ; for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( ! flag ) { break ; } } return height ; }
string findIfPossible ( int n , int s , int x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) { return "Yes" ; } if ( n == 1 ) { if ( s == x ) { return "Yes" ; } else { return "No" ; } } if ( n == 2 ) { int c = ( s - x ) / 2 ; int a = c ; int b = c ; a = a + x ; if ( ( a ^ b ) == x ) { return "Yes" ; } else { return "No" ; } } } return "No" ; }
int maximumTripletXor ( int a , int b , int c ) { int ans = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int cur = 1 << i ; if ( a >= cur ) { ans += cur ; a -= cur ; } else if ( b >= cur ) { ans += cur ; b -= cur ; } else if ( c >= cur ) { ans += cur ; c -= cur ; } } return ans ; }
int itemType ( int n ) { int count = 0 ; int day = 1 ; while ( count + day * ( day + 1 ) / 2 < n ) { count += day * ( day + 1 ) / 2 ; day ++ ; } for ( int type = day ; type > 0 ; type -- ) { count += type ; if ( count >= n ) { return type ; } } }
int maxGcdInRange ( int l , int r ) { int ans = 1 ; for ( int z = r ; z >= 1 ; z -- ) { if ( ( r / z ) - ( l - 1 ) / z ) > 1 ) { ans = z ; break ; } } return ans ; }
int sumOfDigits ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += n % 10 ; n /= 10 ; } return sum ; }
bool isRepUnitNum ( int n , int b ) { int length = 0 ; int countOne = 0 ; while ( n != 0 ) { int r = n % b ; length ++ ; if ( r == 1 ) { countOne ++ ; } n = n / b ; } return ( countOne >= 3 && countOne == length ) ; }
bool isStraightLineNum ( int n ) { if ( n <= 99 ) return false ; string str = to_string ( n ) ; int d = str [ 1 ] - str [ 0 ] ; for ( int i = 2 ; i < str . length ( ) ; i ++ ) { if ( str [ i ] - str [ i - 1 ] != d ) return false ; } return true ; }
int getCount ( int d , int n ) { int no = n / d ; int result = no ; for ( int p = 2 ; p * p <= no ; ++ p ) { if ( no % p == 0 ) { while ( no % p == 0 ) no = no / p ; result = result - result / p ; } } if ( no > 1 ) result = result - result / no ; return result ; }
bool isEvenParity ( int x ) { int parity = 0 ; while ( x ) { if ( x & 1 ) { parity ++ ; } x = x >> 1 ; } if ( parity % 2 == 0 ) { return true ; } else { return false ; } }
int isPerfect ( long long int n ) { long long int sum = 1 ; for ( long long int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) { sum = sum + i + n / i ; } else { sum = sum + i ; } } } if ( sum == n && n != 1 ) { return n ; } return 0 ; }
unsigned int logAToBaseB ( unsigned int a , unsigned int b ) { return a > b - 1 ? 1 + logAToBaseB ( a / b , b ) : 0 ; }
int usingBinarySearch ( int start , int end , int n , int s ) { if ( start >= end ) { return start ; } int mid = start + ( end - start ) / 2 ; int totalSum = n * ( n + 1 ) / 2 ; int midSum = mid * ( mid + 1 ) / 2 ; if ( totalSum - midSum <= s ) { return usingBinarySearch ( start , mid , n , s ) ; } return usingBinarySearch ( mid + 1 , end , n , s ) ; }
string minInt ( string s ) { string s1 = s ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s1 [ i ] >= '5' ) { s1 [ i ] = '9' - s1 [ i ] + '0' ; } } if ( s1 [ 0 ] == '0' ) { s1 [ 0 ] = '9' ; } return s1 ; }
int countTriplets ( int a , int b , int c ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { for ( int k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) { ans ++ ; } } } } return ans ; }
bool topsyTurvy ( string s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == '2' || s [ i ] == '4' || s [ i ] == '5' || s [ i ] == '6' || s [ i ] == '7' || s [ i ] == '9' ) { return false ; } } return true ; }
int sumOfLastDig ( int n , int m ) { int sum = 0 ; int k = n / m ; int arr [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ] ; } int rem = k % 10 ; int ans = ( k / 10 ) * sum ; for ( int i = 0 ; i < rem ; i ++ ) { ans += arr [ i ] ; } return ans ; }
int totalPay ( int totalItems , int priceOfOneItem , int n , int m ) { float freeItems = 0 , actual = 0 ; freeItems = totalItems / ( n + m ) ; actual = totalItems - freeItems ; int amount = actual * priceOfOneItem ; return amount ; }
int minOperations ( int x , int y , int p , int q ) { if ( y % x != 0 ) { return -1 ; } int d = y / x ; int a = 0 ; while ( d % p == 0 ) { d = d / p ; a += 1 ; } int b = 0 ; while ( d % q == 0 ) { d = d / q ; b += 1 ; } if ( d != 1 ) { return -1 ; } return a + b ; }
bool isMersenne ( int n ) { while ( n != 0 ) { int r = n % 2 ; if ( r == 0 ) { return false ; } n = n / 2 ; } return true ; }
int findThirdDigit ( int n ) { if ( n < 3 ) { return 0 ; } return n & 1 ? 1 : 6 ; }
bool isOddLength ( int num ) { int count = 0 ; while ( num > 0 ) { num /= 10 ; count ++ ; } if ( count % 2 != 0 ) { return true ; } return false ; }
int Check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return count > 1 ; }
long long bytes ( int kilobytes ) { long long b = kilobytes * 1024 ; return b ; }
int octahedralNum ( int n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
string checkEqual ( string s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] != '1' && s [ i ] != '0' && s [ i ] != '8' ) { return "No" ; } } int start = 0 , end = s . length ( ) - 1 ; while ( start < end ) { if ( s [ start ] != s [ end ] ) { return "No" ; } start ++ ; end -- ; } return "Yes" ; }
bool isUndulating ( string n ) { if ( n . size ( ) <= 2 ) { return false ; } for ( int i = 2 ; i < n . size ( ) ; i ++ ) { if ( n [ i - 2 ] != n [ i ] ) { return false ; } } return true ; }
int firstDigit ( int n ) { while ( n >= 10 ) { n /= 10 ; } return n ; }
int countDigit ( int n ) { if ( n == 0 ) { return 0 ; } return 1 + countDigit ( n / 10 ) ; }
bool isDivisibleBy5 ( string s ) { int n = s . length ( ) ; return s [ n - 1 ] - '0' == 0 || s [ n - 1 ] - '0' == 5 ; }
int inv ( int a , int m ) { int m0 = m , t , q ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { q = a / m ; t = m ; m = a % m , a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
bool onlyFirstAndLastAreSet ( unsigned int n ) { if ( n == 1 ) return true ; if ( n == 2 ) return false ; return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
int divide ( long long dividend , long long divisor ) { int sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? -1 : 1 ; dividend = abs ( dividend ) ; divisor = abs ( divisor ) ; long long quotient = 0 , temp = 0 ; for ( int i = 31 ; i >= 0 ; -- i ) { if ( temp + ( BigInt ( divisor ) << BigInt ( i ) ) <= dividend ) { temp += BigInt ( divisor ) << BigInt ( i ) ; quotient |= 1 << i ; } } if ( sign == -1 ) { quotient = - quotient ; } return quotient ; }
char findProfession ( int level , int pos ) { if ( level == 1 ) { return 'e' ; } if ( findProfession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) { return pos % 2 ? 'd' : 'e' ; } return pos % 2 ? 'e' : 'd' ; }
bool hasCloseElements ( vector < int > numbers , int threshold ) { for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < numbers . size ( ) ; j ++ ) { int distance = abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) { return true ; } } } return false ; }
int truncateNumber ( int number ) { return number % 1 ; }
bool belowZero ( vector < int > operations ) { int balance = 0 ; for ( int op : operations ) { balance += op ; if ( balance < 0 ) { return true ; } } return false ; }
float meanAbsoluteDeviation ( vector < int > numbers ) { int sumNum = 0 ; for ( int num : numbers ) { sumNum += num ; } float mean = sumNum / numbers . size ( ) ; float sumAbsDiff = 0 ; for ( int num : numbers ) { sumAbsDiff += abs ( num - mean ) ; } return sumAbsDiff / numbers . size ( ) ; }
vector < int > intersperse ( vector < int > numbers , int delimiter ) { vector < int > result ; if ( ! numbers . size ( ) ) { return result ; } for ( int i = 0 ; i < numbers . size ( ) - 1 ; i ++ ) { result . push_back ( numbers [ i ] , delimiter ) ; } result . push_back ( numbers [ numbers . size ( ) - 1 ] ) ; return result ; }
pair < int , int > sumProduct ( vector < int > numbers ) { int sumValue = 0 ; int prodValue = 1 ; for ( int n : numbers ) { sumValue += n ; prodValue *= n ; } return { sumValue , prodValue } ; }
vector < string > allPrefixes ( string string ) { vector < string > result ; for ( int i = 1 ; i <= string . length ( ) ; i ++ ) { result . push_back ( string . substr ( 0 , i ) ) ; } return result ; }
vector < int > parseMusic ( string musicString ) { vector < string > current ; vector < int > result ; for ( int i = 0 ; i <= musicString . size ( ) ; i ++ ) { if ( i == musicString . size ( ) || musicString [ i ] == ' ' ) { if ( current . join ( "" ) == 'o' ) { result . push_back ( 4 ) ; } if ( current . join ( "" ) == 'o|' ) { result . push_back ( 2 ) ; } if ( current . join ( "" ) == '.|' ) { result . push_back ( 1 ) ; } current . size ( ) = 0 ; } else { current . push_back ( musicString [ i ] ) ; } } return result ; }
int strlen ( string s ) { return s . length ( ) ; }
vector < int > factorize ( int n ) { vector < int > factors ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n /= i ; factors . push_back ( i ) ; i -- ; } } return factors ; }
string concatenate ( vector < string > strings ) { string result = "" ; for ( string s : strings ) { result += s ; } return result ; }
vector < int > getPositive ( vector < int > l ) { vector < int > result ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( l [ i ] > 0 ) { result . push_back ( l [ i ] ) ; } } return result ; }
vector < int > sortEven ( vector < int > l ) { vector < int > evens ; for ( int i = 0 ; i < l . size ( ) ; i += 2 ) { evens . push_back ( l [ i ] ) ; } sort ( evens . begin ( ) , evens . end ( ) ) ; vector < int > result ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 2 == 0 ) { result . push_back ( evens [ i / 2 ] ) ; } if ( i % 2 == 1 ) { result . push_back ( l [ i ] ) ; } } return result ; }
vector < string > decodeCyclic ( string s ) { vector < string > output ; int i = 0 ; while ( i <= s . length ( ) - 3 ) { string x = s [ i + 2 ] + s . substr ( i , i + 2 ) ; output . push_back ( x ) ; i += 3 ; } return output ; }
int carRaceCollision ( int n ) { return pow ( n , 2 ) ; }
vector < int > incrList ( vector < int > l ) { vector < int > result ; for ( auto i : l ) { result . push_back ( i + 1 ) ; } return result ; }
bool pairsSumToZero ( vector < int > l ) { for ( int i = 0 ; i < l . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < l . size ( ) ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) { return true ; } } } return false ; }
string changeBase ( int x , int b ) { string ret ; while ( x > 0 ) { ret . push_back ( to_string ( x % b ) ) ; x /= b ; } return ret ; }
double median ( vector < int > l ) { sort ( l . begin ( ) , l . end ( ) ) ; if ( l . size ( ) % 2 == 1 ) { return ( double ) l [ l . size ( ) / 2 ] ; } else { return ( double ) ( l [ l . size ( ) / 2 - 1 ] + l [ l . size ( ) / 2 ] ) / 2.0 ; } }
string decodeShift ( string s ) { string result ; for ( char ch : s ) { int w = ( ch + 21 - 'a' ) % 26 + 'a' ; result . push_back ( w ) ; } return result ; }
bool belowThreshold ( vector < int > l , int t ) { for ( int n : l ) { if ( n >= t ) { return false ; } } return true ; }
bool correctBracketing ( vector < char > brackets ) { int depth = 0 ; for ( char b : brackets ) { if ( b == '<' ) { depth += 1 ; } else { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
bool monotonic ( vector < int > l ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . size ( ) ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr != 2 ; }
vector < int > derivative ( vector < int > xs ) { vector < int > result ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) { result . push_back ( i * xs [ i ] ) ; } return result ; }
int vowelsCount ( string s ) { set < char > vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch : s ) { if ( vowels . count ( ch ) ) { count += 1 ; } } if ( s [ s . length ( ) - 1 ] == 'y' || s [ s . length ( ) - 1 ] == 'Y' ) { count += 1 ; } return count ; }
int digitSum ( string s ) { int sum = 0 ; for ( char c : s ) { if ( isupper ( c ) ) sum += ( int ) c ; } return sum ; }
int fruitDistribution ( string s , int n ) { vector < string > num1 ; vector < string > num2 ; bool flag = false ; for ( int i = 0 ; i < s . size ( ) ; i ++ ) { if ( '0' <= s [ i ] && s [ i ] <= '9' ) { if ( ! flag ) { num1 . push_back ( s [ i ] ) ; } if ( flag ) { num2 . push_back ( s [ i ] ) ; } } else if ( ! flag && num1 . size ( ) > 0 ) { flag = true ; } } return n - int ( num1 . begin ( ) ) - int ( num2 . begin ( ) ) ; }
vector < int > pluck ( vector < int > arr ) { vector < int > result ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . size ( ) == 0 ) { result . push_back ( arr [ i ] ) ; result . push_back ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } } return result ; }
vector < int > strangeSortList ( vector < int > lst ) { vector < int > res ; sort ( lst . begin ( ) , lst . end ( ) ) ; int l = 0 ; int r = lst . size ( ) - 1 ; while ( l < r ) { res . push_back ( lst [ l ] ) ; l += 1 ; res . push_back ( lst [ r ] ) ; r -= 1 ; } if ( l == r ) { res . push_back ( lst [ l ] ) ; } return res ; }
double triangleArea ( int a , int b , int c ) { if ( a + b <= c || a + c <= b || b + c <= a ) return -1 ; int s = ( a + b + c ) / 2 ; double area = sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; return area ; }
bool willItFly ( queue < int > q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . size ( ) ; i ++ ) { if ( q [ i ] != q . back ( ) && q [ i ] != q . back ( ) - 1 - i ] ) { return false ; } sum += q [ i ] ; } return sum <= w ; }
bool isCube ( float a ) { a = abs ( a ) ; float i = round ( pow ( a , 1.0 / 3 ) ) ; return pow ( i , 3 ) == a ; }
int hexKey ( string num ) { string key = "2357BD" ; int total = 0 ; for ( char c : num ) { if ( key . find ( c ) != key . end ( ) ) { total += 1 ; } } return total ; }
string decimalToBinary ( int dec ) { vector < string > ans ; if ( dec != 0 ) { while ( dec > 0 ) { ans . push_back ( to_string ( dec % 2 ) ) ; dec /= 2 ; } } else { ans . push_back ( "0" ) ; } return "db" + ans . begin ( ) << "db" ; }
bool primeLength ( string s ) { int len = s . length ( ) ; if ( len < 2 ) { return false ; } for ( int i = 2 ; i < len ; i ++ ) { if ( len % i == 0 ) { return false ; } } return true ; }
int startsOneEnds ( int n ) { if ( n < 1 ) return 0 ; if ( n == 1 ) return 1 ; return 18 * pow ( 10 , n - 2 ) ; }
int add ( vector < int > lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . size ( ) ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; }
vector < pair < int , int > > getRow ( vector < vector < int > > lst , int x ) { vector < pair < int , int > > coords ; for ( auto i : lst ) { for ( int j = lst [ i ] . size ( ) - 1 ; j >= 0 ; j -- ) { if ( i [ j ] == x ) { coords . push_back ( make_pair ( i , j ) ) ; } } } return coords ; }
int nextSmallest ( vector < int > lst ) { sort ( lst . begin ( ) , lst . end ( ) ) ; for ( int i = 1 ; i < lst . size ( ) ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) { return lst [ i ] ; } } return -1 ; }
bool anyInt ( long long int a , long long int b , long long int c ) { if ( a != a || round ( b ) != b || round ( c ) != c ) return false ; return a + b == c || a + c == b || b + c == a ; }
vector < int > countUpTo ( int n ) { vector < int > primes ; for ( int i = 2 ; i < n ; i ++ ) { int p = 1 ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { p = 0 ; break ; } } if ( p == 1 ) { primes . push_back ( i ) ; } } return primes ; }
int closestInteger ( string value ) { int w = stoi ( value ) ; return round ( w ) ; }
vector < int > makeAPile ( int n ) { vector < int > reuslt ; for ( int i = 0 ; i < n ; i ++ ) { reuslt . push_back ( n + 2 * i ) ; } return reuslt ; }
vector < string > wordsString ( string s ) { vector < string > current ; vector < string > words ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s [ i ] == ' ' || s [ i ] == ',' ) { if ( current . size ( ) > 0 ) { words . push_back ( current . begin ( ) , current . end ( ) ) ; current . clear ( ) ; } } else { current . push_back ( s [ i ] ) ; } } return words ; }
string roundedAvg ( int n , int m ) { if ( n > m ) { return -1 ; } int num = ( n + m ) / 2 ; string ret = "" ; while ( num > 0 ) { ret += to_string ( num % 2 ) ; num /= 2 ; } return ret ; }
vector < int > uniqueDigits ( vector < int > x ) { vector < int > digits ; for ( int n : x ) { bool isUnique = true ; for ( char c : to_string ( n ) ) { if ( c % 2 == 0 ) { isUnique = false ; break ; } } if ( isUnique ) { digits . push_back ( n ) ; } } sort ( digits . begin ( ) , digits . end ( ) ) ; return digits ; }
int countNums ( vector < int > arr ) { int num = 0 ; for ( int n : arr ) { int neg = n < 0 ? -1 : 1 ; n = abs ( n ) ; vector < int > digits ; for ( auto c : n ) { digits . push_back ( c - '0' ) ; } digits [ 0 ] *= neg ; int sum = 0 ; for ( int d : digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; }
bool moveOneBall ( vector < int > arr ) { if ( arr . size ( ) == 0 ) { return true ; } int num = 0 ; for ( int i = 1 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ arr . size ( ) - 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; }
string exchange ( vector < int > lst1 , vector < int > lst2 ) { int odd = 0 ; int even = 0 ; for ( int n : lst1 ) { if ( n % 2 == 1 ) { odd ++ ; } } for ( int n : lst2 ) { if ( n % 2 == 0 ) { even ++ ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; }
vector < string > oddCount ( vector < string > lst ) { vector < string > results ; string originalStr = "the number of odd elements in the string i of the input." ; for ( string s : lst ) { int sum = 0 ; for ( string d : s ) { if ( '0' <= d && d <= '9' && d % 2 == 1 ) sum += 1 ; } string result ; for ( char c : originalStr ) { if ( c == 'i' ) result . push_back ( to_string ( sum ) ) ; else result . push_back ( c ) ; } results . push_back ( result ) ; } return results ; }
int minSubArraySum ( vector < int > nums ) { int minSum = INT_MAX ; int sum = 0 ; for ( auto num : nums ) { sum += num ; if ( minSum > sum ) { minSum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return minSum ; }
int maxFill ( vector < vector < int > > grid , int capacity ) { int res = 0 ; for ( vector < int > well : grid ) { int sum = 0 ; for ( int n : well ) { sum += n ; } if ( sum > 0 ) { res += ( sum - 1 ) / capacity + 1 ; } } return res ; }
vector < string > selectWords ( string s , int n ) { string vowels = "aeiouAEIOU" ; vector < string > current ; vector < string > result ; int consonantNum = 0 ; for ( int i = 0 ; i <= s . size ( ) ; i ++ ) { if ( i == s . size ( ) || s [ i ] == ' ' ) { if ( consonantNum == n ) { result . push_back ( current . begin ( ) ) ; } current . clear ( ) ; consonantNum = 0 ; } else { current . push_back ( s [ i ] ) ; if ( ! vowels . count ( s [ i ] ) ) { consonantNum += 1 ; } } } return result ; }
int solution ( vector < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . size ( ) ; i += 2 ) { if ( lst [ i ] % 2 == 1 ) { sum += lst [ i ] ; } } return sum ; }
int addElements ( int arr [ ] , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= -99 && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; }
vector < int > getOddCollatz ( int n ) { vector < int > oddCollatz ; while ( n != 1 ) { if ( n % 2 == 1 ) { oddCollatz . push_back ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } oddCollatz . push_back ( 1 ) ; sort ( oddCollatz . begin ( ) , oddCollatz . end ( ) ) ; return oddCollatz ; }
bool isSorted ( vector < int > lst ) { for ( int i = 1 ; i < lst . size ( ) ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; }
string intersection ( pair < int , int > interval1 , pair < int , int > interval2 ) { int inter1 = max ( interval1 . first , interval2 . first ) ; int inter2 = min ( interval1 . second , interval2 . second ) ; int l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return "NO" ; } } return "YES" ; }
int prodSigns ( vector < int > arr ) { if ( arr . size ( ) ) { return INT_MIN ; } int sum = 0 ; int prods = 1 ; for ( int i : arr ) { sum += abs ( i ) ; if ( i == 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; }
vector < int > minPath ( vector < vector < int > > grid , int k ) { int n = grid . size ( ) ; int minNum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { vector < int > tmp ; if ( i != 0 ) { tmp . push_back ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . push_back ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . push_back ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . push_back ( grid [ i ] [ j + 1 ] ) ; } minNum = min ( * tmp . begin ( ) , * tmp . end ( ) ) ; } } } vector < int > ans ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . push_back ( 1 ) ; } else { ans . push_back ( minNum ) ; } } return ans ; }
int digits ( int n ) { int prod = 0 ; for ( int digit : to_string ( n ) ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) { prod = 1 ; } prod *= digit - '0' ; } } return prod ; }
bool isNested ( string s ) { int count = 0 ; int maxCount = 0 ; for ( char ch : s ) { if ( ch == '[' ) { count += 1 ; } if ( ch == ']' ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > maxCount ) { maxCount = count ; } if ( count <= maxCount - 2 ) { return true ; } } return false ; }
int sumSquares ( vector < int > lst ) { int sum = 0 ; for ( int i : lst ) { sum += ceil ( i ) * ceil ( i ) ; } return sum ; }
int canArrange ( vector < int > arr ) { int index = -1 ; for ( int i : arr ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
int largestSmallestIntegers ( vector < int > lst ) { int maxNeg = 0 , minPos = 0 ; for ( int n : lst ) { if ( n < 0 && ( maxNeg == 0 || n > maxNeg ) ) { maxNeg = n ; } if ( n > 0 && ( minPos == 0 || n < minPos ) ) { minPos = n ; } } return { maxNeg , minPos } ; }
string fixSpaces ( string text ) { string res ; int spaceLen = 0 ; for ( int i = 0 ; i <= text . length ( ) ; i ++ ) { if ( i == text . length ( ) || text [ i ] != ' ' ) { if ( spaceLen == 1 ) { res . push_back ( '_' ) ; } if ( spaceLen == 2 ) { res . push_back ( '__' ) ; } if ( spaceLen > 2 ) { res . push_back ( '-' ) ; } spaceLen = 0 ; if ( i != text . length ( ) ) { res . push_back ( text [ i ] ) ; } } else { spaceLen += 1 ; } } return res ; }
string fileNameCheck ( string fileName ) { int digitNum = 0 , dotNum = 0 ; if ( fileName . length ( ) < 5 || toupper ( fileName [ 0 ] ) == fileName [ 0 ] ) { return "No" ; } char suffix = fileName . substr ( - 4 ) ; if ( suffix != '.txt' && suffix != '.exe' && suffix != '.dll' ) { return "No" ; } for ( char c : fileName ) { if ( '0' <= c && c <= '9' ) { digitNum += 1 ; } if ( c == '.' ) { dotNum += 1 ; } } if ( digitNum > 3 || dotNum != 1 ) { return "No" ; } return "Yes" ; }
int sumSquares ( vector < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { if ( i % 3 == 0 ) { sum += lst [ i ] * lst [ i ] ; } else if ( i % 4 == 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else { sum += lst [ i ] ; } } return sum ; }
string wordsInSentence ( vector < string > sentence ) { string result = "" ; string current ; for ( int i = 0 ; i <= sentence . size ( ) ; i ++ ) { if ( i == sentence . size ( ) || sentence [ i ] == ' ' ) { bool isPrime = true ; int l = current . size ( ) ; if ( l < 2 ) { isPrime = false ; } for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { result . push_back ( current . begin ( ) + " " ) ; } current . size ( ) = 0 ; } else { current . push_back ( sentence [ i ] ) ; } } result = result . begin ( ) ; if ( result . size ( ) > 0 ) { result . pop_back ( ) ; } return result ; }
bool simplify ( string x , string n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x [ i ] == '/' ) { a = stoi ( x . substr ( 0 , i ) ) ; b = stoi ( x . substr ( i + 1 ) ) ; } } for ( int i = 0 ; i < n . length ( ) ; i ++ ) { if ( n [ i ] == '/' ) { c = stoi ( n . substr ( 0 , i ) ) ; d = stoi ( n . substr ( i + 1 ) ) ; } } return ( a * c ) % ( b * d ) == 0 ; }
int specialFilter ( vector < int > nums ) { int count = 0 ; for ( int num : nums ) { if ( num > 10 ) { string w = to_string ( num ) ; if ( w [ 0 ] % 2 == 1 && w [ -1 ] % 2 == 1 ) { count += 1 ; } } } return count ; }
int getMaxTriples ( int n ) { long long arr [ n ] ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = i * i - i + 1 ; } long long count = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) { count += 1 ; } } } } return count ; }
int doubleTheDifference ( vector < int > lst ) { int sum = 0 ; for ( int d : lst ) { int num = d ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) { sum += num * num ; } } } return sum ; }
vector < int > compare ( vector < int > game , vector < int > guess ) { vector < int > result ; for ( int i = 0 ; i < game . size ( ) ; i ++ ) { result . push_back ( abs ( game [ i ] - guess [ i ] ) ) ; } return result ; }
string strongestExtension ( string className , vector < string > extensions ) { string strongest = "" ; int max = INT_MIN ; for ( string extension : extensions ) { int strength = 0 ; for ( char chr : extension ) { if ( toupper ( chr ) == chr && tolower ( chr ) != chr ) { strength += 1 ; } if ( toupper ( chr ) != chr && tolower ( chr ) == chr ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return className + "." + strongest ; }
string intToMiniRoman ( int number ) { int num [ ] = { 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 } ; string sym [ ] = { 'm' , 'cm' , 'd' , 'cd' , 'c' , 'xc' , 'l' , 'xl' , 'x' , 'ix' , 'v' , 'iv' , 'i' } ; int pos = 0 ; string res ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res . push_back ( sym [ pos ] ) ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } return res ; }
pair < int , int > eat ( int number , int need , int remaining ) { return need > remaining ? { number + remaining , 0 } : { number + need , remaining - need } ; }
int doAlgebra ( vector < char > ops , vector < char > operands ) { vector < int > nums = { 0 } ; vector < char > currentOps = { 0 } ; int i = currentOps . size ( ) - 1 ; while ( i >= 0 ) { if ( currentOps [ i ] == "**" ) { nums [ i ] = pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . erase ( i + 1 , 1 ) ; currentOps . erase ( i , 1 ) ; } i -- ; } i = 0 ; while ( i < currentOps . size ( ) ) { if ( currentOps [ i ] == '*' ) { nums [ i ] *= nums [ i + 1 ] ; nums . erase ( i + 1 , 1 ) ; currentOps . erase ( i , 1 ) ; } else if ( currentOps [ i ] == "//" ) { nums [ i ] /= nums [ i + 1 ] ; nums . erase ( i + 1 , 1 ) ; currentOps . erase ( i , 1 ) ; } else { i ++ ; } } i = 0 ; while ( i < currentOps . size ( ) ) { if ( currentOps [ i ] == '+' ) { nums [ i ] += nums [ i + 1 ] ; nums . erase ( i + 1 , 1 ) ; currentOps . erase ( i , 1 ) ; } else if ( currentOps [ i ] == '-' ) { nums [ i ] -= nums [ i + 1 ] ; nums . erase ( i + 1 , 1 ) ; currentOps . erase ( i , 1 ) ; } else { i ++ ; } } return nums [ 0 ] ; }
vector < int > generateIntegers ( int a , int b ) { int lower = max ( 2 , min ( a , b ) ) ; int upper = min ( 8 , max ( a , b ) ) ; vector < int > result ; for ( int i = lower ; i <= upper ; i += 2 ) { result . push_back ( i ) ; } return result ; }
bool isStepNum ( int n ) { int prevDigit = -1 ; while ( n > 0 ) { int curDigit = n % 10 ; if ( prevDigit == -1 ) { prevDigit = curDigit ; } else { if ( abs ( prevDigit - curDigit ) != 1 ) { return false ; } } prevDigit = curDigit ; n = n / 10 ; } return true ; }
long long numOfWays ( int n , int k ) { int p = 1 ; if ( k % 2 != 0 ) { p = -1 ; } return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; }
vector < int > findDivisors ( int n ) { vector < int > v ; for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { v . push_back ( i ) ; } else { v . push_back ( i ) ; v . push_back ( n / i ) ; } } } return v ; }
int eggDrop ( int n , int k ) { if ( k == 1 || k == 0 ) { return k ; } if ( n == 1 ) { return k ; } int min = INT_MAX ; int x , res ; for ( x = 1 ; x <= k ; x ++ ) { res = max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , k - x ) ) ; if ( res < min ) { min = res ; } } return min + 1 ; }
bool isPowerOfTwo ( int n ) { if ( n == 0 ) return false ; return ceil ( log2 ( n ) ) == floor ( log2 ( n ) ) ; }
string shortestPalindrome ( string s ) { int n = s . size ( ) ; vector < string > v ; for ( int i = 0 ; i < n ; i ++ ) { int l = i ; int r = i ; string ans1 = "" ; string ans2 = "" ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans1 += s [ l ] ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans2 += s [ l ] ; l -- ; r ++ ; } v . push_back ( ans1 ) ; v . push_back ( ans2 ) ; } string ans = v [ 0 ] ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v [ i ] != "" ) { if ( ans . first >= v [ i ] . first ) { ans = v [ i ] ; } } } return ans ; }
int minimumAdjacentDifference ( vector < int > a , int n , int k ) { int minDiff = INT_MAX ; for ( int i = 0 ; i <= k ; i ++ ) { int maxDiff = INT_MAX ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { maxDiff = max ( maxDiff , a [ p + 1 ] - a [ p ] ) ; } } minDiff = min ( minDiff , maxDiff ) ; } return minDiff ; }
int cal ( vector < int > arr , int mid ) { int chocolate = 0 ; for ( auto i : arr ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; }
ll check ( ll v , vector < ll > a , ll m ) { ll tec = 0 , ans = 0 ; vector < ll > b ( a . size ( ) + 3 , 0 ) ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { ll mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ( ans <= m ) ; }
int largestNum ( vector < int > arr ) { int res = 0 ; sort ( arr . begin ( ) , arr . end ( ) ) ; int l = 0 , r = arr . size ( ) - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = max ( res , max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) l ++ ; else r -- ; } return res ; }
int binarySearch ( vector < int > p , int n ) { int i = 0 ; int j = p . size ( ) - 1 ; int index = -1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
int findMinLength ( vector < int > arr ) { int index = arr . size ( ) - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; }
int minDigits ( int n , int k ) { int digits_num = floor ( log10 ( n ) + 1 ) ; int temp_sum = 0 ; int temp = digits_num ; int result ; int x , v ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = n / pow ( 10 , temp - 1 ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v /= 10 ; v ++ ; result = v * pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; } }
int checkForPerfectSquare ( int arr [ ] , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return -1 ; }
int minFlips ( vector < vector < char > > mat , string s ) { int n = mat . size ( ) ; int m = mat [ 0 ] . size ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s [ ( i + j ) ] - '0' ) { count ++ ; } } } return count ; }
vector < vector < int > > constructTree ( int n , vector < pair < int , int > > edges ) { vector < vector < int > > adjl ( n ) ; for ( auto e : edges ) { int u = e . first ; int v = e . second ; adjl [ u ] . push_back ( v ) ; adjl [ v ] . push_back ( u ) ; } return adjl ; }
int findSumOfValues ( int v , int parent [ ] , int valuesChildren [ ] ) { int curNode = v ; int sum = 0 ; while ( curNode != -1 ) { sum += valuesChildren [ curNode ] ; curNode = parent [ curNode ] ; } return sum ; }
int getDistinct ( int d , int count ) { int num = 0 ; count = pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; }
bool isIncreasing ( vector < int > arr ) { for ( int i = 0 ; i < arr . size ( ) - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; }
int minAdjSwaps ( vector < vector < int > > mat ) { int n = mat . size ( ) ; int cntZero [ n ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 && mat [ i ] [ j ] == 0 ; j -- ) { cntZero [ i ] ++ ; } } int cntSwaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cntZero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cntZero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) { return -1 ; } while ( first > i ) { swap ( cntZero [ first ] , cntZero [ first - 1 ] ) ; first -- ; cntSwaps ++ ; } } } return cntSwaps ; }
int solve ( vector < int > values , vector < int > salary , int mod ) { long long ret = 1 ; int amt = 0 ; sort ( values . begin ( ) , values . end ( ) ) ; sort ( salary . begin ( ) , salary . end ( ) ) ; while ( salary . size ( ) ) { while ( values . size ( ) && values . back ( ) >= salary . back ( ) ) { amt ++ ; values . pop_back ( ) ; } if ( amt == 0 ) { return 0 ; } ret *= amt -- ; ret %= mod ; salary . pop_back ( ) ; } return ret ; }
vector < int > organizeInOrder ( vector < int > vec , vector < int > op , int n ) { vector < int > result ( n , 0 ) ; sort ( vec . begin ( ) , vec . end ( ) ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; }
int countPoints ( int n , int m , int a [ ] , int b [ ] , int x , int y ) { sort ( a , a + n ) ; sort ( b , b + m ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) break ; if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; }
bool areSame ( int a [ ] , int b [ ] ) { sort ( a , a + n ) ; sort ( b , b + n ) ; return a [ 0 ] == b [ 0 ] ; }
int countNumberOfStrings ( string s ) { int n = s . length ( ) - 1 ; int count = pow ( 2 , n ) ; return count ; }
vector < int > primePower ( int x ) { vector < int > primePow ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } primePow . push_back ( p ) ; } } if ( x > 1 ) { primePow . push_back ( x ) ; } return primePow ; }
bool isPerfect ( double n0 ) { double n = sqrt ( n0 ) ; if ( floor ( n ) != ceil ( n ) ) { return false ; } return true ; }
int findSum ( int l , int r ) { vector < int > arr ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . push_back ( i + x ) ; if ( i + 1 <= r ) { arr . push_back ( i + 1 + x ) ; } x *= -1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr [ i ] ; } return sum ; }
int results ( int n , int k ) { return round ( pow ( n , 1.0 / pow ( 2.0 , k ) ) ) ; }
vector < int > factors ( int n ) { vector < int > v ; v . push_back ( 1 ) ; for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . push_back ( i ) ; if ( n / i != i ) { v . push_back ( n / i ) ; } } } return v ; }
int smallestNum ( int n ) { float x = pow ( 10.0 , ( n - 1 ) / 2.0 ) ; return ceil ( x ) ; }
int smallest ( string s ) { vector < int > a ( s . size ( ) , 0 ) ; for ( int i = 0 ; i < s . size ( ) ; i ++ ) { a [ i ] = s [ i ] - '0' ; } vector < int > b ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { if ( ( a [ i ] ) % 2 != 0 ) { b . push_back ( a [ i ] ) ; } } sort ( b . begin ( ) , b . end ( ) ) ; if ( b . size ( ) > 1 ) { return b [ 0 ] * 10 + b [ 1 ] ; } return -1 ; }
vector < float > Diagonals ( int a , int b , int c , int d ) { vector < float > ans ; ans . push_back ( sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . push_back ( sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; }
int findNumberOfDigits ( int n , int base ) { int dig = floor ( log ( n ) / log ( base ) ) + 1 ; return dig ; }
double nGon ( int n ) { double proAngleVar ; if ( n % 4 == 0 ) { proAngleVar = M_PI * ( 180.0 / n ) / 180 ; } else { proAngleVar = M_PI * ( 180.0 / ( 2 * n ) ) / 180 ; } double negX = 1.0e+99 , posX = -1.0e+99 , negY = 1.0e+99 , posY = -1.0e+99 ; for ( int j = 0 ; j < n ; ++ j ) { double px = cos ( 2 * M_PI * j / n + proAngleVar ) ; double py = sin ( 2 * M_PI * j / n + proAngleVar ) ; negX = min ( negX , px ) ; posX = max ( posX , px ) ; negY = min ( negY , py ) ; posY = max ( posY , py ) ; } double opt2 = max ( posX - negX , posY - negY ) ; return ( double ) opt2 / sin ( M_PI / n ) / 2 ; }
int findMaxK ( int n ) { int p = ( int ) floor ( log2 ( n ) ) ; return pow ( 2 , p ) ; }
int nthFibo ( int n ) { double a = ( pow ( 5 , 0.5 ) + 1 ) / 2 ; double b = ( -1 * pow ( 5 , 0.5 ) + 1 ) / 2 ; double r = pow ( 5 , 0.5 ) ; double ans = ( pow ( a , n ) - pow ( b , n ) ) / r ; return ans ; }
float findProb ( int l , int r ) { int countOfPs = floor ( sqrt ( r ) ) - ceil ( sqrt ( l ) ) + 1 ; int total = r - l + 1 ; float prob = countOfPs / total ; return prob ; }
int previousFibonacci ( int n ) { double a = n / ( 1 + sqrt ( 5 ) ) / 2.0 ; return round ( a ) ; }
vector < int > distPrime ( int arr [ ] , vector < int > allPrimes ) { vector < int > list1 ; for ( int i : allPrimes ) { for ( int j : arr ) { if ( j % i == 0 ) { list1 . push_back ( i ) ; break ; } } } return list1 ; }
vector < int > getArray ( int n ) { vector < int > ans ; int p2 = 1 ; while ( n > 0 ) { if ( n & 1 ) { ans . push_back ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; }
int maximumLength ( vector < int > a ) { int counts [ 11 ] = { 0 } ; int ans = 0 ; for ( int index = 0 ; index < a . size ( ) ; index ++ ) { counts [ a [ index ] ] += 1 ; vector < int > k ; for ( auto i : counts ) if ( i != 0 ) k . push_back ( i ) ; sort ( k . begin ( ) , k . end ( ) ) ; if ( k . size ( ) == 1 || ( k [ 0 ] == k [ k . size ( ) - 2 ] && k . back ( ) - k [ k . size ( ) - 2 ] == 1 ) || ( k [ 0 ] == 1 and k [ 1 ] == k . back ( ) ) ) { ans = index ; } } return ans + 1 ; }
int maxEdges ( int n ) { int edges = n * n / 4 ; return edges ; }
int findK ( int n , int k ) { vector < int > a ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a . push_back ( i ) ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a . push_back ( i ) ; } } return a [ k - 1 ] ; }
bool isKeith ( int x , int temp ) { vector < int > terms ; int n = 0 ; while ( temp > 0 ) { terms . push_back ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } reverse ( terms . begin ( ) , terms . end ( ) ) ; int nextTerm = 0 , i = n ; while ( nextTerm < x ) { nextTerm = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { nextTerm += terms [ i - j ] ; } terms . push_back ( nextTerm ) ; i ++ ; } return nextTerm == x ; }
bool factors ( int n , int k ) { vector < int > v ; while ( n % 2 == 0 ) { v . push_back ( 2 ) ; n /= 2 ; } if ( v . size ( ) >= k ) return true ; for ( int i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n = n / i ; v . push_back ( i ) ; } if ( v . size ( ) >= k ) return true ; } if ( n > 2 ) { v . push_back ( n ) ; } if ( v . size ( ) >= k ) return true ; return false ; }
vector < string > separateParenGroups ( string parenString ) { vector < string > allParens ; string currentParen ; int currentDepth = 0 ; for ( char c : parenString ) { if ( c == '(' ) { currentDepth += 1 ; currentParen . push_back ( c ) ; } else if ( c == ')' ) { currentDepth -= 1 ; currentParen . push_back ( c ) ; if ( currentDepth == 0 ) { allParens . push_back ( currentParen . join ( "" ) ) ; currentParen . clear ( ) ; } } } return allParens ; }
vector < int > parseNestedParens ( string parenString ) { vector < int > allLevels ; int level = 0 ; int maxLevel = 0 ; for ( int i = 0 ; i < parenString . length ( ) ; i ++ ) { char chr = parenString [ i ] ; if ( chr == '(' ) { level += 1 ; if ( level > maxLevel ) { maxLevel = level ; } } if ( chr == ')' ) { level -= 1 ; if ( level == 0 ) { allLevels . push_back ( maxLevel ) ; maxLevel = 0 ; } } } return allLevels ; }
vector < string > filterBySubstring ( vector < string > strings , string substring ) { vector < string > result ; for ( string s : strings ) { if ( s . find ( substring ) != string :: npos ) { result . push_back ( s ) ; } } return result ; }
vector < int > rollingMax ( vector < int > numbers ) { int runningMax = 0 ; vector < int > result ; for ( int n : numbers ) { if ( n > runningMax ) { runningMax = n ; } result . push_back ( runningMax ) ; } return result ; }
string makePalindrome ( string s ) { if ( s . length ( ) ) { return "" ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { string rStr = s . substr ( i ) ; if ( rStr == rStr . join ( "" ) ) { string nStr = s . substr ( 0 , i ) ; string n2Str = nStr . split ( "" ) . reverse ( ) . join ( "" ) ; return s + n2Str ; } } return s . substr ( 0 , -1 ) + s ; }
string stringXor ( string a , string b ) { vector < string > result ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { if ( a [ i ] == b [ i ] ) { result . push_back ( "0" ) ; } else { result . push_back ( "1" ) ; } } return result ; }
string longest ( vector < string > strings ) { if ( ! strings . size ( ) ) { return "" ; } int maxLen = * max_element ( strings . begin ( ) , strings . end ( ) ) ; for ( string s : strings ) { if ( s . size ( ) == maxLen ) { return s ; } } return "" ; }
string stringSequence ( int n ) { string s ; for ( int i = 0 ; i < n ; i ++ ) { s . push_back ( to_string ( i ) ) ; s . push_back ( " " ) ; } s . push_back ( to_string ( n ) ) ; return s ; }
int countDistinctCharacters ( string s ) { set < char > distinct ; for ( char c : tolower ( s ) ) { distinct . insert ( c ) ; } return distinct . size ( ) ; }
int howManyTimes ( string s , string sub ) { int times = 0 ; for ( int i = 0 ; i <= s . length ( ) - sub . length ( ) ; i ++ ) { if ( s . substr ( i , sub . length ( ) ) == sub ) { times += 1 ; } } return times ; }
string sortNumbers ( vector < string > numbers ) { map < string , string > toNum = { { "zero" , 0 } , { "one" , 1 } , { "two" , 2 } , { "three" , 3 } , { "four" , 4 } , { "five" , 5 } , { "six" , 6 } , { "seven" , 7 } , { "eight" , 8 } , { "nine" , 9 } } ; map < string , string > fromNum = { { 0 , "zero" } , { 1 , "one" } , { 2 , "two" } , { 3 , "three" } , { 4 , 'four' } , { 5 , 'five' } , { 6 , 'six' } , { 7 , 'seven' } , { 8 , 'eight' } , { 9 , "nine" } } ; vector < string > ints ; string current = { numbers [ i ] } ; for ( int i = 0 ; i <= numbers . size ( ) ; i ++ ) { if ( i == numbers . size ( ) || numbers [ i ] == ' ' ) { if ( toNum . find ( current . begin ( ) ) != toNum . end ( ) ) { ints . push_back ( toNum [ current . begin ( ) ] ) ; current . pop_back ( ) ; } } else { current . push_back ( numbers [ i ] ) ; } } sort ( ints . begin ( ) , ints . end ( ) ) ; vector < string > result ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { result . push_back ( fromNum [ ints [ i ] ] ) ; if ( i != ints . size ( ) - 1 ) { result . push_back ( " " ) ; } } return result ; }
pair < int , int > findClosestElements ( vector < int > numbers ) { pair < int , int > closestPair = { numbers [ 0 ] , numbers [ 1 ] } ; int distance = abs ( closestPair [ 0 ] - closestPair [ 1 ] ) ; for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < numbers . size ( ) ; j ++ ) { if ( abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closestPair . first = numbers [ i ] ; closestPair . second = numbers [ j ] ; distance = abs ( numbers [ i ] - numbers [ j ] ) ; } } } sort ( closestPair . begin ( ) , closestPair . end ( ) ) ; return closestPair ; }
vector < double > rescaleToUnit ( vector < int > numbers ) { int minNum = * min_element ( numbers . begin ( ) , numbers . end ( ) ) ; int maxNum = * max_element ( numbers . begin ( ) , numbers . end ( ) ) ; vector < double > result ; for ( int n : numbers ) { result . push_back ( ( n - minNum ) / ( maxNum - minNum ) ) ; } return result ; }
vector < int > filterIntegers ( vector < int > values ) { vector < int > result ; for ( int e : values ) { if ( isInteger ( e ) ) { result . push_back ( e ) ; } } return result ; }
vector < int > removeDuplicates ( vector < int > numbers ) { unordered_map < int , int > counter ; for ( int i : numbers ) { counter [ i ] ++ ; } vector < int > result ; for ( int i : numbers ) { if ( counter [ i ] == 1 ) { result . push_back ( i ) ; } } return result ; }
string flipCase ( string s ) { string result ; for ( char c : s ) { if ( isupper ( c ) && islower ( c ) ) result . push_back ( toupper ( c ) ) ; else result . push_back ( tolower ( c ) ) ; } return result ; }
vector < string > filterByPrefix ( vector < string > strings , string prefix ) { vector < string > result ; for ( int i = 0 ; i < strings . size ( ) ; i ++ ) { if ( strings [ i ] . startsWith ( prefix ) ) { result . push_back ( strings [ i ] ) ; } } return result ; }
double findZero ( vector < int > xs ) { double ans = 0 ; double value = 0 ; for ( int i = 0 ; i < xs . size ( ) ; i ++ ) { value += xs [ i ] * pow ( ans , i ) ; } while ( abs ( value ) > 1e-6 ) { double driv = 0 ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) { driv += xs [ i ] * pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . size ( ) ; i ++ ) { value += xs [ i ] * pow ( ans , i ) ; } } return ans ; }
vector < int > sortThird ( vector < int > l ) { vector < int > thirds ; for ( int i = 0 ; i < l . size ( ) ; i += 3 ) { thirds . push_back ( l [ i ] ) ; } sort ( thirds . begin ( ) , thirds . end ( ) ) ; vector < int > result ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 3 == 0 ) { result . push_back ( thirds [ i / 3 ] ) ; } else { result . push_back ( l [ i ] ) ; } } return result ; }
vector < int > unique ( vector < int > l ) { vector < int > result ; result . assign ( l ) ; sort ( result . begin ( ) , result . end ( ) ) ; return result ; }
int maxElement ( vector < int > l ) { return * max_element ( l . begin ( ) , l . end ( ) ) ; }
bool triplesSumToZero ( vector < int > l ) { for ( int i = 0 ; i < l . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < l . size ( ) ; j ++ ) { for ( int k = j + 1 ; k < l . size ( ) ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) { return true ; } } } } return false ; }
int fib4 ( int n ) { int results [ n + 1 ] = { 0 , 0 , 2 , 0 } ; for ( int i = 4 ; i <= n ; i ++ ) { results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ; } return results [ n ] ; }
bool isPalindrome ( string text ) { string pr = to_string ( text ) ; return ( pr == text ) ; }
string removeVowels ( string text ) { string result ; set < char > vowels = "aeiou" ; for ( char ch : text ) { if ( ! vowels . count ( ch ) ) { result . push_back ( ch ) ; } } return result ; }
bool sameChars ( string s0 , string s1 ) { set < char > set0 ; for ( char c : s0 ) { set0 . insert ( c ) ; } set1 . clear ( ) ; for ( char c : s1 ) { set1 . insert ( c ) ; } return set0 . compare ( set1 . begin ( ) , set1 . end ( ) ) == 0 ; }
vector < int > common ( vector < int > l1 , vector < int > l2 ) { set < int > us ; for ( int e1 : l1 ) { for ( int e2 : l2 ) { if ( e1 == e2 ) { us . insert ( e1 ) ; } } } vector < int > ret ; sort ( ret . begin ( ) , ret . end ( ) ) ; return ret ; }
bool correctBracketing ( vector < char > brackets ) { int depth = 0 ; for ( auto b : brackets ) { if ( b == '(' ) { depth += 1 ; } else { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
string circularShift ( int x , int shift ) { string s = to_string ( x ) ; if ( shift > s . length ( ) ) { return s . substr ( shift ) . reverse ( ) . join ( "" ) ; } return s . substr ( - shift ) + s . substr ( 0 , - shift ) ; }
int search ( vector < int > lst ) { unordered_map < int , int > counter ; for ( auto i : lst ) { counter [ i ] ++ ; } int ans = -1 ; for ( auto i : counter ) { if ( i . second >= i . first && i . first > ans ) { ans = i . first ; } } return ans ; }
int smallestChange ( vector < int > arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . size ( ) / 2 ; i ++ ) { if ( arr [ i ] != arr [ arr . size ( ) - i - 1 ] ) { ans += 1 ; } } return ans ; }
vector < string > totalMatch ( vector < string > lst1 , vector < string > lst2 ) { int sum1 = 0 ; for ( string st : lst1 ) { sum1 += st . length ( ) ; } int sum2 = 0 ; for ( string st : lst2 ) { sum2 += st . length ( ) ; } return sum1 > sum2 ? lst2 : lst1 ; }
bool isHappy ( string s ) { if ( s . length ( ) < 3 ) { return false ; } for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s [ i ] == s [ i + 1 ] || s [ i + 1 ] == s [ i + 2 ] || s [ i ] == s [ i + 2 ] ) { return false ; } } return true ; }
vector < string > numericalLetterGrade ( vector < int > grades ) { vector < string > letterGrade ; for ( int i = 0 ; i < grades . size ( ) ; i ++ ) { double gpa = grades [ i ] ; if ( gpa == 4.0 ) { letterGrade . push_back ( "A+" ) ; } else if ( gpa > 3.7 ) { letterGrade . push_back ( "A" ) ; } else if ( gpa > 3.3 ) { letterGrade . push_back ( "A-" ) ; } else if ( gpa > 3.0 ) { letterGrade . push_back ( "B+" ) ; } else if ( gpa > 2.7 ) { letterGrade . push_back ( "B" ) ; } else if ( gpa > 2.3 ) { letterGrade . push_back ( "B-" ) ; } else if ( gpa > 2.0 ) { letterGrade . push_back ( "C+" ) ; } else if ( gpa > 1.7 ) { letterGrade . push_back ( "C" ) ; } else if ( gpa > 1.3 ) { letterGrade . push_back ( "C-" ) ; } else if ( gpa > 1.0 ) { letterGrade . push_back ( "D+" ) ; } else if ( gpa > 0.7 ) { letterGrade . push_back ( "D" ) ; } else if ( gpa > 0.0 ) { letterGrade . push_back ( "D-" ) ; } else { letterGrade . push_back ( "E" ) ; } } return letterGrade ; }
string solve ( int n ) { vector < string > biStr ; int sum = 0 ; for ( auto c : n ) { sum += c - '0' ; } while ( sum > 0 ) { biStr . push_back ( sum % 2 ) ; sum /= 2 ; } return biStr ; }
string antiShuffle ( string s ) { vector < string > ret ; string current ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s [ i ] == ' ' ) { sort ( current . begin ( ) , current . end ( ) ) ; if ( ret . size ( ) ) { ret . push_back ( " " ) ; } ret . push_back ( current . begin ( ) ) ; current . clear ( ) ; } else { current . push_back ( s [ i ] ) ; } } return ret ; }
vector < int > sortArray ( vector < int > array ) { if ( ! array . size ( ) ) { return array ; } if ( ( array [ 0 ] + array [ array . size ( ) - 1 ] ) % 2 == 1 ) { sort ( array . begin ( ) , array . end ( ) ) ; } else { sort ( array . begin ( ) , array . end ( ) ) ; } return array ; }
string encrypt ( string s ) { vector < char > ans ; for ( char c : s ) { if ( isupper ( c ) ) { ans . push_back ( c ) ; } else { ans . push_back ( c ) ; } } return ans ; }
int isBored ( string s ) { bool isStart = true ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == '.' || s [ i ] == '?' || s [ i ] == '!' ) { isStart = true ; } else if ( isStart ) { if ( s [ i ] == ' ' ) { continue ; } if ( s . substr ( i , 2 ) == 'I ' ) { sum += 1 ; } isStart = false ; } } return sum ; }
vector < char > encode ( string message ) { unordered_set < char > vowels = "aeiouAEIOU" ; vector < char > ret ; for ( char c : message ) { if ( toupper ( c ) == c && tolower ( c ) != c ) { c = toupper ( c ) ; if ( vowels . find ( c ) != vowels . end ( ) ) { c = ( char ) ( 'a' + ( c - 'a' + 2 ) % 26 ) ; } } else if ( toupper ( c ) != c && tolower ( c ) == c ) { c = toupper ( c ) ; if ( vowels . find ( c ) != vowels . end ( ) ) { c = ( char ) ( 'A' + ( c - 'A' + 2 ) % 26 ; } } ret . push_back ( c ) ; } return ret ; }
int skjkasdkd ( vector < int > lst ) { int largest = 0 ; for ( int n : lst ) { if ( n > largest ) { bool prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } int sum = 0 ; string s = to_string ( largest ) ; for ( int i = 0 ; i < s . size ( ) ; i ++ ) { sum += s [ i ] - '0' ; } return sum ; }
bool checkDictCase ( unordered_set < string > dict ) { if ( dict . empty ( ) ) { return false ; } bool isLower = 0 ; bool isUpper = 0 ; for ( auto it : dict ) { for ( char c : it ) { if ( tolower ( c ) == c && toupper ( c ) != c ) { isLower = 1 ; } else if ( tolower ( c ) == c ) { isUpper = 1 ; } else { return false ; } } } return ( isLower + isUpper == 1 ) ; }
int multiply ( int a , int b ) { return ( abs ( a ) % 10 ) * ( abs ( b ) % 10 ) ; }
int countUpper ( string s ) { string uVowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . size ( ) ; i += 2 ) { if ( uVowel . find ( s [ i ] ) != uVowel . end ( ) ) { count ++ ; } } return count ; }
vector < string > byLength ( vector < string > arr ) { map < char , char > numTo = { { 1 , 'One' } , { 2 , 'Two' } , { 3 , 'Three' } , { 4 , 'Four' } , { 5 , 'Five' } , { 6 , 'Six' } , { 7 , 'Seven' } , { 8 , 'Eight' } , { 9 , 'Nine' } } ; vector < string > sortedArr = sort ( arr . begin ( ) , arr . end ( ) , greater < char > ( ) ) ; vector < string > newArr ; for ( int n : sortedArr ) { if ( n >= 1 && n <= 9 ) { newArr . push_back ( numTo [ n ] ) ; } } return newArr ; }
vector < int > f ( int n ) { int sum = 1 ; int prod = 0 ; vector < int > result ; for ( int i = 1 ; i <= n ; i ++ ) { prod += i ; sum *= i ; if ( i % 2 == 0 ) { result . push_back ( sum ) ; } else { result . push_back ( prod ) ; } } return result ; }
pair < int , int > evenOddPalindrome ( int n ) { int evenCount = 0 ; int oddCount = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { string s = to_string ( i ) ; string rStr = s . str ( ) ; if ( s == rStr ) { if ( i % 2 == 1 ) { oddCount += 1 ; } else { evenCount += 1 ; } } } return { evenCount , oddCount } ; }
unordered_map < char , int > histogram ( string test ) { map < char , int > count ; int max = 0 ; for ( int i = 0 ; i < test . length ( ) ; i ++ ) { if ( test [ i ] != ' ' ) { count [ test [ i ] ] ++ ; if ( count [ test [ i ] ] > max ) { max = count [ test [ i ] ] ; } } } map < char , int > result ; for ( auto x : count ) { if ( x . second == max ) { result [ x . first ] = x . second ; } } return result ; }
vector < string > reverseDelete ( string s , set < char > c ) { vector < char > ret ; for ( char ch : s ) { if ( ! c . find ( ch ) ) ret . push_back ( ch ) ; } string flag = "False" ; if ( ret . join ( "" ) == reverse ( ret . begin ( ) , ret . end ( ) ) ) { flag = "True" ; } return { ret . join ( "" ) , flag } ; }
vector < int > sortArray ( vector < int > arr ) { vector < int > bin ; for ( int i : arr ) { int b = 0 ; int n = abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . push_back ( b ) ; } for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { for ( int j = 1 ; j < arr . size ( ) ; j ++ ) { if ( bin [ j ] < bin [ j - 1 ] || ( bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) ) { swap ( bin [ j ] , bin [ j - 1 ] ) ; swap ( arr [ j ] , arr [ j - 1 ] ) ; } } } return arr ; }
string getClosestVowel ( string word ) { set < char > vowels = "AEIOUaeiou" ; for ( int i = word . size ( ) - 2 ; i > 0 ; i -- ) { if ( vowels . find ( word [ i ] ) == vowels . end ( ) && ! vowels . find ( word [ i + 1 ] ) && ! vowels . find ( word [ i - 1 ] ) ) { return word [ i ] ; } } return "" ; }
string matchParens ( vector < int > lst ) { vector < string > strings = { lst [ 0 ] + lst [ 1 ] , lst [ 1 ] + lst [ 0 ] } ; for ( string l : strings ) { int count = 0 ; for ( char c : l ) { if ( c == '(' ) { count += 1 ; } if ( c == ')' ) { count -= 1 ; } if ( count < 0 ) { break ; } } if ( count == 0 ) { return "Yes" ; } } return "No" ; }
vector < int > maximum ( vector < int > arr , int k ) { if ( k == 0 ) return vector < int > ( arr . begin ( ) , arr . end ( ) ) ; return vector < int > ( arr . begin ( ) , arr . end ( ) ) ; }
bool validDate ( string date ) { if ( date . length ( ) != 10 ) { return false ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 || i == 5 ) { if ( date [ i ] != '-' ) { return false ; } } else if ( '0' > date [ i ] && date [ i ] > '9' ) { return false ; } } int month = date [ 0 ] [ 2 ] ; int day = date [ 3 ] [ 5 ] ; int year = date [ 6 ] ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) { return false ; } if ( day == 30 && month == 2 ) { return false ; } return true ; }
vector < string > splitWords ( string txt ) { vector < string > current ; vector < string > result ; if ( txt . find ( " " ) != string :: npos ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt [ i ] == " " ) { if ( current . size ( ) > 0 ) { result . push_back ( current . begin ( ) ) ; } current . size ( 0 ) ; } else { current . push_back ( txt [ i ] ) ; } } return result ; } if ( txt . find ( "," ) != string :: npos ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt [ i ] == "," ) { if ( current . size ( ) > 0 ) { result . push_back ( current . begin ( ) ) ; } current . size ( ) = 0 ; } else { current . push_back ( txt [ i ] ) ; } } return result ; } int num = 0 ; for ( char c : txt ) { if ( tolower ( c ) == c && toupper ( c ) != c && ( int ) c % 2 == 0 ) { num += 1 ; } } return { to_string ( num ) } ; }
vector < int > tri ( int n ) { if ( n == 0 ) { return { 1 } ; } vector < int > tris = { 1 , 3 } ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { tris . push_back ( 1 + i / 2 ) ; } else { tris . push_back ( tris [ i - 2 ] + tris [ i - 1 ] + ( i + 3 ) / 2 ) ; } } return tris ; }
bool checkIfLastCharIsALetter ( string txt ) { if ( ! txt . length ( ) ) return false ; return ( txt [ txt . length ( ) - 1 ] != txt [ txt . length ( ) - 1 ] ) && ( txt . length ( ) == 1 || toupper ( txt [ txt . length ( ) - 2 ] ) == toupper ( txt [ txt . length ( ) - 2 ] ) ) ; }
vector < int > orderByPoints ( vector < int > nums ) { vector < int > result ; for ( int num : nums ) { string w = to_string ( num ) ; int sum = 0 ; for ( auto c : w ) { sum += c - '0' ; } if ( num < 0 ) { sum -= 2 * ( w . first - '0' ) ; } result . push_back ( sum ) ; } for ( int i = 0 ; i < nums . size ( ) ; i ++ ) { for ( int j = 1 ; j < nums . size ( ) ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { swap ( result [ j ] , result [ j - 1 ] ) ; swap ( nums [ j ] , nums [ j - 1 ] ) ; } } } return result ; }
vector < string > bf ( string planet1 , string planet2 ) { vector < string > planets = { "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" } ; int idx1 = planets . find ( planet1 ) ; int idx2 = planets . find ( planet2 ) ; if ( idx1 == -1 || idx2 == -1 || idx1 == idx2 ) { return { } ; } return idx1 > idx2 ? planets . slice ( idx2 + 1 , idx1 ) : planets . slice ( idx1 + 1 , idx2 ) ; }
vector < string > sortedListSum ( vector < string > lst ) { vector < string > result ; for ( string i : lst ) { if ( i . size ( ) % 2 == 0 ) { result . push_back ( i ) ; } } sort ( result . begin ( ) , result . end ( ) ) ; return result ; }
bool cycpatternCheck ( set < string > a , set < string > b ) { for ( int i = 0 ; i < b . size ( ) ; i ++ ) { string rotate = b . substr ( i ) + b . substr ( 0 , i ) ; if ( a . find ( rotate ) != a . end ( ) ) { return true ; } } return false ; }
pair < int , int > evenOddCount ( int num ) { int evenCount = 0 , oddCount = 0 ; for ( int i = abs ( num ) ; i >= 0 ; i -- ) { if ( i % 2 == 0 ) evenCount += 1 ; else oddCount += 1 ; } return make_pair ( evenCount , oddCount ) ; }
string findMax ( vector < string > words ) { string max = "" ; int maxLength = 0 ; for ( string word : words ) { vector < string > unique ; for ( auto w : word ) { if ( unique . find ( w ) == unique . end ( ) ) { unique . push_back ( w ) ; } } if ( unique . size ( ) > maxLength || ( unique . size ( ) == maxLength && word < max ) ) { max = word ; maxLength = unique . size ( ) ; } } return max ; }
string solve ( string s ) { bool noLetter = true ; vector < char > result ; for ( char ch : s ) { if ( ch >= 65 && ch <= 90 ) { ch = tolower ( ch ) ; noLetter = false ; } else if ( ch >= 65 && ch <= 90 ) { ch = tolower ( ch ) ; noLetter = false ; } result . push_back ( ch ) ; } if ( noLetter ) return reverse ( result . begin ( ) , result . end ( ) ) ; else return result ; }
int mostFrequent ( int arr [ ] , int n ) { unordered_map < int , int > hp ; for ( int i = 0 ; i < n ; i ++ ) { hp [ arr [ i ] ] ++ ; } int maxCount = 0 , res = -1 ; for ( auto i : hp ) { if ( maxCount < i . second ) { res = i . first ; maxCount = i . second ; } } return res ; }
int find ( int a [ ] , int b [ ] , int k , int n1 , int n2 ) { unordered_set < int > s ; for ( int i = 0 ; i < n2 ; i ++ ) { s . insert ( b [ i ] ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( s . find ( a [ i ] ) == s . end ( ) ) missing ++ ; if ( missing == k ) { return a [ i ] ; } } return -1 ; }
int solveQuery ( int start , int end , int arr [ ] ) { unordered_map < int , int > frequency ; for ( int i = start ; i <= end ; i ++ ) { frequency [ arr [ i ] ] ++ ; } int count = 0 ; for ( auto x : frequency ) { if ( x . first == x . second ) { count ++ ; } } return count ; }
int segregate ( int arr [ ] , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { swap ( arr [ i ] , arr [ j ] ) ; j ++ ; } } return j ; }
int countTriplets ( int a [ ] , int n ) { unordered_set < int > s ; for ( int i = 0 ; i < n ; i ++ ) { s . insert ( a [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( s . find ( xr ) != s . end ( ) && xr != a [ i ] && xr != a [ j ] ) { count ++ ; } } } return count / 3 ; }
int leastFrequent ( int arr [ ] , int n ) { unordered_map < int , int > hp ; for ( int i = 0 ; i < n ; i ++ ) { hp [ arr [ i ] ] ++ ; } int minCount = n + 1 , res = -1 ; for ( auto i : hp ) { if ( minCount >= i . second ) { res = i . first ; minCount = i . second ; } } return res ; }
int findPermutations ( vector < int > arr ) { int cnt = 0 ; int maxInd = -1 , minInd = 10000000 ; int n = arr . size ( ) ; unordered_map < int , int > indexOf ; for ( int i = 0 ; i < n ; i ++ ) { indexOf [ arr [ i ] ] = i + 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { maxInd = max ( maxInd , indexOf [ i ] ) ; minInd = min ( minInd , indexOf [ i ] ) ; if ( maxInd - minInd + 1 == i ) { cnt ++ ; } } return cnt ; }
int formQuadruplets ( int arr [ ] , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; sort ( arr , arr + n , greater < int > ( ) ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; }
string lexicographicallyMaximum ( string s , int n ) { unordered_map < char , int > m ; for ( int i = 0 ; i < n ; ++ i ) m [ s [ i ] ] ++ ; vector < char > v ; for ( char i = 'a' ; i < 'a' + min ( n , 25 ) ; ++ i ) if ( m [ i ] == 0 ) v . push_back ( i ) ; int j = v . size ( ) - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( s [ i ] >= 'a' + min ( n , 25 ) m [ s [ i ] ] > 1 ) { if ( v [ j ] < s [ i ] ) continue ; m [ s [ i ] ] -- ; s [ i ] = v [ j ] ; j -- ; } if ( j < 0 ) break ; } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) break ; if ( s [ i ] >= 'a' + min ( n , 25 ) m [ s [ i ] ] > 1 ) { m [ s [ i ] ] -- ; s [ i ] = v [ l ] ; l ++ ; } } return s ; }
static int noOfValidKbers ( int k , vector < int > arr ) { map < int , int > set ; while ( k != 0 ) { set [ k % 10 ] = 1 ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { int no = arr [ i ] ; bool flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( set . find ( digit ) == set . end ( ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag ) { count ++ ; } } return count ; }
int delCost ( string s , int cost [ ] ) { int ans = 0 ; map < char , int > forMax ; map < char , int > forTot ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! forMax [ s [ i ] ] ) { forMax [ s [ i ] ] = cost [ i ] ; } else { forMax [ s [ i ] ] = max ( cost [ i ] , forMax [ s [ i ] ] ) ; } if ( ! forTot [ s [ i ] ] ) { forTot [ s [ i ] ] = cost [ i ] ; } else { forTot [ s [ i ] ] = forTot [ s [ i ] ] + cost [ i ] ; } } for ( auto i : forMax ) { ans += forTot [ i . first ] - i . second ; } return ans ; }
string replaceDuplicates ( vector < string > names ) { unordered_map < string , int > hash ; for ( int i = 0 ; i < names . size ( ) ; i ++ ) { if ( hash . count ( names [ i ] ) == 0 ) { hash [ names [ i ] ] ++ ; } else { int count = hash [ names [ i ] ] ++ ; names [ i ] += to_string ( count ) ; } } return names ; }
vector < int > minmaxNumbers ( vector < vector < int > > matrix , vector < int > res ) { unordered_set < int > s ; for ( int i = 0 ; i < matrix . size ( ) ; i ++ ) { int minR = INT_MAX ; for ( int j = 0 ; j < matrix [ i ] . size ( ) ; j ++ ) { minR = min ( minR , matrix [ i ] [ j ] ) ; } s . insert ( minR ) ; } for ( int j = 0 ; j < matrix [ 0 ] . size ( ) ; j ++ ) { int maxC = INT_MIN ; for ( int i = 0 ; i < matrix . size ( ) ; i ++ ) { maxC = max ( maxC , matrix [ i ] [ j ] ) ; } if ( s . find ( maxC ) != s . end ( ) ) { res . push_back ( maxC ) ; } } return res ; }
int lengthOfLongestAP ( int a [ ] , int n ) { unordered_map < int , int > dp ; int res = 2 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = i + 1 ; j < n ; ++ j ) { int d = a [ j ] - a [ i ] ; dp [ d ] [ j ] = dp [ d ] . count ( i ) ? dp [ d ] [ i ] + 1 : 2 ; res = max ( res , dp [ d ] [ j ] ) ; } } return res ; }
char findKthChar ( int n , int k ) { string prev = "A" ; string cur = "" ; if ( n == 1 ) { return 'A' ; } for ( int i = 2 ; i <= n ; i ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . length ( ) ; i ++ ) { if ( prev [ i ] == 'A' ) { prev . erase ( i , 1 ) ; } else { prev . erase ( i , 1 ) ; } } reverse ( prev . begin ( ) , prev . end ( ) ) ; cur += prev ; prev = cur ; } return cur [ k - 1 ] ; }
char findKthLargest ( string s , int k ) { string tmp ; stringstream ss ; ss << s ; ss >> tmp ; sort ( tmp . begin ( ) , tmp . end ( ) , greater < char > ( ) ) ; return * tmp ; }
int subArraylen ( int arr [ ] , int n , int K ) { unordered_map < int , int > mp ; mp [ arr [ 0 ] ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp [ arr [ i ] ] = i ; } int len = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < K ) { continue ; } else { int x = arr [ i ] - K ; if ( x == 0 ) { len = min ( len , i ) ; } if ( mp . find ( x ) == mp . end ( ) ) { continue ; } else { len = min ( len , i - mp [ x ] ) ; } } } return len ; }
int findMaxLen ( vector < ll > a , ll k ) { int n = a . size ( ) ; sort ( a . begin ( ) , a . end ( ) ) ; vector < bool > vis ( n , false ) ; map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) { mp [ a [ i ] ] = i ; } int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( ! vis [ i ] ) { int check = a [ i ] * k ; if ( mp . find ( check ) != mp . end ( ) ) { c ++ ; vis [ mp [ check ] ] = true ; } } } return n - c ; }
vector < int > minDistancePoints ( int a [ ] , int k , int n ) { map < int , int > m ; queue < int > q ; for ( int i = 0 ; i < n ; ++ i ) { m [ a [ i ] ] = 1 ; q . push ( a [ i ] ) ; } vector < int > ans ; while ( k > 0 ) { int x = q . front ( ) ; q . pop ( ) ; if ( ! m [ x - 1 ] && k > 0 ) { m [ x - 1 ] = 1 ; q . push ( x - 1 ) ; ans . push_back ( x - 1 ) ; k -- ; } if ( ! m [ x + 1 ] && k > 0 ) { m [ x + 1 ] = 1 ; q . push ( x + 1 ) ; ans . push_back ( x + 1 ) ; k -- ; } } return ans ; }
bool isValidLen ( string s , int length , int k ) { int n = s . size ( ) ; unordered_map < char , int > mp ; int right = 0 ; while ( right < length ) { mp [ s [ right ] ] ++ ; right ++ ; } if ( mp . size ( ) <= k ) { return true ; } while ( right < n ) { mp [ s [ right ] ] ++ ; if ( mp [ s [ right - length ] ] == 0 ) { mp . erase ( s [ right - length ] ) ; } if ( mp . size ( ) <= k ) { return true ; } right ++ ; } return mp . size ( ) <= k ; }
int partition ( int arr [ ] , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; swap ( arr [ i ] , arr [ j ] ) ; } } swap ( arr [ i + 1 ] , arr [ high ] ) ; return ( i + 1 ) ; }
int strScore ( string strs [ ] , string s , int n ) { unordered_map < string , int > m ; for ( int i = 0 ; i < n ; i ++ ) { m [ strs [ i ] ] = i + 1 ; } if ( m . find ( s ) == m . end ( ) ) { return 0 ; } int score = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { score += s [ i ] - 'a' + 1 ; } score = score * m [ s ] ; return score ; }
vector < int > countEle ( stack < int > s , int a [ ] , int n ) { unordered_map < int , bool > mp ; vector < int > ans ; for ( int i = 0 ; i < n ; ++ i ) { int num = a [ i ] ; if ( mp . find ( num ) != mp . end ( ) ) { ans . push_back ( 0 ) ; } else { int cnt = 0 ; while ( s . top ( ) != num ) { mp [ s . top ( ) ] = true ; s . pop ( ) ; cnt ++ ; } s . pop ( ) ; cnt ++ ; ans . push_back ( cnt ) ; } } return ans ; }
int maxDistinctChar ( string s , int n , int k ) { unordered_map < int , int > freq ; for ( int i = 0 ; i < n ; i ++ ) freq [ s [ i ] ] ++ ; vector < int > v ; for ( auto it : freq ) { v . push_back ( it . second ) ; } sort ( v . begin ( ) , v . end ( ) ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = min ( v [ i ] - 1 , k ) ; v [ i ] -= mn ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = min ( v [ i ] , k ) ; v [ i ] -= mn ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v [ i ] == 1 ) res ++ ; } return res ; }
int findKth ( int arr [ ] , int n , int k ) { unordered_set < int > missing ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) missing . insert ( arr [ i ] ) ; int maxM = * max_element ( arr , arr + n ) ; int minM = * min_element ( arr , arr + n ) ; for ( int i = minM + 1 ; i < maxM ; i ++ ) { if ( missing . find ( i ) == missing . end ( ) ) count ++ ; if ( count == k ) return i ; } return -1 ; }
bool almostSort ( int a [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { swap ( a [ i ] , a [ i + 1 ] ) ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { return false ; } } return true ; }
int maximumSum ( string s , int n , int k ) { int sum = 0 ; int freq [ 256 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { freq [ int ( s [ i ] ) ] ++ ; } sort ( freq , freq + 256 , greater < int > ( ) ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; }
int findMinOperations ( int arr [ ] , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { unordered_map < int , int > freq ; for ( int j = i ; j < n ; j += k ) freq [ arr [ j ] ] ++ ; int max1 = 0 , num = 0 ; for ( auto x : freq ) { if ( x . second > max1 ) { max1 = x . second ; num = x . first ; } } for ( auto x : freq ) { if ( x . first != num ) operations += x . second ; } } return operations ; }
vector < string > subString ( string s , int n ) { vector < string > v ; int i , len ; for ( i = 0 ; i < n ; i ++ ) { for ( len = 1 ; len <= n - i ; len ++ ) { string find = s . substr ( i , len ) ; v . push_back ( find ) ; } } return v ; }
bool checkUniqueFrequency ( int arr [ ] , int n ) { unordered_map < int , int > freq ; for ( int i = 0 ; i < n ; i ++ ) { freq [ arr [ i ] ] ++ ; } unordered_set < int > uniqueFreq ; for ( auto & i : freq ) { if ( uniqueFreq . count ( i . second ) ) { return false ; } else { uniqueFreq . insert ( i . second ) ; } } return true ; }
int minCost ( string str1 , string str2 , int n ) { int cost = 0 ; string tmp = str1 . split ( "" ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 [ i ] ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) swap ( tmp [ i ] , tmp [ i + 1 ] ) ; cost ++ ; } else cost ++ ; } } return cost ; }
bool isValidNum ( string x ) { map < int , int > mp ; for ( int i = 0 ; i < x . size ( ) ; i ++ ) { if ( mp . find ( x [ i ] - '0' ) != mp . end ( ) ) { return false ; } else if ( x [ i ] - '0' > 5 ) { return false ; } else { mp [ x [ i ] - '0' ] = 1 ; } } return true ; }
int minimizeDiff ( int arr [ ] , int n , int k ) { int max = * max_element ( arr , arr + n ) ; int min = * min_element ( arr , arr + n ) ; if ( max - min <= k ) { return max - min ; } int avg = ( max + min ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = * max_element ( arr , arr + n ) ; min = * min_element ( arr , arr + n ) ; return max - min ; }
int getMinCost ( int * arr , int n ) { int minEle = * min_element ( arr , arr + n ) ; return minEle * ( n - 1 ) ; }
bool possibility ( unordered_map < int , int > m , int length , string s ) { int countOdd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( m [ s [ i ] - 48 ] & 1 ) { countOdd ++ ; } if ( countOdd > 1 ) { return false ; } } return true ; }
int minimumCostOfBreaking ( int x [ ] , int y [ ] , int m , int n ) { int res = 0 ; sort ( x , x + m ) ; sort ( y , y + n , greater < int > ( ) ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += x [ i ++ ] ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y [ j ++ ] ; } res += total * hzntl ; return res ; }
int findMaximumScore ( int a [ ] , int n ) { unordered_map < int , int > freq ; for ( int i = 0 ; i < n ; i ++ ) { freq [ a [ i ] ] ++ ; } int dp [ n ] ; dp [ 0 ] = 0 ; dp [ 1 ] = freq [ 1 ] ?? 0 ; for ( int i = 2 ; i < dp . size ( ) ; i ++ ) { dp [ i ] = max ( dp [ i - 1 ] , dp [ i - 2 ] + freq [ i ] * i ) ; } return dp [ dp . size ( ) - 1 ] ; }
long long countWays ( string s , string t , int k , int mod ) { int n = s . size ( ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { string p = s . substr ( i , n ) + s . substr ( 0 , i ) ; if ( p == t ) { a ++ ; } else { b ++ ; } } vector < long long > dp1 ( k + 1 , 0 ) , dp2 ( k + 1 ) ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; } return dp1 [ k ] ; }
int findSubarraySum ( int arr [ ] , int n , int k ) { unordered_map < int , int > prevSum ; int res = 0 ; int currSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { currSum += arr [ i ] ; if ( currSum == k ) { res ++ ; } if ( prevSum . find ( currSum - k ) != prevSum . end ( ) ) { res += ( prevSum [ currSum - k ] ) ; } prevSum [ currSum ] ++ ; } return res ; }
int maximumOccurrence ( string s ) { int n = s . length ( ) ; map < string , int > freq ; for ( int i = 0 ; i < n ; i ++ ) { string temp = "" ; temp += s [ i ] ; freq [ temp ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { string temp = "" ; temp += s [ i ] ; temp += s [ j ] ; freq [ temp ] ++ ; } } int answer = INT_MIN ; for ( auto it : freq ) { answer = max ( answer , it . second ) ; } return answer ; }
int countCharacters ( set < string > & strings , string chars ) { int res = 0 ; unordered_map < char , int > freq ; for ( int i = 0 ; i < chars . length ( ) ; i ++ ) freq [ chars [ i ] ] ++ ; for ( string st : strings ) { bool flag = true ; for ( char c : st ) { if ( freq . find ( c ) == freq . end ( ) ) { flag = false ; break ; } } if ( flag ) res += st . length ( ) ; } return res ; }
int distinctSubstring ( string p , string q , int k , int n ) { set < string > ss ; for ( int i = 0 ; i < n ; ++ i ) { int sum = 0 ; string s = "" ; for ( int j = i ; j < n ; ++ j ) { int pos = p [ j ] - 'a' ; sum += q [ pos ] - '0' ; s += p [ j ] ; if ( sum <= k ) { ss . insert ( s ) ; } else { break ; } } } return ss . size ( ) ; }
int uniqueMorseRep ( vector < string > arr ) { string morseCode [ ] = { '.-' , "-..." , "-.-." , "-.." , '.' , "..-." , '--.' , '....' , ".." , '.---' , "-.-" , '.-.." , "--" , "-." , '---' , '.--.' , '--.-' , '.-.' , "..." , '-' , '..-' , "...-' , '.--' , "-..-" , "-.--" , "--.." } ; unordered_set < string > st ; int N = arr . size ( ) ; for ( int i = 0 ; i < N ; i ++ ) { string temp = "" ; int M = arr [ i ] . size ( ) ; for ( int j = 0 ; j < M ; j ++ ) { temp += morseCode [ arr [ i ] [ j ] - 'a' ] ; } st . insert ( temp ) ; } return st . size ( ) ; }
int countSubstrings ( string st , int k ) { int n = st . size ( ) ; int answer = 0 ; unordered_map < char , int > map ; for ( int i = 0 ; i < k ; i ++ ) { map [ st [ i ] ] ++ ; } if ( map . size ( ) == k ) { answer ++ ; } for ( int i = k ; i < n ; i ++ ) { map [ st [ i ] ] ++ ; map [ st [ i - k ] ] -- ; if ( map [ st [ i - k ] ] == 0 ) { map . erase ( st [ i - k ] ) ; } if ( map . size ( ) == k ) { answer ++ ; } } return answer ; }
bool canConstruct ( string s , int k ) { map < char , int > m ; int i = 0 , j = 0 , p = 0 ; if ( s . length ( ) == k ) { return true ; } map < char , int > :: iterator h ; int i = 0 , j = 0 , p = 0 ; if ( s [ i ] != '\0' ) { m [ s [ i ] ] = m [ s [ i ] ] + 1 ; } if ( k > s . length ( ) ) { return false ; } else { for ( h = m . begin ( ) ; h != m . end ( ) ; h ++ ) { if ( h -> second % 2 != 0 ) { p = p + 1 ; } } } if ( k < p ) { return false ; } return true ; }
bool equalIgnoreCase ( string str1 , string str2 ) { transform ( str1 . begin ( ) , str1 . end ( ) , str1 . begin ( ) , :: toupper ) ; transform ( str2 . begin ( ) , str2 . end ( ) , str2 . begin ( ) , :: toupper ) ; return str1 == str2 ; }
int findLongestSub ( string bin ) { int n = bin . length ( ) , i ; int sum = 0 ; unordered_map < int , int > prevSum ; int maxlen = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin [ i ] == '1' ) { sum ++ ; } else { sum -- ; } if ( sum > 0 ) { maxlen = i + 1 ; } else if ( sum <= 0 ) { if ( prevSum . find ( sum - 1 ) != prevSum . end ( ) ) { int currLen = i - prevSum [ sum - 1 ] ; maxlen = max ( maxlen , currLen ) ; } } if ( prevSum . find ( sum ) == prevSum . end ( ) ) { prevSum [ sum ] = i ; } } return maxlen ; }
bool hasAllCodes ( string s , int k ) { set < string > us ; for ( int i = 0 ; i + k <= s . size ( ) ; i ++ ) { us . insert ( s . substr ( i , k ) ) ; } return us . size ( ) == 1 << k ; }
bool checkPalin ( string word ) { int n = word . length ( ) ; for ( int i = 0 ; i < n ; i ++ , n -- ) if ( word [ i ] != word [ n - 1 ] ) return false ; return true ; }
string convert ( string st ) { string w = "" , z = "" ; transform ( st . begin ( ) , st . end ( ) , st . begin ( ) , :: toupper ) ; st += " " ; for ( int i = 0 ; i < st . length ( ) ; i ++ ) { char ch = st [ i ] ; if ( ch != ' ' ) { w += ch ; } else { z += tolower ( w [ 0 ] ) + w . substr ( 1 ) + " " ; w = "" ; } } return z ; }
int maxLines ( int n , int x1 [ ] , int y1 [ ] , int x2 [ ] , int y2 [ ] ) { unordered_set < double > s ; double slope ; for ( int i = 0 ; i < n ; ++ i ) { if ( x1 [ i ] == x2 [ i ] ) { slope = INT_MAX ; } else { slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; } s . insert ( slope ) ; } return s . size ( ) ; }
unordered_map < int , int > PrimeFactor ( int n ) { unordered_map < int , int > primef ; while ( n % 2 == 0 ) { if ( primef . count ( 2 ) ) { primef [ 2 ] ++ ; } else { primef [ 2 ] = 1 ; } n = n / 2 ; } for ( int i = 3 ; i <= sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { if ( primef . count ( i ) ) { primef [ i ] ++ ; } else { primef [ i ] = 1 ; } n = n / i ; } } if ( n > 2 ) { primef [ n ] = 1 ; } return primef ; }
string isDivisibleByDivisor ( int s , int d ) { s %= d ; unordered_set < int > hashMap ; hashMap . insert ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hashMap . find ( s ) != hashMap . end ( ) ) { if ( s == 0 ) { return "Yes" ; } return "No" ; } else { hashMap . insert ( s ) ; } } return "Yes" ; }
bool oddSum ( int a [ ] , int n , int k ) { set < int > odd ; set < int > even ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) even . insert ( a [ i ] ) ; else odd . insert ( a [ i ] ) ; } if ( odd . size ( ) >= k ) return true ; bool flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= even . size ( ) ) return true ; } return flag ; }
int dayOfYear ( string date ) { int days [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int year = stoi ( date . substr ( 0 , 4 ) ) ; int month = stoi ( date . substr ( 5 , 7 ) ) ; int day = stoi ( date . substr ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days [ month - 2 ] ; -- month ; } return day ; }
bool isPerfectSquare ( int arr [ ] , int n ) { unordered_map < int , int > umap ; for ( int i = 0 ; i < n ; i ++ ) umap [ arr [ i ] ] ++ ; unordered_map < int , int > :: iterator itr ; for ( itr = umap . begin ( ) ; itr != umap . end ( ) ; itr ++ ) if ( itr -> second % 2 == 1 ) return false ; return true ; }
int minMoves ( int n ) { string s = to_string ( n ) ; int ans = INT_MAX ; int length = s . size ( ) ; for ( int i = 0 ; i < length ; ++ i ) { for ( int j = 0 ; j < length ; ++ j ) { if ( i == j ) { continue ; } string t = s ; int cur = 0 ; for ( int k = i ; k < length - 1 ; ++ k ) { swap ( t [ k ] , t [ k + 1 ] ) ; ++ cur ; } for ( int k = j - ( j > i ? 1 : 0 ) ; k < length - 2 ; ++ k ) { swap ( t [ k ] , t [ k + 1 ] ) ; ++ cur ; } int pos = -1 ; for ( int k = 0 ; k < length ; ++ k ) { if ( t [ k ] != "" ) { pos = k ; break ; } } for ( int k = pos ; k > 0 ; -- k ) { swap ( t [ k ] , t [ k - 1 ] ) ; ++ cur ; } int nn = stoi ( t . begin ( ) , t . end ( ) ) ; if ( nn % 25 == 0 ) { ans = min ( ans , cur ) ; } } } if ( ans == INT_MAX ) { return -1 ; } return ans ; }
int minimumOperations ( int a [ ] , int n ) { unordered_map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ a [ i ] ] ++ ; int count = 0 ; for ( auto it = mp . begin ( ) ; it != mp . end ( ) ; it ++ ) { if ( it -> second > 1 ) count += it -> second - 1 ; } return count ; }
int kaprekarRec ( int n , int prev ) { if ( n == 0 ) { return 0 ; } prev = n ; int digits [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } sort ( digits , digits + 4 ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } sort ( digits , digits + 4 ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } int diff = abs ( asc - desc ) ; if ( diff == prev ) { return diff ; } return kaprekarRec ( diff , prev ) ; }
string fractionToDecimal ( int numr , int denr ) { string res = "" ; map < int , int > mp ; int rem = numr % denr ; while ( ( rem != 0 ) && ( mp . find ( rem ) == mp . end ( ) ) ) { mp [ rem ] = res . size ( ) ; rem = rem * 10 ; int res_part = rem / denr ; res += res_part . to_string ( ) ; rem = rem % denr ; } if ( rem == 0 ) { return "" ; } if ( mp . find ( rem ) != mp . end ( ) ) { return res . substr ( mp [ rem ] ) ; } return "" ; }
bool isFancy ( string num ) { map < char , char > fp ; fp [ '0' ] = '0' ; fp [ '1' ] = '1' ; fp [ '6' ] = '9' ; fp [ '8' ] = '8' ; fp [ '9' ] = '6' ; int n = num . size ( ) ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( fp . find ( num [ l ] ) == fp . end ( ) || fp [ num [ l ] ] != num [ r ] ) { return false ; } l ++ ; r -- ; } return true ; }
double distinctOddRatio ( vector < int > numbers ) { int distinctCount = * distinct_element ( numbers . begin ( ) , numbers . end ( ) ) ; int distinctOddCount = * distinct_element ( numbers . begin ( ) , numbers . end ( ) ) ; return ( double ) distinctOddCount / ( double ) distinctCount ; }
int compareSum ( vector < int > numbers , vector < string > words ) { int intSum = * accumulate ( numbers . begin ( ) , numbers . end ( ) , 0 ) ; int wordLengthSum = * accumulate ( words . begin ( ) , words . end ( ) , 0 ) ; if ( intSum < wordLengthSum ) { return -1 ; } else if ( intSum > wordLengthSum ) { return 1 ; } else { return 0 ; } }
bool allLongerThan ( vector < string > shortWords , vector < string > longWords ) { int maxOfShort = * max_element ( shortWords . begin ( ) , shortWords . end ( ) ) ; int minOfLong = * min_element ( longWords . begin ( ) , longWords . end ( ) ) ; return minOfLong > maxOfShort ; }
int compareOddEvenRange ( vector < int > numbers ) { int rangeOdd = * max_element ( numbers . begin ( ) , numbers . end ( ) ) - * min_element ( numbers . begin ( ) , numbers . end ( ) ) ; int rangeEven = * max_element ( numbers . begin ( ) , numbers . end ( ) ) - * min_element ( numbers . begin ( ) , numbers . end ( ) ) ; if ( rangeOdd < rangeEven ) return -1 ; if ( rangeOdd > rangeEven ) return 1 ; return 0 ; }
double averageDistinctLength ( vector < string > words ) { vector < string > distinctWords ( words ) ; double averageLen = distinctWords ? accumulate ( distinctWords . begin ( ) , distinctWords . end ( ) , 0 ) / distinctWords . size ( ) : 0 ; return averageLen ; }
int withdrawBalance ( int start , vector < int > withdrawals ) { int end = * max_element ( withdrawals . begin ( ) , withdrawals . end ( ) ) ; return end ; }
string firstShortAndStartsWithO ( vector < string > words ) { string matchedElement = firstShortAndStartsWithO ( words . begin ( ) , words . end ( ) ) ; return matchedElement ; }
int bigNumberAtIndex ( vector < int > numbers , int index ) { int targetNum = * max_element ( numbers . begin ( ) , numbers . end ( ) ) ; return targetNum ; }
bool containsSquareInRange ( int rangeStart , int rangeLength ) { bool containsSquare = false ; for ( int n : range [ rangeStart ] ) { containsSquare = true ; if ( pow ( trunc ( sqrt ( n ) ) , 2 ) == n ) ; } return containsSquare ; }
unordered_map < int , vector < int > > groupNumbersByMod ( vector < int > numbers , int mod ) { map < int , vector < int > > numberGroups ; for ( int n : numbers ) { int key = n % mod ; acc [ key ] . push_back ( n ) ; } return numberGroups ; }
unordered_map < string , vector < string > > groupNumbersByFirstChar ( vector < string > words ) { map < string , vector < string > > wordsGroups ; for ( string w : words ) { string key = w [ 0 ] ; acc [ key ] . push_back ( w ) ; } return wordsGroups ; }
vector < string > orderByLengthAndDescending ( vector < string > words ) { vector < string > sortedWords = words . sort ( ) ; sort ( sortedWords . begin ( ) , sortedWords . end ( ) ) ; }
vector < string > orderFirstCharDescendingReverse ( vector < string > words ) { vector < string > sortedWords ( words . begin ( ) , words . end ( ) ) ; sort ( sortedWords . begin ( ) , sortedWords . end ( ) ) ; return sortedWords ; }
vector < int > getSubListOfNegative ( vector < int > numbers , int start , int length ) { vector < int > subList = numbers . begin ( ) + start , numbers . end ( ) ) ; return subList ; }
vector < int > getPositiveSequence ( vector < int > numbers ) { vector < int > subSequence ; for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { if ( numbers [ i ] <= 0 ) { continue ; } subSequence . push_back ( numbers [ i ] ) ; break ; } for ( int i = 0 ; i < subSequence . size ( ) ; i ++ ) { if ( subSequence [ i ] > 0 ) { continue ; } subSequence . push_back ( 0 , i ) ; break ; } return subSequence ; }
vector < int > getLargerThanIndexSequence ( vector < int > numbers ) { vector < pair < int , int > > subSequence = numbers ; for ( int i = 0 ; i < subSequence . size ( ) ; i ++ ) { if ( subSequence [ i ] . first < subSequence [ i ] . second  ) { continue ; } subSequence . erase ( i ) ; break ; } for ( int i = 0 ; i < subSequence . size ( ) ; i ++ ) { if ( subSequence [ i ] . first >= subSequence [ i ] . second  ) { continue ; } subSequence . erase ( i ) ; } return subSequence ; }
vector < string > rearrangeWordByIndexes ( vector < string > words , vector < int > indexes ) { vector < int > newIndexes ( indexes . begin ( ) , indexes . end ( ) ) ; vector < string > newWords ( newIndexes ) ; newWords . assign ( words [ n ] ) ; return newWords ; }
vector < string > getWordsUpperLower ( vector < string > words ) { vector < string > upperLowerWords ( words . begin ( ) , words . end ( ) ) ; return upperLowerWords ; }
vector < int > selectIfInPlace ( vector < int > numbers ) { vector < int > numsInPlace ( numbers ) ; return numsInPlace ; }
vector < pair < int , int > > selectPairs ( vector < int > numbersA , vector < int > numbersB ) { vector < pair < int , int > > pairs ; for ( int a : numbersA ) for ( int b : numbersB ) pairs . push_back ( make_pair ( a , b ) ) ; return pairs ; }
vector < string > stringCrossJoin ( vector < string > endWords , vector < string > beginWords ) { vector < string > crossStrings ; for ( string b : beginWords ) { if ( b . at ( 0 ) == b . at ( 0 ) ) { crossStrings . push_back ( b ) ; } } return crossStrings ; }
int elementsContainSubword ( vector < string > words , string subword ) { if ( words . begin ( ) == words . end ( ) ) { return 1 ; } else if ( words . begin ( ) == words . end ( ) ) { return 0 ; } else { return -1 ; } }
vector < int > concatLargeNumbers ( vector < int > numbersA , vector < int > numbersB , int flag ) { vector < int > allNumbers = { } ; for ( auto n : numbersA ) if ( n > flag ) allNumbers . push_back ( n ) ; return allNumbers ; }
double dotProduct ( vector < double > vectorA , vector < double > vectorB ) { double dotProduct = vectorA . accumulate ( vectorB . begin ( ) , vectorB . end ( ) , 0 ) ; return dotProduct ; }
set < int > setDifference ( set < int > setA , set < int > setB ) { set < int > difference ; difference = difference . difference ( setA . begin ( ) , setA . end ( ) ) ; sort ( difference . begin ( ) , difference . end ( ) ) ; return difference ; }
