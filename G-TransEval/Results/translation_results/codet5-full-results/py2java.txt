int greatest_common_divisor ( int a : int , int b : int ) { if ( a == 0 b == 0 ) return a + b ; if ( a == b ) return a ; if ( a > b ) return greatest_common_divisor ( a % b , b ) ; else return greatest_common_divisor ( a , b % a ) ; }
int largest_divisor ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) if ( n % i == 0 ) return n / i ; return 1 ; }
boolean is_prime ( int n ) { if ( n < 2 ) { return false ; } for ( int k = 2 ; k < n ; k ++ ) { if ( n % k == 0 ) { return false ; } } return true ; }
int fizz_buzz ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 11 == 0 i % 13 == 0 ) { int q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) count += 1 ; q /= 10 ; } } } return count ; }
int prime_fib ( int n ) { int f0 = 0 , f1 = 1 ; while ( n > 0 ) { int p = f0 + f1 ; boolean is_prime = p >= 2 ; for ( int i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { n -- ; } f0 = f1 ; f1 = p ; } return f1 ; }
float triangle_area ( float a , float h ) { return a * h / 2 ; }
int modp ( int n , int p ) { int ret = 1 ; for ( int i = 0 ; i < n ; i ++ ) ret = ( ret * 2 ) % p ; return ret ; }
int add ( int x , int y ) { return x + y ; }
int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 1 ; return fib ( n - 1 ) + fib ( n - 2 ) ; }
int largest_prime_factor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) while ( n % i == 0 && n > i ) n /= i ; return n ; }
int sum_to_n ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) result += i ; return result ; }
int fibfib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 0 ; if ( n == 2 ) return 1 ; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
boolean is_multiply_prime ( int a ) { int num = 0 ; for ( int i = 2 ; i * i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) { a /= i ; num ++ ; } } return num == 3 ; }
boolean is_simple_power ( int x , int n ) { if ( n == 1 ) return ( x == 1 ) ; int power = 1 ; while ( power < x ) power *= n ; return ( power == x ) ; }
int choose_num ( int x , int y ) { if ( x > y ) return - 1 ; if ( y % 2 == 0 ) return y ; if ( x == y ) return - 1 ; return y - 1 ; }
boolean is_equal_to_sum_even ( int n ) { return ( n % 2 == 0 && n >= 8 ) ; }
int special_factorial ( int n ) { int fact = 1 ; int special_fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; special_fact *= fact ; } return special_fact ; }
int x_or_y ( int n , int x , int y ) { boolean is_prime = n >= 2 ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) return x ; return y ; }
boolean right_angle_triangle ( int a , int b , int c ) { return a * a == b * b + c * c * c == a * a + b * b ; }
int fast_pow ( int n , int k ) { if ( k == 0 ) return 1 ; int temp = fast_pow ( n , k / 2 ) ; if ( k % 2 == 0 ) return temp * temp ; else return n * temp * temp ; }
boolean is_palin ( String s ) { int len = s . length ( ) / 2 ; for ( int i = 0 ; i < len ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( s . length ( ) - i - 1 ) ) return false ; } return true ; }
int find_sum ( int n ) { int ans = 0 , temp = 0 , num ; for ( int i = 1 ; i <= n && temp < n ; i ++ ) { temp = i - 1 ; num = 1 ; while ( temp < n ) { if ( temp + i <= n ) ans += ( i * num ) ; else ans += ( ( n - temp ) * num ) ; temp += i ; num ++ ; } } return ans ; }
int get_next_gap ( int gap ) { gap = gap * 10 / 13 ; if ( gap < 1 ) return 1 ; return gap ; }
int count_non_decreasing ( int n ) { int k = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count /= i ; } return count ; }
int power ( int x , int y ) { if ( y == 0 ) return 1 ; else if ( y % 2 == 0 ) return power ( x , y / 2 ) * power ( x , y / 2 ) ; else return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; }
float power ( float x , int y ) { float temp ; if ( y == 0 ) return 1 ; temp = power ( x , y / 2 ) ; if ( y % 2 == 0 ) return temp * temp ; else { if ( y > 0 ) return x * temp * temp ; else return temp * temp / x ; } }
int multiply ( int x , int y ) { if ( y == 0 ) return 0 ; if ( y > 0 ) return x + multiply ( x , y - 1 ) ; if ( y < 0 ) return - multiply ( x , - y ) ; return 0 ; }
int smallest ( int x , int y , int z ) { if ( y / x == 0 ) return ( y / z == 0 ) ? y : z ; return ( x / z == 0 ) ? x : z ; }
boolean is_power_of_four ( int n ) { if ( n == 0 ) return false ; while ( n != 1 ) { if ( n % 4 != 0 ) return false ; n = n / 4 ; } return true ; }
int mod_inverse ( int a , int m ) { int m0 = m , t , q ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { q = a / m ; t = m ; m = a % m ; a = t ; t = x0  ; x0 = x1 - q * x0  ; x1 = t  ; } if ( x1 < 0 ) x1 += m0  ; return x1  ; }
int cnt_rotations ( String s , int n ) { String s2 = s + s ; int pre [ ] = new int [ 2 * n ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; if ( s2 . charAt ( i ) == 'a' s2 . charAt ( i ) == 'e' s2 . charAt ( i ) == 'i' s2 . charAt ( i ) == 'o' s2 . charAt ( i ) == 'u' ) pre [ i ] ++ ; } int ans = 0 ; for ( int i = n - 1 ; i < 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) x1 -= pre [ l ] ; r = i - n / 2 ; int left = pre [ r ] ; if ( l >= 0 ) left -= pre [ l ] ; int right = x1 - left ; if ( left > right ) ans ++ ; } return ans ; }
int binomial_coeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= n - i ; res /= i + 1 ; } return res ; }
boolean is_prefix ( String temp , String s ) { if ( temp . length ( ) < s . length ( ) ) return false ; else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != temp . charAt ( i ) ) return false ; } return true ; } }
String lexicographically_smallest_string ( String s , int n ) { int last_ze = - 1 ; String ans = "" ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { last_ze = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i <= last_ze && s . charAt ( i ) == '0' ) ans += s . charAt ( i ) ; else if ( i > last_ze ) ans += s . charAt ( i ) ; } return ans ; }
int calculate_max ( int n , int m , int k ) { int ans = - 1 ; int low = 0 , high = m ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int val = 0 ; int l = k - 1 , r = n - k ; val += mid ; if ( mid >= l ) { val += l * ( 2 * mid - l - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( l - mid ) ; } if ( mid >= r ) { val += r * ( 2 * mid - r - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( r - mid ) ; } if ( val <= m ) { ans = Math . max ( ans , mid ) ; low = mid + 1 ; } else { high = mid - 1 ; } } return ans ; }
int find_length ( String s , int i , int j ) { int required = i ; int len = 0 ; for ( char curr : s . toCharArray ( ) ) { if ( curr == required ) { len ++ ; if ( required == i ) required = j ; else required = i ; } } return len ; }
boolean check_reverse ( int left_sum , int right_sum ) { int rev = 0 ; int temp = right_sum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp /= 10 ; } if ( rev == left_sum ) { return true ; } return false ; }
boolean is_composite ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return false ; if ( n % 2 == 0 n % 3 == 0 ) return true ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) return true ; } return false ; }
int min_deletion ( String s ) { int n = s . length ( ) ; int first_idx1 = - 1 ; int last_idx0 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { first_idx1 = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { last_idx0 = i ; break ; } } if ( first_idx1 == - 1 last_idx0 == - 1 ) return 0 ; int count1 = 0 , count0 = 0 ; for ( int i = 0 ; i < last_idx0 ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count1 ++ ; } } for ( int i = first_idx1 + 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count0 ++ ; } } return Math . min ( count0 , count1 ) ; }
int min_steps ( String s , int n ) { int smaller , cost = 0 ; int f [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int curr_ele = s . charAt ( i ) - 'a' ; smaller = 0 ; for ( int j = 0 ; j <= curr_ele ; j ++ ) { if ( f [ j ] != 0 ) smaller += f [ j ] ; } if ( smaller == 0 ) cost += i + 1 ; else cost += i - smaller + 1 ; f [ s . charAt ( i ) - 'a' ] ++ ; } return cost ; }
int number_of_ways ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 1 ; b < n ; b ++ ) { int c = n - ( a + b ) ; if ( a < b + c && b < a + c && c < a + b ) count ++ ; } } return count ; }
int slope_of_num ( int num [ ] , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; ++ i ) { if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) slope ++ ; else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) slope ++ ; } return slope ; }
int middle_of_three ( int a , int b , int c ) { int x = a - b ; int y = b - c ; int z = a - c ; if ( x * y > 0 ) return b ; else if ( x * z > 0 ) return c ; else return a ; }
int count_max_set_bits ( int left , int right ) { while ( ( left | ( left + 1 ) ) <= right ) left |= left + 1 ; return left ; }
int find_s ( int s ) { int l = 1 , r = s / 2 + 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) return mid ; if ( sum > s ) r = mid - 1 ; else l = mid + 1 ; } return - 1 ; }
boolean check ( String s ) { int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int ascii = ( int ) s . charAt ( i ) ; if ( ascii < 96 ascii > 122 ) return false ; sum += ascii ; if ( min > ascii ) min = ascii ; if ( max < ascii ) max = ascii ; } min -= 1 ; int e_sum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == e_sum ; }
long minimum_possible_product ( long k ) { long res = 1 ; long r = ( 1 << k ) - 1 ; for ( int i = 0 ; i < k ; i ++ ) { res *= r - 1 ; } res *= r ; return res ; }
int find_in_grid ( int i , int j ) { if ( i == j ) return i * i - ( i - 1 ) ; else if ( i > j ) { if ( i % 2 == 0 ) return i * i - ( j - 1 ) ; else return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } else { if ( j % 2 == 0 ) return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; else return j * j - ( i - 1 ) ; } }
int find_min_operations_req_emp_str ( String s ) { int cnt_one = 0 ; int cnt_zero = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { if ( cnt_one != 0 ) { cnt_one -- ; } cnt_zero ++ ; } else { if ( cnt_zero != 0 ) { cnt_zero -- ; } cnt_one ++ ; } } return cnt_one + cnt_zero ; }
boolean is_reachable ( int x1 , int y1 , int x2 , int y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) x2 %= y2 ; else y2 %= x2 ; } if ( x2 == x1 ) return ( y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ) ; else if ( y2 == y1 ) return ( x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ) ; else return false ; }
int find_max_soln ( int n , int x , int y ) { int ans = Integer . MIN_VALUE ; for ( int k = 0 ; k <= n ; k ++ ) { if ( k % x == y ) ans = Math . max ( ans , k ) ; } return ( ans >= 0 && ans <= n ) ? ans : - 1 ; }
int number_of_pairs ( int n ) { int count = 0 ; for ( int i = 1 , j = n - 1 ; i < j ; i ++ , j -- ) if ( i + j == n ) count ++ ; return count ; }
int min_changes ( String s , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( s . charAt ( 0 ) != '1' ) { count ++ ; ones ++ ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) zeros ++ ; else ones ++ ; if ( zeros > ones ) { zeros -- ; ones ++ ; count ++ ; } } return count ; }
int k_visible_from_left ( int n , int k ) { if ( n == k ) return 1 ; if ( k == 1 ) { int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) ans *= i ; return ans ; } return k_visible_from_left ( n - 1 , k - 1 ) + ( n - 1 ) * k_visible_from_left ( n - 1 , k ) ; }
double find ( int n , int sum ) { if ( sum > 6 * n sum < n ) return 0 ; if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) return 1.0 / 6 ; else return 0 ; } double s = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) s += find ( n - 1 , sum - i ) / 6 ; return s ; }
int bin_coff ( int n , int r ) { int val = 1 ; if ( r > ( n - r ) ) r = n - r ; for ( int i = 0 ; i < r ; i ++ ) { val *= n - i ; val /= i + 1 ; } return val ; }
int get_mask ( int val ) { int mask = 0 ; if ( val == 0 ) return 1 ; while ( val > 0 ) { int d = val % 10 ; mask |= ( 1 << d ) ; val /= 10 ; } return mask ; }
int ways_to_k_adjacent_set_bits ( int n , int k , int current_index , int adjacent_set_bits , int last_bit ) { if ( current_index == n ) { if ( adjacent_set_bits == k ) { return 1 ; } return 0 ; } int no_of_ways = 0 ; if ( last_bit == 1 ) { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits + 1 , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } else if ( last_bit != 1 ) { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } return no_of_ways ; }
int check_func ( int i , int j , char [ ] str ) { if ( str [ i ] == '(' && str [ j ] == ')' ) return 1 ; if ( str [ i ] == '(' && str [ j ] == '?' ) return 1 ; if ( str [ i ] == '?' && str [ j ] == ')' ) return 1 ; if ( str [ i ] == '[' && str [ j ] == ']' ) return 1 ; if ( str [ i ] == '[' && str [ j ] == '?' ) return 1  ; if ( str [ i ] == '?' && str [ j ] == ']' ) return 1  ; if ( str [ i ] == '[' && str [ j ] == '?' ) return 1  ; if ( str [ i ] == '?' && str [ j ] == ']' ) return 1  ; if ( str [ i ] == '{' && str [ j ] == '}' ) return 1  ; if ( str [ i ] == '{' && str [ j ] == '?' ) return 1  ; if ( str [ i ] == '?' && str [ j ] == '}' ) return 1  ; return 0 ; }
int find_golomb ( int n ) { if ( n == 1 ) return 1 ; return 1 + find_golomb ( n - find_golomb ( find_golomb ( n - 1 ) ) ) ; }
boolean all_ones ( String s , int n ) { int co = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) co += ( s . charAt ( i ) == '1' ? 1 : 0 ) ; return co == n ; }
int pad ( int n ) { int p_prev_prev = 1 , p_prev = 1 , p_curr = 1 , p_next = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { p_next = p_prev_prev + p_prev  ; p_prev_prev = p_prev  ; p_prev = p_curr  ; p_curr = p_next  ; } return p_next  ; }
int odd_length_palindrome ( int k ) { int palin = k ; k /= 10 ; while ( k > 0 ) { int rev = k % 10 ; palin = palin * 10 + rev ; k /= 10 ; } return palin ; }
String change_string ( String s0 ) { char s [ ] = s0 . toCharArray ( ) ; int n = s0 . length ( ) ; if ( s [ 0 ] == '?' ) { s [ 0 ] = 'a' ; if ( s [ 0 ] == s [ 1 ] ) s [ 0 ] = ( char ) ( s [ 0 ] + 1 ) ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == '?' ) { s [ i ] = 'a' ; if ( s [ i ] == s [ i - 1 ] ) s [ i ] = ( char ) ( s [ i ] + 1 ) ; if ( s [ i ] == s [ i + 1 ] ) s [ i ] = ( char ) ( s [ i ] + 1 ) ; if ( s [ i ] == s [ i - 1 ] ) s [ i ] = ( char ) ( s [ i ] + 1 ) ; } } if ( s [ n - 1 ] == '?' ) { s [ n - 1 ] = 'a' ; if ( s [ n - 1 ] == s [ n - 2 ] ) s [ n - 1 ] = ( char ) ( s [ n - 1 ] + 1 ) ; } return s ; }
int total_hamming_distance ( int n ) { int i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + n / i ; i = i * 2 ; } return sum ; }
int check_bitonic ( char [ ] s ) { int i ; for ( i = 1 ; i < s . length ; i ++ ) { if ( s [ i ] > s [ i - 1 ] ) continue ; if ( s [ i ] <= s [ i - 1 ] ) break ; } if ( i == s . length - 1 ) return 1 ; int j ; for ( j = i + 1 ; j < s . length ; j ++ ) { if ( s [ j ] < s [ j - 1 ] ) continue ; if ( s [ j ] >= s [ j - 1 ] ) break ; } i = j ; if ( i != s . length ) return 0 ; return 1 ; }
boolean ends_with ( String str , String pat ) { int pat_len = pat . length ( ) ; int str_len = str . length ( ) ; if ( pat_len > str_len ) return false ; pat_len -- ; str_len -- ; while ( pat_len >= 0 ) { if ( pat . charAt ( pat_len ) != str . charAt ( str_len ) ) return false ; pat_len -- ; str_len -- ; } return true ; }
int get_sum ( int n , int d ) { if ( n < d ) return 0 ; while ( n % 10 != d ) n -- ; int k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
int balanced_string_by_swapping ( String s ) { int unbalanced_pair = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( unbalanced_pair > 0 && s . charAt ( i ) == ']' ) unbalanced_pair -- ; else if ( s . charAt ( i ) == '[' ) unbalanced_pair ++ ; } return ( unbalanced_pair + 1 ) / 2 ; }
int compute_hash ( String s ) { int p = 31 ; int mod = ( int ) 1e9 + 7 ; int hash_val = 0 ; int mul = 1 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; hash_val = ( hash_val + ( ch - 'a' + 1 ) * mul ) % mod ; mul = mul * p % mod ; } return hash_val ; }
int count_of_substring_with_only_ones ( String s ) { int res = 0 , count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { count = ( s . charAt ( i ) == '1' ? count + 1 : 0 ) ; res = res + count ; } return res ; }
boolean composite ( int n ) { boolean flag = false ; int c = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) { c ++ ; } } if ( c >= 3 ) { flag = true ; } return flag ; }
boolean is_div_by_six ( String s , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += ( int ) s . charAt ( i ) - 'a' + 1 ; } if ( sum % 3 != 0 ) return false ; int last_digit = ( ( int ) s . charAt ( n - 1 ) - 'a' + 1 ) % 10 ; if ( last_digit % 2 != 0 ) return false ; return true ; }
boolean is_redundant_braces ( String s ) { int a = 0 , b = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '(' && s . charAt ( i + 2 ) == ')' ) return true ; if ( s . charAt ( i ) == '*' s . charAt ( i ) == '+' s . charAt ( i ) == '-' s . charAt ( i ) == '/' ) a ++ ; if ( s . charAt ( i ) == '(' ) b ++ ; } if ( b > a ) return true ; return false ; }
int count_sub_str ( String s , int n ) { int count = 0 ; int i = 0 ; while ( i < ( n - 2 ) ) { if ( s . charAt ( i ) == '0' && s . charAt ( i + 1 ) == '1' && s . charAt ( i + 2 ) == '0' ) { count ++ ; i += 3 ; } else if ( s . charAt ( i ) == '1' && s . charAt ( i + 1 ) == '0' && s . charAt ( i + 2 ) == '1' ) { count ++ ; i += 3 ; } else i ++ ; } return count ; }
int prefix_occurrences ( String s ) { char c = s . charAt ( 0 ) ; int count_c = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == c ) count_c ++ ; } return count_c ; }
boolean is_valid ( String s , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) return false ; } return true ; }
int count ( String s , int k ) { int n = s . length ( ) ; int d = 0 , i ; int count = 0 ; for ( i = 0 ; i < n ; i ++ ) d += s . charAt ( i ) ; if ( d % k == 0 ) count += 1 ; for ( i = k ; i < n ; i ++ ) { int prev = s . charAt ( i - k ) ; d -= prev ; d += s . charAt ( i ) ; if ( d % k == 0 ) count += 1 ; } return count ; }
int find_substring_count ( String s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) { result ++ ; while ( i < n - 1 && s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) { i ++ ; } } } return result ; }
boolean find ( String s1 , String s2 ) { int len1 = s1 . length ( ) ; int len2 = s2 . length ( ) ; if ( len1 != len2 ) return false ; int d [ ] = new int [ len1 ] ; d [ 0 ] = s2 . charAt ( 0 ) - s1 . charAt ( 0 ) ; for ( int i = 1 ; i < len1 ; i ++ ) { if ( s1 . charAt ( i ) > s2 . charAt ( i ) ) return false ; else d [ i ] = s2 . charAt ( i ) - s1 . charAt ( i ) ; } for ( int i = 0 ; i < len1 - 1 ; i ++ ) if ( d [ i ] < d [ i + 1 ] ) return false ; return true ; }
boolean is_in_given_base ( String s , int bas ) { if ( bas > 16 ) return false ; else if ( bas <= 10 ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) ) return false ; } } else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! ( ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) || ( s . charAt ( i ) >= 'A' && s . charAt ( i ) < ( 'A' + bas - 10 ) ) ) ) return false ; } } return true ; }
int count_non_empty_substr ( String s ) { int n = s . length ( ) ; return n * ( n + 1 ) / 2 ; }
int even_decimal_value ( String s , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimal_value = 0 ; int power_of_2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimal_value += ( s . charAt ( k ) - '0' ) * power_of_2 ; power_of_2 *= 2 ; } if ( decimal_value % 2 == 0 ) result ++ ; } } return result ; }
int calculate ( String s ) { int ans = 6 ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { for ( int k = 0 ; k < 10 ; k ++ ) { for ( int l = 0 ; l < 10 ; l ++ ) { for ( int m = 0 ; m < 10 ; m ++ ) { for ( int n = 0 ; n < 10 ; n ++ ) { if ( i + j + k == l + m + n ) { int c = 0 ; if ( i != s . charAt ( 0 ) - '0' ) c ++ ; if ( j != s . charAt ( 1 ) - '0' ) c ++ ; if ( k != s . charAt ( 2 ) - '0' ) c ++ ; if ( l != s . charAt ( 3 ) - '0' ) c ++ ; if ( m != s . charAt ( 4 ) - '0' ) c ++ ; if ( n != s . charAt ( 5 ) - '0' ) c ++ ; if ( c < ans ) ans = c ; } } } } } } } return ans ; }
int xor_zero ( String s ) { int one_count = 0 , zero_count = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) one_count ++ ; else zero_count ++ ; } if ( one_count % 2 == 0 ) return zero_count ; return one_count ; }
int even_length ( String n ) { int res = n ; for ( int j = n . length ( ) - 1 ; j >= 0 ; j -- ) res += n . charAt ( j ) ; return res ; }
int count_substring_with_equal_ends ( String s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) if ( s . charAt ( i ) == s . charAt ( j ) ) result ++ ; return result ; }
double normal_slope ( int a , int b , int x1 , int y1 ) { int g = a / 2 ; int f = b / 2 ; if ( g - x1 == 0 ) return - 1 ; double slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) return - 2 ; return slope ; }
boolean orthogonality ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) { int dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) return true ; else return false ; }
double find_area_shaded ( double a ) { double sq_area = a * a ; double semi_circle_area = ( 3.14 * ( a * a ) / 8 ) ; double shaded_area = 4 * semi_circle_area - sq_area ; return shaded_area ; }
int factorial ( int a , int b ) { int res = 1 ; for ( int i = 1 ; i <= a + b ; i ++ ) res = res * i ; for ( int i = 1 ; i <= a ; i ++ ) res = res / i ; for ( int i = 1 ; i <= b ; i ++ ) res = res / i ; return res ; }
int factor_tree ( int n ) { int height = 0 ; while ( n > 1 ) { boolean flag = false ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( ! flag ) break ; } return height ; }
String find_if_possible ( int n , int s , int x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) return "Yes" ; if ( n == 1 ) { if ( s == x ) return "Yes" ; else return "No" ; } if ( n == 2 ) { int c = ( s - x ) / 2 ; int a = c ; int b = c ; a = a + x ; if ( ( a ^ b ) == x ) return "Yes" ; else return "No" ; } } else return "No" ; }
int maximum_triplet_xor ( int a , int b , int c ) { int ans = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int cur = 1 << i ; if ( a >= cur ) { ans += cur  ; a -= cur  ; } else if ( b >= cur ) { ans += cur  ; b -= cur  ; } else if ( c >= cur ) { ans += cur  ; c -= cur  ; } } return ans ; }
int item_type ( int n ) { int count = 0 ; for ( int day = 1 ; count + day * ( day + 1 ) / 2 < n ; day ++ ) { count += day * ( day + 1 ) / 2 ; } for ( int type = day ; type >= 0 ; type -- ) { count += type ; if ( count >= n ) return type ; } return 0 ; }
int max_gcd_in_range ( int l , int r ) { int ans = 1 ; for ( int z = r ; z > 0 ; z -- ) { if ( r / z - ( l - 1 ) / z > 1 ) { ans = z ; break ; } } return ans ; }
int sum_of_digits ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += ( n % 10 ) ; n = n / 10 ; } return sum ; }
boolean is_rep_unit_num ( int n , int b ) { int len = 0 , count_one = 0 ; while ( n != 0 ) { int r = n % b ; len ++ ; if ( r == 1 ) count_one ++ ; n = n / b ; } return count_one >= 3 && count_one == len ; }
boolean is_straigh_line_num ( int n ) { if ( n <= 99 ) return false ; String s = Integer . toString ( n ) ; int d = s . charAt ( 1 ) - s . charAt ( 0 ) ; for ( int i = 2 ; i < s . length ( ) ; i ++ ) if ( s . charAt ( i ) - s . charAt ( i - 1 ) != d ) return false ; return true ; }
int get_count ( int d , int n ) { int no = n / d ; int result = no ; for ( int p = 2 ; p * p <= no ; ++ p ) { if ( no % p == 0 ) { while ( no % p == 0 ) no /= p ; result -= result / p ; } } if ( no > 1 ) result -= result / no ; return result ; }
boolean is_even_parity ( int x ) { int parity = 0 ; while ( x != 0 ) { if ( ( x & 1 ) != 0 ) parity ++ ; x = x >> 1 ; } if ( parity % 2 == 0 ) return true ; else return false ; }
int is_perfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) sum = sum + i + n / i ; else sum = sum + i ; } } if ( sum == n && n != 1 ) return n ; return 0 ; }
int log_a_to_base_b ( int a , int b ) { return ( a > ( b - 1 ) ) ? 1 + log_a_to_base_b ( a / b , b ) : 0 ; }
int using_binary_search ( int start , int end , int n , int s ) { if ( start >= end ) return start ; int mid = start + ( end - start ) / 2 ; int total_sum = ( n * ( n + 1 ) ) / 2 ; int mid_sum = ( mid * ( mid + 1 ) ) / 2 ; if ( total_sum - mid_sum <= s ) return using_binary_search ( start , mid , n , s ) ; return using_binary_search ( mid + 1 , end , n , s ) ; }
String min_int ( String s ) { String s1 = String . valueOf ( s ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) >= '5' ) s1 . setCharAt ( i , ( char ) ( '9' - s1 . charAt ( i ) + '0' ) ) ; } if ( s1 . charAt ( 0 ) == '0' ) s1 . setCharAt ( 0 , '9' ) ; return s1 ; }
int count_triplets ( int a , int b , int c ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { for ( int k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) { ans ++ ; } } } } return ans ; }
boolean topsy_turvy ( char [ ] s ) { for ( int i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == '2' s [ i ] == '4' s [ i ] == '5' s [ i ] == '6' s [ i ] == '7' s [ i ] == '9' ) { return false ; } } return true ; }
int sum_of_last_dig ( int n , int m ) { int sum = 0 ; int k = n / m ; int [ ] arr = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ] ; } int rem = k % 10 ; int ans = k / 10 * sum ; for ( int i = 0 ; i < rem ; i ++ ) ans += arr [ i ] ; return ans ; }
int total_pay ( int total_items , int price_of_one_item , int n , int m ) { int free_items = 0 ; int actual = 0 ; free_items = total_items / ( n + m ) ; actual = total_items - free_items ; int amount = actual * price_of_one_item  ; return amount ; }
int min_operations ( int x , int y , int p , int q ) { if ( y % x != 0 ) return - 1 ; int d = y / x ; int a = 0 ; while ( d % p == 0 ) { d /= p ; a ++ ; } int b = 0 ; while ( d % q == 0 ) { d /= q ; b ++ ; } if ( d != 1 ) return - 1 ; return a + b ; }
boolean is_mersenne ( int n ) { while ( n != 0 ) { int r = n % 2 ; if ( r == 0 ) return false ; n /= 2 ; } return true ; }
int find_third_digit ( int n ) { if ( n < 3 ) return 0 ; return ( n & 1 ) == 1 ? 1 : 6 ; }
boolean is_odd_length ( int num ) { int count = 0 ; while ( num > 0 ) { num = num / 10 ; count ++ ; } if ( count % 2 != 0 ) return true ; return false ; }
boolean check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) count ++ ; } return count > 1 ; }
BigInteger bytes ( int kilobytes ) { BigInteger b = new BigInteger ( "0" ) ; b = kilobytes * 1024 ; return b ; }
int octahedral_num ( int n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
String check_equal ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != '1' && s . charAt ( i ) != '0' && s . charAt ( i ) != '8' ) { return "No" ; } } int start = 0 , end = s . length ( ) - 1 ; while ( start < end ) { if ( s . charAt ( start ) != s . charAt ( end ) ) { return "No" ; } start ++ ; end -- ; } return "Yes" ; }
boolean is_undulating ( String n ) { if ( n . length ( ) <= 2 ) return false ; for ( int i = 2 ; i < n . length ( ) ; i ++ ) { if ( n . charAt ( i - 2 ) != n . charAt ( i ) ) return false ; } return true ; }
int first_digit ( int n ) { while ( n >= 10 ) n /= 10 ; return n ; }
int count_digit ( int n ) { if ( n == 0 ) return 0 ; return 1 + count_digit ( n / 10 ) ; }
boolean is_divisible_by_5 ( String s ) { int n = s . length ( ) ; return ( s . charAt ( n - 1 ) == '0' || s . charAt ( n - 1 ) == '5' ) ; }
int inv ( int a , int m ) { int m0 = m , t , q ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { q = a / m ; t = m ; m = a % m ; a = t ; t = x0  ; x0 = x1 - q * x0  ; x1 = t  ; } if ( x1 < 0 ) x1 += m0  ; return x1  ; }
boolean only_first_and_last_are_set ( int n ) { if ( n == 1 ) return true ; if ( n == 2 ) return false ; return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
long divide ( long dividend , long divisor ) { long sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? - 1 : 1 ; dividend = Math . abs ( dividend ) ; divisor = Math . abs ( divisor ) ; long quotient = 0 , temp = 0 ; for ( int i = 31 ; i >= 0 ; -- i ) { if ( temp + ( divisor << i ) <= dividend ) { temp += divisor << i ; quotient |= 1L << i ; } } if ( sign == - 1 ) quotient = - quotient ; return quotient ; }
char find_profession ( int level , int pos ) { if ( level == 1 ) return 'e' ; if ( find_profession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) return ( pos % 2 > 0 ) ? 'd' : 'e' ; return ( pos % 2 > 0 ) ? 'e' : 'd' ; }
boolean has_close_elements ( int [ ] numbers , int threshold ) { for ( int i = 0 ; i < numbers . length ; i ++ ) { for ( int j = i + 1 ; j < numbers . length ; j ++ ) { int distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) return true ; } } return false ; }
int truncate_number ( int number ) { return number % 1 ; }
boolean below_zero ( List < Integer > operations ) { int balance = 0 ; for ( int i = 0 ; i < operations . size ( ) ; i ++ ) { balance += operations . get ( i ) ; if ( balance < 0 ) return true ; } return false ; }
double mean_absolute_deviation ( int [ ] numbers ) { int sum_num = 0 ; for ( int num : numbers ) sum_num += num ; double mean = sum_num / numbers . length ; int sum_abs_diff = 0 ; for ( int num : numbers ) sum_abs_diff += Math . abs ( num - mean ) ; return sum_abs_diff / numbers . length ; }
List < Integer > intersperse ( List < Integer > numbers , char delimiter ) { List < Integer > result = new ArrayList < Integer > ( ) ; if ( numbers . size ( ) == 0 ) return result ; for ( int i = 0 ; i < numbers . size ( ) - 1 ; i ++ ) { result . add ( numbers . get ( i ) ) ; result . add ( delimiter ) ; } result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ; return result ; }
void sum_product ( int [ ] numbers ) { int sum_value = 0 ; int prod_value = 1 ; for ( int n : numbers ) { sum_value += n ; prod_value *= n ; } System . out . print ( sum_value + " " + prod_value ) ; }
List < String > all_prefixes ( String str ) { List < String > result = new ArrayList < > ( ) ; for ( int i = 1 ; i <= str . length ( ) ; i ++ ) result . add ( str . substring ( 0 , i ) ) ; return result ; }
List < Integer > parse_music ( String music_string ) { List < Integer > current = new ArrayList < > ( ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i <= music_string . length ( ) ; i ++ ) { if ( i == music_string . length ( ) music_string . charAt ( i ) == ' ' ) { if ( current . charAt ( 0 ) == 'o' ) result . add ( 4 ) ; if ( current . charAt ( 0 ) == 'o' ) result . add ( 2 ) ; if ( current . charAt ( 0 ) == '.|' ) result . add ( 1 ) ; current . clear ( ) ; } else current . add ( music_string . charAt ( i ) ) ; } return result ; }
int strlen ( String s ) { return s . length ( ) ; }
List < Integer > factorize ( int n ) { List < Integer > factors = new ArrayList < Integer > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { factors . add ( i ) ; n /= i ; } else i ++ ; } return factors ; }
String concatenate ( String [ ] strings ) { String result = "" ; for ( String str : strings ) result += str ; return result ; }
List < Integer > get_positive ( int [ ] l ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . length ; i ++ ) if ( l [ i ] > 0 ) result . add ( l [ i ] ) ; return result ; }
List < Integer > sort_even ( List < Integer > l ) { List < Integer > evens = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i += 2 ) { evens . add ( l . get ( i ) ) ; } Collections . sort ( evens ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 2 == 0 ) result . add ( evens . get ( i / 2 ) ) ; if ( i % 2 == 1 ) result . add ( l . get ( i ) ) ; } return result ; }
String decode_cyclic ( String s ) { List < Character > output = new ArrayList < Character > ( ) ; for ( int i = 0 ; i <= s . length ( ) - 4 ; i += 3 ) { char x = s . charAt ( i + 2 ) + s . substring ( i , i + 2 ) ; output . add ( x ) ; } return "" ; }
int car_race_collision ( int n ) { return ( int ) Math . pow ( n , 2 ) ; }
List < Integer > incr_list ( List < Integer > l ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i : l ) result . add ( i + 1 ) ; return result ; }
boolean pairs_sum_to_zero ( int [ ] l ) { for ( int i = 0 ; i < l . length ; i ++ ) for ( int j = i + 1 ; j < l . length ; j ++ ) if ( l [ i ] + l [ j ] == 0 ) return true ; return false ; }
String change_base ( int x , int b ) { StringBuilder ret = new StringBuilder ( ) ; while ( x > 0 ) { ret . append ( x % b ) ; x /= b ; } return ret . toString ( ) ; }
double median ( int [ ] l ) { Arrays . sort ( l ) ; if ( l . length % 2 == 1 ) return l [ l . length / 2 ] ; else return ( l [ l . length / 2 - 1 ] + l [ l . length / 2 ] ) / 2.0 ; }
String decode_shift ( String s ) { String result = "" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; int w = ( ch + 21 - "a" ) % 26 + "a" ; result . add ( ch ) ; } return result ; }
boolean below_threshold ( int l [ ] , int t ) { for ( int n : l ) if ( n >= t ) return false ; return true ; }
boolean correct_bracketing ( char [ ] brackets ) { int depth = 0 ; for ( int i = 0 ; i < brackets . length ; i ++ ) { if ( brackets [ i ] == '<' ) depth ++ ; else depth -- ; if ( depth < 0 ) return false ; } return depth == 0 ; }
boolean monotonic ( int l [ ] ) { int incr = 0 , decr = 0 ; for ( int i = 1 ; i < l . length ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) incr = 1 ; if ( l [ i ] < l [ i - 1 ] ) decr = 1 ; } return ( incr + decr != 2 ) ; }
List < Integer > derivative ( List < Integer > xs ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) result . add ( i * xs . get ( i ) ) ; return result ; }
int vowels_count ( String s ) { String vowels = "aeiouAEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( vowels . contains ( ch ) ) count ++ ; } if ( s . charAt ( s . length ( ) - 1 ) == "y" s . charAt ( s . length ( ) - 1 ) == "Y" ) count ++ ; return count ; }
int digit_sum ( String s ) { int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( Character . isUpperCase ( s . charAt ( i ) ) ) sum += ( int ) c ; } return sum ; }
int fruit_distribution ( String s , int n ) { List < Character > num1 = new ArrayList < Character > ( ) ; List < Character > num2 = new ArrayList < Character > ( ) ; boolean flag = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( Character . isDigit ( s . charAt ( i ) ) ) { if ( flag == false ) num1 . add ( s . charAt ( i ) ) ; if ( flag ) num2 . add ( s . charAt ( i ) ) ; } else if ( ! flag && num1 . size ( ) > 0 ) flag = true ; } return n - num1 . size ( ) - num2 . size ( ) ; }
List < Integer > pluck ( int [ ] arr ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . isEmpty ( ) ) { result . add ( arr [ i ] ) ; result . add ( i ) ; } else if ( arr [ i ] < result . get ( 0 ) ) { result . set ( 0 , arr [ i ] ) ; result . set ( 1 , i ) ; } } } return result ; }
List < Integer > strange_sort_list ( List < Integer > lst ) { List < Integer > res = new ArrayList < Integer > ( ) ; Collections . sort ( lst ) ; int l = 0 , r = lst . size ( ) - 1 ; while ( l < r ) { res . add ( lst . get ( l ) ) ; l ++ ; res . add ( lst . get ( r ) ) ; r -- ; } if ( l == r ) res . add ( lst . get ( l ) ) ; return res ; }
double triangle_area ( double a , double b , double c ) { if ( a + b <= c a + c <= b b + c <= a ) return - 1.0 ; double s = ( a + b + c ) / 2 ; double area = Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; return area ; }
boolean will_it_fly ( Queue < Integer > q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . size ( ) ; i ++ ) { if ( q . peek ( ) != q . peek ( ) && q . peek ( ) != q . peek ( ) ) return false ; sum += q . peek ( ) ; } return sum <= w ; }
boolean is_cube ( int a ) { a = Math . abs ( a ) ; int i = ( int ) Math . round ( Math . cbrt ( a ) ) ; return ( i * i * i == a ) ; }
int hex_key ( String num ) { String key = "2357BD" ; int total = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) if ( key . indexOf ( num . charAt ( i ) ) >= 0 ) total += 1 ; return total ; }
String decimal_to_binary ( int dec ) { List < String > ans = new ArrayList < > ( ) ; if ( dec != 0 ) { while ( dec > 0 ) { ans . add ( 0 ) ; dec /= 2 ; } } else ans += "0" ; return "db" + ans . toString ( ) + "db" ; }
boolean prime_length ( String s ) { int l = s . length ( ) ; if ( l < 2 ) return false ; for ( int i = 2 ; i < l ; i ++ ) if ( l % i == 0 ) return false ; return true ; }
int starts_one_ends ( int n ) { if ( n < 1 ) return 0 ; if ( n == 1 ) return 1 ; return 18 * ( ( int ) Math . pow ( 10 , n - 2 ) ) ; }
int add ( List < Integer > lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . size ( ) ; i += 2 ) { if ( lst . get ( i ) % 2 == 0 ) sum += lst . get ( i ) ; } return sum ; }
List < pair > get_row ( List < String > lst , char x ) { List < pair > coords = new ArrayList < pair > ( ) ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { for ( int j = lst . get ( i ) . size ( ) - 1 ; j >= 0 ; j -- ) { if ( lst . get ( i ) . get ( j ) == x ) { coords . add ( new pair ( i , j ) ) ; } } } return coords ; }
int next_smallest ( List < Integer > lst ) { Collections . sort ( lst ) ; for ( int i = 1 ; i < lst . size ( ) ; i ++ ) { if ( lst . get ( i ) != lst . get ( i - 1 ) ) { return lst . get ( i ) ; } } return - 1 ; }
boolean any_int ( int a , int b , int c ) { if ( a != a b != b c != c ) return false ; return a + b == c a + c == b b + c == a ; }
List < Integer > count_up_to ( int n ) { List < Integer > primes = new ArrayList < > ( ) ; for ( int i = 2 ; i < n ; i ++ ) { boolean is_prime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) primes . add ( i ) ; } return primes ; }
double closest_integer ( double value ) { double w = Math . float ( value ) ; return Math . round ( w ) ; }
List < Integer > make_a_pile ( int n ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) result . add ( n + 2 * i ) ; return result ; }
List < String > words_string ( String s ) { List < String > current = new ArrayList < String > ( ) ; List < String > words = new ArrayList < String > ( ) ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' || s . charAt ( i ) == ',' ) { if ( current . size ( ) > 0 ) { words . add ( current . get ( 0 ) ) ; current . clear ( ) ; } } else { current . add ( s . charAt ( i ) ) ; } } return words ; }
String rounded_avg ( int n , int m ) { if ( n > m ) return - 1 ; int num = ( n + m ) / 2 ; String ret = "" ; while ( num > 0 ) { ret += ( num % 2 ) ; num /= 2 ; } return ret ; }
List < Integer > unique_digits ( int n ) { List < Integer > digits = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < digits . size ( ) ; i ++ ) { boolean is_unique = true ; for ( char c : digits . get ( i ) ) { if ( c % 2 == 0 ) { is_unique = false ; break ; } } if ( is_unique ) digits . add ( n ) ; } Collections . sort ( digits ) ; return digits ; }
int count_nums ( int arr [ ] ) { int num = 0 ; for ( int n = 0 ; n < arr . length ; n ++ ) { int neg = ( n < 0 ? - 1 : 1 ) ; n = Math . abs ( n ) ; List < Integer > digits = new ArrayList < Integer > ( ) ; for ( int c = 0 ; c < n ; c ++ ) digits . add ( ( int ) c - '0' ) ; digits . set ( 0 , neg ) ; int sum = 0 ; for ( int d : digits ) sum += d ; if ( sum > 0 ) num ++ ; } return num ; }
boolean move_one_ball ( int [ ] arr ) { if ( arr . length <= 0 ) return true ; int num = 0 ; for ( int i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) num ++ ; } if ( arr [ arr . length - 1 ] > arr [ 0 ] ) num ++ ; if ( num < 2 ) return true ; return false ; }
String exchange ( List < Integer > lst1 , List < Integer > lst2 ) { int odd = 0 ; int even = 0 ; for ( int n : lst1 ) { if ( n % 2 == 1 ) odd ++ ; } for ( int n : lst2 ) { if ( n % 2 == 0 ) even ++ ; } if ( even >= odd ) return "YES" ; return "NO" ; }
List < String > odd_count ( String [ ] lst ) { List < String > results = new ArrayList < > ( ) ; String original_str = "the number of odd elements in the string i of the input." ; for ( String s : lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i ++ ) { if ( s . charAt ( i ) == 'i' ) sum += 1 ; } String result = new String ( ) ; for ( char c : original_str . toCharArray ( ) ) { if ( c == 'i' ) result . add ( Integer . toString ( sum ) ) ; else result . add ( c ) ; } results . add ( result ) ; } return results ; }
int minSubArraySum ( int [ ] nums ) { int min_sum = Integer . MAX_VALUE ; int sum = 0 ; for ( int num : nums ) { sum += num ; if ( min_sum > sum ) min_sum = sum ; if ( sum > 0 ) sum = 0 ; } return min_sum ; }
int max_fill ( List < Integer > grid , int capacity ) { int res = 0 ; for ( int well : grid ) { int sum = 0 ; for ( int n : well ) sum += n ; if ( sum > 0 ) res += ( sum - 1 ) / capacity + 1 ; } return res ; }
List < String > select_words ( String s , int n ) { String vowels = "aeiouAEIOU" ; List < String > current = new ArrayList < > ( ) ; List < String > result = new ArrayList < > ( ) ; int consonant_num = 0 ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { if ( consonant_num == n ) { result . add ( current ) ; } current . clear ( ) ; consonant_num = 0 ; } else { current . add ( s . charAt ( i ) ) ; if ( ! vowels . contains ( s . charAt ( i ) ) ) consonant_num ++ ; } } return result ; }
int solution ( int [ ] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 1 ) sum += lst [ i ] ; } return sum ; }
int add_elements ( int arr [ ] , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( - 99 <= arr [ i ] <= 99 ) sum += arr [ i ] ; } return sum ; }
List < Integer > get_odd_collatz ( int n ) { List < Integer > odd_collatz = new ArrayList < Integer > ( ) ; while ( n > 1 ) { if ( n % 2 == 1 ) { odd_collatz . add ( n ) ; n = n * 3 + 1 ; } else n /= 2 ; } odd_collatz . add ( 1 ) ; Collections . sort ( odd_collatz ) ; return odd_collatz ; }
boolean is_sorted ( int [ ] lst ) { for ( int i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; }
String intersection ( int interval1 [ ] , int interval2 [ ] ) { int inter1 = Math . max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = Math . min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) return "NO" ; for ( int i = 2 ; i < l ; i ++ ) if ( l % i == 0 ) return "NO" ; return "YES" ; }
int prod_signs ( int arr [ ] ) { if ( arr . length == 0 ) return - 32768 ; int sum = 0 , prods = 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) { sum += Math . abs ( arr [ i ] ) ; if ( i == 0 ) prods = 0 ; if ( i < 0 ) prods = - prods ; } return sum * prods ; }
List < Integer > minPath ( int [ ] [ ] grid , int k ) { int n = grid . length ; int min_num = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { List < Integer > tmp = new ArrayList < Integer > ( ) ; if ( i != 0 ) { tmp . add ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . add ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . add ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . add ( grid [ i ] [ j + 1 ] ) ; } min_num = Math . min ( tmp ) ; } } } List < Integer > ans = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . add ( 1 ) ; } else { ans . add ( min_num ) ; } } return ans ; }
int digits ( int n ) { int prod = 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) prod = 1 ; prod *= digit - '0' ; } } return prod ; }
boolean is_nested ( String s ) { int count = 0 ; int max_count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( ch == '[' ) count ++ ; if ( ch == ']' ) count -- ; if ( count < 0 ) count = 0 ; if ( count > max_count ) max_count = count ; if ( count <= max_count - 2 ) return true ; } return false ; }
int sum_squares ( List < Integer > lst ) { int sum = 0 ; for ( int i : lst ) { sum += Math . ceil ( i ) * Math . ceil ( i ) ; } return sum ; }
int can_arrange ( int [ ] arr ) { int index = - 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
int [ ] largest_smallest_integers ( int [ ] lst ) { int max_neg = 0 , min_pos = 0 ; for ( int n : lst ) { if ( n < 0 && ( max_neg == 0 n > max_neg ) ) max_neg = n ; if ( n > 0 && ( min_pos == 0 n < min_pos ) ) min_pos = n ; } return new int [ ] { max_neg , min_pos } ; }
String fix_spaces ( String text ) { String res = "" ; int space_len = 0 ; for ( int i = 0 ; i <= text . length ( ) ; i ++ ) { if ( i == text . length ( ) || text . charAt ( i ) != ' ' ) { if ( space_len == 1 ) res . add ( '_' ) ; if ( space_len == 2 ) res . add ( '__' ) ; if ( space_len > 2 ) res . add ( '-' ) ; space_len = 0 ; if ( i != text . length ( ) ) res . add ( text . charAt ( i ) ) ; } else { space_len ++ ; } } return res ; }
String file_name_check ( String file_name ) { int digit_num = 0 , dot_num = 0 ; if ( file_name . length ( ) < 5 || ! Character . isUpperCase ( file_name . charAt ( 0 ) ) ) return "No" ; String suffix = file_name . substring ( file_name . length ( ) - 4 ) ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) return "No" ; for ( int i = 0 ; i < file_name . length ( ) ; i ++ ) { char c = file_name . charAt ( i ) ; if ( Character . isDigit ( c ) ) digit_num ++ ; if ( c == '.' ) dot_num ++ ; } if ( digit_num > 3 dot_num != 1 ) return "No" ; return "Yes" ; }
int sum_squares ( int [ ] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i ++ ) { if ( i % 3 == 0 ) sum += lst [ i ] * lst [ i ] ; else if ( i % 4 == 0 ) sum += lst [ i ] * lst [ i ] * lst [ i ] ; else sum += lst [ i ] ; } return sum ; }
String words_in_sentence ( String sentence ) { StringBuilder result = new StringBuilder ( ) ; StringBuilder current = new StringBuilder ( ) ; for ( int i = 0 ; i <= sentence . length ( ) ; i ++ ) { if ( i == sentence . length ( ) || sentence . charAt ( i ) == ' ' ) { boolean is_prime = true ; int l = current . length ( ) ; if ( l < 2 ) { is_prime = false ; } for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { result . append ( current ) + " " ) ; current . clear ( ) ; } else current . add ( sentence . charAt ( i ) ) ; } } result = result . toString ( ) ; if ( result . length ( ) > 0 ) { result = result . substring ( 0 , result . length ( ) - 1 ) ; } return result . toString ( ) ; }
boolean simplify ( String x , String n ) { int a , b , c , d ; a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x . charAt ( i ) == '/' ) { a = x . substring ( 0 , i ) - '0' ; b = x . substring ( i + 1 ) - '0' ; } } for ( int i = 0 ; i < n . length ( ) ; i ++ ) { if ( n . charAt ( i ) == '/' ) { c = n . substring ( 0 , i ) - '0' ; d = n . substring ( i + 1 ) - '0' ; } } return ( a * c ) % ( b * d ) == 0 ; }
int specialFilter ( int [ ] nums ) { int count = 0 ; for ( int num : nums ) { if ( num > 10 ) { String w = Integer . toString ( num ) ; if ( w . charAt ( 0 ) % 2 == 1 && w . charAt ( w . length ( ) - 1 ) % 2 == 1 ) count ++ ; } } return count ; }
int get_max_triples ( int n ) { int [ ] arr = new int [ n ] ; for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = i * i - i + 1 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) count ++ ; } } } return count ; }
int double_the_difference ( double [ ] lst ) { int sum = 0 ; for ( double d : lst ) { int num = Math . round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) sum += num * num ; } } return sum ; }
List < Integer > compare ( List < Integer > game , List < Integer > guess ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < game . size ( ) ; i ++ ) result . add ( Math . abs ( game . get ( i ) - guess . get ( i ) ) ) ; return result ; }
String strongest_extension ( String class_name , String [ ] extensions ) { String strongest = "" ; int max = Integer . MIN_VALUE ; for ( String extension : extensions ) { int strength = 0 ; for ( char chr : extension . toCharArray ( ) ) { if ( Character . isUpperCase ( chr ) ) { strength ++ ; } if ( Character . isLowerCase ( chr ) ) { strength -- ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return class_name + "." + strongest ; }
String int_to_mini_roman ( int number ) { int num [ ] = { 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 } ; String sym [ ] = { "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" } ; int pos = 0 ; String res = "" ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res += sym [ pos ] ; number -= num [ pos ] ; } if ( number > 0 ) pos ++ ; } return res ; }
int [ ] eat ( int number , int need , int remaining ) { return need > remaining ? { number + remaining , 0 } : { number + need , remaining - need } ; }
int do_algebra ( List < Integer > ops , List < Integer > operands ) { List < Integer > nums = new ArrayList < Integer > ( ) ; List < Integer > current_ops = new ArrayList < Integer > ( ) ; for ( int i = current_ops . size ( ) - 1 ; i >= 0 ; -- i ) { if ( current_ops . get ( i ) == "**" ) { nums [ i ] = ( int ) Math . pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . remove ( i + 1 ) ; current_ops . remove ( i ) ; } } for ( int i = 0 ; i < current_ops . size ( ) ; ++ i ) { if ( current_ops . get ( i ) == '*' ) { nums [ i ] *= nums . get ( i + 1 ) ; nums . remove ( i + 1 ) ; current_ops . remove ( i ) ; } else if ( current_ops . get ( i ) == "//" ) { nums [ i ] /= nums . get ( i + 1 ) ; nums . remove ( i + 1 ) ; current_ops . remove ( i ) ; } else  { ++ i ; } } for ( int i = 0 ; i < current_ops . size ( ) ; ++ i ) { if ( current_ops . get ( i ) == "+" ) { nums [ i ] += nums . get ( i + 1 ) ; nums . remove ( i + 1 ) ; current_ops . remove ( i ) ; } else if ( current_ops . get ( i ) == '-' ) { nums [ i ] -= nums . get ( i + 1 ) ; nums . remove ( i + 1 ) ; current_ops . remove ( i ) ; } else  { ++ i ; } } return nums . get ( 0 ) ; }
List < Integer > generate_integers ( int a , int b ) { int lower = Math . max ( 2 , Math . min ( a , b ) ) ; int upper = Math . min ( 8 , Math . max ( a , b ) ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = lower ; i <= upper ; i += 2 ) { result . add ( i ) ; } return result ; }
boolean isStepNum ( int n ) { int prev_digit = - 1 ; while ( n > 0 ) { int cur_digit = n % 10 ; if ( prev_digit == - 1 ) prev_digit = cur_digit ; else { if ( Math . abs ( prev_digit - cur_digit ) != 1 ) return false ; } prev_digit = cur_digit ; n /= 10 ; } return true ; }
int num_of_ways ( int n , int k ) { int p = 1 ; if ( k % 2 == 1 ) p = - 1 ; return ( int ) ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; }
List < Integer > find_divisors ( int n ) { List < Integer > v = new ArrayList < Integer > ( ) ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) v . add ( i ) ; else { v . add ( i ) ; v . add ( n / i ) ; } } } return v ; }
int egg_drop ( int n , int k ) { if ( k == 1 k == 0 ) return k ; if ( n == 1 ) return k ; int min = Integer . MAX_VALUE ; for ( int x = 1 ; x <= k ; x ++ ) { int res = Math . max ( egg_drop ( n - 1 , x - 1 ) , egg_drop ( n , k - x ) ) ; if ( res < min ) min = res ; } return min + 1 ; }
boolean is_power_of_two ( int n ) { return ( Math . ceil ( Math . log ( n ) / Math . log ( 2 ) ) == Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ) ; }
int shortest_palindrome ( String s ) { int n = s . length ( ) ; List < String > v = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i ; int r = i ; String ans1 = "" , ans2 = "" ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans1 += s . charAt ( l ) ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans2 += s . charAt ( l ) ; l -- ; r ++ ; } v . add ( ans1 ) ; v . add ( ans2 ) ; } int ans = v . get ( 0 ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . get ( i ) != "" ) { ans = Math . min ( ans , v . get ( i ) ) ; } } return ans ; }
int minimum_adjacent_difference ( int a [ ] , int n , int k ) { int min_diff = Integer . MAX_VALUE ; for ( int i = 0 ; i <= k ; i ++ ) { int max_diff = Integer . MIN_VALUE ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { max_diff = Math . max ( max_diff , a [ p + 1 ] - a [ p ] ) ; } } min_diff = Math . min ( min_diff , max_diff ) ; } return min_diff ; }
int cal ( int a [ ] , int mid ) { int chocolate = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] >= mid ) chocolate += a [ i ] - mid ; } return chocolate ; }
boolean check ( long v , long [ ] a , long m ) { long tec = 0 , ans = 0 ; long [ ] b = new long [ a . length + 3 ] ; for ( int i = 0 ; i < a . length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { long mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; }
int largest_num ( int [ ] arr ) { int res = 0 ; Arrays . sort ( arr ) ; int l = 0 , r = arr . length - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) l ++ ; else r -- ; } return res ; }
int binary_search ( int [ ] p , int n ) { int i = 0 , j = p . length - 1 , index = - 1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
int find_min_length ( int [ ] arr ) { int index = arr . length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) index -- ; return index ; }
int min_digits ( int n , int k ) { int digits_num = ( int ) Math . floor ( Math . log10 ( n ) + 1 ) ; int temp_sum = 0 , temp = digits_num ; int result = 0 , x = 0 , v = 0 ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = n / ( ( int ) Math . pow ( 10 , temp - 1 ) ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v /= 10 ; v += 1 ; result = v * ( int ) Math . pow ( 10 , temp ) ; break ; } temp -= 1 ; } x = result - n ; return x ; } return - 1 ; }
int check_for_perfect_square ( int arr [ ] , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) return mid ; else if ( mid * mid > sum ) high = mid - 1 ; else low = mid + 1 ; } return - 1 ; }
int min_flips ( String mat [ ] , String s ) { int n = mat . length ; int m = mat [ 0 ] . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] . charAt ( j ) != s . charAt ( i + j ) - '0' ) count ++ ; } } return count ; }
List < List < Integer > > construct_tree ( int n , int [ ] [ ] edges ) { List < List < Integer > > adjl = new ArrayList < List < Integer > > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { adjl . add ( new ArrayList < Integer > ( ) ) ; } for ( int [ ] e : edges ) { int u = e [ 0 ] ; int v = e [ 1 ] ; adjl . get ( u ) . add ( v ) ; adjl . get ( v ) . add ( u ) ; } return adjl ; }
int find_sum_of_values ( int v , int parent [ ] , int values_children [ ] ) { int cur_node = v ; int sum = 0 ; while ( cur_node != - 1 ) { sum += values_children [ cur_node ] ; cur_node = parent [ cur_node ] ; } return sum ; }
long get_distinct ( long d , long count ) { long num = 0 ; count = ( long ) 1e9 ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; }
boolean is_increasing ( int [ ] arr ) { for ( int i = 0 ; i < arr . length - 1 ; i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) return false ; return true ; }
int min_adj_swaps ( int [ ] [ ] mat ) { int n = mat . length ; int [ ] cnt_zero = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 ; j -- ) { if ( mat [ i ] [ j ] != 0 ) break ; cnt_zero [ i ] ++ ; } } int cnt_swaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cnt_zero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) first ++ ; if ( first == n ) return - 1 ; while ( first > i ) { int temp = cnt_zero [ first ] ; cnt_zero [ first ] = cnt_zero [ first - 1 ] ; cnt_zero [ first - 1 ] = temp ; first -- ; cnt_swaps ++ ; } } } return cnt_swaps ; }
int solve ( Stack < Integer > values , Stack < Integer > salary , int mod ) { int ret = 1 ; int amt = 0 ; Arrays . sort ( values ) ; Arrays . sort ( salary ) ; while ( salary . size ( ) > 0 ) { while ( values . size ( ) > 0 && values . peek ( ) >= salary . peek ( ) ) { amt ++ ; values . pop ( ) ; } if ( amt == 0 ) return 0 ; ret *= amt -- ; ret %= mod ; salary . pop ( ) ; } return ret ; }
int [ ] organize_in_order ( int [ ] vec , int [ ] op , int n ) { int [ ] result = new int [ n ] ; Arrays . sort ( vec ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result [ k ] = vec [ i ++ ]  ; } else { result [ k ] = vec [ j -- ]  ; } k ++ ; } result [ n - 1 ] = vec [ i ]  ; return result ; }
int count_points ( int n , int m , int a [ ] , int b [ ] , int x , int y ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; int j = 0 , count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) break ; if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else j ++ ; } } return count ; }
boolean are_same ( int a , int b ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; return a == b ; }
int count_number_of_strings ( String s ) { int n = s . length ( ) - 1 ; int count = ( int ) Math . pow ( 2 , n ) ; return count ; }
List < Integer > prime_power ( int x ) { List < Integer > prime_pow = new ArrayList < Integer > ( ) ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } prime_pow . add ( p ) ; } } if ( x > 1 ) prime_pow . add ( x ) ; return prime_pow ; }
int is_perfect ( int n0 ) { double n = Math . sqrt ( n0 ) ; if ( Math . floor ( n ) != Math . ceil ( n ) ) { return 0 ; } return 1 ; }
int find_sum ( int l , int r ) { List < Integer > arr = new ArrayList < > ( ) ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . add ( i + x ) ; if ( i + 1 <= r ) arr . add ( i + 1 + x ) ; x *= - 1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; i ++ ) sum += arr . get ( i ) ; return sum ; }
int results ( int n , int k ) { return ( int ) Math . round ( Math . pow ( n , 1.0 / 2 ) ) ; }
List < Integer > factors ( int n ) { List < Integer > v = new ArrayList < Integer > ( ) ; v . add ( 1 ) ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . add ( i ) ; if ( n / i != i ) v . add ( n / i ) ; } } return v ; }
int smallest_num ( int n ) { float x = ( float ) Math . pow ( 10 , ( n - 1 ) / 2.0 ) ; return ( int ) ( Math . ceil ( x ) ) ; }
int smallest ( String s ) { int a [ ] = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = ( int ) s . charAt ( i ) - ( int ) '0' ; } List < Integer > b = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] % 2 != 0 ) b . add ( a [ i ] ) ; } Collections . sort ( b ) ; if ( b . size ( ) > 1 ) return b . get ( 0 ) * 10 + b . get ( 1 ) ; return - 1 ; }
List < Float > diagonals ( int a , int b , int c , int d ) { List < Float > ans = new ArrayList < Float > ( ) ; ans . add ( Float . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . add ( Float . sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; }
int find_number_of_digits ( int n , int base ) { int dig = ( int ) Math . floor ( Math . log ( n ) / Math . log ( base ) ) + 1 ; return dig ; }
double n_gon ( int n ) { double pro_angle_var ; if ( n % 4 == 0 ) { pro_angle_var = Math . pi * ( 180.0 / n ) / 180 ; } else { pro_angle_var = Math . pi * ( 180.0 / ( 2 * n ) ) / 180 ; } double neg_x = 1.0e+99 , pos_x = - 1.0e+99 , neg_y = 1.0e+99 , pos_y = - 1.0e+99 ; for ( int j = 0 ; j < n ; ++ j ) { double px = Math . cos ( 2 * Math . pi * j / n + pro_angle_var ) ; double py = Math . sin ( 2 * Math . pi * j / n + pro_angle_var ) ; neg_x = Math . min ( neg_x , px ) ; pos_x = Math . max ( pos_x , px ) ; neg_y = Math . min ( neg_y , py ) ; pos_y = Math . max ( pos_y , py ) ; } double opt2 = Math . max ( pos_x - neg_x , pos_y - neg_y ) ; return opt2 / Math . sin ( Math . pi / n ) / 2 ; }
int find_max_k ( int n ) { int p = ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ; return ( int ) Math . pow ( 2 , p ) ; }
int nth_fibo ( int n ) { double a = ( Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; double b = ( Math . pow ( - Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; double r = Math . pow ( 5 , 0.5 ) ; double ans = ( Math . pow ( a , n - Math . pow ( b , n ) ) / r ; return ( int ) ans ; }
float find_prob ( int l , int r ) { float count_of_ps = ( float ) Math . floor ( Math . sqrt ( r ) ) - ( float ) Math . ceil ( Math . sqrt ( l ) ) + 1 ; float total = r - l + 1 ; float prob = count_of_ps / total ; return prob ; }
double previous_fibonacci ( double n ) { double a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return Math . round ( a ) ; }
List < Integer > dist_prime ( int arr [ ] , HashSet < Integer > all_primes ) { List < Integer > list = new ArrayList < > ( ) ; for ( int i : all_primes ) { for ( int j : arr ) { if ( j % i == 0 ) { list . add ( i ) ; break ; } } } return list ; }
List < Integer > get_array ( int n ) { List < Integer > ans = new ArrayList < Integer > ( ) ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) ans . add ( p2 ) ; n >>= 1 ; p2 *= 2 ; } return ans ; }
int maximum_length ( int [ ] a ) { int [ ] counts = new int [ 11 ] ; int ans = 0 ; for ( int index = 0 ; index < a . length ; index ++ ) { counts [ a [ index ] ] ++ ; List < Integer > k = new ArrayList < Integer > ( ) ; for ( int i : counts ) if ( i != 0 ) k . add ( i ) ; Collections . sort ( k ) ; if ( k . size ( ) == 1 || ( k . get ( 0 ) == k . get ( k . size ( ) - 2 ) && k . get ( k . size ( ) - 1 ) - k . get ( k . size ( ) - 2 ) == 1 ) || ( k . get ( 0 ) == 1 && k . get ( 1 ) == k . get ( k . size ( ) - 1 ) ) ) ans = index ; } return ans + 1 ; }
int max_edges ( int n ) { int edges = ( int ) Math . floor ( n * n / 4 ) ; return edges ; }
int find_k ( int n , int k ) { List < Integer > a = new ArrayList < Integer > ( ) ; for ( int i = 1 ; i < n ; i ++ ) if ( i % 2 == 1 ) a . add ( i ) ; for ( int i = 1 ; i < n ; i ++ ) if ( i % 2 == 0 ) a . add ( i ) ; return a . get ( k - 1 ) ; }
boolean is_keith ( int x , int temp ) { List < Integer > terms = new ArrayList < Integer > ( ) ; int n = 0 ; while ( temp > 0 ) { terms . add ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } Collections . reverse ( terms ) ; int next_term = 0 , i = n ; while ( next_term < x ) { next_term = 0 ; for ( int j = 1 ; j <= n ; j ++ ) next_term += terms . get ( i - j ) ; terms . add ( next_term ) ; i ++ ; } return next_term == x ; }
boolean factors ( int n , int k ) { List < Integer > v = new ArrayList < Integer > ( ) ; while ( n % 2 == 0 ) { v . add ( 2 ) ; n /= 2 ; } if ( v . size ( ) >= k ) return true ; for ( int i = 3 ; i <= n ; i += 2 ) { if ( i * i > n ) break ; while ( n % i == 0 ) { n = n / i ; v . add ( i ) ; } if ( v . size ( ) >= k ) return true ; } if ( n > 2 ) v . add ( n ) ; if ( v . size ( ) >= k ) return true ; return false ; }
List < String > separate_paren_groups ( String paren_string ) { List < String > all_parens = new ArrayList < > ( ) ; List < Character > current_paren = new ArrayList < > ( ) ; int current_depth = 0 ; for ( char c : paren_string . toCharArray ( ) ) { if ( c == '(' ) { current_depth ++ ; current_paren . add ( c ) ; } else if ( c == ')' ) { current_depth -- ; current_paren . add ( c ) ; if ( current_depth == 0 ) { all_parens . add ( current_paren ) ; current_paren . clear ( ) ; } } } return all_parens ; }
List < Integer > parse_nested_parens ( String paren_string ) { List < Integer > all_levels = new ArrayList < Integer > ( ) ; int level = 0 ; int max_level = 0 ; for ( int i = 0 ; i < paren_string . length ( ) ; i ++ ) { char chr = paren_string . charAt ( i ) ; if ( chr == '(' ) { level ++ ; if ( level > max_level ) { max_level = level ; } } if ( chr == ')' ) { level -- ; if ( level == 0 ) { all_levels . add ( max_level ) ; max_level = 0 ; } } } return all_levels ; }
List < String > filter_by_substring ( List < String > strings , String substring ) { List < String > result = new ArrayList < String > ( ) ; for ( String s : strings ) { if ( substring . equals ( s ) ) { result . add ( s ) ; } } return result ; }
List < Integer > rolling_max ( int [ ] numbers ) { int running_max = 0 ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { if ( numbers [ i ] > running_max ) running_max = numbers [ i ] ; result . add ( running_max ) ; } return result ; }
String make_palindrome ( String s ) { if ( s . length ( ) == 0 ) return "" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String r_str = s . substring ( i ) ; if ( r_str . equals ( r_str . reverse ( ) ) ) { String n_str = s . substring ( 0 , i ) ; String n2_str = n_str . substring ( 0 , i ) ; return s + n2_str ; } } return s . substring ( 0 , s . length ( ) - 2 ) + s . substring ( s . length ( ) - 1 ) ; }
String string_xor ( String a , String b ) { String result = "" ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) { result += "0" ; } else { result += "1" ; } } return result ; }
String longest ( String [ ] strings ) { if ( strings . length == 0 ) return "" ; int max_len = Math . max ( strings [ 0 ] . length ( ) , strings [ 1 ] . length ( ) ) ; for ( String s : strings ) { if ( s . length ( ) == max_len ) return s ; } return "" ; }
String string_sequence ( int n ) { String s = "" ; for ( int i = 0 ; i < n ; i ++ ) { s += ( String . valueOf ( i ) ) ; s += ( " " ) ; } s += ( String . valueOf ( n ) ) ; return s ; }
int count_distinct_characters ( String s ) { Set < Character > distinct = new HashSet < Character > ( ) ; for ( char c : s . toCharArray ( ) ) { distinct . add ( c ) ; } return distinct . size ( ) ; }
int how_many_times ( String s , String sub ) { int times = 0 ; for ( int i = 0 ; i <= s . length ( ) - sub . length ( ) ; i ++ ) if ( s . substring ( i , i + sub . length ( ) ) . equals ( sub ) ) times ++ ; return times ; }
String sort_numbers ( String numbers ) { Map < String , Integer > to_num = new HashMap < > ( ) ; "one" = 1 ; "two" = 2 ; "three" = 3 ; "four" = 4 ; "five" = 5 ; "six" : 6 , "seven" : 7 , "eight" : 8 , "nine" : 9 } ; Map < String , String > from_num = new HashMap < > ( ) ; from_num . put ( 0 , "one" ) ; 2 = "two" ; 3 = "three" ; 4 = "four" ; 5 = "five" ; 6 : "six" ; 7 : "seven" , 8 : "eight" , 9 : "nine" ) ; List < String > ints = new ArrayList < > ( ) ; List < String > current = new ArrayList < > ( ) ; for ( int i = 0 ; i <= numbers . length ( ) ; i ++ ) { if ( i == numbers . length ( ) numbers . charAt ( i ) == ' ' ) { if ( to_num . containsKey ( current ) ) { ints . add ( to_num . get ( current ) ) ; current . clear ( ) ; } } else { current . add ( numbers . charAt ( i ) ) ; } } Collections . sort ( ints ) ; List < String > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { result . add ( from_num . get ( ints . get ( i ) ) ) ; if ( i != ints . size ( ) - 1 ) result . add ( " " ) ; } return result . toString ( ) ; }
List < Integer > find_closest_elements ( List < Integer > numbers ) { List < Integer > closest_pair = new ArrayList < Integer > ( ) ; int distance = Math . abs ( closest_pair . get ( 0 ) - closest_pair . get ( 1 ) ) ; for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) for ( int j = i + 1 ; j < numbers . size ( ) ; j ++ ) { if ( Math . abs ( numbers . get ( i ) - numbers . get ( j ) ) < distance ) { closest_pair . set ( 0 , numbers . get ( i ) ) ; closest_pair . set ( 1 , numbers . get ( j ) ) ; distance = Math . abs ( numbers . get ( i ) - numbers . get ( j ) ) ; } } Collections . sort ( closest_pair ) ; return closest_pair ; }
List < Integer > rescale_to_unit ( int [ ] numbers ) { int min_num = Arrays . stream ( numbers ) . min ( ) . getAsInt ( ) ; int max_num = Arrays . stream ( numbers ) . max ( ) . getAsInt ( ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int n : numbers ) { result . add ( ( n - min_num ) / ( max_num - min_num ) ) ; } return result ; }
List < Integer > filter_integers ( List < Integer > values ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int e : values ) if ( e == Integer . parseInt ) result . add ( e ) ; return result ; }
List < Integer > remove_duplicates ( int [ ] numbers ) { HashMap < Integer , Integer > counter = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { if ( counter . containsKey ( numbers [ i ] ) ) counter . put ( numbers [ i ] , counter . get ( numbers [ i ] ) + 1 ) ; else counter . put ( numbers [ i ] , 1 ) ; } List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { if ( counter . get ( numbers [ i ] ) == 1 ) { result . add ( numbers [ i ] ) ; } } return result ; }
String flip_case ( String s ) { String result = "" ; for ( char c : s . toCharArray ( ) ) { if ( Character . isLowerCase ( c ) ) result += Character . toUpperCase ( c ) ; else result += Character . toLowerCase ( c ) ; } return result ; }
List < String > filter_by_prefix ( List < String > strings , String prefix ) { List < String > result = new ArrayList < String > ( ) ; for ( int i = 0 ; i < strings . size ( ) ; i ++ ) if ( strings . get ( i ) . startsWith ( prefix ) ) result . add ( strings . get ( i ) ) ; return result ; }
int find_zero ( int [ ] xs ) { int ans = 0 ; int value = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) value += Math . pow ( xs [ i ] , i ) ; while ( Math . abs ( value ) > eps ) { int driv = 0 ; for ( int i = 1 ; i < xs . length ; i ++ ) driv += xs [ i ] * Math . pow ( xs [ i - 1 ] , i ) * i ; ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) value += xs [ i ] * Math . pow ( xs [ i ] , i ) ; } return ans ; }
List < Integer > sort_third ( List < Integer > l ) { List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i += 3 ) { thirds . add ( l . get ( i ) ) ; } Collections . sort ( thirds ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 3 == 0 ) { result . add ( thirds . get ( i / 3 ) ) ; } else { result . add ( l . get ( i ) ) ; } } return result ; }
HashSet < Integer > unique ( String l ) { HashSet < Integer > result = new HashSet < > ( ) ; result . add ( l ) ; Collections . sort ( result ) ; return result ; }
int max_element ( int [ ] l ) { return Arrays . stream ( l ) . max ( ) . getAsInt ( ) ; }
boolean triples_sum_to_zero ( int [ ] l ) { for ( int i = 0 ; i < l . length ; i ++ ) { for ( int j = i + 1 ; j < l . length ; j ++ ) { for ( int k = j + 1 ; k < l . length ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) return true ; } } } return false ; }
int fib4 ( int n ) { int [ ] results = new int [ n + 1 ] ; for ( int i = 4 ; i <= n ; i ++ ) results [ i ] = results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ; return results [ n ] ; }
boolean is_palindrome ( String text ) { String pr = text . substring ( 0 , text . length ( ) - 1 ) ; return ( pr . compareTo ( text ) == 0 ) ; }
String remove_vowels ( String text ) { String result = "" ; String vowels = "aeiou" ; for ( char ch : text . toCharArray ( ) ) { if ( ! vowels . contains ( ch . toLowerCase ( ) ) ) { result . add ( ch ) ; } } return result ; }
boolean same_chars ( String s0 , String s1 ) { Set < Character > set0 = new HashSet < Character > ( ) ; for ( char c : s0 . toCharArray ( ) ) set0 . add ( c ) ; Set < Character > set1 = new HashSet < Character > ( ) ; for ( char c : s1 . toCharArray ( ) ) set1 . add ( c ) ; return set0 . equals ( set1 ) ; }
List < Integer > common ( List < Integer > l1 , List < Integer > l2 ) { HashSet < Integer > us = new HashSet < Integer > ( ) ; for ( int e1 : l1 ) { for ( int e2 : l2 ) { if ( e1 == e2 ) us . add ( e1 ) ; } } List < Integer > ret = new ArrayList < Integer > ( ) ; Collections . sort ( ret ) ; return ret ; }
boolean correct_bracketing ( String [ ] brackets ) { int depth = 0 ; for ( int i = 0 ; i < brackets . length ; i ++ ) { char b = brackets [ i ] ; if ( b == '(' ) depth += 1 ; else depth -= 1 ; if ( depth < 0 ) return false ; } return depth == 0 ; }
String circular_shift ( int x , int shift ) { String s = String . valueOf ( x ) ; if ( shift > s . length ( ) ) { return s . substring ( 0 , s . length ( ) - shift ) ; } return s . substring ( s . length ( ) - shift , s . length ( ) ) + s . substring ( 0 , s . length ( ) - shift ) ; }
int search ( List < Integer > lst ) { HashMap < Integer , Integer > counter = new HashMap < > ( ) ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { if ( counter . containsKey ( lst . get ( i ) ) ) counter . put ( lst . get ( i ) , counter . get ( lst . get ( i ) ) + 1 ) ; else counter . put ( lst . get ( i ) , 1 ) ; } int ans = - 1 ; for ( Map . Entry < Integer , Integer > x : counter . entrySet ( ) ) { if ( x . getValue ( ) >= x . getKey ( ) ) ans = x . getKey ( ) ; } return ans ; }
int smallest_change ( int [ ] arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . length / 2 ; i ++ ) { if ( arr [ i ] != arr [ arr . length - i - 1 ] ) ans ++ ; } return ans ; }
String total_match ( String lst1 , String lst2 ) { int sum1 = 0 ; for ( String str : lst1 ) { sum1 += str . length ( ) ; } int sum2 = 0 ; for ( String str : lst2 ) { sum2 += str . length ( ) ; } return ( sum1 > sum2 ) ? lst2 : lst1 ; }
boolean is_happy ( String s ) { if ( s . length ( ) < 3 ) return false ; for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) || s . charAt ( i ) == s . charAt ( i + 2 ) ) return false ; } return true ; }
List < String > numerical_letter_grade ( List < Integer > grades ) { List < String > letter_grade = new ArrayList < String > ( ) ; for ( int i = 0 ; i < grades . size ( ) ; i ++ ) { if ( grades . get ( i ) == 4.0 ) letter_grade . add ( "A+" ) ; else if ( gpa > 3.7 ) letter_grade . add ( "A" ) ; else if ( gpa > 3.3 ) letter_grade . add ( "A-" ) ; else if ( gpa > 3.0 ) letter_grade . add ( "B+" ) ; else if ( gpa > 2.7 ) letter_grade . add ( "B" ) ; else if ( gpa > 2.3 ) letter_grade . add ( "B-" ) ; else if ( gpa > 2.0 ) letter_grade . add ( "C+" ) ; else if ( gpa > 1.7 ) letter_grade . add ( "C" ) ; else if ( gpa > 1.3 ) letter_grade . add ( "C-" ) ; else if ( gpa > 1.0 ) letter_grade . add ( "D+" ) ; else if ( gpa > 0.7 ) letter_grade . add ( "D" ) ; else if ( gpa > 0.0 ) letter_grade . add ( "D-" ) ; else letter_grade . add ( "E" ) ; } return letter_grade ; }
String solve ( int n ) { List < String > bi_str = new ArrayList < > ( ) ; int sum = 0 ; for ( char c : n . toCharArray ( ) ) { sum += ( int ) c - '0' ; } while ( sum > 0 ) { bi_str . add ( 0 ) ; sum /= 2 ; } return bi_str . toString ( ) ; }
String anti_shuffle ( String s ) { StringBuilder ret = new StringBuilder ( ) ; StringBuilder current = new StringBuilder ( ) ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { current . sort ( ) ; if ( ret != null ) ret . append ( " " ) ; ret . append ( current ) ; current . clear ( ) ; } else current . append ( s . charAt ( i ) ) ; } return ret . toString ( ) ; }
void sort_array ( Integer [ ] array ) { if ( array . length == 0 ) return ; if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) Arrays . sort ( array ) ; else Arrays . sort ( array , Collections . reverseOrder ( ) ) ; }
String encrypt ( String s ) { List < Character > ans = new ArrayList < Character > ( ) ; for ( char c : s . toCharArray ( ) ) { if ( Character . isUpperCase ( c ) ) { ans . add ( ( char ) ( "a" + ( c - "a" + 4 ) % 26 ) ) ; } else { ans . add ( c ) ; } } return ans . toString ( ) ; }
int is_bored ( String s ) { boolean is_start = true ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '.' s . charAt ( i ) == '?' s . charAt ( i ) == "!" ) is_start = true ; else if ( is_start ) { if ( s . charAt ( i ) == ' ' ) continue ; if ( s . substring ( i , i + 2 ) == "I " ) sum += 1 ; is_start = false ; } } return sum ; }
String encode ( String message ) { String vowels = "aeiouAEIOU" ; String ret = "" ; for ( char c : message . toCharArray ( ) ) { if ( Character . isUpperCase ( c ) ) { c = Character . toLowerCase ( c ) ; if ( vowels . contains ( c ) ) { c = ( char ) ( "a" + ( c - "a" + 2 ) % 26 ) ; } } else if ( Character . isLowerCase ( c ) ) { c = Character . toUpperCase ( c ) ; if ( vowels . contains ( c ) ) { c = ( char ) ( "A" + ( c - "A" + 2 ) % 26 ) ; } } ret . add ( c ) ; } return ret ; }
int skjkasdkd ( int [ ] lst ) { int largest = 0 ; for ( int n : lst ) { if ( n > largest ) { boolean prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) largest = n ; } } int sum = 0 ; String s = Integer . toString ( largest ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum += s . charAt ( i ) - '0' ; } return sum ; }
boolean check_dict_case ( HashMap < String , Character > dict ) { if ( dict . isEmpty ( ) ) return false ; int is_lower = 0 ; int is_upper = 0 ; for ( Map . Entry < String , Character > c : dict . entrySet ( ) ) { if ( Character . isLowerCase ( c . getKey ( ) ) ) is_lower = 1 ; else if ( Character . isUpperCase ( c . getValue ( ) ) ) is_upper = 1 ; else return false ; } return is_lower + is_upper == 1 ; }
int multiply ( int a , int b ) { return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ; }
int count_upper ( String s ) { String u_vowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i += 2 ) { if ( u_vowel . indexOf ( s . charAt ( i ) ) != - 1 ) count ++ ; } return count ; }
List < String > by_length ( List < String > arr ) { Map < String , String > num_to = { 1 : "One" , 2 : "Two" , 3 : "Three" , 4 : "Four" , 5 : "Five" , 6 : "Six" , 7 : "Seven" , 8 : "Eight" , 9 : "Nine" } ; List < String > sorted_arr = new ArrayList < String > ( arr ) ; Collections . sort ( sorted_arr , Collections . reverseOrder ( ) ) ; List < String > new_arr = new ArrayList < String > ( ) ; for ( int i = 0 ; i < sorted_arr . size ( ) ; i ++ ) if ( sorted_arr . get ( i ) >= 1 && sorted_arr . get ( i ) <= 9 ) new_arr . add ( num_to . get ( sorted_arr . get ( i ) ) ; return new_arr ; }
List < Integer > f ( int n ) { int sum = 0 , prod = 1 ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) result . add ( prod ) ; else result . add ( sum ) ; } return result ; }
void even_odd_palindrome ( int n ) { int even_count = 0 , odd_count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { String s = String . valueOf ( i ) ; String r_str = String . valueOf ( i ) ; r_str = r_str . substring ( 0 , i ) ; if ( s . equals ( r_str ) ) { if ( i % 2 == 1 ) odd_count ++ ; else even_count ++ ; } } }
HashMap < Character , Integer > histogram ( String test ) { HashMap < Character , Integer > count = new HashMap < > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . length ( ) ; i ++ ) { if ( test . charAt ( i ) != ' ' ) { if ( count . containsKey ( test . charAt ( i ) ) ) count . put ( test . charAt ( i ) , count . get ( test . charAt ( i ) ) + 1 ) ; else count . put ( test . charAt ( i ) , 1 ) ; if ( count . get ( test . charAt ( i ) ) > max ) max = count . get ( test . charAt ( i ) ) ; } } HashMap < Character , Integer > result = new HashMap < > ( ) ; for ( Map . Entry < Character , Integer > c : count . entrySet ( ) ) { if ( c . getValue ( ) == max ) result . put ( c . getKey ( ) , c . getValue ( ) ) ; } return result ; }
void reverse_delete ( String s , HashMap < Character , Integer > c ) { List < Character > ret = new ArrayList < Character > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( ! c . containsKey ( ch ) ) ret . add ( ch ) ; } String flag = "False" ; if ( ret . toString ( ) . equals ( ret . toString ( ) ) ) { flag = "True" ; } System . out . print ( ret . toString ( ) ) ; System . out . print ( flag ) ; }
void sort_array ( int [ ] arr ) { List < Integer > bin = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { int b = 0 , n = Math . abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . add ( b ) ; } for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 1 ; j < arr . length ; j ++ ) { if ( bin . get ( j ) < bin . get ( j - 1 ) || ( bin . get ( j ) == bin . get ( j - 1 ) && arr [ j ] < arr [ j - 1 ] ) ) { swap ( bin , j , bin . get ( j - 1 ) ) ; swap ( arr , j , bin . get ( j - 1 ) ) ; } } } }
char get_closest_vowel ( String word ) { String vowels = "AEIOUaeiou" ; for ( int i = word . length ( ) - 2 ; i > 0 ; i -- ) { if ( vowels . indexOf ( word . charAt ( i ) ) > - 1 && word . charAt ( i + 1 ) != vowels . indexOf ( word . charAt ( i - 1 ) ) ) return word . charAt ( i ) ; } return "" ; }
String match_parens ( List < String > lst ) { List < String > str = new ArrayList < String > ( ) ; str . add ( lst . get ( 0 ) + lst . get ( 1 ) ) ; str . add ( lst . get ( 1 ) + lst . get ( 0 ) ) ; for ( String l : str ) { int count = 0 ; for ( char c : l . toCharArray ( ) ) { if ( c == '(' ) count ++ ; if ( c == ')' ) count -- ; if ( count < 0 ) break ; } if ( count == 0 ) { return "Yes" ; } } return "No" ; }
int maximum ( int [ ] arr , int k ) { if ( k == 0 ) return 0 ; Arrays . sort ( arr ) ; return arr . clone ( ) ; }
boolean valid_date ( String date ) { if ( date . length ( ) != 10 ) return false ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 i == 5 ) { if ( date . charAt ( i ) != '-' ) return false ; } else if ( ! Character . isDigit ( date . charAt ( i ) ) ) return false ; } int month = Integer . parseInt ( date . substring ( 0 , 2 ) ) ; int day = Integer . parseInt ( date . substring ( 3 , 5 ) ) ; int year = Integer . parseInt ( date . substring ( 6 , 10 ) ) ; if ( month < 1 month > 12 ) return false ; if ( day < 1 day > 31 ) return false ; if ( day == 31 && ( month == 4 month == 6 month == 9 month == 11 month == 2 ) ) return false ; if ( day == 30 && month == 2 ) return false ; return true ; }
String [ ] split_words ( String txt ) { String current = "" ; String result = "" ; if ( " " . equals ( txt ) ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) txt . charAt ( i ) == ' ' ) { if ( current . length ( ) > 0 ) { result . add ( current ) ; current . clear ( ) ; } } else { current . add ( txt . charAt ( i ) ) ; } } return result ; } if ( "," . equals ( txt ) ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) txt . charAt ( i ) == ',' ) { if ( current . length ( ) > 0 ) { result . add ( current ) ; current . clear ( ) ; } } else { current . add ( txt . charAt ( i ) ) ; } } return result ; } int num = 0 ; for ( char c : txt . toCharArray ( ) ) { if ( Character . isLowerCase ( c ) && c % 2 == 0 ) num ++ ; } return new String [ num ] ; }
List < Integer > tri ( int n ) { if ( n == 0 ) return new ArrayList < Integer > ( ) ; List < Integer > tris = new ArrayList < Integer > ( ) ; tris . add ( 1 ) ; tris . add ( 3 ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) tris . add ( i / 2 + 1 ) ; else tris . add ( tris . get ( i - 1 ) + tris . get ( i - 2 ) + ( i + 3 ) / 2 ) ; } return tris ; }
boolean check_if_last_char_is_a_letter ( String txt ) { if ( txt . length ( ) == 0 ) return false ; return txt . charAt ( txt . length ( ) - 1 ) == 'a' && ( txt . length ( ) == 1 || ! txt . charAt ( txt . length ( ) - 2 ) == 'a' ) ; }
void order_by_points ( int [ ] nums ) { int [ ] result = new int [ 10000 ] ; for ( int i = 0 ; i < 100005 ; i ++ ) { String w = Integer . toString ( Math . abs ( num ) ) ; int sum = 0 ; for ( char c : w . toCharArray ( ) ) { sum += c - '0' ; } if ( num < 0 ) sum -= 2 * ( w . charAt ( 0 ) - '0' ) ; result [ result . length ] = sum ; } for ( int i = 0 ; i < nums . length ; i ++ ) { for ( int j = 1 ; j < nums . length ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { int temp = result [ j ] ; result [ j ] = result [ j - 1 ] ; result [ j - 1 ] = temp ; nums [ j ] = nums [ j - 1 ] ; nums [ j - 1 ] = temp ; } } } }
List < String > bf ( String planet1 , String planet2 ) { List < String > planets = { "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" } ; int idx1 = ( planets . contains ( planet1 ) ) ? planets . indexOf ( planet1 ) : - 1 ; int idx2 = ( planets . contains ( planet2 ) ) ? planets . indexOf ( planet2 ) : - 1 ; if ( idx1 == - 1 idx2 == - 1 idx1 == idx2 ) return new ArrayList < String > ( ) ; return ( idx1 > idx2 ) ? planets . substring ( idx2 + 1 , idx1 ) : planets . substring ( idx1 + 1 , idx2 ) ; }
List < String > sorted_list_sum ( List < String > lst ) { List < String > result = new ArrayList < > ( ) ; for ( int i : lst ) { if ( i . length ( ) % 2 == 0 ) { result . add ( i ) ; } } Collections . sort ( result ) ; return result ; }
boolean cycpattern_check ( HashSet < String > a , String b ) { for ( int i = 0 ; i < b . length ( ) ; i ++ ) { String rotate = b . substring ( i ) + b . substring ( 0 , i ) ; if ( a . contains ( rotate ) ) { return true ; } } return false ; }
void even_odd_count ( int num ) { int even_count = 0 , odd_count = 0 ; for ( int i = 0 ; i < Math . abs ( num ) ; i ++ ) { if ( Math . floor ( i ) % 2 == 0 ) even_count ++ ; else odd_count ++ ; } System . out . print ( even_count + " " + odd_count ) ; }
String find_max ( String [ ] words ) { String max = "" ; int max_length = 0 ; for ( String word : words ) { Set < String > unique = new HashSet < > ( ) ; for ( String w : word . toCharArray ( ) ) { if ( ! unique . contains ( w ) ) unique . add ( w ) ; if ( unique . size ( ) > max_length || ( unique . size ( ) == max_length && word < max ) ) { max = word ; max_length = unique . size ( ) ; } } } return max ; }
String solve ( String s ) { boolean no_letter = true ; String result = "" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ch = s . charAt ( i ) ; if ( Character . isUpperCase ( ch ) ) { ch = ch . toLowerCase ( ) ; no_letter = false ; } else if ( Character . isLowerCase ( ch ) ) { ch = ch . toUpperCase ( ) ; no_letter = false ; } result . add ( ch ) ; } if ( no_letter ) { Collections . reverse ( result ) ; } else { return result ; } }
int most_frequent ( int arr [ ] , int n ) { HashMap < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) { hp . put ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . put ( arr [ i ] , 1 ) ; } } int max_count = 0 , res = - 1 ; for ( Map . Entry < Integer , Integer > x : hp . entrySet ( ) ) { if ( max_count < x . getValue ( ) ) { res = x . getKey ( ) ; max_count = x . getValue ( ) ; } } return res ; }
int find ( int a [ ] , int b [ ] , int k , int n1 , int n2 ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { s . add ( b [ i ] ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( ! s . contains ( a [ i ] ) ) missing ++ ; if ( missing == k ) return a [ i ] ; } return - 1 ; }
int solve_query ( int start , int end , int arr [ ] ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = start ; i <= end ; i ++ ) mp . put ( arr [ i ] , mp . get ( arr [ i ] ) == null ? 1 : mp . get ( arr [ i ] ) + 1 ) ; int count = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) if ( entry . getKey ( ) == entry . getValue ( ) ) count ++ ; return count ; }
int segregate ( int arr [ ] , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j ++ ; } } return j ; }
int count_triplets ( int a [ ] , int n ) { HashSet < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) s . add ( a [ i ] ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( s . contains ( xr ) && xr != a [ i ] && xr != a [ j ] ) count ++ ; } } return count / 3 ; }
int least_frequent ( int arr [ ] , int n ) { HashMap < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) { hp . put ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . put ( arr [ i ] , 1 ) ; } } int min_count = n + 1 , res = - 1 ; for ( Map . Entry < Integer , Integer > x : hp . entrySet ( ) ) { if ( min_count >= x . getValue ( ) ) { res = x . getKey ( ) ; min_count = x . getValue ( ) ; } } return res ; }
int find_permutations ( int [ ] arr ) { int cnt = 0 ; int max_ind = - 1 , min_ind = 10000000 ; int n = arr . length ; HashMap < Integer , Integer > index_of = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { index_of . put ( arr [ i ] , i + 1 ) ; } for ( int i = 1 ; i <= n ; i ++ ) { max_ind = Math . max ( max_ind , index_of . getOrDefault ( i , 0 ) ) ; min_ind = Math . min ( min_ind , index_of . getOrDefault ( i , 0 ) ) ; if ( max_ind - min_ind + 1 == i ) { cnt ++ ; } } return cnt ; }
int form_quadruplets ( Integer arr [ ] , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; Arrays . sort ( arr , Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; }
String lexicographically_maximum ( String s , int n ) { HashMap < Character , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . containsKey ( s . charAt ( i ) ) ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; } else { m . put ( s . charAt ( i ) , 1 ) ; } } List < Character > v = new ArrayList < Character > ( ) ; for ( char i = 'a' ; i < ( char ) ( "a" + Math . min ( n , 25 ) ) ; ++ i ) { if ( m . containsKey ( i ) == false ) { v . add ( i ) ; } } int j = v . size ( ) - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( s . charAt ( i ) >= "a" + Math . min ( n , 25 ) || ( m . containsKey ( s . charAt ( i ) ) && m . get ( s . charAt ( i ) ) > 1 ) ) { if ( v . get ( j ) < s . charAt ( i ) ) continue ; m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) - 1 ) ; s = s . substring ( 0 , i ) + v . get ( j ) + s . substring ( i + 1 ) ; j -- ; } if ( j < 0 ) break ; } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) break ; if ( s . charAt ( i ) >= "a" + Math . min ( n , 25 ) || m . containsKey ( s . charAt ( i ) ) && m . get ( s . charAt ( i ) ) > 1 ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) - 1 ) ; s = s . substring ( 0 , i ) + v . get ( l ) + s . substring ( i + 1 ) ; l ++ ; } } return s ; }
int no_of_valid_kbers ( int k , int arr [ ] ) { HashSet < Integer > set = new HashSet < > ( ) ; while ( k != 0 ) { set . add ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { int no = arr [ i ] ; boolean flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( ! set . contains ( digit ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag == true ) { count ++ ; } } return count ; }
int del_cost ( String s , int [ ] cost ) { int ans = 0 ; HashMap < Character , Integer > for_max = new HashMap < > ( ) ; HashMap < Character , Integer > for_tot = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! for_max . containsKey ( s . charAt ( i ) ) ) { for_max . put ( s . charAt ( i ) , cost [ i ] ) ; } else { for_max . put ( s . charAt ( i ) , Math . max ( cost [ i ] , for_max . get ( s . charAt ( i ) ) ) ) ; } if ( ! for_tot . containsKey ( s . charAt ( i ) ) ) { for_tot . put ( s . charAt ( i ) , cost [ i ] ) ; } else { for_tot . put ( s . charAt ( i ) , for_tot . get ( s . charAt ( i ) ) + cost [ i ] ) ; } } for ( Map . Entry < Character , Integer > i : for_max . entrySet ( ) ) { ans += for_tot . get ( i . getKey ( ) ) - i . getValue ( ) ; } return ans ; }
void replace_duplicates ( String [ ] names ) { HashMap < String , Integer > hash = new HashMap < > ( ) ; for ( int i = 0 ; i < names . length ; i ++ ) { if ( ! hash . containsKey ( names [ i ] ) ) hash . put ( names [ i ] , 1 ) ; else { int count = hash . get ( names [ i ] ) ; hash . put ( names [ i ] , hash . get ( names [ i ] ) + 1 ) ; names [ i ] += Integer . toString ( count ) ; } } }
void minmax_numbers ( int [ ] [ ] matrix , HashSet < Integer > res ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < matrix . length ; i ++ ) { int min_r = Integer . MAX_VALUE ; for ( int j = 0 ; j < matrix [ i ] . length ; j ++ ) { min_r = Math . min ( min_r , matrix [ i ] [ j ] ) ; } s . add ( min_r ) ; } for ( int j = 0 ; j < matrix [ 0 ] . length ; j ++ ) { int max_c = Integer . MIN_VALUE ; for ( int i = 0 ; i < matrix . length ; i ++ ) { max_c = Math . max ( max_c , matrix [ i ] [ j ] ) ; } if ( s . contains ( max_c ) ) { res . add ( max_c ) ; } } }
int length_of_longest_ap ( int a [ ] , int n ) { Map < Integer , Map < Integer , Integer > > dp = new HashMap < Integer , Map < Integer , Integer > > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = i + 1 ; j < n ; ++ j ) { int d = a [ j ] - a [ i ] ; Map < Integer , Integer > temp ; if ( dp . containsKey ( d ) ) { temp = dp . get ( d ) ; if ( temp . containsKey ( i ) ) temp . put ( j , temp . get ( i ) + 1 ) ; else temp . put ( j , 2 ) ; } else { temp = new HashMap < Integer , Integer > ( ) ; temp . put ( j , 2 ) ; } res = Math . max ( res , temp . get ( j ) ) ; } } return res ; }
char find_kth_char ( int n , int k ) { String prev = "A" ; String cur = "" ; if ( n == 1 ) { return "A" ; } for ( int j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . length ( ) ; i ++ ) { if ( prev . charAt ( i ) == "A" ) { prev = prev . substring ( 0 , i ) + "B" + prev . substring ( i + 1 ) ; } else { prev = prev . substring ( 0 , i ) + "A" + prev . substring ( i + 1 ) ; } } prev = prev . substring ( 0 , i ) ; cur += prev ; prev = cur ; } return cur . charAt ( k ) ; }
int find_kth_largest ( String s , int k ) { Arrays . sort ( s . toCharArray ( ) ) ; return s . charAt ( k - 1 ) ; }
int sub_arraylen ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; mp . put ( arr [ 0 ] , 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp . put ( arr [ i ] , i ) ; } int len = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) continue ; else { int x = arr [ i ] - k ; if ( x == 0 ) len = Math . min ( len , i ) ; if ( ! mp . containsKey ( x ) ) continue ; else { len = Math . min ( len , i - mp . get ( x ) ) ; } } } return len ; }
int find_max_len ( int [ ] a , int k ) { int n = a . length ; Arrays . sort ( a ) ; boolean [ ] vis = new boolean [ n ] ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a [ i ] , i ) ; } int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( ! vis [ i ] ) { int check = a [ i ] * k ; if ( mp . containsKey ( check ) ) { c ++ ; vis [ mp . get ( check ) ] = true ; } } } return n - c ; }
List < Integer > min_distance_points ( int a [ ] , int k , int n ) { HashMap < Integer , Boolean > m = new HashMap < Integer , Boolean > ( ) ; List < Integer > q = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . put ( a [ i ] , true ) ; q . add ( a [ i ] ) ; } List < Integer > ans = new ArrayList < Integer > ( ) ; while ( k > 0 ) { int x = q . get ( 0 ) ; q . remove ( ) ; if ( ! m . containsKey ( x - 1 ) && k > 0 ) { m . put ( x - 1 , true ) ; q . add ( x - 1 ) ; ans . add ( x - 1 ) ; k -- ; } if ( ! m . containsKey ( x + 1 ) && k > 0 ) { m . put ( x + 1 , true ) ; q . add ( x + 1 ) ; ans . add ( x + 1 ) ; k -- ; } } return ans ; }
boolean isValidLen ( String s , int len , int k ) { int n = s . length ( ) ; Map < Character , Integer > mp = new HashMap < > ( ) ; int right = 0 ; while ( right < len ) { mp . put ( s . charAt ( right ) , mp . getOrDefault ( s . charAt ( right ) , 0 ) + 1 ) ; right ++ ; } if ( mp . size ( ) <= k ) return true ; while ( right < n ) { mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; } mp . put ( s . charAt ( right - len ) , mp . get ( s . charAt ( right - len ) ) - 1 ) ; if ( mp . get ( s . charAt ( right - len ) ) == 0 ) mp . remove ( s . charAt ( right - len ) ) ; if ( mp . size ( ) <= k ) return true ; right ++ ; } return mp . size ( ) <= k ; }
int partition ( int [ ] arr , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } int temp = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ high ] ; arr [ high ] = temp ; return i + 1 ; }
int str_score ( String strs [ ] , String s , int n ) { HashMap < String , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) m . put ( strs [ i ] , i + 1 ) ; if ( ! m . containsKey ( s ) ) return 0 ; int score = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) score += s . charAt ( i ) - 'a' + 1 ; score = score * m . get ( s ) ; return score ; }
List < Integer > count_ele ( Stack < Integer > s , int [ ] a , int n ) { HashMap < Integer , Boolean > mp = new HashMap < > ( ) ; List < Integer > ans = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int num = a [ i ] ; if ( mp . containsKey ( num ) ) { ans . add ( 0 ) ; } else { int cnt = 0 ; while ( s . peek ( ) != num ) { mp . put ( s . peek ( ) , true ) ; s . pop ( ) ; cnt ++ ; } s . pop ( ) ; cnt ++ ; } ans . add ( cnt ) ; } } return ans ; }
int maxDistinctChar ( char [ ] s , int n , int k ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( s [ i ] ) ) { freq . put ( s [ i ] , freq . get ( s [ i ] ) + 1 ) ; } else { freq . put ( s [ i ] , 1 ) ; } } List < Integer > v = new ArrayList < Integer > ( ) ; for ( Map . Entry < Integer , Integer > x : freq . entrySet ( ) ) { v . add ( x . getValue ( ) ) ; } Collections . sort ( v ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) - 1 , k ) ; v . set ( i , v . get ( i ) - mn ) ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) , k ) ; v . set ( i , v . get ( i ) - mn ) ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) if ( v . get ( i ) == 1 ) res ++ ; return res ; }
int find_kth ( int arr [ ] , int n , int k ) { HashSet < Integer > missing = new HashSet < > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . add ( arr [ i ] ) ; } int max_m = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int min_m = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; for ( int i = min_m + 1 ; i < max_m ; i ++ ) { if ( ! missing . contains ( i ) ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; }
boolean almost_sort ( int a [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { int temp = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = temp ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) if ( a [ i ] > a [ i + 1 ] ) return false ; return true ; }
int maximum_sum ( String s , int n , int k ) { int sum = 0 ; Integer freq [ ] = new Integer [ 256 ] ; Arrays . fill ( freq , 0 ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ ( int ) s . charAt ( i ) ] ++ ; } Arrays . sort ( freq , Collections . reverseOrder ( ) ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; }
int find_min_operations ( int arr [ ] , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { Map < Integer , Integer > freq = new HashMap < > ( ) ; for ( int j = i ; j < n ; j += k ) freq . put ( arr [ j ] , freq . getOrDefault ( arr [ j ] , 0 ) + 1 ) ; int max1 = 0 , num = - 1 ; for ( Map . Entry < Integer , Integer > x : freq . entrySet ( ) ) { if ( x . getValue ( ) > max1 ) { max1 = x . getValue ( ) ; num = x . getKey ( ) ; } } for ( Map . Entry < Integer , Integer > x : freq . entrySet ( ) ) { if ( x . getKey ( ) != num ) operations += x . getValue ( ) ; } } return operations ; }
List < String > sub_string ( String s , int n ) { List < String > v = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int len = 1 ; len <= n - i ; len ++ ) { String find = s . substring ( i , i + len ) ; v . add ( find ) ; } } return v ; }
boolean check_unique_frequency ( int arr [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( arr [ i ] ) ) { freq . put ( arr [ i ] , freq . get ( arr [ i ] ) + 1 ) ; } else { freq . put ( arr [ i ] , 1 ) ; } } HashSet < Integer > unique_freq = new HashSet < Integer > ( ) ; for ( Map . Entry < Integer , Integer > i : freq . entrySet ( ) ) { if ( unique_freq . contains ( i . getValue ( ) ) ) return false ; else unique_freq . add ( i . getValue ( ) ) ; } return true ; }
int min_cost ( String str1 , String str2 , int n ) { int cost = 0 ; char [ ] tmp = str1 . toCharArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 . charAt ( i ) ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 . charAt ( i + 1 ) ) { char temp = tmp [ i ] ; tmp [ i ] = tmp [ i + 1 ] ; tmp [ i + 1 ] = temp ; cost ++ ; } else cost ++ ; } } return cost ; }
boolean is_valid_num ( String x ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( mp . containsKey ( x . charAt ( i ) - "0" ) ) return false ; else if ( x . charAt ( i ) - "0" > 5 ) return false ; else mp . put ( x . charAt ( i ) - "0" , 1 ) ; } return true ; }
int minimize_diff ( int arr [ ] , int n , int k ) { int max_element = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int min_element = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; if ( max_element - min_element <= k ) return max_element - min_element ; int avg = ( max_element + min_element ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) arr [ i ] -= k ; else arr [ i ] += k ; } max_element = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; min_element = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; return max_element - min_element ; }
int get_min_cost ( int [ ] arr , int n ) { int min_ele = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; return min_ele * ( n - 1 ) ; }
boolean possibility ( int m [ ] , int len , String s ) { int count_odd = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( m [ s . charAt ( i ) - '0' ] % 2 == 1 ) count_odd ++ ; if ( count_odd > 1 ) return false ; } return true ; }
int minimum_cost_of_breaking ( Integer x [ ] , Integer y [ ] , int m , int n ) { int res = 0 ; Arrays . sort ( x , Collections . reverseOrder ( ) ) ; Arrays . sort ( y , Collections . reverseOrder ( ) ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) total += x [ i ++ ]  ; res += total * vert ; total = 0 ; while ( j < n ) total += y [ j ++ ]  ; res += total * hzntl ; return res ; }
int find_maximum_score ( int [ ] a , int n ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( a [ i ] ) ) { freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; } else freq . put ( a [ i ] , 1 ) ; } int [ ] dp = new int [ a . length + 1 ] ; for ( int i = 0 ; i < a . length ; i ++ ) dp [ i ] = 0 ; dp [ 0 ] = 0 ; dp [ 1 ] = freq . get ( 1 , 0 ) ; for ( int i = 2 ; i < dp . length ; i ++ ) { dp [ i ] = Math . max ( dp [ i - 1 ] , dp [ i - 2 ] + freq . get ( i , 0 ) * i ) ; } return dp [ a . length - 1 ] ; }
long count_ways ( String s , String t , int k , int mod ) { int n = s . length ( ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String p = s . substring ( i , n ) + s . substring ( 0 , i ) ; if ( p == t ) a ++ ; else b ++ ; } long dp1 [ ] = new long [ k + 1 ] ; long dp2 [ ] = new long [ k + 1 ] ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * b ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; } return dp1 [ k ] ; }
int find_subarray_sum ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > prev_sum = new HashMap < > ( ) ; int res = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ] ; if ( curr_sum == k ) { res ++ ; } if ( prev_sum . containsKey ( curr_sum - k ) ) { res += prev_sum . get ( curr_sum - k ) ; } if ( prev_sum . containsKey ( curr_sum ) ) prev_sum . put ( curr_sum , prev_sum . get ( curr_sum ) + 1 ) ; else prev_sum . put ( curr_sum , 1 ) ; } return res ; }
int maximum_occurrence ( String s ) { int n = s . length ( ) ; HashMap < String , Integer > freq = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String temp = "" ; temp += s . charAt ( i ) ; if ( freq . containsKey ( temp ) ) { freq . put ( temp , freq . get ( temp ) + 1 ) ; } else { freq . put ( temp , 1 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { String temp = "" ; temp += s . charAt ( i ) ; temp += s . charAt ( j ) ; if ( freq . containsKey ( temp ) ) freq . put ( temp , freq . get ( temp ) + 1 ) ; else freq . put ( temp , 1 ) ; } } int answer = Integer . MIN_VALUE ; for ( Map . Entry < String , Integer > x : freq . entrySet ( ) ) answer = Math . max ( answer , x . getValue ( ) ) ; return answer ; }
int count_characters ( String [ ] strings , char [ ] chars ) { int res = 0 ; HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < chars . length ; i ++ ) { if ( freq . containsKey ( chars [ i ] ) ) { freq . put ( chars [ i ] , freq . get ( chars [ i ] ) + 1 ) ; } else { freq . put ( chars [ i ] , 1 ) ; } } for ( String str : strings ) { boolean flag = true ; for ( char c : str . toCharArray ( ) ) { if ( ! freq . containsKey ( c ) ) { flag = false ; break ; } } if ( flag ) { res += str . length ( ) ; } } return res ; }
int distinct_substring ( String p , String q , int k , int n ) { Set < String > ss = new HashSet < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; String s = "" ; for ( int j = i ; j < n ; j ++ ) { int pos = p . charAt ( j ) - 'a' ; sum += q . charAt ( pos ) - '0' ; s += p . charAt ( j ) ; if ( sum <= k ) ss . add ( s ) ; else break ; } } return ss . size ( ) ; }
int unique_morse_rep ( String [ ] arr ) { int [ ] morse_code = { ".-" , "-..." , "-.--." , "-.." , "." , "..-." , "--." , "...." , ".." , ".---" , "-.-" , ".-.." , "--" , "-." , "---" , ".--." , ".-." , "..." , "-" , "..-" , "...-" , ".--" , "-..-" , "-.--" , "--.." } ; HashSet < String > st = new HashSet < String > ( ) ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { String temp = "" ; int m = arr [ i ] . length ( ) ; for ( int j = 0 ; j < m ; j ++ ) { temp += morse_code [ arr [ i ] . charAt ( j ) - 'a' ] ; } st . add ( temp ) ; } return st . size ( ) ; }
int count_substrings ( String str , int k ) { int n = str . length ( ) ; int answer = 0 ; Map < Character , Integer > map = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( ! map . containsKey ( str . charAt ( i ) ) ) map . put ( str . charAt ( i ) , 1 ) ; else map . replace ( str . charAt ( i ) , map . get ( str . charAt ( i ) ) + 1 ) ; } if ( map . size ( ) == k ) answer ++ ; for ( int i = k ; i < n ; i ++ ) { if ( ! map . containsKey ( str . charAt ( i ) ) ) map . put ( str . charAt ( i ) , 1 ) ; else map . replace ( str . charAt ( i ) , map . get ( str . charAt ( i ) ) + 1 ) ; map . put ( str . charAt ( i - k ) , map . get ( str . charAt ( i - k ) ) - 1 ) ; if ( map . get ( str . charAt ( i - k ) ) == 0 ) map . remove ( str . charAt ( i - k ) ) ; if ( map . size ( ) == k ) answer ++ ; } return answer ; }
boolean can_construct ( String s , int k ) { Map < Character , Integer > m = new HashMap < > ( ) ; int p = 0 ; if ( s . length ( ) == k ) return true ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) m . put ( s . charAt ( i ) , m . getOrDefault ( s . charAt ( i ) , 0 ) + 1 ) ; if ( k > s . length ( ) ) return false ; else { for ( Map . Entry < Character , Integer > x : m . entrySet ( ) ) { if ( x . getValue ( ) % 2 != 0 ) p = p + 1 ; } } if ( k < p ) return false ; return true ; }
boolean equal_ignore_case ( String str1 , String str2 ) { int i = 0 ; str1 = str1 . toUpperCase ( ) ; str2 = str2 . toUpperCase ( ) ; return str1 . compareTo ( str2 ) == 0 ; }
int find_longest_sub ( String bin ) { int n = bin . length ( ) , i ; int sum = 0 ; HashMap < Integer , Integer > prev_sum = new HashMap < > ( ) ; int max_len = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin . charAt ( i ) == '1' ) sum ++ ; else sum -- ; if ( sum > 0 ) { max_len = i + 1 ; } else if ( sum <= 0 ) { if ( prev_sum . containsKey ( sum - 1 ) ) { int curr_len = i - ( prev_sum . get ( sum - 1 ) == null ? 1 : prev_sum . get ( sum - 1 ) ) ; max_len = Math . max ( max_len , curr_len ) ; } } if ( ! prev_sum . containsKey ( sum ) ) prev_sum . put ( sum , i ) ; } return max_len ; }
boolean has_all_codes ( String s , int k ) { Set < String > us = new HashSet < > ( ) ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) us . add ( s . substring ( i , k ) ) ; return us . size ( ) == 1 << k ; }
boolean check_palin ( String word ) { int n = word . length ( ) ; word = Character . toLowerCase ( word ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( word . charAt ( i ) != word . charAt ( n - 1 ) ) return false ; n -- ; } return true ; }
String convert ( String str ) { String w = "" , z = "" ; str = str . toUpperCase ( ) + " " ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ch != ' ' ) w += ch ; else { z += w . charAt ( 0 ) . toLowerCase ( ) + w . substring ( 1 ) + " " ; w = "" ; } } return z ; }
int max_lines ( int n , int x1 [ ] , int y1 [ ] , int x2 [ ] , int y2 [ ] ) { Set < Double > s = new HashSet < Double > ( ) ; double slope ; for ( int i = 0 ; i < n ; ++ i ) { if ( x1 [ i ] == x2 [ i ] ) slope = Integer . MAX_VALUE ; else slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; s . add ( slope ) ; } return s . size ( ) ; }
HashMap < Integer , Integer > prime_factor ( int n ) { HashMap < Integer , Integer > primef = new HashMap < > ( ) ; while ( n % 2 == 0 ) { if ( primef . containsKey ( 2 ) ) { primef . put ( 2 , primef . get ( 2 ) + 1 ) ; } else { primef . put ( 2 , 1 ) ; } n = n / 2 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { if ( primef . containsKey ( i ) ) { primef . put ( i , primef . get ( i ) + 1 ) ; } else { primef . put ( i , 1 ) ; } n = n / i ; } } if ( n > 2 ) { primef . put ( n , 1 ) ; } return primef ; }
String is_divisible_by_divisor ( int s , int d ) { s %= d ; HashSet < Integer > hash_map = new HashSet < Integer > ( ) ; hash_map . add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hash_map . contains ( s ) ) { if ( s == 0 ) return "Yes" ; return "No" ; } else hash_map . add ( s ) ; } return "Yes" ; }
boolean odd_sum ( int a [ ] , int n , int k ) { HashSet < Integer > odd = new HashSet < > ( ) ; HashSet < Integer > even = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) even . add ( a [ i ] ) ; else odd . add ( a [ i ] ) ; } if ( odd . size ( ) >= k ) return true ; boolean flag = false ; for ( int i = 1 ; i <= k - 1 ; i += 2 ) { int needed = k - i ; if ( needed <= even . size ( ) ) return true ; } return flag ; }
int day_of_year ( String date ) { int days [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 , 30 , 31 } ; int year = Integer . parseInt ( date . substring ( 0 , 4 ) ) ; int month = Integer . parseInt ( date . substring ( 5 , 7 ) ) ; int day = Integer . parseInt ( date . substring ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 year % 400 == 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days [ month - 2 ] ; -- month ; } return day ; }
boolean is_perfect_square ( int arr [ ] , int n ) { HashMap < Integer , Integer > umap = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! umap . containsKey ( arr [ i ] ) ) umap . put ( arr [ i ] , 1 ) ; else umap . put ( arr [ i ] , umap . get ( arr [ i ] ) + 1 ) ; } Iterator < Map . Entry < Integer , Integer > > iterator = umap . entrySet ( ) . iterator ( ) ; while ( iterator . hasNext ( ) ) { Map . Entry < Integer , Integer > entry = iterator . next ( ) ; if ( entry . getValue ( ) % 2 == 1 ) return false ; } return true ; }
int min_moves ( int n ) { String s = Integer . toString ( n ) ; int ans = Integer . MAX_VALUE ; int len = s . length ( ) ; for ( int i = 0 ; i < len ; i ++ ) { for ( int j = 0 ; j < len ; j ++ ) { if ( i == j ) continue ; String t = String . valueOf ( s ) ; int cur = 0 ; for ( int k = i ; k < len - 1 ; k ++ ) { t += t . charAt ( k ) ; cur ++ ; } for ( int k = j - ( j > i ) ; k < len - 2 ; k ++ ) { t += t . charAt ( k ) ; cur ++ ; } int pos = - 1 ; for ( int k = 0 ; k < len ; k ++ ) { if ( t . charAt ( k ) != '0' ) { pos = k ; break ; } } for ( int k = pos ; k >= 1 ; k -- ) { t += t . charAt ( k - 1 ) ; cur ++ ; } int nn = Integer . valueOf ( t ) ; if ( nn % 25 == 0 ) ans = Math . min ( ans , cur ) ; } } if ( ans == Integer . MAX_VALUE ) return - 1 ; return ans ; }
int minimum_operations ( int [ ] a , int n ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( a [ i ] ) ) { int x = mp . get ( a [ i ] ) ; mp . put ( a [ i ] , ++ x ) ; } else { mp . put ( a [ i ] , 1 ) ; } } int count = 0 ; for ( Map . Entry < Integer , Integer > x : mp . entrySet ( ) ) { if ( x . getValue ( ) > 1 ) count += x . getValue ( ) - 1 ; } return count ; }
int kaprekar_rec ( int n , int prev ) { if ( n == 0 ) return 0 ; prev = n ; int digits [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } Arrays . sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) asc = asc * 10 + digits [ i ] ; Collections . sort ( digits ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) desc = desc * 10 + digits [ i ] ; int diff = Math . abs ( asc - desc ) ; if ( diff == prev ) return diff ; return kaprekar_rec ( diff , prev ) ; }
String fraction_to_decimal ( int numr , int denr ) { String res = "" ; Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; int rem = numr % denr ; while ( rem != 0 && mp . get ( rem ) == null ) { mp . put ( rem , res . length ( ) ) ; rem = rem * 10 ; int res_part = rem / denr ; res += String . valueOf ( res_part ) ; rem = rem % denr ; } if ( rem == 0 ) return "" ; if ( mp . containsKey ( rem ) ) return res . substring ( mp . get ( rem ) + 1 ) ; return "" ; }
boolean is_fancy ( String num ) { HashMap < Character , Character > fp = new HashMap < Character , Character > ( ) ; fp . put ( "0" , "0" ) ; fp . put ( "1" , "1" ) ; fp . put ( "6" , "9" ) ; fp . put ( "8" , "8" ) ; fp . put ( "9" , "6" ) ; int n = num . length ( ) ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( ! fp . containsKey ( num . charAt ( l ) ) || fp . get ( num . charAt ( l ) ) != num . charAt ( r ) ) return false ; l ++ ; r -- ; } return true ; }
double distinct_odd_ratio ( int [ ] numbers ) { int distinct_count = numbers . length ; int distinct_odd_count = numbers . length ; for ( int i = 0 ; i < 2 ; i ++ ) { if ( numbers [ i ] % 2 == 1 ) { distinct_odd_count += 1 ; } else { distinct_odd_count += 1 ; } } return ( distinct_odd_count / distinct_count ) ; }
int compare_sum ( int numbers [ ] , String words [ ] ) { int int_sum = sum ( numbers ) ; int word_length_sum = sum ( words ) ; if ( int_sum < word_length_sum ) return - 1 ; else if ( int_sum > word_length_sum ) return 1 ; else return 0 ; }
boolean all_longer_than ( String [ ] short_words , String [ ] long_words ) { int max_of_short = Arrays . stream ( short_words ) . max ( ) . getAsInt ( ) ; int min_of_long = Arrays . stream ( long_words ) . min ( ) . getAsInt ( ) ; return min_of_long > max_of_short ; }
int compare_odd_even_range ( int numbers [ ] ) { int range_odd = Math . max ( numbers [ 0 ] , numbers [ 1 ] ) - Math . min ( numbers [ 0 ] , numbers [ 1 ] ) ; int range_even = Math . max ( numbers [ 0 ] , numbers [ 1 ] ) - Math . min ( numbers [ 1 ] , numbers [ 2 ] ) ; if ( range_odd < range_even ) return - 1 ; if ( range_odd > range_even ) return 1 ; return 0 ; }
double average_distinct_length ( String words [ ] ) { Set < String > distinct_words = new HashSet < > ( ) ; for ( String temp : words ) { distinct_words . add ( temp ) ; } double average_len = ( distinct_words . size ( ) > 0 ) ? ( double ) distinct_words . size ( ) : 0 ; return average_len ; }
int withdraw_balance ( int start , int withdrawals [ ] ) { int end = functools . reduce ( ( balance , nextWithdrawal ) -> balance - nextWithdrawal , withdrawals , start ) ; return end ; }
String first_short_and_starts_with_o ( String [ ] words ) { String matched_element = null ; for ( int i = 0 ; i < words . length ; i ++ ) for ( int j = 0 ; j < words . length ; j ++ ) if ( words [ i ] . compareTo ( 'o' ) == 0 ) matched_element = words [ i ] ; return matched_element ; }
int big_number_at_index ( int numbers [ ] [ ] , int index ) { int target_num = ( numbers [ 0 ] > 5 ) ? numbers [ 0 ] : 0 ; return target_num ; }
boolean contains_square_in_range ( int range_start , int range_length ) { boolean contains_square = any ( ( int ) Math . sqrt ( n ) , 2 == n ) ; return contains_square ; }
HashMap < Integer , List < Integer > > group_numbers_by_mod ( int [ ] numbers , int mod ) { HashMap < Integer , List < Integer > > number_groups = new HashMap < Integer , List < Integer > > ( ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { for ( int j = 0 ; j < numbers . length ; j ++ ) { if ( numbers [ i ] % mod == 1 ) number_groups . put ( numbers [ i ] , g . get ( j ) ) ; else number_groups . put ( numbers [ i ] , g . get ( j ) ) ; } } return number_groups ; }
HashMap < String , List < Integer > > group_words_by_first_char ( List < String > words ) { HashMap < String , List < Integer > > word_groups = new HashMap < > ( ) ; for ( int i = 0 ; i < words . size ( ) ; i ++ ) { for ( int j = 0 ; j < words . get ( i ) . length ( ) ; j ++ ) { if ( word_groups . containsKey ( words . get ( i ) ) ) { word_groups . put ( words . get ( i ) , word_groups . get ( words . get ( i ) ) + g ) ; } else { word_groups . put ( words . get ( i ) , g ) ; } } return word_groups ; }
void order_by_length_and_descending ( String [ ] words ) { Collections . sort ( words ) ; Collections . reverse ( words ) ; Collections . sort ( sorted_words ( words ) ) ; System . out . print ( words . length + " " ) ; }
void order_first_char_descending_reverse ( String [ ] words ) { Arrays . sort ( words ) ; reverse ( words ) ; }
int [ ] get_sublist_of_negative ( int [ ] numbers , int start , int length ) { int [ ] sub_list = new int [ numbers . length ] ; for ( int i = start ; i < numbers . length ; i ++ ) { for ( int j = 0 ; j < numbers . length ; j ++ ) { sub_list [ j ] = numbers [ i ] ; } } return sub_list ; }
List < Integer > get_positive_sequence ( int [ ] numbers ) { List < Integer > sub_sequence ; sub_sequence = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { if ( n > 0 ) { sub_sequence . add ( n ) ; } else { sub_sequence . add ( n ) ; } } return sub_sequence ; }
int [ ] get_larger_than_index_sequence ( int [ ] numbers ) { int [ ] sub_sequence = new int [ numbers . length ] ; for ( int i = 0 ; i < numbers . length ; i ++ ) { sub_sequence [ i ] = x ; } return sub_sequence ; }
String [ ] rearrange_word_by_indexes ( String words [ ] , int indexes [ ] ) { int new_indexes [ ] = { indexes [ n % words . length ( ) ] ; for ( int i = 0 ; i < new_indexes . length ; i ++ ) new_indexes [ i ] = words [ n ] ; return new_indexes ; }
void get_words_upper_lower ( String [ ] words ) { for ( String w : words ) { System . out . print ( w + " " ) ; } }
int [ ] select_if_in_place ( int [ ] numbers ) { int n = numbers . length ; for ( int i = 0 ; i < n ; i ++ ) { if ( numbers [ i ] == index ) n ++ ; } return n ; }
void select_pairs ( int [ ] numbers_a , int [ ] numbers_b ) { int [ ] [ ] pairs = new int [ numbers_a . length ] [ numbers_b . length ] ; for ( int i = 0 ; i < numbers_a . length ; i ++ ) for ( int j = 0 ; j < numbers_b . length ; j ++ ) pairs [ i ] [ j ] = a + b ; }
String [ ] string_cross_join ( String [ ] end_words , String [ ] begin_words ) { String cross_strings [ ] = new String [ end_words . length ] ; for ( String a : cross_strings ) Arrays . fill ( a , ' ' ) ; return cross_strings ; }
int elements_contain_subword ( String words [ ] , String subword ) { if ( words . contains ( subword ) ) return 1 ; else if ( words . contains ( subword ) ) return 0 ; else return - 1 ; }
int [ ] concat_large_numbers ( int [ ] numbers_a , int [ ] numbers_b , int flag ) { int [ ] all_numbers = numbers_a . clone ( ) ; for ( int i = 0 ; i < numbers_a . length ; i ++ ) { for ( int j = 0 ; j < numbers_b . length ; j ++ ) { if ( numbers_a [ i ] > flag ) { all_numbers [ j ] = numbers_b [ i ] ; } } } return all_numbers ; }
int dot_product ( List < Integer > vector_a , List < Integer > vector_b ) { int dot_product = 0 ; for ( int i = 0 ; i < vector_a . size ( ) ; i ++ ) for ( int j = 0 ; j < vector_b . size ( ) ; j ++ ) dot_product += ( a * b ) ; return dot_product ; }
List < Integer > set_difference ( List < Integer > set_a , List < Integer > set_b ) { List < Integer > difference = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < set_a . size ( ) ; i ++ ) { difference . add ( set_a . get ( i ) - set_b . get ( i ) ) ; } Collections . sort ( difference ) ; return difference ; }
