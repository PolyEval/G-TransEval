int greatest_common_divisor ( int a , int b ) { if ( a == 0 b == 0 ) return a + b ; if ( a == b ) return a ; if ( a > b ) return greatest_common_divisor ( a % b , b ) ; else return greatest_common_divisor ( a , b % a ) ; }
int largest_divisor ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) if ( n % i == 0 ) return n / i ; return 1 ; }
bool is_prime ( int n ) { if ( n < 2 ) { return false ; } for ( int k = 2 ; k < n ; k ++ ) { if ( n % k == 0 ) { return false ; } } return true ; }
int fizz_buzz ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 11 == 0 i % 13 == 0 ) { int q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) count ++ ; q /= 10 ; } } } return count ; }
int prime_fib ( int n ) { int f0 = 0 ; int f1 = 1  ; while ( n > 0 ) { int p = f0 + f1  ; bool is_prime = p >= 2 ; for ( int i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) n -- ; f0 = f1  ; f1 = p ; } return f1 ; }
float triangle_area ( float a , float h ) { return a * h / 2 ; }
int modp ( int n , int p ) { int ret = 1 ; for ( int i = 0 ; i < n ; i ++ ) ret = ( ret * 2 ) % p ; return ret ; }
int add ( int x , int y ) { return x + y ; }
int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 1 ; return fib ( n - 1 ) + fib ( n - 2 ) ; }
int largest_prime_factor ( int n ) { for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) while ( n % i == 0 && n > i ) n /= i ; return n ; }
int sum_to_n ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) result += i ; return result ; }
int fibfib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 0 ; if ( n == 2 ) return 1 ; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 )  ; }
bool is_multiply_prime ( int a ) { int num = 0 ; for ( int i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) { a /= i ; num ++ ; } } return num == 3 ; }
bool is_simple_power ( int x , int n ) { if ( n == 1 ) return ( x == 1 ) ; int power = 1  ; while ( power < x ) power *= n ; return power == x ; }
int choose_num ( int x , int y ) { if ( x > y ) return -1 ; if ( y % 2 == 0 ) return y  ; if ( x == y ) return -1 ; return y - 1 ; }
bool is_equal_to_sum_even ( int n ) { return ( n % 2 == 0 && n >= 8 ) ; }
int special_factorial ( int n ) { int fact = 1 , special_fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; special_fact *= fact ; } return special_fact ; }
int x_or_y ( int n , int x , int y ) { bool is_prime = n >= 2 ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) return x  ; return y ; }
bool right_angle_triangle ( int a , int b , int c ) { return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b ; }
int fast_pow ( int n , int k ) { if ( k == 0 ) return 1 ; int temp = fast_pow ( n , k / 2 ) ; if ( k % 2 == 0 ) return temp * temp  ; else return n * temp * temp  ; }
bool is_palin ( string s ) { int l = s . length ( ) / 2 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s [ i ] != s [ s . length ( ) - i - 1 ] ) return false ; } return true ; }
int find_sum ( int n ) { int ans = 0 , temp = 0 , num ; for ( int i = 1 ; i <= n && temp < n ; i ++ ) { temp = i - 1 ; num = 1  ; while ( temp < n ) { if ( temp + i <= n ) ans += ( i * num ) ; else ans += ( ( n - temp ) * num ) ; temp += i  ; num ++ ; } } return ans ; }
int get_next_gap ( int gap ) { gap = gap * 10 / 13 ; if ( gap < 1 ) return 1 ; return gap ; }
long long int count_non_decreasing ( int n ) { int k = 10 ; long long count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count /= i ; } return count ; }
int power ( int x , unsigned int y ) { if ( y == 0 ) return 1 ; else if ( y % 2 == 0 ) return power ( x , y / 2 ) * power ( x , y / 2 ) ; else return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; }
float power ( float x , int y ) { float temp ; if ( y == 0 ) return 1 ; temp = power ( x , y / 2 ) ; if ( y % 2 == 0 ) return temp * temp  ; else { if ( y > 0 ) return x * temp * temp  ; else return temp * temp / x ; } }
int multiply ( int x , int y ) { if ( y == 0 ) return 0 ; if ( y > 0 ) return x + multiply ( x , y - 1 ) ; if ( y < 0 ) return - multiply ( x , - y ) ; }
int smallest ( int x , int y , int z ) { if ( ! y / x ) return ( ! y / z ) ? y : z ; return ( ! x / z ) ? x : z ; }
bool is_power_of_four ( int n ) { if ( n == 0 ) return 0 ; while ( n != 1 ) { if ( n % 4 != 0 ) return 0 ; n = n / 4 ; } return 1 ; }
int mod_inverse ( int a , int m ) { int m0 = m , t , q ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { q = a / m ; t = m  ; m = a % m  ; a = t  ; t = x0  ; x0 = x1 - q * x0  ; x1 = t  ; } if ( x1 < 0 ) x1 += m0  ; return x1 ; }
int cnt_rotations ( string s , int n ) { string s2 = s + s ; int pre [ 2 * n ] = { 0 } ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; if ( s2 [ i ] == 'a' s2 [ i ] == 'e' s2 [ i ] == 'i' s2 [ i ] == 'o' s2 [ i ] == 'u' ) { pre [ i ] ++ ; } } int ans = 0 ; for ( int i = n - 1 ; i < 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ]  ; if ( l >= 0 ) x1 -= pre [ l ] ; r = i - n / 2 ; int left = pre [ r ]  ; if ( l >= 0 ) left -= pre [ l ] ; int right = x1 - left  ; if ( left > right ) { ans ++ ; } } return ans ; }
int binomial_coeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; ++ i ) { res *= n - i ; res /= i + 1 ; } return res ; }
bool is_prefix ( string temp , string s ) { if ( temp . length ( ) < s . length ( ) ) return false ; else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] != temp [ i ] ) return false ; } return true ; } }
string lexicographically_smallest_string ( string s , int n ) { int last_ze = -1 ; string ans = "" ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { last_ze = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i <= last_ze && s [ i ] == '0' ) ans += s [ i ] ; else if ( i > last_ze ) ans += s [ i ] ; } return ans ; }
int calculate_max ( int n , int m , int k ) { int ans = -1 ; int low = 0 , high = m ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int val = 0 ; int l = k - 1 , r = n - k  ; val += mid  ; if ( mid >= l ) { val += l * ( 2 * mid - l - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( l - mid )  ; } if ( mid >= r ) { val += r * ( 2 * mid - r - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( r - mid )  ; } if ( val <= m ) { ans = max ( ans , mid ) ; low = mid + 1 ; } else { high = mid - 1 ; } } return ans ; }
int find_length ( string s , int i , int j ) { int required = i ; int length = 0 ; for ( auto curr : s ) { if ( curr == required ) { length ++ ; if ( required == i ) required = j ; else required = i ; } } return length ; }
bool check_reverse ( int left_sum , int right_sum ) { int rev = 0 ; int temp = right_sum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp /= 10 ; } if ( rev == left_sum ) { return true ; } return false ; }
bool is_composite ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return false ; if ( n % 2 == 0 n % 3 == 0 ) return true ; for ( int i = 5 ; i * i <= n ; i = i + 6 ) if ( n % i == 0 || n % ( i + 2 ) == 0 ) return true ; return false ; }
int min_deletion ( string s ) { int n = s . size ( ) ; int first_idx1 = -1 ; int last_idx0 = -1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { first_idx1 = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { last_idx0 = i ; break ; } } if ( first_idx1 == -1 last_idx0 == -1 ) return 0 ; int count1 = 0 , count0 = 0 ; for ( int i = 0 ; i < last_idx0 ; i ++ ) { if ( s [ i ] == '1' ) { count1 ++ ; } } for ( int i = first_idx1 + 1 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { count0 ++ ; } } return min ( count0 , count1 ) ; }
int min_steps ( string s , int n ) { int smaller , cost = 0 ; int f [ 26 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { int curr_ele = s [ i ] - 'a'  ; smaller = 0 ; for ( int j = 0 ; j <= curr_ele ; j ++ ) { if ( f [ j ] != 0 ) smaller += f [ j ] ; } if ( smaller == 0 ) cost += i + 1 ; else cost += i - smaller + 1 ; f [ s [ i ] - 'a' ] ++ ; } return cost ; }
ll number_of_ways ( ll n ) { ll count = 0 ; for ( ll a = 1 ; a < n ; a ++ ) { for ( ll b = 1 ; b < n ; b ++ ) { ll c = n - ( a + b ) ; if ( a < b + c && b < a + c && c < a + b ) count ++ ; } } return count ; }
int slope_of_num ( int num [ ] , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) slope ++ ; else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) slope ++ ; } return slope ; }
int middle_of_three ( int a , int b , int c ) { int x = a - b  , y = b - c  ; int z = a - c  ; if ( x * y > 0 ) return b  ; else if ( x * z > 0 ) return c  ; else return a  ; }
int count_max_set_bits ( int left , int right ) { while ( ( left | ( left + 1 ) ) <= right ) left |= left + 1 ; return left ; }
int find_s ( int s ) { int l = 1 , r = s / 2 + 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) return mid ; else if ( sum > s ) r = mid - 1 ; else l = mid + 1 ; } return -1 ; }
bool check ( string s ) { int min = INT_MAX ; int max = - INT_MAX ; int sum = 0 ; for ( int i = 0 ; i < s . size ( ) ; i ++ ) { int ascii = int ( s [ i ] ) ; if ( ascii < 96 ascii > 122 ) return false ; sum += ascii  ; if ( min > ascii ) min = ascii  ; if ( max < ascii ) max = ascii  ; } min -= 1 ; int e_sum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == e_sum ; }
int minimum_possible_product ( int k ) { int res = 1 ; int r = ( 1 << k ) - 1  ; for ( int i = 0 ; i < k ; i ++ ) res *= r - 1  ; res *= r ; return res ; }
int find_in_grid ( int i , int j ) { if ( i == j ) return i * i - ( i - 1 ) ; else if ( i > j ) { if ( i % 2 == 0 ) return i * i - ( j - 1 ) ; else return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } else { if ( j % 2 == 0 ) return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; else return j * j - ( i - 1 ) ; } }
int find_min_operations_req_emp_str ( string s ) { int cnt_one = 0 , cnt_zero = 0 ; int n = s . length ( )  ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '0' ) { if ( cnt_one > 0 ) { cnt_one -- ; } cnt_zero ++ ; } else { if ( cnt_zero > 0 ) { cnt_zero -- ; } cnt_one ++ ; } } return ( cnt_one + cnt_zero ) ; }
bool is_reachable ( int x1 , int y1 , int x2 , int y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) x2 %= y2 ; else y2 %= x2 ; } if ( x2 == x1 ) return y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ; else if ( y2 == y1 ) return x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ; else return false ; }
int find_max_soln ( int n , int x , int y ) { int ans = INT_MIN ; for ( int k = 0 ; k <= n ; k ++ ) { if ( k % x == y ) ans = max ( ans , k ) ; } return ( ans >= 0 && ans <= n ) ? ans : -1 ; }
int number_of_pairs ( int n ) { int count = 0 ; for ( int i = 1 , j = n - 1 ; i < j ; i ++ , j -- ) if ( i + j == n ) count ++ ; return count ; }
int min_changes ( string s , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( s [ 0 ] != '1' ) { count ++ ; ones ++ ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s [ i ] == '0' ) zeros ++ ; else ones ++ ; if ( zeros > ones ) { zeros -- ; ones ++ ; count ++ ; } } return count ; }
int k_visible_from_left ( int n , int k ) { if ( n == k ) return 1 ; if ( k == 1 ) { int ans = 1  ; for ( int i = 1 ; i < n ; i ++ ) ans *= i ; return ans ; } return k_visible_from_left ( n - 1 , k - 1 ) + ( n - 1 ) * k_visible_from_left ( n - 1 , k ) ; }
long double find ( int n , int sum ) { if ( sum > 6 * n sum < n ) return 0 ; if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) return 1.0 / 6 ; else return 0 ; } long double s = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) s += find ( n - 1 , sum - i ) / 6 ; return s ; }
int bin_coff ( int n , int r ) { int val = 1 ; if ( r > ( n - r ) ) r = n - r ; for ( int i = 0 ; i < r ; i ++ ) { val *= n - i ; val /= i + 1 ; } return val ; }
int get_mask ( long val ) { int mask = 0 ; if ( val == 0 ) return 1 ; while ( val ) { int d = val % 10 ; mask |= ( 1 << d ) ; val /= 10 ; } return mask ; }
int ways_to_k_adjacent_set_bits ( int n , int k , int current_index , int adjacent_set_bits , int last_bit ) { if ( current_index == n ) { if ( adjacent_set_bits == k ) return 1 ; return 0 ; } int no_of_ways = 0 ; if ( last_bit == 1 ) { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits + 1 , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 )  ; } else if ( last_bit != 1 ) { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 1 )  ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 )  ; } return no_of_ways ; }
int check_func ( int i , int j , char * str ) { if ( str [ i ] == '(' && str [ j ] == ')' ) return 1  ; if ( str [ i ] == '(' && str [ j ] == '?' ) return 1  ; if ( str [ i ] == '?' && str [ j ] == ')' ) return 1  ; if ( str [ i ] == '[' && str [ j ] == ']' ) return 1  ; if ( str [ i ] == '[' && str [ j ] == '?' ) return 1  ; if ( str [ i ] == '[' && str [ j ] == '?' ) return 1  ; if ( str [ i ] == '[' && str [ j ] == '?' ) return 1  ; if ( str [ i ] == '?' && str [ j ] == ']' ) return 1  ; if ( str [ i ] == '{' && str [ j ] == '}' ) return 1  ; if ( str [ i ] == '{' && str [ j ] == '?' ) return 1  ; if ( str [ i ] == '{' && str [ j ] == '}' ) return 1  ; if ( str [ i ] == '{' && str [ j ] == '?' ) return 1  ; if ( str [ i ] == '?' && str [ j ] == '}' ) return 1  ; return 0 ; }
int find_golomb ( int n ) { if ( n == 1 ) return 1 ; return 1 + find_golomb ( n - find_golomb ( find_golomb ( n - 1 ) ) ) ; }
bool all_ones ( string s , int n ) { int co = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == '1' ) co += 1 ; } return co == n ; }
int pad ( int n ) { int p_prev_prev = 1 , p_prev = 1 , p_curr = 1 , p_next = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { p_next = p_prev_prev + p_prev  ; p_prev_prev = p_prev  ; p_prev = p_curr  ; p_curr = p_next  ; } return p_next  ; }
int odd_length_palindrome ( int k ) { int palin = k  ; k /= 10 ; while ( k > 0 ) { int rev = k % 10  ; palin = palin * 10 + rev  ; k /= 10 ; } return palin ; }
string change_string ( string s0 ) { int n = s0 . length ( ) ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == '?' ) { s [ i ] = 'a' ; if ( s [ 0 ] == s [ 1 ] ) s [ 0 ] = s [ 0 ] + 1 ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == '?' ) { s [ i ] = 'a' ; if ( s [ i ] == s [ i - 1 ] ) s [ i ] = s [ i ] + 1 ; if ( s [ i ] == s [ i + 1 ] ) s [ i ] = s [ i ] + 1 ; if ( s [ i ] == s [ i - 1 ] ) s [ i ] = s [ i ] + 1 ; } } if ( s [ n - 1 ] == '?' ) { s [ n - 1 ] = 'a' ; if ( s [ n - 1 ] == s [ n - 2 ] ) s [ n - 1 ] = s [ n - 1 ] + 1 ; } return s ; }
int total_hamming_distance ( int n ) { int i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + n / i ; i = i * 2 ; } return sum ; }
int check_bitonic ( string s ) { int i ; for ( i = 1 ; i < s . size ( ) ; i ++ ) { if ( s [ i ] > s [ i - 1 ] ) continue ; if ( s [ i ] <= s [ i - 1 ] ) break ; } if ( i == s . size ( ) - 1 ) return 1  ; int j ; for ( j = i + 1 ; j < s . size ( ) ; j ++ ) { if ( s [ j ] < s [ j - 1 ] ) continue ; if ( s [ j ] >= s [ j - 1 ] ) break ; } i = j ; if ( i != s . size ( ) ) return 0 ; return 1  ; }
bool ends_with ( string str , string pat ) { int pat_len = pat . length ( ) , str_len = str . length ( ) ; if ( pat_len > str_len ) return false ; pat_len -- ; str_len -- ; while ( pat_len >= 0 ) { if ( pat [ pat_len ] != str [ str_len ] ) return false ; pat_len -- ; str_len -- ; } return true ; }
int get_sum ( int n , int d ) { if ( n < d ) return 0 ; while ( n % 10 != d ) n -- ; int k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
int balanced_string_by_swapping ( string s ) { int unbalanced_pair = 0 ; for ( int i = 0 ; i < s . size ( ) ; i ++ ) { if ( unbalanced_pair > 0 && s [ i ] == ']' ) unbalanced_pair -- ; else if ( s [ i ] == '[' ) unbalanced_pair ++ ; } return ( unbalanced_pair + 1 ) / 2 ; }
long long compute_hash ( string s ) { int p = 31 ; int mod = 1e9 + 7 ; long long hash_val = 0 ; long long mul = 1  ; for ( char ch : s ) { hash_val = ( hash_val + ( ch - 'a' + 1 ) * mul ) % mod  ; mul = mul * p % mod  ; } return hash_val ; }
int count_of_substring_with_only_ones ( string s ) { int res = 0 , count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { count = ( s [ i ] == '1' ? count + 1 : 0 ) ; res = res + count ; } return res ; }
int composite ( int n ) { int flag = 0 ; int c = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) c += 1 ; } if ( c >= 3 ) flag = 1 ; return flag ; }
bool is_div_by_six ( string s , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += ( int ) s [ i ] - 'a' + 1 ; } if ( sum % 3 != 0 ) return false ; int last_digit = ( ( int ) s [ n - 1 ] - 'a' + 1 ) % 10 ; if ( last_digit % 2 != 0 ) return false ; return true ; }
bool is_redundant_braces ( string s ) { int a = 0 , b = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == '(' && s [ i + 2 ] == ')' ) return true ; if ( s [ i ] == '*' s [ i ] == '+' s [ i ] == '-' s [ i ] == '/' ) a ++ ; if ( s [ i ] == '(' ) b ++ ; } if ( b > a ) return true ; return false ; }
int count_sub_str ( string s , int n ) { int count = 0 ; for ( int i = 0 ; i < ( n - 2 ) ; ) { if ( s [ i ] == '0' && s [ i + 1 ] == '1' && s [ i + 2 ] == '0' ) { count ++ ; i += 3  ; } else if ( s [ i ] == '1' && s [ i + 1 ] == '0' && s [ i + 2 ] == '1' ) { count ++ ; i += 3  ; } else i ++ ; } return count ; }
int prefix_occurrences ( string s ) { char c = s [ 0 ] ; int count_c = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == c ) count_c ++ ; } return count_c ; }
bool is_valid ( string s , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( s [ i ] == s [ i - 1 ] ) return false ; } return true ; }
int count ( string s , int k ) { int n = s . length ( ) ; int d = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) d += s [ i ] ; if ( d % k == 0 ) count += 1 ; for ( int i = k ; i < n ; i ++ ) { int prev = s [ i - k ] ; d -= prev  ; d += s [ i ] ; if ( d % k == 0 ) count += 1 ; } return count ; }
int find_substring_count ( string s ) { int result = 0 ; int n = s . size ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s [ i ] + 1 == s [ i + 1 ] ) { result ++ ; for ( ; i < n - 1 && s [ i ] + 1 == s [ i + 1 ] ; i ++ ) ; } } return result ; }
bool find ( string s1 , string s2 ) { int len1 = s1 . length ( ) ; int len2 = s2 . length ( ) ; if ( len1 != len2 ) return false ; int d [ len1 ] ; d [ 0 ] = s2 [ 0 ] - s1 [ 0 ] ; for ( int i = 1 ; i < len1 ; i ++ ) { if ( s1 [ i ] > s2 [ i ] ) return false ; else d [ i ] = s2 [ i ] - s1 [ i ] ; } for ( int i = 0 ; i < len1 - 1 ; i ++ ) if ( d [ i ] < d [ i + 1 ] ) return false ; return true ; }
bool is_in_given_base ( string s , int bas ) { if ( bas > 16 ) return false ; else if ( bas <= 10 ) { for ( int i = 0 ; i < s . size ( ) ; i ++ ) if ( ! ( s [ i ] >= '0' and s [ i ] < '0' + bas ) ) return false ; } else { for ( int i = 0 ; i < s . size ( ) ; i ++ ) if ( ! ( ( s [ i ] >= '0' && s [ i ] < '0' + bas ) || ( s [ i ] >= 'A' && s [ i ] < ( 'A' + bas - 10 ) ) ) return false ; } return true ; }
int count_non_empty_substr ( string s ) { int n = s . length ( ) ; return n * ( n + 1 ) / 2 ; }
int even_decimal_value ( string s , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimal_value = 0 ; int power_of_2 = 1  ; for ( int k = i ; k <= j ; k ++ ) { decimal_value += ( s [ k ] - '0' ) * power_of_2  ; power_of_2 *= 2 ; } if ( decimal_value % 2 == 0 ) result ++ ; } } return result ; }
int calculate ( string s ) { int ans = 6 ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { for ( int k = 0 ; k < 10 ; k ++ ) { for ( int l = 0 ; l < 10 ; l ++ ) { for ( int m = 0 ; m < 10 ; m ++ ) { for ( int n = 0 ; n < 10 ; n ++ ) { if ( i + j + k == l + m + n ) { int c = 0  ; if ( i != s [ 0 ] - '0' ) c ++ ; if ( j != s [ 1 ] - '0' ) c ++ ; if ( k != s [ 2 ] - '0' ) c ++ ; if ( l != s [ 3 ] - '0' ) c ++ ; if ( m != s [ 4 ] - '0' ) c ++ ; if ( n != s [ 5 ] - '0' ) c ++ ; if ( c < ans ) ans = c  ; } } } } } } return ans ; }
int xor_zero ( string s ) { int one_count = 0 , zero_count = 0 ; int n = s . length ( )  ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) one_count ++ ; else zero_count ++ ; } if ( one_count % 2 == 0 ) return zero_count  ; return one_count  ; }
int even_length ( string n ) { int res = n ; for ( int j = n . length ( ) - 1 ; j >= 0 ; j -- ) res += n [ j ] ; return res ; }
int count_substring_with_equal_ends ( string s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) if ( s [ i ] == s [ j ] ) result ++ ; return result ; }
double normal_slope ( double a , double b , double x1 , double y1 ) { double g = a / 2 ; double f = b / 2 ; if ( g - x1 == 0 ) return -1 ; double slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) return -2 ; return slope ; }
bool orthogonality ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) { int dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) return true ; else return false ; }
double find_area_shaded ( double a ) { double sq_area = a * a ; double semi_circle_area = ( 3.14 * ( a * a ) / 8 ) ; double shaded_area = 4 * semi_circle_area - sq_area  ; return shaded_area ; }
int factorial ( int a , int b ) { int res = 1 ; for ( int i = 1 ; i <= a + b ; i ++ ) res = res * i ; for ( int i = 1 ; i <= a ; i ++ ) res = res / i ; for ( int i = 1 ; i <= b ; i ++ ) res = res / i ; return res ; }
int factor_tree ( int n ) { int height = 0 ; while ( n > 1 ) { bool flag = false ; for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( ! flag ) break ; } return height ; }
string find_if_possible ( int n , int s , int x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) return "Yes" ; if ( n == 1 ) { if ( s == x ) return "Yes" ; else return "No" ; } if ( n == 2 ) { int c = ( s - x ) / 2 ; int a = c  ; int b = c  ; a = a + x  ; if ( ( a ^ b ) == x ) return "Yes" ; else return "No" ; } } else return "No" ; }
int maximum_triplet_xor ( int a , int b , int c ) { int ans = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int cur = 1 << i ; if ( a >= cur ) { ans += cur  ; a -= cur  ; } else if ( b >= cur ) { ans += cur  ; b -= cur  ; } else if ( c >= cur ) { ans += cur  ; c -= cur  ; } } return ans ; }
int item_type ( int n ) { int count = 0 ; for ( int day = 1 ; count + day * ( day + 1 ) / 2 < n ; day ++ ) { count += day * ( day + 1 ) / 2 ; } for ( int type = day ; type >= 0 ; type -- ) { count += type  ; if ( count >= n ) return type ; } return 0 ; }
int max_gcd_in_range ( int l , int r ) { int ans = 1 ; for ( int z = r ; z >= 1 ; z -- ) { if ( r / z - ( l - 1 ) / z > 1 ) { ans = z ; break ; } } return ans ; }
int sum_of_digits ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += ( n % 10 ) ; n = n / 10 ; } return sum ; }
int is_rep_unit_num ( int n , int b ) { int len = 0 ; int count_one = 0 ; while ( n != 0 ) { int r = n % b ; len ++ ; if ( r == 1 ) count_one ++ ; n = n / b ; } return count_one >= 3 && count_one == len ; }
bool is_straigh_line_num ( int n ) { if ( n <= 99 ) return false ; string s = to_string ( n ) ; int d = s [ 1 ] - s [ 0 ] ; for ( int i = 2 ; i < s . size ( ) ; i ++ ) { if ( s [ i ] - s [ i - 1 ] != d ) return false ; } return true ; }
int get_count ( int d , int n ) { int no = n / d ; int result = no  ; for ( int p = 2 ; p * p <= no ; ++ p ) { if ( no % p == 0 ) { while ( no % p == 0 ) no /= p ; result -= result / p  ; } } if ( no > 1 ) result -= result / no  ; return result ; }
bool is_even_parity ( int x ) { int parity = 0 ; while ( x != 0 ) { if ( x & 1 ) parity ++ ; x = x >> 1 ; } if ( parity % 2 == 0 ) return true ; else return false ; }
int is_perfect ( long long int n ) { long long int sum = 1 ; for ( long long int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) sum = sum + i + n / i ; else sum = sum + i ; } } if ( sum == n && n != 1 ) return n ; return 0 ; }
int log_a_to_base_b ( int a , int b ) { return a > ( b - 1 ) ? 1 + log_a_to_base_b ( a / b , b ) : 0 ; }
int using_binary_search ( int start , int end , int n , int s ) { if ( start >= end ) return start ; int mid = start + ( end - start ) / 2 ; int total_sum = ( n * ( n + 1 ) ) / 2 ; int mid_sum = ( mid * ( mid + 1 ) ) / 2 ; if ( total_sum - mid_sum <= s ) return using_binary_search ( start , mid , n , s ) ; return using_binary_search ( mid + 1 , end , n , s ) ; }
string min_int ( string s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] >= '5' ) { s1 [ i ] = char ( '9' - s1 [ i ] + '0' ) ; } } if ( s1 [ 0 ] == '0' ) s1 [ 0 ] = '9' ; return s1 ; }
int count_triplets ( int a , int b , int c ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { for ( int k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) ans ++ ; } } } return ans ; }
bool topsy_turvy ( string s ) { for ( int i = 0 ; i < s . size ( ) ; i ++ ) { if ( s [ i ] == '2' s [ i ] == '4' s [ i ] == '5' s [ i ] == '6' s [ i ] == '7' s [ i ] == '9' ) { return false ; } } return true ; }
int sum_of_last_dig ( int n , int m ) { int sum = 0 ; int k = n / m ; int arr [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ]  ; } int rem = k % 10 ; int ans = k / 10 * sum ; for ( int i = 0 ; i < rem ; i ++ ) ans += arr [ i ]  ; return ans ; }
int total_pay ( int total_items , int price_of_one_item , int n , int m ) { int free_items = 0 ; int actual = 0 ; free_items = total_items / ( n + m )  ; actual = total_items - free_items  ; int amount = actual * price_of_one_item  ; return amount ; }
int min_operations ( int x , int y , int p , int q ) { if ( y % x != 0 ) return -1 ; int d = y / x  ; int a = 0 ; while ( d % p == 0 ) { d /= p ; a ++ ; } int b = 0 ; while ( d % q == 0 ) { d /= q ; b ++ ; } if ( d != 1 ) return -1 ; return a + b  ; }
bool is_mersenne ( int n ) { while ( n != 0 ) { int r = n % 2 ; if ( r == 0 ) return false ; n /= 2 ; } return true ; }
int find_third_digit ( int n ) { if ( n < 3 ) return 0 ; return ( n & 1 ) ? 1 : 6 ; }
bool is_odd_length ( int num ) { int count = 0 ; while ( num > 0 ) { num = num / 10 ; count ++ ; } if ( count % 2 != 0 ) return true ; return false ; }
int check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) count ++ ; } return count > 1 ; }
long long bytes ( int kilobytes ) { long long b = 0 ; b = kilobytes * 1024 ; return b ; }
int octahedral_num ( int n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
string check_equal ( string s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] != '1' && s [ i ] != '0' && s [ i ] != '8' ) return "No" ; } int start = 0 , end = s . length ( ) - 1 ; while ( start < end ) { if ( s [ start ] != s [ end ] ) return "No" ; start ++ ; end -- ; } return "Yes" ; }
bool is_undulating ( string n ) { if ( n . length ( ) <= 2 ) return false ; for ( int i = 2 ; i < n . length ( ) ; i ++ ) if ( n [ i - 2 ] != n [ i ] ) return false ; return true ; }
int first_digit ( int n ) { while ( n >= 10 ) n /= 10 ; return n ; }
int count_digit ( int n ) { if ( n == 0 ) return 0 ; return 1 + count_digit ( n / 10 ) ; }
bool is_divisible_by_5 ( string s ) { int n = s . length ( ) ; return ( s [ n - 1 ] == '0' s [ n - 1 ] == '5' ) ; }
int inv ( int a , int m ) { int m0 = m , t , q ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { q = a / m ; t = m  ; m = a % m  ; a = t  ; t = x0  ; x0 = x1 - q * x0  ; x1 = t  ; } if ( x1 < 0 ) x1 += m0  ; return x1  ; }
bool only_first_and_last_are_set ( int n ) { if ( n == 1 ) return true ; if ( n == 2 ) return false ; return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
int divide ( long long dividend , long long divisor ) { int sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? -1 : 1 ; dividend = abs ( dividend )  ; divisor = abs ( divisor )  ; long long quotient = 0 , temp = 0 ; for ( int i = 31 ; i >= 0 ; -- i ) { if ( temp + ( divisor << i ) <= dividend ) { temp += divisor << i ; quotient |= 1LL << i ; } } if ( sign == -1 ) quotient = - quotient ; return quotient ; }
char find_profession ( int level , int pos ) { if ( level == 1 ) return 'e' ; if ( find_profession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) return ( pos % 2 ) ? 'd' : 'e' ; return ( pos % 2 ) ? 'e' : 'd' ; }
bool has_close_elements ( vector < int > numbers , int threshold ) { for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < numbers . size ( ) ; j ++ ) { int distance = abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) return true ; } } return false ; }
int truncate_number ( int number ) { return number % 1 ; }
bool below_zero ( vector < operation > operations ) { int balance = 0 ; for ( auto op : operations ) { balance += op . second ; if ( balance < 0 ) return true ; } return false ; }
double mean_absolute_deviation ( vector < int > numbers ) { int sum_num = 0 ; for ( int num : numbers ) { sum_num += num ; } double mean = ( double ) sum_num / numbers . size ( ) ; double sum_abs_diff = 0 ; for ( int num : numbers ) { sum_abs_diff += abs ( num - mean ) ; } return sum_abs_diff / numbers . size ( ) ; }
vector < int > intersperse ( vector < int > numbers , int delimiter ) { vector < int > result ; if ( numbers . size ( ) == 0 ) return result ; for ( int i = 0 ; i < numbers . size ( ) - 1 ; i ++ ) { result . push_back ( numbers [ i ] ) ; result . push_back ( delimiter ) ; } result . push_back ( numbers [ numbers . size ( ) - 1 ] ) ; return result ; }
void sum_product ( vector < int > numbers ) { int sum_value = 0 ; int prod_value = 1 ; for ( int n : numbers ) { sum_value += n ; prod_value *= n ; } }
vector < string > all_prefixes ( string str ) { vector < string > result ; for ( int i = 1 ; i <= str . length ( ) ; i ++ ) { result . push_back ( str . substr ( 0 , i ) ) ; } return result ; }
vector < char > parse_music ( string music_string ) { vector < char > current ; vector < char > result ; for ( int i = 0 ; i < music_string . length ( ) + 1 ; i ++ ) { if ( i == music_string . length ( ) music_string [ i ] == ' ' ) { if ( current . first ( ) == 'o' ) result . push_back ( 4 ) ; if ( current . first ( ) == 'o|' ) result . push_back ( 2 ) ; if ( current . first ( ) == '.|' ) result . push_back ( 1 ) ; current . clear ( ) ; } else { current . push_back ( music_string [ i ] ) ; } } return result ; }
int strlen ( string s ) { return s . length ( ) ; }
vector < int > factorize ( int n ) { vector < int > factors ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { factors . push_back ( i ) ; n /= i ; } else i ++ ; } return factors ; }
string concatenate ( string str ) { string result ; for ( string s : str ) { result . push_back ( s ) ; } return result ; }
vector < int > get_positive ( vector < int > l ) { vector < int > result ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) if ( l [ i ] > 0 ) result . push_back ( l [ i ] ) ; return result ; }
vector < int > sort_even ( vector < int > l ) { vector < int > evens ; for ( int i = 0 ; i < l . size ( ) ; i += 2 ) { evens . push_back ( l [ i ] ) ; } sort ( evens . begin ( ) , evens . end ( ) ) ; vector < int > result ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 2 == 0 ) { result . push_back ( evens [ i / 2 ] ) ; } if ( i % 2 == 1 ) { result . push_back ( l [ i ] ) ; } } return result ; }
string decode_cyclic ( string s ) { vector < string > output ; for ( int i = 0 ; i <= s . length ( ) - 4 ; i += 3 ) { string x = s . substr ( i + 2 ) + s . substr ( i , i + 2 ) ; output . push_back ( x ) ; } return output ; }
int car_race_collision ( int n ) { return pow ( n , 2 ) ; }
vector < int > incr_list ( vector < int > l ) { vector < int > result ; for ( int i : l ) result . push_back ( i + 1 ) ; return result ; }
bool pairs_sum_to_zero ( vector < int > l ) { for ( int i = 0 ; i < l . size ( ) ; i ++ ) for ( int j = i + 1 ; j < l . size ( ) ; j ++ ) if ( l [ i ] + l [ j ] == 0 ) return true ; return false ; }
string change_base ( int x , int b ) { string ret ; while ( x > 0 ) { ret . push_back ( to_string ( x % b ) ) ; x /= b ; } return ret ; }
double median ( vector < int > l ) { sort ( l . begin ( ) , l . end ( ) ) ; if ( l . size ( ) % 2 == 1 ) return l [ l . size ( ) / 2 ] ; else return ( l [ l . size ( ) / 2 - 1 ] + l [ l . size ( ) / 2 ] ) / 2.0 ; }
string decode_shift ( string s ) { vector < char > result ; for ( char ch : s ) { int w = ( ch + 21 - "a" ) % 26 + "a" ; result . push_back ( w ) ; } return result ; }
bool below_threshold ( vector < int > l , int t ) { for ( auto n : l ) if ( n >= t ) return false ; return true ; }
bool correct_bracketing ( vector < char > brackets ) { int depth = 0 ; for ( auto b : brackets ) { if ( b == '<' ) depth ++ ; else depth -- ; if ( depth < 0 ) return false ; } return depth == 0 ; }
bool monotonic ( vector < int > l ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . size ( ) ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) incr = 1  ; if ( l [ i ] < l [ i - 1 ] ) decr = 1  ; } return incr + decr != 2 ; }
vector < int > derivative ( vector < int > xs ) { vector < int > result ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) result . push_back ( i * xs [ i ] ) ; return result ; }
int vowels_count ( string s ) { string vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch : s ) { if ( vowels . find ( ch ) != vowels . end ( ) ) count ++ ; } if ( s [ s . length ( ) - 1 ] == "y" s [ s . length ( ) - 1 ] == "Y" ) count ++ ; return count ; }
int digit_sum ( string s ) { int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( isupper ( s [ i ] ) ) sum += ( int ) s [ i ] ; } return sum ; }
int fruit_distribution ( string s , int n ) { vector < int > num1 ; vector < int > num2 ; bool flag = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( isdigit ( s [ i ] ) ) { if ( ! flag ) num1 . push_back ( s [ i ] ) ; if ( flag ) num2 . push_back ( s [ i ] ) ; } else if ( ! flag && num1 . size ( ) > 0 ) flag = true ; } return n - ( int ) num1 . size ( ) - ( int ) num2 . size ( ) ; }
vector < int > pluck ( vector < int > arr ) { vector < int > result ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( ! result . size ( ) ) { result . push_back ( arr [ i ] ) ; result . push_back ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } } return result ; }
vector < int > strange_sort_list ( vector < int > lst ) { vector < int > res ; sort ( lst . begin ( ) , lst . end ( ) ) ; int l = 0 , r = lst . size ( ) - 1 ; while ( l < r ) { res . push_back ( lst [ l ] ) ; l ++ ; res . push_back ( lst [ r ] ) ; r -- ; } if ( l == r ) res . push_back ( lst [ l ] ) ; return res ; }
double triangle_area ( double a , double b , double c ) { if ( a + b <= c a + c <= b b + c <= a ) return -1.0 ; double s = ( a + b + c ) / 2 ; double area = sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; return area ; }
bool will_it_fly ( vector < int > q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . size ( ) ; i ++ ) { if ( q [ i ] != q [ q . size ( ) - 1 ] ) return false ; sum += q [ i ] ; } return sum <= w ; }
bool is_cube ( int a ) { a = abs ( a ) ; int i = round ( cbrt ( a ) ) ; return i * i * i == a ; }
int hex_key ( string num ) { string key = "2357BD" ; int total = 0 ; for ( int i = 0 ; i < num . length ( ) ; i ++ ) if ( key . find ( num [ i ] ) != key . end ( ) ) total += 1 ; return total ; }
string decimal_to_binary ( int dec ) { vector < string > ans ; if ( dec != 0 ) { while ( dec > 0 ) { ans . push_back ( to_string ( dec % 2 ) ) ; dec /= 2 ; } } else ans += "0" ; return "db" + ans . to_string ( ) + "db" ; }
bool prime_length ( string s ) { int l = s . length ( ) ; if ( l < 2 ) return false ; for ( int i = 2 ; i < l ; i ++ ) if ( l % i == 0 ) return false ; return true ; }
int starts_one_ends ( int n ) { if ( n < 1 ) return 0 ; if ( n == 1 ) return 1 ; return 18 * pow ( 10 , n - 2 ) ; }
int add ( vector < int > lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . size ( ) ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; }
vector < pair < int , int > > get_row ( vector < vector < int > > lst , int x ) { vector < pair < int , int > > coords ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { for ( int j = lst [ i ] . size ( ) - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] [ j ] == x ) coords . push_back ( make_pair ( i , j ) ) ; } } return coords ; }
int next_smallest ( vector < int > lst ) { sort ( lst . begin ( ) , lst . end ( ) ) ; for ( int i = 1 ; i < lst . size ( ) ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) return lst [ i ] ; } return -1 ; }
bool any_int ( int a , int b , int c ) { if ( round ( a ) != a || round ( b ) != b || round ( c ) != c ) return false ; return a + b == c a + c == b b + c == a ; }
vector < int > count_up_to ( int n ) { vector < int > primes ; for ( int i = 2 ; i <= n ; i ++ ) { bool is_prime = true ; for ( int j = 2 ; j <= i ; j ++ ) { if ( i % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) primes . push_back ( i ) ; } return primes ; }
int closest_integer ( int value ) { float w = ( float ) value ; return round ( w ) ; }
vector < int > make_a_pile ( int n ) { vector < int > result ; for ( int i = 0 ; i < n ; i ++ ) result . push_back ( n + 2 * i ) ; return result ; }
vector < string > words_string ( string s ) { stack < string > current ; vector < string > words ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) s [ i ] == ' ' s [ i ] == ',' ) { if ( ! current . empty ( ) ) { words . push_back ( current . top ( ) ) ; current . pop ( ) ; } } else { current . push ( s [ i ] ) ; } } return words ; }
string rounded_avg ( int n , int m ) { if ( n > m ) return -1 ; int num = ( n + m ) / 2 ; vector < string > ret ; while ( num > 0 ) { ret . push_back ( to_string ( num % 2 ) ) ; num /= 2 ; } return ret ; }
vector < int > unique_digits ( string x ) { vector < int > digits ; for ( auto n : x ) { bool is_unique = true ; for ( auto c : n ) { if ( c % 2 == 0 ) { is_unique = false ; break ; } } if ( is_unique ) digits . push_back ( n ) ; } sort ( digits . begin ( ) , digits . end ( ) ) ; return digits ; }
int count_nums ( vector < int > arr ) { int num = 0 ; for ( int n : arr ) { int neg = n < 0 ? -1 : 1 ; n = abs ( n ) ; vector < int > digits ; for ( char c : n ) digits . push_back ( c - '0' ) ; digits [ 0 ] *= neg ; int sum = 0 ; for ( int d : digits ) sum += d ; if ( sum > 0 ) num += 1 ; } return num ; }
bool move_one_ball ( vector < int > arr ) { if ( arr . size ( ) <= 1 ) return true ; int num = 0 ; for ( int i = 1 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) num ++ ; } if ( arr [ arr . size ( ) - 1 ] > arr [ 0 ] ) num ++ ; if ( num < 2 ) return true ; return false ; }
string exchange ( vector < int > lst1 , vector < int > lst2 ) { int odd = 0 ; int even = 0 ; for ( auto n : lst1 ) { if ( n % 2 == 1 ) odd ++ ; } for ( auto n : lst2 ) { if ( n % 2 == 0 ) even ++ ; } if ( even >= odd ) return "YES" ; return "NO" ; }
vector < string > odd_count ( vector < string > lst ) { vector < string > results ; string original_str = "the number of odd elements in the string i of the input." ; for ( string s : lst ) { int sum = 0 ; for ( char d : s ) { if ( isdigit ( d ) && d % 2 == 1 ) sum ++ ; } vector < string > result ; for ( char c : original_str ) { if ( c == 'i' ) result . push_back ( to_string ( sum ) ) ; else result . push_back ( c ) ; } results . push_back ( result ) ; } return results ; }
int minSubArraySum ( vector < int > nums ) { int min_sum = INT_MAX ; int sum = 0 ; for ( auto num : nums ) { sum += num ; if ( min_sum > sum ) min_sum = sum ; if ( sum > 0 ) sum = 0 ; } return min_sum ; }
int max_fill ( vector < int > grid , int capacity ) { int res = 0 ; for ( auto well : grid ) { int sum = 0 ; for ( auto n : well ) sum += n ; if ( sum > 0 ) res += ( sum - 1 ) / capacity + 1 ; } return res ; }
vector < string > select_words ( string s , int n ) { unordered_set < char > vowels = "aeiouAEIOU" ; vector < string > current ; vector < string > result ; int consonant_num = 0 ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) s [ i ] == ' ' ) { if ( consonant_num == n ) { result . push_back ( current . begin ( ) ) ; } current . clear ( ) ; consonant_num = 0 ; } else { current . push_back ( s [ i ] ) ; if ( vowels . find ( s [ i ] ) == vowels . end ( ) ) consonant_num ++ ; } } return result ; }
int solution ( vector < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . size ( ) ; i += 2 ) { if ( lst [ i ] % 2 == 1 ) { sum += lst [ i ] ; } } return sum ; }
int add_elements ( int arr [ ] , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( -99 <= arr [ i ] <= 99 ) sum += arr [ i ] ; } return sum ; }
vector < int > get_odd_collatz ( int n ) { vector < int > odd_collatz ; while ( n > 1 ) { if ( n % 2 == 1 ) { odd_collatz . push_back ( n ) ; n = n * 3 + 1 ; } else n /= 2 ; } odd_collatz . push_back ( 1 ) ; sort ( odd_collatz . begin ( ) , odd_collatz . end ( ) ) ; return odd_collatz ; }
bool is_sorted ( vector < int > lst ) { for ( int i = 1 ; i < lst . size ( ) ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) return false ; if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) return false ; } return true ; }
string intersection ( pair < int , int > interval1 , pair < int , int > interval2 ) { int inter1 = max ( interval1 . first , interval2 . first ) ; int inter2 = min ( interval1 . second , interval2 . second ) ; int l = inter2 - inter1 ; if ( l < 2 ) return "NO" ; for ( int i = 2 ; i < l ; i ++ ) if ( l % i == 0 ) return "NO" ; return "YES" ; }
int prod_signs ( vector < int > arr ) { if ( arr . size ( ) == 0 ) return -328 ; int sum = 0 ; int prods = 1  ; for ( int i : arr ) { sum += abs ( i ) ; if ( i == 0 ) prods = 0 ; if ( i < 0 ) prods = - prods ; } return sum * prods ; }
vector < int > minPath ( vector < vector < int > > grid , int k ) { int n = grid . size ( ) ; int min_num = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { vector < int > tmp ; if ( i != 0 ) { tmp . push_back ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . push_back ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . push_back ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . push_back ( grid [ i ] [ j + 1 ] ) ; } min_num = min ( tmp . begin ( ) , tmp . end ( ) ) ; } } } vector < int > ans ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . push_back ( 1 ) ; } else { ans . push_back ( min_num ) ; } } return ans ; }
long long digits ( long long n ) { long long prod = 1 ; for ( long long digit : n ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) prod = 1 ; prod *= digit - '0' ; } } return prod ; }
bool is_nested ( string s ) { int count = 0 ; int max_count = 0 ; for ( char ch : s ) { if ( ch == '[' ) count ++ ; if ( ch == ']' ) count -- ; if ( count < 0 ) count = 0 ; if ( count > max_count ) max_count = count ; if ( count <= max_count - 2 ) return true ; } return false ; }
int sum_squares ( vector < int > lst ) { int sum = 0 ; for ( int i : lst ) { sum += ceil ( i ) * ceil ( i ) ; } return sum ; }
int can_arrange ( vector < int > arr ) { int index = -1 ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
int largest_smallest_integers ( vector < int > lst ) { int max_neg = 0 , min_pos = 0 ; for ( int n : lst ) { if ( n < 0 && ( max_neg == 0 n > max_neg ) ) max_neg = n ; if ( n > 0 && ( min_pos == 0 n < min_pos ) ) min_pos = n ; } cout << max_neg << " " << min_pos ; }
string fix_spaces ( string text ) { vector < string > res ; int space_len = 0 ; for ( int i = 0 ; i < text . length ( ) + 1 ; i ++ ) { if ( i == text . length ( ) text [ i ] != ' ' ) { if ( space_len == 1 ) res . push_back ( '_' ) ; if ( space_len == 2 ) res . push_back ( '__' ) ; if ( space_len > 2 ) res . push_back ( '-' ) ; space_len = 0 ; if ( i != text . length ( ) ) res . push_back ( text [ i ] ) ; } else { space_len ++ ; } } return res ; }
string file_name_check ( string file_name ) { int digit_num = 0 , dot_num = 0 ; if ( file_name . size ( ) < 5 or ! isalpha ( file_name [ 0 ] ) ) return "No" ; string suffix = file_name . substr ( file_name . size ( ) - 4 , suffix . length ( ) ) ; if ( suffix != ".txt" and suffix != ".exe" and suffix != ".dll" ) return "No" ; for ( char c : file_name ) { if ( isdigit ( c ) ) digit_num ++ ; if ( c == '.' ) dot_num ++ ; } if ( digit_num > 3 dot_num != 1 ) return "No" ; return "Yes" ; }
int sum_squares ( vector < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { if ( i % 3 == 0 ) sum += lst [ i ] * lst [ i ]  ; else if ( i % 4 == 0 ) sum += lst [ i ] * lst [ i ] * lst [ i ]  ; else sum += lst [ i ]  ; } return sum ; }
string words_in_sentence ( string sentence ) { vector < string > result ; vector < char > current ; for ( int i = 0 ; i <= sentence . length ( ) ; i ++ ) { if ( i == sentence . length ( ) sentence [ i ] == ' ' ) { bool is_prime = true ; int l = current . size ( ) ; if ( l < 2 ) is_prime = false ; for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { result . push_back ( current . to_string ( ) + " " ) ; current . clear ( ) ; } else current . push_back ( sentence [ i ] ) ; } } if ( result . size ( ) > 0 ) result . pop_back ( ) ; return result ; }
bool simplify ( string x , string n ) { int a , b , c , d ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) if ( x [ i ] == '/' ) a = x . substr ( 0 , i ) ; for ( int i = 0 ; i < n . length ( ) ; i ++ ) if ( n [ i ] == '/' ) c = n . substr ( 0 , i ) ; return ( a * c ) % ( b * d ) == 0 ; }
int specialFilter ( vector < int > nums ) { int count = 0 ; for ( auto & num : nums ) { if ( num > 10 ) { string w = to_string ( num ) ; if ( w [ 0 ] % 2 == 1 && w [ - 1 ] % 2 == 1 ) count ++ ; } } return count ; }
int get_max_triples ( int n ) { int arr [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) arr [ i ] = i * i - i + 1 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) count ++ ; } } } return count ; }
int double_the_difference ( vector < int > lst ) { int sum = 0 ; for ( auto d : lst ) { int num = round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) sum += num * num ; } } return sum ; }
vector < int > compare ( vector < int > game , vector < int > guess ) { vector < int > result ; for ( int i = 0 ; i < game . size ( ) ; i ++ ) result . push_back ( abs ( game [ i ] - guess [ i ] ) ) ; return result ; }
string strongest_extension ( string class_name , vector < string > extensions ) { string strongest = "" ; int max = INT_MIN ; for ( auto extension : extensions ) { int strength = 0 ; for ( char chr : extension ) { if ( isupper ( chr ) ) { strength ++ ; } if ( islower ( chr ) ) { strength -- ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return class_name + "." + strongest ; }
string int_to_mini_roman ( int number ) { int num [ ] = { 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 } ; string sym [ ] = { "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" } ; int pos = 0 ; string res ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res . push_back ( sym [ pos ] ) ; number -= num [ pos ] ; } if ( number > 0 ) pos ++ ; } return res ; }
pair < int , int > eat ( int number , int need , int remaining ) { return need > remaining ? { number + remaining , 0 } : { number + need , remaining - need } ; }
int do_algebra ( stack < int > & ops , stack < int > & operands ) { stack < int > nums ; stack < int > current_ops ; for ( int i = current_ops . size ( ) - 1 ; i >= 0 ; -- i ) { if ( current_ops [ i ] == "**" ) { nums [ i ] = pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . pop ( i + 1 ) ; current_ops . pop ( i ) ; } } for ( int i = 0 ; i < current_ops . size ( ) ; ++ i ) { if ( current_ops [ i ] == '*' ) { nums [ i ] *= nums [ i + 1 ]  ; nums . pop ( i + 1 ) ; current_ops . pop ( i ) ; } else if ( current_ops [ i ] == "//" ) { nums [ i ] /= nums [ i + 1 ]  ; nums . pop ( i + 1 ) ; current_ops . pop ( i ) ; } else  } for ( int i = 0 ; i < current_ops . size ( ) ; ++ i ) { if ( current_ops [ i ] == "+" ) { nums [ i ] += nums [ i + 1 ]  ; nums . pop ( i + 1 ) ; current_ops . pop ( i ) ; } else if ( current_ops [ i ] == "-" ) { nums [ i ] -= nums [ i + 1 ]  ; nums . pop ( i + 1 ) ; current_ops . pop ( i ) ; } else  } return nums [ 0 ] ; }
vector < int > generate_integers ( int a , int b ) { int lower = max ( 2 , min ( a , b ) ) ; int upper = min ( 8 , max ( a , b ) ) ; vector < int > result ; for ( int i = lower ; i <= upper ; i = i + 2 ) { result . push_back ( i ) ; } return result ; }
bool isStepNum ( int n ) { int prev_digit = -1 ; while ( n > 0 ) { int cur_digit = n % 10 ; if ( prev_digit == -1 ) { prev_digit = cur_digit ; } else { if ( abs ( prev_digit - cur_digit ) != 1 ) return false ; } prev_digit = cur_digit ; n /= 10 ; } return true ; }
ll num_of_ways ( ll n , ll k ) { ll p = 1 ; if ( k % 2 ) p = -1 ; return ( ( n - 1 ) * pow ( 2 , k ) + p * ( n - 1 ) ) / n ; }
vector < int > find_divisors ( int n ) { vector < int > v ; for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) v . push_back ( i ) ; else { v . push_back ( i ) ; v . push_back ( n / i ) ; } } } return v ; }
int egg_drop ( int n , int k ) { if ( k == 1 k == 0 ) return k ; if ( n == 1 ) return k ; int min = INT_MAX ; for ( int x = 1 ; x <= k ; x ++ ) { int res = max ( egg_drop ( n - 1 , x - 1 ) , egg_drop ( n , k - x ) ) ; if ( res < min ) min = res ; } return min + 1 ; }
bool is_power_of_two ( int n ) { return ceil ( log2 ( n ) ) == floor ( log2 ( n ) ) ; }
int shortest_palindrome ( string s ) { int n = s . size ( ) ; vector < string > v ; for ( int i = 0 ; i < n ; i ++ ) { int l = i , r = i ; string ans1 = "" , ans2 = "" ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans1 += s [ l ]  ; l -- ; r ++ ; } l = i - 1 , r = i  ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans2 += s [ l ]  ; l -- ; r ++ ; } v . push_back ( ans1 ) ; v . push_back ( ans2 ) ; } int ans = v [ 0 ]  ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) if ( v [ i ] != "" ) ans = min ( ans , v [ i ] ) ; return ans ; }
int minimum_adjacent_difference ( int a [ ] , int n , int k ) { int min_diff = INT_MAX ; for ( int i = 0 ; i <= k ; i ++ ) { int max_diff = INT_MIN ; for ( int j = 0 ; j <= n - k ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) max_diff = max ( max_diff , a [ p + 1 ] - a [ p ] ) ; } min_diff = min ( min_diff , max_diff ) ; } return min_diff ; }
int cal ( vector < int > a , int mid ) { int chocolate = 0 ; for ( auto i : a ) { if ( i >= mid ) chocolate += i - mid ; } return chocolate ; }
ll check ( ll v , vector < ll > a , ll m ) { ll tec = 0 , ans = 0 ; vector < ll > b ( a . size ( ) + 3 ) ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { tec -= b [ i ]  ; if ( a [ i ] + tec < v ) { ll mov = v - a [ i ] - tec  ; ans = ans + mov  ; tec += mov  ; b [ i + 2 ] = mov  ; } } return ans <= m ; }
int largest_num ( vector < int > arr ) { int res = 0 ; sort ( arr . begin ( ) , arr . end ( ) ) ; int l = 0 , r = arr . size ( ) - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = max ( res , max ( arr [ l ] , arr [ r ] ) ) ; return res  ; } else if ( sum < 0 ) l ++ ; else r -- ; } return res  ; }
int binary_search ( vector < int > p , int n ) { int i = 0 ; int j = p . size ( ) - 1 ; int index = -1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
int find_min_length ( vector < int > arr ) { int index = arr . size ( ) - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) index -- ; return index ; }
int min_digits ( int n , int k ) { int digits_num = floor ( log10 ( n ) + 1 ) ; int temp_sum = 0 ; int temp = digits_num  ; int result = 0 ; int x , v ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10  ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = n / ( ( int ) pow ( 10 , temp - 1 ) ) ; temp_sum += v % 10  ; if ( temp_sum >= k ) { v /= 10 ; v += 1 ; result = v * pow ( 10 , temp ) ; break ; } temp -= 1  ; } x = result - n  ; return x  ; } return -1 ; }
int check_for_perfect_square ( int arr [ ] , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) high = mid - 1 ; else low = mid + 1 ; } return -1 ; }
int min_flips ( vector < vector < char > > mat , string s ) { int n = mat . size ( ) , m = mat [ 0 ] . size ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s [ i + j ] - '0' ) count ++ ; } } return count ; }
vector < vector < int > > construct_tree ( int n , vector < vector < int > > edges ) { vector < vector < int > > adjl ( n ) ; for ( auto e : edges ) { int u = e [ 0 ] ; int v = e [ 1 ] ; adjl [ u ] . push_back ( v ) ; adjl [ v ] . push_back ( u ) ; } return adjl ; }
int find_sum_of_values ( int v , int parent [ ] , int values_children [ ] ) { int cur_node = v ; int sum = 0  ; while ( cur_node != -1 ) { sum += values_children [ cur_node ]  ; cur_node = parent [ cur_node ]  ; } return sum ; }
long long get_distinct ( long long d , long long count ) { long long num = 0 ; count = pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; }
bool is_increasing ( vector < int > arr ) { for ( int i = 0 ; i < arr . size ( ) - 1 ; i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) return false ; return true ; }
int min_adj_swaps ( vector < vector < int > > mat ) { int n = mat . size ( ) ; int cnt_zero [ n ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 ; j -- ) { if ( mat [ i ] [ j ] != 0 ) break ; cnt_zero [ i ] ++ ; } } int cnt_swaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cnt_zero [ i ] < ( n - i - 1 ) ) { int first = i  ; while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) first ++ ; if ( first == n ) return -1 ; while ( first > i ) { swap ( cnt_zero [ first ] , cnt_zero [ first - 1 ] ) ; first -- ; cnt_swaps ++ ; } } } return cnt_swaps ; }
int solve ( stack < int > & values , stack < int > & salary , int mod ) { long long ret = 1  ; int amt = 0 ; sort ( values . begin ( ) , values . end ( ) ) ; sort ( salary . begin ( ) , salary . end ( ) ) ; while ( salary . size ( ) ) { while ( values . size ( ) && values . top ( ) >= salary . top ( ) ) { amt ++ ; values . pop ( ) ; } if ( amt == 0 ) return 0 ; ret *= amt -- ; ret %= mod  ; salary . pop ( ) ; } return ret ; }
vector < int > organize_in_order ( vector < int > vec , vector < int > op , int n ) { vector < int > result ( n ) ; sort ( vec . begin ( ) , vec . end ( ) ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; }
int count_points ( int n , int m , int a [ ] , int b [ ] , int x , int y ) { sort ( a , a + n ) ; sort ( b , b + m ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) break ; if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else j ++ ; } } return count ; }
bool are_same ( int a [ ] , int b [ ] ) { sort ( a , a + n ) ; sort ( b , b + n ) ; return a == b ; }
int count_number_of_strings ( string s ) { int n = s . length ( ) - 1 ; int count = pow ( 2 , n ) ; return count ; }
vector < int > prime_power ( int x ) { vector < int > prime_pow ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1  ; while ( x % i == 0 ) { x /= i ; p *= i ; } prime_pow . push_back ( p ) ; } } if ( x > 1 ) prime_pow . push_back ( x ) ; return prime_pow ; }
int is_perfect ( long double n0 ) { long double n = sqrt ( n0 ) ; if ( floor ( n ) != ceil ( n ) ) return 0 ; return 1 ; }
int find_sum ( int l , int r ) { vector < int > arr ; for ( int i = 0 , x = 2 ; i <= r ; i += 2 ) { arr . push_back ( i + x ) ; if ( i + 1 <= r ) arr . push_back ( i + 1 + x ) ; x *= -1 ; } int sum = 0 ; for ( int i = l ; i <= r ; i ++ ) sum += arr [ i ] ; return sum ; }
int results ( int n , int k ) { return round ( cbrt ( n ) ) ; }
vector < int > factors ( int n ) { vector < int > v ; v . push_back ( 1 ) ; for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . push_back ( i ) ; if ( n / i != i ) v . push_back ( n / i ) ; } } return v ; }
int smallest_num ( int n ) { float x = pow ( 10.0 , ( n - 1 ) / 2.0 ) ; return ceil ( x ) ; }
int smallest ( string s ) { int a [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = s [ i ] - '0' ; } vector < int > b ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a [ i ] % 2 != 0 ) b . push_back ( a [ i ] ) ; } sort ( b . begin ( ) , b . end ( ) ) ; if ( b . size ( ) > 1 ) return b [ 0 ] * 10 + b [ 1 ] ; return -1 ; }
vector < float > diagonals ( int a , int b , int c , int d ) { vector < float > ans ; ans . push_back ( sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . push_back ( sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; }
int find_number_of_digits ( int n , int base ) { int dig = floor ( log ( n ) / log ( base ) ) + 1  ; return dig ; }
double n_gon ( int n ) { double pro_angle_var ; if ( n % 4 == 0 ) { pro_angle_var = pi * ( 180.0 / n ) / 180 ; } else { pro_angle_var = pi * ( 180.0 / ( 2 * n ) ) / 180 ; } double neg_x = 1.0e+99 , pos_x = -1.0e+99 , neg_y = 1.0e+99 , pos_y = -1.0e+99  ; for ( int j = 0 ; j < n ; ++ j ) { double px = cos ( 2 * ( pi * j / n + pro_angle_var ) ; double py = sin ( 2 * ( pi * j / n + pro_angle_var ) ) ; neg_x = min ( neg_x , px )  ; pos_x = max ( pos_x , px ) ; neg_y = min ( neg_y , py )  ; pos_y = max ( pos_y , py )  ; } double opt2 = max ( pos_x - neg_x , pos_y - neg_y )  ; return ( double ) opt2 / sin ( pi / n ) / 2 ; }
int find_max_k ( int n ) { int p = log2 ( n ) ; return pow ( 2 , p ) ; }
int nth_fibo ( int n ) { double a = ( pow ( 5 , 0.5 ) + 1 ) / 2 ; double b = ( - pow ( 5 , 0.5 ) + 1 ) / 2 ; double r = pow ( 5 , 0.5 ) ; double ans = ( pow ( a , n ) - pow ( b , n ) ) / r ; return ( int ) ans ; }
float find_prob ( int l , int r ) { int count_of_ps = floor ( sqrt ( r ) ) - ceil ( sqrt ( l ) ) + 1  ; int total = r - l + 1 ; float prob = count_of_ps / total ; return prob ; }
int previous_fibonacci ( int n ) { double a = n / ( ( 1 + sqrt ( 5 ) ) / 2.0 ) ; return round ( a ) ; }
vector < int > dist_prime ( vector < int > arr , vector < int > all_primes ) { vector < int > list ; for ( int i = 0 ; i < all_primes . size ( ) ; i ++ ) { for ( int j = 0 ; j < arr . size ( ) ; j ++ ) { if ( arr [ j ] % i == 0 ) { list . push_back ( i ) ; break ; } } } return list ; }
vector < int > get_array ( int n ) { vector < int > ans ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) ans . push_back ( p2 ) ; n >>= 1 ; p2 *= 2 ; } return ans ; }
int maximum_length ( vector < int > a ) { int counts [ 11 ] = { 0 } ; int ans = 0 ; for ( int index = 0 ; index < a . size ( ) ; index ++ ) { counts [ a [ index ] ] += 1 ; vector < int > k ; for ( auto i : counts ) { if ( i != 0 ) k . push_back ( i ) ; } sort ( k . begin ( ) , k . end ( ) ) ; if ( k . size ( ) == 1 || ( k [ 0 ] == k [ k . size ( ) - 2 ] && k . back ( ) - k [ k . size ( ) - 2 ] == 1 ) || ( k [ 0 ] == 1 and k [ 1 ] == k . back ( ) ) ) ans = index ; } return ans + 1 ; }
int max_edges ( int n ) { int edges = floor ( n * n / 4 ) ; return edges ; }
int find_k ( int n , int k ) { vector < int > a ; for ( int i = 1 ; i < n ; i ++ ) if ( i % 2 == 1 ) a . push_back ( i ) ; for ( int i = 1 ; i < n ; i ++ ) if ( i % 2 == 0 ) a . push_back ( i ) ; return a [ k - 1 ] ; }
bool is_keith ( int x , int temp ) { vector < int > terms ; int n = 0 ; while ( temp > 0 ) { terms . push_back ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } reverse ( terms . begin ( ) , terms . end ( ) ) ; int next_term = 0 , i = n  ; while ( next_term < x ) { next_term = 0 ; for ( int j = 1 ; j <= n ; j ++ ) next_term += terms [ i - j ] ; terms . push_back ( next_term ) ; i ++ ; } return next_term == x ; }
bool factors ( int n , int k ) { vector < int > v ; while ( n % 2 == 0 ) { v . push_back ( 2 ) ; n /= 2 ; } if ( v . size ( ) >= k ) return true ; for ( int i = 3 ; i * i <= n ; i = i + 2 ) { if ( n % i == 0 ) { n = n / i ; v . push_back ( i ) ; } if ( v . size ( ) >= k ) return true ; } if ( n > 2 ) v . push_back ( n ) ; if ( v . size ( ) >= k ) return true ; return false ; }
vector < string > separate_paren_groups ( string paren_string ) { vector < string > all_parens ; vector < char > current_paren ; int current_depth = 0 ; for ( char c : paren_string ) { if ( c == '(' ) { current_depth ++ ; current_paren . push_back ( c ) ; } else if ( c == ')' ) { current_depth -- ; current_paren . push_back ( c ) ; if ( current_depth == 0 ) { all_parens . push_back ( current_paren . join ( ) ) ; current_paren . clear ( ) ; } } } return all_parens ; }
vector < int > parse_nested_parens ( string paren_string ) { vector < int > all_levels ; int level = 0 ; int max_level = 0 ; for ( int i = 0 ; i < paren_string . length ( ) ; i ++ ) { char chr = paren_string [ i ] ; if ( chr == '(' ) { level ++ ; if ( level > max_level ) max_level = level  ; } if ( chr == ')' ) { level -- ; if ( level == 0 ) { all_levels . push_back ( max_level ) ; max_level = 0 ; } } } return all_levels ; }
vector < string > filter_by_substring ( vector < string > strings , string substring ) { vector < string > result ; for ( string s : strings ) { if ( s . find ( substring ) != string :: npos ) result . push_back ( s ) ; } return result ; }
vector < int > rolling_max ( vector < int > numbers ) { int running_max = 0 ; vector < int > result ; for ( int n : numbers ) { if ( n > running_max ) running_max = n ; result . push_back ( running_max ) ; } return result ; }
string make_palindrome ( string s ) { if ( s . length ( ) == 0 ) return "" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { string r_str = s . substr ( i ) ; if ( r_str == r_str . back ( ) ) { string n_str = s . substr ( 0 , i ) ; string n2_str = n_str . pop_back ( ) ; return s + n2_str  ; } } return s . substr ( 0 , s . length ( ) - 2 ) + s . substr ( 0 , s . length ( ) - 1 ) ; }
string string_xor ( string a , string b ) { vector < string > result ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { if ( a [ i ] == b [ i ] ) { result . push_back ( "0" ) ; } else { result . push_back ( "1" ) ; } } return result ; }
string longest ( vector < string > strings ) { if ( strings . size ( ) == 0 ) return "" ; int max_len = * max_element ( strings . begin ( ) , strings . end ( ) ) ; for ( string s : strings ) { if ( s . size ( ) == max_len ) return s ; } return "" ; }
string string_sequence ( int n ) { string s ; for ( int i = 0 ; i < n ; i ++ ) { s . push_back ( to_string ( i ) ) ; s . push_back ( " " ) ; } s . push_back ( to_string ( n ) ) ; return s ; }
int count_distinct_characters ( string s ) { set < char > distinct ; for ( char c : tolower ( s ) ) { distinct . insert ( c ) ; } return distinct . size ( ) ; }
int how_many_times ( string s , string sub ) { int times = 0 ; for ( int i = 0 ; i <= s . size ( ) - sub . size ( ) ; i ++ ) if ( s . substr ( i , sub . size ( ) ) == sub ) times ++ ; return times ; }
string sort_numbers ( vector < string > numbers ) { map < string , int > to_num = { "zero" , 0 } , { "one" , 1 } , { "two" , 2 } , { "three" , 3 } , { "four" , 4 } , { "five" , 5 } , { "six" , 6 } , { "seven" , 7 } , { "eight" , 8 } , { "nine" } } ; map < string , string > from_num = { 0 , "zero" } ; map < string , int > ints ; vector < string > current ; for ( int i = 0 ; i <= numbers . size ( ) ; i ++ ) { if ( i == numbers . size ( ) numbers [ i ] == ' ' ) { if ( to_num . find ( current . first ( ) ) != to_num . end ( ) ) { ints . push_back ( to_num [ current . first ( ) ] ) ; current . clear ( ) ; } } else { current . push_back ( numbers [ i ] ) ; } } sort ( ints . begin ( ) , ints . end ( ) ) ; vector < string > result ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { result . push_back ( from_num [ ints [ i ] ] ) ; if ( i != ints . size ( ) - 1 ) { result . push_back ( " " ) ; } } return result ; }
pair < int , int > find_closest_elements ( vector < int > numbers ) { pair < int , int > closest_pair = { numbers [ 0 ] , numbers [ 1 ] } ; int distance = abs ( closest_pair . first - closest_pair . second ) ; for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < numbers . size ( ) ; j ++ ) { if ( abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closest_pair . first = numbers [ i ] ; closest_pair . second = numbers [ j ] ; distance = abs ( numbers [ i ] - numbers [ j ] ) ; } } } sort ( closest_pair . begin ( ) , closest_pair . end ( ) ) ; return closest_pair ; }
vector < double > rescale_to_unit ( vector < int > numbers ) { int min_num = * min_element ( numbers . begin ( ) , numbers . end ( ) ) ; int max_num = * max_element ( numbers . begin ( ) , numbers . end ( ) ) ; vector < double > result ; for ( int n : numbers ) { result . push_back ( ( n - min_num ) / ( max_num - min_num ) ) ; } return result ; }
vector < int > filter_integers ( vector < int > values ) { vector < int > result ; for ( auto e : values ) { if ( is_int ( e ) ) result . push_back ( e ) ; } return result ; }
vector < int > remove_duplicates ( vector < int > numbers ) { unordered_map < int , int > counter ; for ( auto i : numbers ) { counter [ i ] ++ ; } vector < int > result ; for ( auto i : numbers ) { if ( counter [ i ] == 1 ) { result . push_back ( i ) ; } } return result ; }
string flip_case ( string s ) { vector < string > result ; for ( auto c : s ) { if ( islower ( c ) ) result . push_back ( c . toupper ( ) ) ; else result . push_back ( c . lower ( ) ) ; } return result ; }
vector < string > filter_by_prefix ( vector < string > strings , string prefix ) { vector < string > result ; for ( int i = 0 ; i < strings . size ( ) ; i ++ ) { if ( strings [ i ] . startswith ( prefix ) ) result . push_back ( strings [ i ] ) ; } return result ; }
double find_zero ( vector < int > xs ) { double ans = 0 ; double value = 0 ; for ( int i = 0 ; i < xs . size ( ) ; i ++ ) { value += xs [ i ] * pow ( ans , i ) ; } while ( abs ( value ) > 1e-6 ) { double driv = 0 ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) { driv += xs [ i ] * pow ( ans , i - 1 ) * i ; } ans -= value / driv  ; value = 0 ; for ( int i = 0 ; i < xs . size ( ) ; i ++ ) { value += xs [ i ] * pow ( ans , i ) ; } } return ans ; }
vector < int > sort_third ( vector < int > l ) { vector < int > thirds ; for ( int i = 0 ; i < l . size ( ) ; i += 3 ) thirds . push_back ( l [ i ] ) ; sort ( thirds . begin ( ) , thirds . end ( ) ) ; vector < int > result ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 3 == 0 ) result . push_back ( thirds [ i / 3 ] ) ; else result . push_back ( l [ i ] ) ; } return result ; }
set < int > unique ( string l ) { set < int > result ; result . insert ( l ) ; sort ( result . begin ( ) , result . end ( ) ) ; return result ; }
int max_element ( int l [ ] ) { return * max_element ( l , l + n ) ; }
bool triples_sum_to_zero ( vector < int > l ) { for ( int i = 0 ; i < l . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < l . size ( ) ; j ++ ) { for ( int k = j + 1 ; k < l . size ( ) ; k ++ ) if ( l [ i ] + l [ j ] + l [ k ] == 0 ) return true ; } } return false ; }
int fib4 ( int n ) { int results [ n + 1 ] = { 0 , 0 , 2 , 0 } ; for ( int i = 4 ; i <= n ; i ++ ) results [ i ] = results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ; return results [ n ] ; }
bool is_palindrome ( string text ) { string pr = text . substr ( 0 , -1 ) ; return ( pr == text ) ; }
string remove_vowels ( string text ) { vector < char > result ; string vowels = "aeiou" ; for ( char ch : text ) { if ( ! vowels . count ( ch ) ) result . push_back ( ch ) ; } return result ; }
bool same_chars ( string s0 , string s1 ) { set < char > set0 ; for ( char c : s0 ) set0 . insert ( c ) ; set < char > set1 ; for ( char c : s1 ) set1 . insert ( c ) ; return set0 == set1 ; }
set < int > common ( set < int > l1 , set < int > l2 ) { set < int > us ; for ( auto e1 : l1 ) { for ( auto e2 : l2 ) { if ( e1 == e2 ) us . insert ( e1 ) ; } } sort ( us . begin ( ) , us . end ( ) ) ; return ret ; }
bool correct_bracketing ( vector < char > brackets ) { int depth = 0 ; for ( auto b : brackets ) { if ( b == '(' ) depth ++ ; else depth -- ; if ( depth < 0 ) return false ; } return depth == 0 ; }
string circular_shift ( int x , int shift ) { string s = to_string ( x ) ; if ( shift > s . length ( ) ) { reverse ( s . begin ( ) , s . end ( ) ) ; } return s . substr ( - shift ) + s . substr ( 0 , - shift ) ; }
int search ( vector < int > lst ) { unordered_map < int , int > counter ; for ( auto i : lst ) { counter [ i ] ++ ; } int ans = -1 ; for ( auto i : counter ) { if ( i . second >= key ) { ans = i . first ; } } return ans ; }
int smallest_change ( vector < int > arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . size ( ) / 2 ; i ++ ) { if ( arr [ i ] != arr [ - i - 1 ] ) ans ++ ; } return ans ; }
bool total_match ( string lst1 , string lst2 ) { int sum1 = 0 ; for ( string str : lst1 ) { sum1 += str . length ( ) ; } int sum2 = 0 ; for ( string str : lst2 ) { sum2 += str . length ( ) ; } return ( sum1 > sum2 ) ? lst2 : lst1 ; }
bool is_happy ( string s ) { if ( s . length ( ) < 3 ) return false ; for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s [ i ] == s [ i + 1 ] s [ i + 1 ] == s [ i + 2 ] s [ i ] == s [ i + 2 ] ) return false ; } return true ; }
vector < string > numerical_letter_grade ( vector < double > grades ) { vector < string > letter_grade ; for ( auto & gpa : grades ) { if ( gpa == 4.0 ) letter_grade . push_back ( "A+" ) ; else if ( gpa > 3.7 ) letter_grade . push_back ( "A" ) ; else if ( gpa > 3.3 ) letter_grade . push_back ( "A-" ) ; else if ( gpa > 3.0 ) letter_grade . push_back ( "B+" ) ; else if ( gpa > 2.7 ) letter_grade . push_back ( "B" ) ; else if ( gpa > 2.3 ) letter_grade . push_back ( "B-" ) ; else if ( gpa > 2.0 ) letter_grade . push_back ( "C+" ) ; else if ( gpa > 1.7 ) letter_grade . push_back ( "C" ) ; else if ( gpa > 1.3 ) letter_grade . push_back ( "C- ) ; else if ( gpa > 1.0 ) letter_grade . push_back ( "D+" ) ; else if ( gpa > 0.7 ) letter_grade . push_back ( "D" ) ; else if ( gpa > 0.0 ) letter_grade . push_back ( "D-" ) ; else letter_grade . push_back ( "E" ) ; } return letter_grade ; }
string solve ( int n ) { vector < string > bi_str ; int sum = 0 ; for ( auto c : n ) { sum += c - '0' ; } while ( sum > 0 ) { bi_str . push_back ( to_string ( sum % 2 ) ) ; sum /= 2 ; } return bi_str ; }
string anti_shuffle ( string s ) { vector < string > ret ; vector < string > current ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) s [ i ] == ' ' ) { sort ( current . begin ( ) , current . end ( ) ) ; if ( ret ) ret . push_back ( " " ) ; ret . push_back ( current . begin ( ) ) ; current . clear ( ) ; } else { current . push_back ( s [ i ] ) ; } } return ret ; }
void sort_array ( int array [ ] ) { if ( array [ 0 ] == 0 ) return ; if ( ( array [ 0 ] + array [ -1 ] ) % 2 == 1 ) sort ( array , array + 3 ) ; else sort ( array , array + 3 ) ; }
string encrypt ( string s ) { vector < char > ans ; for ( auto c : s ) { if ( isalpha ( c ) ) ans . push_back ( char ( "a" + ( c - "a" + 4 ) % 26 ) ) ; else ans . push_back ( c ) ; } return ans ; }
int is_bored ( string s ) { bool is_start = true ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s [ i ] == '.' s [ i ] == "?" s [ i ] == "!" ) is_start = true ; else if ( is_start ) { if ( s [ i ] == ' ' ) continue ; if ( s . substr ( i , 2 ) == "I " ) sum += 1 ; is_start = false ; } } return sum ; }
string encode ( string message ) { unordered_set < char > vowels = "aeiouAEIOU" ; vector < char > ret ; for ( auto c : message ) { if ( isupper ( c ) ) { c = tolower ( c ) ; if ( vowels . find ( c ) != vowels . end ( ) ) { c = ( char ) ( "a" + ( c - "a" + 2 ) % 26 ) ; } } else if ( islower ( c ) ) { c = tolower ( c ) ; if ( vowels . find ( c ) != vowels . end ( ) ) { c = ( char ) ( "A" + ( c - "A" + 2 ) % 26 ) ; } } ret . push_back ( c ) ; } return ret ; }
int skjkasdkd ( vector < int > lst ) { int largest = 0 ; for ( int n : lst ) { if ( n > largest ) { bool prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) prime = false ; } if ( prime ) largest = n ; } } int sum = 0 ; string s = to_string ( largest ) ; for ( int i = 0 ; i < s . size ( ) ; i ++ ) sum += s [ i ] - '0' ; return sum ; }
bool check_dict_case ( unordered_map < char , int > dict ) { if ( dict . empty ( ) ) return false ; bool is_lower = 0 , is_upper = 0 ; for ( auto i : dict ) { for ( auto i : dict ) { if ( i . islower ( ) ) is_lower = 1 ; else if ( i . isupper ( ) ) is_upper = 1 ; else return false ; } } return is_lower + is_upper == 1 ; }
int multiply ( int a , int b ) { return ( abs ( a ) % 10 ) * ( abs ( b ) % 10 ) ; }
int count_upper ( string s ) { string u_vowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . size ( ) ; i += 2 ) { if ( u_vowel . find ( s [ i ] ) != u_vowel . end ( ) ) count += 1 ; } return count ; }
vector < string > by_length ( vector < string > arr ) { int num_to [ ] = { 1 : "One" , 2 : "Two" , 3 : "Three" , 4 : "Four" , 5 : "Five" , 6 : "Six" , 7 : "Seven" , 8 : "Eight" , 9 : "Nine" } ; sort ( arr . begin ( ) , arr . end ( ) , greater < string > ( ) ) ; vector < string > new_arr ; for ( auto n : sorted_arr ) { if ( n >= 1 && n <= 9 ) new_arr . push_back ( num_to [ n ] ) ; } return new_arr ; }
vector < long long int > f ( long long int n ) { long long int sum = 0 , prod = 1 ; vector < long long int > result ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) result . push_back ( prod ) ; else result . push_back ( sum ) ; } return result ; }
void even_odd_palindrome ( int n ) { int even_count = 0 , odd_count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { string s = to_string ( i ) ; string r_str = s . substr ( 0 , s . length ( ) - 1 ) ; if ( s == r_str ) { if ( i % 2 == 1 ) odd_count ++ ; else even_count ++ ; } } cout << "[" << even_count << "," << odd_count << "]" ; }
unordered_map < char , int > histogram ( string test ) { unordered_map < char , int > count ; int max = 0 ; for ( int i = 0 ; i < test . length ( ) ; i ++ ) { if ( test [ i ] != ' ' ) { count [ test [ i ] ] += 1 ; if ( count [ test [ i ] ] > max ) max = count [ test [ i ] ] ; } } map < char , int > result ; for ( auto b : count ) { if ( b . second == max ) result [ b . first ] = b . second ; } return result ; }
void reverse_delete ( string s , set < char > c ) { vector < char > ret ; for ( char ch : s ) { if ( c . find ( ch ) == c . end ( ) ) ret . push_back ( ch ) ; } string flag = "False" ; if ( ret . size ( ) == ret . size ( ) - 1 ) flag = "True" ; cout << ret << endl ; }
void sort_array ( vector < int > arr ) { vector < int > bin ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { int b = 0 ; int n = abs ( arr [ i ] ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . push_back ( b ) ; } for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { for ( int j = 1 ; j < arr . size ( ) ; j ++ ) { if ( bin [ j ] < bin [ j - 1 ] || ( bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) ) { swap ( bin [ j ] , bin [ j - 1 ] ) ; swap ( arr [ j ] , arr [ j - 1 ] ) ; } } } }
string get_closest_vowel ( string word ) { string vowels = "AEIOUaeiou" ; for ( int i = word . length ( ) - 2 ; i > 0 ; i -- ) { if ( vowels . find ( word [ i ] ) != vowels . end ( ) && vowels . find ( word [ i + 1 ] ) == vowels . end ( ) && word [ i - 1 ] == vowels . end ( ) ) return word [ i ] ; } return "" ; }
string match_parens ( int lst [ ] ) { string str [ ] = { lst [ 0 ] + lst [ 1 ] , lst [ 1 ] + lst [ 0 ] } ; for ( string l : str ) { int count = 0 ; for ( char c : l ) { if ( c == '(' ) count ++ ; if ( c == ')' ) count -- ; if ( count < 0 ) break ; } if ( count == 0 ) return "Yes" ; } return "No" ; }
int maximum ( int arr [ ] , int k ) { if ( k == 0 ) return 0 ; sort ( arr , arr + k ) ; return arr [ - k ] ; }
bool valid_date ( string date ) { if ( date . length ( ) != 10 ) return false ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 i == 5 ) if ( date [ i ] != '-' ) return false ; else if ( ! isdigit ( date [ i ] ) ) return false ; } int month = stoi ( date . substr ( 0 , 2 ) ) ; int day = stoi ( date . substr ( 3 , 5 ) ) ; int year = stoi ( date . substr ( 6 ) ) ; if ( month < 1 month > 12 ) return false ; if ( day < 1 day > 31 ) return false ; if ( day == 31 && ( month == 4 month == 6 month == 9 month == 11 month == 2 ) ) return false ; if ( day == 30 && month == 2 ) return false ; return true ; }
vector < string > split_words ( string txt ) { stack < string > current ; vector < string > result ; if ( txt . find ( " " ) != txt . end ( ) ) { for ( int i = 0 ; i <= txt . find ( " " ) ; i ++ ) { if ( i == txt . find ( txt [ i ] ) - '0' ) { if ( current . size ( ) > 0 ) { result . push ( "" ) ; current . clear ( ) ; } } else { current . push ( txt [ i ] ) ; } } return result ; } if ( "," in txt ) { for ( int i = 0 ; i <= txt . find ( ) ; i ++ ) { if ( i == txt . find ( txt [ i ] ) - '0' ) { if ( current . size ( ) > 0 ) { result . push ( "" ) ; current . clear ( ) ; } } else { current . push ( txt [ i ] ) ; } } return result ; } int num = 0 ; for ( char c : txt ) { if ( islower ( c ) && c % 2 == 0 ) num ++ ; } return { to_string ( num ) } ; }
vector < int > tri ( int n ) { if ( n == 0 ) return { 1 } ; vector < int > tris ( n + 1 , 0 ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) tris . push_back ( i / 2 + 1 ) ; else tris . push_back ( tris [ i - 1 ] + tris [ i - 2 ] + ( i + 3 ) / 2 ) ; } return tris ; }
bool check_if_last_char_is_a_letter ( string txt ) { if ( txt . length ( ) == 0 ) return false ; return isalpha ( txt . back ( ) ) && ( txt . size ( ) == 1 || ! isalpha ( txt . back ( ) ) ) ; }
void order_by_points ( vector < int > nums ) { vector < int > result ; for ( int num : nums ) { string w = to_string ( abs ( num ) ) ; int sum = 0 ; for ( auto c : w ) { sum += c - '0' ; } if ( num < 0 ) sum -= 2 * ( w [ 0 ] - '0' ) ; result . push_back ( sum ) ; } for ( int i = 0 ; i < nums . size ( ) ; i ++ ) { for ( int j = 1 ; j < nums . size ( ) ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) swap ( result [ j ] , result [ j - 1 ] ) ; swap ( nums [ j ] , nums [ j - 1 ] ) ; } } }
vector < string > bf ( string planet1 , string planet2 ) { vector < string > planets = { "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" } ; int idx1 = planets . find ( planet1 ) != planets . end ( ) ? planets . find ( planet1 ) : -1 ; int idx2 = planets . find ( planet2 ) != planets . end ( ) ? planets . find ( planet2 ) : -1 ; if ( idx1 == -1 idx2 == -1 idx1 == idx2 ) return vector < string > ( ) ; return planets . substr ( idx2 + 1 , idx1 ) ; }
vector < int > sorted_list_sum ( vector < int > lst ) { vector < int > result ; for ( auto i : lst ) { if ( i . size ( ) % 2 == 0 ) { result . push_back ( i ) ; } } sort ( result . begin ( ) , result . end ( ) ) ; return result ; }
bool cycpattern_check ( set < int > a , string b ) { int i , rotate ; for ( i = 0 ; i < b . size ( ) ; i ++ ) { rotate = b . substr ( i ) + b . substr ( 0 , i ) ; if ( a . find ( rotate ) != a . end ( ) ) { return true ; } } return false ; }
pair < int , int > even_odd_count ( int num ) { int even_count = 0 , odd_count = 0 ; for ( int i = 0 ; i < abs ( num ) ; i ++ ) { if ( stoll ( i ) % 2 == 0 ) even_count ++ ; else odd_count ++ ; } return { even_count , odd_count } ; }
string find_max ( vector < string > words ) { string max = "" ; int max_length = 0 ; for ( string word : words ) { set < string > unique ; for ( auto w : word ) unique . insert ( w ) ; if ( unique . size ( ) > max_length || ( unique . size ( ) == max_length && word < max ) ) { max = word ; max_length = unique . size ( ) ; } } } return max ; }
string solve ( string s ) { bool no_letter = true ; vector < char > result ; for ( char ch : s ) { if ( isupper ( ch ) ) { ch = tolower ( ch ) ; no_letter = false ; } else if ( islower ( ch ) ) { ch = tolower ( ch ) ; no_letter = false ; } result . push_back ( ch ) ; } if ( no_letter ) return "" ; else return result ; }
int most_frequent ( int arr [ ] , int n ) { unordered_map < int , int > hp ; for ( int i = 0 ; i < n ; i ++ ) { hp [ arr [ i ] ] ++ ; } int max_count = 0 , res = -1 ; for ( auto x : hp ) { if ( max_count < x . second ) { res = x . first ; max_count = x . second ; } } return res ; }
int find ( int a [ ] , int b [ ] , int k , int n1 , int n2 ) { unordered_set < int > s ; for ( int i = 0 ; i < n2 ; i ++ ) s . insert ( b [ i ] ) ; int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( s . find ( a [ i ] ) == s . end ( ) ) missing ++ ; if ( missing == k ) return a [ i ] ; } return -1 ; }
int solve_query ( int start , int end , int arr [ ] ) { unordered_map < int , int > frequency ; for ( int i = start ; i <= end ; i ++ ) frequency [ arr [ i ] ] ++ ; int count = 0 ; for ( auto x : frequency ) if ( x . first == x . second ) count ++ ; return count ; }
int segregate ( int arr [ ] , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { swap ( arr [ i ] , arr [ j ] ) ; j ++ ; } } return j ; }
int count_triplets ( int a [ ] , int n ) { unordered_set < int > s ; for ( int i = 0 ; i < n ; i ++ ) s . insert ( a [ i ] ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( s . find ( xr ) != s . end ( ) && xr != a [ i ] && xr != a [ j ] ) count ++ ; } } return count / 3 ; }
int least_frequent ( int arr [ ] , int n ) { unordered_map < int , int > hp ; for ( int i = 0 ; i < n ; i ++ ) { hp [ arr [ i ] ] ++ ; } int min_count = n + 1 , res = -1 ; for ( auto x : hp ) { if ( min_count >= x . second ) { res = x . first ; min_count = x . second ; } } return res ; }
int find_permutations ( vector < int > arr ) { int cnt = 0 ; int max_ind = -1 , min_ind = INT_MAX ; int n = arr . size ( ) ; unordered_map < int , int > index_of ; for ( int i = 0 ; i < n ; i ++ ) { index_of [ arr [ i ] ] = i + 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { max_ind = max ( max_ind , index_of [ i ] ) ; min_ind = min ( min_ind , index_of [ i ] ) ; if ( max_ind - min_ind + 1 == i ) cnt ++ ; } return cnt ; }
int form_quadruplets ( int arr [ ] , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; sort ( arr , arr + n , greater < int > ( ) ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; }
string lexicographically_maximum ( string s , int n ) { unordered_map < char , int > m ; for ( int i = 0 ; i < n ; ++ i ) { m [ s [ i ] ] ++ ; } vector < char > v ; for ( char i = 'a' ; i < ( char ) ( "a" + min ( n , 25 ) ) ; ++ i ) { if ( m [ i ] == 0 ) v . push_back ( i ) ; } int j = v . size ( ) - 1  ; for ( int i = 0 ; i < n ; ++ i ) { if ( s [ i ] >= "a" + min ( n , 25 ) || ( m [ s [ i ] ] > 1 ) ) { if ( v [ j ] < s [ i ] ) continue  ; m [ s [ i ] ] -- ; s [ i ] = v [ j ] ; j -- ; } if ( j < 0 ) break ; } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) break ; if ( s [ i ] >= "a" + min ( n , 25 ) || m [ s [ i ] ] > 1 ) { m [ s [ i ] ] -- ; s [ i ] = v [ l ] ; l ++ ; } } return s ; }
static int no_of_valid_kbers ( int k , vector < int > arr ) { set < int > set ; while ( k != 0 ) { set . insert ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { int no = arr [ i ] ; bool flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( set . find ( digit ) == set . end ( ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag == true ) { count ++ ; } } return count ; }
int del_cost ( string s , int cost [ ] ) { int ans = 0 ; map < char , int > for_max ; map < char , int > for_tot ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! for_max [ s [ i ] ] ) { for_max [ s [ i ] ] = cost [ i ] ; } else { for_max [ s [ i ] ] = max ( cost [ i ] , for_max [ s [ i ] ] ) ; } if ( ! for_tot [ s [ i ] ] ) { for_tot [ s [ i ] ] = cost [ i ] ; } else { for_tot [ s [ i ] ] = for_tot [ s [ i ] ] + cost [ i ] ; } } for ( auto x : for_max ) { ans += for_tot [ x . first ] - x . second ; } return ans ; }
void replace_duplicates ( vector < string > names ) { unordered_map < string , int > hash ; for ( int i = 0 ; i < names . size ( ) ; i ++ ) { if ( hash . count ( names [ i ] ) == 0 ) hash [ names [ i ] ] ++ ; else { int count = hash [ names [ i ] ] ++ ; names [ i ] += to_string ( count ) ; } } }
void minmax_numbers ( vector < vector < int > > matrix , vector < int > res ) { unordered_set < int > s ; for ( int i = 0 ; i < matrix . size ( ) ; i ++ ) { int min_r = INT_MAX ; for ( int j = 0 ; j < matrix [ i ] . size ( ) ; j ++ ) min_r = min ( min_r , matrix [ i ] [ j ] ) ; s . insert ( min_r ) ; } for ( int j = 0 ; j < matrix [ 0 ] . size ( ) ; j ++ ) { int max_c = INT_MIN ; for ( int i = 0 ; i < matrix . size ( ) ; i ++ ) max_c = max ( max_c , matrix [ i ] [ j ] ) ; if ( s . find ( max_c ) != s . end ( ) ) res . push_back ( max_c ) ; } }
int length_of_longest_ap ( int a [ ] , int n ) { unordered_map < int , unordered_map < int , int > > dp ; int res = 2 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int d = a [ j ] - a [ i ] ; dp [ d ] [ j ] = dp [ d ] . count ( i ) ? dp [ d ] [ i ] + 1 : 2 ; res = max ( res , dp [ d ] [ j ] ) ; } } return res ; }
char find_kth_char ( int n , int k ) { string prev = "A" ; string cur = "" ; if ( n == 1 ) { return "A" ; } for ( int i = 2 ; i <= n ; i ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . length ( ) ; i ++ ) { if ( prev [ i ] == 'A' ) { prev . erase ( i ) ; } else { prev . erase ( i ) ; } } reverse ( prev . begin ( ) , prev . end ( ) ) ; cur += prev  ; prev = cur  ; } return cur [ k - 1 ] ; }
int find_kth_largest ( string s , int k ) { sort ( s . begin ( ) , s . end ( ) , greater < int > ( ) ) ; return s [ k - 1 ] ; }
int sub_arraylen ( int arr [ ] , int n , int k ) { unordered_map < int , int > mp ; mp [ arr [ 0 ] ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp [ arr [ i ] ] = i  ; } int len = INT_MAX ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) continue ; else { int x = arr [ i ] - k ; if ( x == 0 ) len = min ( len , i ) ; if ( mp . find ( x ) == mp . end ( ) ) continue ; else { len = min ( len , i - mp [ x ] ) ; } } } return len ; }
int find_max_len ( vector < ll > a , ll k ) { int n = a . size ( ) ; sort ( a . begin ( ) , a . end ( ) ) ; vector < bool > vis ( n , false ) ; map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) { mp [ a [ i ] ] = i ; } int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( ! vis [ i ] ) { int check = a [ i ] * k ; if ( mp . find ( check ) != mp . end ( ) ) { c ++ ; vis [ mp [ check ] ] = true ; } } } return n - c ; }
vector < int > min_distance_points ( int a [ ] , int k , int n ) { map < int , int > m ; queue < int > q ; for ( int i = 0 ; i < n ; ++ i ) { m [ a [ i ] ] = 1  ; q . push ( a [ i ] ) ; } vector < int > ans ; while ( k > 0 ) { int x = q . front ( ) ; q . pop ( ) ; if ( ! m [ x - 1 ] && k > 0 ) { m [ x - 1 ] = 1  ; q . push ( x - 1 ) ; ans . push_back ( x - 1 ) ; k -- ; } if ( ! m [ x + 1 ] && k > 0 ) { m [ x + 1 ] = 1  ; q . push ( x + 1 ) ; ans . push_back ( x + 1 ) ; k -- ; } } return ans ; }
bool isValidLen ( string s , int len , int k ) { int n = s . size ( ) ; map < char , int > mp ; int right = 0 ; while ( right < len ) { mp [ s [ right ] ] ++ ; right ++ ; } if ( mp . size ( ) <= k ) return true ; while ( right < n ) { mp [ s [ right ] ] ++ ; mp [ s [ right - len ] ] -- ; if ( mp [ s [ right - len ] ] == 0 ) mp . erase ( s [ right - len ] ) ; if ( mp . size ( ) <= k ) return true ; right ++ ; } return mp . size ( ) <= k ; }
int partition ( int arr [ ] , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 )  ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; swap ( & arr [ i ] , & arr [ j ] ) ; } } swap ( & arr [ i + 1 ] , & arr [ high ] ) ; return i + 1 ; }
int str_score ( string strs [ ] , string s , int n ) { unordered_map < string , int > m ; for ( int i = 0 ; i < n ; i ++ ) m [ strs [ i ] ] = i + 1 ; if ( m . find ( s ) == m . end ( ) ) return 0 ; int score = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) score += s [ i ] - "a" + 1 ; score = score * m [ s ] ; return score ; }
vector < int > count_ele ( stack < int > s , int a [ ] , int n ) { unordered_map < int , bool > mp ; vector < int > ans ; for ( int i = 0 ; i < n ; ++ i ) { int num = a [ i ] ; if ( mp . find ( num ) != mp . end ( ) ) ans . push_back ( 0 ) ; else { int cnt = 0 ; while ( s . front ( ) != num ) { mp [ s . front ( ) ] = true ; s . pop ( ) ; cnt ++ ; } s . pop ( ) ; cnt ++ ; ans . push_back ( cnt ) ; } } return ans ; }
int maxDistinctChar ( string s , int n , int k ) { unordered_map < int , int > freq ; for ( int i = 0 ; i < n ; i ++ ) { freq [ s [ i ] ] ++ ; } vector < int > v ; for ( auto x : freq ) { v . push_back ( x . second ) ; } sort ( v . begin ( ) , v . end ( ) ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = min ( v [ i ] - 1 , k ) ; v [ i ] = v [ i ] - mn  ; k -= mn  ; } if ( k > 0 ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = min ( v [ i ] , k ) ; v [ i ] = v [ i ] - mn  ; k -= mn  ; } } int res = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) if ( v [ i ] == 1 ) res ++ ; return res ; }
int find_kth ( int arr [ ] , int n , int k ) { unordered_map < int , int > missing ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) missing . insert ( arr [ i ] ) ; int max_m = * max_element ( arr , arr + n ) ; int min_m = * min_element ( arr , arr + n ) ; for ( int i = min_m + 1 ; i < max_m ; i ++ ) { if ( missing . find ( i ) == missing . end ( ) ) count ++ ; if ( count == k ) return i ; } return -1 ; }
bool almost_sort ( int a [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) if ( a [ i ] > a [ i + 1 ] ) swap ( a [ i ] , a [ i + 1 ] ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) if ( a [ i ] > a [ i + 1 ] ) return false ; return true ; }
int maximum_sum ( string s , int n , int k ) { int sum = 0 ; int freq [ 256 ] = { 0 } ; for ( int i = 0 ; i < n ; i ++ ) { freq [ int ( s [ i ] ) ] ++ ; } sort ( freq , freq + 256 , greater < int > ( ) ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ]  ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; }
int find_min_operations ( int arr [ ] , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { unordered_map < int , int > freq ; for ( int j = i ; j < n ; j += k ) freq [ arr [ j ] ] ++ ; int max1 = 0 , num ; for ( auto x : freq ) { if ( x . second > max1 ) { max1 = x . second ; num = x . first ; } } for ( auto x : freq ) { if ( x . first != num ) operations += x . second ; } } return operations ; }
vector < string > sub_string ( string s , int n ) { vector < string > v ; for ( int i = 0 ; i < n ; i ++ ) { for ( int len = 1 ; len <= n - i ; len ++ ) { string find = s . substr ( i , len ) ; v . push_back ( find ) ; } } return v ; }
bool check_unique_frequency ( int arr [ ] , int n ) { unordered_map < int , int > freq ; for ( int i = 0 ; i < n ; i ++ ) { freq [ arr [ i ] ] ++ ; } unordered_set < int > unique_freq ; for ( auto & i : freq ) { if ( unique_freq . count ( i . second ) ) return false ; else unique_freq . insert ( i . second ) ; } return true ; }
int min_cost ( string str1 , string str2 , int n ) { int cost = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( str1 [ i ] != str2 [ i ] ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) { swap ( tmp [ i ] , tmp [ i + 1 ] ) ; cost ++ ; } else { cost ++ ; } } } return cost ; }
bool is_valid_num ( string x ) { unordered_map < int , int > mp ; for ( int i = 0 ; i < x . size ( ) ; i ++ ) { if ( mp . find ( x [ i ] - "0" ) != mp . end ( ) ) return false ; else if ( x [ i ] - "0" > 5 ) return false ; else mp [ x [ i ] - "0" ] = 1  ; } return true ; }
int minimize_diff ( int arr [ ] , int n , int k ) { int max = * max_element ( arr , arr + n ) ; int min = * min_element ( arr , arr + n ) ; if ( max - min <= k ) return max - min ; int avg = ( max + min ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) arr [ i ] -= k ; else arr [ i ] += k ; } max = * max_element ( arr , arr + n ) ; min = * min_element ( arr , arr + n ) ; return max_element - min ; }
int get_min_cost ( int arr [ ] , int n ) { int min_ele = * min_element ( arr , arr + n ) ; return min_ele * ( n - 1 ) ; }
bool possibility ( int m [ ] , int len , string s ) { int count_odd = 0 ; for ( int i = 0 ; i < len ; i ++ ) { if ( m [ s [ i ] - '0' ] & 1 ) count_odd ++ ; if ( count_odd > 1 ) return false ; } return true ; }
int minimum_cost_of_breaking ( int x [ ] , int y [ ] , int m , int n ) { int res = 0 ; sort ( x , x + m , greater < int > ( ) ) ; sort ( y , y + n , greater < int > ( ) ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert  ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl  ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) total += x [ i ++ ]  ; res += total * vert  ; total = 0 ; while ( j < n ) total += y [ j ++ ]  ; res += total * hzntl  ; return res ; }
int find_maximum_score ( int a [ ] , int n ) { unordered_map < int , int > freq ; for ( int i = 0 ; i < n ; i ++ ) { freq [ a [ i ] ] ++ ; } vector < int > dp ( n + 1 , 0 ) ; dp [ 0 ] = 0 ; dp [ 1 ] = freq [ 1 ] ? 1 : 0 ; for ( int i = 2 ; i < dp . size ( ) ; i ++ ) { dp [ i ] = max ( dp [ i - 1 ] , dp [ i - 2 ] + freq [ i ] * i )  ; } return dp [ dp . size ( ) - 1 ] ; }
int count_ways ( string s , string t , int k , int mod ) { int n = s . size ( )  ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { string p = s . substr ( i , n ) + s . substr ( 0 , i ) ; if ( p == t ) a ++ ; else b ++ ; } vector < long long > dp1 ( k + 1 ) , dp2 ( k + 1 ) ; if ( s == t ) { dp1 [ 0 ] = 1  ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1  ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod  ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * b ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod  ; } return dp1 [ k ]  ; }
int find_subarray_sum ( int arr [ ] , int n , int k ) { unordered_map < int , int > prev_sum ; int res = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ]  ; if ( curr_sum == k ) { res ++ ; } if ( prev_sum . find ( curr_sum - k ) != prev_sum . end ( ) ) res += ( prev_sum [ curr_sum - k ] ) ; prev_sum [ curr_sum ] ++ ; } return res ; }
int maximum_occurrence ( string s ) { int n = s . length ( ) ; unordered_map < string , int > freq ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { string temp = "" ; temp += s [ i ] ; freq [ temp ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { string temp = "" ; temp += s [ i ] ; temp += s [ j ] ; freq [ temp ] ++ ; } } int answer = INT_MIN ; for ( auto x : freq ) answer = max ( answer , x . second ) ; return answer ; }
int count_characters ( string str , vector < char > chars ) { int res = 0 ; unordered_map < char , int > freq ; for ( int i = 0 ; i < chars . size ( ) ; i ++ ) freq [ chars [ i ] ] ++ ; for ( string st : str ) { bool flag = true ; for ( auto c : str ) { if ( freq [ c ] == 0 ) { flag = false ; break ; } } if ( flag ) res += str . size ( ) ; } return res ; }
int distinct_substring ( string p , string q , int k , int n ) { set < string > ss ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; string s = "" ; for ( int j = i ; j < n ; j ++ ) { int pos = p [ j ] - 'a' ; sum += q [ pos ] - '0'  ; s += p [ j ]  ; if ( sum <= k ) ss . insert ( s ) ; else break ; } } return ss . size ( ) ; }
int unique_morse_rep ( vector < string > arr ) { string morse_code [ ] = { ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , "...." , ".." , ".---" , "-.-" , ".-.." , "--" , "-." , "---" , ".--." , "--.-" , ".-." , "..." , "-" , "..-" , "...-" , ".--" , "-..-" , "-.--" , "--.." } ; unordered_set < string > st ; int n = arr . size ( )  ; for ( int i = 0 ; i < n ; i ++ ) { string temp = "" ; int m = arr [ i ] . size ( )  ; for ( int j = 0 ; j < m ; j ++ ) { temp += morse_code [ arr [ i ] [ j ] - 'a' ] ; } st . insert ( temp ) ; } return st . size ( ) ; }
int count_substrings ( string str , int k ) { int n = str . size ( ) ; int answer = 0 ; unordered_map < char , int > map ; for ( int i = 0 ; i < k ; i ++ ) { if ( map . find ( str [ i ] ) == map . end ( ) ) map [ str [ i ] ] = 1 ; else map [ str [ i ] ] ++ ; } if ( map . size ( ) == k ) answer ++ ; for ( int i = k ; i < n ; i ++ ) { if ( map . find ( str [ i ] ) == map . end ( ) ) map [ str [ i ] ] = 1 ; else map [ str [ i ] ] ++ ; map [ str [ i - k ] ] -- ; if ( map [ str [ i - k ] ] == 0 ) map . erase ( str [ i - k ] ) ; if ( map . size ( ) == k ) answer ++ ; } return answer ; }
bool can_construct ( string s , int k ) { map < char , int > m ; int p = 0 ; if ( s . length ( ) == k ) return true ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) m [ s [ i ] ] ++ ; if ( k > s . length ( ) ) return false ; else { for ( auto x : m ) { if ( x . second % 2 != 0 ) p ++ ; } } if ( k < p ) return false ; return true ; }
bool equal_ignore_case ( string str1 , string str2 ) { int i = 0 ; transform ( str1 . begin ( ) , str1 . end ( ) , str1 . begin ( ) , :: toupper ) ; transform ( str2 . begin ( ) , str2 . end ( ) , str2 . begin ( ) , :: toupper ) ; return str1 . compare ( str2 ) == 0 ; }
int find_longest_sub ( string bin ) { int n = bin . length ( ) , sum = 0 ; unordered_map < int , int > prev_sum ; int max_len = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( bin [ i ] == '1' ) sum ++ ; else sum -- ; if ( sum > 0 ) max_len = i + 1 ; else if ( sum <= 0 ) { if ( prev_sum . find ( sum - 1 ) != prev_sum . end ( ) ) { int curr_len = i - prev_sum [ sum - 1 ] ; max_len = max ( max_len , curr_len ) ; } } if ( prev_sum . find ( sum ) == prev_sum . end ( ) ) prev_sum [ sum ] = i ; } return max_len ; }
bool has_all_codes ( string s , int k ) { set < string > us ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) us . insert ( s . substr ( i , k ) ) ; return us . size ( ) == 1 << k ; }
bool check_palin ( string word ) { int n = word . length ( ) ; tolower ( word ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( word [ i ] != word [ n - 1 ] ) return false ; n -- ; } return true ; }
string convert ( string str ) { string w = "" , z = "" ; transform ( str . begin ( ) , str . end ( ) , str . begin ( ) , :: toupper ) ; str += " " ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str [ i ] ; if ( ch != ' ' ) { w += ch ; } else { z += tolower ( w [ 0 ] ) + w . substr ( 1 ) + " " ; w = "" ; } } return z ; }
int max_lines ( int n , int x1 [ ] , int y1 [ ] , int x2 [ ] , int y2 [ ] ) { unordered_set < double > s ; double slope ; for ( int i = 0 ; i < n ; ++ i ) { if ( x1 [ i ] == x2 [ i ] ) slope = INT_MAX ; else slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; s . insert ( slope ) ; } return s . size ( ) ; }
unordered_map < int , int > prime_factor ( int n ) { map < int , int > primef ; while ( n % 2 == 0 ) { primef [ 2 ] += 1 ; n /= 2 ; } for ( int i = 3 ; i <= sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { primef [ i ] += 1 ; n /= i ; } } if ( n > 2 ) primef [ n ] = 1 ; return primef ; }
string is_divisible_by_divisor ( int s , int d ) { s %= d ; set < int > hash_map ; hash_map . insert ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hash_map . find ( s ) != hash_map . end ( ) ) { if ( s == 0 ) return "Yes" ; return "No" ; } else hash_map . insert ( s ) ; } return "Yes" ; }
bool odd_sum ( int a [ ] , int n , int k ) { set < int > odd ; set < int > even ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) even . insert ( a [ i ] ) ; else odd . insert ( a [ i ] ) ; } if ( odd . size ( ) >= k ) return true ; bool flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= even . size ( ) ) return true ; } return flag ; }
int day_of_year ( string date ) { int days [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 } ; int year = stoi ( date . substr ( 0 , 4 ) ) ; int month = stoi ( date . substr ( 5 , 2 ) ) ; int day = stoi ( date . substr ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 year % 400 == 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days [ month - 2 ] ; month -- ; } return day ; }
bool is_perfect_square ( int arr [ ] , int n ) { unordered_map < int , int > umap ; for ( int i = 0 ; i < n ; i ++ ) umap [ arr [ i ] ] ++ ; for ( auto x : umap ) { if ( x . second % 2 == 1 ) return false ; } return true ; }
int min_moves ( int n ) { string s = to_string ( n ) ; int ans = INT_MAX ; int len = s . size ( ) ; for ( int i = 0 ; i < len ; i ++ ) { for ( int j = 0 ; j < len ; j ++ ) { if ( i == j ) continue ; string t = to_string ( s ) ; int cur = 0  ; for ( int k = i ; k < len - 1 ; k ++ ) { swap ( t [ k ] , t [ k + 1 ] ) ; cur ++ ; } for ( int k = j - ( j > i ) ; k < len - 2 ; k ++ ) { swap ( t [ k ] , t [ k + 1 ] ) ; cur ++ ; } int pos = -1 ; for ( int k = 0 ; k < len ; k ++ ) { if ( t [ k ] != '0' ) { pos = k ; break ; } } for ( int k = pos ; k >= 1 ; k -- ) { swap ( t [ k ] , t [ k - 1 ] ) ; cur ++ ; } int nn = stoi ( t ) ; if ( nn % 25 == 0 ) ans = min ( ans , cur ) ; } } if ( ans == INT_MAX ) return -1 ; return ans ; }
int minimum_operations ( int a [ ] , int n ) { map < int , int > mp ; for ( int i = 0 ; i < n ; i ++ ) mp [ a [ i ] ] += 1 ; int count = 0 ; for ( auto x : mp ) { if ( x . second > 1 ) count += x . second - 1 ; } return count ; }
int kaprekar_rec ( int n , int prev ) { if ( n == 0 ) return 0 ; prev = n ; int digits [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } sort ( digits , digits + 4 ) ; int asc = 0  ; for ( int i = 0 ; i < 4 ; i ++ ) asc = asc * 10 + digits [ i ] ; sort ( digits , digits + 4 ) ; int desc = 0  ; for ( int i = 3 ; i >= 0 ; i -- ) desc = desc * 10 + digits [ i ] ; int diff = abs ( asc - desc )  ; if ( diff == prev ) return diff  ; return kaprekar_rec ( diff , prev ) ; }
string fraction_to_decimal ( int numr , int denr ) { string res = "" ; map < int , int > mp ; int rem = numr % denr  ; while ( rem != 0 && mp . find ( rem ) == mp . end ( ) ) { mp [ rem ] = res . size ( )  ; rem = rem * 10 ; int res_part = rem / denr ; res += to_string ( res_part ) ; rem = rem % denr ; } if ( rem == 0 ) return "" ; if ( mp . find ( rem ) != mp . end ( ) ) return res . substr ( mp [ rem ] . first , rem ) ; return "" ; }
bool is_fancy ( string num ) { map < char , string > fp ; fp [ "0" ] = "0"  ; fp [ "1" ] = "1"  ; fp [ "6" ] = "9" ; fp [ "8" ] = "8"  ; fp [ "9" ] = "6" ; int n = num . size ( ) ; for ( int l = 0 , r = n - 1 ; l <= r ; l ++ , r -- ) if ( fp [ num [ l ] ] != num [ r ] ) return false ; return true ; }
double distinct_odd_ratio ( vector < int > numbers ) { int distinct_count = numbers . size ( ) ; int distinct_odd_count = 0 ; for ( auto n : numbers ) { if ( n % 2 == 1 ) { distinct_odd_count += 1 ; } } return distinct_odd_count / distinct_count ; }
int compare_sum ( vector < int > numbers , vector < string > words ) { int int_sum = 0 ; int word_length_sum = 0 ; for ( auto word : words ) { int len = word . length ( ) ; sum += len ; } if ( int_sum < word_length_sum ) return -1 ; else if ( int_sum > word_length_sum ) return 1 ; else return 0 ; }
bool all_longer_than ( vector < string > short_words , vector < string > long_words ) { int max_of_short = * max_element ( short_words . begin ( ) , short_words . end ( ) ) ; int min_of_long = * min_element ( long_words . begin ( ) , long_words . end ( ) ) ; return ( min_of_long > max_of_short ) ; }
int compare_odd_even_range ( vector < int > numbers ) { int range_odd = * max_element ( numbers . begin ( ) , numbers . end ( ) ) - * min_element ( numbers . begin ( ) , numbers . end ( ) ) ; int range_even = * max_element ( numbers . begin ( ) , numbers . end ( ) ) - * min_element ( numbers . begin ( ) , numbers . end ( ) ) ; if ( range_odd < range_even ) return -1 ; if ( range_odd > range_even ) return 1 ; return 0 ; }
int average_distinct_length ( vector < string > words ) { set < string > distinct_words ; for ( auto w : words ) { distinct_words . insert ( w ) ; } int average_len = 0 ; return average_len ; }
int withdraw_balance ( int start , int withdrawals [ ] ) { int end = reduce ( ( nextWithdrawal <= balance ) ? balance - nextWithdrawal : balance , withdrawals , start ) ; return end ; }
string first_short_and_starts_with_o ( string words ) { string matched_element = NULL ; for ( int i = 0 ; i < words . length ( ) ; i ++ ) { if ( words [ i ] == 'o' ) matched_element = w ; else break ; } return matched_element ; }
int big_number_at_index ( int numbers [ ] , int index ) { int target_num ; for ( int i = 0 ; i < 5 ; i ++ ) target_num = numbers [ i ] [ i ] ; return target_num ; }
bool contains_square_in_range ( int range_start , int range_length ) { bool contains_square = any ( [ sqrt ( n ) * n == n ] ) ; return contains_square ; }
unordered_map < int , vector < int > > group_numbers_by_mod ( vector < int > numbers , int mod ) { map < int , vector < int > > number_groups ; for ( int k = 0 ; k < numbers . size ( ) ; k ++ ) number_groups [ k ] . push_back ( * g ) ; return number_groups ; }
unordered_map < string , vector < char > > group_words_by_first_char ( vector < string > words ) { map < string , vector < char > > word_groups ; for ( auto w : words ) { word_groups [ k ] . push_back ( w [ 0 ] ) ; } for ( auto g : words ) { word_groups [ k ] . push_back ( g ) ; } return word_groups ; }
vector < string > order_by_length_and_descending ( vector < string > words ) { vector < string > sorted_words ( words . begin ( ) , words . end ( ) , greater < string > ( ) ) ; return sorted_words ; }
void order_first_char_descending_reverse ( vector < string > words ) { sort ( words . begin ( ) , words . end ( ) ) ; sort ( sorted_words . begin ( ) , sorted_words . end ( ) , greater < char > ( ) ) ; }
vector < int > get_sublist_of_negative ( vector < int > numbers , int start , int length ) { vector < int > sub_list ( numbers , numbers + start , length ) ; return sub_list ; }
vector < int > get_positive_sequence ( vector < int > numbers ) { vector < int > sub_sequence ; for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { sub_sequence . push_back ( numbers [ i ] ) ; } return sub_sequence ; }
vector < int > get_larger_than_index_sequence ( vector < int > numbers ) { vector < int > sub_sequence ; for ( auto x : takewhile ( x . second >= x . first , x . dropwhile ( x . second < x . first , numbers ) ) ) sub_sequence = x . second ; return sub_sequence ; }
void rearrange_word_by_indexes ( string words , int indexes [ ] ) { int new_indexes [ indexes + 1 ] ; for ( int i = 0 ; i < indexes . size ( ) ; i ++ ) { new_indexes [ i ] = n % words . size ( ) ; } for ( int i = 0 ; i < new_indexes . size ( ) ; i ++ ) { new_words [ i ] = words [ i ] ; } }
vector < vector < string > > get_words_upper_lower ( vector < string > words ) { vector < vector < string > > upper_lower_words ( words . begin ( ) , words . end ( ) ) ; for ( auto w : words ) upper_lower_words . push_back ( w ) ; return upper_lower_words ; }
vector < int > select_if_in_place ( vector < int > numbers ) { vector < int > nums_in_place ( numbers . begin ( ) , numbers . end ( ) ) ; return nums_in_place ; }
vector < pair < int , int > > select_pairs ( vector < int > numbers_a , vector < int > numbers_b ) { vector < pair < int , int > > pairs ( numbers_a . size ( ) , numbers_b . size ( ) ) ; for ( auto a : numbers_a ) for ( auto b : numbers_b ) pairs . push_back ( a . first , b . second ) ; return pairs ; }
vector < string > string_cross_join ( vector < string > end_words , vector < string > begin_words ) { vector < string > cross_strings ; for ( auto b : begin_words ) { cross_strings . push_back ( e + ' ' + b ) ; } return cross_strings ; }
int elements_contain_subword ( vector < string > words , string subword ) { if ( words . size ( ) == 0 ) return 1 ; else if ( words . size ( ) == 1 ) return 0 ; else return -1 ; }
vector < int > concat_large_numbers ( vector < int > numbers_a , vector < int > numbers_b , int flag ) { vector < int > all_numbers ; for ( auto n : numbers_a ) if ( n > flag ) all_numbers . push_back ( n ) ; return all_numbers ; }
double dot_product ( vector < int > vector_a , vector < int > vector_b ) { double dot_product = 0 ; for ( int i = 0 ; i < vector_a . size ( ) ; i ++ ) dot_product += vector [ i ] * vector [ i ] ; return dot_product ; }
set < int > set_difference ( set < int > set_a , set < int > set_b ) { set < int > difference ; for ( auto i : set_a ) { difference . insert ( i ) ; } sort ( difference . begin ( ) , difference . end ( ) ) ; return difference ; }
