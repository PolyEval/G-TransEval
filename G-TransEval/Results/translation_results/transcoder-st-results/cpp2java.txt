int GreatestCommonDivisor ( int a , int b ) {
  if ( a == 0 || b == 0 ) {
    return a + b ;
  }
  if ( a == b ) {
    return a ;
  }
  if ( a > b ) {
    return GreatestCommonDivisor ( a % b , b ) ;
  }
  else {
    return GreatestCommonDivisor ( a , b % a ) ;
  }
}

***Example ends here:
int LargestDivisor ( int n ) {
  for ( int i = 2 ;
  i <= n ;
  i ++ ) {
    if ( n % i == 0 ) {
      return n / i ;
    }
  }
  return 1 ;
}

***Example ends here:
boolean isPrime ( int n ) {
  if ( n < 2 ) {
    return false ;
  }
  for ( int k = 2 ;
  k < n ;
  k ++ ) {
    if ( n % k == 0 ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int FizzBuzz ( int n ) {
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( i % 11 == 0 || i % 13 == 0 ) {
      int q = i ;
      while ( q > 0 ) {
        if ( q % 10 == 7 ) count += 1 ;
        q /= 10 ;
      }
    }
  }
  return count ;
}

***Example ends here:
int PrimeFib ( int n ) {
  int f0 = 0 ;
  int f1 = 1 ;
  while ( n > 0 ) {
    int p = f0 + f1 ;
    boolean isPrime = p >= 2 ;
    for ( int i = 2 ;
    i < p ;
    i ++ ) {
      if ( p % i == 0 ) {
        isPrime = false ;
        break ;
      }
    }
    if ( isPrime ) n -= 1 ;
    f0 = f1 ;
    f1 = p ;
  }
  return f1 ;
}

***Example ends here:
double TriangleArea ( double a , double h ) {
  return a * h / 2 ;
}

***Example ends here:
int ModP ( int n , int p ) {
  int ret = 1 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) ret = ( ret * 2 ) % p ;
  return ret ;
}

***Example ends here:
int Add ( int x , int y ) {
  return x + y ;
}

***Example ends here:
int Fib ( int n ) {
  if ( n == 0 ) {
    return 0 ;
  }
  if ( n == 1 ) {
    return 1 ;
  }
  return Fib ( n - 1 ) + Fib ( n - 2 ) ;
}

***Example ends here:
int LargestPrimeFactor ( int n ) {
  for ( int i = 2 ;
  i < n ;
  i ++ ) {
    while ( n % i == 0 && n > i ) n /= i ;
  }
  return n ;
}

***Example ends here:
int SumToN ( int n ) {
  int result = 0 ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) result += i ;
  return result ;
}

***Example ends here:
int FibFib ( int n ) {
  if ( n == 0 ) {
    return 0 ;
  }
  if ( n == 1 ) {
    return 0 ;
  }
  if ( n == 2 ) {
    return 1 ;
  }
  return FibFib ( n - 1 ) + FibFib ( n - 2 ) + FibFib ( n - 3 ) ;
}

***Example ends here:
boolean isMultiplyPrime ( int a ) {
  int num = 0 ;
  for ( int i = 2 ;
  i <= a ;
  i ++ ) {
    while ( a % i == 0 && a >= i ) {
      a /= i ;
      num += 1 ;
    }
  }
  return num == 3 ;
}

***Example ends here:
boolean isSimplePower ( int x , int n ) {
  if ( n == 1 ) {
    return x == 1 ;
  }
  int power = 1 ;
  while ( power < x ) {
    power *= n ;
  }
  return power == x ;
}

***Example ends here:
int chooseNum ( int x , int y ) {
  if ( x > y ) {
    return - 1 ;
  }
  if ( y % 2 == 0 ) {
    return y ;
  }
  if ( x == y ) {
    return - 1 ;
  }
  return y - 1 ;
}

***Example ends here:
boolean equalsToSumEven ( int n ) {
  return n % 2 == 0 && n >= 8 ;
}

***Example ends here:
int SpecialFactorial ( int n ) {
  int fact = 1 ;
  int special_fact = 1 ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) {
    fact *= i ;
    special_fact *= fact ;
  }
  return special_fact ;
}

***Example ends here:
int XOrY ( int n , int x , int y ) {
  boolean isPrime = n >= 2 ;
  for ( int i = 2 ;
  i < n ;
  i ++ ) {
    if ( n % i == 0 ) {
      isPrime = false ;
      break ;
    }
  }
  if ( isPrime ) {
    return x ;
  }
  return y ;
}

***Example ends here:
boolean rightAngleTriangle ( int a , int b , int c ) {
  return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b ;
}

***Example ends here:
int FastPow ( int n , int k ) {
  if ( k == 0 ) {
    return 1 ;
  }
  int temp = FastPow ( n , k / 2 ) ;
  if ( k % 2 == 0 ) {
    return temp * temp ;
  }
  else {
    return n * temp * temp ;
  }
}

***Example ends here:
boolean isPalin ( String s ) {
  int l = s . length ( ) / 2 ;
  for ( int i = 0 ;
  i < l ;
  i ++ ) {
    if ( s . charAt ( i ) != s . charAt ( s . length ( ) - i - 1 ) ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int FindSum ( int n ) {
  int ans = 0 , temp = 0 ;
  for ( int i = 1 ;
  i <= n && temp < n ;
  i ++ ) {
    temp = i - 1 ;
    int num = 1 ;
    while ( temp < n ) {
      if ( temp + i <= n ) ans += i * num ;
      else ans += ( n - temp ) * num ;
      temp += i ;
      num += 1 ;
    }
  }
  return ans ;
}

***Example ends here:
int getNextGap ( int gap ) {
  gap = gap * 10 / 13 ;
  if ( gap < 1 ) {
    return 1 ;
  }
  return gap ;
}

***Example ends here:
int CountNonDecreasing ( int n ) {
  int k = 10 ;
  int count = 1 ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) {
    count *= k + i - 1 ;
    count /= i ;
  }
  return count ;
}

***Example ends here:
int Power ( int x , int y ) {
  if ( y == 0 ) {
    return 1 ;
  }
  else if ( y % 2 == 0 ) {
    return Power ( x , y / 2 ) * Power ( x , y / 2 ) ;
  }
  else {
    return x * Power ( x , y / 2 ) * Power ( x , y / 2 ) ;
  }
}

***Example ends here:
double Power ( double x , int y ) {
  if ( y == 0 ) {
    return 1 ;
  }
  double temp = Power ( x , y / 2 ) ;
  if ( y % 2 == 0 ) {
    return temp * temp ;
  }
  else {
    if ( y > 0 ) {
      return x * temp * temp ;
    }
    else {
      return temp * temp / x ;
    }
  }
}

***Example ends here:
int Multiply ( int x , int y ) {
  if ( y == 0 ) {
    return 0 ;
  }
  else if ( y > 0 ) {
    return x + Multiply ( x , y - 1 ) ;
  }
  else {
    return - Multiply ( x , - y ) ;
  }
}

***Example ends here:
int Smallest ( int x , int y , int z ) {
  if ( ! ( y / x ) ) {
    return ! ( y / z ) ? y : z ;
  }
  return ! ( x / z ) ? x : z ;
}

***Example ends here:
boolean isPowerOfFour ( int n ) {
  if ( n == 0 ) {
    return false ;
  }
  while ( n != 1 ) {
    if ( n % 4 != 0 ) {
      return false ;
    }
    n = n / 4 ;
  }
  return true ;
}

***Example ends here:
int ModInverse ( int a , int m ) {
  int m0 = m ;
  int x0 = 0 , x1 = 1 ;
  if ( m == 1 ) {
    return 0 ;
  }
  while ( a > 1 ) {
    int q = a / m ;
    int t = m ;
    m = a % m ;
    a = t ;
    t = x0 ;
    x0 = x1 - q * x0 ;
    x1 = t ;
  }
  if ( x1 < 0 ) {
    x1 += m0 ;
  }
  return x1 ;
}

***Example ends here:
int CntRotations ( String s , int n ) {
  String s2 = s + s ;
  int [ ] pre = new int [ 2 * n ] ;
  for ( int i = 0 ;
  i < 2 * n ;
  i ++ ) {
    if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ;
    if ( s2 . charAt ( i ) == 'a' || s2 . charAt ( i ) == 'e' || s2 . charAt ( i ) == 'i' || s2 . charAt ( i ) == 'o' || s2 . charAt ( i ) == 'u' ) pre [ i ] ++ ;
  }
  int ans = 0 ;
  for ( int i = n - 1 ;
  i < 2 * n - 1 ;
  i ++ ) {
    int r = i , l = i - n ;
    int x1 = pre [ r ] ;
    if ( l >= 0 ) x1 -= pre [ l ] ;
    r = i - n / 2 ;
    int left = pre [ r ] ;
    if ( l >= 0 ) left -= pre [ l ] ;
    int right = x1 - left ;
    if ( left > right ) ans ++ ;
  }
  return ans ;
}

***Example ends here:
int BinomialCoeff ( int n , int k ) {
  int res = 1 ;
  if ( k > n - k ) k = n - k ;
  for ( int i = 0 ;
  i < k ;
  ++ i ) {
    res *= n - i ;
    res /= i + 1 ;
  }
  return res ;
}

***Example ends here:
boolean isPrefix ( String temp , String s ) {
  if ( temp . length ( ) < s . length ( ) ) {
    return false ;
  }
  else {
    for ( int i = 0 ;
    i < s . length ( ) ;
    i ++ ) {
      if ( s . charAt ( i ) != temp . charAt ( i ) ) {
        return false ;
      }
    }
    return true ;
  }
}

***Example ends here:
String LexicographicallySmallestString ( String s , int n ) {
  int last_ze = - 1 ;
  String ans = "" ;
  for ( int i = n - 1 ;
  i >= 0 ;
  i -- ) {
    if ( s . charAt ( i ) == '0' ) {
      last_ze = i ;
      break ;
    }
  }
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( i <= last_ze && s . charAt ( i ) == '0' ) ans += s . charAt ( i ) ;
    else if ( i > last_ze ) ans += s . charAt ( i ) ;
  }
  return ans ;
}

***Example ends here:
int CalculateMax ( int n , int m , int k ) {
  int ans = - 1 ;
  int low = 0 , high = m ;
  while ( low <= high ) {
    int mid = ( low + high ) / 2 ;
    int val = 0 ;
    int l = k - 1 ;
    int r = n - k ;
    val += mid ;
    if ( mid >= l ) val += l * ( 2 * mid - l - 1 ) / 2 ;
    else val += mid * ( mid - 1 ) / 2 + ( l - mid ) ;
    if ( mid >= r ) val += r * ( 2 * mid - r - 1 ) / 2 ;
    else val += mid * ( mid - 1 ) / 2 + ( r - mid ) ;
    if ( val <= m ) {
      ans = Math . max ( ans , mid ) ;
      low = mid + 1 ;
    }
    else high = mid - 1 ;
  }
  return ans ;
}

***Example ends here:
int FindLength ( String s , char i , char j ) {
  char required = i ;
  int length = 0 ;
  for ( char curr : s . toCharArray ( ) ) {
    if ( curr == required ) {
      length += 1 ;
      if ( required == i ) required = j ;
      else required = i ;
    }
  }
  return length ;
}

***Example ends here:
boolean checkReverse ( int leftSum , int rightSum ) {
  int rev = 0 ;
  int temp = rightSum ;
  while ( temp != 0 ) {
    rev = rev * 10 + temp % 10 ;
    temp /= 10 ;
  }
  if ( rev == leftSum ) {
    return true ;
  }
  return false ;
}

***Example ends here:
boolean isComposite ( int n ) {
  if ( n <= 1 ) {
    return false ;
  }
  if ( n <= 3 ) {
    return false ;
  }
  if ( n % 2 == 0 || n % 3 == 0 ) {
    return true ;
  }
  for ( int i = 5 ;
  i * i <= n ;
  i = i + 6 ) {
    if ( n % i == 0 || n % ( i + 2 ) == 0 ) {
      return true ;
    }
  }
  return false ;
}

***Example ends here:
int MinDeletion ( String s ) {
  int n = s . length ( ) ;
  int firstidx1 = - 1 ;
  int lastidx0 = - 1 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( s . charAt ( i ) == '1' ) {
      firstidx1 = i ;
      break ;
    }
  }
  for ( int i = n - 1 ;
  i >= 0 ;
  i -- ) {
    if ( s . charAt ( i ) == '0' ) {
      lastidx0 = i ;
      break ;
    }
  }
  if ( firstidx1 == - 1 || lastidx0 == - 1 ) {
    return 0 ;
  }
  int count1 = 0 , count0 = 0 ;
  for ( int i = 0 ;
  i < lastidx0 ;
  i ++ ) {
    if ( s . charAt ( i ) == '1' ) {
      count1 ++ ;
    }
  }
  for ( int i = firstidx1 + 1 ;
  i < n ;
  i ++ ) {
    if ( s . charAt ( i ) == '1' ) {
      count0 ++ ;
    }
  }
  return Math . min ( count0 , count1 ) ;
}

***Example ends here:
int MinSteps ( String s , int n ) {
  int smaller , cost = 0 ;
  int [ ] f = new int [ 26 ] ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    int currEle = s . charAt ( i ) - 'a' ;
    smaller = 0 ;
    for ( int j = 0 ;
    j <= currEle ;
    j ++ ) {
      if ( f [ j ] != 0 ) smaller += f [ j ] ;
    }
    if ( smaller == 0 ) cost += i + 1 ;
    else cost += i - smaller + 1 ;
    f [ s . charAt ( i ) - 'a' ] ++ ;
  }
  return cost ;
}

***Example ends here:
int NumberOfWays ( int n ) {
  int count = 0 ;
  for ( int a = 1 ;
  a < n ;
  a ++ ) {
    for ( int b = 1 ;
    b < n ;
    b ++ ) {
      int c = n - ( a + b ) ;
      if ( a + b > c && a + c > b && b + c > a ) count ++ ;
    }
  }
  return count ;
}

***Example ends here:
int SlopeOfNum ( String num , int n ) {
  int slope = 0 ;
  for ( int i = 1 ;
  i < n - 1 ;
  i ++ ) {
    if ( num . charAt ( i ) > num . charAt ( i - 1 ) && num . charAt ( i ) > num . charAt ( i + 1 ) ) slope ++ ;
    else if ( num . charAt ( i ) < num . charAt ( i - 1 ) && num . charAt ( i ) < num . charAt ( i + 1 ) ) slope ++ ;
  }
  return slope ;
}

***Example ends here:
int MiddleOfThree ( int a , int b , int c ) {
  int x = a - b ;
  int y = b - c ;
  int z = a - c ;
  if ( x * y > 0 ) return b ;
  else if ( x * z > 0 ) return c ;
  else return a ;
}

***Example ends here:
int countMaxSetBits ( int left , int right ) {
  while ( ( left | ( left + 1 ) ) <= right ) left |= left + 1 ;
  return left ;
}

***Example ends here:
int FindS ( int s ) {
  int l = 1 , r = ( s / 2 ) + 1 ;
  while ( l <= r ) {
    int mid = ( l + r ) / 2 ;
    int sum = mid * ( mid + 1 ) / 2 ;
    if ( sum == s ) {
      return mid ;
    }
    else if ( sum > s ) {
      r = mid - 1 ;
    }
    else {
      l = mid + 1 ;
    }
  }
  return - 1 ;
}

***Example ends here:
boolean Check ( String s ) {
  int min = Integer . MAX_VALUE ;
  int max = Integer . MIN_VALUE ;
  int sum = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    int ascii = s . charAt ( i ) ;
    if ( ascii < 96 || ascii > 122 ) {
      return false ;
    }
    sum += ascii ;
    if ( min > ascii ) min = ascii ;
    if ( max < ascii ) max = ascii ;
  }
  min -= 1 ;
  int eSum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ;
  return sum == eSum ;
}

***Example ends here:
int minimumPossibleProduct ( int k ) {
  int res = 1 ;
  int r = ( 1 << k ) - 1 ;
  for ( int i = 0 ;
  i < k ;
  i ++ ) res *= r - 1 ;
  res *= r ;
  return res ;
}

***Example ends here:
int FindInGrid ( int i , int j ) {
  if ( i == j ) {
    return i * i - ( i - 1 ) ;
  }
  else if ( i > j ) {
    if ( i % 2 == 0 ) {
      return i * i - ( j - 1 ) ;
    }
    else {
      return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ;
    }
  }
  else {
    if ( j % 2 == 0 ) {
      return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ;
    }
    else {
      return j * j - ( i - 1 ) ;
    }
  }
}

***Example ends here:
int FindMinOperationsReqEmpStr ( String s ) {
  int cnt_one = 0 ;
  int cnt_zero = 0 ;
  int n = s . length ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( s . charAt ( i ) == '0' ) {
      if ( cnt_one > 0 ) cnt_one -- ;
      cnt_zero ++ ;
    }
    else {
      if ( cnt_zero > 0 ) cnt_zero -- ;
      cnt_one ++ ;
    }
  }
  return cnt_one + cnt_zero ;
}

***Example ends here:
boolean isReachable ( int x1 , int y1 , int x2 , int y2 ) {
  while ( x2 > x1 && y2 > y1 ) {
    if ( x2 > y2 ) x2 %= y2 ;
    else y2 %= x2 ;
  }
  if ( x2 == x1 ) return y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ;
  else if ( y2 == y1 ) return x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ;
  else return false ;
}

***Example ends here:
int FindMaxSoln ( int n , int x , int y ) {
  int ans = Integer . MIN_VALUE ;
  for ( int k = 0 ;
  k <= n ;
  k ++ ) {
    if ( k % x == y ) ans = Math . max ( ans , k ) ;
  }
  return ans >= 0 && ans <= n ? ans : - 1 ;
}

***Example ends here:
int NumberOfPairs ( int n ) {
  int count = 0 ;
  int i = 1 , j = n - 1 ;
  while ( i < j ) {
    if ( i + j == n ) count ++ ;
    i ++ ;
    j -- ;
  }
  return count ;
}

***Example ends here:
int MinChanges ( String s , int n ) {
  int count = 0 , zeros = 0 , ones = 0 ;
  if ( s . charAt ( 0 ) != '1' ) {
    count ++ ;
    ones ++ ;
  }
  for ( int i = 1 ;
  i < n ;
  i ++ ) {
    if ( s . charAt ( i ) == '0' ) zeros ++ ;
    else ones ++ ;
    if ( zeros > ones ) {
      zeros -- ;
      ones ++ ;
      count ++ ;
    }
  }
  return count ;
}

***Example ends here:
int KVisibleFromLeft ( int n , int k ) {
  if ( n == k ) {
    return 1 ;
  }
  if ( k == 1 ) {
    int ans = 1 ;
    for ( int i = 1 ;
    i < n ;
    i ++ ) {
      ans *= i ;
    }
    return ans ;
  }
  return KVisibleFromLeft ( n - 1 , k - 1 ) + ( n - 1 ) * KVisibleFromLeft ( n - 1 , k ) ;
}

***Example ends here:
double Find ( int n , int sum ) {
  if ( sum > 6 * n || sum < n ) {
    return 0 ;
  }
  if ( n == 1 ) {
    if ( sum >= 1 && sum <= 6 ) {
      return 1.0 / 6 ;
    }
    else {
      return 0 ;
    }
  }
  double s = 0 ;
  for ( int i = 1 ;
  i <= 6 ;
  i ++ ) {
    s += Find ( n - 1 , sum - i ) / 6 ;
  }
  return s ;
}

***Example ends here:
int BinCoff ( int n , int r ) {
  int val = 1 ;
  if ( r > n - r ) r = n - r ;
  for ( int i = 0 ;
  i < r ;
  i ++ ) {
    val *= n - i ;
    val /= i + 1 ;
  }
  return val ;
}

***Example ends here:
int getMask ( int val ) {
  int mask = 0 ;
  if ( val == 0 ) {
    return 1 ;
  }
  while ( val > 0 ) {
    int d = val % 10 ;
    mask |= 1 << d ;
    val /= 10 ;
  }
  return mask ;
}

***Example ends here:
int WaysToKAdjacentSetBits ( int n , int k , int currentIndex , int adjacentSetBits , int lastBit ) {
  if ( currentIndex == n ) {
    if ( adjacentSetBits == k ) {
      return 1 ;
    }
    return 0 ;
  }
  int noOfWays = 0 ;
  if ( lastBit == 1 ) {
    noOfWays += WaysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits + 1 , 1 ) ;
    noOfWays += WaysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ;
  }
  else if ( ! lastBit ) {
    noOfWays += WaysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 1 ) ;
    noOfWays += WaysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ;
  }
  return noOfWays ;
}

***Example ends here:
int CheckFunc ( int i , int j , String st ) {
  if ( st . charAt ( i ) == '(' && st . charAt ( j ) == ')' ) return 1 ;
  if ( st . charAt ( i ) == '(' && st . charAt ( j ) == '?' ) return 1 ;
  if ( st . charAt ( i ) == '?' && st . charAt ( j ) == ')' ) return 1 ;
  if ( st . charAt ( i ) == '[' && st . charAt ( j ) == ']' ) return 1 ;
  if ( st . charAt ( i ) == '[' && st . charAt ( j ) == '?' ) return 1 ;
  if ( st . charAt ( i ) == '?' && st . charAt ( j ) == ']' ) return 1 ;
  if ( st . charAt ( i ) == '{' && st . charAt ( j ) == '}' ) return 1 ;
  if ( st . charAt ( i ) == '{' && st . charAt ( j ) == '?' ) return 1 ;
  if ( st . charAt ( i ) == '?' && st . charAt ( j ) == '}' ) return 1 ;
  return 0 ;
}

***Example ends here:
int findGolomb ( int n ) {
  if ( n == 1 ) {
    return 1 ;
  }
  return 1 + findGolomb ( n - findGolomb ( findGolomb ( n - 1 ) ) ) ;
}

***Example ends here:
boolean AllOnes ( String s , int n ) {
  int co = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) co += s . charAt ( i ) == '1' ? 1 : 0 ;
  return co == n ;
}

***Example ends here:
int Pad ( int n ) {
  int p_prev_prev = 1 , p_prev = 1 , p_curr = 1 , p_next = 1 ;
  for ( int i = 3 ;
  i <= n ;
  i ++ ) {
    p_next = p_prev_prev + p_prev ;
    p_prev_prev = p_prev ;
    p_prev = p_curr ;
    p_curr = p_next ;
  }
  return p_next ;
}

***Example ends here:
int OddLengthPalindrome ( int k ) {
  int palin = k ;
  k = k / 10 ;
  while ( k > 0 ) {
    int rev = k % 10 ;
    palin = palin * 10 + rev ;
    k = k / 10 ;
  }
  return palin ;
}

***Example ends here:
String ChangeString ( String s0 ) {
  char [ ] s = s0 . toCharArray ( ) ;
  int n = s . length ;
  if ( s [ 0 ] == '?' ) {
    s [ 0 ] = 'a' ;
    if ( s [ 0 ] == s [ 1 ] ) s [ 0 ] ++ ;
  }
  for ( int i = 1 ;
  i < n - 1 ;
  i ++ ) {
    if ( s [ i ] == '?' ) {
      s [ i ] = 'a' ;
      if ( s [ i ] == s [ i - 1 ] ) s [ i ] ++ ;
      if ( s [ i ] == s [ i + 1 ] ) s [ i ] ++ ;
      if ( s [ i ] == s [ i - 1 ] ) s [ i ] ++ ;
    }
  }
  if ( s [ n - 1 ] == '?' ) {
    s [ n - 1 ] = 'a' ;
    if ( s [ n - 1 ] == s [ n - 2 ] ) s [ n - 1 ] ++ ;
  }
  return new String ( s ) ;
}

***Example ends here:
int TotalHammingDistance ( int n ) {
  int i = 1 , sum = 0 ;
  while ( n / i > 0 ) {
    sum = sum + n / i ;
    i = i * 2 ;
  }
  return sum ;
}

***Example ends here:
int CheckBitonic ( String s ) {
  int i = 1 ;
  for ( ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s . charAt ( i ) > s . charAt ( i - 1 ) ) continue ;
    if ( s . charAt ( i ) <= s . charAt ( i - 1 ) ) break ;
  }
  if ( i == s . length ( ) - 1 ) return 1 ;
  int j = i + 1 ;
  for ( ;
  j < s . length ( ) ;
  j ++ ) {
    if ( s . charAt ( j ) < s . charAt ( j - 1 ) ) continue ;
    if ( s . charAt ( j ) >= s . charAt ( j - 1 ) ) break ;
  }
  i = j ;
  if ( i != s . length ( ) ) return 0 ;
  return 1 ;
}

***Example ends here:
boolean endsWith ( String str , String pat ) {
  int pat_len = pat . length ( ) ;
  int str_len = str . length ( ) ;
  if ( pat_len > str_len ) {
    return false ;
  }
  pat_len -- ;
  str_len -- ;
  while ( pat_len >= 0 ) {
    if ( pat . charAt ( pat_len ) != str . charAt ( str_len ) ) {
      return false ;
    }
    pat_len -- ;
    str_len -- ;
  }
  return true ;
}

***Example ends here:
int GetSum ( int n , int d ) {
  if ( n < d ) {
    return 0 ;
  }
  while ( n % 10 != d ) {
    n -- ;
  }
  int k = n / 10 ;
  return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ;
}

***Example ends here:
int BalancedStringBySwapping ( String s ) {
  int unbalanced_pair = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  ++ i ) {
    if ( unbalanced_pair > 0 && s . charAt ( i ) == ']' ) -- unbalanced_pair ;
    else if ( s . charAt ( i ) == '[' ) ++ unbalanced_pair ;
  }
  return ( unbalanced_pair + 1 ) / 2 ;
}

***Example ends here:
int computeHash ( String s ) {
  int p = 31 ;
  long mod = 1e9 + 7 ;
  long hashVal = 0 ;
  long mul = 1 ;
  for ( char ch : s . toCharArray ( ) ) {
    hashVal = ( hashVal + ( ch - 'a' + 1 ) * mul ) % mod ;
    mul = mul * p % mod ;
  }
  return hashVal ;
}

***Example ends here:
int CountOfSubstringWithOnlyOnes ( String s ) {
  int res = 0 , count = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    count = s . charAt ( i ) == '1' ? count + 1 : 0 ;
    res = res + count ;
  }
  return res ;
}

***Example ends here:
int Composite ( int n ) {
  int flag = 0 ;
  int c = 0 ;
  for ( int j = 1 ;
  j <= n ;
  j ++ ) {
    if ( n % j == 0 ) c += 1 ;
  }
  if ( c >= 3 ) flag = 1 ;
  return flag ;
}

***Example ends here:
boolean isDivBySix ( String s , int n ) {
  int sum = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) sum += s . charAt ( i ) - 'a' + 1 ;
  if ( sum % 3 != 0 ) {
    return false ;
  }
  int lastDigit = ( s . charAt ( n - 1 ) - 'a' + 1 ) % 10 ;
  if ( lastDigit % 2 != 0 ) {
    return false ;
  }
  return true ;
}

***Example ends here:
boolean isRedundantBraces ( String s ) {
  int a = 0 , b = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s . charAt ( i ) == '(' && s . charAt ( i + 2 ) == ')' ) {
      return true ;
    }
    if ( s . charAt ( i ) == '*' || s . charAt ( i ) == '+' || s . charAt ( i ) == '-' || s . charAt ( i ) == '/' ) {
      a ++ ;
    }
    if ( s . charAt ( i ) == '(' ) {
      b ++ ;
    }
  }
  if ( b > a ) {
    return true ;
  }
  return false ;
}

***Example ends here:
int CountSubStr ( String s , int n ) {
  int count = 0 ;
  for ( int i = 0 ;
  i < n - 2 ;
  ) {
    if ( s . charAt ( i ) == '0' && s . charAt ( i + 1 ) == '1' && s . charAt ( i + 2 ) == '0' ) {
      count ++ ;
      i += 3 ;
    }
    else if ( s . charAt ( i ) == '1' && s . charAt ( i + 1 ) == '0' && s . charAt ( i + 2 ) == '1' ) {
      count ++ ;
      i += 3 ;
    }
    else {
      i ++ ;
    }
  }
  return count ;
}

***Example ends here:
int PrefixOccurrences ( String s ) {
  char c = s . charAt ( 0 ) ;
  int count_c = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s . charAt ( i ) == c ) count_c ++ ;
  }
  return count_c ;
}

***Example ends here:
boolean isValid ( String s , int len ) {
  for ( int i = 1 ;
  i < len ;
  i ++ ) {
    if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int Count ( String s , int k ) {
  int n = s . length ( ) ;
  int d = 0 ;
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) d += s . charAt ( i ) ;
  if ( d % k == 0 ) count += 1 ;
  for ( int i = k ;
  i < n ;
  i ++ ) {
    int prev = s . charAt ( i - k ) ;
    d -= prev ;
    d += s . charAt ( i ) ;
    if ( d % k == 0 ) count += 1 ;
  }
  return count ;
}

***Example ends here:
int FindSubstringCount ( String s ) {
  int result = 0 ;
  int n = s . length ( ) ;
  int i = 0 ;
  while ( i < n - 1 ) {
    if ( s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) {
      result ++ ;
      while ( i < n - 1 && s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) {
        i ++ ;
      }
    }
    i ++ ;
  }
  return result ;
}

***Example ends here:
boolean find ( String s1 , String s2 ) {
  int len1 = s1 . length ( ) , len2 = s2 . length ( ) ;
  if ( len1 != len2 ) {
    return false ;
  }
  int [ ] d = new int [ len1 ] ;
  d [ 0 ] = s2 . charAt ( 0 ) - s1 . charAt ( 0 ) ;
  for ( int i = 1 ;
  i < len1 ;
  i ++ ) {
    if ( s1 . charAt ( i ) > s2 . charAt ( i ) ) {
      return false ;
    }
    else {
      d [ i ] = s2 . charAt ( i ) - s1 . charAt ( i ) ;
    }
  }
  for ( int i = 0 ;
  i < len1 - 1 ;
  i ++ ) {
    if ( d [ i ] < d [ i + 1 ] ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
boolean isInGivenBase ( String s , int bas ) {
  if ( bas > 16 ) {
    return false ;
  }
  else if ( bas <= 10 ) {
    for ( int i = 0 ;
    i < s . length ( ) ;
    i ++ ) {
      if ( ! ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) ) {
        return false ;
      }
    }
  }
  else {
    for ( int i = 0 ;
    i < s . length ( ) ;
    i ++ ) {
      if ( ! ( ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) || ( s . charAt ( i ) >= 'A' && s . charAt ( i ) < ( 'A' + bas - 10 ) ) ) ) {
        return false ;
      }
    }
  }
  return true ;
}

***Example ends here:
int CountNonEmptySubstr ( String s ) {
  int n = s . length ( ) ;
  return n * ( n + 1 ) / 2 ;
}

***Example ends here:
int EvenDecimalValue ( String s , int n ) {
  int result = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = i ;
    j < n ;
    j ++ ) {
      int decimalValue = 0 ;
      int powerOf2 = 1 ;
      for ( int k = i ;
      k <= j ;
      k ++ ) {
        decimalValue += ( s . charAt ( k ) - '0' ) * powerOf2 ;
        powerOf2 *= 2 ;
      }
      if ( decimalValue % 2 == 0 ) result ++ ;
    }
  }
  return result ;
}

***Example ends here:
int Calculate ( String s ) {
  int ans = 6 ;
  for ( int i = 0 ;
  i < 10 ;
  ++ i ) {
    for ( int j = 0 ;
    j < 10 ;
    ++ j ) {
      for ( int k = 0 ;
      k < 10 ;
      ++ k ) {
        for ( int l = 0 ;
        l < 10 ;
        ++ l ) {
          for ( int m = 0 ;
          m < 10 ;
          ++ m ) {
            for ( int n = 0 ;
            n < 10 ;
            ++ n ) {
              if ( i + j + k == l + m + n ) {
                int c = 0 ;
                if ( i != s . charAt ( 0 ) - '0' ) c ++ ;
                if ( j != s . charAt ( 1 ) - '0' ) c ++ ;
                if ( k != s . charAt ( 2 ) - '0' ) c ++ ;
                if ( l != s . charAt ( 3 ) - '0' ) c ++ ;
                if ( m != s . charAt ( 4 ) - '0' ) c ++ ;
                if ( n != s . charAt ( 5 ) - '0' ) c ++ ;
                if ( c < ans ) ans = c ;
              }
            }
          }
        }
      }
    }
  }
  return ans ;
}

***Example ends here:
int xorZero ( String s ) {
  int oneCount = 0 , zeroCount = 0 ;
  int n = s . length ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( s . charAt ( i ) == '1' ) oneCount ++ ;
    else zeroCount ++ ;
  }
  if ( oneCount % 2 == 0 ) return zeroCount ;
  return oneCount ;
}

***Example ends here:
String EvenLength ( String n ) {
  String res = n ;
  for ( int j = n . length ( ) - 1 ;
  j >= 0 ;
  -- j ) res += n . charAt ( j ) ;
  return res ;
}

***Example ends here:
int CountSubstringWithEqualEnds ( String s ) {
  int result = 0 ;
  int n = s . length ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = i ;
    j < n ;
    j ++ ) {
      if ( s . charAt ( i ) == s . charAt ( j ) ) result ++ ;
    }
  }
  return result ;
}

***Example ends here:
double NormalSlope ( double a , double b , double x1 , double y1 ) {
  double g = a / 2 ;
  double f = b / 2 ;
  if ( g - x1 == 0 ) {
    return - 1 ;
  }
  double slope = ( f - y1 ) / ( g - x1 ) ;
  if ( slope == 0 ) {
    return - 2 ;
  }
  return slope ;
}

***Example ends here:
boolean Orthogonality ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) {
  int dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ;
  if ( dsquare == r1 * r1 + r2 * r2 ) {
    return true ;
  }
  else {
    return false ;
  }
}

***Example ends here:
double FindAreaShaded ( double a ) {
  double sq_area = a * a ;
  double semi_circle_area = 3.14 * ( a * a ) / 8 ;
  double shaded_area = 4 * semi_circle_area - sq_area ;
  return shaded_area ;
}

***Example ends here:
int Factorial ( int a , int b ) {
  int res = 1 ;
  for ( int i = 1 ;
  i <= a + b ;
  i ++ ) res = res * i ;
  for ( int i = 1 ;
  i <= a ;
  i ++ ) res = res / i ;
  for ( int i = 1 ;
  i <= b ;
  i ++ ) res = res / i ;
  return res ;
}

***Example ends here:
int FactorTree ( int n ) {
  int height = 0 ;
  while ( n > 1 ) {
    boolean flag = false ;
    for ( int i = 2 ;
    i <= Math . sqrt ( n ) ;
    i ++ ) {
      if ( n % i == 0 ) {
        n = n / i ;
        flag = true ;
        break ;
      }
    }
    height ++ ;
    if ( ! flag ) break ;
  }
  return height ;
}

***Example ends here:
String FindIfPossible ( int n , int s , int x ) {
  if ( s >= x && s % 2 == x % 2 ) {
    if ( n >= 3 ) {
      return "Yes" ;
    }
    if ( n == 1 ) {
      if ( s == x ) {
        return "Yes" ;
      }
      else {
        return "No" ;
      }
    }
    if ( n == 2 ) {
      int c = ( s - x ) / 2 ;
      int a = c ;
      int b = c ;
      a = a + x ;
      if ( ( a ^ b ) == x ) {
        return "Yes" ;
      }
      else {
        return "No" ;
      }
    }
  }
  return "No" ;
}

***Example ends here:
int MaximumTripletXor ( int a , int b , int c ) {
  int ans = 0 ;
  for ( int i = 30 ;
  i >= 0 ;
  i -- ) {
    int cur = 1 << i ;
    if ( a >= cur ) {
      ans += cur ;
      a -= cur ;
    }
    else if ( b >= cur ) {
      ans += cur ;
      b -= cur ;
    }
    else if ( c >= cur ) {
      ans += cur ;
      c -= cur ;
    }
  }
  return ans ;
}

***Example ends here:
int ItemType ( int n ) {
  int count = 0 ;
  int day = 1 ;
  while ( count + day * ( day + 1 ) / 2 < n ) {
    count += day * ( day + 1 ) / 2 ;
    day ++ ;
  }
  for ( int type = day ;
  type > 0 ;
  type -- ) {
    count += type ;
    if ( count >= n ) {
      return type ;
    }
  }
  return 0 ;
}

***Example ends here:
int MaxGcdInRange ( int l , int r ) {
  int ans = 1 ;
  for ( int z = r ;
  z >= 1 ;
  z -- ) {
    if ( r / z - ( l - 1 ) / z > 1 ) {
      ans = z ;
      break ;
    }
  }
  return ans ;
}

***Example ends here:
int SumOfDigits ( int n ) {
  int sum = 0 ;
  while ( n != 0 ) {
    sum += n % 10 ;
    n = n / 10 ;
  }
  return sum ;
}

***Example ends here:
boolean isRepUnitNum ( int n , int b ) {
  int length = 0 ;
  int count_one = 0 ;
  while ( n != 0 ) {
    int r = n % b ;
    length ++ ;
    if ( r == 1 ) count_one ++ ;
    n = n / b ;
  }
  return count_one >= 3 && count_one == length ;
}

***Example ends here:
boolean isStraightLineNum ( int n ) {
  if ( n <= 99 ) {
    return false ;
  }
  String s = Integer . toString ( n ) ;
  int d = s . charAt ( 1 ) - s . charAt ( 0 ) ;
  for ( int i = 2 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s . charAt ( i ) - s . charAt ( i - 1 ) != d ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int getCount ( int d , int n ) {
  int no = n / d ;
  int result = no ;
  for ( int p = 2 ;
  p * p <= no ;
  ++ p ) {
    if ( no % p == 0 ) {
      while ( no % p == 0 ) no /= p ;
      result -= result / p ;
    }
  }
  if ( no > 1 ) result -= result / no ;
  return result ;
}

***Example ends here:
boolean isEvenParity ( int x ) {
  int parity = 0 ;
  while ( x != 0 ) {
    if ( x & 1 ) parity ++ ;
    x = x >> 1 ;
  }
  if ( parity % 2 == 0 ) return true ;
  else return false ;
}

***Example ends here:
int IsPerfect ( int n ) {
  int sum = 1 ;
  for ( int i = 2 ;
  i * i <= n ;
  i ++ ) {
    if ( n % i == 0 ) {
      if ( i * i != n ) sum = sum + i + n / i ;
      else sum = sum + i ;
    }
  }
  if ( sum == n && n != 1 ) return n ;
  return 0 ;
}

***Example ends here:
int LogAToBaseB ( int a , int b ) {
  return a > b - 1 ? 1 + LogAToBaseB ( a / b , b ) : 0 ;
}

***Example ends here:
int UsingBinarySearch ( int start , int end , int n , int s ) {
  if ( start >= end ) {
    return start ;
  }
  int mid = start + ( end - start ) / 2 ;
  int totalSum = n * ( n + 1 ) / 2 ;
  int midSum = mid * ( mid + 1 ) / 2 ;
  if ( totalSum - midSum <= s ) {
    return UsingBinarySearch ( start , mid , n , s ) ;
  }
  return UsingBinarySearch ( mid + 1 , end , n , s ) ;
}

***Example ends here:
String MinInt ( String s ) {
  char [ ] s1 = s . toCharArray ( ) ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s1 [ i ] >= '5' ) s1 [ i ] = '9' - s1 [ i ] + '0' ;
  }
  if ( s1 [ 0 ] == '0' ) s1 [ 0 ] = '9' ;
  return new String ( s1 ) ;
}

***Example ends here:
int CountTriplets ( int a , int b , int c ) {
  int ans = 0 ;
  for ( int i = 1 ;
  i <= a ;
  i ++ ) {
    for ( int j = 1 ;
    j <= b ;
    j ++ ) {
      for ( int k = 1 ;
      k <= c ;
      k ++ ) {
        if ( i * k > j * j ) ans ++ ;
      }
    }
  }
  return ans ;
}

***Example ends here:
boolean TopsyTurvy ( String s ) {
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s . charAt ( i ) == '2' || s . charAt ( i ) == '4' || s . charAt ( i ) == '5' || s . charAt ( i ) == '6' || s . charAt ( i ) == '7' || s . charAt ( i ) == '9' ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int SumOfLastDig ( int n , int m ) {
  int sum = 0 ;
  int k = n / m ;
  int [ ] arr = new int [ 10 ] ;
  for ( int i = 0 ;
  i < 10 ;
  i ++ ) {
    arr [ i ] = m * ( i + 1 ) % 10 ;
    sum += arr [ i ] ;
  }
  int rem = k % 10 ;
  int ans = k / 10 * sum ;
  for ( int i = 0 ;
  i < rem ;
  i ++ ) ans += arr [ i ] ;
  return ans ;
}

***Example ends here:
int TotalPay ( int total_items , int price_of_one_item , int n , int m ) {
  int free_items = 0 , actual = 0 ;
  free_items = total_items / ( n + m ) ;
  actual = total_items - free_items ;
  int amount = actual * price_of_one_item ;
  return amount ;
}

***Example ends here:
int MinOperations ( int x , int y , int p , int q ) {
  if ( y % x != 0 ) {
    return - 1 ;
  }
  int d = y / x ;
  int a = 0 ;
  while ( d % p == 0 ) {
    d /= p ;
    a += 1 ;
  }
  int b = 0 ;
  while ( d % q == 0 ) {
    d /= q ;
    b += 1 ;
  }
  if ( d != 1 ) {
    return - 1 ;
  }
  return a + b ;
}

***Example ends here:
boolean isMersenne ( int n ) {
  while ( n != 0 ) {
    int r = n % 2 ;
    if ( r == 0 ) {
      return false ;
    }
    n /= 2 ;
  }
  return true ;
}

***Example ends here:
int findThirdDigit ( int n ) {
  if ( n < 3 ) {
    return 0 ;
  }
  return n & 1 ? 1 : 6 ;
}

***Example ends here:
boolean isOddLength ( int num ) {
  int count = 0 ;
  while ( num > 0 ) {
    num /= 10 ;
    count ++ ;
  }
  if ( count % 2 != 0 ) {
    return true ;
  }
  return false ;
}

***Example ends here:
boolean checkIsPossible ( int l , int r , int k ) {
  int count = 0 ;
  for ( int i = l ;
  i <= r ;
  i ++ ) {
    if ( i % k == 0 ) count ++ ;
  }
  return count > 1 ;
}

***Example ends here:
int Bytes ( int kilobytes ) {
  int b = kilobytes * 1024 ;
  return b ;
}

***Example ends here:
int OctahedralNum ( int n ) {
  return n * ( 2 * n * n + 1 ) / 3 ;
}

***Example ends here:
String CheckEqual ( String s ) {
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s . charAt ( i ) != '1' && s . charAt ( i ) != '0' && s . charAt ( i ) != '8' ) {
      return "No" ;
    }
  }
  int start = 0 , end = s . length ( ) - 1 ;
  while ( start < end ) {
    if ( s . charAt ( start ) != s . charAt ( end ) ) {
      return "No" ;
    }
    start ++ ;
    end -- ;
  }
  return "Yes" ;
}

***Example ends here:
boolean isUndulating ( String n ) {
  if ( n . length ( ) <= 2 ) {
    return false ;
  }
  for ( int i = 2 ;
  i < n . length ( ) ;
  i ++ ) {
    if ( n . charAt ( i - 2 ) != n . charAt ( i ) ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int FirstDigit ( int n ) {
  while ( n >= 10 ) n /= 10 ;
  return n ;
}

***Example ends here:
int countDigit ( int n ) {
  if ( n == 0 ) {
    return 0 ;
  }
  return 1 + countDigit ( n / 10 ) ;
}

***Example ends here:
boolean isDivisibleBy5 ( String s ) {
  int n = s . length ( ) ;
  return s . charAt ( n - 1 ) - '0' == 0 || s . charAt ( n - 1 ) - '0' == 5 ;
}

***Example ends here:
int Inv ( int a , int m ) {
  int m0 = m ;
  int x0 = 0 , x1 = 1 ;
  if ( m == 1 ) {
    return 0 ;
  }
  while ( a > 1 ) {
    int q = a / m ;
    int t = m ;
    m = a % m ;
    a = t ;
    t = x0 ;
    x0 = x1 - q * x0 ;
    x1 = t ;
  }
  if ( x1 < 0 ) {
    x1 += m0 ;
  }
  return x1 ;
}

***Example ends here:
boolean onlyFirstAndLastAreSet ( int n ) {
  if ( n == 1 ) {
    return true ;
  }
  if ( n == 2 ) {
    return false ;
  }
  return ( ( n - 1 ) & ( n - 2 ) ) == 0 ;
}

***Example ends here:
int Divide ( int dividend , int divisor ) {
  int sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? - 1 : 1 ;
  dividend = Math . abs ( dividend ) ;
  divisor = Math . abs ( divisor ) ;
  int quotient = 0 ;
  long temp = 0 ;
  for ( int i = 31 ;
  i >= 0 ;
  -- i ) {
    if ( temp + ( ( long ) divisor << i ) <= dividend ) {
      temp += ( long ) divisor << i ;
      quotient |= 1 << i ;
    }
  }
  if ( sign == - 1 ) quotient = - quotient ;
  return quotient ;
}

***Example ends here:
char findProfession ( int level , int pos ) {
  if ( level == 1 ) {
    return 'e' ;
  }
  if ( findProfession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) {
    return pos % 2 == 1 ? 'd' : 'e' ;
  }
  return pos % 2 == 1 ? 'e' : 'd' ;
}

***Example ends here:
boolean hasCloseElements ( double [ ] numbers , double threshold ) {
  for ( int i = 0 ;
  i < numbers . length ;
  i ++ ) {
    for ( int j = i + 1 ;
    j < numbers . length ;
    j ++ ) {
      double distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;
      if ( distance < threshold ) {
        return true ;
      }
    }
  }
  return false ;
}

***Example ends here:
double TruncateNumber ( double number ) {
  return Math . fmod ( number , 1 ) ;
}

***Example ends here:
boolean BelowZero ( int [ ] operations ) {
  int balance = 0 ;
  for ( int op : operations ) {
    balance += op ;
    if ( balance < 0 ) {
      return true ;
    }
  }
  return false ;
}

***Example ends here:
double MeanAbsoluteDeviation ( double [ ] numbers ) {
  double sum_num = 0 ;
  for ( double num : numbers ) sum_num += num ;
  double mean = sum_num / numbers . length ;
  double sum_abs_diff = 0 ;
  for ( double num : numbers ) sum_abs_diff += Math . abs ( num - mean ) ;
  return sum_abs_diff / numbers . length ;
}

***Example ends here:
int [ ] Intersperse ( int [ ] numbers , int delimiter ) {
  int [ ] result = new int [ numbers . length ] ;
  if ( numbers . length == 0 ) {
    return result ;
  }
  for ( int i = 0 ;
  i < numbers . length - 1 ;
  i ++ ) {
    result [ i ] = numbers [ i ] + delimiter ;
  }
  result [ numbers . length - 1 ] = numbers [ numbers . length - 1 ] ;
  return result ;
}

***Example ends here:
int SumProduct ( int [ ] numbers ) {
  int sum_value = 0 ;
  int prod_value = 1 ;
  for ( int n : numbers ) {
    sum_value += n ;
    prod_value *= n ;
  }
  return new Integer ( sum_value ) . intValue ( ) ;
}

***Example ends here:
String [ ] allPrefixes ( String s ) {
  List < String > list = new ArrayList < String > ( ) ;
  for ( int i = 1 ;
  i <= s . length ( ) ;
  i ++ ) list . add ( s . substring ( 0 , i ) ) ;
  return list . toArray ( new String [ list . size ( ) ] ) ;
}

***Example ends here:
int [ ] parseMusic ( String musicString ) {
  String current = "" ;
  int [ ] result = new int [ musicString . length ( ) ] ;
  for ( int i = 0 ;
  i <= musicString . length ( ) ;
  i ++ ) {
    if ( i == musicString . length ( ) || musicString . charAt ( i ) == ' ' ) {
      if ( current . equals ( "o" ) ) result [ i ] = 4 ;
      if ( current . equals ( "o|" ) ) result [ i ] = 2 ;
      if ( current . equals ( ".|" ) ) result [ i ] = 1 ;
      current = "" ;
    }
    else {
      current += musicString . charAt ( i ) ;
    }
  }
  return result ;
}

***Example ends here:
int Strlen ( String s ) {
  return s . length ( ) ;
}

***Example ends here:
int [ ] Factorize ( int n ) {
  int [ ] factors = new int [ n ] ;
  for ( int i = 2 ;
  i <= n ;
  i ++ ) {
    if ( n % i == 0 ) {
      n /= i ;
      factors [ i ] = i ;
      i -- ;
    }
  }
  return factors ;
}

***Example ends here:
String Concatenate ( String [ ] strings ) {
  StringBuilder sb = new StringBuilder ( ) ;
  for ( String s : strings ) sb . append ( s ) ;
  return sb . toString ( ) ;
}

***Example ends here:
double [ ] getPositive ( double [ ] l ) {
  double [ ] result = new double [ l . length ] ;
  for ( int i = 0 ;
  i < l . length ;
  i ++ ) {
    if ( l [ i ] > 0 ) result [ i ] = l [ i ] ;
  }
  return result ;
}

***Example ends here:
double [ ] SortEven ( double [ ] l ) {
  double [ ] evens = new double [ l . length ] ;
  for ( int i = 0 ;
  i < l . length ;
  i += 2 ) evens [ i ] = l [ i ] ;
  Arrays . sort ( evens ) ;
  double [ ] result = new double [ l . length ] ;
  for ( int i = 0 ;
  i < l . length ;
  i ++ ) {
    if ( i % 2 == 0 ) result [ i / 2 ] = evens [ i / 2 ] ;
    if ( i % 2 == 1 ) result [ i ] = l [ i ] ;
  }
  return result ;
}

***Example ends here:
String DecodeCyclic ( String s ) {
  StringBuilder output = new StringBuilder ( ) ;
  int i = 0 ;
  while ( i <= s . length ( ) - 3 ) {
    String x = s . charAt ( i + 2 ) + s . substring ( i , i + 2 ) ;
    output . append ( x ) ;
    i += 3 ;
  }
  return output . append ( s . substring ( i ) ) ;
}

***Example ends here:
int CarRaceCollision ( int n ) {
  return Math . pow ( n , 2 ) ;
}

***Example ends here:
int [ ] IncrList ( int [ ] l ) {
  int [ ] result = new int [ l . length ] ;
  for ( int i = 0 ;
  i < l . length ;
  i ++ ) result [ i ] = i + 1 ;
  return result ;
}

***Example ends here:
boolean PairsSumToZero ( int [ ] l ) {
  for ( int i = 0 ;
  i < l . length ;
  i ++ ) {
    for ( int j = i + 1 ;
    j < l . length ;
    j ++ ) {
      if ( l [ i ] + l [ j ] == 0 ) {
        return true ;
      }
    }
  }
  return false ;
}

***Example ends here:
String ChangeBase ( int x , int b ) {
  StringBuilder ret = new StringBuilder ( ) ;
  while ( x > 0 ) {
    ret . insert ( 0 , String . valueOf ( x % b ) ) ;
    x /= b ;
  }
  return ret . toString ( ) ;
}

***Example ends here:
double Median ( double [ ] l ) {
  Arrays . sort ( l ) ;
  if ( l . length % 2 == 1 ) return l [ l . length / 2 ] ;
  return ( l [ l . length / 2 ] + l [ l . length / 2 - 1 ] ) / 2 ;
}

***Example ends here:
String DecodeShift ( String s ) {
  StringBuilder sb = new StringBuilder ( ) ;
  for ( char ch : s . toCharArray ( ) ) {
    char w = ( ch + 21 - 'a' ) % 26 + 'a' ;
    sb . append ( w ) ;
  }
  return sb . toString ( ) ;
}

***Example ends here:
boolean BelowThreshold ( int [ ] l , int t ) {
  for ( int n : l ) {
    if ( n >= t ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
boolean correctBracketing ( String brackets ) {
  int depth = 0 ;
  for ( char b : brackets . toCharArray ( ) ) {
    if ( b == '<' ) depth += 1 ;
    if ( b == '>' ) depth -= 1 ;
    if ( depth < 0 ) return false ;
  }
  return depth == 0 ;
}

***Example ends here:
boolean Monotonic ( double [ ] l ) {
  int incr = 0 ;
  int decr = 0 ;
  for ( int i = 1 ;
  i < l . length ;
  i ++ ) {
    if ( l [ i ] > l [ i - 1 ] ) incr = 1 ;
    if ( l [ i ] < l [ i - 1 ] ) decr = 1 ;
  }
  return incr + decr != 2 ;
}

***Example ends here:
double Derivative ( double [ ] xs ) {
  double [ ] result = new double [ xs . length ] ;
  for ( int i = 1 ;
  i < xs . length ;
  i ++ ) result [ i ] = i * xs [ i ] ;
  return result [ 0 ] ;
}

***Example ends here:
int VowelsCount ( String s ) {
  String vowels = "aeiouAEIOU" ;
  int count = 0 ;
  for ( char ch : s . toCharArray ( ) ) {
    if ( vowels . indexOf ( ch ) != - 1 ) count += 1 ;
  }
  if ( s . charAt ( s . length ( ) - 1 ) == 'y' || s . charAt ( s . length ( ) - 1 ) == 'Y' ) count += 1 ;
  return count ;
}

***Example ends here:
int DigitSum ( String s ) {
  int sum = 0 ;
  for ( char c : s . toCharArray ( ) ) {
    if ( Character . isUpperCase ( c ) ) sum += c ;
  }
  return sum ;
}

***Example ends here:
int FruitDistribution ( String s , int n ) {
  String num1 = "" ;
  String num2 = "" ;
  boolean flag = false ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( Character . isDigit ( s . charAt ( i ) ) ) {
      if ( ! flag ) num1 += s . charAt ( i ) ;
      if ( flag ) num2 += s . charAt ( i ) ;
    }
    else if ( ! flag && num1 . length ( ) > 0 ) flag = true ;
  }
  return n - Integer . parseInt ( num1 ) - Integer . parseInt ( num2 ) ;
}

***Example ends here:
int [ ] Pluck ( int [ ] arr ) {
  int [ ] result = null ;
  for ( int i = 0 ;
  i < arr . length ;
  i ++ ) {
    if ( arr [ i ] % 2 == 0 ) {
      if ( result == null ) {
        result = new int [ 2 ] ;
        result [ 0 ] = arr [ i ] ;
        result [ 1 ] = i ;
      }
      else if ( arr [ i ] < result [ 0 ] ) {
        result [ 0 ] = arr [ i ] ;
        result [ 1 ] = i ;
      }
    }
  }
  return result ;
}

***Example ends here:
int [ ] StrangeSortList ( int [ ] lst ) {
  int [ ] res = new int [ lst . length ] ;
  Arrays . sort ( lst ) ;
  int l = 0 ;
  int r = lst . length - 1 ;
  while ( l < r ) {
    res [ l ] = lst [ l ] ;
    l += 1 ;
    res [ r ] = lst [ r ] ;
    r -= 1 ;
  }
  if ( l == r ) res [ l ] = lst [ l ] ;
  return res ;
}

***Example ends here:
double TriangleArea ( double a , double b , double c ) {
  if ( a + b <= c || a + c <= b || b + c <= a ) {
    return - 1 ;
  }
  double s = ( a + b + c ) / 2 ;
  return Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ;
}

***Example ends here:
boolean willItFly ( int [ ] q , int w ) {
  int sum = 0 ;
  for ( int i = 0 ;
  i < q . length ;
  i ++ ) {
    if ( q [ i ] != q [ q . length - i - 1 ] ) {
      return false ;
    }
    sum += q [ i ] ;
  }
  return sum <= w ;
}

***Example ends here:
boolean isCube ( int a ) {
  a = Math . abs ( a ) ;
  int i = Math . round ( Math . pow ( a , 1.0 / 3 ) ) ;
  return Math . pow ( i , 3 ) == a ;
}

***Example ends here:
int HexKey ( String num ) {
  String key = "2357BD" ;
  int total = 0 ;
  for ( char c : num . toCharArray ( ) ) {
    if ( key . indexOf ( c ) != - 1 ) total += 1 ;
  }
  return total ;
}

***Example ends here:
String DecimalToBinary ( int dec ) {
  StringBuilder ans = new StringBuilder ( ) ;
  if ( dec != 0 ) {
    while ( dec > 0 ) {
      ans . insert ( 0 , String . valueOf ( dec % 2 ) ) ;
      dec /= 2 ;
    }
  }
  else {
    ans . append ( "0" ) ;
  }
  return "db" + ans + "db" ;
}

***Example ends here:
boolean primeLength ( String s ) {
  int l = s . length ( ) ;
  if ( l < 2 ) {
    return false ;
  }
  for ( int i = 2 ;
  i < l ;
  i ++ ) {
    if ( l % i == 0 ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int StartsOneEnds ( int n ) {
  if ( n < 1 ) {
    return 0 ;
  }
  if ( n == 1 ) {
    return 1 ;
  }
  return 18 * Math . pow ( 10 , n - 2 ) ;
}

***Example ends here:
int Add ( int [ ] lst ) {
  int sum = 0 ;
  for ( int i = 1 ;
  i < lst . length ;
  i += 2 ) {
    if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ;
  }
  return sum ;
}

***Example ends here:
int [ ] getRow ( int [ ] lst , int x ) {
  int [ ] coords = new int [ lst . length ] ;
  for ( int i = 0 ;
  i < lst . length ;
  i ++ ) {
    for ( int j = lst [ i ] - 1 ;
    j >= 0 ;
    j -- ) {
      if ( lst [ i ] [ j ] == x ) coords [ i ] = new int ( i , j ) ;
    }
  }
  return coords ;
}

***Example ends here:
int NextSmallest ( int [ ] lst ) {
  Arrays . sort ( lst ) ;
  for ( int i = 1 ;
  i < lst . length ;
  i ++ ) {
    if ( lst [ i ] != lst [ i - 1 ] ) {
      return lst [ i ] ;
    }
  }
  return - 1 ;
}

***Example ends here:
boolean anyInt ( double a , double b , double c ) {
  if ( Math . round ( a ) != a || Math . round ( b ) != b || Math . round ( c ) != c ) {
    return false ;
  }
  return a + b == c || a + c == b || b + c == a ;
}

***Example ends here:
int countUpTo ( int n ) {
  List < Integer > primes = new ArrayList < > ( ) ;
  for ( int i = 2 ;
  i < n ;
  i ++ ) {
    boolean isPrime = true ;
    for ( int j = 2 ;
    j < i ;
    j ++ ) {
      if ( i % j == 0 ) {
        isPrime = false ;
        break ;
      }
    }
    if ( isPrime ) primes . add ( i ) ;
  }
  return primes . size ( ) ;
}

***Example ends here:
int ClosestInteger ( String value ) {
  double w = Double . parseDouble ( value ) ;
  return Math . round ( w ) ;
}

***Example ends here:
int [ ] makeAPile ( int n ) {
  int [ ] result = new int [ n ] ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) result [ i ] = n + 2 * i ;
  return result ;
}

***Example ends here:
List < String > WordsString ( String s ) {
  StringBuilder current = new StringBuilder ( ) ;
  List < String > words = new ArrayList < String > ( ) ;
  for ( int i = 0 ;
  i <= s . length ( ) ;
  i ++ ) {
    if ( i == s . length ( ) || s . charAt ( i ) == ' ' || s . charAt ( i ) == ',' ) {
      if ( current . length ( ) > 0 ) {
        words . add ( current . toString ( ) ) ;
        current = new StringBuilder ( ) ;
      }
    }
    else {
      current . append ( s . charAt ( i ) ) ;
    }
  }
  return words ;
}

***Example ends here:
String RoundedAvg ( int n , int m ) {
  if ( n > m ) {
    return "-1" ;
  }
  int num = ( m + n ) / 2 ;
  StringBuilder ret = new StringBuilder ( ) ;
  while ( num > 0 ) {
    ret . insert ( 0 , String . valueOf ( num % 2 ) ) ;
    num /= 2 ;
  }
  return ret . toString ( ) ;
}

***Example ends here:
int [ ] UniqueDigits ( int [ ] x ) {
  List < Integer > digits = new ArrayList < > ( ) ;
  for ( int n : x ) {
    boolean isUnique = true ;
    for ( char c : String . valueOf ( n ) . toCharArray ( ) ) {
      if ( c % 2 == 0 ) {
        isUnique = false ;
        break ;
      }
    }
    if ( isUnique ) digits . add ( n ) ;
  }
  Collections . shuffle ( digits ) ;
  return digits . toArray ( new Integer [ digits . size ( ) ] ) ;
}

***Example ends here:
int CountNums ( int [ ] arr ) {
  int num = 0 ;
  for ( int n : arr ) {
    int neg = n < 0 ? - 1 : 1 ;
    n = Math . abs ( n ) ;
    int [ ] digits = new int [ n ] ;
    for ( char c : String . valueOf ( n ) . toCharArray ( ) ) digits [ n ] = c - '0' ;
    digits [ 0 ] *= neg ;
    int sum = 0 ;
    for ( int d : digits ) sum += d ;
    if ( sum > 0 ) num += 1 ;
  }
  return num ;
}

***Example ends here:
boolean moveOneBall ( int [ ] arr ) {
  if ( arr == null ) {
    return true ;
  }
  int num = 0 ;
  for ( int i = 1 ;
  i < arr . length ;
  i ++ ) {
    if ( arr [ i ] < arr [ i - 1 ] ) num += 1 ;
  }
  if ( arr [ arr . length - 1 ] > arr [ 0 ] ) num += 1 ;
  if ( num < 2 ) {
    return true ;
  }
  return false ;
}

***Example ends here:
String Exchange ( int [ ] lst1 , int [ ] lst2 ) {
  int odd = 0 ;
  int even = 0 ;
  for ( int n : lst1 ) {
    if ( n % 2 == 1 ) odd += 1 ;
  }
  for ( int n : lst2 ) {
    if ( n % 2 == 0 ) even += 1 ;
  }
  if ( even >= odd ) return "YES" ;
  return "NO" ;
}

***Example ends here:
List < String > OddCount ( List < String > lst ) {
  List < String > results = new ArrayList < String > ( ) ;
  String originalStr = "the number of odd elements in the string i of the input." ;
  for ( String s : lst ) {
    int sum = 0 ;
    for ( char d : s . toCharArray ( ) ) {
      if ( Character . isDigit ( d ) && d % 2 == 1 ) sum += 1 ;
    }
    StringBuilder sb = new StringBuilder ( ) ;
    for ( char c : originalStr . toCharArray ( ) ) {
      if ( c == 'i' ) sb . append ( String . valueOf ( sum ) ) ;
      else sb . append ( c ) ;
    }
    results . add ( sb . toString ( ) ) ;
  }
  return results ;
}

***Example ends here:
int MinSubArraySum ( int [ ] nums ) {
  int minSum = Integer . MAX_VALUE ;
  int sum = 0 ;
  for ( int num : nums ) {
    sum += num ;
    if ( minSum > sum ) minSum = sum ;
    if ( sum > 0 ) sum = 0 ;
  }
  return minSum ;
}

***Example ends here:
int MaxFill ( int [ ] grid , int capacity ) {
  int res = 0 ;
  for ( int [ ] well : grid ) {
    int sum = 0 ;
    for ( int n : well ) sum += n ;
    if ( sum > 0 ) res += ( sum - 1 ) / capacity + 1 ;
  }
  return res ;
}

***Example ends here:
String [ ] SelectWords ( String s , int n ) {
  String vowels = "aeiouAEIOU" ;
  String current = "" ;
  List < String > result = new ArrayList < String > ( ) ;
  int consonantNum = 0 ;
  for ( int i = 0 ;
  i <= s . length ( ) ;
  i ++ ) {
    if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) {
      if ( consonantNum == n ) result . add ( current ) ;
      current = "" ;
      consonantNum = 0 ;
    }
    else {
      current += s . charAt ( i ) ;
      if ( vowels . indexOf ( s . charAt ( i ) ) == - 1 ) consonantNum += 1 ;
    }
  }
  return result . toArray ( new String [ result . size ( ) ] ) ;
}

***Example ends here:
int Solution ( int [ ] lst ) {
  int sum = 0 ;
  for ( int i = 0 ;
  i < lst . length ;
  i += 2 ) {
    if ( lst [ i ] % 2 == 1 ) sum += lst [ i ] ;
  }
  return sum ;
}

***Example ends here:
int AddElements ( int [ ] arr , int k ) {
  int sum = 0 ;
  for ( int i = 0 ;
  i < k ;
  i ++ ) {
    if ( arr [ i ] >= - 99 && arr [ i ] <= 99 ) sum += arr [ i ] ;
  }
  return sum ;
}

***Example ends here:
int [ ] getOddCollatz ( int n ) {
  List < Integer > oddCollatz = new ArrayList < > ( ) ;
  while ( n != 1 ) {
    if ( n % 2 == 1 ) {
      oddCollatz . add ( n ) ;
      n = n * 3 + 1 ;
    }
    else {
      n /= 2 ;
    }
  }
  oddCollatz . add ( 1 ) ;
  Collections . shuffle ( oddCollatz ) ;
  return oddCollatz . toArray ( new Integer [ oddCollatz . size ( ) ] ) ;
}

***Example ends here:
boolean isSorted ( int [ ] lst ) {
  for ( int i = 1 ;
  i < lst . length ;
  i ++ ) {
    if ( lst [ i ] < lst [ i - 1 ] ) {
      return false ;
    }
    if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
String Intersection ( int [ ] interval1 , int [ ] interval2 ) {
  int inter1 = Math . max ( interval1 [ 0 ] , interval2 [ 0 ] ) ;
  int inter2 = Math . min ( interval1 [ 1 ] , interval2 [ 1 ] ) ;
  int l = inter2 - inter1 ;
  if ( l < 2 ) {
    return "NO" ;
  }
  for ( int i = 2 ;
  i < l ;
  i ++ ) {
    if ( l % i == 0 ) {
      return "NO" ;
    }
  }
  return "YES" ;
}

***Example ends here:
int ProdSigns ( int [ ] arr ) {
  if ( arr == null ) {
    return - 32768 ;
  }
  int sum = 0 ;
  int prods = 1 ;
  for ( int i : arr ) {
    sum += Math . abs ( i ) ;
    if ( i == 0 ) {
      prods = 0 ;
    }
    if ( i < 0 ) {
      prods = - prods ;
    }
  }
  return sum * prods ;
}

***Example ends here:
int [ ] MinPath ( int [ ] [ ] grid , int k ) {
  int n = grid . length ;
  int minNum = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = 0 ;
    j < n ;
    j ++ ) {
      if ( grid [ i ] [ j ] == 1 ) {
        int [ ] tmp = new int [ n ] ;
        if ( i != 0 ) tmp [ i ] = grid [ i - 1 ] [ j ] ;
        if ( j != 0 ) tmp [ i ] = grid [ i ] [ j - 1 ] ;
        if ( i != n - 1 ) tmp [ i + 1 ] = grid [ i + 1 ] [ j ] ;
        if ( j != n - 1 ) tmp [ i ] = grid [ i ] [ j + 1 ] ;
        minNum = Arrays . binarySearch ( tmp ) ;
      }
    }
  }
  int [ ] ans = new int [ k ] ;
  for ( int i = 0 ;
  i < k ;
  i ++ ) {
    if ( i % 2 == 0 ) ans [ i ] = 1 ;
    else ans [ i ] = minNum ;
  }
  return ans ;
}

***Example ends here:
int Digits ( int n ) {
  int prod = 0 ;
  for ( char digit : String . valueOf ( n ) . toCharArray ( ) ) {
    if ( digit % 2 == 1 ) {
      if ( prod == 0 ) prod = 1 ;
      prod *= digit - '0' ;
    }
  }
  return prod ;
}

***Example ends here:
boolean isNested ( String s ) {
  int count = 0 ;
  int maxCount = 0 ;
  for ( char ch : s . toCharArray ( ) ) {
    if ( ch == '[' ) count += 1 ;
    if ( ch == ']' ) count -= 1 ;
    if ( count < 0 ) count = 0 ;
    if ( count > maxCount ) maxCount = count ;
    if ( count <= maxCount - 2 ) return true ;
  }
  return false ;
}

***Example ends here:
int SumSquares ( double [ ] lst ) {
  int sum = 0 ;
  for ( double i : lst ) sum += Math . ceil ( i ) * Math . ceil ( i ) ;
  return sum ;
}

***Example ends here:
int CanArrange ( int [ ] arr ) {
  int index = - 1 ;
  for ( int i = 0 ;
  i < arr . length ;
  i ++ ) {
    if ( arr [ i ] <= i ) index = i ;
  }
  return index ;
}

***Example ends here:
int [ ] LargestSmallestIntegers ( int [ ] lst ) {
  int maxNeg = 0 , minPos = 0 ;
  for ( int n : lst ) {
    if ( n < 0 && ( maxNeg == 0 || n > maxNeg ) ) maxNeg = n ;
    if ( n > 0 && ( minPos == 0 || n < minPos ) ) minPos = n ;
  }
  return new int [ ] {
    maxNeg , minPos }
    ;
  }
  
***Example ends here:
String FixSpaces ( String text ) {
  StringBuilder res = new StringBuilder ( ) ;
  int spaceLen = 0 ;
  for ( int i = 0 ;
  i <= text . length ( ) ;
  i ++ ) {
    if ( i == text . length ( ) || text . charAt ( i ) != ' ' ) {
      if ( spaceLen == 1 ) res . append ( '_' ) ;
      if ( spaceLen == 2 ) res . append ( "__" ) ;
      if ( spaceLen > 2 ) res . append ( '-' ) ;
      spaceLen = 0 ;
      if ( i != text . length ( ) ) res . append ( text . charAt ( i ) ) ;
    }
    else spaceLen += 1 ;
  }
  return res . toString ( ) ;
}

***Example ends here:
String FileNameCheck ( String fileName ) {
  int digit_num = 0 , dot_num = 0 ;
  if ( fileName . length ( ) < 5 || ! Character . isLetter ( fileName . charAt ( 0 ) ) ) {
    return "No" ;
  }
  String suffix = fileName . substring ( fileName . length ( ) - 4 ) ;
  if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) {
    return "No" ;
  }
  for ( char c : fileName . toCharArray ( ) ) {
    if ( Character . isDigit ( c ) ) digit_num += 1 ;
    if ( c == '.' ) dot_num += 1 ;
  }
  if ( digit_num > 3 || dot_num != 1 ) {
    return "No" ;
  }
  return "Yes" ;
}

***Example ends here:
int SumSquares ( int [ ] lst ) {
  int sum = 0 ;
  for ( int i = 0 ;
  i < lst . length ;
  i ++ ) {
    if ( i % 3 == 0 ) sum += lst [ i ] * lst [ i ] ;
    else if ( i % 4 == 0 ) sum += lst [ i ] * lst [ i ] * lst [ i ] ;
    else sum += lst [ i ] ;
  }
  return sum ;
}

***Example ends here:
String WordsInSentence ( String sentence ) {
  StringBuilder sb = new StringBuilder ( ) ;
  StringBuilder current = new StringBuilder ( ) ;
  for ( int i = 0 ;
  i <= sentence . length ( ) ;
  i ++ ) {
    if ( i == sentence . length ( ) || sentence . charAt ( i ) == ' ' ) {
      boolean isPrime = true ;
      int l = current . length ( ) ;
      if ( l < 2 ) isPrime = false ;
      for ( int j = 2 ;
      j < l ;
      j ++ ) {
        if ( l % j == 0 ) {
          isPrime = false ;
          break ;
        }
      }
      if ( isPrime ) sb . append ( current ) . append ( ' ' ) ;
      current = new StringBuilder ( ) ;
    }
    else {
      current . append ( sentence . charAt ( i ) ) ;
    }
  }
  if ( sb . length ( ) > 0 ) sb . deleteCharAt ( sb . length ( ) - 1 ) ;
  return sb . toString ( ) ;
}

***Example ends here:
boolean Simplify ( String x , String n ) {
  int a = 0 , b = 0 , c = 0 , d = 0 ;
  for ( int i = 0 ;
  i < x . length ( ) ;
  i ++ ) {
    if ( x . charAt ( i ) == '/' ) {
      a = Integer . parseInt ( x . substring ( 0 , i ) ) ;
      b = Integer . parseInt ( x . substring ( i + 1 ) ) ;
    }
  }
  for ( int i = 0 ;
  i < n . length ( ) ;
  i ++ ) {
    if ( n . charAt ( i ) == '/' ) {
      c = Integer . parseInt ( n . substring ( 0 , i ) ) ;
      d = Integer . parseInt ( n . substring ( i + 1 ) ) ;
    }
  }
  return ( a * c ) % ( b * d ) == 0 ;
}

***Example ends here:
int SpecialFilter ( int [ ] nums ) {
  int count = 0 ;
  for ( int num : nums ) {
    if ( num > 10 ) {
      String w = String . valueOf ( num ) ;
      if ( w . charAt ( 0 ) % 2 == 1 && w . charAt ( w . length ( ) - 1 ) % 2 == 1 ) count += 1 ;
    }
  }
  return count ;
}

***Example ends here:
int GetMatrixTriples ( int n ) {
  int [ ] arr = new int [ n ] ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) arr [ i ] = i * i - i + 1 ;
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = i + 1 ;
    j < n ;
    j ++ ) {
      for ( int k = j + 1 ;
      k < n ;
      k ++ ) {
        if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) count += 1 ;
      }
    }
  }
  return count ;
}

***Example ends here:
int DoubleTheDifference ( double [ ] lst ) {
  int sum = 0 ;
  for ( double d : lst ) {
    int num = Math . round ( d ) ;
    if ( d == num ) {
      if ( num > 0 && num % 2 == 1 ) sum += num * num ;
    }
  }
  return sum ;
}

***Example ends here:
int Compare ( int [ ] game , int [ ] guess ) {
  int [ ] result = new int [ game . length ] ;
  for ( int i = 0 ;
  i < game . length ;
  i ++ ) result [ i ] = Math . abs ( game [ i ] - guess [ i ] ) ;
  return result . length ;
}

***Example ends here:
String StrongestExtension ( String className , String [ ] extensions ) {
  String strongest = null ;
  int max = Integer . MIN_VALUE ;
  for ( String extension : extensions ) {
    int strength = 0 ;
    for ( char chr : extension . toCharArray ( ) ) {
      if ( Character . isUpperCase ( chr ) ) strength += 1 ;
      if ( Character . isLowerCase ( chr ) ) strength -= 1 ;
    }
    if ( strength > max ) {
      max = strength ;
      strongest = extension ;
    }
  }
  return className + '.' + strongest ;
}

***Example ends here:
String IntToMiniRoman ( int number ) {
  int [ ] num = {
    1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 }
    ;
    String [ ] sym = {
      "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" }
      ;
      int pos = 0 ;
      String res = "" ;
      while ( number > 0 ) {
        while ( number >= num [ pos ] ) {
          res += sym [ pos ] ;
          number -= num [ pos ] ;
        }
        if ( number > 0 ) pos += 1 ;
      }
      return res ;
    }
    
***Example ends here:
int [ ] Eat ( int number , int need , int remaining ) {
  return need > remaining ? new int [ ] {
    number + remaining , 0 }
    : new int [ ] {
      number + need , remaining - need }
      ;
    }
    
***Example ends here:
int DoAlgebra ( List < String > ops , List < Integer > operands ) {
  List < Integer > nums = new ArrayList < Integer > ( operands ) ;
  List < String > currentOps = new ArrayList < String > ( ops ) ;
  int i = currentOps . size ( ) - 1 ;
  while ( i >= 0 ) {
    if ( currentOps . get ( i ) . equals ( "**" ) ) {
      nums . set ( i , Math . pow ( nums . get ( i ) , nums . get ( i + 1 ) ) ) ;
      nums . remove ( i + 1 ) ;
      currentOps . remove ( i ) ;
    }
    i -- ;
  }
  i = 0 ;
  while ( i < currentOps . size ( ) ) {
    if ( currentOps . get ( i ) . equals ( "*" ) ) {
      nums . set ( i , nums . get ( i + 1 ) ) ;
      nums . remove ( i + 1 ) ;
      currentOps . remove ( i ) ;
    }
    else if ( currentOps . get ( i ) . equals ( "//" ) ) {
      nums . set ( i , nums . get ( i + 1 ) ) ;
      nums . remove ( i + 1 ) ;
      currentOps . remove ( i ) ;
    }
    else {
      i ++ ;
    }
  }
  i = 0 ;
  while ( i < currentOps . size ( ) ) {
    if ( currentOps . get ( i ) . equals ( "+" ) ) {
      nums . set ( i , nums . get ( i + 1 ) ) ;
      nums . remove ( i + 1 ) ;
      currentOps . remove ( i ) ;
    }
    else if ( currentOps . get ( i ) . equals ( "-" ) ) {
      nums . set ( i , nums . get ( i + 1 ) ) ;
      nums . remove ( i + 1 ) ;
      currentOps . remove ( i ) ;
    }
    else {
      i ++ ;
    }
  }
  return nums . get ( 0 ) ;
}

***Example ends here:
int [ ] generateIntegers ( int a , int b ) {
  int lower = Math . max ( 2 , Math . min ( a , b ) ) ;
  int upper = Math . min ( 8 , Math . max ( a , b ) ) ;
  int [ ] result = new int [ upper ] ;
  for ( int i = lower ;
  i <= upper ;
  i += 2 ) result [ i ] = i ;
  return result ;
}

***Example ends here:
boolean isStepNum ( int n ) {
  int prevDigit = - 1 ;
  while ( n > 0 ) {
    int curDigit = n % 10 ;
    if ( prevDigit == - 1 ) {
      prevDigit = curDigit ;
    }
    else {
      if ( Math . abs ( prevDigit - curDigit ) != 1 ) {
        return false ;
      }
    }
    prevDigit = curDigit ;
    n /= 10 ;
  }
  return true ;
}

***Example ends here:
int NumOfWays ( int n , int k ) {
  int p = 1 ;
  if ( k % 2 ) p = - 1 ;
  return ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ;
}

***Example ends here:
int [ ] findDivisors ( int n ) {
  List < Integer > list = new ArrayList < > ( ) ;
  for ( int i = 1 ;
  i <= Math . sqrt ( n ) ;
  i ++ ) {
    if ( n % i == 0 ) {
      if ( n / i == i ) list . add ( i ) ;
      else list . add ( i ) ;
      list . add ( n / i ) ;
    }
  }
  return list . toArray ( new Integer [ list . size ( ) ] ) ;
}

***Example ends here:
int EggDrop ( int n , int k ) {
  if ( k == 1 || k == 0 ) {
    return k ;
  }
  if ( n == 1 ) {
    return k ;
  }
  int min = Integer . MAX_VALUE ;
  for ( int x = 1 ;
  x <= k ;
  x ++ ) {
    int res = Math . max ( EggDrop ( n - 1 , x - 1 ) , EggDrop ( n , k - x ) ) ;
    if ( res < min ) {
      min = res ;
    }
  }
  return min + 1 ;
}

***Example ends here:
boolean isPowerOfTwo ( int n ) {
  if ( n == 0 ) {
    return false ;
  }
  return Math . ceil ( Math . log2 ( n ) ) == Math . floor ( Math . log2 ( n ) ) ;
}

***Example ends here:
String ShortestPalindrome ( String s ) {
  int n = s . length ( ) ;
  List < String > list = new ArrayList < String > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    int l = i ;
    int r = i ;
    String ans1 = "" ;
    String ans2 = "" ;
    while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) {
      ans1 += s . charAt ( l ) ;
      l -- ;
      r ++ ;
    }
    l = i - 1 ;
    r = i ;
    while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) {
      ans2 += s . charAt ( l ) ;
      l -- ;
      r ++ ;
    }
    list . add ( ans1 ) ;
    list . add ( ans2 ) ;
  }
  String ans = list . get ( 0 ) ;
  for ( int i = 0 ;
  i < list . size ( ) ;
  i ++ ) {
    if ( list . get ( i ) != null ) ans = Math . min ( ans , list . get ( i ) ) ;
  }
  return ans ;
}

***Example ends here:
int minimumAdjacentDifference ( int [ ] a , int n , int k ) {
  int minDiff = Integer . MAX_VALUE ;
  for ( int i = 0 ;
  i <= k ;
  i ++ ) {
    int maxDiff = Integer . MIN_VALUE ;
    for ( int j = 0 ;
    j < n - k - 1 ;
    j ++ ) {
      for ( int p = i ;
      p <= i + j ;
      p ++ ) maxDiff = Math . max ( maxDiff , a [ p + 1 ] - a [ p ] ) ;
    }
    minDiff = Math . min ( minDiff , maxDiff ) ;
  }
  return minDiff ;
}

***Example ends here:
int Cal ( int [ ] a , int mid ) {
  int chocolate = 0 ;
  for ( int i : a ) {
    if ( i >= mid ) chocolate += i - mid ;
  }
  return chocolate ;
}

***Example ends here:
boolean Check ( int v , int [ ] a , int m ) {
  int tec = 0 , ans = 0 ;
  int [ ] b = new int [ a . length + 3 ] ;
  for ( int i = 0 ;
  i < a . length ;
  i ++ ) {
    tec -= b [ i ] ;
    if ( a [ i ] + tec < v ) {
      int mov = v - a [ i ] - tec ;
      ans = ans + mov ;
      tec += mov ;
      b [ i + 2 ] = mov ;
    }
  }
  return ans <= m ;
}

***Example ends here:
int LargestNum ( int [ ] arr ) {
  int res = 0 ;
  Arrays . sort ( arr ) ;
  int l = 0 , r = arr . length - 1 ;
  while ( l < r ) {
    int sum = arr [ l ] + arr [ r ] ;
    if ( sum == 0 ) {
      res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ;
      return res ;
    }
    else if ( sum < 0 ) {
      l ++ ;
    }
    else {
      r -- ;
    }
  }
  return res ;
}

***Example ends here:
int BinarySearch ( int [ ] p , int n ) {
  int i = 0 ;
  int j = p . length - 1 ;
  int index = - 1 ;
  while ( i <= j ) {
    int mid = i + ( j - i ) / 2 ;
    if ( p [ mid ] >= n ) {
      index = mid ;
      j = mid - 1 ;
    }
    else {
      i = mid + 1 ;
    }
  }
  return index ;
}

***Example ends here:
int FindMinLength ( int [ ] arr ) {
  int index = arr . length - 1 ;
  while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) index -- ;
  return index ;
}

***Example ends here:
int MinDigits ( int n , int k ) {
  int digits_num = Math . floor ( Math . log10 ( n ) + 1 ) ;
  int temp_sum = 0 ;
  int temp = digits_num ;
  int result = 0 ;
  int x , v ;
  int sum = 0 ;
  int num2 = n ;
  while ( num2 != 0 ) {
    sum += num2 % 10 ;
    num2 /= 10 ;
  }
  if ( sum <= k ) {
    x = 0 ;
  }
  else {
    while ( temp > 0 ) {
      v = n / Math . pow ( 10 , temp - 1 ) ;
      temp_sum += v % 10 ;
      if ( temp_sum >= k ) {
        v /= 10 ;
        v ++ ;
        result = v * Math . pow ( 10 , temp ) ;
        break ;
      }
      temp -- ;
    }
    x = result - n ;
    return x ;
  }
  return - 1 ;
}

***Example ends here:
int CheckForPerfectSquare ( int [ ] arr , int i , int j ) {
  int mid , sum = 0 ;
  for ( int m = i ;
  m <= j ;
  m ++ ) sum += arr [ m ] ;
  int low = 0 , high = sum / 2 ;
  while ( low <= high ) {
    mid = low + ( high - low ) / 2 ;
    if ( mid * mid == sum ) return mid ;
    else if ( mid * mid > sum ) high = mid - 1 ;
    else low = mid + 1 ;
  }
  return - 1 ;
}

***Example ends here:
int MinFlips ( int [ ] [ ] mat , String s ) {
  int n = mat . length ;
  int m = mat [ 0 ] . length ;
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = 0 ;
    j < m ;
    j ++ ) {
      if ( mat [ i ] [ j ] != s . charAt ( i + j ) - '0' ) count ++ ;
    }
  }
  return count ;
}

***Example ends here:
List < List < Integer >> ConstructTree ( int n , List < List < Integer >> edges ) {
  List < List < Integer >> adjl = new ArrayList < List < Integer >> ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) adjl . add ( new ArrayList < Integer > ( ) ) ;
  for ( List < Integer > e : edges ) {
    int u = e . get ( 0 ) ;
    int v = e . get ( 1 ) ;
    adjl . get ( u ) . add ( v ) ;
    adjl . get ( v ) . add ( u ) ;
  }
  return adjl ;
}

***Example ends here:
int FindSumOfValues ( int v , int [ ] parent , int [ ] valuesChildren ) {
  int curNode = v ;
  int sum = 0 ;
  while ( curNode != - 1 ) {
    sum += valuesChildren [ curNode ] ;
    curNode = parent [ curNode ] ;
  }
  return sum ;
}

***Example ends here:
int getDistinct ( int d , int count ) {
  int num = 0 ;
  count = Math . pow ( 10 , count - 1 ) ;
  while ( count > 0 ) {
    num += count * d ;
    count /= 10 ;
  }
  return num ;
}

***Example ends here:
boolean isIncreasing ( int [ ] arr ) {
  for ( int i = 0 ;
  i < arr . length - 1 ;
  i ++ ) {
    if ( arr [ i ] > arr [ i + 1 ] ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int MinAdjSwaps ( int [ ] [ ] mat ) {
  int n = mat . length ;
  int [ ] cnt_zero = new int [ n ] ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = n - 1 ;
    j >= 0 && mat [ i ] [ j ] == 0 ;
    j -- ) cnt_zero [ i ] ++ ;
  }
  int cnt_swaps = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( cnt_zero [ i ] < ( n - i - 1 ) ) {
      int first = i ;
      while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) first ++ ;
      if ( first == n ) return - 1 ;
      while ( first > i ) {
        swap ( cnt_zero [ first ] , cnt_zero [ first - 1 ] ) ;
        first -- ;
        cnt_swaps ++ ;
      }
    }
  }
  return cnt_swaps ;
}

***Example ends here:
int Solve ( int [ ] values , int [ ] salary , int mod ) {
  int ret = 1 ;
  int amt = 0 ;
  Arrays . sort ( values ) ;
  Arrays . sort ( salary ) ;
  while ( salary . length > 0 ) {
    while ( values . length > 0 && values [ values . length - 1 ] >= salary [ salary . length - 1 ] ) {
      amt ++ ;
      values = values . pop ( ) ;
    }
    if ( amt == 0 ) {
      return 0 ;
    }
    ret *= amt -- ;
    ret %= mod ;
    salary = salary . pop ( ) ;
  }
  return ret ;
}

***Example ends here:
int [ ] OrganizeInOrder ( int [ ] array , char [ ] op , int n ) {
  int [ ] result = new int [ n ] ;
  Arrays . sort ( array ) ;
  int i = 0 , j = n - 1 , k = 0 ;
  while ( i <= j && k <= n - 2 ) {
    if ( op [ k ] == '<' ) result [ k ] = array [ i ++ ] ;
    else result [ k ] = array [ j -- ] ;
    k ++ ;
  }
  result [ n - 1 ] = array [ i ] ;
  return result ;
}

***Example ends here:
int CountPoints ( int n , int m , int [ ] a , int [ ] b , int x , int y ) {
  Arrays . sort ( a ) ;
  Arrays . sort ( b ) ;
  int j = 0 ;
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    while ( j < m ) {
      if ( a [ i ] + y < b [ j ] ) {
        break ;
      }
      if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) {
        count ++ ;
        j ++ ;
        break ;
      }
      else {
        j ++ ;
      }
    }
  }
  return count ;
}

***Example ends here:
boolean areSame ( int [ ] a , int [ ] b ) {
  Arrays . sort ( a ) ;
  Arrays . sort ( b ) ;
  return a . equals ( b ) ;
}

***Example ends here:
int countNumberOfStrings ( String s ) {
  int n = s . length ( ) - 1 ;
  int count = Math . pow ( 2 , n ) ;
  return count ;
}

***Example ends here:
int [ ] getPrimePower ( int x ) {
  int [ ] prime_pow = new int [ x ] ;
  for ( int i = 2 ;
  i * i <= x ;
  i ++ ) {
    if ( x % i == 0 ) {
      int p = 1 ;
      while ( x % i == 0 ) {
        x /= i ;
        p *= i ;
      }
      prime_pow [ i ] = p ;
    }
  }
  if ( x > 1 ) prime_pow [ x ] = x ;
  return prime_pow ;
}

***Example ends here:
boolean isPerfect ( int n0 ) {
  double n = Math . sqrt ( n0 ) ;
  if ( Math . floor ( n ) != Math . ceil ( n ) ) {
    return false ;
  }
  return true ;
}

***Example ends here:
int FindSum ( int l , int r ) {
  List < Integer > arr = new ArrayList < > ( ) ;
  int i = 0 ;
  int x = 2 ;
  while ( i <= r ) {
    arr . add ( i + x ) ;
    if ( i + 1 <= r ) arr . add ( i + 1 + x ) ;
    x *= - 1 ;
    i += 2 ;
  }
  int sum = 0 ;
  for ( i = l ;
  i <= r ;
  ++ i ) sum += arr . get ( i ) ;
  return sum ;
}

***Example ends here:
int Results ( int n , int k ) {
  return Math . round ( Math . pow ( n , 1.0 / Math . pow ( 2 , k ) ) ) ;
}

***Example ends here:
int [ ] getFactors ( int n ) {
  List < Integer > list = new ArrayList < > ( ) ;
  list . add ( 1 ) ;
  for ( int i = 2 ;
  i <= Math . sqrt ( n ) ;
  i ++ ) {
    if ( n % i == 0 ) {
      list . add ( i ) ;
      if ( n / i != i ) list . add ( n / i ) ;
    }
  }
  return list . toArray ( new Integer [ list . size ( ) ] ) ;
}

***Example ends here:
int SmallestNum ( int n ) {
  double x = Math . pow ( 10.0 , ( n - 1 ) / 2.0 ) ;
  return Math . ceil ( x ) ;
}

***Example ends here:
int Smallest ( String s ) {
  int [ ] a = new int [ s . length ( ) ] ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) a [ i ] = s . charAt ( i ) - '0' ;
  int [ ] b = new int [ a . length ] ;
  for ( int i = 0 ;
  i < a . length ;
  i ++ ) {
    if ( ( a [ i ] ) % 2 != 0 ) b [ i ] = a [ i ] ;
  }
  Arrays . sort ( b ) ;
  if ( b . length > 1 ) return b [ 0 ] * 10 + b [ 1 ] ;
  return - 1 ;
}

***Example ends here:
double [ ] Diagonals ( double a , double b , double c , double d ) {
  double [ ] ans = new double [ 2 ] ;
  ans [ 0 ] = Math . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ;
  ans [ 1 ] = Math . sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ;
  return ans ;
}

***Example ends here:
int FindNumberOfDigits ( int n , int bas ) {
  int dig = Math . floor ( Math . log ( n ) / Math . log ( bas ) ) + 1 ;
  return dig ;
}

***Example ends here:
double NGon ( int n ) {
  double pro_angle_var ;
  if ( n % 4 == 0 ) pro_angle_var = numbers . pi * ( 180.0 / n ) / 180 ;
  else pro_angle_var = numbers . pi * ( 180.0 / ( 2 * n ) ) / 180 ;
  double neg_x = 1.0e+99 , pos_x = - 1.0e+99 , neg_y = 1.0e+99 , pos_y = - 1.0e+99 ;
  for ( int j = 0 ;
  j < n ;
  ++ j ) {
    double px = Math . cos ( 2 * numbers . pi * j / n + pro_angle_var ) ;
    double py = Math . sin ( 2 * numbers . pi * j / n + pro_angle_var ) ;
    neg_x = Math . min ( neg_x , px ) ;
    pos_x = Math . max ( pos_x , px ) ;
    neg_y = Math . min ( neg_y , py ) ;
    pos_y = Math . max ( pos_y , py ) ;
  }
  double opt2 = Math . max ( pos_x - neg_x , pos_y - neg_y ) ;
  return opt2 / Math . sin ( numbers . pi / n ) / 2 ;
}

***Example ends here:
int FindMaxK ( int n ) {
  int p = Math . log2 ( n ) ;
  return Math . pow ( 2 , p ) ;
}

***Example ends here:
int NthFibo ( int n ) {
  double a = ( Math . pow ( 5 , 0.5 ) + 1 ) / 2 ;
  double b = ( - 1 * Math . pow ( 5 , 0.5 ) + 1 ) / 2 ;
  double r = Math . pow ( 5 , 0.5 ) ;
  double ans = ( Math . pow ( a , n ) - Math . pow ( b , n ) ) / r ;
  return ans ;
}

***Example ends here:
double FindProb ( int l , int r ) {
  double count_of_ps = Math . floor ( Math . sqrt ( r ) ) - Math . ceil ( Math . sqrt ( l ) ) + 1 ;
  double total = r - l + 1 ;
  double prob = count_of_ps / total ;
  return prob ;
}

***Example ends here:
int PreviousFibonacci ( int n ) {
  double a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ;
  return Math . round ( a ) ;
}

***Example ends here:
int DistPrime ( int [ ] arr , int [ ] allPrimes ) {
  List < Integer > list1 = new ArrayList < > ( ) ;
  for ( int i : allPrimes ) {
    for ( int j : arr ) {
      if ( j % i == 0 ) {
        list1 . add ( i ) ;
        break ;
      }
    }
  }
  return list1 . size ( ) ;
}

***Example ends here:
int [ ] getArray ( int n ) {
  int [ ] ans = new int [ n ] ;
  int p2 = 1 ;
  while ( n > 0 ) {
    if ( n % 2 == 1 ) ans [ p2 ] = p2 ;
    n >>= 1 ;
    p2 *= 2 ;
  }
  return ans ;
}

***Example ends here:
int MaximumLength ( int [ ] a ) {
  int [ ] counts = new int [ 11 ] ;
  int ans = 0 ;
  for ( int index = 0 ;
  index < a . length ;
  index ++ ) {
    counts [ a [ index ] ] += 1 ;
    int [ ] k = new int [ counts . length ] ;
    for ( int i : counts ) {
      if ( i != 0 ) k [ i ] = i ;
    }
    Arrays . sort ( k ) ;
    if ( k . length == 1 || ( k [ 0 ] == k [ k . length - 2 ] && k [ k . length - 1 ] - k [ k . length - 2 ] == 1 ) || ( k [ 0 ] == 1 && k [ 1 ] == k [ k . length - 1 ] ) ) ans = index ;
  }
  return ans + 1 ;
}

***Example ends here:
int MaxEdges ( int n ) {
  int edges = Math . floor ( n * n / 4 ) ;
  return edges ;
}

***Example ends here:
int FindK ( int n , int k ) {
  List < Integer > a = new ArrayList < > ( ) ;
  for ( int i = 1 ;
  i < n ;
  i ++ ) {
    if ( i % 2 == 1 ) a . add ( i ) ;
  }
  for ( int i = 1 ;
  i < n ;
  i ++ ) {
    if ( i % 2 == 0 ) a . add ( i ) ;
  }
  return a . get ( k - 1 ) ;
}

***Example ends here:
boolean isKeith ( int x , int temp ) {
  List < Integer > terms = new ArrayList < > ( ) ;
  int n = 0 ;
  while ( temp > 0 ) {
    terms . add ( temp % 10 ) ;
    temp = temp / 10 ;
    n ++ ;
  }
  Collections . reverse ( terms ) ;
  int nextTerm = 0 , i = n ;
  while ( nextTerm < x ) {
    nextTerm = 0 ;
    for ( int j = 1 ;
    j <= n ;
    j ++ ) nextTerm += terms . get ( i - j ) ;
    terms . add ( nextTerm ) ;
    i ++ ;
  }
  return nextTerm == x ;
}

***Example ends here:
boolean Factors ( int n , int k ) {
  List < Integer > list = new ArrayList < > ( ) ;
  while ( n % 2 == 0 ) {
    list . add ( 2 ) ;
    n /= 2 ;
  }
  if ( list . size ( ) >= k ) {
    return true ;
  }
  for ( int i = 3 ;
  i * i <= n ;
  i += 2 ) {
    while ( n % i == 0 ) {
      n = n / i ;
      list . add ( i ) ;
    }
    if ( list . size ( ) >= k ) {
      return true ;
    }
  }
  if ( n > 2 ) {
    list . add ( n ) ;
  }
  if ( list . size ( ) >= k ) {
    return true ;
  }
  return false ;
}

***Example ends here:
String [ ] SeparateParenGroups ( String parenString ) {
  List < String > allParens = new ArrayList < String > ( ) ;
  StringBuilder currentParen = new StringBuilder ( ) ;
  int currentDepth = 0 ;
  for ( char c : parenString . toCharArray ( ) ) {
    if ( c == '(' ) {
      currentDepth += 1 ;
      currentParen . append ( c ) ;
    }
    else if ( c == ')' ) {
      currentDepth -= 1 ;
      currentParen . append ( c ) ;
      if ( currentDepth == 0 ) {
        allParens . add ( currentParen . toString ( ) ) ;
        currentParen = new StringBuilder ( ) ;
      }
    }
  }
  return allParens . toArray ( new String [ allParens . size ( ) ] ) ;
}

***Example ends here:
int [ ] parseNestedParens ( String parenString ) {
  int [ ] allLevels = new int [ parenString . length ( ) ] ;
  int level = 0 ;
  int maxLevel = 0 ;
  for ( int i = 0 ;
  i < parenString . length ( ) ;
  i ++ ) {
    char chr = parenString . charAt ( i ) ;
    if ( chr == '(' ) {
      level += 1 ;
      if ( level > maxLevel ) maxLevel = level ;
    }
    if ( chr == ')' ) {
      level -= 1 ;
      if ( level == 0 ) {
        allLevels [ maxLevel ] = level ;
        maxLevel = 0 ;
      }
    }
  }
  return allLevels ;
}

***Example ends here:
String [ ] filterBySubstring ( String [ ] strings , String substring ) {
  List < String > result = new ArrayList < String > ( ) ;
  for ( String s : strings ) {
    if ( s . contains ( substring ) ) result . add ( s ) ;
  }
  return result . toArray ( new String [ result . size ( ) ] ) ;
}

***Example ends here:
int [ ] RollingMax ( int [ ] numbers ) {
  int runningMax = 0 ;
  int [ ] result = new int [ numbers . length ] ;
  for ( int n : numbers ) {
    if ( n > runningMax ) runningMax = n ;
    result [ n ] = runningMax ;
  }
  return result ;
}

***Example ends here:
String makePalindrome ( String s ) {
  if ( s == null ) {
    return "" ;
  }
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    String r_str = s . substring ( i ) ;
    if ( r_str . equals ( new String ( r_str . toCharArray ( ) ) ) ) {
      String n_str = s . substring ( 0 , i ) ;
      String n2_str = new String ( n_str . toCharArray ( ) ) ;
      return s + n2_str ;
    }
  }
  return s . substring ( 0 , s . length ( ) - 1 ) + new String ( s . toCharArray ( ) ) ;
}

***Example ends here:
String StringXor ( String a , String b ) {
  StringBuilder sb = new StringBuilder ( ) ;
  for ( int i = 0 ;
  i < a . length ( ) ;
  i ++ ) {
    if ( a . charAt ( i ) == b . charAt ( i ) ) sb . append ( '0' ) ;
    else sb . append ( '1' ) ;
  }
  return sb . toString ( ) ;
}

***Example ends here:
String Longest ( List < String > strings ) {
  if ( strings . isEmpty ( ) ) {
    return "" ;
  }
  int maxLen = Ranges . max ( Views . transform ( strings , new Function < String , String > ( ) {
    @ Override public String apply ( String s ) {
      return s . length ( ) ;
    }
  }
  ) ) ;
  for ( String s : strings ) {
    if ( s . length ( ) == maxLen ) {
      return s ;
    }
  }
  return "" ;
}

***Example ends here:
String StringSequence ( int n ) {
  StringBuilder sb = new StringBuilder ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    sb . append ( i ) ;
    sb . append ( " " ) ;
  }
  sb . append ( n ) ;
  return sb . toString ( ) ;
}

***Example ends here:
int countDistinctCharacter ( String s ) {
  HashSet < Character > distinct = new HashSet < > ( ) ;
  for ( char c : Views . transform ( s , java . lang . Character :: toLowerCase ) ) distinct . add ( c ) ;
  return distinct . size ( ) ;
}

***Example ends here:
int HowManyTimes ( String s , String sub ) {
  int times = 0 ;
  for ( int i = 0 ;
  i <= ( int ) ( s . length ( ) - sub . length ( ) ) ;
  i ++ ) {
    if ( s . substring ( i , i + sub . length ( ) ) . equals ( sub ) ) times += 1 ;
  }
  return times ;
}

***Example ends here:
String SortNumbers ( String numbers ) {
  HashMap < String , Integer > toNum = new HashMap < String , Integer > ( ) ;
  toNum . put ( "zero" , 0 ) ;
  toNum . put ( "one" , 1 ) ;
  toNum . put ( "two" , 2 ) ;
  toNum . put ( "three" , 3 ) ;
  toNum . put ( "four" , 4 ) ;
  toNum . put ( "five" , 5 ) ;
  toNum . put ( "six" , 6 ) ;
  toNum . put ( "seven" , 7 ) ;
  toNum . put ( "eight" , 8 ) ;
  toNum . put ( "nine" , 9 ) ;
  HashMap < Integer , String > fromNum = new HashMap < Integer , String > ( ) ;
  fromNum . put ( 0 , "zero" ) ;
  fromNum . put ( 1 , "one" ) ;
  fromNum . put ( 2 , "two" ) ;
  fromNum . put ( 3 , "three" ) ;
  fromNum . put ( 4 , "four" ) ;
  fromNum . put ( 5 , "five" ) ;
  fromNum . put ( 6 , "six" ) ;
  fromNum . put ( 7 , "seven" ) ;
  fromNum . put ( 8 , "eight" ) ;
  fromNum . put ( 9 , "nine" ) ;
  List < Integer > ints = new ArrayList < Integer > ( ) ;
  String current = "" ;
  for ( int i = 0 ;
  i <= numbers . length ( ) ;
  i ++ ) {
    if ( i == numbers . length ( ) || numbers . charAt ( i ) == ' ' ) {
      if ( toNum . containsKey ( current ) ) {
        ints . add ( toNum . get ( current ) ) ;
        current = "" ;
      }
    }
    else {
      current += numbers . charAt ( i ) ;
    }
  }
  Collections . shuffle ( ints ) ;
  StringBuilder sb = new StringBuilder ( ) ;
  for ( int i = 0 ;
  i < ints . size ( ) ;
  i ++ ) {
    sb . append ( fromNum . get ( ints . get ( i ) ) ) ;
    if ( i != ints . size ( ) - 1 ) sb . append ( " " ) ;
  }
  return sb . toString ( ) ;
}

***Example ends here:
double [ ] findClosestElements ( double [ ] numbers ) {
  double [ ] closestPair = new double [ ] {
    numbers [ 0 ] , numbers [ 1 ] }
    ;
    double distance = Math . abs ( closestPair [ 0 ] - closestPair [ 1 ] ) ;
    for ( int i = 0 ;
    i < numbers . length ;
    i ++ ) {
      for ( int j = i + 1 ;
      j < numbers . length ;
      j ++ ) {
        if ( Math . abs ( numbers [ i ] - numbers [ j ] ) < distance ) {
          closestPair [ 0 ] = numbers [ i ] ;
          closestPair [ 1 ] = numbers [ j ] ;
          distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ;
        }
      }
    }
    Arrays . sort ( closestPair ) ;
    return closestPair ;
  }
  
***Example ends here:
double RescaleToUnit ( double [ ] numbers ) {
  double minNum = Math . min ( numbers [ 0 ] , numbers [ 1 ] ) ;
  double maxNum = Math . max ( numbers [ 0 ] , numbers [ 1 ] ) ;
  double result [ ] = new double [ numbers . length ] ;
  for ( double n : numbers ) result [ n ] = ( n - minNum ) / ( maxNum - minNum ) ;
  return result [ numbers . length - 1 ] ;
}

***Example ends here:
int [ ] filterIntegers ( int [ ] values ) {
  int [ ] result = new int [ values . length ] ;
  for ( int i = 0 ;
  i < values . length ;
  i ++ ) {
    result [ i ] = Integer . valueOf ( values [ i ] ) . intValue ( ) ;
  }
  return result ;
}

***Example ends here:
int [ ] removeDuplicates ( int [ ] numbers ) {
  HashMap < Integer , Integer > counter = new HashMap < > ( ) ;
  for ( int i : numbers ) counter . put ( i , counter . get ( i ) + 1 ) ;
  List < Integer > result = new ArrayList < > ( ) ;
  for ( int i : numbers ) {
    if ( counter . get ( i ) == 1 ) result . add ( i ) ;
  }
  return result . toArray ( new Integer [ result . size ( ) ] ) ;
}

***Example ends here:
String flipCase ( String s ) {
  StringBuilder sb = new StringBuilder ( ) ;
  for ( char c : s . toCharArray ( ) ) {
    if ( Character . isLowerCase ( c ) ) sb . append ( Character . toUpperCase ( c ) ) ;
    else sb . append ( Character . toLowerCase ( c ) ) ;
  }
  return sb . toString ( ) ;
}

***Example ends here:
List < String > filterByPrefix ( List < String > strings , String prefix ) {
  List < String > result = new ArrayList < String > ( ) ;
  for ( int i = 0 ;
  i < strings . size ( ) ;
  i ++ ) {
    if ( strings . get ( i ) . startsWith ( prefix ) ) result . add ( strings . get ( i ) ) ;
  }
  return result ;
}

***Example ends here:
double FindZero ( double [ ] xs ) {
  double ans = 0 ;
  double value = 0 ;
  for ( int i = 0 ;
  i < xs . length ;
  i ++ ) value += xs [ i ] * Math . pow ( ans , i ) ;
  while ( Math . abs ( value ) > 1e-6 ) {
    double driv = 0 ;
    for ( int i = 1 ;
    i < xs . length ;
    i ++ ) driv += xs [ i ] * Math . pow ( ans , i - 1 ) * i ;
    ans -= value / driv ;
    value = 0 ;
    for ( int i = 0 ;
    i < xs . length ;
    i ++ ) value += xs [ i ] * Math . pow ( ans , i ) ;
  }
  return ans ;
}

***Example ends here:
int [ ] sortThird ( int [ ] l ) {
  int [ ] thirds = new int [ l . length ] ;
  for ( int i = 0 ;
  i < l . length ;
  i += 3 ) thirds [ i ] = l [ i ] ;
  Arrays . sort ( thirds ) ;
  int [ ] result = new int [ l . length ] ;
  for ( int i = 0 ;
  i < l . length ;
  i ++ ) {
    if ( i % 3 == 0 ) result [ i / 3 ] = thirds [ i % 3 ] ;
    else result [ i ] = l [ i ] ;
  }
  return result ;
}

***Example ends here:
int [ ] Unique ( int [ ] l ) {
  HashSet s = new HashSet ( l ) ;
  int [ ] result = new int [ s . size ( ) ] ;
  s . toArray ( result ) ;
  Arrays . sort ( result ) ;
  return result ;
}

***Example ends here:
double MaxElement ( double [ ] l ) {
  return Math . max ( l [ 0 ] , l [ 1 ] ) ;
}

***Example ends here:
boolean triplesSumToZero ( int [ ] l ) {
  for ( int i = 0 ;
  i < l . length ;
  i ++ ) {
    for ( int j = i + 1 ;
    j < l . length ;
    j ++ ) {
      for ( int k = j + 1 ;
      k < l . length ;
      k ++ ) {
        if ( l [ i ] + l [ j ] + l [ k ] == 0 ) {
          return true ;
        }
      }
    }
  }
  return false ;
}

***Example ends here:
int Fib4 ( int n ) {
  int [ ] results = {
    0 , 0 , 2 , 0 }
    ;
    for ( int i = 4 ;
    i <= n ;
    i ++ ) results [ i - 4 ] = results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ;
    return results [ n ] ;
  }
  
***Example ends here:
boolean isPalindrome ( String text ) {
  String pr = new String ( text . toCharArray ( ) ) ;
  return pr . equals ( text ) ;
}

***Example ends here:
String RemoveVowels ( String text ) {
  StringBuilder sb = new StringBuilder ( ) ;
  String vowels = "aeiou" ;
  for ( char ch : text . toCharArray ( ) ) {
    if ( vowels . indexOf ( Character . toLowerCase ( ch ) ) == - 1 ) sb . append ( ch ) ;
  }
  return sb . toString ( ) ;
}

***Example ends here:
boolean sameChars ( String s0 , String s1 ) {
  HashSet < Character > set0 = new HashSet < > ( ) ;
  for ( char c : s0 . toCharArray ( ) ) set0 . add ( c ) ;
  HashSet < Character > set1 = new HashSet < > ( ) ;
  for ( char c : s1 . toCharArray ( ) ) set1 . add ( c ) ;
  return set0 . equals ( set1 ) ;
}

***Example ends here:
int [ ] Common ( int [ ] l1 , int [ ] l2 ) {
  HashSet < Integer > us = new HashSet < > ( ) ;
  for ( int e1 : l1 ) {
    for ( int e2 : l2 ) {
      if ( e1 == e2 ) us . add ( e1 ) ;
    }
  }
  int [ ] ret = new int [ us . size ( ) ] ;
  Collections . shuffle ( ret ) ;
  return ret ;
}

***Example ends here:
boolean correctBracketing ( String brackets ) {
  int depth = 0 ;
  for ( char b : brackets . toCharArray ( ) ) {
    if ( b == '(' ) depth += 1 ;
    if ( b == ')' ) depth -= 1 ;
    if ( depth < 0 ) return false ;
  }
  return depth == 0 ;
}

***Example ends here:
String CircularShift ( int x , int shift ) {
  String xs = Integer . toString ( x ) ;
  if ( shift > xs . length ( ) ) {
    return new StringBuilder ( xs . reverse ( ) ) . reverse ( ) . toString ( ) ;
  }
  return xs . substring ( xs . length ( ) - shift ) + xs . substring ( 0 , xs . length ( ) - shift ) ;
}

***Example ends here:
int Search ( int [ ] lst ) {
  HashMap < Integer , Integer > counter = new HashMap < > ( ) ;
  for ( int i : lst ) counter . put ( i , 1 ) ;
  int ans = - 1 ;
  for ( int key : counter . keySet ( ) ) {
    if ( value >= key && key > ans ) ans = key ;
  }
  return ans ;
}

***Example ends here:
int SmallestChange ( int [ ] arr ) {
  int ans = 0 ;
  for ( int i = 0 ;
  i < arr . length / 2 ;
  i ++ ) {
    if ( arr [ i ] != arr [ arr . length - i - 1 ] ) ans += 1 ;
  }
  return ans ;
}

***Example ends here:
String [ ] TotalMatch ( String [ ] lst1 , String [ ] lst2 ) {
  int sum1 = 0 ;
  for ( String st : lst1 ) sum1 += st . length ( ) ;
  int sum2 = 0 ;
  for ( String st : lst2 ) sum2 += st . length ( ) ;
  return sum1 > sum2 ? lst2 : lst1 ;
}

***Example ends here:
boolean isHappy ( String s ) {
  if ( s . length ( ) < 3 ) {
    return false ;
  }
  for ( int i = 0 ;
  i < s . length ( ) - 2 ;
  i ++ ) {
    if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i ) == s . charAt ( i + 2 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
String NumericalLetterGrade ( double [ ] grades ) {
  StringBuilder letter_grade = new StringBuilder ( ) ;
  for ( double gpa : grades ) {
    if ( gpa == 4.0 ) letter_grade . append ( "A+" ) ;
    else if ( gpa > 3.7 ) letter_grade . append ( "A" ) ;
    else if ( gpa > 3.3 ) letter_grade . append ( "A-" ) ;
    else if ( gpa > 3.0 ) letter_grade . append ( "B+" ) ;
    else if ( gpa > 2.7 ) letter_grade . append ( "B" ) ;
    else if ( gpa > 2.3 ) letter_grade . append ( "B-" ) ;
    else if ( gpa > 2.0 ) letter_grade . append ( "C+" ) ;
    else if ( gpa > 1.7 ) letter_grade . append ( "C" ) ;
    else if ( gpa > 1.3 ) letter_grade . append ( "C-" ) ;
    else if ( gpa > 1.0 ) letter_grade . append ( "D+" ) ;
    else if ( gpa > 0.7 ) letter_grade . append ( "D" ) ;
    else if ( gpa > 0.0 ) letter_grade . append ( "D-" ) ;
    else letter_grade . append ( "E" ) ;
  }
  return letter_grade . toString ( ) ;
}

***Example ends here:
String Solve ( int n ) {
  StringBuilder biStr = new StringBuilder ( ) ;
  int sum = 0 ;
  for ( char c : String . valueOf ( n ) . toCharArray ( ) ) sum += c - '0' ;
  while ( sum > 0 ) {
    biStr . insert ( 0 , String . valueOf ( sum % 2 ) ) ;
    sum /= 2 ;
  }
  return biStr . toString ( ) ;
}

***Example ends here:
String AntiShuffle ( String s ) {
  StringBuilder ret = new StringBuilder ( ) ;
  StringBuilder current = new StringBuilder ( ) ;
  for ( int i = 0 ;
  i <= s . length ( ) ;
  i ++ ) {
    if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) {
      Collections . shuffle ( current ) ;
      if ( ret . length ( ) == 0 ) ret . append ( ' ' ) ;
      ret . append ( current . toString ( ) ) ;
      current . setLength ( 0 ) ;
    }
    else {
      current . append ( s . charAt ( i ) ) ;
    }
  }
  return ret . toString ( ) ;
}

***Example ends here:
int [ ] SortArray ( int [ ] array ) {
  if ( array == null ) {
    return null ;
  }
  if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) {
    Arrays . sort ( array ) ;
  }
  else {
    Arrays . sort ( array , new int [ array . length ] ) ;
  }
  return array ;
}

***Example ends here:
String Encrypt ( String s ) {
  String ans = "" ;
  for ( char c : s . toCharArray ( ) ) {
    if ( Character . isLetter ( c ) ) ans += ( char ) ( 'a' + ( c - 'a' + 4 ) % 26 ) ;
    else ans += c ;
  }
  return ans ;
}

***Example ends here:
int IsBored ( String s ) {
  boolean isStart = true ;
  int sum = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( s . charAt ( i ) == '.' || s . charAt ( i ) == '?' || s . charAt ( i ) == '!' ) {
      isStart = true ;
    }
    else if ( isStart ) {
      if ( s . charAt ( i ) == ' ' ) {
        continue ;
      }
      if ( s . substring ( i , i + 2 ) . equals ( "I " ) ) {
        sum += 1 ;
      }
      isStart = false ;
    }
  }
  return sum ;
}

***Example ends here:
String Encode ( String message ) {
  String vowels = "aeiouAEIOU" ;
  StringBuilder ret = new StringBuilder ( ) ;
  for ( char c : message . toCharArray ( ) ) {
    if ( Character . isUpperCase ( c ) ) {
      c = Character . toLowerCase ( c ) ;
      if ( vowels . indexOf ( c ) != - 1 ) c = 'a' + ( c - 'a' + 2 ) % 26 ;
    }
    else if ( Character . isLowerCase ( c ) ) {
      c = Character . toUpperCase ( c ) ;
      if ( vowels . indexOf ( c ) != - 1 ) c = 'A' + ( c - 'A' + 2 ) % 26 ;
    }
    ret . append ( c ) ;
  }
  return ret . toString ( ) ;
}

***Example ends here:
int Skjkasdkd ( int [ ] lst ) {
  int largest = 0 ;
  for ( int n : lst ) {
    if ( n > largest ) {
      boolean prime = true ;
      for ( int i = 2 ;
      i < n ;
      i ++ ) {
        if ( n % i == 0 ) prime = false ;
      }
      if ( prime ) largest = n ;
    }
  }
  int sum = 0 ;
  String s = Integer . toString ( largest ) ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) sum += s . charAt ( i ) - '0' ;
  return sum ;
}

***Example ends here:
boolean checkDictCase ( HashMap < String , String > dict ) {
  if ( dict == null ) {
    return false ;
  }
  int isLower = 0 ;
  int isUpper = 0 ;
  for ( String [ ] [ ] key : dict . values ( ) ) {
    for ( char c : key [ 0 ] ) {
      if ( Character . isLowerCase ( c ) ) {
        isLower = 1 ;
      }
      else if ( Character . isUpperCase ( c ) ) {
        isUpper = 1 ;
      }
      else {
        return false ;
      }
    }
  }
  return isLower + isUpper == 1 ;
}

***Example ends here:
int multiply ( int a , int b ) {
  return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ;
}

***Example ends here:
int CountUpper ( String s ) {
  String uVowel = "AEIOU" ;
  int count = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i += 2 ) {
    if ( uVowel . contains ( s . charAt ( i ) ) ) count += 1 ;
  }
  return count ;
}

***Example ends here:
String [ ] ByLength ( int [ ] arr ) {
  Map < Integer , String > numTo = new HashMap < > ( ) ;
  numTo . put ( 1 , "One" ) ;
  numTo . put ( 2 , "Two" ) ;
  numTo . put ( 3 , "Three" ) ;
  numTo . put ( 4 , "Four" ) ;
  numTo . put ( 5 , "Five" ) ;
  numTo . put ( 6 , "Six" ) ;
  numTo . put ( 7 , "Seven" ) ;
  numTo . put ( 8 , "Eight" ) ;
  numTo . put ( 9 , "Nine" ) ;
  int [ ] sortedArr = new int [ arr . length ] ;
  Arrays . sort ( sortedArr , new Comparator < Integer > ( ) {
    @ Override public int compare ( Integer o1 , Integer o2 ) {
      return numTo . get ( o1 ) . compareTo ( numTo . get ( o2 ) ) ;
    }
  }
  ) ;
  List < String > newArr = new ArrayList < > ( ) ;
  for ( int n : sortedArr ) {
    if ( n >= 1 && n <= 9 ) newArr . add ( numTo . get ( n ) ) ;
  }
  return newArr . toArray ( new String [ 0 ] ) ;
}

***Example ends here:
int [ ] f ( int n ) {
  int sum = 0 ;
  int prod = 1 ;
  int [ ] result = new int [ n ] ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) {
    sum += i ;
    prod *= i ;
    if ( i % 2 == 0 ) result [ i ] = prod ;
    else result [ i ] = sum ;
  }
  return result ;
}

***Example ends here:
int [ ] EvenOddPalindrome ( int n ) {
  int even_count = 0 , odd_count = 0 ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) {
    String s = Integer . toString ( i ) ;
    String r_str = new String ( s . reverse ( ) ) ;
    if ( s . equals ( r_str ) ) {
      if ( i % 2 == 1 ) odd_count += 1 ;
      else even_count += 1 ;
    }
  }
  return new int [ ] {
    even_count , odd_count }
    ;
  }
  
***Example ends here:
HashMap < Character , Integer > Histogram ( String test ) {
  HashMap < Character , Integer > count = new HashMap < > ( ) ;
  int max = 0 ;
  for ( int i = 0 ;
  i < test . length ( ) ;
  i ++ ) {
    if ( test . charAt ( i ) != ' ' ) {
      count . put ( test . charAt ( i ) , 1 ) ;
      if ( count . get ( test . charAt ( i ) ) > max ) max = count . get ( test . charAt ( i ) ) ;
    }
  }
  HashMap < Character , Integer > result = new HashMap < > ( ) ;
  for ( char [ ] [ ] array : count . values ( ) ) {
    if ( array [ 0 ] . length == max ) result . put ( array [ 0 ] [ 0 ] , array [ 0 ] [ 1 ] ) ;
  }
  return result ;
}

***Example ends here:
String [ ] reverseDelete ( String s , String c ) {
  StringBuilder ret = new StringBuilder ( ) ;
  for ( char ch : s . toCharArray ( ) ) {
    if ( c . indexOf ( ch ) == - 1 ) ret . append ( ch ) ;
  }
  String flag = "False" ;
  if ( ret . equals ( new StringBuilder ( ret . reverse ( ) . toString ( ) ) ) ) flag = "True" ;
  return new String [ ] {
    ret . toString ( ) , flag }
    ;
  }
  
***Example ends here:
int [ ] SortArray ( int [ ] arr ) {
  int [ ] bin = new int [ arr . length ] ;
  for ( int i : arr ) {
    int b = 0 ;
    int n = Math . abs ( i ) ;
    while ( n > 0 ) {
      b += n % 2 ;
      n /= 2 ;
    }
    bin [ i ] = b ;
  }
  for ( int i = 0 ;
  i < arr . length ;
  i ++ ) {
    for ( int j = 1 ;
    j < arr . length ;
    j ++ ) {
      if ( bin [ j ] < bin [ j - 1 ] || ( bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) ) {
        Arrays . swap ( bin , j , j - 1 ) ;
        Arrays . swap ( arr , j , j - 1 ) ;
      }
    }
  }
  return arr ;
}

***Example ends here:
String getClosestVowel ( String word ) {
  String vowels = "AEIOUaeiou" ;
  for ( int i = word . length ( ) - 2 ;
  i > 0 ;
  i -- ) {
    if ( vowels . indexOf ( word . charAt ( i ) ) != - 1 && vowels . indexOf ( word . charAt ( i + 1 ) ) == - 1 && vowels . indexOf ( word . charAt ( i - 1 ) ) == - 1 ) {
      return new String ( 1 , word . charAt ( i ) ) ;
    }
  }
  return "" ;
}

***Example ends here:
String MatchParens ( List < String > lst ) {
  List < String > strings = new ArrayList < String > ( lst . get ( 0 ) + lst . get ( 1 ) , lst . get ( 1 ) + lst . get ( 0 ) ) ;
  for ( String l : strings ) {
    int count = 0 ;
    for ( char c : l . toCharArray ( ) ) {
      if ( c == '(' ) count += 1 ;
      if ( c == ')' ) count -= 1 ;
      if ( count < 0 ) break ;
    }
    if ( count == 0 ) return "Yes" ;
  }
  return "No" ;
}

***Example ends here:
int [ ] Maximum ( int [ ] arr , int k ) {
  if ( k == 0 ) {
    return new int [ 0 ] ;
  }
  Arrays . sort ( arr ) ;
  return new int [ arr . length - k ] ;
}

***Example ends here:
boolean validDate ( String date ) {
  if ( date . length ( ) != 10 ) {
    return false ;
  }
  for ( int i = 0 ;
  i < 10 ;
  i ++ ) {
    if ( i == 2 || i == 5 ) {
      if ( date . charAt ( i ) != '-' ) {
        return false ;
      }
    }
    else if ( ! Character . isDigit ( date . charAt ( i ) ) ) {
      return false ;
    }
  }
  int month = Integer . parseInt ( date . substring ( 0 , 2 ) ) ;
  int day = Integer . parseInt ( date . substring ( 3 , 2 ) ) ;
  int year = Integer . parseInt ( date . substring ( 6 , 4 ) ) ;
  if ( month < 1 || month > 12 ) {
    return false ;
  }
  if ( day < 1 || day > 31 ) {
    return false ;
  }
  if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) {
    return false ;
  }
  if ( day == 30 && month == 2 ) {
    return false ;
  }
  return true ;
}

***Example ends here:
String [ ] splitWords ( String txt ) {
  StringBuilder current = new StringBuilder ( ) ;
  List < String > result = new ArrayList < String > ( ) ;
  if ( txt . contains ( " " ) ) {
    for ( int i = 0 ;
    i <= txt . length ( ) ;
    i ++ ) {
      if ( i == txt . length ( ) || txt . charAt ( i ) == ' ' ) {
        if ( current . length ( ) > 0 ) result . add ( current . toString ( ) ) ;
        current = new StringBuilder ( ) ;
      }
      else current . append ( txt . charAt ( i ) ) ;
    }
    return result . toArray ( new String [ result . size ( ) ] ) ;
  }
  if ( txt . contains ( "," ) ) {
    for ( int i = 0 ;
    i <= txt . length ( ) ;
    i ++ ) {
      if ( i == txt . length ( ) || txt . charAt ( i ) == ',' ) {
        if ( current . length ( ) > 0 ) result . add ( current . toString ( ) ) ;
        current = new StringBuilder ( ) ;
      }
      else current . append ( txt . charAt ( i ) ) ;
    }
    return result . toArray ( new String [ result . size ( ) ] ) ;
  }
  int num = 0 ;
  for ( char c : txt . toCharArray ( ) ) {
    if ( Character . isLowerCase ( c ) && c % 2 == 0 ) num += 1 ;
  }
  return new String [ ] {
    String . valueOf ( num ) }
    ;
  }
  
***Example ends here:
int [ ] getTri ( int n ) {
  if ( n == 0 ) {
    return new int [ ] {
      1 }
      ;
    }
    int [ ] tris = new int [ ] {
      1 , 3 }
      ;
      for ( int i = 2 ;
      i <= n ;
      i ++ ) {
        if ( i % 2 == 0 ) {
          tris [ i / 2 + 1 ] = i / 2 + 1 ;
        }
        else {
          tris [ i - 1 ] = tris [ i - 2 ] + ( i + 3 ) / 2 ;
        }
      }
      return tris ;
    }
    
***Example ends here:
boolean checkIfLastCharIsALetter ( String txt ) {
  if ( txt == null ) {
    return false ;
  }
  return Character . isLetter ( txt . charAt ( txt . length ( ) - 1 ) ) && ( txt . length ( ) == 1 || ! Character . isLetter ( txt . charAt ( txt . length ( ) - 2 ) ) ) ;
}

***Example ends here:
int [ ] OrderByPoints ( int [ ] nums ) {
  List < Integer > result = new ArrayList < > ( ) ;
  for ( int num : nums ) {
    String w = Integer . toString ( Math . abs ( num ) ) ;
    int sum = 0 ;
    for ( char c : w . toCharArray ( ) ) sum += c - '0' ;
    if ( num < 0 ) sum -= 2 * ( w . charAt ( 0 ) - '0' ) ;
    result . add ( sum ) ;
  }
  for ( int i = 0 ;
  i < nums . length ;
  i ++ ) {
    for ( int j = 1 ;
    j < nums . length ;
    j ++ ) {
      if ( result . get ( j - 1 ) > result . get ( j ) ) {
        Collections . swap ( result , j , j - 1 ) ;
        Collections . swap ( nums , j , j - 1 ) ;
      }
    }
  }
  return nums ;
}

***Example ends here:
String [ ] getBf ( String planet1 , String planet2 ) {
  String [ ] planets = new String [ ] {
    "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" }
    ;
    Iterator < String > it1 = Arrays . asList ( planets ) . iterator ( ) ;
    int idx1 = it1 . hasNext ( ) ? - 1 : it1 . next ( ) ;
    Iterator < String > it2 = Arrays . asList ( planets ) . iterator ( ) ;
    int idx2 = it2 . hasNext ( ) ? - 1 : it2 . next ( ) ;
    if ( idx1 == - 1 || idx2 == - 1 || idx1 == idx2 ) {
      return new String [ ] {
      }
      ;
    }
    return idx1 > idx2 ? new String [ ] {
      "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" }
      : new String [ ] {
        "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" }
        ;
      }
      
***Example ends here:
List < String > SortedListSum ( List < String > lst ) {
  List < String > result = new ArrayList < String > ( ) ;
  for ( String i : lst ) {
    if ( i . length ( ) % 2 == 0 ) result . add ( i ) ;
  }
  Collections . sort ( result , new Comparator < String > ( ) {
    public int compare ( String l , String r ) {
      if ( l . length ( ) == r . length ( ) ) return l . compareTo ( r ) ;
      return l . compareTo ( r ) ;
    }
  }
  ) ;
  return result ;
}

***Example ends here:
boolean cycpatternCheck ( String a , String b ) {
  for ( int i = 0 ;
  i < b . length ( ) ;
  i ++ ) {
    String rotate = b . substring ( i ) + b . substring ( 0 , i ) ;
    if ( a . contains ( rotate ) ) {
      return true ;
    }
  }
  return false ;
}

***Example ends here:
int [ ] EvenOddCount ( int num ) {
  int even_count = 0 , odd_count = 0 ;
  for ( char i : String . valueOf ( Math . abs ( num ) ) . toCharArray ( ) ) {
    if ( i % 2 == 0 ) even_count += 1 ;
    else odd_count += 1 ;
  }
  return new int [ ] {
    even_count , odd_count }
    ;
  }
  
***Example ends here:
String FindMax ( String [ ] words ) {
  String max = "" ;
  int max_length = 0 ;
  for ( String word : words ) {
    StringBuilder unique = new StringBuilder ( ) ;
    for ( char w : word . toCharArray ( ) ) {
      if ( unique . length ( ) == max_length ) unique . append ( w ) ;
    }
    if ( unique . length ( ) > max_length || ( unique . length ( ) == max_length && word . compareTo ( max ) < 0 ) ) {
      max = word ;
      max_length = unique . length ( ) ;
    }
  }
  return max ;
}

***Example ends here:
String Solve ( String s ) {
  boolean noLetter = true ;
  StringBuilder sb = new StringBuilder ( ) ;
  for ( char ch : s . toCharArray ( ) ) {
    if ( Character . isUpperCase ( ch ) ) {
      ch = Character . toLowerCase ( ch ) ;
      noLetter = false ;
    }
    else if ( Character . isLowerCase ( ch ) ) {
      ch = Character . toUpperCase ( ch ) ;
      noLetter = false ;
    }
    sb . append ( ch ) ;
  }
  if ( noLetter ) {
    return new String ( sb . reverse ( ) ) ;
  }
  else {
    return sb . toString ( ) ;
  }
}

***Example ends here:
int MostFrequent ( int [ ] arr , int n ) {
  HashMap < Integer , Integer > hp = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( hp . containsKey ( arr [ i ] ) ) hp . get ( arr [ i ] ) ++ ;
    else hp . put ( arr [ i ] , 1 ) ;
  }
  int maxCount = 0 , res = - 1 ;
  for ( HashMap . Entry < Integer , Integer > entry : hp . entrySet ( ) ) {
    if ( maxCount < entry . getValue ( ) ) {
      res = entry . getKey ( ) ;
      maxCount = entry . getValue ( ) ;
    }
  }
  return res ;
}

***Example ends here:
int Find ( int [ ] a , int [ ] b , int k , int n1 , int n2 ) {
  HashSet < Integer > s = new HashSet < > ( ) ;
  for ( int i = 0 ;
  i < n2 ;
  i ++ ) s . add ( b [ i ] ) ;
  int missing = 0 ;
  for ( int i = 0 ;
  i < n1 ;
  i ++ ) {
    if ( s . contains ( a [ i ] ) == false ) missing ++ ;
    if ( missing == k ) return a [ i ] ;
  }
  return - 1 ;
}

***Example ends here:
int solveQuery ( int start , int end , int [ ] arr ) {
  HashMap < Integer , Integer > mp = new HashMap < > ( ) ;
  for ( int i = start ;
  i <= end ;
  i ++ ) mp . put ( arr [ i ] , ++ i ) ;
  int count = 0 ;
  for ( final Integer key : mp . values ( ) ) {
    if ( key == value ) count ++ ;
  }
  return count ;
}

***Example ends here:
int Segregate ( int [ ] arr , int size ) {
  int j = 0 ;
  for ( int i = 0 ;
  i < size ;
  i ++ ) {
    if ( arr [ i ] <= 0 ) {
      Arrays . swap ( arr , i , j ) ;
      j ++ ;
    }
  }
  return j ;
}

***Example ends here:
int CountTriplets ( int [ ] a , int n ) {
  HashSet < Integer > s = new HashSet < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) s . add ( a [ i ] ) ;
  int count = 0 ;
  for ( int i = 0 ;
  i < n - 1 ;
  i ++ ) {
    for ( int j = i + 1 ;
    j < n ;
    j ++ ) {
      int xr = a [ i ] ^ a [ j ] ;
      if ( s . contains ( xr ) && xr != a [ i ] && xr != a [ j ] ) count ++ ;
    }
  }
  return count / 3 ;
}

***Example ends here:
int LeastFrequent ( int [ ] arr , int n ) {
  HashMap < Integer , Integer > hp = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( hp . containsKey ( arr [ i ] ) ) hp . get ( arr [ i ] ) ++ ;
    else hp . put ( arr [ i ] , 1 ) ;
  }
  int minCount = n + 1 , res = - 1 ;
  for ( Map . Entry < Integer , Integer > entry : hp . entrySet ( ) ) {
    if ( minCount >= entry . getValue ( ) ) {
      res = entry . getKey ( ) ;
      minCount = entry . getValue ( ) ;
    }
  }
  return res ;
}

***Example ends here:
int FindPermutations ( int [ ] arr ) {
  int cnt = 0 ;
  int maxInd = - 1 , minInd = 10000000 ;
  int n = arr . length ;
  HashMap < Integer , Integer > indexOf = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) indexOf . put ( arr [ i ] , i + 1 ) ;
  for ( int i = 1 ;
  i <= n ;
  i ++ ) {
    maxInd = Math . max ( maxInd , indexOf . get ( i ) ) ;
    minInd = Math . min ( minInd , indexOf . get ( i ) ) ;
    if ( maxInd - minInd + 1 == i ) cnt ++ ;
  }
  return cnt ;
}

***Example ends here:
int FormQuadruplets ( int [ ] arr , int n ) {
  int ans = 0 , pairs = 0 ;
  pairs = n / 4 ;
  Arrays . sort ( arr , new Comparator < Integer > ( ) {
    public int compare ( Integer o1 , Integer o2 ) {
      return o2 . intValue ( ) - o1 . intValue ( ) ;
    }
  }
  ) ;
  for ( int i = 0 ;
  i < n - pairs ;
  i += 3 ) ans += arr [ i + 2 ] ;
  return ans ;
}

***Example ends here:
String LexicographicallyMaximum ( String s , int n ) {
  HashMap < Character , Integer > m = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  ++ i ) {
    if ( m . containsKey ( s [ i ] ) ) m . get ( s [ i ] ) ++ ;
    else m . put ( s [ i ] , 1 ) ;
  }
  List < Character > list = new ArrayList < > ( ) ;
  for ( char i = 'a' ;
  i < 'a' + Math . min ( n , 25 ) ;
  ++ i ) {
    if ( m . get ( i ) == null ) list . add ( i ) ;
  }
  int j = list . size ( ) - 1 ;
  for ( int i = 0 ;
  i < n ;
  ++ i ) {
    if ( s [ i ] >= 'a' + Math . min ( n , 25 ) || ( m . containsKey ( s [ i ] ) && m . get ( s [ i ] ) > 1 ) ) {
      if ( list . get ( j ) < s [ i ] ) continue ;
      m . get ( s [ i ] ) -- ;
      s = s . substring ( 0 , i ) + v [ j ] + s . substring ( i + 1 ) ;
      j -- ;
    }
    if ( j < 0 ) break ;
  }
  int l = 0 ;
  for ( int i = n - 1 ;
  i >= 0 ;
  -- i ) {
    if ( l > j ) break ;
    if ( s [ i ] >= 'a' + Math . min ( n , 25 ) || ( m . containsKey ( s [ i ] ) && m . get ( s [ i ] ) > 1 ) ) {
      m . get ( s [ i ] ) -- ;
      s = s . substring ( 0 , i ) + v [ l ] + s . substring ( i + 1 ) ;
      l ++ ;
    }
  }
  return s ;
}

***Example ends here:
int NoOfValidKbers ( int k , int [ ] arr ) {
  HashSet < Integer > s = new HashSet < > ( ) ;
  while ( k != 0 ) {
    s . add ( k % 10 ) ;
    k = k / 10 ;
  }
  int count = 0 ;
  for ( int i = 0 ;
  i < arr . length ;
  i ++ ) {
    int no = arr [ i ] ;
    boolean flag = true ;
    while ( no != 0 ) {
      int digit = no % 10 ;
      if ( s . contains ( digit ) == false ) {
        flag = false ;
        break ;
      }
      no = no / 10 ;
    }
    if ( flag ) count ++ ;
  }
  return count ;
}

***Example ends here:
int DelCost ( String s , int [ ] cost ) {
  int ans = 0 ;
  Map < Character , Integer > forMax = new HashMap < > ( ) ;
  Map < Character , Integer > fortot = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    if ( forMax . get ( s . charAt ( i ) ) == null ) forMax . put ( s . charAt ( i ) , cost [ i ] ) ;
    else forMax . put ( s . charAt ( i ) , Math . max ( cost [ i ] , forMax . get ( s . charAt ( i ) ) ) ) ;
    if ( fortot . get ( s . charAt ( i ) ) == null ) fortot . put ( s . charAt ( i ) , cost [ i ] ) ;
    else fortot . put ( s . charAt ( i ) , fortot . get ( s . charAt ( i ) ) + cost [ i ] ) ;
  }
  for ( Map . Entry < Character , Integer > i : forMax . entrySet ( ) ) ans += i . getKey ( ) - i . getValue ( ) ;
  return ans ;
}

***Example ends here:
List < String > ReplaceDuplicates ( List < String > names ) {
  HashMap < String , Integer > hash = new HashMap < String , Integer > ( ) ;
  for ( int i = 0 ;
  i < names . size ( ) ;
  i ++ ) {
    if ( hash . get ( names . get ( i ) ) == null ) {
      hash . put ( names . get ( i ) , 1 ) ;
    }
    else {
      int count = hash . get ( names . get ( i ) ) ;
      hash . get ( names . get ( i ) ) ++ ;
      names . get ( i ) + = count ;
    }
  }
  return names ;
}

***Example ends here:
int [ ] minmaxNumbers ( int [ ] [ ] matrix , int [ ] res ) {
  HashSet < Integer > s = new HashSet < > ( ) ;
  for ( int i = 0 ;
  i < matrix . length ;
  i ++ ) {
    int minR = Integer . MAX_VALUE ;
    for ( int j = 0 ;
    j < matrix [ i ] . length ;
    j ++ ) minR = Math . min ( minR , matrix [ i ] [ j ] ) ;
    s . add ( minR ) ;
  }
  for ( int j = 0 ;
  j < matrix [ 0 ] . length ;
  j ++ ) {
    int maxC = Integer . MIN_VALUE ;
    for ( int i = 0 ;
    i < matrix . length ;
    i ++ ) maxC = Math . max ( maxC , matrix [ i ] [ j ] ) ;
    if ( s . contains ( maxC ) ) res [ j ] = maxC ;
  }
  return res ;
}

***Example ends here:
int LengthOfLongestAp ( int [ ] a , int n ) {
  HashMap < Integer , HashMap < Integer , Integer >> dp = new HashMap < > ( ) ;
  int res = 2 ;
  for ( int i = 0 ;
  i < n ;
  ++ i ) {
    for ( int j = i + 1 ;
    j < n ;
    ++ j ) {
      int d = a [ j ] - a [ i ] ;
      if ( dp . containsKey ( d ) ) {
        if ( dp . get ( d ) . containsKey ( i ) ) dp . put ( d , dp . get ( d ) . get ( i ) + 1 ) ;
        else dp . put ( d , 2 ) ;
      }
      else {
        dp . put ( d , new HashMap < > ( ) ) ;
        dp . put ( d , 2 ) ;
      }
      res = Math . max ( res , dp . get ( d ) . get ( j ) ) ;
    }
  }
  return res ;
}

***Example ends here:
char FindKthChar ( int n , int k ) {
  String prev = "A" ;
  String cur ;
  if ( n == 1 ) {
    return 'A' ;
  }
  for ( int j = 2 ;
  j <= n ;
  j ++ ) {
    cur = prev + "B" ;
    for ( int i = 0 ;
    i < prev . length ( ) ;
    i ++ ) {
      if ( prev . charAt ( i ) == 'A' ) {
        prev . setCharAt ( i , 'B' ) ;
      }
      else {
        prev . setCharAt ( i , 'A' ) ;
      }
    }
    Collections . reverse ( prev ) ;
    cur += prev ;
    prev = cur ;
  }
  return cur . charAt ( k - 1 ) ;
}

***Example ends here:
char FindKthLargest ( String s , int k ) {
  char [ ] tmp = s . toCharArray ( ) ;
  Arrays . sort ( tmp ) ;
  Arrays . reverse ( tmp ) ;
  return tmp [ k - 1 ] ;
}

***Example ends here:
int SubArraylen ( int [ ] arr , int n , int k ) {
  HashMap < Integer , Integer > mp = new HashMap < > ( ) ;
  mp . put ( arr [ 0 ] , 0 ) ;
  for ( int i = 1 ;
  i < n ;
  i ++ ) {
    arr [ i ] = arr [ i ] + arr [ i - 1 ] ;
    mp . put ( arr [ i ] , i ) ;
  }
  int length = Integer . MAX_VALUE ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( arr [ i ] < k ) continue ;
    else {
      int x = arr [ i ] - k ;
      if ( x == 0 ) length = Math . min ( length , i ) ;
      if ( mp . get ( x ) == null ) continue ;
      else length = Math . min ( length , i - mp . get ( x ) ) ;
    }
  }
  return length ;
}

***Example ends here:
int FindMaxLen ( int [ ] a , int k ) {
  int n = a . length ;
  Arrays . sort ( a ) ;
  boolean [ ] vis = new boolean [ n ] ;
  Map < Integer , Integer > mp = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) mp . put ( a [ i ] , i ) ;
  int c = 0 ;
  for ( int i = 0 ;
  i < n ;
  ++ i ) {
    if ( ! vis [ i ] ) {
      int check = a [ i ] * k ;
      if ( mp . containsKey ( check ) ) {
        c ++ ;
        vis [ mp . get ( check ) ] = true ;
      }
    }
  }
  return n - c ;
}

***Example ends here:
int [ ] minDistancePoints ( int [ ] a , int k , int n ) {
  Map < Integer , Integer > m = new HashMap < > ( ) ;
  Queue < Integer > q = new LinkedList < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  ++ i ) {
    m . put ( a [ i ] , 1 ) ;
    q . add ( a [ i ] ) ;
  }
  int [ ] ans = new int [ n ] ;
  while ( k > 0 ) {
    int x = q . poll ( ) ;
    q . offer ( x ) ;
    if ( m . containsKey ( x - 1 ) && k > 0 ) {
      m . put ( x - 1 , 1 ) ;
      q . offer ( x - 1 ) ;
      ans [ x - 1 ] = x - 1 ;
      k -- ;
    }
    if ( ! m . containsKey ( x + 1 ) && k > 0 ) {
      m . put ( x + 1 , 1 ) ;
      q . offer ( x + 1 ) ;
      ans [ x + 1 ] = x + 1 ;
      k -- ;
    }
  }
  return ans ;
}

***Example ends here:
boolean isValidLen ( String s , int length , int k ) {
  int n = s . length ( ) ;
  HashMap < Character , Integer > mp = new HashMap < > ( ) ;
  int right = 0 ;
  while ( right < length ) {
    if ( mp . containsKey ( s . charAt ( right ) ) ) mp . get ( s . charAt ( right ) ) ++ ;
    else mp . put ( s . charAt ( right ) , 1 ) ;
    right ++ ;
  }
  if ( mp . size ( ) <= k ) return true ;
  while ( right < n ) {
    if ( mp . containsKey ( s . charAt ( right ) ) ) mp . get ( s . charAt ( right ) ) ++ ;
    else mp . put ( s . charAt ( right ) , 1 ) ;
    if ( mp . containsKey ( s . charAt ( right - length ) ) ) mp . get ( s . charAt ( right - length ) ) -- ;
    if ( mp . get ( s . charAt ( right - length ) ) == 0 ) mp . remove ( s . charAt ( right - length ) ) ;
    if ( mp . size ( ) <= k ) return true ;
    right ++ ;
  }
  return mp . size ( ) <= k ;
}

***Example ends here:
int Partition ( int [ ] arr , int low , int high ) {
  int pivot = arr [ high ] ;
  int i = ( low - 1 ) ;
  for ( int j = low ;
  j <= high - 1 ;
  j ++ ) {
    if ( arr [ j ] <= pivot ) {
      i ++ ;
      Arrays . swap ( arr , i , j ) ;
    }
  }
  Arrays . swap ( arr , i + 1 , high ) ;
  return i + 1 ;
}

***Example ends here:
int StrScore ( String [ ] strs , String s , int n ) {
  HashMap < String , Integer > m = new HashMap < String , Integer > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) m . put ( strs [ i ] , i + 1 ) ;
  if ( m . get ( s ) == null ) {
    return 0 ;
  }
  int score = 0 ;
  for ( int i = 0 ;
  i < s . length ( ) ;
  i ++ ) score += s . charAt ( i ) - 'a' + 1 ;
  score = score * m . get ( s ) ;
  return score ;
}

***Example ends here:
int CountEle ( int [ ] s , int [ ] a , int n ) {
  HashMap < Integer , Boolean > mp = new HashMap < > ( ) ;
  List < Integer > ans = new ArrayList < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  ++ i ) {
    int num = a [ i ] ;
    if ( mp . containsKey ( num ) ) {
      ans . add ( 0 ) ;
    }
    else {
      int cnt = 0 ;
      while ( s [ 0 ] != num ) {
        mp . put ( s [ 0 ] , true ) ;
        s = s . clone ( ) ;
        cnt ++ ;
      }
      s = s . clone ( ) ;
      cnt ++ ;
      ans . add ( cnt ) ;
    }
  }
  return ans . size ( ) ;
}

***Example ends here:
int MaxDistinctChar ( String s , int n , int k ) {
  HashMap < Character , Integer > freq = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) freq . put ( s . charAt ( i ) , 1 ) ;
  List < Integer > list = new ArrayList < > ( ) ;
  for ( Map . Entry < Character , Integer > entry : freq . entrySet ( ) ) list . add ( entry . getValue ( ) ) ;
  Collections . shuffle ( list ) ;
  for ( int i = 0 ;
  i < list . size ( ) ;
  i ++ ) {
    int mn = Math . min ( list . get ( i ) - 1 , k ) ;
    list . set ( i , mn ) ;
    k -= mn ;
  }
  if ( k > 0 ) {
    for ( int i = 0 ;
    i < list . size ( ) ;
    i ++ ) {
      int mn = Math . min ( list . get ( i ) , k ) ;
      list . set ( i , mn ) ;
      k -= mn ;
    }
  }
  int res = 0 ;
  for ( int i = 0 ;
  i < list . size ( ) ;
  i ++ ) {
    if ( list . get ( i ) == 1 ) res ++ ;
  }
  return res ;
}

***Example ends here:
int FindKth ( int [ ] arr , int n , int k ) {
  HashSet < Integer > missing = new HashSet < > ( ) ;
  int count = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) missing . add ( arr [ i ] ) ;
  int maxM = Math . max ( arr . length , n ) ;
  int minM = Math . min ( arr . length , n ) ;
  for ( int i = minM + 1 ;
  i < maxM ;
  i ++ ) {
    if ( missing . contains ( i ) == false ) count ++ ;
    if ( count == k ) return i ;
  }
  return - 1 ;
}

***Example ends here:
boolean AlmostSort ( int [ ] a , int n ) {
  for ( int i = 0 ;
  i < n - 1 ;
  i ++ ) {
    if ( a [ i ] > a [ i + 1 ] ) {
      Arrays . swap ( a , i , i + 1 ) ;
      i ++ ;
    }
  }
  for ( int i = 0 ;
  i < n - 1 ;
  i ++ ) {
    if ( a [ i ] > a [ i + 1 ] ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int MaximumSum ( String s , int n , int k ) {
  int sum = 0 ;
  int [ ] freq = new int [ 256 ] ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) freq [ s . charAt ( i ) ] ++ ;
  Arrays . sort ( freq ) ;
  for ( int i = 0 ;
  i < 256 ;
  i ++ ) {
    if ( k > freq [ i ] ) {
      sum += freq [ i ] * freq [ i ] ;
      k -= freq [ i ] ;
    }
    else {
      sum += freq [ i ] * k ;
      break ;
    }
  }
  return sum ;
}

***Example ends here:
int FindMinOperations ( int [ ] arr , int n , int k ) {
  int operations = 0 ;
  for ( int i = 0 ;
  i < k ;
  i ++ ) {
    HashMap < Integer , Integer > freq = new HashMap < > ( ) ;
    for ( int j = i ;
    j < n ;
    j += k ) freq . put ( arr [ j ] , ++ i ) ;
    int max1 = 0 , num = 0 ;
    for ( Map . Entry < Integer , Integer > [ ] entry : freq . entrySet ( ) ) {
      if ( entry . getValue ( ) > max1 ) {
        max1 = entry . getValue ( ) ;
        num = entry . getKey ( ) ;
      }
    }
    for ( Map . Entry < Integer , Integer > entry : freq . entrySet ( ) ) {
      if ( entry . getKey ( ) != num ) operations += entry . getValue ( ) ;
    }
  }
  return operations ;
}

***Example ends here:
String [ ] SubString ( String s , int n ) {
  List < String > list = new ArrayList < String > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int length = 1 ;
    length <= n - i ;
    length ++ ) {
      String find = s . substring ( i , length ) ;
      list . add ( find ) ;
    }
  }
  return list . toArray ( new String [ list . size ( ) ] ) ;
}

***Example ends here:
boolean checkUniqueFrequency ( int [ ] arr , int n ) {
  HashMap < Integer , Integer > freq = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) freq . put ( arr [ i ] , ++ i ) ;
  HashSet < Integer > uniqueFreq = new HashSet < > ( ) ;
  for ( Map . Entry < Integer , Integer > entry : freq . entrySet ( ) ) {
    if ( uniqueFreq . contains ( entry . getValue ( ) ) ) {
      return false ;
    }
    else {
      uniqueFreq . add ( entry . getValue ( ) ) ;
    }
  }
  return true ;
}

***Example ends here:
int MinCost ( String str1 , String str2 , int n ) {
  int cost = 0 ;
  char [ ] tmp = str1 . toCharArray ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( tmp [ i ] != str2 [ i ] ) {
      if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) {
        Arrays . swap ( tmp , i , i + 1 ) ;
        cost ++ ;
      }
      else {
        cost ++ ;
      }
    }
  }
  return cost ;
}

***Example ends here:
boolean isValidNum ( String x ) {
  Map < Integer , Integer > mp = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < x . length ( ) ;
  i ++ ) {
    if ( mp . containsKey ( x . charAt ( i ) - '0' ) ) {
      return false ;
    }
    else if ( x . charAt ( i ) - '0' > 5 ) {
      return false ;
    }
    else {
      mp . put ( x . charAt ( i ) - '0' , 1 ) ;
    }
  }
  return true ;
}

***Example ends here:
int MinimizeDiff ( int [ ] arr , int n , int k ) {
  int max = Arrays . binarySearch ( arr , arr . length - 1 ) ;
  int min = Arrays . binarySearch ( arr , arr . length - 1 ) ;
  if ( max - min <= k ) {
    return max - min ;
  }
  int avg = ( max + min ) / 2 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( arr [ i ] > avg ) {
      arr [ i ] -= k ;
    }
    else {
      arr [ i ] += k ;
    }
  }
  max = Arrays . binarySearch ( arr , arr . length - 1 ) ;
  min = Arrays . binarySearch ( arr , arr . length - 1 ) ;
  return max - min ;
}

***Example ends here:
int getMinCost ( int [ ] arr , int n ) {
  int minEle = Arrays . binarySearch ( arr , 0 ) ;
  return minEle * ( n - 1 ) ;
}

***Example ends here:
boolean possibility ( HashMap < Integer , Integer > m , int length , String s ) {
  int count_odd = 0 ;
  for ( int i = 0 ;
  i < length ;
  i ++ ) {
    if ( m . get ( s . charAt ( i ) - '0' ) & 1 != 0 ) count_odd ++ ;
    if ( count_odd > 1 ) return false ;
  }
  return true ;
}

***Example ends here:
int minimumCostOfBreaking ( int [ ] x , int [ ] y , int m , int n ) {
  int res = 0 ;
  Arrays . sort ( x ) ;
  Arrays . sort ( y ) ;
  int hzntl = 1 , vert = 1 ;
  int i = 0 , j = 0 ;
  while ( i < m && j < n ) {
    if ( x [ i ] > y [ j ] ) {
      res += x [ i ] * vert ;
      hzntl ++ ;
      i ++ ;
    }
    else {
      res += y [ j ] * hzntl ;
      vert ++ ;
      j ++ ;
    }
  }
  int total = 0 ;
  while ( i < m ) total += x [ i ++ ] ;
  res += total * vert ;
  total = 0 ;
  while ( j < n ) total += y [ j ++ ] ;
  res += total * hzntl ;
  return res ;
}

***Example ends here:
int FindMaximumScore ( int [ ] a , int n ) {
  HashMap < Integer , Integer > freq = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( freq . containsKey ( a [ i ] ) ) freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ;
    else freq . put ( a [ i ] , 1 ) ;
  }
  int [ ] dp = new int [ Math . max ( a . length + 1 , n ) ] ;
  dp [ 0 ] = 0 ;
  dp [ 1 ] = freq . get ( 1 ) ;
  for ( int i = 2 ;
  i < dp . length ;
  i ++ ) dp [ i ] = Math . max ( dp [ i - 1 ] , dp [ i - 2 ] + freq . get ( i ) * i ) ;
  return dp [ dp . length - 1 ] ;
}

***Example ends here:
int CountWays ( String s , String t , int k , int mod ) {
  int n = s . length ( ) ;
  int a = 0 , b = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    String p = s . substring ( i , n - i ) + s . substring ( 0 , i ) ;
    if ( p . equals ( t ) ) a ++ ;
    else b ++ ;
  }
  int [ ] dp1 = new int [ k + 1 ] , dp2 = new int [ k + 1 ] ;
  if ( s . equals ( t ) ) {
    dp1 [ 0 ] = 1 ;
    dp2 [ 0 ] = 0 ;
  }
  else {
    dp1 [ 0 ] = 0 ;
    dp2 [ 0 ] = 1 ;
  }
  for ( int i = 1 ;
  i <= k ;
  i ++ ) {
    dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ;
    dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ;
  }
  return dp1 [ k ] ;
}

***Example ends here:
int FindSubarraySum ( int [ ] arr , int n , int k ) {
  HashMap < Integer , Integer > prevSum = new HashMap < > ( ) ;
  int res = 0 ;
  int currSum = 0 ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    currSum += arr [ i ] ;
    if ( currSum == k ) res ++ ;
    if ( prevSum . containsKey ( currSum - k ) ) res += prevSum . get ( currSum - k ) ;
    prevSum . put ( currSum , currSum ) ;
  }
  return res ;
}

***Example ends here:
int MaximumOccurrence ( String s ) {
  int n = s . length ( ) ;
  Map < String , Integer > freq = new HashMap < String , Integer > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    String temp = s . substring ( i , i + 1 ) ;
    freq . put ( temp , 1 ) ;
  }
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    for ( int j = i + 1 ;
    j < n ;
    j ++ ) {
      String temp = s . substring ( i , i + 1 ) ;
      freq . put ( temp , 1 ) ;
    }
  }
  int answer = Integer . MIN_VALUE ;
  for ( Map . Entry < String , Integer > entry : freq . entrySet ( ) ) answer = Math . max ( answer , entry . getValue ( ) ) ;
  return answer ;
}

***Example ends here:
int CountCharacters ( List < String > strings , String chars ) {
  int res = 0 ;
  HashMap < Character , Integer > freq = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < chars . length ( ) ;
  i ++ ) freq . put ( chars . charAt ( i ) , 1 ) ;
  for ( String st : strings ) {
    boolean flag = true ;
    for ( char c : st . toCharArray ( ) ) {
      if ( freq . get ( c ) == null ) {
        flag = false ;
        break ;
      }
    }
    if ( flag ) res += st . length ( ) ;
  }
  return res ;
}

***Example ends here:
int DistinctSubstring ( String p , String q , int k , int n ) {
  HashSet < String > ss = new HashSet < String > ( ) ;
  for ( int i = 0 ;
  i < n ;
  ++ i ) {
    int sum = 0 ;
    String s = "" ;
    for ( int j = i ;
    j < n ;
    ++ j ) {
      int pos = p . charAt ( j ) - 'a' ;
      sum += q . charAt ( pos ) - '0' ;
      s += p . charAt ( j ) ;
      if ( sum <= k ) ss . add ( s ) ;
      else break ;
    }
  }
  return ss . size ( ) ;
}

***Example ends here:
int UniqueMorseRep ( String [ ] arr ) {
  String [ ] morseCode = new String [ ] {
    ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "-.." , "...." , ".." , ".---" , "-.-" , ".-.." , "--" , "-." , "-.-." , "--.-" , ".-." , "..." , "-" , "..-" , "..-" , ".--" , "-..-" , "-..." }
    ;
    HashSet < String > st = new HashSet < String > ( ) ;
    int n = arr . length ;
    for ( int i = 0 ;
    i < n ;
    i ++ ) {
      String temp = "" ;
      int m = arr [ i ] . length ( ) ;
      for ( int j = 0 ;
      j < m ;
      j ++ ) temp += morseCode [ arr [ i ] . charAt ( j ) - 'a' ] ;
      st . add ( temp ) ;
    }
    return st . size ( ) ;
  }
  
***Example ends here:
int CountSubstrings ( String st , int k ) {
  int n = st . length ( ) ;
  int answer = 0 ;
  HashMap < Character , Integer > map = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < k ;
  i ++ ) {
    if ( map . containsKey ( st . charAt ( i ) ) ) map . put ( st . charAt ( i ) , 1 ) ;
    else map . get ( st . charAt ( i ) ) ++ ;
  }
  if ( map . size ( ) == k ) answer ++ ;
  for ( int i = k ;
  i < n ;
  i ++ ) {
    if ( map . containsKey ( st . charAt ( i ) ) ) map . put ( st . charAt ( i ) , 1 ) ;
    else map . get ( st . charAt ( i ) ) ++ ;
    map . get ( st . charAt ( i - k ) ) -- ;
    if ( map . get ( st . charAt ( i - k ) ) == 0 ) map . remove ( st . charAt ( i - k ) ) ;
    if ( map . size ( ) == k ) answer ++ ;
  }
  return answer ;
}

***Example ends here:
boolean canConstruct ( String s , int k ) {
  Map < Integer , Integer > m = new HashMap < > ( ) ;
  int i = 0 , j = 0 , p = 0 ;
  if ( s . length ( ) == k ) {
    return true ;
  }
  for ( i = 0 ;
  i < s . length ( ) ;
  i ++ ) {
    m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ;
  }
  if ( k > s . length ( ) ) {
    return false ;
  }
  else {
    for ( Map . Entry < Integer , Integer > h : m . entrySet ( ) ) {
      if ( h . getValue ( ) % 2 != 0 ) {
        p = p + 1 ;
      }
    }
  }
  if ( k < p ) {
    return false ;
  }
  return true ;
}

***Example ends here:
boolean equalIgnoreCase ( String str1 , String str2 ) {
  return str1 == null ? str2 == null : str1 . equalsIgnoreCase ( str2 ) ;
}

***Example ends here:
int FindLongestSub ( String bin ) {
  int n = bin . length ( ) , i ;
  int sum = 0 ;
  HashMap < Integer , Integer > prevSum = new HashMap < > ( ) ;
  int maxLen = 0 ;
  for ( i = 0 ;
  i < n ;
  i ++ ) {
    if ( bin . charAt ( i ) == '1' ) sum ++ ;
    else sum -- ;
    if ( sum > 0 ) maxLen = i + 1 ;
    else if ( sum <= 0 ) {
      if ( prevSum . containsKey ( sum - 1 ) ) {
        int currLen = i - prevSum . get ( sum - 1 ) ;
        maxLen = Math . max ( maxLen , currLen ) ;
      }
    }
    if ( prevSum . containsKey ( sum ) ) prevSum . put ( sum , i ) ;
  }
  return maxLen ;
}

***Example ends here:
boolean hasAllCodes ( String s , int k ) {
  HashSet < String > us = new HashSet < String > ( ) ;
  for ( int i = 0 ;
  i + k <= s . length ( ) ;
  i ++ ) us . add ( s . substring ( i , i + k ) ) ;
  return us . size ( ) == 1 << k ;
}

***Example ends here:
boolean checkPalin ( String word ) {
  int n = word . length ( ) ;
  Arrays . sort ( word . toCharArray ( ) ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ , n -- ) {
    if ( word . charAt ( i ) != word . charAt ( n - 1 ) ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
String Convert ( String st ) {
  StringBuilder w = new StringBuilder ( ) , z = new StringBuilder ( ) ;
  st = st . toUpperCase ( ) ;
  w . append ( " " ) ;
  for ( int i = 0 ;
  i < st . length ( ) ;
  i ++ ) {
    char ch = st . charAt ( i ) ;
    if ( ch != ' ' ) w . append ( ch ) ;
    else {
      z . append ( Character . toLowerCase ( w . charAt ( 0 ) ) ) . append ( w . substring ( 1 ) ) . append ( " " ) ;
      w = new StringBuilder ( ) ;
    }
  }
  return z . toString ( ) ;
}

***Example ends here:
int MaxLines ( int n , int [ ] x1 , int [ ] y1 , int [ ] x2 , int [ ] y2 ) {
  HashSet < Double > s = new HashSet < Double > ( ) ;
  double slope ;
  for ( int i = 0 ;
  i < n ;
  ++ i ) {
    if ( x1 [ i ] == x2 [ i ] ) slope = Integer . MAX_VALUE ;
    else slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ;
    s . add ( slope ) ;
  }
  return s . size ( ) ;
}

***Example ends here:
HashMap < Integer , Integer > primeFactor ( int n ) {
  HashMap < Integer , Integer > primef = new HashMap < > ( ) ;
  while ( n % 2 == 0 ) {
    if ( primef . containsKey ( 2 ) ) primef . put ( 2 , 1 ) ;
    else primef . put ( 2 , 1 ) ;
    n /= 2 ;
  }
  for ( int i = 3 ;
  i <= Math . sqrt ( n ) ;
  i ++ ) {
    while ( n % i == 0 ) {
      if ( primef . containsKey ( i ) ) primef . put ( i , 1 ) ;
      else primef . put ( i , 1 ) ;
      n /= i ;
    }
  }
  if ( n > 2 ) primef . put ( n , 1 ) ;
  return primef ;
}

***Example ends here:
String isDivisibleByDivisor ( int s , int d ) {
  s %= d ;
  HashSet < Integer > hashMap = new HashSet < > ( ) ;
  hashMap . add ( s ) ;
  for ( int i = 0 ;
  i <= d ;
  i ++ ) {
    s += s % d ;
    s %= d ;
    if ( hashMap . contains ( s ) ) {
      if ( s == 0 ) {
        return "Yes" ;
      }
      return "No" ;
    }
    else {
      hashMap . add ( s ) ;
    }
  }
  return "Yes" ;
}

***Example ends here:
boolean OddSum ( int [ ] a , int n , int k ) {
  HashSet < Integer > odd = new HashSet < > ( ) ;
  HashSet < Integer > even = new HashSet < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) {
    if ( a [ i ] % 2 == 0 ) even . add ( a [ i ] ) ;
    else odd . add ( a [ i ] ) ;
  }
  if ( odd . size ( ) >= k ) return true ;
  boolean flag = false ;
  for ( int i = 1 ;
  i < k ;
  i += 2 ) {
    int needed = k - i ;
    if ( needed <= even . size ( ) ) return true ;
  }
  return flag ;
}

***Example ends here:
int DayOfYear ( String date ) {
  int [ ] days = {
    31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 }
    ;
    int year = Integer . parseInt ( date . substring ( 0 , 4 ) ) ;
    int month = Integer . parseInt ( date . substring ( 5 , 2 ) ) ;
    int day = Integer . parseInt ( date . substring ( 8 ) ) ;
    if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) ++ day ;
    while ( month > 1 ) {
      day = day + days [ month - 2 ] ;
      -- month ;
    }
    return day ;
  }
  
***Example ends here:
boolean isPerfectSquare ( int [ ] arr , int n ) {
  HashMap < Integer , Integer > umap = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) umap . put ( arr [ i ] , ++ i ) ;
  for ( Iterator < Integer > itr = umap . values ( ) . iterator ( ) ;
  itr . hasNext ( ) ;
  ) {
    if ( itr . next ( ) % 2 == 1 ) {
      return false ;
    }
  }
  return true ;
}

***Example ends here:
int MinMoves ( int n ) {
  String s = String . valueOf ( n ) ;
  int ans = Integer . MAX_VALUE ;
  int length = s . length ( ) ;
  for ( int i = 0 ;
  i < length ;
  ++ i ) {
    for ( int j = 0 ;
    j < length ;
    ++ j ) {
      if ( i == j ) {
        continue ;
      }
      String t = s ;
      int cur = 0 ;
      for ( int k = i ;
      k < length - 1 ;
      ++ k ) {
        swap ( t , k , cur ) ;
        ++ cur ;
      }
      for ( int k = j - ( j > i ) ;
      k < length - 2 ;
      ++ k ) {
        swap ( t , k , cur + 1 ) ;
        ++ cur ;
      }
      int pos = - 1 ;
      for ( int k = 0 ;
      k < length ;
      ++ k ) {
        if ( t . charAt ( k ) != '0' ) {
          pos = k ;
          break ;
        }
      }
      for ( int k = pos ;
      k > 0 ;
      -- k ) {
        swap ( t , k , cur - 1 ) ;
        ++ cur ;
      }
      int nn = Integer . parseInt ( t ) ;
      if ( nn % 25 == 0 ) {
        ans = Math . min ( ans , cur ) ;
      }
    }
  }
  if ( ans == Integer . MAX_VALUE ) {
    return - 1 ;
  }
  return ans ;
}

***Example ends here:
int minimumOperations ( int [ ] a , int n ) {
  HashMap < Integer , Integer > mp = new HashMap < > ( ) ;
  for ( int i = 0 ;
  i < n ;
  i ++ ) mp . put ( a [ i ] , 1 ) ;
  int count = 0 ;
  for ( Entry < Integer , Integer > entry : mp . entrySet ( ) ) {
    if ( entry . getValue ( ) > 1 ) count += entry . getValue ( ) - 1 ;
  }
  return count ;
}

***Example ends here:
int KaprekarRec ( int n , int prev ) {
  if ( n == 0 ) {
    return 0 ;
  }
  prev = n ;
  int [ ] digits = new int [ 4 ] ;
  for ( int i = 0 ;
  i < 4 ;
  i ++ ) {
    digits [ i ] = n % 10 ;
    n = n / 10 ;
  }
  Arrays . sort ( digits ) ;
  int asc = 0 ;
  for ( int i = 0 ;
  i < 4 ;
  i ++ ) {
    asc = asc * 10 + digits [ i ] ;
  }
  Arrays . sort ( digits ) ;
  int desc = 0 ;
  for ( int i = 3 ;
  i >= 0 ;
  i -- ) {
    desc = desc * 10 + digits [ i ] ;
  }
  int diff = Math . abs ( asc - desc ) ;
  if ( diff == prev ) {
    return diff ;
  }
  return KaprekarRec ( diff , prev ) ;
}

***Example ends here:
String FractionToDecimal ( int numr , int denr ) {
  String res = "" ;
  Map < Integer , Integer > mp = new HashMap < > ( ) ;
  int rem = numr % denr ;
  while ( rem != 0 && mp . containsKey ( rem ) == false ) {
    mp . put ( rem , res . length ( ) ) ;
    rem = rem * 10 ;
    int res_part = rem / denr ;
    res += Integer . toString ( res_part ) ;
    rem = rem % denr ;
  }
  if ( rem == 0 ) {
    return "" ;
  }
  if ( mp . containsKey ( rem ) ) {
    return res . substring ( mp . get ( rem ) ) ;
  }
  return "" ;
}

***Example ends here:
boolean isFancy ( String num ) {
  Map < Character , Character > fp = new HashMap < > ( ) ;
  fp . put ( '0' , '0' ) ;
  fp . put ( '1' , '1' ) ;
  fp . put ( '6' , '9' ) ;
  fp . put ( '8' , '8' ) ;
  fp . put ( '9' , '6' ) ;
  int n = num . length ( ) ;
  int l = 0 , r = n - 1 ;
  while ( l <= r ) {
    if ( fp . get ( num . charAt ( l ) ) == null || fp . get ( num . charAt ( l ) ) != num . charAt ( r ) ) {
      return false ;
    }
    l ++ ;
    r -- ;
  }
  return true ;
}

***Example ends here:
double DistinctOddRatio ( int [ ] numbers ) {
  HashSet < Integer > distinct_numbers = new HashSet < > ( numbers ) ;
  int distinct_count = Ranges . distance ( distinct_numbers ) ;
  int distinct_odd_count = Ranges . distance ( distinct_numbers | Views . filter ( n -> n % 2 == 1 ) ) ;
  return ( double ) distinct_odd_count / distinct_count ;
}

***Example ends here:
int CompareSum ( int [ ] numbers , String [ ] words ) {
  int intSum = Arrays . stream ( numbers ) . mapToInt ( w -> w . length ) . sum ( ) ;
  int [ ] tmp = words . stream ( ) . mapToInt ( w -> w . length ) . toArray ( ) ;
  int wordLengthSum = Arrays . stream ( tmp ) . mapToInt ( w -> w . length ) . sum ( ) ;
  if ( intSum < wordLengthSum ) {
    return - 1 ;
  }
  if ( intSum > wordLengthSum ) {
    return 1 ;
  }
  return 0 ;
}

***Example ends here:
boolean allLongerThan ( List < String > shortWords , List < String > longWords ) {
  int maxOfShort = Ranges . max ( shortWords | Views . transform ( new Function < String , Integer > ( ) {
    @ Override public Integer apply ( String w ) {
      return w . length ( ) ;
    }
  }
  ) ) ;
  int minOfLong = Ranges . min ( longWords | Views . transform ( new Function < String , Integer > ( ) {
    @ Override public Integer apply ( String w ) {
      return w . length ( ) ;
    }
  }
  ) ) ;
  return minOfLong > maxOfShort ;
}

***Example ends here:
int CompareOddEvenRange ( int [ ] numbers ) {
  int rangeOdd = Ranges . max ( numbers | Views . filter ( n -> n % 2 == 1 ) ) - Ranges . min ( numbers | Views . filter ( n -> n % 2 == 1 ) ) ;
  int rangeEven = Ranges . max ( numbers | Views . filter ( n -> n % 2 == 0 ) ) - Ranges . min ( numbers | Views . filter ( n -> n % 2 == 0 ) ) ;
  if ( rangeOdd < rangeEven ) return - 1 ;
  if ( rangeOdd > rangeEven ) return 1 ;
  return 0 ;
}

***Example ends here:
double AverageDistinctLength ( String [ ] words ) {
  HashSet < String > s = new HashSet < String > ( words ) ;
  List < String > distinct_words = new ArrayList < String > ( s ) ;
  Set < String > distinct_size = distinct_words . stream ( ) . map ( w -> w . length ( ) ) . collect ( Collectors . toSet ( ) ) ;
  double average_len = ! distinct_size . isEmpty ( ) ? ( double ) reduce ( distinct_size . toArray ( new String [ distinct_size . size ( ) ] ) ) / Ranges . distance ( distinct_size ) : 0 ;
  return average_len ;
}

***Example ends here:
int WithDrawBalance ( int start , int [ ] withdrawals ) {
  int end = Arrays . stream ( withdrawals ) . mapToInt ( balance -> balance - nextWithdrawal ) . sum ( ) ;
  return end ;
}

***Example ends here:
String FirstShortAndStartsWithO ( List < String > words ) {
  List < String > matchedView = words . stream ( ) . filter ( w -> w . length ( ) < 5 ) . collect ( Collectors . toList ( ) ) ;
  String matchedElement = matchedView . isEmpty ( ) ? "" : matchedView . get ( 0 ) ;
  return matchedElement ;
}

***Example ends here:
int bigNumberAtIndex ( int [ ] numbers , int index ) {
  List < Integer > matchedView = Arrays . stream ( numbers ) . filter ( n -> n > 5 ) . collect ( Collectors . toList ( ) ) ;
  int targetNum = matchedView . get ( 0 ) ;
  return targetNum ;
}

***Example ends here:
boolean containsSquareInRange ( int rangeStart , int rangeLength ) {
  boolean containsSquare = Ranges . anyOf ( Views . iota ( rangeStart , rangeStart + rangeLength ) , n -> Math . pow ( ( int ) Math . sqrt ( n ) , 2 ) == n ) ;
  return containsSquare ;
}

***Example ends here:
HashMap < Integer , List < Integer >> GroupNumbersByMod ( List < Integer > numbers , int mod ) {
  HashMap < Integer , List < Integer >> numberGroups = new HashMap < > ( ) ;
  for ( int n : numbers ) {
    int key = n % mod ;
    numberGroups . put ( key , new ArrayList < > ( ) ) ;
  }
  return numberGroups ;
}

***Example ends here:
HashMap < Character , List < String >> GroupWordsByFirstChar ( List < String > words ) {
  HashMap < Character , List < String >> wordGroups = new HashMap < > ( ) ;
  for ( String word : words ) wordGroups . put ( word . charAt ( 0 ) , new ArrayList < > ( ) ) ;
  return wordGroups ;
}

***Example ends here:
String [ ] OrderByLengthAndDescending ( String [ ] words ) {
  String [ ] sortedWords = words ;
  Arrays . sort ( sortedWords , new Comparator < String > ( ) {
    public int compare ( String o1 , String o2 ) {
      if ( o1 . length ( ) == o2 . length ( ) ) {
        return o1 . compareTo ( o2 ) ;
      }
      return o1 . length ( ) - o2 . length ( ) ;
    }
  }
  ) ;
  return sortedWords ;
}

***Example ends here:
String [ ] OrderFirstCharDescendingReverse ( String [ ] words ) {
  List < String > sortedWords = new ArrayList < String > ( words ) ;
  Collections . sort ( sortedWords , new Comparator < String > ( ) {
    public int compare ( String o1 , String o2 ) {
      if ( o1 . charAt ( 0 ) == o2 . charAt ( 0 ) ) {
        return o1 . compareTo ( o2 ) ;
      }
      return o1 . compareTo ( o2 ) ;
    }
  }
  ) ;
  Collections . reverse ( sortedWords ) ;
  return sortedWords . toArray ( new String [ sortedWords . size ( ) ] ) ;
}

***Example ends here:
int [ ] getSubListOfNegative ( int [ ] numbers , int start , int length ) {
  int [ ] matchedView = numbers . length | Views . drop ( start ) | Views . filter ( n -> n < 0 ) | Views . take ( length ) ;
  int [ ] subList = new int [ matchedView . length ] ;
  Ranges . copy ( matchedView , subList ) ;
  return subList ;
}

***Example ends here:
int [ ] getPositiveSequence ( int [ ] numbers ) {
  int [ ] matchedView = numbers | Views . dropWhile ( new int [ ] {
    0 }
    ) | Views . takeWhile ( new int [ ] {
      1 }
      ) ;
      int [ ] subSequence = new int [ matchedView . length ] ;
      Ranges . copy ( matchedView , subSequence ) ;
      return subSequence ;
    }
    
***Example ends here:
int [ ] getLargerThanIndexSequence ( int [ ] numbers ) {
  int [ ] matchedView = Views . iota ( 0 , ( int ) numbers . length ) | Views . dropWhile ( new int [ ] {
    numbers [ n ] }
    ) | Views . takeWhile ( new int [ ] {
      numbers [ n ] }
      ) | Views . transform ( new int [ ] {
        numbers [ n ] }
        ) ;
        int [ ] subSequence = new int [ matchedView . length ] ;
        Ranges . copy ( matchedView , subSequence ) ;
        return subSequence ;
      }
      
***Example ends here:
String [ ] rearrangeWordByIndexes ( String [ ] words , int [ ] indexes ) {
  List < Integer > newIndexes = indexes . stream ( ) . filter ( n -> n >= words . length ) . collect ( Collectors . toList ( ) ) ;
  List < Integer > matchedView = newIndexes . stream ( ) . filter ( n -> n % words . length ) . collect ( Collectors . toList ( ) ) ;
  String [ ] newWords = new String [ matchedView . size ( ) ] ;
  Arrays . fill ( newWords , " " ) ;
  return newWords ;
}

***Example ends here:
String [ ] getWordsUpperLower ( String [ ] words ) {
  List < String > matchedView = words . stream ( ) . map ( w -> w . toUpperCase ( ) ) . collect ( Collectors . toList ( ) ) ;
  String [ ] upper = new String [ words . length ] ;
  String [ ] lower = new String [ words . length ] ;
  for ( int i = 0 ;
  i < words . length ;
  i ++ ) {
    upper [ i ] = w ;
    lower [ i ] = w ;
  }
  Arrays . sort ( upper ) ;
  Arrays . sort ( lower ) ;
  return new String [ ] {
    upper , lower }
    ;
  }
  
***Example ends here:
boolean selectIfInPlace ( int [ ] numbers ) {
  int [ ] matchedView = Views . iota ( 0 , ( int ) numbers . length ) . stream ( ) . mapToInt ( n -> numbers [ n ] == n ) . toArray ( ) ;
  boolean [ ] numsInPlace = new boolean [ matchedView . length ] ;
  Ranges . copy ( matchedView , numsInPlace ) ;
  return numsInPlace [ 0 ] ;
}

***Example ends here:
int [ ] selectPairs ( int [ ] numbers_a , int [ ] numbers_b ) {
  int [ ] matched_view = numbers_a . stream ( ) . mapToInt ( a -> numbers_b . stream ( ) . filter ( b -> a < b ) . collect ( Collectors . toList ( ) ) ) . toArray ( int [ ] :: new ) ;
  int [ ] pairs = new int [ matched_view . length ] ;
  Ranges . copy ( matched_view , pairs ) ;
  return pairs ;
}

***Example ends here:
String [ ] StringCrossJoin ( String [ ] endWords , String [ ] beginWords ) {
  List < String > matchedView = beginWords . stream ( ) . map ( b -> endWords . stream ( ) . map ( b -> b [ 0 ] ) . collect ( Collectors . toList ( ) ) ) . collect ( Collectors . toList ( ) ) ;
  String [ ] crossStrings = new String [ matchedView . size ( ) ] ;
  Ranges . copy ( matchedView , crossStrings ) ;
  return crossStrings ;
}

***Example ends here:
int elementContainSubword ( List < String > words , String subword ) {
  if ( Ranges . allOf ( words | Views . take ( 5 ) , new Predicate < String > ( ) {
    @ Override public boolean apply ( String w ) {
      return w . contains ( subword ) ;
    }
  }
  ) ) {
    return 1 ;
  }
  if ( Ranges . anyOf ( words | Views . take ( 5 ) , new Predicate < String > ( ) {
    @ Override public boolean apply ( String w ) {
      return w . contains ( subword ) ;
    }
  }
  ) ) {
    return 0 ;
  }
  return - 1 ;
}

***Example ends here:
int [ ] concatLargeNumbers ( int [ ] numbers_a , int [ ] numbers_b , int flag ) {
  int [ ] large_numbers_a = numbers_a . clone ( ) ;
  int [ ] large_numbers_b = numbers_b . clone ( ) ;
  Arrays . fill ( large_numbers_a , flag ) ;
  Arrays . fill ( large_numbers_b , flag ) ;
  int [ ] all_numbers = new int [ large_numbers_a . length + large_numbers_b . length ] ;
  Arrays . fill ( all_numbers , flag ) ;
  System . arraycopy ( large_numbers_a , 0 , all_numbers , 0 , large_numbers_a . length ) ;
  System . arraycopy ( large_numbers_b , 0 , all_numbers , large_numbers_b . length , large_numbers_a . length ) ;
  return all_numbers ;
}

***Example ends here:
int DotProduct ( int [ ] vectorA , int [ ] vectorB ) {
  int dotProduct = innerProduct ( vectorA , vectorB , 0 ) ;
  return dotProduct ;
}

***Example ends here:
int [ ] setDifference ( int [ ] setA , int [ ] setB ) {
  int [ ] difference = new int [ setA . length ] ;
  Arrays . sort ( setA ) ;
  Arrays . sort ( setB ) ;
  setSymmetricDifference ( setA , setB , difference ) ;
  return difference ;
}

***Example ends here:
