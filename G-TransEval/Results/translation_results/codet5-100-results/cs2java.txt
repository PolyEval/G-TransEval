int GreatestCommonDivisor ( int a , int b ) { if ( a == 0 || b == 0 ) { return a + b ; } if ( a == b ) { return a ; } if ( a > b ) { return GreatestCommonDivisor ( a % b , b ) ; } else { return GreatestCommonDivisor ( a , b % a ) ; } }
int LargestDivisor ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { return n / i ; } } return 1 ; }
boolean IsPrime ( int n ) { if ( n < 2 ) { return false ; } for ( int k = 2 ; k < n ; k ++ ) { if ( n % k == 0 ) { return false ; } } return true ; }
int FizzBuzz ( int n ) { int count = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 11 == 0 || i % 13 == 0 ) { int q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) { count += 1 ; } q /= 10 ; } } } return count ; }
int PrimeFib ( int n ) { int f0 = 0 ; int f1 = 1 ; while ( n > 0 ) { int p = f0 + f1 ; boolean isPrime = p >= 2 ; for ( int i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { n -= 1 ; } f0 = f1 ; f1 = p ; } return f1 ; }
double TriangleArea ( double a , double h ) { return a * h / 2 ; }
int ModP ( int n , int p ) { int ret = 1 ; for ( int i = 0 ; i < n ; i ++ ) { ret = ( ret * 2 ) % p ; } return ret ; }
int Add ( int x , int y ) { return x + y ; }
int Fib ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return Fib ( n - 1 ) + Fib ( n - 2 ) ; }
int LargestPrimeFactor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) { while ( n % i == 0 && n > i ) { n /= i ; } } return n ; }
int SumToN ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { result += i ; } return result ; }
int Fibfib ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 0 ; } if ( n == 2 ) { return 1 ; } return Fibfib ( n - 1 ) + Fibfib ( n - 2 ) + Fibfib ( n - 3 ) ; }
boolean IsMultiplyPrime ( int a ) { int num = 0 ; for ( int i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) { a /= i ; num += 1 ; } } return num == 3 ; }
boolean IsSimplePower ( int x , int n ) { if ( n == 1 ) { return x == 1 ; } int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
int ChooseNum ( int x , int y ) { if ( x > y ) { return - 1 ; } if ( y % 2 == 0 ) { return y ; } if ( x == y ) { return - 1 ; } return y - 1 ; }
boolean IsEqualToSumEven ( int n ) { return n % 2 == 0 && n >= 8 ; }
int SpecialFactorial ( int n ) { int fact = 1 , specialFact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; specialFact *= fact ; } return specialFact ; }
int XOrY ( int n , int x , int y ) { boolean isPrime = n >= 2 ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { return x ; } return y ; }
boolean RightAngleTriangle ( int a , int b , int c ) { return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b ; }
int FastPow ( int n , int k ) { if ( k == 0 ) { return 1 ; } int temp = FastPow ( n , k / 2 ) ; if ( k % 2 == 0 ) { return temp * temp ; } else { return n * temp * temp ; } }
boolean IsPalin ( String s ) { int l = s . length ( ) / 2 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( s . length ( ) - i - 1 ) ) { return false ; } } return true ; }
int FindSum ( int n ) { int ans = 0 , temp = 0 ; for ( int i = 1 ; i <= n && temp < n ; i ++ ) { temp = i - 1 ; int num = 1 ; while ( temp < n ) { if ( temp + i <= n ) { ans += i * num ; } else { ans += ( n - temp ) * num ; } temp += i ; num ++ ; } } return ans ; }
int GetNextGap ( int gap ) { gap = gap * 10 / 13 ; if ( gap < 1 ) { return 1 ; } return gap ; }
int CountNonDecreasing ( int n ) { int k = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count /= i ; } return count ; }
int Power ( int x , int y ) { if ( y == 0 ) { return 1 ; } else if ( y % 2 == 0 ) { return Power ( x , y / 2 ) * Power ( x , y / 2 ) ; } else { return x * Power ( x , y / 2 ) * Power ( x , y / 2 ) ; } else { return x * Power ( x , y / 2 ) * Power ( x , y / 2 ) ; } }
double Power ( double x , int y ) { if ( y == 0 ) { return 1 ; } double temp = Power ( x , y / 2 ) ; if ( y % 2 == 0 ) { return temp * temp ; } else { if ( y > 0 ) { return x * temp * temp ; } else { return temp * temp / x ; } } }
int Multiply ( int x , int y ) { if ( y == 0 ) { return 0 ; } else if ( y > 0 ) { return x + Multiply ( x , y - 1 ) ; } else { return - Multiply ( x , - y ) ; } }
int Smallest ( int x , int y , int z ) { if ( y / x == 0 ) { return y / z == 0 ? y : z ; } return x / z == 0 ? x : z ; }
boolean IsPowerOfFour ( int n ) { if ( n == 0 ) { return false ; } while ( n != 1 ) { if ( n % 4 != 0 ) { return false ; } n = n / 4 ; } return true ; }
int ModInverse ( int a , int m ) { int m0 = m ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
int CntRotations ( String s , int n ) { String s2 = s + s ; int [ ] pre = new int [ 2 * n ] ; Arrays . fill ( pre , 1 ) ; int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) { pre [ i ] += pre [ i - 1 ] ; } if ( s2 [ i ] == 'a' || s2 [ i ] == 'e' || s2 [ i ] == 'i' || s2 [ i ] == 'o' || s2 [ i ] == 'u' ) { pre [ i ] ++ ; } } int ans = 0 ; for ( int i = n - 1 ; i < 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) { x1 -= pre [ l ] ; } int left = pre [ r ] ; if ( left > right ) { ans ++ ; } } return ans ; }
int BinomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) { k = n - k ; } for ( int i = 0 ; i < k ; ++ i ) { res *= n - i ; res /= i + 1 ; } return res ; }
boolean IsPrefix ( String temp , String s ) { if ( temp . length ( ) < s . length ( ) ) { return false ; } else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != temp . charAt ( i ) ) { return false ; } } return true ; } }
String LexicographicallySmallestString ( String s , int n ) { int lastZe = - 1 ; String ans = "" ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { lastZe = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i <= lastZe && s . charAt ( i ) == '0' ) { ans += s . charAt ( i ) ; } else if ( i > lastZe ) { ans += s . charAt ( i ) ; } } return ans ; }
int CalculateMax ( int n , int m , int k ) { int ans = - 1 ; int low = 0 , high = m ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int val = 0 ; int l = k - 1 ; int r = n - k ; val += mid ; if ( mid >= l ) { val += l * ( 2 * mid - l - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( l - mid ) ; } if ( mid >= r ) { val += r * ( 2 * mid - r - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( r - mid ) ; } if ( val <= m ) { ans = Math . max ( ans , mid ) ; low = mid + 1 ; } else { high = mid - 1 ; } } return ans ; }
int FindLength ( String s , char i , char j ) { char required = i ; int length = 0 ; for ( char curr : s ) { if ( curr == required ) { length += 1 ; if ( required == i ) { required = j  ; } else { required = i  ; } } } return length ; }
boolean CheckReverse ( int leftSum , int rightSum ) { int rev = 0 ; int temp = rightSum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp /= 10 ; } if ( rev == leftSum ) { return true ; } return false ; }
boolean isComposite ( int n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return false ; } if ( n % 2 == 0 || n % 3 == 0 ) { return true ; } for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return true ; } } return false ; }
int minDeletion ( String s ) { int n = s . length ( ) ; int firstIdx1 = - 1 ; int lastIdx0 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { firstIdx1 = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { lastIdx0 = i ; break ; } } if ( firstIdx1 == - 1 || lastIdx0 == - 1 ) { return 0 ; } int count1 = 0 , count0 = 0 ; for ( int i = 0 ; i < lastIdx0 ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count1 ++ ; } } for ( int i = firstIdx1 + 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count0 ++ ; } } return Math . min ( count0 , count1 ) ; }
int MinSteps ( String s , int n ) { int smaller , cost = 0 ; int f [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int currEle = s . charAt ( i ) - 'a' ; smaller = 0 ; for ( int j = 0 ; j <= currEle ; j ++ ) { if ( f [ j ] != 0 ) { smaller += f [ j ] ; } } if ( smaller == 0 ) { cost += i + 1 ; } else { cost += i - smaller + 1 ; } f [ s . charAt ( i ) - 'a' ] ++ ; } return cost ; }
int NumberOfWays ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 1 ; b < n ; b ++ ) { int c = n - ( a + b ) ; if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } } return count ; }
int SlopeOfNum ( String num , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( num . charAt ( i ) > num . charAt ( i - 1 ) && num . charAt ( i ) > num . charAt ( i + 1 ) ) { slope ++ ; } else if ( num . charAt ( i ) < num . charAt ( i - 1 ) && num . charAt ( i ) < num . charAt ( i + 1 ) ) { slope ++ ; } } return slope ; }
int MiddleOfThree ( int a , int b , int c ) { int x = a - b ; int y = b - c ; int z = a - c ; if ( x * y > 0 ) { return b ; } else if ( x * z > 0 ) { return c ; } else { return a ; } }
int CountMaxSetBits ( int left , int right ) { while ( ( left | ( left + 1 ) ) <= right ) { left |= left + 1 ; } return left ; }
int FindS ( int s ) { int l = 1 , r = ( s / 2 ) + 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) { return mid ; } else if ( sum > s ) { r = mid - 1 ; } else { l = mid + 1 ; } } return - 1 ; }
boolean Check ( String s ) { int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int ascii = s . charAt ( i ) ; if ( ascii < 96 || ascii > 122 ) { return false ; } sum += ascii ; if ( min > ascii ) { min = ascii ; } if ( max < ascii ) { max = ascii ; } } min -= 1 ; int eSum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == eSum ; }
int MinimumPossibleProduct ( int k ) { int res = 1 ; int r = ( 1 << k ) - 1 ; for ( int i = 0 ; i < k ; i ++ ) { res *= r - 1 ; } res *= r ; return res ; }
int FindInGrid ( int i , int j ) { if ( i == j ) { return i * i - ( i - 1 ) ; } else if ( i > j ) { if ( i % 2 == 0 ) { return i * i - ( j - 1 ) ; } else { return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } } else { if ( j % 2 == 0 ) { return ( j - 1 ) * ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; } else { return j * j - ( i - 1 ) ; } }
int FindMinOperationsReqEmpStr ( String s ) { int cntOne = 0 ; int cntZero = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { if ( cntOne != 0 ) { cntOne -- ; } cntZero ++ ; } else { if ( cntZero != 0 ) { cntZero -- ; } cntOne ++ ; } } return cntOne + cntZero ; }
boolean IsReachable ( int x1 , int y1 , int x2 , int y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) { x2 %= y2 ; } else { y2 %= x2 ; } } if ( x2 == x1 ) { return y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ; } else if ( y2 == y1 ) { return x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ; } else if ( y2 == y1 ) { return x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ; } else { return false ; } }
int FindMaxSoln ( int n , int x , int y ) { int ans = Integer . MIN_VALUE ; for ( int k = 0 ; k <= n ; k ++ ) { if ( k % x == y ) { ans = Math . max ( ans , k ) ; } } return ans >= 0 && ans <= n ? ans : - 1 ; }
int NumberOfPairs ( int n ) { int count = 0 ; int i = 1 , j = n - 1 ; while ( i < j ) { if ( i + j == n ) { count ++ ; } i ++ ; j -- ; } return count ; }
int MinChanges ( String s , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( s . charAt ( 0 ) != '1' ) { count ++ ; ones ++ ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { zeros ++ ; } else { ones ++ ; } if ( zeros > ones ) { zeros -- ; ones ++ ; count ++ ; } } return count ; }
int KVisibleFromLeft ( int n , int k ) { if ( n == k ) { return 1 ; } if ( k == 1 ) { int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { ans *= i ; } return ans ; } if ( n - 1 , k - 1 ) + ( n - 1 ) * KVisibleFromLeft ( n - 1 , k ) ; }
double Find ( int n , int sum ) { if ( sum > 6 * n || sum < n ) { return 0 ; } if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) { return 1.0 / 6 ; } else { return 0 ; } } double s = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) { s += Find ( n - 1 , sum - i ) / 6 ; } return s ; }
int BinCoff ( int n , int r ) { int val = 1 ; int i ; if ( r > n - r ) { r = n - r ; } for ( i = 0 ; i < r ; i ++ ) { val *= n - i ; val /= i + 1 ; } return val ; }
int GetMask ( int val ) { int mask = 0 ; if ( val == 0 ) { return 1 ; } while ( val > 0 ) { int d = val % 10 ; mask |= 1 << d ; val /= 10 ; } return mask ; }
int WaysToKAdjacentSetBits ( int n , int k , int currentIndex , int adjacentSetBits , int lastBit ) { if ( currentIndex == n ) { if ( adjacentSetBits == k ) { return 1 ; } return 0 ; } int noOfWays = 0 ; if ( lastBit == 1 ) { noOfWays += WaysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits + 1 , 1 ) ; noOfWays += WaysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } else if ( lastBit == 0 ) { noOfWays += WaysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 1 ) ; noOfWays += WaysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } return noOfWays ; }
int CheckFunc ( int i , int j , String st ) { if ( st [ i ] == '(' && st [ j ] == ')' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == '[' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '}' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '}' && st [ j ] == '}' ) { return 1 ; } if ( st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '}' ) { return 1 ; } if ( st [ i ] == '}' ) { return 1 ; } if ( st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '}' ) { return 1 ; } if ( st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '}' ) { return 1 ; } return 0 ; }
int FindGolomb ( int n ) { if ( n == 1 ) { return 1 ; } return 1 + FindGolomb ( n - FindGolomb ( n - 1 ) ) ) ; }
boolean AllOnes ( String s , int n ) { int co = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { co += s . charAt ( i ) == '1' ? 1 : 0 ; } return co == n ; }
int Pad ( int n ) { int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { pNext = pPrevPrev + pPrev ; pPrevPrev = pPrev ; pPrev = pCurr ; pCurr = pNext ; } return pNext ; }
int OddLengthPalindrome ( int k ) { int palin = k ; k = k / 10 ; while ( k > 0 ) { int rev = k % 10 ; palin = palin * 10 + rev ; k = k / 10 ; } return palin ; }
String ChangeString ( String s0 ) { char s [ ] = s0 . charAt ( 0 ) == '?' ) { s [ 0 ] = 'a' ; if ( s [ 0 ] == s [ 1 ] ) { s [ 0 ] ++ ; } } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == '?' ) { s [ i ] = 'a' ; if ( s [ i ] == s [ i - 1 ] ) { s [ i ] ++ ; } if ( s [ i ] == s [ i + 1 ] ) { s [ i ] ++ ; } if ( s [ i ] == s [ i - 1 ] ) { s [ i ] ++ ; } } if ( s [ n - 1 ] == '?' ) { s [ n - 1 ] = 'a' ; if ( s [ n - 1 ] == s [ n - 2 ] ) { s [ n - 1 ] ++ ; } } return new String ( s ) ; }
int TotalHammingDistance ( int n ) { int i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + n / i ; i = i * 2 ; } return sum ; }
int CheckBitonic ( String s ) { int i = 1 ; for ( ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i - 1 ) ) { continue ; } if ( s . charAt ( i ) <= s . charAt ( i - 1 ) ) { break ; } } if ( i == s . length ( ) - 1 ) { return 1 ; } int j = i + 1 ; for ( ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) < s . charAt ( j - 1 ) ) { continue ; } if ( s . charAt ( j ) >= s . charAt ( j - 1 ) ) { break ; } } i = j ; if ( i != s . length ( ) ) { return 0 ; } return 1 ; }
boolean EndsWith ( String str , String pat ) { int patLen = pat . length ( ) ; int strLen = str . length ( ) ; if ( patLen > strLen ) { return false ; } patLen -- ; strLen -- ; while ( patLen >= 0 ) { if ( pat . charAt ( patLen ) != str . charAt ( strLen ) ) { return false ; } patLen -- ; strLen -- ; } return true ; }
int GetSum ( int n , int d ) { if ( n < d ) { return 0 ; } while ( n % 10 != d ) { n -- ; } int k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
int BalancedStringBySwapping ( String s ) { int unbalancedPair = 0 ; for ( int i = 0 ; i < s . length ( ) ; ++ i ) { if ( unbalancedPair > 0 && s . charAt ( i ) == ']' ) { -- unbalancedPair ; } else if ( s . charAt ( i ) == '[' ) { ++ unbalancedPair ; } } return ( unbalancedPair + 1 ) / 2 ; }
int ComputeHash ( String s ) { int p = 31 ; long mod = ( long ) 1e9 + 7 ; long hashVal = 0 ; long mul = 1 ; for ( char ch : s ) { hashVal = ( hashVal + ( ch - 'a' + 1 ) * mul ) % mod ; mul = mul * p % mod ; } return ( int ) hashVal ; }
int CountOfSubstringWithOnlyOnes ( String s ) { int res = 0 , count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { count = s . charAt ( i ) == '1' ? count + 1 : 0 ; res = res + count ; } return res ; }
int Composite ( int n ) { int flag = 0 ; int c = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) { c += 1 ; } } if ( c >= 3 ) { flag = 1 ; } return flag ; }
boolean IsDivBySix ( String s , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += s . charAt ( i ) - 'a' + 1 ; } if ( sum % 3 != 0 ) { return false ; } int lastDigit = ( s . charAt ( n - 1 ) - 'a' + 1 ) % 10 ; if ( lastDigit % 2 != 0 ) { return false ; } return true ; }
boolean IsRedundantBraces ( String s ) { int a = 0 , b = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '(' && s . charAt ( i + 2 ) == ')' ) { return true ; } if ( s . charAt ( i ) == '*' || s . charAt ( i ) == '+' || s . charAt ( i ) == '-' || s . charAt ( i ) == '/' ) { a ++ ; } if ( s . charAt ( i ) == '(' ) { b ++ ; } } if ( b > a ) { return true ; } return false ; }
int CountSubStr ( String s , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 2 ; ) { if ( s . charAt ( i ) == '0' && s . charAt ( i + 1 ) == '1' && s . charAt ( i + 2 ) == '0' ) { count ++ ; i += 3 ; } else if ( s . charAt ( i ) == '1' && s . charAt ( i + 1 ) == '0' && s . charAt ( i + 2 ) == '1' ) { count ++ ; i += 3 ; } else { i ++ ; } } return count ; }
int PrefixOccurrences ( String s ) { char c = s . charAt ( 0 ) ; int countC = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == c ) { countC ++ ; } } return countC ; }
boolean IsValid ( String s , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) { return false ; } } return true ; }
int Count ( String s , int k ) { int n = s . length ( ) ; int d = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d += s . charAt ( i ) ; } if ( d % k == 0 ) { count += 1 ; } for ( int i = k ; i < n ; i ++ ) { int prev = s . charAt ( i - k ) ; d -= prev ; d += s . charAt ( i ) ; if ( d % k == 0 ) { count += 1 ; } } return count ; }
int FindSubstringCount ( String s ) { int result = 0 ; int n = s . length ( ) ;  int i = 0 ; while ( i < n - 1 ) { if ( s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) { result ++ ; while ( i < n - 1 && s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) { i ++ ; } } i ++ ; } return result ; }
boolean Find ( String s1 , String s2 ) { int len0 = s1 . length ( ) , len1 = s2 . length ( ) ; if ( len0 != len1 ) { return false ; } int [ ] d = new int [ len0 ] ; d [ 0 ] = s2 [ 0 ] - s1 . charAt ( 0 ) ; for ( int i = 1 ; i < len0 ; i ++ ) { if ( s1 . charAt ( i ) > s2 [ i ] ) { return false ; } else { d [ i ] = s2 [ i ] - s1 . charAt ( i ) ; } } for ( int i = 0 ; i < len0 - 1 ; i ++ ) { if ( d [ i ] < d [ i + 1 ] ) { return false ; } } return true ; }
boolean IsInGivenBase ( String s , int bas ) { if ( bas > 16 ) { return false ; } else if ( bas <= 10 ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( ! ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) ) { return false ; } } else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( ! ( ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) || ( s . charAt ( i ) >= 'A' && s . charAt ( i ) < 'A' + bas - 10 ) ) ) { return false ; } } return true ; }
int CountNonEmptySubstr ( String s ) { int n = s . length ( ) ; return n * ( n + 1 ) / 2 ; }
int EvenDecimalValue ( String s , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimalValue = 0 ; int powerOf2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimalValue += ( s . charAt ( k ) - '0' ) * powerOf2 ; powerOf2 *= 2 ; } if ( decimalValue % 2 == 0 ) { result ++ ; } } } return result ; }
int Calculate ( String s ) { int ans = 6 ; for ( int i = 0 ; i < 10 ; ++ i ) { for ( int j = 0 ; j < 10 ; ++ j ) { for ( int k = 0 ; k < 10 ; ++ k ) { for ( int l = 0 ; l < 10 ; ++ l ) { for ( int m = 0 ; m < 10 ; ++ m ) { for ( int n = 0 ; n < 10 ; ++ n ) { if ( i != s . charAt ( 0 ) - '0' ) { c ++ ; } if ( j != s . charAt ( 1 ) - '0' ) { c ++ ; } if ( k != s . charAt ( 2 ) - '0' ) { c ++ ; } if ( l != s . charAt ( 3 ) - '0' ) { c ++ ; } if ( n != s . charAt ( 5 ) - '0' ) { c ++ ; } if ( c < ans ) { ans = c ; } } } return ans ; }
int XorZero ( String s ) { int oneCount = 0 , zeroCount = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( s . charAt ( i ) == '1' ) { oneCount ++ ; } else zeroCount ++ ; if ( oneCount % 2 == 0 ) { return zeroCount ; } return oneCount ; }
String EvenLength ( String n ) { String res = n ; for ( int j = n . length ( ) - 1 ; j >= 0 ; -- j ) { res += n . charAt ( j ) ; } return res ; }
int CountSubstringWithEqualEnds ( String s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) { if ( s . charAt ( i ) == s . charAt ( j ) ) { result ++ ; } } return result ; }
double NormalSlope ( double a , double b , double x1 , double y1 ) { double g = a / 2 ; double f = b / 2 ; if ( g - x1 == 0 ) { return - 1 ; } double slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) { return - 2 ; } return slope ; }
boolean Orthogonality ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) { int dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) { return true ; } else { return false ; } }
double FindAreaShaded ( double a ) { double sqArea = a * a ; double semiCircleArea = 3.14 * ( a * a ) / 8 ; double shadedArea = 4 * semiCircleArea - sqArea ; return shadedArea ; }
int Factorial ( int a , int b ) { int res = 1 ; for ( int i = 1 ; i <= a + b ; i ++ ) { res = res * i ; } for ( int i = 1 ; i <= a ; i ++ ) { res = res / i ; } for ( int i = 1 ; i <= b ; i ++ ) { res = res / i ; } return res ; }
int FactorTree ( int n ) { int height = 0 ; while ( n > 1 ) { boolean flag = false ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( ! flag ) { break ; } } return height ; }
String FindIfPossible ( int n , int s , int x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) { return "Yes" ; } if ( n == 1 ) { if ( s == x ) { return "Yes" ; } else { return "No" ; } } if ( n == 2 ) { int c = ( s - x ) / 2 ; int a = c ; int b = c ; a = a + x ; if ( ( a ^ b ) == x ) { return "Yes" ; } else { return "No" ; } } } return "No" ; }
int MaximumTripletXor ( int a , int b , int c ) { int ans = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int cur = 1 << i ; if ( a >= cur ) { ans += cur ; a -= cur ; } else if ( b >= cur ) { ans += cur ; b -= cur ; } else if ( c >= cur ) { ans += cur ; c -= cur ; } } return ans ; }
int ItemType ( int n ) { int count = 0 ; int day = 1 ; while ( count + day * ( day + 1 ) / 2 < n ) { count += day * ( day + 1 ) / 2 ; day ++ ; } for ( int type = day ; type > 0 ; type -- ) { count += type ; if ( count >= n ) { return type ; } } return 0 ; }
int MaxGcdInRange ( int l , int r ) { int ans = 1 ; for ( int z = r ; z >= 1 ; z -- ) { if ( r / z - ( l - 1 ) / z > 1 ) { ans = z ; break ; } } return ans ; }
int SumOfDigits ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += n % 10 ; n = n / 10 ; } return sum ; }
boolean IsRepUnitNum ( int n , int b ) { int length = 0 ; int countOne = 0 ; while ( n != 0 ) { int r = n % b ; length ++ ; if ( r == 1 ) { countOne ++ ; } n = n / b ; } return countOne >= 3 && countOne == length ; }
boolean IsStraightLineNum ( int n ) { if ( n <= 99 ) { return false ; } String s = Integer . toString ( n ) ; int d = s [ 1 ] - s [ 0 ] ; for ( int i = 2 ; i < s . length ( ) ; i ++ ) if ( s . charAt ( i ) - s . charAt ( i - 1 ) != d ) { return false ; } return true ; }
int GetCount ( int d , int n ) { int no = n / d ; int result = no ; for ( int p = 2 ; p * p <= no ; ++ p ) { if ( no % p == 0 ) { while ( no % p == 0 ) no /= p ; result -= result / p ; } } if ( no > 1 ) { result -= result / no ; } return result ; }
boolean IsEvenParity ( int x ) { int parity = 0 ; while ( x != 0 ) { if ( x % 2 == 1 ) { parity ++ ; } x = x >> 1 ; } if ( parity % 2 == 0 ) { return true ; } else { return false ; } }
int IsPerfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) { sum = sum + i + n / i ; } else sum = sum + i ; } } if ( sum == n && n != 1 ) { return n ; } return 0 ; }
int LogAToBaseB ( int a , int b ) { return a > b - 1 ? 1 + LogAToBaseB ( a / b , b ) : 0 ; }
int UsingBinarySearch ( int start , int end , int n , int s ) { if ( start >= end ) { return start ; } int mid = start + ( end - start ) / 2 ; int totalSum = n * ( n + 1 ) / 2 ; int midSum = mid * ( mid + 1 ) / 2 ; if ( totalSum - midSum <= s ) { return UsingBinarySearch ( start , mid , n , s ) ; } return UsingBinarySearch ( mid + 1 , end , n , s ) ; }
String MinInt ( String s ) { char s1 [ ] = s . charAt ( 0 ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s1 [ i ] >= '5' ) { s1 [ i ] = ( char ) ( '9' - s1 [ i ] + '0' ) ; } } if ( s1 [ 0 ] == '0' ) { s1 [ 0 ] = '9' ; } return new String ( s1 ) ; }
int CountTriplets ( int a , int b , int c ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { for ( int k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) { ans ++ ; } } } return ans ; }
boolean TopsyTurvy ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '2' || s . charAt ( i ) == '4' || s . charAt ( i ) == '5' || s . charAt ( i ) == '6' || s . charAt ( i ) == '7' || s . charAt ( i ) == '9' ) { return false ; } } return true ; }
int SumOfLastDig ( int n , int m ) { int sum = 0 ; int k = n / m ; int [ ] arr = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ] ; } int rem = k % 10 ; int ans = k / 10 * sum ; for ( int i = 0 ; i < rem ; i ++ ) { ans += arr [ i ] ; } return ans ; }
int TotalPay ( int totalItems , int priceOfOneItem , int n , int m ) { int freeItems = 0 , actual = 0 ; freeItems = totalItems / ( n + m ) ; actual = totalItems - freeItems ; int amount = actual * priceOfOneItem ; return amount ; }
int MinOperations ( int x , int y , int p , int q ) { if ( y % x != 0 ) { return - 1 ; } int d = y / x ; int a = 0 ; while ( d % p == 0 ) { d /= p ; a += 1 ; } int b = 0 ; while ( d % q == 0 ) { d /= q ; b += 1 ; } if ( d != 1 ) { return - 1 ; } return a + b ; }
boolean IsMersenne ( int n ) { while ( n != 0 ) { int r = n % 2 ; if ( r == 0 ) { return false ; } n /= 2 ; } return true ; }
int FindThirdDigit ( int n ) { if ( n < 3 ) { return 0 ; } return ( n & 1 ) != 0 ? 1 : 6 ; }
boolean IsOddLength ( int num ) { int count = 0 ; while ( num > 0 ) { num /= 10 ; count ++ ; } if ( count % 2 != 0 ) { return true ; } return false ; }
boolean Check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return count > 1 ; }
int Bytes ( int kilobytes ) { int b = kilobytes * 1024 ; return b ; }
int OctahedralNum ( int n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
String CheckEqual ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != '1' && s . charAt ( i ) != '0' && s . charAt ( i ) != '8' ) { return "No" ; } } int start = 0 , end = s . length ( ) - 1 ; while ( start < end ) { if ( s . charAt ( start ) != s . charAt ( end ) ) { return "No" ; } start ++ ; end -- ; } return "Yes" ; }
boolean IsUndulating ( String n ) { if ( n . length ( ) <= 2 ) { return false ; } for ( int i = 2 ; i < n . length ( ) ; i ++ ) if ( n . charAt ( i - 2 ) != n . charAt ( i ) ) { return false ; } return true ; }
int FirstDigit ( int n ) { while ( n >= 10 ) { n /= 10 ; } return n ; }
int CountDigit ( int n ) { if ( n == 0 ) { return 0 ; } return 1 + CountDigit ( n / 10 ) ; }
boolean IsDivisibleBy5 ( String s ) { int n = s . length ( ) ; return s . charAt ( n - 1 ) - '0' == 0 || s . charAt ( n - 1 ) - '0' == 5 ; }
int Inv ( int a , int m ) { int m0 = m ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
boolean OnlyFirstAndLastAreSet ( int n ) { if ( n == 1 ) { return true ; } if ( n == 2 ) { return false ; } return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
int Divide ( int dividend , int divisor ) { int sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? - 1 : 1 ; dividend = Math . abs ( dividend ) ; divisor = Math . abs ( divisor ) ; int quotient = 0 ; long temp = 0 ; for ( int i = 31 ; i >= 0 ; -- i ) { if ( temp + ( ( long ) divisor << i ) <= dividend ) { temp += ( long ) divisor << i ; quotient |= 1 << i ; } } if ( sign == - 1 ) { quotient = - quotient ; } return quotient ; }
char FindProfession ( int level , int pos ) { if ( level == 1 ) { return 'e' ; } if ( FindProfession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) { return pos % 2 != 0 ? 'd' : 'e' ; } return pos % 2 != 0 ? 'e' : 'd' ; }
boolean HasCloseElements ( double numbers [ ] , double threshold ) { for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < numbers . size ( ) ; j ++ ) { double distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) return true ; } } return false ; }
double TruncateNumber ( double number ) { return number % 1.0 ; }
boolean BelowZero ( int operations [ ] ) { int balance = 0 ; for ( var op : operations ) { balance += op ; if ( balance < 0 ) { return true ; } } return false ; }
double MeanAbsoluteDeviation ( double numbers [ ] ) { double sumNum = 0 ; for ( var num : numbers ) { sumNum += num ; } double mean = sumNum / numbers . size ( ) ; double sumAbsDiff = 0 ; for ( var num : numbers ) { sumAbsDiff += Math . abs ( num - mean ) ; } return sumAbsDiff / numbers . size ( ) ; }
int Intersperse ( int numbers [ ] , int delimiter ) { int result [ ] = new int [ numbers . size ( ) ] ; if ( numbers . size ( ) == 0 ) { return result ; } for ( int i = 0 ; i < numbers . size ( ) - 1 ; i ++ ) { result . add ( numbers [ i ] ) ; result . add ( delimiter ) ; } result . add ( numbers [ ^ 1 ] ) ; return result ; }
int SumProduct ( int numbers [ ] ) { int sumValue = 0 ; int prodValue = 1 ; for ( int n : numbers ) { sumValue += n ; prodValue *= n ; } return new ArrayList < Integer > { sumValue , prodValue } ; }
void AllPrefixes ( String s ) { int result [ ] = new int [ s . length ( ) ] ; for ( int i = 1 ; i <= s . length ( ) ; i ++ ) { result [ i ] = s . charAt ( 0 , i ) ) ; } return result ; }
int ParseMusic ( String musicString ) { StringBuilder current = new StringBuilder ( ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i <= musicString . length ( ) ; i ++ ) { if ( i == musicString . length ( ) || musicString . charAt ( i ) == ' ' ) { if ( current . toString ( ) == "o" ) { result . add ( 4 ) ; } if ( current . toString ( ) == "o|" ) { result . add ( 2 ) ; } if ( current . toString ( ) == ".|" ) { result . add ( 1 ) ; } current . clear ( ) ; } else { current . append ( musicString . charAt ( i ) ) ; } } return result ; }
int Strlen ( String s ) { return s . length ( ) ; }
int Factorize ( int n ) { int factors [ ] = new int [ n . length ( ) ] ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n /= i ; factors . add ( i ) ; i -- ; } } return factors ; }
String Concatenate ( String strings [ ] ) { StringBuilder result = new StringBuilder ( ) ; for ( var s : strings ) { result . append ( s ) ; } return result . toString ( ) ; }
double GetPositive ( double l [ ] ) { int result [ ] = new double [ l . size ( ) ] ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( l . get ( i ) > 0 ) { result . add ( l . get ( i ) ) ; } } return result ; }
void SortEven ( double l [ ] ) { int evens [ ] = new int [ l . size ( ) ] ; for ( int i = 0 ; i < l . size ( ) ; i += 2 ) { evens [ i ] = l [ i ] ; } evens . sort ( ) ; List < double > result = new ArrayList < double > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 2 == 0 ) { result . add ( evens [ i / 2 ] ) ; } if ( i % 2 == 1 ) { result . add ( l [ i ] ) ; } } return result ; }
String DecodeCyclic ( String s ) { StringBuilder output = new StringBuilder ( ) ; int i = 0 ; while ( i <= s . length ( ) - 3 ) { String x = s . charAt ( i + 2 ) + s . charAt ( i , 2 ) ; output . append ( x ) ; i += 3 ; } return output . toString ( ) + s . charAt ( i ) ; }
int CarRaceCollision ( int n ) { return ( int ) Math . pow ( n , 2 ) ; }
int IncrList ( int l [ ] ) { int result [ ] = new int [ l . length ( ) ] ; for ( int i : l ) { result [ i + 1 ] = i + 1 ; } return result ; }
boolean PairsSumToZero ( int l [ ] ) { for ( int i = 0 ; i < l . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < l . size ( ) ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) { return true ; } } } return false ; }
String ChangeBase ( int x , int b ) { StringBuilder ret = new StringBuilder ( ) ; while ( x > 0 ) { ret . insert ( 0 , x % b ) ; x /= b ; } return ret . toString ( ) ; }
double Median ( double l [ ] ) { l . sort ( ) ; if ( l . size ( ) % 2 == 1 ) { return l [ l . size ( ) / 2 ] ; } return ( l [ l . size ( ) / 2 - 1 ] + l [ l . size ( ) / 2 ] ) / 2.0 ; }
String DecodeShift ( String s ) { StringBuilder sb = new StringBuilder ( ) ; for ( char ch : s ) { char w = ( char ) ( ( ch + 21 - 'a' ) % 26 + 'a' ) ; sb . append ( w ) ; } return sb . toString ( ) ; }
boolean BelowThreshold ( int l [ ] , int t ) { for ( int n : l ) { if ( n >= t ) { return false ; } } return true ; }
boolean CorrectBracketing ( String brackets ) { int depth = 0 ; for ( char b : brackets ) { if ( b == '<' ) { depth += 1 ; } if ( b == '>' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
boolean Monotonic ( double l [ ] ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . size ( ) ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr != 2 ; }
double > Derivative ( double xs [ ] ) { int result [ ] = new double [ xs . size ( ) ] ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) { result . add ( i * xs . get ( i ) ) ; } return result ; }
int VowelsCount ( String s ) { String vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch : s ) { if ( vowels . contains ( ch ) ) { count += 1 ; } } if ( s . charAt ( ^ 1 ) == 'y' || s . charAt ( ^ 1 ) == 'Y' ) { count += 1 ; } return count ; }
int DigitSum ( String s ) { int sum = 0 ; for ( char c : s ) { if ( char . isUpper ( c ) ) { sum += c ; } } return sum ; }
int FruitDistribution ( String s , int n ) { StringBuilder num1 = new StringBuilder ( ) ; StringBuilder num2 = new StringBuilder ( ) ; boolean flag = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( char . isDigit ( s . charAt ( i ) ) ) { if ( ! flag ) { num1 . append ( s . charAt ( i ) ) ; } if ( flag ) { num2 . append ( s . charAt ( i ) ) ; } } else if ( ! flag && num1 . length ( ) > 0 ) { flag = true ; } } return n - int . parse ( num1 . toString ( ) ) - int . parse ( num2 . toString ( ) ) ; }
int Pluck ( int arr [ ] ) { int result [ ] = new int [ arr . size ( ) ] ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . size ( ) == 0 ) { result . add ( arr [ i ] ) ; result . add ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } } return result ; }
int StrangeSortList ( int lst [ ] ) { int res [ ] = new int [ lst . size ( ) ] ; lst . sort ( ) ; int l = 0 ; int r = lst . size ( ) - 1 ; while ( l < r ) { res . add ( lst [ l ] ) ; l += 1 ; res . add ( lst [ r ] ) ; r -= 1 ; } if ( l == r ) { res . add ( lst [ l ] ) ; } return res ; }
double TriangleArea ( double a , double b , double c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return - 1 ; } double s = ( a + b + c ) / 2 ; return Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; }
boolean WillItFly ( int q [ ] , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . size ( ) ; i ++ ) { if ( q . get ( i ) != q . get ( ^ ( i + 1 ) ) ) { return false ; } sum += q . get ( i ) ; } return sum <= w ; }
boolean IsCube ( int a ) { a = Math . abs ( a ) ; int i = ( int ) Math . round ( Math . pow ( a , 1.0 / 3 ) ) ; return ( int ) Math . pow ( i , 3 ) == a ; }
int HexKey ( String num ) { String key = "2357BD" ; int total = 0 ; for ( char c : num ) { if ( key . contains ( c ) ) { total += 1 ; } } return total ; }
String DecimalToBinary ( int dec ) { StringBuilder ans = new StringBuilder ( ) ; if ( dec != 0 ) { while ( dec > 0 ) { ans . insert ( 0 , dec % 2 ) ; dec /= 2 ; } } else { ans . append ( "0" ) ; } return "db" + ans . toString ( ) + "db" ; }
boolean PrimeLength ( String s ) { int l = s . length ( ) ; if ( l < 2 ) { return false ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return false ; } } return true ; }
int StartsOneEnds ( int n ) { if ( n < 1 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return ( int ) ( 18 * Math . pow ( 10 , n - 2 ) ) ; }
int add ( int lst [ ] ) { int sum = 0 ; for ( int i = 1 ; i < lst . size ( ) ; i += 2 ) { if ( lst . get ( i ) % 2 == 0 ) { sum += lst . get ( i ) ; } } return sum ; }
int GetRow ( int lst [ ] , int x ) { int coords [ ] = new int [ lst . size ( ) ] ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { for ( int j = lst [ i ] . size ( ) - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] . get ( j ) == x ) { coords . add ( new int > { i , j } ) ; } } } return coords ; }
int NextSmallest ( int lst [ ] ) { lst . sort ( ) ; for ( int i = 1 ; i < lst . size ( ) ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) { return lst [ i ] ; } } return - 1 ; }
boolean AnyInt ( double a , double b , double c ) { if ( Math . round ( a ) != a || Math . round ( b ) != b || Math . round ( c ) != c ) { return false ; } return a + b == c || a + c == b || b + c == a ; }
int CountUpTo ( int n ) { int primes [ ] = new int [ n ] ; for ( int i = 2 ; i < n ; i ++ ) { boolean isPrime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { primes . add ( i ) ; } } return primes ; }
int ClosestInt ( String value ) { double w = Double . parse ( value ) ; return ( int ) Math . round ( w ) ; }
int MakeAPile ( int n ) { int result [ ] = new int [ n + 2 * i ] ; for ( int i = 0 ; i < n ; i ++ ) { result [ i ] = n + 2 * i ) ; } return result ; }
int WordStrings ( String s ) { StringBuilder current = new StringBuilder ( ) ; List < String > words = new ArrayList < String > ( ) ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' || s . charAt ( i ) == ',' ) { if ( current . length ( ) > 0 ) { words . add ( current . toString ( ) ) ; current . clear ( ) ; } } else { current . append ( s . charAt ( i ) ) ; } } return words ; }
String RoundedAvg ( int n , int m ) { if ( n > m ) { return "-1" ; } int num = ( m + n ) / 2 ; StringBuilder ret = new StringBuilder ( ) ; while ( num > 0 ) { ret . insert ( 0 , num % 2 ) ; num /= 2 ; } return ret . toString ( ) ; }
int UniqueDigits ( int x [ ] ) { int digits [ ] = new int [ x . size ( ) ] ; for ( int i : x ) { boolean isUnique = true ; for ( char c : i . toString ( ) ) { if ( c % 2 == 0 ) { isUnique = false ; break ; } } if ( isUnique ) { digits . add ( i ) ; } } digits . sort ( ) ; return digits ; }
int CountNums ( int arr [ ] ) { int num = 0 ; for ( int n0 : arr ) { int neg = n0 < 0 ? - 1 : 1 ; int n = Math . abs ( n0 ) ; List < Integer > digits = new ArrayList < Integer > ( ) ; for ( char c : n . toString ( ) ) { digits . add ( c - '0' ) ; } digits [ 0 ] *= neg ; int sum = 0 ; for ( int d : digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; }
boolean MoveOneBall ( int arr [ ] ) { if ( arr . size ( ) == 0 ) { return true ; } int num = 0 ; for ( int i = 1 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ ^ 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; }
String Exchange ( int lst1 [ ] , int lst2 [ ] ) { int odd = 0 ; int even = 0 ; for ( int n : lst1 ) { if ( n % 2 == 1 ) { odd += 1 ; } } for ( int n : lst2 ) { if ( n % 2 == 0 ) { even += 1 ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; }
void OddCount ( String lst [ ] ) { int results [ ] = new int [ lst . length ( ) ] ; String originalStr = "the number of odd elements in the string i of the input." ; for ( String s : lst ) { int sum = 0 ; for ( char d : s ) { if ( char . isDigit ( d ) && d % 2 == 1 ) { sum += 1 ; } } StringBuilder result = new StringBuilder ( ) ; for ( char c : originalStr ) { if ( c == 'i' ) { result . append ( sum ) ; } else { result . append ( c ) ; } } results . add ( result . toString ( ) ) ; } return results ; }
int MinSubArraySum ( int nums [ ] ) { int minSum = Integer . MAX_VALUE ; int sum = 0 ; for ( int num : nums ) { sum += num ; if ( minSum > sum ) { minSum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return minSum ; }
int MaxFill ( int grid [ ] , int capacity ) { int res = 0 ; for ( var well : grid ) { int sum = 0 ; for ( int n : well ) { sum += n ; } if ( sum > 0 ) { res += ( sum - 1 ) / capacity + 1 ; } } return res ; }
String > SelectWords ( String s , int n ) { String vowels = "aeiouAEIOU" ; StringBuilder current = new StringBuilder ( ) ; List < String > result = new ArrayList < String > ( ) ; int consonantNum = 0 ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { if ( consonantNum == n ) { result . add ( current . toString ( ) ) ; } current . clear ( ) ; consonantNum = 0 ; } else { current . append ( s . charAt ( i ) ) ; if ( ! vowels . get ( s . charAt ( i ) ) ) { consonantNum += 1 ; } } } return result ; }
int Solution ( int lst [ ] ) { int sum = 0 ; for ( int i = 0 ; i < lst . size ( ) ; i += 2 ) { if ( ( lst [ i ] % 2 ) == 1 ) { sum += lst [ i ] ; } } return sum ; }
int AddElements ( int arr [ ] , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= - 99 && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; }
int GetOddCollatz ( int n ) { int oddCollatz [ ] = new int [ n * 3 + 1 ] ; while ( n != 1 ) { if ( n % 2 == 1 ) { oddCollatz . add ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } oddCollatz . add ( 1 ) ; oddCollatz . sort ( ) ; return oddCollatz ; }
boolean IsSorted ( int lst [ ] ) { for ( int i = 1 ; i < lst . size ( ) ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; }
String Intersection ( int interval1 [ ] , int interval2 [ ] ) { int inter1 = Math . max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = Math . min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return "NO" ; } } return "YES" ; }
int ProdSigns ( int arr [ ] ) { if ( arr . size ( ) == 0 ) { return - 32768 ; } int sum = 0 ; int prods = 1 ; for ( int i : arr ) { sum += Math . abs ( i ) ; if ( i == 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; }
int MinPath ( int grid [ ] [ ] , int k ) { int n = grid . size ( ) ; int minNum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { List < Integer > tmp = new ArrayList < Integer > ( ) ; if ( i != 0 ) { tmp . add ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . add ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . add ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . add ( grid [ i ] [ j + 1 ] ) ; } minNum = tmp . min ( ) ; } } return ans ; }
int Digits ( int n ) { int prod = 0 ; for ( char digit : n . toString ( ) ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) { prod = 1 ; } prod *= digit - '0' ; } } return prod ; }
boolean IsNested ( String s ) { int count = 0 ; int maxCount = 0 ; for ( char ch : s ) { if ( ch == '[' ) { count += 1 ; } if ( ch == ']' ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > maxCount ) { maxCount = count ; } if ( count <= maxCount - 2 ) { return true ; } } return false ; }
int SumSquares ( double lst [ ] ) { int sum = 0 ; for ( double i : lst ) { sum += ( int ) ( Math . ceiling ( i ) * Math . ceiling ( i ) ) ; } return sum ; }
int CanArrange ( int arr [ ] ) { int index = - 1 ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
int LargestSmallestints ( int lst [ ] ) { int maxNeg = 0 , minPos = 0 ; for ( int n : lst ) { if ( n < 0 && ( maxNeg == 0 || n > maxNeg ) ) { maxNeg = n ; } if ( n > 0 && ( minPos == 0 || n < minPos ) ) { minPos = n ; } } return new int [ ] { maxNeg , minPos } ; }
String FixSpaces ( String text ) { StringBuilder res = new StringBuilder ( ) ; int spaceLen = 0 ; for ( int i = 0 ; i <= text . length ( ) ; i ++ ) { if ( i == text . length ( ) || text . charAt ( i ) != ' ' ) { if ( spaceLen == 1 ) { res . append ( '_' ) ; } if ( spaceLen == 2 ) { res . append ( "__" ) ; } if ( spaceLen > 2 ) { res . append ( '-' ) ; } spaceLen = 0 ; if ( i != text . length ( ) ) { res . append ( text . charAt ( i ) ) ; } } else { spaceLen += 1 ; } } return res . toString ( ) ; }
String FilenameCheck ( String fileName ) { int digitNum = 0 , dotNum = 0 ; if ( fileName . length ( ) < 5 || ! char . isLetter ( fileName . charAt ( 0 ) ) ) { return "No" ; } string suffix = fileName . charAt ( fileName . length ( ) - 4 ) ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) { return "No" ; } for ( char c : fileName ) { if ( char . isDigit ( c ) ) { digitNum += 1 ; } if ( c == '.' ) { dotNum += 1 ; } } if ( digitNum > 3 || dotNum != 1 ) { return "No" ; } return "Yes" ; }
int SumSquares ( int lst [ ] ) { int sum = 0 ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { if ( i % 3 == 0 ) { sum += lst [ i ] * lst [ i ] ; } else if ( i % 4 == 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else if ( i % 3 == 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else { sum += lst [ i ] ; } } return sum ; }
String WordsInSentence ( String sentence ) { StringBuilder result = new StringBuilder ( ) ; StringBuilder current = new StringBuilder ( ) ; for ( int i = 0 ; i <= sentence . length ( ) ; i ++ ) { if ( i == sentence . length ( ) || sentence . charAt ( i ) == ' ' ) { boolean isPrime = true ; int l = current . length ( ) ; if ( l < 2 ) { isPrime = false ; break ; } } if ( isPrime ) { result . append ( current . toString ( ) ) . append ( ' ' ) ; } current . clear ( ) ; } else { current . append ( sentence . charAt ( i ) ) ; } } if ( result . length ( ) > 0 ) { result . remove ( result . length ( ) - 1 , 1 ) ; } return result . toString ( ) ; }
boolean Simplify ( String x , String n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x . charAt ( i ) == '/' ) { a = int . parse ( x . charAt ( 0 , i ) ) ; b = int . parse ( x . charAt ( i + 1 ) ) ; } } for ( int i = 0 ; i < n . length ( ) ; i ++ ) { if ( n . charAt ( i ) == '/' ) { c = int . parse ( n . charAt ( 0 , i ) ) ; d = int . parse ( n . charAt ( i + 1 ) ) ; } } return ( a * c ) % ( b * d ) == 0 ; }
int SpecialFilter ( int nums [ ] ) { int count = 0 ; for ( int num : nums ) { if ( num > 10 ) { String w = num . toString ( ) ; if ( w [ 0 ] % 2 == 1 && w [ ^ 1 ] % 2 == 1 ) { count += 1 ; } } } return count ; }
int GetMaxTriples ( int n ) { int arr [ ] = new int [ n ] ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = i * i - i + 1 ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) { count += 1 ; } } } return count ; }
int DoubleTheDifference ( double lst [ ] ) { int sum = 0 ; for ( double d : lst ) { int num = ( int ) Math . round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) { sum += num * num ; } } } return sum ; }
int Compare ( int game [ ] , int guess [ ] ) { int result [ ] = new int [ game . size ( ) ] ; for ( int i = 0 ; i < game . size ( ) ; i ++ ) { result . add ( Math . abs ( game [ i ] - guess [ i ] ) ) ; } return result ; }
String StrongestExtension ( String className , int extensions [ ] ) { String strongest = "" ; int max = Integer . MAX_VALUE ; for ( var extension : extensions ) { int strength = 0 ; for ( char chr : extension ) { if ( char . isUpper ( chr ) ) { strength += 1 ; } if ( char . isLower ( chr ) ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return className + '.' + strongest ; }
String IntToMiniRoman ( int number ) { int num [ ] = new int [ 100 ] { 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 } ; List < String > sym = new ArrayList < String > { "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "iv" , "i" } ; int pos = 0 ; StringBuilder res = new StringBuilder ( ) ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res . append ( sym . charAt ( pos ) ) ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } return res . toString ( ) ; }
int Eat ( int number , int need , int remaining ) { return need > remaining ? new ArrayList < Integer > { number + remaining , 0 } : new ArrayList < Integer > { number + need , remaining - need } ; }
int DoAlgebra ( String ops [ ] , int operands [ ] , int currentOps [ ] ) { int nums [ ] = new int [ operands . length ( ) - 1 ] ; List < Integer > currentOps = new ArrayList < String > ( ops ) ; int i = currentOps . size ( ) - 1 ; while ( i >= 0 ) { if ( currentOps . get ( i ) == "**" ) { nums [ i ] = ( int ) Math . pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . removeAt ( i + 1 ) ; currentOps . removeAt ( i ) ; } else if ( currentOps . get ( i ) == "//" ) { nums [ i ] /= nums [ i + 1 ] ; nums . removeAt ( i + 1 ) ; currentOps . removeAt ( i ) ; } else if ( currentOps . get ( i ) == "+" ) { nums [ i ] += nums [ i + 1 ] ; nums . removeAt ( i + 1 ) ; currentOps . removeAt ( i ) ; } else if ( currentOps . get ( i ) == "-" ) { nums [ i ] -= nums [ i + 1 ] ; nums . removeAt ( i + 1 ) ; currentOps . removeAt ( i ) ; } else { i ++ ; } } return nums [ 0 ] ; }
int GenerateIntegers ( int a , int b ) { int lower = Math . max ( 2 , Math . min ( a , b ) ) ; int upper = Math . min ( 8 , Math . max ( a , b ) ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = lower ; i <= upper ; i += 2 ) { result . add ( i ) ; } return result ; }
boolean IsStepNum ( int n ) { int prevDigit = - 1 ; while ( n > 0 ) { int curDigit = n % 10 ; if ( prevDigit != - 1 ) { if ( Math . abs ( curDigit - prevDigit ) != 1 ) { return false ; } } n /= 10 ; prevDigit = curDigit ; } return true ; }
int NumOfWays ( int n , int k ) { int p = 1 ; if ( k % 2 != 0 ) { p = - 1 ; } return ( int ) ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; }
int FindDivisors ( int n ) { int v [ ] = new int [ n ] ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { v . add ( i ) ; } else { v . add ( i ) ; v . add ( n / i ) ; } } } return v ; }
int EggDrop ( int n , int k ) { if ( k == 1 || k == 0 ) { return k ; } if ( n == 1 ) return k ; int min = Integer . MAX_VALUE ; int x , res ; for ( x = 1 ; x <= k ; x ++ ) { res = Math . max ( EggDrop ( n - 1 , x - 1 ) , EggDrop ( n , k - x ) ) ; if ( res < min ) min = res ; } return min + 1 ; }
boolean IsPowerOfTwo ( int n ) { if ( n == 0 ) { return false ; } return Math . cceiling ( Math . log ( n ) / Math . log ( 2 ) ) == Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ; }
String ShortestPalindrome ( String s ) { int n = s . length ( ) ; List < String > v = new ArrayList < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i ; int r = i ; String ans1 = "" ; String ans2 = "" ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans1 += s . charAt ( l ) ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans2 += s . charAt ( l ) ; l -- ; r ++ ; } v . add ( ans1 ) ; v . add ( ans2 ) ; } String ans = v [ 0 ] ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . charAt ( i ) != "" ) { if ( ans [ 0 ] >= v . charAt ( i ) [ 0 ] ) { ans = v . charAt ( i ) ; } } } return ans ; }
int MinimumAdjacentDifference ( int a [ ] , int n , int k ) { int minDiff = Integer . MAX_VALUE ; for ( int i = 0 ; i <= k ; i ++ ) { int maxDiff = Integer . MIN_VALUE ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { maxDiff = Math . max ( maxDiff , a [ p + 1 ] - a [ p ] ) ; } } minDiff = Math . min ( minDiff , maxDiff ) ; } return minDiff ; }
int Cal ( int arr [ ] , int mid ) { int chocolate = 0 ; for ( var i : arr ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; }
boolean Check ( int v , int a [ ] , int m ) { int tec = 0 , ans = 0 ; List < Integer > b = new ArrayList < Integer > ( Enumerable . repeat ( 0 , a . size ( ) + 3 ) ) ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; }
int largestNum ( int arr [ ] ) { int res = 0 ; arr . sort ( ) ; int l = 0 , r = arr . size ( ) - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) { l ++ ; } else { r -- ; } } return res ; }
int BinarySearch ( int p [ ] , int n ) { int i = 0 ; int j = p . size ( ) - 1 ; int index = - 1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
int FindMinLength ( int arr [ ] ) { int index = arr . size ( ) - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; }
int MinDigits ( int n , int k ) { int digitsNum = ( int ) Math . floor ( Math . log ( n ) + 1 ) ; int tempSum = 0 ; int result = 0 ; int x , v ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = n / ( int ) Math . pow ( 10 , temp - 1 ) ; tempSum += v % 10 ; if ( tempSum >= k ) { v /= 10 ; v ++ ; result = v * ( int ) Math . pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; } return - 1 ; }
int CheckForPerfectSquare ( int arr [ ] , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; }
int MinFlips ( int mat [ ] . size ( ) ; int m = mat [ 0 ] . size ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] . charAt ( j ) != s . charAt ( i + j ) - '0' ) { count ++ ; } } } return count ; }
int ConstructTree ( int n , int edges [ ] ) { int adjl [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { adjl [ i ] = new int [ n ] ; } for ( var e : edges ) { int u = e [ 0 ] ; int v = e [ 1 ] ; adjl [ u ] . add ( v ) ; adjl [ v ] . add ( u ) ; } return adjl ; }
int FindSumOfValues ( int v , int parent [ ] , int valuesChildren [ ] ) { int curNode = v ; int sum = 0 ; while ( curNode != - 1 ) { sum += valuesChildren [ curNode ] ; curNode = parent [ curNode ] ; } return sum ; }
int GetDistinct ( int d , int count ) { int num = 0 ; count = ( int ) Math . pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; }
boolean IsIncreasing ( int arr [ ] ) { for ( int i = 0 ; i < arr . size ( ) - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; }
int MinAdjSwaps ( int mat [ ] [ ] ) { int n = mat . size ( ) ; List < Integer > cntZero = new ArrayList < Integer > ( Enumerable . repeat ( 0 , n ) ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 && mat [ i ] [ j ] == 0 ; j -- ) { cntZero [ i ] ++ ; } } int cntSwaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cntZero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cntZero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) { return - 1 ; } while ( first > i ) { ( cntZero [ first ] , cntZero [ first - 1 ] ) = ( cntZero [ first - 1 ] , cntZero [ first ] ) ; first -- ; cntSwaps ++ ; } } } return cntSwaps ; }
int Solve ( int values [ ] , int salary [ ] , int mod ) { int ret = 1 ; int amt = 0 ; values . sort ( ) ; salary . sort ( ) ; while ( values . size ( ) > 0 ) { while ( values . size ( ) > 0 && values . get ( values . size ( ) - 1 ) >= salary . get ( salary . size ( ) - 1 ) ) { amt ++ ; values . removeAt ( values . size ( ) - 1 ) ; } if ( amt == 0 ) return 0 ; ret *= amt -- ; ret %= mod ; salary . removeAt ( salary . size ( ) - 1 ) ; } return ret ; }
int OrganizeInOrder ( int vec [ ] , int op [ ] , int n ) { int result [ ] = new int [ n ] ; Arrays . sort ( result ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op . charAt ( k ) == '<' ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; }
int CountPoints ( int n , int m , int a [ ] , int b [ ] , int x , int y ) { a . sort ( ) ; b . sort ( ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) break ; if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; }
boolean AreSame ( int a [ ] , int b [ ] ) { a . sort ( ) ; b . sort ( ) ; return a . sequenceEqual ( b ) ; }
int CountNumberOfStrings ( String s ) { int n = s . length ( ) - 1 ; int count = ( int ) Math . pow ( 2 , n ) ; return count ; }
int PrimePower ( int x ) { int primePow [ ] = new int [ 2 ] ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } primePow [ add ( p ) ; } } if ( x > 1 ) { primePow . add ( x ) ; } return primePow ; }
boolean IsPerfect ( int n0 ) { double n = Math . sqrt ( n0 ) ; if ( Math . floor ( n ) != Math . cceiling ( n ) ) { return false ; } return true ; }
int FindSum ( int l , int r ) { int arr [ ] = new int [ l ] ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . add ( i + x ) ; if ( i + 1 <= r ) arr . add ( i + 1 + x ) ; x *= - 1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr [ i ] ; } return sum ; }
int Results ( int n , int k ) { return ( int ) Math . pow ( n , 1.0 / Math . pow ( 2.0 , k ) ) ) ; }
int Factors ( int n ) { int v [ ] = new int [ n ] ; v . add ( 1 ) ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . add ( i ) ; if ( n / i != i ) { v . add ( n / i ) ; } } } return v ; }
int SmallestNum ( int n ) { double x = Math . pow ( 10 , ( n - 1 ) / 2.0 ) ; return ( int ) Math . ceiling ( x ) ; }
int Smallest ( String s ) { int a [ ] = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = s . charAt ( i ) - '0' ; } List < Integer > b = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { if ( a . charAt ( i ) % 2 != 0 ) { b . add ( a [ i ] ) ; } } b . sort ( ) ; if ( b . size ( ) > 1 ) { return b [ 0 ] * 10 + b [ 1 ] ; } return - 1 ; }
double Diagonals ( double a , double b , double c , double d ) { double ans [ ] = new double [ 100 ] ; ans . add ( Math . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . add ( Math . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * d + b * c ) ) ) ; return ans ; }
int FindNumberOfDigits ( int n , int bas ) { int dig = ( int ) Math . floor ( Math . log ( n ) / Math . log ( bas ) ) + 1 ; return dig ; }
double NGon ( int n ) { double proAngleVar ; if ( n % 4 == 0 ) { proAngleVar = Math . PI * ( 180.0 / n ) / 180 ; } else { proAngleVar = Math . PI * ( 180.0 / n ) / 180 ; } double negX = 1.0e + 99 , posX = - 1.0e + 99 , negY = 1.0e + 99 ; for ( int j = 0 ; j < n ; ++ j ) { double px = Math . cos ( 2 * Math . PI * j / n + proAngleVar ) ; double py = Math . sin ( 2 * Math . PI * j / n + proAngleVar ) ; negX = Math . min ( negX , px ) ; posX = Math . max ( posX , px ) ; negY = Math . min ( negY , py ) ; posY = Math . max ( posY , py ) ; } double opt2 = Math . max ( posX - negX , posY - negY ) ; return opt2 / Math . sqrt ( Math . PI / n ) / 2 ; }
int FindMaxK ( int n ) { int p = ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ; return ( int ) Math . pow ( 2 , p ) ; }
int NthFibo ( int n ) { double a = ( Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; double b = ( - 1 * Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; double r = Math . pow ( 5 , 0.5 ) ; double ans = ( Math . pow ( a , n ) - Math . pow ( b , n ) ) / r ; return ( int ) ans ; }
double FindProb ( int l , int r ) { double countOfPs = Math . floor ( Math . sqrt ( r ) ) - Math . ceiling ( Math . sqrt ( l ) ) + 1 ; double total = r - l + 1 ; double prob = countOfPs / total ; return prob ; }
int PreviousFibonacci ( int n ) { double a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return ( int ) Math . round ( a ) ; }
int DistPrime ( int arr [ ] , int allPrimes [ ] ) { int list1 [ ] = new int [ allPrimes . size ( ) ; for ( int i : allPrimes ) { for ( int j : arr ) { if ( j % i == 0 ) { list1 . add ( i ) ; break ; } } } return list1 ; }
int [ ] GetArray ( int n ) { int ans [ ] = new int [ n ] ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans . add ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; }
int MaximumLength ( int a [ ] ) { int counts [ ] = new int [ 11 ] ; int ans = 0 ; for ( int index = 0 ; index < a . size ( ) ; index ++ ) { counts [ a . charAt ( index ) ] += 1 ; List < Integer > k = new ArrayList < Integer > ( ) ; for ( int i : counts ) { if ( i != 0 ) { k . add ( i ) ; } } k . sort ( ) ; if ( k . size ( ) == 1 || ( k [ 0 ] == k [ k . size ( ) - 2 ] && k [ k . size ( ) - 1 ] - k . size ( ) - 2 ] == 1 ) || ( k [ 0 ] == k [ k . size ( ) - 1 ] == k . size ( ) - 1 ) ) ) { ans = index ; } } return ans + 1 ; }
int MaxEdges ( double n ) { double edges = Math . floor ( n * n / 4 ) ; return ( int ) edges ; }
int FindK ( int n , int k ) { int a [ ] = new int [ n ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a . add ( i ) ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a . add ( i ) ; } } return a [ k - 1 ] ; }
boolean IsKeith ( int x , int temp ) { int terms [ ] = new int [ 10 ] ; int n = 0 ; while ( temp > 0 ) { terms . add ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } terms . reverse ( ) ; int nextTerm = 0 , i = n ; while ( nextTerm < x ) { nextTerm = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { nextTerm += terms [ i - j ] ; } terms . add ( nextTerm ) ; i ++ ; } return nextTerm == x ; }
boolean Factors ( int n , int k ) { int v [ ] = new int [ n % 2 == 0 ) { v . add ( 2 ) ; n /= 2 ; } if ( v . size ( ) >= k ) { return true ; } for ( int i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n = n / i ; v . add ( i ) ; } if ( v . size ( ) >= k ) { return true ; } } if ( n > 2 ) { v . add ( n ) ; } if ( v . size ( ) >= k ) { return true ; } return false ; }
String SeparateParenGroups ( String parenString ) { int allParens [ ] = new int [ parenString . length ( ) ] ; StringBuilder currentParen = new StringBuilder ( ) ; int currentDepth = 0 ; for ( var c : parenString ) { if ( c == '(' ) { currentDepth += 1 ; currentParen . append ( c ) ; } else if ( c == ')' ) { currentDepth -= 1 ; currentParen . append ( c ) ; if ( currentDepth == 0 ) { allParens . add ( currentParen . toString ( ) ) ; currentParen . clear ( ) ; } } } return allParens ; }
int ParseNestedParens ( String parenString ) { int allLevels [ ] = new int [ parenString . length ( ) ] ; int level = 0 ; int maxLevel = 0 ; for ( int i = 0 ; i < parenString . length ( ) ; i ++ ) { char chr = parenString . charAt ( i ) ; if ( chr == '(' ) { level += 1 ; if ( level > maxLevel ) { maxLevel = level ; } } if ( chr == ')' ) { level -= 1 ; if ( level == 0 ) { allLevels . add ( maxLevel ) ; maxLevel = 0 ; } } } return allLevels ; }
void FilterBySubstring ( String strings [ ] , String substring ) { int result [ ] = new int [ strings . length ( ) ; for ( var s : strings ) { if ( s . contains ( substring ) ) { result . add ( s ) ; } } return result ; }
int RollingMax ( int numbers [ ] ) { int result [ ] = new int [ numbers . length ( ) ; int runningMax = 0 ; for ( int n : numbers ) { if ( n > runningMax ) { runningMax = n ; } result . add ( runningMax ) ; } return result ; }
String MakePalindrome ( String s ) { if ( s . length ( ) == 0 ) { return "" ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String rStr = s . charAt ( i ) ; if ( rStr == new String ( rStr . reverse ( ) . toArray ( ) ) ) { String nStr = s . charAt ( 0 , i ) ; String n2Str = new String ( nStr . reverse ( ) . toArray ( ) ) ; return s + n2Str ; } } return s . charAt ( 0 , s . length ( ) - 1 ) + new String ( s . reverse ( ) . toArray ( ) ) ; }
String StringXor ( String a , String b ) { StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) { result . append ( '0' ) ; } else { result . append ( '1' ) ; } } return result . toString ( ) ; }
String Longest ( String strings [ ] ) { if ( strings . size ( ) == 0 ) return "" ; int maxLen = Arrays . stream ( strings ) . max ( ) . getAsInt ( ) ; ; for ( String s : strings ) { if ( s . length ( ) == maxLen ) { return s ; } } return "" ; }
String StringSequence ( int n ) { StringBuilder s = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . append ( i ) ; s . append ( " " ) ; } s . append ( n ) ; return s . toString ( ) ; }
int CountDistinctChars ( String s ) { HashSet < Character > distinct = new HashSet < Character > ( ) ; for ( char c : s . toLowerCase ( ) ) { distinct . add ( c ) ; } return distinct . size ( ) ; }
int HowManyTimes ( String s , String sub ) { int times = 0 ; for ( int i = 0 ; i <= s . length ( ) - sub . length ( ) ; i ++ ) { if ( s . charAt ( i ) == sub ) { times += 1 ; } } return times ; }
String SortNumbers ( String numbers ) { Map < String , Integer > toNum = new HashMap < String , Integer > { { "zero" , 0 } , { "two" , 2 } , { "three" , 3 } , { "four" , 4 } , { "five" , 5 } , { "six" , 6 } , { 8 , "eight" } } ; List < Integer > ints = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i <= numbers . length ( ) ; i ++ ) { if ( i == numbers . length ( ) || numbers . charAt ( i ) == ' ' ) { if ( toNum . containsKey ( current . toString ( ) ) ) { ints . add ( toNum . get ( current . toString ( ) ) ; current . clear ( ) ; } } else { current . append ( numbers . charAt ( i ) ) ; } } ints . sort ( ) ; StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { result . append ( fromNum . get ( i ) ) ; } } return result . toString ( ) ; }
void FindClosestElements ( double numbers [ ] ) { int closestPair [ ] = new int [ numbers . size ( ) ] ; double distance = Math . abs ( numbers [ 0 ] - numbers [ 1 ] ) ; for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < numbers . size ( ) ; j ++ ) { if ( Math . abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closestPair [ 0 ] = numbers [ i ] ; closestPair [ 1 ] = numbers [ j ] ; distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; } } } closestPair . sort ( ) ; return closestPair ; }
double RescaleToUnit ( double numbers [ ] ) { double minNum = numbers . min ( ) ; double maxNum = numbers . max ( ) ; List < double > result = new ArrayList < double > ( ) ; for ( double n : numbers ) { result . add ( ( n - minNum ) / ( maxNum - minNum ) ) ; } return result ; }
int FilterIntegers ( Object values [ ] ) { int result [ ] = new int [ values . length ( ) ] ; for ( var e : values ) { if ( e is int ) { result . add ( ( int ) e ) ; } } return result ; }
int RemoveDuplicates ( int numbers [ ] ) { Map < Integer , Integer > c = new HashMap < Integer , Integer > ( ) ; for ( int i : numbers ) { c [ i ] = c . getValueOrDefault ( i , 0 ) + 1 ; } List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i : numbers ) { if ( c . get ( i ) == 1 ) { result . add ( i ) ; } } return result ; }
String FlipCase ( String s ) { StringBuilder result = new StringBuilder ( ) ; for ( char c : s ) { if ( char . isLower ( c ) ) { result . append ( char . toUpperCase ( c ) ) ; } else { result . append ( char . toLowerCase ( c ) ) ; } } return result . toString ( ) ; }
void FilterByPrefix ( String strings [ ] , String prefix ) { int result [ ] = new int [ strings . size ( ) ; for ( int i = 0 ; i < strings . size ( ) ; i ++ ) { if ( strings . charAt ( i ) . startsWith ( prefix ) ) { result . add ( strings . charAt ( i ) ) ; } } return result ; }
double FindZero ( double xs [ ] ) { double ans = 0 ; double value = 0 ; for ( int i = 0 ; i < xs . size ( ) ; i ++ ) { value += xs [ i ] * Math . pow ( ans , i ) ; } while ( Math . abs ( value ) > 1e-6 ) { double driv = 0 ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) { driv += xs [ i ] * Math . pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . size ( ) ; i ++ ) { value += xs [ i ] * Math . pow ( ans , i ) ; } } return ans ; }
int SortThird ( int l [ ] ) { int thirds [ ] = new int [ l . size ( ) ] ; for ( int i = 0 ; i < l . size ( ) ; i += 3 ) { thirds [ i ] = l [ i ] ; } thirds . sort ( ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 3 == 0 ) { result . add ( thirds [ i / 3 ] ) ; } else { result . add ( l [ i ] ) ; } } return result ; }
int Unique ( int l [ ] ) { int result [ ] = new int [ l . length ( ) ] ; result . sort ( ) ; return result ; }
double MaxElement ( double l [ ] ) { return l . max ( ) ; }
boolean TriplesSumToZero ( int l [ ] ) { for ( int i = 0 ; i < l . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < l . size ( ) ; j ++ ) { for ( int k = j + 1 ; k < l . size ( ) ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) { return true ; } } } return false ; }
int Fib4 ( int n ) { int results [ ] = new int [ 4 ] { 0 , 0 , 2 , 0 } ; for ( int i = 4 ; i <= n ; i ++ ) { results . add ( results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ) ; } return results [ n ] ; }
boolean IsPalindrome ( String text ) { String pr = new String ( text . reverse ( ) . toArray ( ) ) ; return pr == text ; }
String RemoveVowels ( String text ) { StringBuilder result = new StringBuilder ( ) ; String vowels = "aeiou" ; for ( char ch : text ) { if ( ! vowels . contains ( char . toLowerCase ( ch ) ) ) { result . append ( ch ) ; } } return result . toString ( ) ; }
boolean SameChars ( String s0 , String s1 ) { HashSet < Character > set0 = new HashSet < Character > ( ) ; for ( char c : s0 ) { set0 . add ( c ) ; } HashSet < Character > set1 = new HashSet < Character > ( ) ; for ( char c : s1 ) { set1 . add ( c ) ; } return set0 . setEquals ( set1 ) ; }
int Common ( int l1 [ ] , int l2 [ ] ) { HashSet < Integer > us = new HashSet < Integer > ( ) ; for ( int e1 : l1 ) { for ( int e2 : l2 ) { if ( e1 == e2 ) { us . add ( e1 ) ; } } } List < Integer > ret = new ArrayList < Integer > ( us ) ; ret . sort ( ) ; return ret ; }
boolean CorrectBracketing ( String brackets ) { int depth = 0 ; for ( char b : brackets ) { if ( b == '(' ) { depth += 1 ; } if ( b == ')' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
String CircularShift ( int x , int shift ) { String xs = Integer . toString ( x ) ; if ( shift > xs . length ( ) ) { return new String ( xs . reverse ( ) . toArray ( ) ) ; } return xs . charAt ( xs . length ( ) - shift ) + xs . charAt ( 0 , xs . length ( ) - shift ) ; }
int Search ( int lst [ ] ) { Map < Integer , Integer > counter = new HashMap < Integer , Integer > ( ) ; for ( int i : lst ) { counter [ i ] = counter . getValueOrDefault ( i , 0 ) + 1 ; } int ans = - 1 ; for ( var item : counter ) { if ( item . Value >= item . Key && item . Key > ans ) { ans = item . Key ; } } return ans ; }
int SmallestChange ( int arr [ ] ) { int ans = 0 ; for ( int i = 0 ; i < arr . size ( ) / 2 ; i ++ ) { if ( arr [ i ] != arr [ ^ ( i + 1 ) ] ) { ans += 1 ; } } return ans ; }
int TotalMatch ( String lst1 [ ] , String lst2 [ ] ) { int sum1 = 0 ; for ( var st : lst1 ) { sum1 += st . length ( ) ; } int sum2 = 0 ; for ( String st : lst2 ) { sum2 += st . length ( ) ; } return sum1 > sum2 ? lst2 : lst1 ; }
boolean IsHappy ( String s ) { if ( s . length ( ) < 3 ) { return false ; } for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i ) == s . charAt ( i + 2 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) { return false ; } } return true ; }
String NumericalLetterGrade ( double grades [ ] ) { int letterGrade [ ] = new int [ 4.0 ] ; for ( double gpa : grades ) { if ( gpa == 4.0 ) { letterGrade . add ( "A+" ) ; } else if ( gpa > 3.3 ) { letterGrade . add ( "A-" ) ; } else if ( gpa > 2.0 ) { letterGrade . add ( "C+" ) ; } else if ( gpa > 1.7 ) { letterGrade . add ( "C" ) ; } else if ( gpa > 1.3 ) { letterGrade . add ( "C-" ) ; } else if ( gpa > 1.0 ) { letterGrade . add ( "D+" ) ; } else if ( gpa > 0.7 ) { letterGrade . add ( "D" ) ; } else if ( gpa > 0.0 ) { letterGrade . add ( "E" ) ; } } return letterGrade ; }
String Solve ( int n ) { StringBuilder biStr = new StringBuilder ( ) ; int sum = 0 ; for ( char c : n . toString ( ) ) { sum += c - '0' ; } while ( sum > 0 ) { biStr . insert ( 0 , sum % 2 ) ; sum /= 2 ; } return biStr . toString ( ) ; }
String AntiShuffle ( String s ) { StringBuilder ret = new StringBuilder ( ) ; StringBuilder current = new StringBuilder ( ) ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { char [ ] tmp = current . toString ( ) . charAt ( ) ; Arrays . sort ( tmp ) ; if ( ret . length ( ) != 0 ) { ret . append ( ' ' ) ; } ret . append ( new String ( tmp ) ) ; current . clear ( ) ; } else { current . append ( s . charAt ( i ) ) ; } } return ret . toString ( ) ; }
int SortArray ( int array [ ] ) { if ( array . size ( ) == 0 ) { return array ; } if ( ( array [ 0 ] + array [ ^ 1 ] ) % 2 == 1 ) { array . sort ( ) ; } else { array . sort ( ( a , b ) => b - a ) ; } return array ; }
String Encrypt ( String s ) { StringBuilder ans = new StringBuilder ( ) ; for ( char c : s ) { if ( char . isLetter ( c ) ) { ans . append ( ( char ) ( 'a' + ( c - 'a' + 4 ) % 26 ) ) ; } else { ans . append ( c ) ; } } return ans . toString ( ) ; }
int IsBored ( String s ) { boolean isStart = true ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '.' || s . charAt ( i ) == '?' || s . charAt ( i ) == '!' ) { isStart = true ; } else if ( isStart ) { if ( s . charAt ( i ) == ' ' ) { continue ; } if ( s . charAt ( i ) == 'I ' ) { sum += 1 ; } isStart = false ; } } return sum ; }
String Encode ( String message ) { String vowels = "aeiouAEIOU" ; StringBuilder ret = new StringBuilder ( ) ; for ( char c0 : message ) { char c = c0 ; if ( char . isUpper ( c ) ) { c = char . toLowerCase ( c ) ; if ( vowels . contains ( c ) ) { c = ( char ) ( 'a' + ( c - 'a' + 2 ) % 26 ) ; } } else if ( char . isLower ( c ) ) { c = char . ToUpper ( c ) ; if ( vowels . contains ( c ) ) { c = ( char ) ( 'A' + ( c - 'A' + 2 ) % 26 ) ; } } ret . append ( c ) ; } return ret . toString ( ) ; }
int Skjkasdkd ( int lst [ ] ) { int largest = 0 ; for ( int n : lst ) { if ( n > largest ) { boolean prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } int sum = 0 ; String s = largest . toString ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum += s . charAt ( i ) - '0' ; } return sum ; }
boolean CheckDictCase ( Map < String , String > dict ) { if ( dict . size ( ) == 0 ) { return false ; } int isLower = 0 ; int isUpper = 0 ; for ( var key : dict . keySet ( ) ) { for ( char c : key ) { if ( char . isLower ( c ) ) { isLower = 1 ; } else if ( char . isUpper ( c ) ) { isUpper = 1 ; } else { return false ; } } } return isLower + isUpper == 1 ; }
int Multiply ( int a , int b ) { return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ; }
int CountUpper ( String s ) { String uVowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i += 2 ) { if ( uVowel . contains ( s . charAt ( i ) ) ) { count += 1 ; } } return count ; }
void ByLength ( int arr [ ] ) { Map < Integer , String > numTo = new HashMap < Integer , String > { { 1 , "One" } , { 2 , "Two" } , { 3 , "Three" } , { 4 , "Four" } , { 5 , "Five" } , { 6 , "Six" } , { 8 , "Eight" } , { 9 , "Nine" } } ; List < Integer > sortedArr = new ArrayList < Integer > ( arr ) ; Collections . sort ( sortedArr ) ; List < String > newArr = new ArrayList < String > ( ) ; for ( int n : sortedArr ) { if ( n >= 1 && n <= 9 ) { newArr . add ( numTo . get ( n ) ) ; } } return newArr ; }
int F ( int n ) { int sum = 0 ; int prod = 1 ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) { result . add ( prod ) ; } else { result . add ( sum ) ; } } return result ; }
int EvenOddPalindrome ( int n ) { int evenCount = 0 , oddCount = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { String s = i . toString ( ) ; String rStr = new String ( s . reverse ( ) . toArray ( ) ) ; if ( s == rStr ) { if ( i % 2 == 1 ) { oddCount += 1 ; } else { evenCount += 1 ; } } } return new ArrayList < Integer > { evenCount , oddCount } ; }
void Histogram ( String test ) { Map < Character , Integer > count = new HashMap < Character , Integer > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . length ( ) ; i ++ ) { if ( test . charAt ( i ) != ' ' ) { count [ test . charAt ( i ) ] = count . getValueOrDefault ( test . charAt ( i ) , 0 ) + 1 ; if ( count . get ( test . charAt ( i ) ) > max ) { max = count . get ( test . charAt ( i ) ) ; } } } Map < Character , Integer > result = new HashMap < Character , Integer > ( ) ; for ( var item : count ) { if ( item . Value == max ) { result [ item . Key ] = item . Value ; } } return result ; }
void reverseDelete ( String s , String c ) { StringBuilder ret = new StringBuilder ( ) ; for ( char ch : s ) { if ( ! c . contains ( ch ) ) { ret . append ( ch ) ; } } String flag = "False" ; if ( ret . toString ( ) . equals ( new String ( ret . toString ( ) . reverse ( ) . toArray ( ) ) ) { flag = "True" ; } return new ArrayList < String > { ret . toString ( ) , flag } ; }
int sortArray ( int arr [ ] ) { int b = 0 ; int n = Math . abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . add ( b ) ; } for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { for ( int j = 1 ; j < arr . size ( ) ; j ++ ) { if ( bin [ j ] < bin [ j - 1 ] || ( bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) ) { ( bin [ j ] , bin [ j - 1 ] ) = ( bin [ j - 1 ] , bin [ j ] ) ; ( arr [ j ] , arr [ j - 1 ] ) = ( arr [ j - 1 ] , arr [ j ] ) ; } } } return arr ; }
String GetClosestVowel ( String word ) { String vowels = "AEIOUaeiou" ; for ( int i = word . length ( ) - 2 ; i > 0 ; i -- ) { if ( vowels . contains ( word . charAt ( i ) ) && ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) { return word . charAt ( i ) . toString ( ) ; } } return "" ; }
String MatchParens ( String lst [ ] ) { int strings [ ] = { lst [ 0 ] + lst [ 1 ] , lst [ 1 ] + lst [ 0 ] } ; for ( var l : strings ) { int count = 0 ; for ( char c : l ) { if ( c == '(' ) { count += 1 ; } else { count -= 1 ; } if ( count < 0 ) { break ; } } if ( count == 0 ) { return "Yes" ; } } return "No" ; }
int Maximum ( int arr [ ] , int k ) { if ( k == 0 ) { return new ArrayList < Integer > ( ) ; } arr . sort ( ) ; return arr . getRange ( arr . size ( ) - k , k ) ; }
boolean ValidDate ( String date ) { if ( date . length ( ) != 10 ) { return false ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 || i == 5 ) { if ( date . charAt ( i ) != '-' ) { return false ; } } else if ( char . isDigit ( date . charAt ( i ) ) ) { return false ; } } int month = int . parse ( date . charAt ( 0 , 2 ) ) ; int day = int . parse ( date . charAt ( 3 , 2 ) ) ; int year = int . parse ( date . charAt ( 6 , 4 ) ) ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day == 30 && month == 2 ) { return false ; } return true ; }
void SplitWords ( String txt ) { StringBuilder current = new StringBuilder ( ) ; List < String > result = new ArrayList < String > ( ) ; if ( txt . charAt ( ' ' ) ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == ' ' ) { if ( current . length ( ) > 0 ) { result . add ( current . toString ( ) ) ; } current . clear ( ) ; } else { current . append ( txt . charAt ( i ) ) ; } } return result ; }
int Tri ( int n ) { if ( n == 0 ) { return new ArrayList < Integer > ( 1 ) ; } List < Integer > tris = new ArrayList < Integer > { 1 , 3 } ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { tris . add ( i / 2 + 1 ) ; } else { tris . add ( tris [ i - 1 ] + tris [ i - 2 ] + ( i + 3 ) / 2 ) ; } } return tris ; }
boolean CheckIfLastCharIsALetter ( String txt ) { if ( txt . length ( ) == 0 ) { return false ; } return char . isLetter ( txt . charAt ( ^ 1 ) ) && ( txt . length ( ) == 1 || ! char . isLetter ( txt . charAt ( ^ 2 ) ) ) ; }
int OrderByPoints ( int nums [ ] ) { int result [ ] = new int [ nums . size ( ) ] ; for ( int num : nums ) { String w = Math . abs ( num ) . toString ( ) ; int sum = 0 ; for ( char c : w ) { sum += c - '0' ; } if ( num < 0 ) { sum -= 2 * ( w [ 0 ] - '0' ) ; } result . add ( sum ) ; } for ( int i = 0 ; i < nums . size ( ) ; i ++ ) { for ( int j = 1 ; j < nums . size ( ) ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { ( result [ j ] , result [ j - 1 ] ) = ( result [ j - 1 ] , result [ j - 1 ] ) = ( result [ j - 1 ] , result [ j ] ) ; ( nums [ j ] , nums [ j - 1 ] ) = ( nums [ j - 1 ] , nums [ j ] ) ; } } return nums ; }
String Bf ( String planet1 , String planet2 ) { int planets [ ] = { "Mercury" , "Venus" , "Earth" , "Mars" , "Saturn" , "Uranus" , "Neptune" } ; int idx1 = planets . indexOf ( planet1 ) ; int idx2 = planets . indexOf ( planet2 ) ; if ( idx1 == - 1 || idx2 == - 1 || idx1 == idx2 ) { return new ArrayList < String > ( ) ; } return idx1 > idx2 ? planets . getRange ( idx2 + 1 , idx1 - idx2 - 1 ) : planets . getRange ( idx1 + 1 , idx2 - idx1 - 1 ) ; }
void SortedListSum ( String lst [ ] ) { int result [ ] = new int [ lst . length ( ) ] ; for ( var i : lst ) { if ( i . length ( ) % 2 == 0 ) { result . add ( i ) ; } } result . sort ( ( String l , String r ) -> { if ( l . length ( ) == r . length ) { return string . compare ( l , r , StringComparison . Ordinal ) ; } return l . length - r . length ( ) ; } ) ; return result ; }
boolean CycpatternCheck ( String a , String b ) { for ( int i = 0 ; i <= b . length ( ) ; i ++ ) { String rotate = b . charAt ( i ) + b . charAt ( 0 , i ) ; if ( a . contains ( rotate ) ) { return true ; } } return false ; }
int EvenOddCount ( int num ) { int evenCount = 0 , oddCount = 0 ; for ( char i : Math . abs ( num ) . toString ( ) ) { if ( i % 2 == 0 ) { evenCount += 1 ; } else { oddCount += 1 ; } } return new ArrayList < Integer > { evenCount , oddCount } ; }
String FindMax ( String words [ ] ) { String max = "" ; int maxLength = 0 ; for ( var word : words ) { List < Character > unique = new ArrayList < Character > ( ) ; for ( char w : word ) { if ( unique . get ( w ) == null ) { unique . add ( w ) ; } } if ( unique . size ( ) > maxLength || ( unique . get ( w ) == maxLength && string . compare ( word , max , StringComparison . Ordinal ) < 0 ) ) { max = word ; maxLength = unique . size ( ) ; } } return max ; }
String Solve ( String s ) { boolean noLetter = true ; StringBuilder result = new StringBuilder ( ) ; for ( char ch0 : s ) { char ch = ch0 ; if ( char . isUpper ( ch ) ) { ch = char . toLowerCase ( ch ) ; noLetter = false ; } else if ( char . isLower ( ch ) ) { ch = char . toUpperCase ( ch ) ; noLetter = false ; } result . append ( ch ) ; } if ( noLetter ) { return new String ( result . toString ( ) . reverse ( ) . toArray ( ) ) ; } else { return result . toString ( ) ; }
int MostFrequent ( int arr [ ] , int n ) { Map < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) { hp . put ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . put ( arr [ i ] , 1 ) ; } } int maxCount = 0 , res = - 1 ; for ( var entry : hp ) { if ( maxCount < entry . Value ) { res = entry . Key ; maxCount = entry . Value ; } } return res ; }
int Find ( int a [ ] , int b [ ] , int k , int n1 , int n2 ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { s . add ( b [ i ] ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( ! s . contains ( a [ i ] ) ) { missing ++ ; } if ( missing == k ) { return a [ i ] ; } } return - 1 ; }
int SolveQuery ( int start , int end , int arr [ ] ) { Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = start ; i <= end ; i ++ ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } int count = 0 ; for ( var entry : mp ) { if ( entry . key == entry . Value ) { count ++ ; } } return count ; }
int Segregate ( int arr [ ] , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { ( arr [ i ] , arr [ j ] ) = ( arr [ j ] , arr [ i ] ) ; j ++ ; } } return j ; }
int CountTriplets ( int a [ ] , int n ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( a [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( s . contains ( xr ) && xr != a [ i ] && xr != a [ j ] ) { count ++ ; } } } return count / 3 ; }
int LeastFrequent ( int arr [ ] , int n ) { Map < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) { hp . put ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . put ( arr [ i ] , 1 ) ; } } int minCount = n + 1 , res = - 1 ; for ( var entry : hp ) { if ( minCount >= entry . Value ) { res = entry . Key ; minCount = entry . Value ; } } return res ; }
int FindPermutations ( int arr [ ] ) { int cnt = 0 ; int maxInd = - 1 , minInd = 10000000 ; int n = arr . size ( ) ; HashMap < Integer , Integer > indexOf = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { indexOf [ arr [ i ] ] = i + 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { maxInd = Math . max ( maxInd , indexOf . GetValueOrDefault ( i , 0 ) ) ; minInd = Math . min ( minInd , indexOf . GetValueOrDefault ( i , 0 ) ) ; if ( maxInd - minInd + 1 == i ) { cnt ++ ; } } return cnt ; }
int FormQuadruplets ( int arr [ ] , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; arr . sort ( ( a , b ) => b - a ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; }
String LexicographicallyMaximum ( String s , int n ) { Map < Character , Integer > m = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . containsKey ( s . charAt ( i ) ) ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; j -- ; } if ( j < 0 ) { break ; } if ( s . charAt ( i ) >= 'a' + Math . min ( n , 25 ) || ( m . get ( s . charAt ( i ) ) == null ) { v . add ( i ) ; } } int j = v . size ( ) - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( s . charAt ( i ) >= 'a' + Math . min ( n , 25 ) || ( m . get ( s . charAt ( i ) ) && m . get ( s . charAt ( i ) ) > 1 ) ) { m . put ( s . charAt ( i ) ) - 1 ) + v . get ( i ) ; } } return s ; }
int NoOfValidKbers ( int k , int arr [ ] ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; while ( k != 0 ) { s . add ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { int no = arr [ i ] ; boolean flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( ! s . contains ( digit ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag ) { count ++ ; } } return count ; }
int DelCost ( String s , int cost [ ] ) { int ans = 0 ; HashMap < Integer , Integer > forMax = new HashMap < Integer , Integer > ( ) ; HashMap < Integer , Integer > forTot = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! forMax . containsKey ( s . charAt ( i ) ) ) { forMax . put ( s . charAt ( i ) , cost [ i ] ) ; } else { forMax . put ( s . charAt ( i ) , forMax . get ( s . charAt ( i ) ) + 1 ) ; } } for ( var i : forMax ) { ans += forTot . get ( i . Key ) - i . Value ; } return ans ; }
void ReplaceDuplicates ( String names [ ] ) { Map < String , Integer > hash = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < names . size ( ) ; i ++ ) { if ( ! hash . containsKey ( names . charAt ( i ) ) ) { hash . put ( names . charAt ( i ) , 1 ) ; } else { int count = hash . get ( names . charAt ( i ) ) ; hash . put ( names . charAt ( i ) , count ) ; } } return names ; }
int MinmaxNumbers ( int [ ] matrix , int res [ ] ) { Set < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < matrix . size ( ) ; i ++ ) { int minR = Integer . MAX_VALUE ; for ( int j = 0 ; j < matrix [ i ] . size ( ) ; j ++ ) { minR = Math . min ( minR , matrix [ i ] [ j ] ) ; } s . add ( minR ) ; } for ( int j = 0 ; j < matrix [ 0 ] . size ( ) ; j ++ ) { int maxC = Integer . minValue ; for ( int i = 0 ; i < matrix . size ( ) ; i ++ ) { maxC = Math . max ( maxC , matrix [ i ] [ j ] ) ; } if ( s . contains ( maxC ) ) { res . add ( maxC ) ; } } return res ; }
int LengthOfLongestAP ( int a [ ] , int n ) { Map < Integer , Integer > dp = new HashMap < Integer , Integer > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = i + 1 ; j < n ; ++ j ) { int d = a [ j ] - a [ i ] ; if ( dp . containsKey ( d ) ) { if ( dp . get ( d ) . get ( i ) ) == null ) { dp [ d ] [ j ] = dp [ d ] [ i ] + 1 ; } else { dp [ d ] [ j ] = 2 ; } } else { dp [ d ] = new HashMap < Integer , Integer > ( ) ; dp [ d ] [ j ] = 2 ; } res = Math . max ( res , dp [ d ] [ j ] ) ; } } return res ; }
char FindKthChar ( int n , int k ) { String prev = "A" ; String cur = "" ; if ( n == 1 ) { return 'A' ; } for ( int j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . length ( ) ; i ++ ) { if ( prev . charAt ( i ) == 'A' ) { prev = prev . charAt ( 0 , i ) + 'B' + prev . charAt ( i + 1 ) ; } else { prev = prev . charAt ( 0 , i ) + 'A' + prev . charAt ( i + 1 ) ; } } prev = new String ( prev . reverse ( ) . toArray ( ) ) ; cur += prev ; prev = cur ; } return cur [ k - 1 ] ; }
char FindKthLargest ( String s , int k ) { char tmp [ ] = s . charAt ( ) ; Arrays . sort ( tmp ) ; Arrays . reverse ( tmp ) ; return tmp [ k - 1 ] ; }
int SubArraylen ( int arr [ ] , int n , int k ) { Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; mp . put ( arr [ 0 ] , 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp . put ( arr [ i ] , i ) ; } int length = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) { continue ; } else { int x = arr [ i ] - k ; if ( x == 0 ) { length = Math . min ( length , i ) ; } if ( ! mp . get ( x ) ) { continue ; } else { length = Math . min ( length , i - mp . get ( x ) ) ; } } return length ; }
int FindMaxLen ( int a [ ] , int k ) { int n = a . size ( ) ; a . sort ( ) ; Map < Integer , Integer > vis = new HashMap < Integer , Integer > ( Enumerable . repeat ( false , n ) ) ; Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a [ i ] , i ) ; } int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( vis [ i ] ) { int check = a [ i ] * k ; if ( mp . get ( check ) ) == null ) { c ++ ; vis . put ( mp . get ( check ) ) + 1 ) ; } } } return n - c ; }
int MinDistancePoints ( int a [ ] , int k , int n ) { Map < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; Queue < Integer > q = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { m . put ( a [ i ] , 1 ) ; q . put ( a [ i ] ) ; } List < Integer > ans = new ArrayList < Integer > ( ) ; while ( k > 0 ) { int x = q . peek ( ) ; if ( m . get ( x - 1 ) == null ) { m . put ( x - 1 , 1 ) ; ans . add ( x - 1 ) ; k -- ; } if ( ! m . get ( x + 1 ) && k > 0 ) { m . put ( x + 1 , 1 ) ; q . put ( x + 1 ) ; ans . add ( x + 1 ) ; k -- ; } } return ans ; }
boolean IsValidLen ( String s , int length , int k ) { int n = s . length ( ) ; HashMap < Character , Integer > mp = new HashMap < Character , Integer > ( ) ; int right = 0 ; while ( right < length ) { if ( mp . containsKey ( s . charAt ( right ) ) ) { mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; } else { mp . put ( s . charAt ( right ) , 1 ) ; } right ++ ; } if ( mp . get ( s . charAt ( right - length ) ) == 0 ) { mp . put ( s . charAt ( right - length ) , mp . get ( s . charAt ( right - length ) ) - 1 ) ; } if ( mp . get ( s . charAt ( right - length ) ) == 0 ) { mp . put ( s . charAt ( right - length ) ) ; } if ( mp . get ( s . charAt ( right - length ) ) == 0 ) { mp . put ( s . charAt ( right - length ) ) ; } if ( mp . get ( s . charAt ( right - length ) ) == 0 ) { mp . put ( s . charAt ( right - length ) ) ; } if ( mp . get ( s . charAt ( right - length ) ) == 0 ) { mp . put ( s . charAt ( right - length ) ) ; } if ( mp . get ( s . charAt ( right - length ) ) ; } if ( mp . get ( s . charAt ( right - length ) ) ; } if ( mp . get ( s . charAt ( right - length ) ) ; }
int Partition ( int arr [ ] , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; ( arr [ i ] , arr [ j ] ) = ( arr [ j ] , arr [ i ] ) ; } } ( arr [ i + 1 ] , arr [ high ] ) = ( arr [ high ] , arr [ i + 1 ] ) ; return i + 1 ; }
int StrScore ( String strs [ ] , String s , int n ) { Map < String , Integer > m = new HashMap < String , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . put ( strs [ i ] , i + 1 ) ; } if ( m . get ( s ) == null ) { return 0 ; } int score = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { score += s . charAt ( i ) - 'a' + 1 ; } score = score * m . get ( s ) ; return score ; }
int CountEle ( int s , int a [ ] , int n ) { Map < Integer , boolean > mp = new HashMap < Integer , boolean > ( ) ; List < Integer > ans = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int num = a [ i ] ; if ( mp . get ( num ) == null ) { ans . add ( 0 ) ; } else { int cnt = 0 ; while ( s [ 0 ] != num ) { mp . put ( s [ 0 ] , true ) ; s . removeAt ( 0 ) ; cnt ++ ; } s . removeAt ( 0 ) ; cnt ++ ; ans . add ( cnt ) ; } } return ans ; }
int MaxDistinctChar ( String s , int n , int k ) { Map < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( s . charAt ( i ) ) ) { freq . put ( s . charAt ( i ) , freq . get ( s . charAt ( i ) ) + 1 ) ; } else { freq . put ( s . charAt ( i ) , 1 ) ; } } List < Integer > v = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . charAt ( i ) - 1 , k ) ; v [ i ] = v . charAt ( i ) - mn ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . charAt ( i ) - 1 , k ) ; v [ i ] = v . charAt ( i ) - mn ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) if ( v . charAt ( i ) == 1 ) res ++ ; return res ; }
int FindKth ( int arr [ ] , int n , int k ) { HashSet < Integer > missing = new HashSet < Integer > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . add ( arr [ i ] ) ; } int maxM = arr . max ( ) ; int minM = arr . min ( ) ; for ( int i = minM + 1 ; i < maxM ; i ++ ) { if ( missing . contains ( i ) ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; }
boolean AlmostSort ( int a [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { ( a [ i ] , a [ i + 1 ] ) = ( a [ i + 1 ] , a [ i ] ) ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) if ( a [ i ] > a [ i + 1 ] ) return false ; return true ; }
int MaximumSum ( String s , int n , int k ) { int sum = 0 ; List < Integer > freq = new ArrayList < Integer > ( Enumerable . repeat ( 0 , 256 ) ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ s . charAt ( i ) ] ++ ; } freq . sort ( ( a , b ) => b - a ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; }
int FindMinOperations ( int arr [ ] , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int j = i ; j < n ; j += k ) { freq [ arr [ j ] ] = freq . getValueOrDefault ( arr [ j ] , 0 ) + 1 ; } int max1 = 0 , num = 0 ; for ( var entry : freq ) { if ( entry . Key > max1 ) { max1 = entry . Value ; num = entry . Key ; } } for ( var entry : freq ) { if ( entry . Key != num ) { operations += entry . Value ; } } } return operations ; }
int SubString ( String s , int n ) { int v [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int length = 1 ; length <= n - i ; length ++ ) { String find = s . charAt ( i , length ) ; v . add ( find ) ; } } return v ; }
boolean CheckUniqueFrequency ( int arr [ ] , int n ) { Map < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ arr [ i ] ] = freq . getValueOrDefault ( arr [ i ] , 0 ) + 1 ; } HashSet < Integer > uniqueFreq = new HashSet < Integer > ( ) ; for ( var entry : freq ) { if ( uniqueFreq . containsKey ( entry . Value ) ) { return false ; } else { uniqueFreq . add ( entry . Value ) ; } } return true ; }
int MinCost ( String str1 , String str2 , int n ) { int cost = 0 ; char [ ] tmp = str1 . toCharArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 [ i ] ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) { ( tmp [ i ] , tmp [ i + 1 ] ) = ( tmp [ i + 1 ] , tmp [ i ] ) ; cost ++ ; } else { cost ++ ; } } } return cost ; }
boolean IsValidNum ( String x ) { Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( mp . containsKey ( x . charAt ( i ) - '0' ) ) { return false ; } else if ( x . charAt ( i ) - '0' > 5 ) { return false ; } else { mp . put ( x . charAt ( i ) - '0' , 1 ) ; } } return true ; }
int MinimizeDiff ( int arr [ ] , int n , int k ) { int max = arr . max ( ) ; int min = arr . min ( ) ; if ( max - min <= k ) { return max - min ; } int avg = ( max + min ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = arr . max ( ) ; min = arr . min ( ) ; return max - min ; }
int GetMinCost ( int arr [ ] , int n ) { int minEle = arr . min ( ) ; return minEle * ( n - 1 ) ; }
boolean Possibility ( HashMap < Integer , Integer > m , int length , String s ) { int countOdd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( m . get ( s . charAt ( i ) - '0' ) & 1 ) != 0 ) { countOdd ++ ; } if ( countOdd > 1 ) { return false ; } } return true ; }
int MinimumCostOfBreaking ( int x [ ] , int y [ ] , int m , int n ) { int res = 0 ; x . sort ( ( a , b ) => b - a ) ; y . sort ( ( a , b ) => b - a ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += x [ i ++ ] ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y [ j ++ ] ; } res += total * hzntl ; return res ; }
int FindMaximumScore ( int a [ ] , int n ) { Map < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( a [ i ] ) ) { freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; } else { freq . put ( a [ i ] , 1 ) ; } } int [ ] dp = new int [ a . max ( ) + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = freq . get ( 1 ) ; for ( int i = 2 ; i < dp . length ; i ++ ) { dp [ i ] = Math . max ( dp [ i - 1 ] , dp [ i - 2 ] + freq . get ( i , 0 ) * i ) ; } return dp [ dp . length - 1 ] ; }
int CountWays ( String s , String t , int k , int mod ) { int n = s . length ( ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String p = s . charAt ( i , n - i ) + s . charAt ( 0 , i ) ; if ( p == t ) { a ++ ; } else { b ++ ; } } int [ ] dp1 = new int [ k + 1 ] ; int [ ] dp2 = new int [ k + 1 ] ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; } return dp1 [ k ] ; }
int FindSubarraySum ( int arr [ ] , int n , int k ) { Map < Integer , Integer > prevSum = new HashMap < Integer , Integer > ( ) ; int res = 0 ; int currSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { currSum += arr [ i ] ; if ( currSum == k ) { res ++ ; } if ( prevSum . containsKey ( currSum - k ) ) { res += prevSum . get ( currSum - k ) ; } prevSum . put ( currSum , 0 ) + 1 ; } return res ; }
int MaximumOccurrence ( String s ) { int n = s . length ( ) ; HashMap < String , Integer > freq = new HashMap < String , Integer > ( ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { String temp = "" ; temp += s . charAt ( i ) ; freq [ temp ] = freq . GetValueOrDefault ( temp , 0 ) + 1 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { String temp = "" ; temp += s . charAt ( i ) ; temp += s . charAt ( j ) ; freq [ temp ] = freq . GetValueOrDefault ( temp , 0 ) + 1 ; } } int answer = Integer . MIN_VALUE ; for ( var entry : freq ) { answer = Math . max ( answer , entry . Value ) ; } return answer ; }
int CountCharacters ( String strings [ ] , String chars ) { int res = 0 ; HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < chars . length ( ) ; i ++ ) { freq [ chars . charAt ( i ) ] = freq . getValueOrDefault ( chars . charAt ( i ) , 0 ) + 1 ; } for ( String st : strings ) { boolean flag = true ; for ( char c : st . charAt ( ) ) { if ( freq . containsKey ( c ) ) { flag = false ; break ; } } if ( flag ) { res += st . length ( ) ; } } return res ; }
int DistinctSubstring ( String p , String q , int k , int n ) { HashSet < String > ss = new HashSet < String > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int sum = 0 ; String s = "" ; for ( int j = i ; j < n ; ++ j ) { int pos = p . charAt ( j ) - 'a' ; sum += q . charAt ( pos ) - '0' ; s += p . charAt ( j ) ; if ( sum <= k ) { ss . add ( s ) ; } else { break ; } } } return ss . size ( ) ; }
int uniqueMorseRep ( String arr [ ] ) { int morseCode = new int [ arr . length ( ) ] ; for ( int i = 0 ; i < n ; i ++ ) { String temp = "" ; int m = arr . length ( ) ; for ( int j = 0 ; j < m ; j ++ ) { temp += morseCode [ arr . charAt ( i ) . charAt ( j ) - 'a' ] ; } st . add ( temp ) ; } return st . size ( ) ; }
int CountSubstrings ( String st , int k ) { int n = st . length ( ) ; int answer = 0 ; HashMap < Character , Integer > map = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( map . containsKey ( st . charAt ( i ) ) ) { map . put ( st . charAt ( i ) , map . get ( st . charAt ( i ) ) + 1 ) ; } else { map . put ( st . charAt ( i ) , 1 ) ; } } if ( map . size ( ) == k ) { answer ++ ; } } return answer ; }
boolean CanConstruct ( String s , int k ) { Map < Character , Integer > m = new HashMap < Character , Integer > ( ) ; int p = 0 ; if ( s . length ( ) == k ) { return true ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; } if ( k > s . length ( ) ) { return false ; } else { for ( var h : m ) { if ( h . Value % 2 != 0 ) { p = p + 1 ; } } } if ( k < p ) { return false ; } return true ; }
boolean EqualIgnoreCase ( String str1 , String str2 ) { String str1 = str1 . toUpperCase ( ) ; str2 = str2 . toUpperCase ( ) ;  return str1 . equals ( str2 ) ; }
int FindLongestSub ( String bin ) { int n = bin . length ( ) , i ; int sum = 0 ; HashMap < Integer , Integer > prevSum = new HashMap < Integer , Integer > ( ) ; int maxLen = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin . charAt ( i ) == '1' ) { sum ++ ; } else { sum -- ; } if ( sum > 0 ) { maxLen = i + 1 ; } else if ( sum <= 0 ) { if ( prevSum . containsKey ( sum - 1 ) ) { int currLen = i - prevSum . get ( sum - 1 ) ; maxLen = Math . max ( maxLen , currLen ) ; } } if ( ! prevSum . get ( sum ) ) { prevSum . put ( sum , i ) ; } } return maxLen ; }
boolean HasAllCodes ( String s , int k ) { HashSet < String > us = new HashSet < String > ( ) ; for ( int i = 0 ; i + k <= s . length ( ) ; i ++ ) { us . add ( s . charAt ( i , k ) ) ; } return us . size ( ) == 1 << k ; }
boolean CheckPalin ( String word ) { int n = word . length ( ) ; word = word . toLowerCase ( ) ; for ( int i = 0 ; i < n ; i ++ , n -- ) if ( word . charAt ( i ) != word . charAt ( n - 1 ) ) return false ; return true ; }
String Convert ( String st ) { String w = "" , z = "" ; st = st . toUpperCase ( ) + " " ; for ( int i = 0 ; i < st . length ( ) ; i ++ ) { char ch = st . charAt ( i ) ; if ( ch != ' ' ) { w += ch ; } else { z += Char . toLowerCase ( w [ 0 ] ) + w . charAt ( 1 ) + " " ; w = "" ; } } return z ; }
int MaxLines ( int n , int x1 , int y1 , int x2 , int y2 ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; double slope ; for ( int i = 0 ; i < n ; ++ i ) { if ( x1 [ i ] == x2 [ i ] ) { slope = int . MAX_VALUE ; } else { slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; } s . add ( slope ) ; } return s . size ( ) ; }
int PrimeFactor ( int n ) { Map < Integer , Integer > primef = new HashMap < Integer , Integer > ( ) ; while ( n % 2 == 0 ) { if ( primef . containsKey ( 2 ) ) { primef . put ( 2 , 1 ) ; } else { primef . put ( 2 , 1 ) ; } n /= 2 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { if ( primef . get ( i ) ) == null ) { primef . put ( i , 1 ) ; } else { primef . put ( i , 1 ) ; } n /= i ; } } if ( n > 2 ) { primef . put ( n , 1 ) ; } return primef ; }
String IsDivisibleByDivisor ( int s , int d ) { s %= d ; List < Integer > hashMap = new ArrayList < Integer > ( ) ; hashMap . add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hashMap . get ( s ) == null ) { return "Yes" ; } return "No" ; } else { hashMap . put ( s ) ; } } return "Yes" ; }
boolean OddSum ( int a [ ] , int n , int k ) { HashSet < Integer > odd = new HashSet < Integer > ( ) ; HashSet < Integer > even = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { even . add ( a [ i ] ) ; } else { odd . add ( a [ i ] ) ; } } if ( odd . size ( ) >= k ) { return true ; } boolean flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= even . size ( ) ) { return true ; } } return flag ; }
int DayOfYear ( String date ) { int days [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int year = int . parse ( date . charAt ( 0 , 4 ) ) ; int month = int . parse ( date . charAt ( 5 , 2 ) ) ; int day = int . parse ( date . charAt ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days [ month - 2 ] ; -- month ; } return day ; }
boolean IsPerfectSquare ( int arr [ ] , int n ) { Map < Integer , Integer > umap = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { umap [ arr [ i ] ] = umap . getValueOrDefault ( arr [ i ] , 0 ) + 1 ; } for ( var itr : umap ) { if ( itr . Value % 2 == 1 ) { return false ; } } return true ; }
int MinMoves ( int n ) { String s = n . toString ( ) ; int ans = Integer . MAX_VALUE ; int length = s . length ( ) ; for ( int i = 0 ; i < length ; ++ i ) { for ( int j = 0 ; j < length ; ++ j ) { if ( i == j ) { continue ; } char [ ] t = s . charAt ( j ) ; int cur = 0 ; for ( int k = i ; k < length - 1 ; ++ k ) { ( t [ k ] , t [ k + 1 ] ) = ( t [ k + 1 ] , t [ k ] ) ; ++ cur ; } for ( int k = 0 ; k < length ; ++ k ) { if ( t . charAt ( k ) != '0' ) { pos = k ; break ; } } for ( int k = 0 ; k < length ; ++ k ) { if ( t . charAt ( k ) != '0' ) { pos = k ; break ; } } for ( int k = pos ; k < length ; ++ k ) { if ( t . charAt ( k ) != '0' ) { pos = k ; break ; } }
int MinimumOperations ( int a [ ] , int n ) { Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; } int count = 0 ; for ( var entry : mp ) { if ( entry . Value > 1 ) { count += entry . Value - 1 ; } } return count ; }
int KaprekarRec ( int n , int prev ) { if ( n == 0 ) { return 0 ; } prev = n ; int [ ] digits = new int [ 4 ] ; Arrays . sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } Array . sort ( digits ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } int diff = Math . abs ( asc - desc ) ; if ( diff == prev ) { return diff ; } return KaprekarRec ( diff , prev ) ; }
String FractionToDecimal ( int numr , int denr ) { String res = "" ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; int rem = numr % denr ; while ( rem != 0 && mp . get ( rem ) == null ) { mp . put ( rem , 0 ) ; rem = rem * 10 ; int resPart = rem / denr ; res += resPart . toString ( ) ; rem = rem % denr ; } if ( rem == 0 ) { return "" ; } if ( mp . get ( rem ) == null ) { return res . substring ( mp . get ( rem ) ) ; } return "" ; }
boolean IsFancy ( String num ) { Map < Character , Character > fp = new HashMap < Character , Character > ( ) ; fp . add ( '0' , '0' ) ; fp . add ( '1' , '1' ) ; fp . add ( '6' , '9' ) ; fp . add ( '8' , '8' ) ; fp . add ( '9' , '6' ) ; int n = num . length ( ) ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( fp . containsKey ( num . charAt ( l ) ) || fp . get ( num . charAt ( l ) ) != num . charAt ( r ) ) { return false ; } l ++ ; r -- ; } return true ; }
double DistinctOddRatio ( int numbers [ ] ) { int distinctCount = numbers . size ( ) ; int distinctOddCount = numbers . get ( 0 ) ; return ( double ) distinctOddCount / distinctCount ; }
int CompareSum ( int numbers [ ] , int words [ ] ) { int intSum = numbers . sum ( ) ; int wordLengthSum = words . sum ( w => w . length ( ) ) ; if ( intSum < wordLengthSum ) { return - 1 ; } if ( intSum > wordLengthSum ) { return 1 ; } return 0 ; }
boolean AllLongerThan ( String shortWords [ ] , String longWords [ ] ) { int maxOfShort = shortWords . max ( w => w . length ) ; int minOfLong = longWords . min ( w => w . length ) ; return minOfLong > maxOfShort ; }
int CompareOddEvenRange ( int numbers [ ] ) { int rangeOdd = numbers . where ( n => n % 2 == 1 ) . max ( ) - numbers . where ( n => n % 2 == 1 ) . min ( ) ; int rangeEven = numbers . where ( n => n % 2 == 0 ) . max ( ) - numbers . where ( n => n % 2 == 0 ) . min ( ) ; if ( rangeOdd < rangeEven ) { return - 1 ; } if ( rangeOdd > rangeEven ) { return 1 ; } return 0 ; }
double AverageDistinctLength ( String words [ ] ) { double averageLen = words . size ( ) . average ( w => w . length ( ) ) ; return averageLen ; }
int WithDrawBalance ( int start , int withdrawals [ ] ) { int end = withdrawals . get ( start ) ; return end ; }
String FirstShortAndStartsWithO ( String words [ ] ) { String matchedElement = words . stream ( ) . findFirst ( ) . orElse ( w => w . charAt ( 0 ) == 'o' , "" ) ; return matchedElement ; }
int BigNumberAtIndex ( int numbers [ ] , int index ) { int targetNum = numbers . where ( n => n > 5 ) . elementAt ( index ) ; return targetNum ; }
boolean ContainsSquareInRange ( int rangeStart , int rangeLength ) { boolean containsSquare = Enumerable . range ( rangeStart , rangeLength ) . any ( n => Math . pow ( ( int ) Math . sqrt ( n ) , 2 ) == n ) ; return containsSquare ; }
void GroupNumbersByMod ( int numbers [ ] , int mod ) { var numberGroups = numbers . groupBy ( n => n % mod ) . ToDictionary ( g => g . Key , g => g . ToList ( ) ) ; return numberGroups ; }
void GroupWordsByFirstChar ( String words [ ] ) { var wordGroups = words . groupBy ( w => w [ 0 ] ) . ToDictionary ( g => g . Key , g => g . ToList ( ) ) ; return wordGroups ; }
int OrderByLengthAndDescending ( String words [ ] ) { var sortedWords = words . sort ( w => w . length ( ) ) . thenByDescending ( w => w ) . toList ( ) ; return sortedWords ; }
int OrderFirstCharDescendingReverse ( String words [ ] ) { var sortedWords = words . orderByDescending ( w => w [ 0 ] ) . ThenBy ( w => w ) . reverse ( ) . toArray ( ) ; return sortedWords ; }
int GetSubListOfNegative ( int numbers [ ] , int start , int length ) { int subList [ ] = numbers . skip ( start ) . where ( n => n < 0 ) . take ( length ) . toList ( ) ; return subList ; }
int GetPositiveSequence ( int numbers [ ] ) { int subSequence [ ] = numbers . skip ( n => n <= 0 ) . takeWhile ( n => n >= 0 ) . toList ( ) ; return subSequence ; }
int GetLargerThanIndexSequence ( int numbers [ ] ) { int subSequence [ ] = Enumerable . range ( 0 , numbers . size ( ) ) . skipWhile ( i => numbers [ i ] < i ) . takeWhile ( i => numbers [ i ] >= i ) . select ( i => numbers [ i ] ) . toList ( ) ; return subSequence ; }
void RearrangeWordByIndexes ( String words [ ] , int indexes [ ] ) { int newIndexes = indexes . where ( n => n >= words . size ( ) ) . select ( n => n % words . size ( ) ) . ToList ( ) ; List < String > newWords = newIndexes . select ( n => words [ n ] ) . ToList ( ) ; return newWords ; }
int GetWordsUpperLower ( int words [ ] ) { var upperLowerWords = words . select ( w => new ArrayList < String > { w . toUpperCase ( ) , w . toLowerCase ( ) } ) . toList ( ) ; return upperLowerWords ; }
boolean SelectIfInPlace ( int numbers [ ] ) { int numsInPlace [ ] = numbers . select ( ( num , index ) => num == index ) . toList ( ) ; return numsInPlace ; }
int SelectPairs ( int numbersA [ ] , int numbersB [ ] ) { var pairs = numbersA . selectMany ( a => numbersB . where ( b => a < b ) , ( a , b ) => new ArrayList < Integer > { a , b } ) . toList ( ) ; return pairs ; }
int StringCrossJoin ( int endWords [ ] , int beginWords [ ] ) { int crossStrings [ ] = beginWords . join ( endWords , b => b [ 0 ] , e => e [ ^ 1 ] , ( b , e ) => e + " " + b ) . toList ( ) ; return crossStrings ; }
int ElementsContainSubword ( String words [ ] , String subword ) { if ( words . size ( ) > 5 ) { return 1 ; } if ( words . get ( 5 ) . contains ( subword ) ) ) { return 0 ; } return - 1 ; }
int ConcatLargeNumbers ( int numbersA [ ] , int numbersB [ ] , int flag ) { int allNumbers [ ] = numbersA . filter ( n => n > flag ) . concat ( numbersB . filter ( n => n > flag ) ) . toList ( ) ; return allNumbers ; }
int DotProduct ( int vectorA [ ] , int vectorB [ ] ) { int dotProduct = vectorA . zip ( vectorB , ( a , b ) => a * b ) . sum ( ) ; return dotProduct ; }
int SetDifference ( int setA [ ] , int setB [ ] ) { var difference = setA . union ( setB ) . Except ( setA . Intersect ( setB ) ) . toList ( ) ; difference . sort ( ) ; return difference ; }
