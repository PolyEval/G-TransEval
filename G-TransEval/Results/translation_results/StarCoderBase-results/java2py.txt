def greatest_common_divisor(a, b):
    if a == 0 or b == 0:
        return a + b
    if a == b:
        return a
    if a > b:
        return greatest_common_divisor(a % b, b)
    else:
        return greatest_common_divisor(a, b % a)
--------------------------------
def largest_divisor(n):
    for i in range(2, n + 1):
        if n % i == 0:
            return n // i
    return 1
--------------------------------
def is_prime(n):
    if n < 2:
        return False
    for k in range(2, n):
        if n % k == 0:
            return False
    return True
--------------------------------
def fizz_buzz(n):
    count = 0
    for i in range(1, n):
        if i % 11 == 0 or i % 13 == 0:
            q = i
            while q > 0:
                if q % 10 == 7:
                    count += 1
                q //= 10
    return count
--------------------------------
def prime_fib(n):
    f0 = 0
    f1 = 1
    while n > 0:
        p = f0 + f1
        is_prime = p >= 2
        for i in range(2, p):
            if p % i == 0:
                is_prime = False
                break
        if is_prime:
            n -= 1
        f0 = f1
        f1 = p
    return f1
--------------------------------
def triangle_area(a, h):
    return a * h / 2
--------------------------------
def modp(n, p):
    ret = 1
    for i in range(n):
        ret = (ret * 2) % p
    return ret
--------------------------------
def add(x, y):
    return x + y
--------------------------------
def fib(n):
    if n == 0:
        return 0
    if n == 1:
        return 1
    return fib(n - 1) + fib(n - 2)
--------------------------------
def largest_prime_factor(n):
    for i in range(2, n):
        while n % i == 0 and n > i:
            n /= i
    return n
--------------------------------
def sum_to_n(n):
    result = 0
    for i in range(1, n + 1):
        result += i
    return result
--------------------------------
def fibfib(n: int):
    if n == 0:
        return 0
    if n == 1:
        return 0
    if n == 2:
        return 1
    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)
--------------------------------
def is_multiply_prime(a):
    num = 0
    for i in range(2, a + 1):
        while a % i == 0 and a >= i:
            a //= i
            num += 1
    return num == 3
--------------------------------
def is_simple_power(x, n):
    if n == 1:
        return x == 1
    power = 1
    while power < x:
        power *= n
    return power == x
--------------------------------
def choose_num(x, y):
    if x > y:
        return -1
    if y % 2 == 0:
        return y
    if x == y:
        return -1
    return y - 1
--------------------------------
def is_equal_to_sum_even(n):
    return (n % 2 == 0) and (n >= 8)
--------------------------------
def special_factorial(n):
    fact = 1
    special_fact = 1
    for i in range(1, n+1):
        fact *= i
        special_fact *= fact
    return special_fact
--------------------------------
def x_or_y(n, x, y):
    is_prime = n >= 2
    for i in range(2, n):
        if n % i == 0:
            is_prime = False
            break
    if is_prime:
        return x
    return y
--------------------------------
def right_angle_triangle(a, b, c):
    return (a * a == b * b + c * c) or (b * b == a * a + c * c) or (c * c == a * a + b * b)
--------------------------------
def fast_pow(n, k):
    if k == 0:
        return 1
    temp = fast_pow(n, k // 2)
    if k % 2 == 0:
        return temp * temp
    else:
        return n * temp * temp
--------------------------------
def is_palin(s):
    l = len(s) // 2
    for i in range(l):
        if s[i]!= s[len(s) - i - 1]:
            return False
    return True
--------------------------------
def find_sum(n):
    ans = 0
    temp = 0
    for i in range(1, n + 1):
        temp = i - 1
        num = 1
        while temp < n:
            if temp + i <= n:
                ans += i * num
            else:
                ans += (n - temp) * num
            temp += i
            num += 1
    return ans
--------------------------------
def get_next_gap(gap):
    gap = gap * 10 / 13
    if gap < 1:
        return 1
    return gap
--------------------------------
def count_non_decreasing(n):
    k = 10
    count = 1
    for i in range(1, n + 1):
        count *= k + i - 1
        count /= i
    return count
--------------------------------
def power(x, y):
    if y == 0:
        return 1
    elif y % 2 == 0:
        return power(x, y // 2) * power(x, y // 2)
    else:
        return x * power(x, y // 2) * power(x, y // 2)
--------------------------------
def power(x, y):
    if y == 0:
        return 1
    temp = power(x, y // 2)
    if y % 2 == 0:
        return temp * temp
    else:
        if y > 0:
            return x * temp * temp
        else:
            return temp * temp / x
--------------------------------
def multiply(x, y):
    if y == 0:
        return 0
    elif y > 0:
        return x + multiply(x, y - 1)
    else:
        return -multiply(x, -y)
--------------------------------
def smallest(x, y, z):
    if y // x == 0:
        return y // z == 0 and y or z
    return x // z == 0 and x or z
--------------------------------
def is_power_of_four(n):
    if n == 0:
        return False
    while n!= 1:
        if n % 4!= 0:
            return False
        n = n / 4
    return True
--------------------------------
def mod_inverse(a, m):
    m0 = m
    x0 = 0
    x1 = 1
    if m == 1:
        return 0
    while a > 1:
        q = a // m
        t = m
        m = a % m
        a = t
        t = x0
        x0 = x1 - q * x0
        x1 = t
    if x1 < 0:
        x1 += m0
    return x1
--------------------------------
def cnt_rotations(s, n):
    s2 = s + s
    pre = [0] * (2 * n)
    for i in range(2 * n):
        if i!= 0:
            pre[i] += pre[i - 1]
        if s2[i] in 'aeiou':
            pre[i] += 1
    ans = 0
    for i in range(n - 1, 2 * n - 1):
        r = i
        l = i - n
        x1 = pre[r]
        if l >= 0:
            x1 -= pre[l]
        r = i - n // 2
        left = pre[r]
        if l >= 0:
            left -= pre[l]
        right = x1 - left
        if left > right:
            ans += 1
    return ans
--------------------------------
def binomial_coeff(n, k):
    res = 1
    if k > n - k:
        k = n - k
    for i in range(0, k):
        res *= n - i
        res /= i + 1
    return res
--------------------------------
def is_prefix(temp, s):
    if len(temp) < len(s):
        return False
    else:
        for i in range(len(s)):
            if s[i]!= temp[i]:
                return False
        return True
--------------------------------
def lexicographically_smallest_string(s, n):
    last_ze = -1
    ans = ""
    for i in range(n - 1, -1, -1):
        if s[i] == '0':
            last_ze = i
            break
    for i in range(n):
        if i <= last_ze and s[i] == '0':
            ans += s[i]
        elif i > last_ze:
            ans += s[i]
    return ans
--------------------------------
def calculate_max(n, m, k):
    ans = -1
    low = 0
    high = m
    while low <= high:
        mid = (low + high) // 2
        val = 0
        l = k - 1
        r = n - k
        val += mid
        if mid >= l:
            val += l * (2 * mid - l - 1) // 2
        else:
            val += mid * (mid - 1) // 2 + (l - mid)
        if mid >= r:
            val += r * (2 * mid - r - 1) // 2
        else:
            val += mid * (mid - 1) // 2 + (r - mid)
        if val <= m:
            ans = max(ans, mid)
            low = mid + 1
        else:
            high = mid - 1
    return ans
--------------------------------
def find_length(s, i, j):
    required = i
    length = 0
    for curr in s:
        if curr == required:
            length += 1
            if required == i:
                required = j
            else:
                required = i
    return length
--------------------------------
def check_reverse(left_sum, right_sum):
    rev = 0
    temp = right_sum
    while temp!= 0:
        rev = rev * 10 + temp % 10
        temp //= 10
    if rev == left_sum:
        return True
    return False
--------------------------------
def is_composite(n):
    if n <= 1:
        return False
    if n <= 3:
        return False
    if n % 2 == 0 or n % 3 == 0:
        return True
    for i in range(5, n, 6):
        if n % i == 0 or n % (i + 2) == 0:
            return True
    return False
--------------------------------
def min_deletion(s):
    n = len(s)
    first_idx_1 = -1
    last_idx_0 = -1
    for i in range(n):
        if s[i] == '1':
            first_idx_1 = i
            break
    for i in range(n - 1, -1, -1):
        if s[i] == '0':
            last_idx_0 = i
            break
    if first_idx_1 == -1 or last_idx_0 == -1:
        return 0
    count_1 = 0
    count_0 = 0
    for i in range(last_idx_0):
        if s[i] == '1':
            count_1 += 1
    for i in range(first_idx_1 + 1, n):
        if s[i] == '0':
            count_0 += 1
    return min(count_0, count_1)
--------------------------------
def min_steps(s, n):
    smaller, cost = 0, 0
    f = [0] * 26
    for i in range(n):
        curr_ele = s[i] - 'a'
        smaller = 0
        for j in range(curr_ele + 1):
            if f[j]!= 0:
                smaller += f[j]
        if smaller == 0:
            cost += i + 1
        else:
            cost += i - smaller + 1
        f[s[i] - 'a'] += 1
    return cost
--------------------------------
def number_of_ways(n):
    count = 0
    for a in range(1, n):
        for b in range(0, n):
            c = n - (a + b)
            if a + b > c and a + c > b and b + c > a:
                count += 1
    return count
--------------------------------
def slope_of_num(num, n):
    slope = 0
    for i in range(1, n - 1):
        if num[i] > num[i - 1] and num[i] > num[i + 1]:
            slope += 1
        elif num[i] < num[i - 1] and num[i] < num[i + 1]:
            slope += 1
    return slope
--------------------------------
def middle_of_three(a, b, c):
    x = a - b
    y = b - c
    z = a - c
    if x * y > 0:
        return b
    elif x * z > 0:
        return c
    else:
        return a
--------------------------------
def count_max_set_bits(left, right):
    while ((left | (left + 1)) <= right):
        left |= left + 1
    return left
--------------------------------
def find_s(s):
    l = 1
    r = (s // 2) + 1
    while l <= r:
        mid = (l + r) // 2
        sum = mid * (mid + 1) // 2
        if sum == s:
            return mid
        elif sum > s:
            r = mid - 1
        else:
            l = mid + 1
    return -1
--------------------------------
def check(s):
    min = 255
    max = 0
    sum = 0
    for i in range(len(s)):
        ascii = ord(s[i])
        if ascii < 96 or ascii > 122:
            return False
        sum += ascii
        if min > ascii:
            min = ascii
        if max < ascii:
            max = ascii
    min -= 1
    eSum = max * (max + 1) / 2 - min * (min + 1) / 2
    return sum == eSum
--------------------------------
def minimum_possible_product(k):
    res = 1
    r = (1 << k) - 1
    for i in range(k):
        res *= r - 1
    res *= r
    return res
--------------------------------
def find_in_grid(i, j):
    if i == j:
        return i * i - (i - 1)
    elif i > j:
        if i % 2 == 0:
            return i * i - (j - 1)
        else:
            return (i - 1) * (i - 1) + 1 + (j - 1)
    else:
        if j % 2 == 0:
            return (j - 1) * (j - 1) + 1 + (i - 1)
        else:
            return j * j - (i - 1)
--------------------------------
def find_min_operations_req_emp_str(s):
    cnt_one = 0
    cnt_zero = 0
    n = len(s)
    for i in range(n):
        if s[i] == '0':
            if cnt_one!= 0:
                cnt_one -= 1
            cnt_zero += 1
        else:
            if cnt_zero!= 0:
                cnt_zero -= 1
            cnt_one += 1
    return cnt_one + cnt_zero
--------------------------------
def is_reachable(x1, y1, x2, y2):
    while x2 > x1 and y2 > y1:
        if x2 > y2:
            x2 %= y2
        else:
            y2 %= x2
    if x2 == x1:
        return (y2 - y1) >= 0 and (y2 - y1) % x1 == 0
    elif y2 == y1:
        return (x2 - x1) >= 0 and (x2 - x1) % y1 == 0
    else:
        return False
--------------------------------
def find_max_soln(n, x, y):
    ans = -1
    for k in range(n + 1):
        if k % x == y:
            ans = max(ans, k)
    return ans if ans >= 0 and ans <= n else -1
--------------------------------
def number_of_pairs(n):
    count = 0
    i = 1
    j = n - 1
    while i < j:
        if i + j == n:
            count += 1
        i += 1
        j -= 1
    return count
--------------------------------
def min_changes(s, n):
    count = 0
    zeros = 0
    ones = 0
    if s[0]!= '1':
        count += 1
        ones += 1
    for i in range(1, n):
        if s[i] == '0':
            zeros += 1
        else:
            ones += 1
        if zeros > ones:
            zeros -= 1
            ones += 1
            count += 1
    return count
--------------------------------
def k_visible_from_left(n, k):
    if n == k:
        return 1
    if k == 1:
        ans = 1
        for i in range(1, n):
            ans *= i
        return ans
    return k_visible_from_left(n - 1, k - 1) + (n - 1) * k_visible_from_left(n - 1, k)
--------------------------------
def find(n, sum):
    if sum > 6 * n or sum < n:
        return 0
    if n == 1:
        if sum >= 1 and sum <= 6:
            return 1.0 / 6
        else:
            return 0
    s = 0
    for i in range(1, 7):
        s += find(n - 1, sum - i) / 6
    return s
--------------------------------
def bin_coff(n, r):
    val = 1
    if r > n - r:
        r = n - r
    for i in range(r):
        val *= n - i
        val /= i + 1
    return val
--------------------------------
def get_mask(val):
    mask = 0
    if val == 0:
        return 1
    while val > 0:
        d = val % 10
        mask |= 1 << d
        val /= 10
    return mask
--------------------------------
def ways_to_k_adjacent_set_bits(n, k, current_index, adjacent_set_bits, last_bit):
    if current_index == n:
        if adjacent_set_bits == k:
            return 1
        return 0
    no_of_ways = 0
    if last_bit == 1:
        no_of_ways += ways_to_k_adjacent_set_bits(n, k, current_index + 1, adjacent_set_bits + 1, 1)
        no_of_ways += ways_to_k_adjacent_set_bits(n, k, current_index + 1, adjacent_set_bits, 0)
    elif last_bit == 0:
        no_of_ways += ways_to_k_adjacent_set_bits(n, k, current_index + 1, adjacent_set_bits, 1)
        no_of_ways += ways_to_k_adjacent_set_bits(n, k, current_index + 1, adjacent_set_bits, 0)
    return no_of_ways
--------------------------------
def check_func(i, j, st):
    if st[i] == '(' and st[j] == ')':
        return 1
    if st[i] == '(' and st[j] == '?':
        return 1
    if st[i] == '?' and st[j] == ')':
        return 1
    if st[i] == '[' and st[j] == ']':
        return 1
    if st[i] == '[' and st[j] == '?':
        return 1
    if st[i] == '?' and st[j] == ']':
        return 1
    if st[i] == '{' and st[j] == '}':
        return 1
    if st[i] == '{' and st[j] == '?':
        return 1
    if st[i] == '?' and st[j] == '}':
        return 1
    return 0
--------------------------------
def find_golomb(n):
    if n == 1:
        return 1
    return 1 + find_golomb(n - find_golomb(find_golomb(n - 1)))
--------------------------------
def all_ones(s, n):
    co = 0
    for i in range(len(s)):
        co += (s[i] == '1')
    return co == n
--------------------------------
def pad(n):
    pPrevPrev = 1
    pPrev = 1
    pCurr = 1
    pNext = 1
    for i in range(3, n + 1):
        pNext = pPrevPrev + pPrev
        pPrevPrev = pPrev
        pPrev = pCurr
        pCurr = pNext
    return pNext
--------------------------------
def odd_length_palindrome(k):
    palin = k
    k = k // 10
    while k > 0:
        rev = k % 10
        palin = palin * 10 + rev
        k = k // 10
    return palin
--------------------------------
def change_string(s0):
    s = list(s0)
    n = len(s0)
    if s[0] == '?':
        s[0] = 'a'
        if s[0] == s[1]:
            s[0] += 1
    for i in range(1, n - 1):
        if s[i] == '?':
            s[i] = 'a'
            if s[i] == s[i - 1]:
                s[i] += 1
            if s[i] == s[i + 1]:
                s[i] += 1
            if s[i] == s[i - 1]:
                s[i] += 1
    if s[n - 1] == '?':
        s[n - 1] = 'a'
        if s[n - 1] == s[n - 2]:
            s[n - 1] += 1
    return ''.join(s)
--------------------------------
def total_hamming_distance(n):
    i = 1
    sum = 0
    while n / i > 0:
        sum = sum + n / i
        i = i * 2
    return sum
--------------------------------
def check_bitonic(s):
    i = 1
    for i in range(1, len(s)):
        if s[i] > s[i-1]:
            continue
        if s[i] <= s[i-1]:
            break
    if i == len(s) - 1:
        return 1
    j = i + 1
    for j in range(i+1, len(s)):
        if s[j] < s[j-1]:
            continue
        if s[j] >= s[j-1]:
            break
    i = j
    if i!= len(s):
        return 0
    return 1
--------------------------------
def ends_with(str, pat):
    pat_len = len(pat)
    str_len = len(str)
    if pat_len > str_len:
        return False
    pat_len -= 1
    str_len -= 1
    while pat_len >= 0:
        if pat[pat_len]!= str[str_len]:
            return False
        pat_len -= 1
        str_len -= 1
    return True
--------------------------------
def get_sum(n, d):
    if n < d:
        return 0
    while n % 10!= d:
        n -= 1
    k = n // 10
    return (k + 1) * d + (k * 10 + 10 * k * k) // 2
--------------------------------
def balanced_string_by_swapping(s):
    unbalanced_pair = 0
    for i in range(len(s)):
        if unbalanced_pair > 0 and s[i] == ']':
            unbalanced_pair -= 1
        elif s[i] == '[':
            unbalanced_pair += 1
    return (unbalanced_pair + 1) // 2
--------------------------------
def compute_hash(s):
    p = 31
    mod = 1000000007
    hash_val = 0
    mul = 1
    for ch in s:
        hash_val = (hash_val + (ord(ch) - ord('a') + 1) * mul) % mod
        mul = mul * p % mod
    return hash_val
--------------------------------
def count_of_substring_with_only_ones(s):
    res = 0
    count = 0
    for i in range(len(s)):
        count = s[i] == '1' and count + 1 or 0
        res = res + count
    return res
--------------------------------
def composite(n):
    flag = 0
    c = 0
    for j in range(1, n+1):
        if n % j == 0:
            c += 1
    if c >= 3:
        flag = 1
    return flag
--------------------------------
def is_div_by_six(s, n):
    sum = 0
    for i in range(n):
        sum += ord(s[i]) - ord('a') + 1
    if sum % 3!= 0:
        return False
    last_digit = (ord(s[n - 1]) - ord('a') + 1) % 10
    if last_digit % 2!= 0:
        return False
    return True
--------------------------------
def is_redundant_braces(s):
    a = 0
    b = 0
    for i in range(len(s)):
        if s[i] == '(' and s[i + 2] == ')':
            return True
        if s[i] == '*' or s[i] == '+' or s[i] == '-' or s[i] == '/':
            a += 1
        if s[i] == '(':
            b += 1
    if b > a:
        return True
    return False
--------------------------------
def count_sub_str(s, n):
    count = 0
    for i in range(0, n - 2):
        if s[i] == '0' and s[i + 1] == '1' and s[i + 2] == '0':
            count += 1
            i += 3
        elif s[i] == '1' and s[i + 1] == '0' and s[i + 2] == '1':
            count += 1
            i += 3
        else:
            i += 1
    return count
--------------------------------
def prefix_occurrences(s):
    c = s[0]
    count_c = 0
    for i in range(len(s)):
        if s[i] == c:
            count_c += 1
    return count_c
--------------------------------
def is_valid(s, len):
    for i in range(1, len):
        if s[i] == s[i - 1]:
            return False
    return True
--------------------------------
def count(s, k):
    n = len(s)
    d = 0
    count = 0
    for i in range(n):
        d += s[i]
    if d % k == 0:
        count += 1
    for i in range(k, n):
        prev = s[i - k]
        d -= prev
        d += s[i]
        if d % k == 0:
            count += 1
    return count
--------------------------------
def find_substring_count(s):
    result = 0
    n = len(s)
    i = 0
    while i < n - 1:
        if s[i] + 1 == s[i + 1]:
            result += 1
            while i < n - 1 and s[i] + 1 == s[i + 1]:
                i += 1
        i += 1
    return result
--------------------------------
def find(s1, s2):
    len1 = len(s1)
    len2 = len(s2)
    if len1!= len2:
        return False
    d = [0] * len1
    d[0] = ord(s2[0]) - ord(s1[0])
    for i in range(1, len1):
        if ord(s1[i]) > ord(s2[i]):
            return False
        else:
            d[i] = ord(s2[i]) - ord(s1[i])
    for i in range(0, len1 - 1):
        if d[i] < d[i + 1]:
            return False
    return True
--------------------------------
def is_in_given_base(s, bas):
    if bas > 16:
        return False
    elif bas <= 10:
        for i in range(len(s)):
            if not (s[i] >= '0' and s[i] < '0' + bas):
                return False
    else:
        for i in range(len(s)):
            if not ((s[i] >= '0' and s[i] < '0' + bas) or (s[i] >= 'A' and s[i] < 'A' + bas - 10)):
                return False
    return True
--------------------------------
def count_non_empty_substr(s):
    n = len(s)
    return n * (n + 1) / 2
--------------------------------
def even_decimal_value(s, n):
    result = 0
    for i in range(n):
        for j in range(i, n):
            decimal_value = 0
            power_of_2 = 1
            for k in range(i, j + 1):
                decimal_value += (ord(s[k]) - ord('0')) * power_of_2
                power_of_2 *= 2
            if decimal_value % 2 == 0:
                result += 1
    return result
--------------------------------
def calculate(s):
    ans = 6
    for i in range(10):
        for j in range(10):
            for k in range(10):
                for l in range(10):
                    for m in range(10):
                        for n in range(10):
                            if i + j + k == l + m + n:
                                c = 0
                                if i!= s[0] - '0':
                                    c += 1
                                if j!= s[1] - '0':
                                    c += 1
                                if k!= s[2] - '0':
                                    c += 1
                                if l!= s[3] - '0':
                                    c += 1
                                if m!= s[4] - '0':
                                    c += 1
                                if n!= s[5] - '0':
                                    c += 1
                                if c < ans:
                                    ans = c
    return ans
--------------------------------
def xor_zero(s):
    one_count = 0
    zero_count = 0
    n = len(s)
    for i in range(n):
        if s[i] == '1':
            one_count += 1
        else:
            zero_count += 1
    if one_count % 2 == 0:
        return zero_count
    return one_count
--------------------------------
def even_length(n):
    res = n
    for j in range(len(n) - 1, -1, -1):
        res += n[j]
    return res
--------------------------------
def count_substring_with_equal_ends(s):
    result = 0
    n = len(s)
    for i in range(n):
        for j in range(i, n):
            if s[i] == s[j]:
                result += 1
    return result
--------------------------------
def normal_slope(a, b, x1, y1):
    g = a / 2
    f = b / 2
    if g - x1 == 0:
        return -1
    slope = (f - y1) / (g - x1)
    if slope == 0:
        return -2
    return slope
--------------------------------
def orthogonality(x1, y1, x2, y2, r1, r2):
    dsquare = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)
    if dsquare == r1 * r1 + r2 * r2:
        return True
    else:
        return False
--------------------------------
def find_area_shaded(a):
    sq_area = a * a
    semi_circle_area = 3.14 * (a * a) / 8
    shaded_area = 4 * semi_circle_area - sq_area
    return shaded_area
--------------------------------
def factorial(a, b):
    res = 1
    for i in range(1, a + b + 1):
        res = res * i
    for i in range(1, a + 1):
        res = res / i
    for i in range(1, b + 1):
        res = res / i
    return res
--------------------------------
def factor_tree(n):
    height = 0
    while n > 1:
        flag = False
        for i in range(2, int(math.sqrt(n)) + 1):
            if n % i == 0:
                n = n // i
                flag = True
                break
        height += 1
        if not flag:
            break
    return height
--------------------------------
def find_if_possible(n, s, x):
    if s >= x and s % 2 == x % 2:
        if n >= 3:
            return "Yes"
        if n == 1:
            if s == x:
                return "Yes"
            else:
                return "No"
        if n == 2:
            c = (s - x) // 2
            a = c
            b = c
            a = a + x
            if (a ^ b) == x:
                return "Yes"
            else:
                return "No"
    return "No"
--------------------------------
def maximum_triplet_xor(a, b, c):
    ans = 0
    for i in range(30, -1, -1):
        cur = 1 << i
        if a >= cur:
            ans += cur
            a -= cur
        elif b >= cur:
            ans += cur
            b -= cur
        elif c >= cur:
            ans += cur
            c -= cur
    return ans
--------------------------------
def item_type(n):
    count = 0
    day = 1
    while count + day * (day + 1) / 2 < n:
        count += day * (day + 1) / 2
        day += 1
    for type in range(day, 0, -1):
        count += type
        if count >= n:
            return type
    return 0
--------------------------------
def max_gcd_in_range(l, r):
    ans = 1
    for z in range(r, 0, -1):
        if (r // z - (l - 1) // z > 1):
            ans = z
            break
    return ans
--------------------------------
def sum_of_digits(n):
    sum = 0
    while n!= 0:
        sum += n % 10
        n = n // 10
    return sum
--------------------------------
def is_rep_unit_num(n, b):
    length = 0
    count_one = 0
    while n!= 0:
        r = n % b
        length += 1
        if r == 1:
            count_one += 1
        n = n // b
    return count_one >= 3 and count_one == length
--------------------------------
def is_straigh_line_num(n):
    if n <= 99:
        return False
    s = str(n)
    d = ord(s[1]) - ord(s[0])
    for i in range(2, len(s)):
        if ord(s[i]) - ord(s[i - 1])!= d:
            return False
    return True
--------------------------------
def get_count(d, n):
    no = n // d
    result = no
    for p in range(2, int(no ** 0.5) + 1):
        if no % p == 0:
            while no % p == 0:
                no //= p
            result -= result // p
    if no > 1:
        result -= result // no
    return result
--------------------------------
def is_even_parity(x):
    parity = 0
    while x!= 0:
        if x % 2 == 1:
            parity += 1
        x = x >> 1
    if parity % 2 == 0:
        return True
    else:
        return False
--------------------------------
def is_perfect(n):
    sum = 1
    for i in range(2, n):
        if n % i == 0:
            if i * i!= n:
                sum = sum + i + n // i
            else:
                sum = sum + i
    if sum == n and n!= 1:
        return n
    return 0
--------------------------------
def log_a_to_base_b(a, b):
    return a > b - 1? 1 + log_a_to_base_b(a / b, b) : 0
--------------------------------
def using_binary_search(start, end, n, s):
    if start >= end:
        return start
    mid = start + (end - start) // 2
    total_sum = n * (n + 1) // 2
    mid_sum = mid * (mid + 1) // 2
    if total_sum - mid_sum <= s:
        return using_binary_search(start, mid, n, s)
    return using_binary_search(mid + 1, end, n, s)
--------------------------------
def min_int(s):
    s1 = list(s)
    for i in range(len(s)):
        if s1[i] >= '5':
            s1[i] = chr(ord('9') - ord(s1[i]) + ord('0'))
    if s1[0] == '0':
        s1[0] = '9'
    return ''.join(s1)
--------------------------------
def count_triplets(a, b, c):
    ans = 0
    for i in range(1, a + 1):
        for j in range(1, b + 1):
            for k in range(1, c + 1):
                if i * k > j * j:
                    ans += 1
    return ans
--------------------------------
def topsy_turvy(s):
    for i in range(len(s)):
        if s[i] == '2' or s[i] == '4' or s[i] == '5' or s[i] == '6' or s[i] == '7' or s[i] == '9':
            return False
    return True
--------------------------------
def sum_of_last_dig(n, m):
    sum = 0
    k = n // m
    arr = [m * (i + 1) % 10 for i in range(10)]
    for i in range(10):
        sum += arr[i]
    rem = k % 10
    ans = k // 10 * sum
    for i in range(rem):
        ans += arr[i]
    return ans
--------------------------------
def total_pay(total_items, price_of_one_item, n, m):
    free_items = 0
    actual = 0
    free_items = total_items // (n + m)
    actual = total_items - free_items
    amount = actual * price_of_one_item
    return amount
--------------------------------
def min_operations(x, y, p, q):
    if y % x!= 0:
        return -1
    d = y // x
    a = 0
    while d % p == 0:
        d //= p
        a += 1
    b = 0
    while d % q == 0:
        d //= q
        b += 1
    if d!= 1:
        return -1
    return a + b
--------------------------------
def is_mersenne(n):
    while n!= 0:
        r = n % 2
        if r == 0:
            return False
        n /= 2
    return True
--------------------------------
def find_third_digit(n):
    if n < 3:
        return 0
    return (n & 1)!= 0
--------------------------------
def is_odd_length(num):
    count = 0
    while num > 0:
        num = num // 10
        count += 1
    if count % 2!= 0:
        return True
    return False
--------------------------------
def check_is_possible(l, r, k):
    count = 0
    for i in range(l, r + 1):
        if i % k == 0:
            count += 1
    return count > 1
--------------------------------
def bytes(kilobytes):
    b = kilobytes * 1024
    return b
--------------------------------
def octahedral_num(n):
    return n * ((2 * n * n) + 1) / 3
--------------------------------
def check_equal(s):
    for i in range(len(s)):
        if s[i]!= '1' and s[i]!= '0' and s[i]!= '8':
            return "No"
    start = 0
    end = len(s) - 1
    while start < end:
        if s[start]!= s[end]:
            return "No"
        start += 1
        end -= 1
    return "Yes"
--------------------------------
def is_undulating(n):
    if len(n) <= 2:
        return False
    for i in range(2, len(n)):
        if n[i - 2]!= n[i]:
            return False
    return True
--------------------------------
def first_digit(n):
    while n >= 10:
        n //= 10
    return n
--------------------------------
def count_digit(n):
    if n == 0:
        return 0
    return 1 + count_digit(n // 10)
--------------------------------
def is_divisible_by_5(s):
    n = len(s)
    return (s[n - 1] == '0' or s[n - 1] == '5')
--------------------------------
def inv(a, m):
    m0 = m
    x0 = 0
    x1 = 1
    if m == 1:
        return 0
    while a > 1:
        q = a // m
        t = m
        m = a % m
        a = t
        t = x0
        x0 = x1 - q * x0
        x1 = t
    if x1 < 0:
        x1 += m0
    return x1
--------------------------------
def only_first_and_last_are_set(n):
    if n == 1:
        return True
    if n == 2:
        return False
    return ((n - 1) & (n - 2)) == 0
--------------------------------
def divide(dividend, divisor):
    sign = ((dividend < 0) ^ (divisor < 0))
    dividend = abs(dividend)
    divisor = abs(divisor)
    quotient = 0
    temp = 0
    for i in range(31, -1, -1):
        if temp + (divisor << i) <= dividend:
            temp += divisor << i
            quotient |= 1 << i
    if sign == -1:
        quotient = -quotient
    return quotient
--------------------------------
def find_profession(level, pos):
    if level == 1:
        return 'e'
    if find_profession(level - 1, (pos + 1) // 2) == 'd':
        return 'd' if pos % 2!= 0 else 'e'
    return 'e' if pos % 2!= 0 else 'd'
--------------------------------
def has_close_elements(numbers, threshold):
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            distance = abs(numbers[i] - numbers[j])
            if distance < threshold:
                return True
    return False
--------------------------------
def truncate_number(number):
    return number % 1.0
--------------------------------
def below_zero(operations):
    balance = 0
    for op in operations:
        balance += op
        if balance < 0:
            return True
    return False
--------------------------------
def mean_absolute_deviation(numbers):
    sum_num = 0
    for num in numbers:
        sum_num += num
    mean = sum_num / len(numbers)
    sum_abs_diff = 0
    for num in numbers:
        sum_abs_diff += abs(num - mean)
    return sum_abs_diff / len(numbers)
--------------------------------
def intersperse(numbers, delimiter):
    result = []
    if len(numbers) == 0:
        return result
    for i in range(len(numbers) - 1):
        result.append(numbers[i])
        result.append(delimiter)
    result.append(numbers[len(numbers) - 1])
    return result
--------------------------------
def sum_product(numbers):
    sum_value = 0
    prod_value = 1
    for n in numbers:
        sum_value += n
        prod_value *= n
    return [sum_value, prod_value]
--------------------------------
def all_prefixes(string):
    result = []
    for i in range(1, len(string) + 1):
        result.append(string[:i])
    return result
--------------------------------
def parse_music(music_string):
    current = ""
    result = []
    for i in range(len(music_string) + 1):
        if i == len(music_string) or music_string[i] == " ":
            if current == "o":
                result.append(4)
            if current == "o|":
                result.append(2)
            if current == ".|":
                result.append(1)
            current = ""
        else:
            current += music_string[i]
    return result
--------------------------------
def strlen(s):
    return len(s)
--------------------------------
def factorize(n):
    factors = []
    for i in range(2, n + 1):
        if n % i == 0:
            n /= i
            factors.append(i)
            i -= 1
    return factors
--------------------------------
def concatenate(strings):
    result = ""
    for s in strings:
        result += s
    return result
--------------------------------
def get_positive(l):
    result = []
    for i in range(len(l)):
        if l[i] > 0:
            result.append(l[i])
    return result
--------------------------------
def sort_even(l):
    evens = []
    for i in range(0, len(l), 2):
        evens.append(l[i])
    evens.sort()
    result = []
    for i in range(0, len(l)):
        if i % 2 == 0:
            result.append(evens[i // 2])
        if i % 2 == 1:
            result.append(l[i])
    return result
--------------------------------
def decode_cyclic(s):
    output = ""
    i = 0
    while i <= len(s) - 3:
        x = s[i + 2] + s[i:i + 2]
        output += x
        i += 3
    return output + s[i:]
--------------------------------
def car_race_collision(n):
    return n ** 2
--------------------------------
def incr_list(l):
    result = []
    for i in l:
        result.append(i + 1)
    return result
--------------------------------
def pairs_sum_to_zero(l):
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            if l[i] + l[j] == 0:
                return True
    return False
--------------------------------
def change_base(x, b):
    ret = ""
    while x > 0:
        ret = str(x % b) + ret
        x = x // b
    return ret
--------------------------------
def median(l):
    l.sort()
    if len(l) % 2 == 1:
        return l[len(l) // 2]
    return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0
--------------------------------
def decode_shift(s: str):
    return ''.join([chr((ord(c) + 21 - ord('a')) % 26 + ord('a')) for c in s])
--------------------------------
def below_threshold(l, t):
    for n in l:
        if n >= t:
            return False
    return True
--------------------------------
def correct_bracketing(brackets):
    depth = 0
    for b in brackets:
        if b == '<':
            depth += 1
        if b == '>':
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
--------------------------------
def monotonic(l):
    incr = 0
    decr = 0
    for i in range(1, len(l)):
        if l[i] > l[i - 1]:
            incr = 1
        if l[i] < l[i - 1]:
            decr = 1
    return incr + decr!= 2
--------------------------------
def derivative(xs):
    result = []
    for i in range(1, len(xs)):
        result.append(i * xs[i])
    return result
--------------------------------
def vowels_count(s):
    vowels = "aeiouAEIOU"
    count = 0
    for ch in s:
        if vowels.find(ch)!= -1:
            count += 1
    if s[-1] == 'y' or s[-1] == 'Y':
        count += 1
    return count
--------------------------------
def digit_sum(s):
    sum = 0
    for c in s:
        if c.isupper():
            sum += c
    return sum
--------------------------------
def fruit_distribution(s, n):
    num1 = ""
    num2 = ""
    flag = False
    for i in range(len(s)):
        if s[i].isdigit():
            if not flag:
                num1 += s[i]
            if flag:
                num2 += s[i]
        else:
            if not flag and num1:
                flag = True
    return n - int(num1) - int(num2)
--------------------------------
def pluck(arr):
    result = []
    for i in range(len(arr)):
        if arr[i] % 2 == 0:
            if len(result) == 0:
                result.append(arr[i])
                result.append(i)
            elif arr[i] < result[0]:
                result[0] = arr[i]
                result[1] = i
    return result
--------------------------------
def strange_sort_list(lst):
    res = []
    lst.sort()
    l = 0
    r = len(lst) - 1
    while l < r:
        res.append(lst[l])
        l += 1
        res.append(lst[r])
        r -= 1
    if l == r:
        res.append(lst[l])
    return res
--------------------------------
def triangle_area(a, b, c):
    if a + b <= c or a + c <= b or b + c <= a:
        return -1
    s = (a + b + c) / 2
    return math.sqrt(s * (s - a) * (s - b) * (s - c))
--------------------------------
def will_it_fly(q, w):
    sum = 0
    for i in range(len(q)):
        if q[i]!= q[len(q) - i - 1]:
            return False
        sum += q[i]
    return sum <= w
--------------------------------
def is_cube(a):
    a = abs(a)
    i = round(pow(a, 1.0 / 3))
    return pow(i, 3) == a
--------------------------------
def hex_key(num):
    key = "2357BD"
    total = 0
    for c in num:
        if key.index(c)!= -1:
            total += 1
    return total
--------------------------------
def decimal_to_binary(dec):
    ans = ""
    if dec!= 0:
        while dec > 0:
            ans = str(dec % 2) + ans
            dec = dec // 2
    else:
        ans = "0"
    return "db" + ans + "db"
--------------------------------
def prime_length(s):
    l = len(s)
    if l < 2:
        return False
    for i in range(2, l):
        if l % i == 0:
            return False
    return True
--------------------------------
def starts_one_ends(n):
    if n < 1:
        return 0
    if n == 1:
        return 1
    return int(18 * 10 ** (n - 2))
--------------------------------
def add(lst):
    sum = 0
    for i in range(1, len(lst)):
        if lst[i] % 2 == 0:
            sum += lst[i]
    return sum
--------------------------------
def get_row(lst, x):
    coords = []
    for i in range(len(lst)):
        for j in range(len(lst[i]) - 1, -1, -1):
            if lst[i][j] == x:
                coords.append([i, j])
    return coords
--------------------------------
def next_smallest(lst):
    lst.sort()
    for i in range(1, len(lst)):
        if lst[i]!= lst[i - 1]:
            return lst[i]
    return -1
--------------------------------
def any_int(a, b, c):
    return (a == round(a) and b == round(b) and c == round(c) and (a + b == c or a + c == b or b + c == a))
--------------------------------
def count_up_to(n):
    primes = []
    for i in range(2, n):
        is_prime = True
        for j in range(2, i):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)
    return primes
--------------------------------
def closest_integer(value):
    w = float(value)
    return int(round(w))
--------------------------------
def make_a_pile(n):
    result = []
    for i in range(n):
        result.append(n + 2 * i)
    return result
--------------------------------
def words_string(s):
    current = ""
    words = []
    for i in range(len(s) + 1):
        if i == len(s) or s[i] == " " or s[i] == ",":
            if len(current) > 0:
                words.append(current)
                current = ""
        else:
            current += s[i]
    return words
--------------------------------
def rounded_avg(n, m):
    if n > m:
        return "-1"
    num = (m + n) // 2
    ret = ""
    while num > 0:
        ret = str(num % 2) + ret
        num //= 2
    return ret
--------------------------------
def unique_digits(x):
    digits = []
    for i in x:
        is_unique = True
        for c in str(i).toCharArray():
            if c % 2 == 0:
                is_unique = False
                break
        if is_unique:
            digits.append(i)
    digits.sort()
    return digits
--------------------------------
def count_nums(arr):
    num = 0
    for n in arr:
        neg = -1 if n < 0 else 1
        n = abs(n)
        digits = [int(c) for c in str(n)]
        digits[0] *= neg
        sum = 0
        for d in digits:
            sum += d
        if sum > 0:
            num += 1
    return num
--------------------------------
def move_one_ball(arr):
    if len(arr) == 0:
        return True
    num = 0
    for i in range(1, len(arr)):
        if arr[i] < arr[i - 1]:
            num += 1
    if arr[len(arr) - 1] > arr[0]:
        num += 1
    if num < 2:
        return True
    return False
--------------------------------
def exchange(lst1, lst2):
    odd = 0
    even = 0
    for n in lst1:
        if n % 2 == 1:
            odd += 1
    for n in lst2:
        if n % 2 == 0:
            even += 1
    if even >= odd:
        return "YES"
    return "NO"
--------------------------------
def odd_count(lst):
    results = []
    original_str = "the number of odd elements in the string i of the input."
    for s in lst:
        sum = 0
        for d in s:
            if d.isdigit() and d % 2 == 1:
                sum += 1
        result = ""
        for c in original_str:
            if c == 'i':
                result += str(sum)
            else:
                result += c
        results.append(result)
    return results
--------------------------------
def minSubArraySum(nums):
    min_sum = float('inf')
    sum = 0
    for num in nums:
        sum += num
        if min_sum > sum:
            min_sum = sum
        if sum > 0:
            sum = 0
    return min_sum
--------------------------------
def max_fill(grid, capacity):
    res = 0
    for well in grid:
        sum = 0
        for n in well:
            sum += n
        if sum > 0:
            res += (sum - 1) // capacity + 1
    return res
--------------------------------
def select_words(s, n):
    vowels = "aeiouAEIOU"
    current = ""
    result = []
    consonant_num = 0
    for i in range(len(s) + 1):
        if i == len(s) or s[i] == " ":
            if consonant_num == n:
                result.append(current)
            current = ""
            consonant_num = 0
        else:
            current += s[i]
            if vowels.find(s[i]) == -1:
                consonant_num += 1
    return result
--------------------------------
def solution(lst):
    sum = 0
    for i in range(0, len(lst), 2):
        if (lst[i] % 2 == 1):
            sum += lst[i]
    return sum
--------------------------------
def add_elements(arr, k):
    sum = 0
    for i in range(k):
        if arr[i] >= -99 and arr[i] <= 99:
            sum += arr[i]
    return sum
--------------------------------
def get_odd_collatz(n):
    odd_collatz = []
    while n!= 1:
        if n % 2 == 1:
            odd_collatz.append(n)
            n = n * 3 + 1
        else:
            n = n // 2
    odd_collatz.append(1)
    odd_collatz.sort()
    return odd_collatz
--------------------------------
def is_sorted(lst):
    for i in range(1, len(lst)):
        if lst[i] < lst[i - 1]:
            return False
        if i >= 2 and lst[i] == lst[i - 1] and lst[i] == lst[i - 2]:
            return False
    return True
--------------------------------
def intersection(interval1, interval2):
    inter1 = max(interval1[0], interval2[0])
    inter2 = min(interval1[1], interval2[1])
    l = inter2 - inter1
    if l < 2:
        return "NO"
    for i in range(2, l):
        if l % i == 0:
            return "NO"
    return "YES"
--------------------------------
def prod_signs(arr):
    if len(arr) == 0:
        return -32768
    sum = 0
    prods = 1
    for i in arr:
        sum += abs(i)
        if i == 0:
            prods = 0
        if i < 0:
            prods = -prods
    return sum * prods
--------------------------------
def minPath(grid, k):
    n = len(grid)
    minNum = 0
    for i in range(n):
        for j in range(n):
            if grid[i][j] == 1:
                tmp = []
                if i!= 0:
                    tmp.append(grid[i - 1][j])
                if j!= 0:
                    tmp.append(grid[i][j - 1])
                if i!= n - 1:
                    tmp.append(grid[i + 1][j])
                if j!= n - 1:
                    tmp.append(grid[i][j + 1])
                minNum = min(tmp)
    ans = []
    for i in range(k):
        if i % 2 == 0:
            ans.append(1)
        else:
            ans.append(minNum)
    return ans
--------------------------------
def digits(n):
    prod = 0
    for digit in str(n).toCharArray():
        if digit % 2 == 1:
            if prod == 0:
                prod = 1
            prod *= digit - '0'
    return prod
--------------------------------
def is_nested(s):
    count = 0
    max_count = 0
    for ch in s:
        if ch == '[':
            count += 1
        if ch == ']':
            count -= 1
        if count < 0:
            count = 0
        if count > max_count:
            max_count = count
        if count <= max_count - 2:
            return True
    return False
--------------------------------
def sum_squares(lst):
    sum = 0
    for i in lst:
        sum += math.ceil(i) * math.ceil(i)
    return sum
--------------------------------
def can_arrange(arr):
    index = -1
    for i in range(len(arr)):
        if arr[i] <= i:
            index = i
    return index
--------------------------------
def largest_smallest_integers(lst):
    max_neg = 0
    min_pos = 0
    for n in lst:
        if n < 0 and (max_neg == 0 or n > max_neg):
            max_neg = n
        if n > 0 and (min_pos == 0 or n < min_pos):
            min_pos = n
    return [max_neg, min_pos]
--------------------------------
def fix_spaces(text):
    res = ""
    space_len = 0
    for i in range(len(text) + 1):
        if i == len(text) or text[i]!='':
            if space_len == 1:
                res += '_'
            if space_len == 2:
                res += '__'
            if space_len > 2:
                res += '-'
            space_len = 0
            if i!= len(text):
                res += text[i]
        else:
            space_len += 1
    return res
--------------------------------
def file_name_check(file_name):
    digit_num = 0
    dot_num = 0
    if len(file_name) < 5 or not file_name[0].isalpha():
        return "No"
    suffix = file_name[-4:]
    if suffix!= ".txt" and suffix!= ".exe" and suffix!= ".dll":
        return "No"
    for c in file_name:
        if c.isdigit():
            digit_num += 1
        if c == '.':
            dot_num += 1
    if digit_num > 3 or dot_num!= 1:
        return "No"
    return "Yes"
--------------------------------
def sum_squares(lst):
    sum = 0
    for i in range(len(lst)):
        if i % 3 == 0:
            sum += lst[i] * lst[i]
        elif i % 4 == 0:
            sum += lst[i] * lst[i] * lst[i]
        else:
            sum += lst[i]
    return sum
--------------------------------
def words_in_sentence(sentence):
    result = []
    current = []
    for i in range(len(sentence) + 1):
        if i == len(sentence) or sentence[i] =='':
            is_prime = True
            l = len(current)
            if l < 2:
                is_prime = False
            for j in range(2, l):
                if l % j == 0:
                    is_prime = False
                    break
            if is_prime:
                result.append(''.join(current))
            current = []
        else:
            current.append(sentence[i])
    return''.join(result)
--------------------------------
def simplify(x, n):
    a = 0
    b = 0
    c = 0
    d = 0
    for i in range(len(x)):
        if x[i] == '/':
            a = int(x[:i])
            b = int(x[i+1:])
    for i in range(len(n)):
        if n[i] == '/':
            c = int(n[:i])
            d = int(n[i+1:])
    return (a * c) % (b * d) == 0
--------------------------------
def specialFilter(nums):
    count = 0
    for num in nums:
        if num > 10:
            w = str(num)
            if w[0] % 2 == 1 and w[len(w) - 1] % 2 == 1:
                count += 1
    return count
--------------------------------
def get_max_triples(n):
    arr = []
    for i in range(1, n + 1):
        arr.append((i * i) - i + 1)
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            for k in range(j + 1, n):
                if ((arr[i] + arr[j] + arr[k]) % 3 == 0):
                    count += 1
    return count
--------------------------------
def double_the_difference(lst):
    sum = 0
    for d in lst:
        num = round(d)
        if d == num:
            if num > 0 and num % 2 == 1:
                sum += num * num
    return sum
--------------------------------
def compare(game, guess):
    result = []
    for i in range(len(game)):
        result.append(abs(game[i] - guess[i]))
    return result
--------------------------------
def strongest_extension(class_name, extensions):
    strongest = ""
    max = -2147483648
    for extension in extensions:
        strength = 0
        for chr in extension:
            if chr.isupper():
                strength += 1
            if chr.islower():
                strength -= 1
        if strength > max:
            max = strength
            strongest = extension
    return class_name + "." + strongest
--------------------------------
def int_to_mini_roman(number):
    num = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]
    sym = ["m", "cm", "d", "cd", "c", "xc", "l", "xl", "x", "ix", "v", "iv", "i"]
    pos = 0
    res = ""
    while number > 0:
        while number >= num[pos]:
            res += sym[pos]
            number -= num[pos]
        if number > 0:
            pos += 1
    return res
--------------------------------
def eat(number, need, remaining):
    return [number + remaining if need > remaining else number + need, remaining - need]
--------------------------------
def do_algebra(ops, operands):
    nums = operands.copy()
    current_ops = ops.copy()
    i = len(current_ops) - 1
    while i >= 0:
        if current_ops[i] == "**":
            nums[i] = nums[i] ** nums[i + 1]
            nums.pop(i + 1)
            current_ops.pop(i)
        i -= 1
    i = 0
    while i < len(current_ops):
        if current_ops[i] == "*":
            nums[i] = nums[i] * nums[i + 1]
            nums.pop(i + 1)
            current_ops.pop(i)
        elif current_ops[i] == "//":
            nums[i] = nums[i] // nums[i + 1]
            nums.pop(i + 1)
            current_ops.pop(i)
        else:
            i += 1
    i = 0
    while i < len(current_ops):
        if current_ops[i] == "+":
            nums[i] = nums[i] + nums[i + 1]
            nums.pop(i + 1)
            current_ops.pop(i)
        elif current_ops[i] == "-":
            nums[i] = nums[i] - nums[i + 1]
            nums.pop(i + 1)
            current_ops.pop(i)
        else:
            i += 1
    return nums[0]
--------------------------------
def generate_integers(a, b):
    lower = max(2, min(a, b))
    upper = min(8, max(a, b))
    result = []
    for i in range(lower, upper + 1, 2):
        result.append(i)
    return result
--------------------------------
def isStepNum(n):
    prevDigit = -1
    while n > 0:
        curDigit = n % 10
        if prevDigit!= -1:
            if abs(curDigit - prevDigit)!= 1:
                return False
        n /= 10
        prevDigit = curDigit
    return True
--------------------------------
def num_of_ways(n, k):
    p = 1
    if k % 2!= 0:
        p = -1
    return int((n - 1) ** k + p * (n - 1)) / n
--------------------------------
def find_divisors(n):
    v = []
    for i in range(1, int(math.sqrt(n)) + 1):
        if n % i == 0:
            if n / i == i:
                v.append(i)
            else:
                v.append(i)
                v.append(n // i)
    return v
--------------------------------
def egg_drop(n, k):
    if k == 1 or k == 0:
        return k
    if n == 1:
        return k
    min = float('inf')
    x, res
    for x in range(1, k + 1):
        res = max(egg_drop(n - 1, x - 1), egg_drop(n, k - x))
        if res < min:
            min = res
    return min + 1
--------------------------------
def is_power_of_two(n):
    if n == 0:
        return False
    return (math.ceil(math.log(n) / math.log(2)) == math.floor(math.log(n) / math.log(2)))
--------------------------------
def shortest_palindrome(s):
    n = len(s)
    v = []
    for i in range(n):
        l = i
        r = i
        ans1 = ""
        ans2 = ""
        while l >= 0 and r < n and s[l] == s[r]:
            ans1 += s[l]
            l -= 1
            r += 1
        l = i - 1
        r = i
        while l >= 0 and r < n and s[l] == s[r]:
            ans2 += s[l]
            l -= 1
            r += 1
        v.append(ans1)
        v.append(ans2)
    ans = v[0]
    for i in range(len(v)):
        if v[i]!= "":
            if ans[0] >= v[i][0]:
                ans = v[i]
    return ans
--------------------------------
def minimum_adjacent_difference(a, n, k):
    min_diff = float('inf')
    for i in range(k + 1):
        max_diff = float('-inf')
        for j in range(n - k - 1):
            for p in range(i, i + j):
                max_diff = max(max_diff, a[p + 1] - a[p])
        min_diff = min(min_diff, max_diff)
    return min_diff
--------------------------------
def cal(a, mid):
    chocolate = 0
    for i in a:
        if i >= mid:
            chocolate += i - mid
    return chocolate
--------------------------------
def check(v, a, m):
    tec = 0
    ans = 0
    b = [0] * (len(a) + 3)
    for i in range(len(a)):
        tec -= b[i]
        if a[i] + tec < v:
            mov = v - a[i] - tec
            ans += mov
            tec += mov
            b[i + 2] = mov
    return ans <= m
--------------------------------
def largest_num(arr):
    res = 0
    arr.sort()
    l = 0
    r = len(arr) - 1
    while l < r:
        sum = arr[l] + arr[r]
        if sum == 0:
            res = max(res, max(arr[l], arr[r]))
            return res
        elif sum < 0:
            l += 1
        else:
            r -= 1
    return res
--------------------------------
def binary_search(p, n):
    i = 0
    j = len(p) - 1
    index = -1
    while i <= j:
        mid = i + (j - i) // 2
        if p[mid] >= n:
            index = mid
            j = mid - 1
        else:
            i = mid + 1
    return index
--------------------------------
def find_min_length(arr):
    index = len(arr) - 1
    while index > 0 and arr[index] >= arr[index - 1]:
        index -= 1
    return index
--------------------------------
def min_digits(n, k):
    digits_num = int(math.floor(math.log(n) + 1))
    temp_sum = 0
    temp = digits_num
    result = 0
    x, v
    sum = 0
    num2 = n
    while num2!= 0:
        sum += num2 % 10
        num2 //= 10
    if sum <= k:
        x = 0
    else:
        while temp > 0:
            v = n // (10 ** (temp - 1))
            temp_sum += v % 10
            if temp_sum >= k:
                v //= 10
                v += 1
                result = v * (10 ** temp)
                break
            temp -= 1
        x = result - n
        return x
    return -1
--------------------------------
def check_for_perfect_square(arr, i, j):
    mid, sum = 0, 0
    for m in range(i, j + 1):
        sum += arr[m]
    low, high = 0, sum // 2
    while low <= high:
        mid = low + (high - low) // 2
        if mid * mid == sum:
            return mid
        elif mid * mid > sum:
            high = mid - 1
        else:
            low = mid + 1
    return -1
--------------------------------
def min_flips(mat, s):
    n = len(mat)
    m = len(mat[0])
    count = 0
    for i in range(n):
        for j in range(m):
            if mat[i][j]!= s[i + j] - '0':
                count += 1
    return count
--------------------------------
def construct_tree(n, edges):
    adjl = []
    for i in range(n):
        adjl.append([])
    for e in edges:
        u = e[0]
        v = e[1]
        adjl[u].append(v)
        adjl[v].append(u)
    return adjl
--------------------------------
def find_sum_of_values(v, parent, values_children):
    cur_node = v
    sum = 0
    while cur_node!= -1:
        sum += values_children[cur_node]
        cur_node = parent[cur_node]
    return sum
--------------------------------
def get_distinct(d, count):
    num = 0
    count = 10 ** (count - 1)
    while count > 0:
        num += count * d
        count //= 10
    return num
--------------------------------
def is_increasing(arr):
    for i in range(len(arr) - 1):
        if arr[i] > arr[i + 1]:
            return False
    return True
--------------------------------
def min_adj_swaps(mat):
    n = len(mat)
    cnt_zero = [0] * n
    for i in range(n):
        for j in range(n - 1, -1, -1):
            if mat[i][j] == 0:
                cnt_zero[i] += 1
    cnt_swaps = 0
    for i in range(n):
        if cnt_zero[i] < (n - i - 1):
            first = i
            while first < n and cnt_zero[first] < (n - i - 1):
                first += 1
            if first == n:
                return -1
            while first > i:
                cnt_zero[first], cnt_zero[first - 1] = cnt_zero[first - 1], cnt_zero[first]
                first -= 1
                cnt_swaps += 1
    return cnt_swaps
--------------------------------
def solve(values, salary, mod):
    ret = 1
    amt = 0
    values.sort()
    salary.sort()
    while salary:
        while values and values[-1] >= salary[-1]:
            amt += 1
            values.pop()
        if amt == 0:
            return 0
        ret *= amt
        ret %= mod
        salary.pop()
    return ret
--------------------------------
def organize_in_order(vec, op, n):
    result = [0] * n
    vec.sort()
    i = 0
    j = n - 1
    k = 0
    while i <= j and k <= n - 2:
        if op[k] == '<':
            result[k] = vec[i]
            i += 1
        else:
            result[k] = vec[j]
            j -= 1
        k += 1
    result[n - 1] = vec[i]
    return result
--------------------------------
def count_points(n, m, a, b, x, y):
    a.sort()
    b.sort()
    j = 0
    count = 0
    for i in range(n):
        while j < m:
            if a[i] + y < b[j]:
                break
            if b[j] >= a[i] - x and b[j] <= a[i] + y:
                count += 1
                j += 1
                break
            else:
                j += 1
    return count
--------------------------------
def are_same(a, b):
    return sorted(a) == sorted(b)
--------------------------------
def count_number_of_strings(s):
    n = len(s) - 1
    count = 2 ** n
    return count
--------------------------------
def prime_power(x):
    prime_pow = []
    for i in range(2, x + 1):
        if x % i == 0:
            p = 1
            while x % i == 0:
                x /= i
                p *= i
            prime_pow.append(p)
    if x > 1:
        prime_pow.append(x)
    return prime_pow
--------------------------------
def is_perfect(n0):
    n = math.sqrt(n0)
    if math.floor(n)!= math.ceil(n):
        return False
    return True
--------------------------------
def find_sum(l, r):
    arr = []
    i = 0
    x = 2
    while i <= r:
        arr.append(i + x)
        if i + 1 <= r:
            arr.append(i + 1 + x)
        x *= -1
        i += 2
    sum = 0
    for i in range(l, r + 1):
        sum += arr[i]
    return sum
--------------------------------
def results(n, k):
    return int(round(n ** (1.0 / (2.0 ** k))))
--------------------------------
def factors(n):
    v = []
    v.append(1)
    for i in range(2, int(math.sqrt(n)) + 1):
        if n % i == 0:
            v.append(i)
            if n / i!= i:
                v.append(int(n / i))
    return v
--------------------------------
def smallest_num(n):
    x = 10 ** ((n - 1) / 2.0)
    return int(math.ceil(x))
--------------------------------
def smallest(s):
    a = [0] * len(s)
    for i in range(len(s)):
        a[i] = s[i] - '0'
    b = []
    for i in range(len(a)):
        if a[i] % 2!= 0:
            b.append(a[i])
    b.sort()
    if len(b) > 1:
        return b[0] * 10 + b[1]
    return -1
--------------------------------
def diagonals(a, b, c, d):
    ans = []
    ans.append(math.sqrt((a * c + b * d) * (a * d + b * c) / (a * b + c * d)))
    ans.append(math.sqrt((a * c + b * d) * (a * b + c * d) / (a * d + b * c)))
    return ans
--------------------------------
def find_number_of_digits(n, base):
    return int(math.floor(math.log(n) / math.log(base)) + 1)
--------------------------------
def n_gon(n):
    pro_angle_var = math.pi * (180.0 / n) / 180
    neg_x = 1.0e+99
    pos_x = -1.0e+99
    neg_y = 1.0e+99
    pos_y = -1.0e+99
    for j in range(n):
        px = math.cos(2 * math.pi * j / n + pro_angle_var)
        py = math.sin(2 * math.pi * j / n + pro_angle_var)
        neg_x = min(neg_x, px)
        pos_x = max(pos_x, px)
        neg_y = min(neg_y, py)
        pos_y = max(pos_y, py)
    opt2 = max(pos_x - neg_x, pos_y - neg_y)
    return opt2 / math.sin(math.pi / n) / 2
--------------------------------
def find_max_k(n):
    p = int(math.log(n) / math.log(2))
    return int(math.pow(2, p))
--------------------------------
def nth_fibo(n):
    a = (5 ** 0.5 + 1) / 2
    b = (-1 * 5 ** 0.5 + 1) / 2
    r = 5 ** 0.5
    ans = (a ** n - b ** n) / r
    return int(ans)
--------------------------------
def find_prob(l, r):
    count_of_ps = math.floor(math.sqrt(r)) - math.ceil(math.sqrt(l)) + 1
    total = r - l + 1
    prob = count_of_ps / total
    return prob
--------------------------------
def previous_fibonacci(n):
    a = n / ((1 + math.sqrt(5)) / 2.0)
    return math.round(a)
--------------------------------
def dist_prime(arr, all_primes):
    list1 = []
    for i in all_primes:
        for j in arr:
            if j % i == 0:
                list1.append(i)
                break
    return list1
--------------------------------
def get_array(n):
    ans = []
    p2 = 1
    while n > 0:
        if n % 2 == 1:
            ans.append(p2)
        n >>= 1
        p2 *= 2
    return ans
--------------------------------
def maximum_length(a):
    counts = [0] * 11
    ans = 0
    for index in range(len(a)):
        counts[a[index]] += 1
        k = []
        for i in counts:
            if i!= 0:
                k.append(i)
        k.sort()
        if len(k) == 1 or (k[0] == k[len(k) - 2] and k[len(k) - 1] - k[len(k) - 2] == 1) or (k[0] == 1 and k[1] == k[len(k) - 1]):
            ans = index
    return ans + 1
--------------------------------
def max_edges(n):
    edges = math.floor(n * n / 4)
    return int(edges)
--------------------------------
def find_k(n, k):
    a = []
    for i in range(1, n):
        if i % 2 == 1:
            a.append(i)
    for i in range(1, n):
        if i % 2 == 0:
            a.append(i)
    return a[k - 1]
--------------------------------
def is_keith(x, temp):
    terms = []
    n = 0
    while temp > 0:
        terms.append(temp % 10)
        temp = temp // 10
        n += 1
    terms.reverse()
    next_term = 0
    i = n
    while next_term < x:
        next_term = 0
        for j in range(1, n + 1):
            next_term += terms[i - j]
        terms.append(next_term)
        i += 1
    return next_term == x
--------------------------------
def factors(n, k):
    v = []
    while n % 2 == 0:
        v.append(2)
        n = n // 2
    if len(v) >= k:
        return True
    for i in range(3, int(n**0.5) + 1, 2):
        while n % i == 0:
            n = n // i
            v.append(i)
        if len(v) >= k:
            return True
    if n > 2:
        v.append(n)
    if len(v) >= k:
        return True
    return False
--------------------------------
def separate_paren_groups(paren_string):
    all_parens = []
    current_paren = ""
    current_depth = 0
    for c in paren_string:
        if c == "(":
            current_depth += 1
            current_paren += c
        elif c == ")":
            current_depth -= 1
            current_paren += c
            if current_depth == 0:
                all_parens.append(current_paren)
                current_paren = ""
    return all_parens
--------------------------------
def parse_nested_parens(paren_string):
    all_levels = []
    level = 0
    max_level = 0
    for i in range(len(paren_string)):
        chr = paren_string[i]
        if chr == '(':
            level += 1
            if level > max_level:
                max_level = level
        if chr == ')':
            level -= 1
            if level == 0:
                all_levels.append(max_level)
                max_level = 0
    return all_levels
--------------------------------
def filter_by_substring(strings, substring):
    result = []
    for s in strings:
        if s.contains(substring):
            result.append(s)
    return result
--------------------------------
def rolling_max(numbers):
    result = []
    running_max = 0
    for n in numbers:
        if n > running_max:
            running_max = n
        result.append(running_max)
    return result
--------------------------------
def make_palindrome(s):
    if s == "":
        return ""
    for i in range(len(s)):
        r_str = s[i:]
        if r_str == r_str[::-1]:
            n_str = s[:i]
            n2_str = n_str[::-1]
            return s + n2_str
    return s[:-1] + s[::-1]
--------------------------------
def string_xor(a, b):
    result = ''
    for i in range(len(a)):
        if a[i] == b[i]:
            result += '0'
        else:
            result += '1'
    return result
--------------------------------
def longest(strings):
    if not strings:
        return ""
    max_len = max(len(s) for s in strings)
    for s in strings:
        if len(s) == max_len:
            return s
    return ""
--------------------------------
def string_sequence(n):
    s = ""
    for i in range(n):
        s += str(i) + " "
    s += str(n)
    return s
--------------------------------
def count_distinct_characters(s):
    distinct = set()
    for c in s.lower():
        distinct.add(c)
    return len(distinct)
--------------------------------
def how_many_times(s, sub):
    times = 0
    for i in range(len(s) - len(sub) + 1):
        if s.startswith(sub, i):
            times += 1
    return times
--------------------------------
def sort_numbers(numbers):
    to_num = {"zero": 0, "one": 1, "two": 2, "three": 3, "four": 4, "five": 5, "six": 6, "seven": 7, "eight": 8, "nine": 9}
    from_num = {0: "zero", 1: "one", 2: "two", 3: "three", 4: "four", 5: "five", 6: "six", 7: "seven", 8: "eight", 9: "nine"}
    ints = []
    current = ""
    for i in range(len(numbers) + 1):
        if i == len(numbers) or numbers[i] == " ":
            if to_num.get(current) is not None:
                ints.append(to_num.get(current))
                current = ""
        else:
            current += numbers[i]
    ints.sort()
    result = ""
    for i in range(len(ints)):
        result += from_num.get(ints[i])
        if i!= len(ints) - 1:
            result += " "
    return result
--------------------------------
def find_closest_elements(numbers):
    closest_pair = [numbers[0], numbers[1]]
    distance = abs(numbers[0] - numbers[1])
    for i in range(len(numbers)):
        for j in range(i + 1, len(numbers)):
            if abs(numbers[i] - numbers[j]) < distance:
                closest_pair[0] = numbers[i]
                closest_pair[1] = numbers[j]
                distance = abs(numbers[i] - numbers[j])
    closest_pair.sort()
    return closest_pair
--------------------------------
def rescale_to_unit(numbers):
    min_num = min(numbers)
    max_num = max(numbers)
    result = []
    for n in numbers:
        result.append((n - min_num) / (max_num - min_num))
    return result
--------------------------------
def filter_integers(values):
    result = []
    for e in values:
        if isinstance(e, int):
            result.append(e)
    return result
--------------------------------
def remove_duplicates(numbers):
    c = {}
    for i in numbers:
        c[i] = c.get(i, 0) + 1
    result = []
    for i in numbers:
        if c[i] == 1:
            result.append(i)
    return result
--------------------------------
def flip_case(s):
    result = ""
    for c in s:
        if c.islower():
            result += c.upper()
        else:
            result += c.lower()
    return result
--------------------------------
def filter_by_prefix(strings, prefix):
    result = []
    for i in range(len(strings)):
        if strings[i].startswith(prefix):
            result.append(strings[i])
    return result
--------------------------------
def find_zero(xs):
    ans = 0
    value = 0
    for i in range(len(xs)):
        value += xs[i] * ans ** i
    while abs(value) > 1e-6:
        driv = 0
        for i in range(1, len(xs)):
            driv += xs[i] * ans ** (i - 1) * i
        ans -= value / driv
        value = 0
        for i in range(len(xs)):
            value += xs[i] * ans ** i
    return ans
--------------------------------
def sort_third(l):
    thirds = []
    for i in range(0, len(l), 3):
        thirds.append(l[i])
    thirds.sort()
    result = []
    for i in range(0, len(l)):
        if i % 3 == 0:
            result.append(thirds[i // 3])
        else:
            result.append(l[i])
    return result
--------------------------------
def unique(l):
    result = list(set(l))
    result.sort()
    return result
--------------------------------
def max_element(l):
    return max(l)
--------------------------------
def triples_sum_to_zero(l):
    for i in range(len(l)):
        for j in range(i + 1, len(l)):
            for k in range(j + 1, len(l)):
                if l[i] + l[j] + l[k] == 0:
                    return True
    return False
--------------------------------
def fib4(n):
    results = [0, 0, 2, 0]
    for i in range(4, n + 1):
        results.append(results[i - 4] + results[i - 3] + results[i - 2] + results[i - 1])
    return results[n]
--------------------------------
def is_palindrome(text):
    pr = text[::-1]
    return pr == text
--------------------------------
def remove_vowels(text):
    result = ""
    vowels = "aeiou"
    for ch in text:
        if vowels.find(ch.lower()) == -1:
            result += ch
    return result
--------------------------------
def same_chars(s0, s1):
    set0 = set()
    for c in s0:
        set0.add(c)
    set1 = set()
    for c in s1:
        set1.add(c)
    return set0 == set1
--------------------------------
def common(l1, l2):
    us = set()
    for e1 in l1:
        for e2 in l2:
            if e1 == e2:
                us.add(e1)
    ret = list(us)
    ret.sort()
    return ret
--------------------------------
def correct_bracketing(brackets):
    depth = 0
    for b in brackets:
        if b == '(':
            depth += 1
        if b == ')':
            depth -= 1
        if depth < 0:
            return False
    return depth == 0
--------------------------------
def circular_shift(x, shift):
    xs = str(x)
    if shift > len(xs):
        return ''.join(reversed(xs))
    return xs[len(xs) - shift:] + xs[:len(xs) - shift]
--------------------------------
def search(lst):
    counter = {}
    for i in lst:
        counter[i] = counter.get(i, 0) + 1
    ans = -1
    for item in counter.items():
        if item[1] >= item[0] and item[0] > ans:
            ans = item[0]
    return ans
--------------------------------
def smallest_change(arr):
    ans = 0
    for i in range(len(arr) // 2):
        if arr[i]!= arr[len(arr) - i - 1]:
            ans += 1
    return ans
--------------------------------
def total_match(lst1, lst2):
    sum1 = 0
    for st in lst1:
        sum1 += len(st)
    sum2 = 0
    for st in lst2:
        sum2 += len(st)
    return sum1 > sum2? lst2 : lst1
--------------------------------
def is_happy(s):
    if len(s) < 3:
        return False
    for i in range(len(s) - 2):
        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:
            return False
    return True
--------------------------------
def numerical_letter_grade(grades):
    letter_grade = []
    for gpa in grades:
        if gpa == 4.0:
            letter_grade.append("A+")
        elif gpa > 3.7:
            letter_grade.append("A")
        elif gpa > 3.3:
            letter_grade.append("A-")
        elif gpa > 3.0:
            letter_grade.append("B+")
        elif gpa > 2.7:
            letter_grade.append("B")
        elif gpa > 2.3:
            letter_grade.append("B-")
        elif gpa > 2.0:
            letter_grade.append("C+")
        elif gpa > 1.7:
            letter_grade.append("C")
        elif gpa > 1.3:
            letter_grade.append("C-")
        elif gpa > 1.0:
            letter_grade.append("D+")
        elif gpa > 0.7:
            letter_grade.append("D")
        elif gpa > 0.0:
            letter_grade.append("D-")
        else:
            letter_grade.append("E")
    return letter_grade
--------------------------------
def solve(n):
    biStr = ""
    sum = 0
    for c in str(n):
        sum += int(c)
    while sum > 0:
        biStr = str(sum % 2) + biStr
        sum //= 2
    return biStr
--------------------------------
def anti_shuffle(s):
    ret = ""
    current = ""
    for i in range(len(s) + 1):
        if i == len(s) or s[i] == " ":
            tmp = list(current)
            tmp.sort()
            if ret!= "":
                ret += " "
            ret += "".join(tmp)
            current = ""
        else:
            current += s[i]
    return ret
--------------------------------
def sort_array(array):
    if array.is_empty():
        return array
    if (array[0] + array[array.size() - 1]) % 2 == 1:
        array.sort()
    else:
        array.sort(reverse=True)
    return array
--------------------------------
def encrypt(s):
    ans = ""
    for c in s:
        if c.isalpha():
            ans += chr((ord(c) - ord('a') + 4) % 26 + ord('a'))
        else:
            ans += c
    return ans
--------------------------------
def is_bored(s):
    is_start = True
    sum = 0
    for i in range(len(s)):
        if s[i] == '.' or s[i] == '?' or s[i] == '!':
            is_start = True
        elif is_start:
            if s[i] =='':
                continue
            if s.startswith('I ', i):
                sum += 1
            is_start = False
    return sum
--------------------------------
def encode(message):
    vowels = "aeiouAEIOU"
    ret = ""
    for c in message:
        if c.isupper():
            c = c.lower()
            if vowels.find(c)!= -1:
                c = chr(ord('a') + (ord(c) - ord('a') + 2) % 26)
        elif c.islower():
            c = c.upper()
            if vowels.find(c)!= -1:
                c = chr(ord('A') + (ord(c) - ord('A') + 2) % 26)
        ret += c
    return ret
--------------------------------
def skjkasdkd(lst):
    largest = 0
    for n in lst:
        if n > largest:
            prime = True
            for i in range(2, n):
                if n % i == 0:
                    prime = False
            if prime:
                largest = n
    sum = 0
    s = str(largest)
    for i in range(len(s)):
        sum += int(s[i])
    return sum
--------------------------------
def check_dict_case(dict):
    if dict.empty():
        return False
    is_lower = 0
    is_upper = 0
    for key in dict.keys():
        for c in key.chars():
            if Character.is_lower_case(c):
                is_lower = 1
            elif Character.is_upper_case(c):
                is_upper = 1
            else:
                return False
    return is_lower + is_upper == 1
--------------------------------
def multiply(a, b):
    return (abs(a) % 10) * (abs(b) % 10)
--------------------------------
def count_upper(s):
    u_vowel = "AEIOU"
    count = 0
    for i in range(0, len(s), 2):
        if u_vowel.find(s[i])!= -1:
            count += 1
    return count
--------------------------------
def by_length(arr):
    num_to = {1: "One", 2: "Two", 3: "Three", 4: "Four", 5: "Five", 6: "Six", 7: "Seven", 8: "Eight", 9: "Nine"}
    sorted_arr = sorted(arr, reverse=True)
    new_arr = []
    for n in sorted_arr:
        if n >= 1 and n <= 9:
            new_arr.append(num_to[n])
    return new_arr
--------------------------------
def f(n):
    sum = 0
    prod = 1
    result = []
    for i in range(1, n + 1):
        sum += i
        prod *= i
        if i % 2 == 0:
            result.append(prod)
        else:
            result.append(sum)
    return result
--------------------------------
def even_odd_palindrome(n):
    even_count = 0
    odd_count = 0
    for i in range(1, n + 1):
        s = str(i)
        r_str = s[::-1]
        if s == r_str:
            if i % 2 == 1:
                odd_count += 1
            else:
                even_count += 1
    return [even_count, odd_count]
--------------------------------
def histogram(test):
    count = {}
    max = 0
    for i in range(len(test)):
        if test[i]!='':
            count[test[i]] = count.get(test[i], 0) + 1
            if count[test[i]] > max:
                max = count[test[i]]
    result = {}
    for item in count.items():
        if item[1] == max:
            result[item[0]] = item[1]
    return result
--------------------------------
def reverse_delete(s, c):
    ret = ""
    for ch in s:
        if c.find(ch) == -1:
            ret += ch
    flag = "False"
    if ret == ret[::-1]:
        flag = "True"
    return [ret, flag]
--------------------------------
def sort_array(arr):
    bin = []
    for i in arr:
        b = 0
        n = abs(i)
        while n > 0:
            b += n % 2
            n //= 2
        bin.append(b)
    for i in range(len(arr)):
        for j in range(1, len(arr)):
            if bin[j] < bin[j - 1] or (bin[j] == bin[j - 1] and arr[j] < arr[j - 1]):
                bin[j], bin[j - 1] = bin[j - 1], bin[j]
                arr[j], arr[j - 1] = arr[j - 1], arr[j]
    return arr
--------------------------------
def get_closest_vowel(word):
    vowels = "AEIOUaeiou"
    for i in range(len(word) - 2, 0, -1):
        if vowels.find(word[i])!= -1 and vowels.find(word[i + 1]) == -1 and vowels.find(word[i - 1]) == -1:
            return word[i]
    return ""
--------------------------------
def match_parens(lst):
    strings = [lst[0] + lst[1], lst[1] + lst[0]]
    for l in strings:
        count = 0
        for c in l:
            if c == '(':
                count += 1
            else:
                count -= 1
            if count < 0:
                break
        if count == 0:
            return "Yes"
    return "No"
--------------------------------
def maximum(arr, k):
    if k == 0:
        return []
    arr.sort()
    return arr[-k:]
--------------------------------
def valid_date(date):
    if len(date)!= 10:
        return False
    for i in range(10):
        if i == 2 or i == 5:
            if date[i]!= '-':
                return False
        elif not date[i].isdigit():
            return False
    month = int(date[0:2])
    day = int(date[3:5])
    year = int(date[6:10])
    if month < 1 or month > 12:
        return False
    if day < 1 or day > 31:
        return False
    if day == 31 and (month == 4 or month == 6 or month == 9 or month == 11 or month == 2):
        return False
    if day == 30 and month == 2:
        return False
    return True
--------------------------------
def split_words(txt):
    current = ""
    result = []
    if " " in txt:
        for i in range(len(txt) + 1):
            if i == len(txt) or txt[i] == " ":
                if current!= "":
                    result.append(current)
                current = ""
            else:
                current += txt[i]
        return result
    if "," in txt:
        for i in range(len(txt) + 1):
            if i == len(txt) or txt[i] == ",":
                if current!= "":
                    result.append(current)
                current = ""
            else:
                current += txt[i]
        return result
    num = 0
    for c in txt:
        if c.islower() and c % 2 == 0:
            num += 1
    return [str(num)]
--------------------------------
def tri(n):
    if n == 0:
        return [1]
    tris = [1, 3]
    for i in range(2, n + 1):
        if i % 2 == 0:
            tris.append(i // 2 + 1)
        else:
            tris.append(tris[i - 1] + tris[i - 2] + (i + 3) // 2)
    return tris
--------------------------------
def check_if_last_char_is_a_letter(txt):
    if txt == "":
        return False
    return (txt[-1].isalpha() and (len(txt) == 1 or not txt[-2].isalpha()))
--------------------------------
def order_by_points(nums):
    result = []
    for num in nums:
        w = str(abs(num))
        sum = 0
        for c in w:
            sum += int(c)
        if num < 0:
            sum -= 2 * int(w[0])
        result.append(sum)
    for i in range(len(nums)):
        for j in range(1, len(nums)):
            if result[j - 1] > result[j]:
                result[j - 1], result[j] = result[j], result[j - 1]
                nums[j - 1], nums[j] = nums[j], nums[j - 1]
    return nums
--------------------------------
def bf(planet1, planet2):
    planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]
    idx1 = planets.index(planet1)
    idx2 = planets.index(planet2)
    if idx1 == -1 or idx2 == -1 or idx1 == idx2:
        return []
    return planets[idx1 + 1:idx2] if idx1 > idx2 else planets[idx2 + 1:idx1]
--------------------------------
def sorted_list_sum(lst):
    result = []
    for i in lst:
        if len(i) % 2 == 0:
            result.append(i)
    result.sort(key=lambda l: (len(l), l))
    return result
--------------------------------
def cycpattern_check(a, b):
    for i in range(len(b) + 1):
        rotate = b[i:] + b[:i]
        if a.find(rotate)!= -1:
            return True
    return False
--------------------------------
def even_odd_count(num):
    even_count = 0
    odd_count = 0
    for i in str(abs(num)).replace('-', ''):
        if int(i) % 2 == 0:
            even_count += 1
        else:
            odd_count += 1
    return [even_count, odd_count]
--------------------------------
def find_max(words):
    max = ""
    max_length = 0
    for word in words:
        unique = []
        for w in word:
            if w not in unique:
                unique.append(w)
        if len(unique) > max_length or (len(unique) == max_length and word < max):
            max = word
            max_length = len(unique)
    return max
--------------------------------
def solve(s):
    noLetter = True
    result = ""
    for ch in s:
        if ch.isupper():
            ch = ch.lower()
            noLetter = False
        elif ch.islower():
            ch = ch.upper()
            noLetter = False
        result += ch
    if noLetter:
        return result[::-1]
    else:
        return result
--------------------------------
def most_frequent(arr, n):
    hp = {}
    for i in range(n):
        if arr[i] in hp:
            hp[arr[i]] += 1
        else:
            hp[arr[i]] = 1
    max_count = 0
    res = -1
    for key, value in hp.items():
        if max_count < value:
            res = key
            max_count = value
    return res
--------------------------------
def find(a, b, k, n1, n2):
    s = set()
    for i in range(n2):
        s.add(b[i])
    missing = 0
    for i in range(n1):
        if a[i] not in s:
            missing += 1
        if missing == k:
            return a[i]
    return -1
--------------------------------
def solve_query(start, end, arr):
    mp = {}
    for i in range(start, end + 1):
        mp[arr[i]] = mp.get(arr[i], 0) + 1
    count = 0
    for entry in mp.items():
        if entry[0] == entry[1]:
            count += 1
    return count
--------------------------------
def segregate(arr, size):
    j = 0
    for i in range(size):
        if arr[i] <= 0:
            arr[i], arr[j] = arr[j], arr[i]
            j += 1
    return j
--------------------------------
def count_triplets(a, n):
    s = set()
    for i in range(n):
        s.add(a[i])
    count = 0
    for i in range(n):
        for j in range(i + 1, n):
            xr = a[i] ^ a[j]
            if xr in s and xr!= a[i] and xr!= a[j]:
                count += 1
    return count // 3
--------------------------------
def least_frequent(arr, n):
    hp = {}
    for i in range(n):
        if arr[i] in hp:
            hp[arr[i]] += 1
        else:
            hp[arr[i]] = 1
    min_count = n + 1
    res = -1
    for key, value in hp.items():
        if min_count >= value:
            res = key
            min_count = value
    return res
--------------------------------
def find_permutations(arr):
    cnt = 0
    max_ind = -1
    min_ind = 10000000
    n = len(arr)
    index_of = {}
    for i in range(n):
        index_of[arr[i]] = i + 1
    for i in range(1, n + 1):
        max_ind = max(max_ind, index_of.get(i, 0))
        min_ind = min(min_ind, index_of.get(i, 0))
        if max_ind - min_ind + 1 == i:
            cnt += 1
    return cnt
--------------------------------
def form_quadruplets(arr, n):
    ans = 0
    pairs = n // 4
    arr.sort(reverse=True)
    for i in range(n - pairs):
        ans += arr[i + 2]
    return ans
--------------------------------
def lexicographically_maximum(s, n):
    m = {}
    for i in range(n):
        if s[i] in m:
            m[s[i]] += 1
        else:
            m[s[i]] = 1
    v = []
    for i in range('a', 'a' + min(n, 25)):
        if i not in m:
            v.append(i)
    j = len(v) - 1
    for i in range(n):
        if s[i] >= 'a' + min(n, 25) or (s[i] in m and m[s[i]] > 1):
            if v[j] < s[i]:
                continue
            m[s[i]] -= 1
            s = s[:i] + v[j] + s[i + 1:]
            j -= 1
        if j < 0:
            break
    l = 0
    for i in range(n - 1, -1, -1):
        if l > j:
            break
        if s[i] >= 'a' + min(n, 25) or s[i] in m and m[s[i]] > 1:
            m[s[i]] -= 1
            s = s[:i] + v[l] + s[i + 1:]
            l += 1
    return s
--------------------------------
def no_of_valid_kbers(k, arr):
    s = set()
    while k!= 0:
        s.add(k % 10)
        k = k // 10
    count = 0
    for i in range(len(arr)):
        no = arr[i]
        flag = True
        while no!= 0:
            digit = no % 10
            if digit not in s:
                flag = False
                break
            no = no // 10
        if flag:
            count += 1
    return count
--------------------------------
def del_cost(s, cost):
    ans = 0
    for_max = {}
    for_tot = {}
    for i in range(len(s)):
        if s[i] not in for_max:
            for_max[s[i]] = cost[i]
        else:
            for_max[s[i]] = max(cost[i], for_max[s[i]])
        if s[i] not in for_tot:
            for_tot[s[i]] = cost[i]
        else:
            for_tot[s[i]] = for_tot[s[i]] + cost[i]
    for i in for_max:
        ans += for_tot[i] - for_max[i]
    return ans
--------------------------------
def replace_duplicates(names):
    hash = {}
    for i in range(len(names)):
        if names[i] not in hash:
            hash[names[i]] = 1
        else:
            count = hash[names[i]]
            hash[names[i]] = hash[names[i]] + 1
            names[i] = names[i] + str(count)
    return names
--------------------------------
def minmax_numbers(matrix, res):
    set = set()
    for i in range(len(matrix)):
        min_r = float("inf")
        for j in range(len(matrix[i])):
            min_r = min(min_r, matrix[i][j])
        set.add(min_r)
    for j in range(len(matrix[0])):
        max_c = float("-inf")
        for i in range(len(matrix)):
            max_c = max(max_c, matrix[i][j])
        if max_c in set:
            res.append(max_c)
    return res
--------------------------------
def length_of_longest_ap(a, n):
    dp = {}
    res = 2
    for i in range(n):
        for j in range(i + 1, n):
            d = a[j] - a[i]
            if d in dp:
                if i in dp[d]:
                    dp[d][j] = dp[d][i] + 1
                else:
                    dp[d][j] = 2
            else:
                dp[d] = {}
                dp[d][j] = 2
            res = max(res, dp[d][j])
    return res
--------------------------------
def find_kth_char(n, k):
    prev = "A"
    cur = ""
    if n == 1:
        return "A"
    for j in range(2, n + 1):
        cur = prev + "B"
        for i in range(len(prev)):
            if prev[i] == "A":
                prev = prev[:i] + "B" + prev[i + 1:]
            else:
                prev = prev[:i] + "A" + prev[i + 1:]
        prev = prev[::-1]
        cur += prev
        prev = cur
    return cur[k - 1]
--------------------------------
def find_kth_largest(s, k):
    tmp = [chr(e) for e in s]
    tmp.sort()
    tmp.reverse()
    return tmp[k - 1]
--------------------------------
def sub_arraylen(arr, n, k):
    mp = {}
    mp[arr[0]] = 0
    for i in range(1, n):
        arr[i] += arr[i - 1]
        mp[arr[i]] = i
    len = float('inf')
    for i in range(n):
        if arr[i] < k:
            continue
        else:
            x = arr[i] - k
            if x == 0:
                len = min(len, i)
            if x not in mp:
                continue
            else:
                len = min(len, i - mp[x])
    return len
--------------------------------
def find_max_len(a, k):
    n = len(a)
    a.sort()
    vis = [False] * n
    mp = {}
    for i in range(n):
        mp[a[i]] = i
    c = 0
    for i in range(n):
        if not vis[i]:
            check = a[i] * k
            if check in mp:
                c += 1
                vis[mp[check]] = True
    return n - c
--------------------------------
def min_distance_points(a, k, n):
    m = {}
    q = []
    for i in range(n):
        m[a[i]] = 1
        q.append(a[i])
    ans = []
    while k > 0:
        x = q.pop(0)
        if x - 1 not in m and k > 0:
            m[x - 1] = 1
            q.append(x - 1)
            ans.append(x - 1)
            k -= 1
        if x + 1 not in m and k > 0:
            m[x + 1] = 1
            q.append(x + 1)
            ans.append(x + 1)
            k -= 1
    return ans
--------------------------------
def isValidLen(s, length, k):
    n = len(s)
    mp = {}
    right = 0
    while right < length:
        if s[right] in mp:
            mp[s[right]] += 1
        else:
            mp[s[right]] = 1
        right += 1
    if len(mp) <= k:
        return True
    while right < n:
        if s[right] in mp:
            mp[s[right]] += 1
        else:
            mp[s[right]] = 1
        if s[right - length] in mp:
            mp[s[right - length]] -= 1
        if mp[s[right - length]] == 0:
            del mp[s[right - length]]
        if len(mp) <= k:
            return True
        right += 1
    return len(mp) <= k
--------------------------------
def partition(arr, low, high):
    pivot = arr[high]
    i = low - 1
    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1
--------------------------------
def str_score(strs, s, n):
    m = {}
    for i in range(n):
        m[strs[i]] = i + 1
    if s not in m:
        return 0
    score = 0
    for i in range(len(s)):
        score += ord(s[i]) - ord('a') + 1
    score = score * m[s]
    return score
--------------------------------
def count_ele(s, a, n):
    mp = {}
    ans = []
    for i in range(n):
        num = a[i]
        if num in mp:
            ans.append(0)
        else:
            cnt = 0
            while s[0]!= num:
                mp[s[0]] = True
                s.remove(0)
                cnt += 1
            s.remove(0)
            cnt += 1
            ans.append(cnt)
    return ans
--------------------------------
def maxDistinctChar(s, n, k):
    freq = {}
    for i in range(n):
        if s[i] in freq:
            freq[s[i]] += 1
        else:
            freq[s[i]] = 1
    v = []
    for it in freq.items():
        v.append(it[1])
    v.sort()
    for i in range(len(v)):
        mn = min(v[i] - 1, k)
        v[i] -= mn
        k -= mn
    if k > 0:
        for i in range(len(v)):
            mn = min(v[i], k)
            v[i] -= mn
            k -= mn
    res = 0
    for i in range(len(v)):
        if v[i] == 1:
            res += 1
    return res
--------------------------------
def find_kth(arr, n, k):
    missing = set()
    count = 0
    for i in range(n):
        missing.add(arr[i])
    max_m = max(arr)
    min_m = min(arr)
    for i in range(min_m + 1, max_m):
        if i not in missing:
            count += 1
        if count == k:
            return i
    return -1
--------------------------------
def almost_sort(a, n):
    for i in range(n - 1):
        if a[i] > a[i + 1]:
            a[i], a[i + 1] = a[i + 1], a[i]
            i += 1
    for i in range(n - 1):
        if a[i] > a[i + 1]:
            return False
    return True
--------------------------------
def maximum_sum(s, n, k):
    sum = 0
    freq = [0] * 256
    for i in range(n):
        freq[ord(s[i])] += 1
    freq.sort(reverse=True)
    for i in range(256):
        if k > freq[i]:
            sum += freq[i] * freq[i]
            k -= freq[i]
        else:
            sum += freq[i] * k
            break
    return sum
--------------------------------
def find_min_operations(arr, n, k):
    operations = 0
    for i in range(k):
        freq = {}
        for j in range(i, n, k):
            freq[arr[j]] = freq.get(arr[j], 0) + 1
        max1 = 0
        num = 0
        for entry in freq.items():
            if entry[1] > max1:
                max1 = entry[1]
                num = entry[0]
        for entry in freq.items():
            if entry[0]!= num:
                operations += entry[1]
    return operations
--------------------------------
def sub_string(s, n):
    v = []
    for i in range(n):
        for len in range(1, n - i + 1):
            find = s[i:i + len]
            v.append(find)
    return v
--------------------------------
def check_unique_frequency(arr, n):
    freq = {}
    for i in range(n):
        freq[arr[i]] = freq.get(arr[i], 0) + 1
    unique_freq = set()
    for entry in freq.items():
        if entry[1] in unique_freq:
            return False
        else:
            unique_freq.add(entry[1])
    return True
--------------------------------
def min_cost(str1, str2, n):
    cost = 0
    tmp = list(str1)
    for i in range(n):
        if tmp[i]!= str2[i]:
            if i < n - 1 and tmp[i + 1]!= str2[i + 1]:
                c = tmp[i]
                tmp[i] = tmp[i + 1]
                tmp[i + 1] = c
                cost += 1
            else:
                cost += 1
    return cost
--------------------------------
def is_valid_num(x):
    mp = {}
    for i in range(len(x)):
        if x[i] in mp:
            return False
        if x[i] > '5':
            return False
        mp[x[i]] = 1
    return True
--------------------------------
def minimize_diff(arr, n, k):
    max = max(arr)
    min = min(arr)
    if max - min <= k:
        return max - min
    avg = (max + min) / 2
    for i in range(n):
        if arr[i] > avg:
            arr[i] -= k
        else:
            arr[i] += k
    max = max(arr)
    min = min(arr)
    return max - min
--------------------------------
def get_min_cost(arr, n):
    min_ele = min(arr)
    return min_ele * (n - 1)
--------------------------------
def possibility(m, length, s):
    count_odd = 0
    for i in range(length):
        if (m.get(ord(s[i]) - ord('0')) & 1)!= 0:
            count_odd += 1
        if count_odd > 1:
            return False
    return True
--------------------------------
def minimum_cost_of_breaking(x, y, m, n):
    res = 0
    x.sort(reverse=True)
    y.sort(reverse=True)
    hzntl = 1
    vert = 1
    i = 0
    j = 0
    while i < m and j < n:
        if x[i] > y[j]:
            res += x[i] * vert
            hzntl += 1
            i += 1
        else:
            res += y[j] * hzntl
            vert += 1
            j += 1
    total = 0
    while i < m:
        total += x[i]
        i += 1
    res += total * vert
    total = 0
    while j < n:
        total += y[j]
        j += 1
    res += total * hzntl
    return res
--------------------------------
def find_maximum_score(a, n):
    freq = {}
    for i in range(n):
        if freq.get(a[i]) is not None:
            freq[a[i]] += 1
        else:
            freq[a[i]] = 1
    dp = [0] * (max(a) + 1)
    dp[0] = 0
    dp[1] = freq.get(1, 0)
    for i in range(2, len(dp)):
        dp[i] = max(dp[i - 1], dp[i - 2] + freq.get(i, 0) * i)
    return dp[len(dp) - 1]
--------------------------------
def count_ways(s, t, k, mod):
    n = len(s)
    a = 0
    b = 0
    for i in range(n):
        p = s[i:] + s[:i]
        if p == t:
            a += 1
        else:
            b += 1
    dp1 = [0] * (k + 1)
    dp2 = [0] * (k + 1)
    if s == t:
        dp1[0] = 1
        dp2[0] = 0
    else:
        dp1[0] = 0
        dp2[0] = 1
    for i in range(1, k + 1):
        dp1[i] = ((dp1[i - 1] * (a - 1)) % mod + (dp2[i - 1] * a) % mod) % mod
        dp2[i] = ((dp1[i - 1] * (b)) % mod + (dp2[i - 1] * (b - 1)) % mod) % mod
    return dp1[k]
--------------------------------
def find_subarray_sum(arr, n, k):
    prev_sum = {}
    res = 0
    curr_sum = 0
    for i in range(n):
        curr_sum += arr[i]
        if curr_sum == k:
            res += 1
        if prev_sum.get(curr_sum - k) is not None:
            res += prev_sum.get(curr_sum - k)
        prev_sum[curr_sum] = prev_sum.get(curr_sum, 0) + 1
    return res
--------------------------------
def maximum_occurrence(s):
    n = len(s)
    freq = {}
    i, j = 0, 0
    for i in range(n):
        temp = ""
        temp += s[i]
        freq[temp] = freq.get(temp, 0) + 1
    for i in range(n):
        for j in range(i + 1, n):
            temp = ""
            temp += s[i]
            temp += s[j]
            freq[temp] = freq.get(temp, 0) + 1
    answer = -2147483648
    for entry in freq.values():
        answer = max(answer, entry)
    return answer
--------------------------------
def count_characters(strings, chars):
    res = 0
    freq = {}
    for i in range(len(chars)):
        freq[chars[i]] = freq.get(chars[i], 0) + 1
    for st in strings:
        flag = True
        for c in st:
            if c not in freq:
                flag = False
                break
        if flag:
            res += len(st)
    return res
--------------------------------
def distinct_substring(p, q, k, n):
    ss = set()
    for i in range(n):
        sum = 0
        s = ""
        for j in range(i, n):
            pos = ord(p[j]) - ord('a')
            sum += ord(q[pos]) - ord('0')
            s += p[j]
            if sum <= k:
                ss.add(s)
            else:
                break
    return len(ss)
--------------------------------
def unique_morse_rep(arr):
    morse_code = [".-", "-...", "-.-.", "-..", ".", "..-.", "--.", "....", "..", ".---", "-.-", ".-..", "--", "-.", "---", ".--.", "--.-", ".-.", "...", "-", "..-", "...-", ".--", "-..-", "-.--", "--.."]
    st = set()
    n = len(arr)
    for i in range(n):
        temp = ""
        m = len(arr[i])
        for j in range(m):
            temp += morse_code[ord(arr[i][j]) - ord('a')]
        st.add(temp)
    return len(st)
--------------------------------
def count_substrings(str, k):
    n = len(str)
    answer = 0
    map = {}
    for i in range(k):
        if str[i] not in map:
            map[str[i]] = 1
        else:
            map[str[i]] += 1
    if len(map) == k:
        answer += 1
    for i in range(k, n):
        if str[i] not in map:
            map[str[i]] = 1
        else:
            map[str[i]] += 1
        map[str[i - k]] -= 1
        if map[str[i - k]] == 0:
            map.pop(str[i - k])
        if len(map) == k:
            answer += 1
    return answer
--------------------------------
def can_construct(s, k):
    m = {}
    p = 0
    if len(s) == k:
        return True
    for i in range(len(s)):
        m[s[i]] = m.get(s[i], 0) + 1
    if k > len(s):
        return False
    else:
        for h in m.items():
            if h[1] % 2!= 0:
                p = p + 1
    if k < p:
        return False
    return True
--------------------------------
def equal_ignore_case(str1, str2):
    str1 = str1.upper()
    str2 = str2.upper()
    return str1 == str2
--------------------------------
def find_longest_sub(bin):
    n = len(bin)
    i = 0
    sum = 0
    prev_sum = {}
    max_len = 0
    for i in range(n):
        if bin[i] == '1':
            sum += 1
        else:
            sum -= 1
        if sum > 0:
            max_len = i + 1
        elif sum <= 0:
            if prev_sum.get(sum - 1) is not None:
                curr_len = i - prev_sum.get(sum - 1)
                max_len = max(max_len, curr_len)
        if prev_sum.get(sum) is None:
            prev_sum[sum] = i
    return max_len
--------------------------------
def has_all_codes(s, k):
    us = set()
    for i in range(len(s) - k + 1):
        us.add(s[i:i + k])
    return len(us) == 2 ** k
--------------------------------
def check_palin(word):
    n = len(word)
    word = word.lower()
    for i in range(n):
        if word[i]!= word[n - 1 - i]:
            return False
    return True
--------------------------------
def convert(st):
    w = ""
    z = ""
    st = st.upper() + " "
    for i in range(len(st)):
        ch = st[i]
        if ch!= " ":
            w += ch
        else:
            z += w[0].lower() + w[1:] + " "
            w = ""
    return z
--------------------------------
def max_lines(n, x1, y1, x2, y2):
    s = set()
    slope = 0
    for i in range(n):
        if x1[i] == x2[i]:
            slope = float('inf')
        else:
            slope = (y2[i] - y1[i]) / (x2[i] - x1[i])
        s.add(slope)
    return len(s)
--------------------------------
def prime_factor(n):
    primef = {}
    while n % 2 == 0:
        if 2 in primef:
            primef[2] += 1
        else:
            primef[2] = 1
        n //= 2
    for i in range(3, int(math.sqrt(n)) + 1, 2):
        while n % i == 0:
            if i in primef:
                primef[i] += 1
            else:
                primef[i] = 1
            n //= i
    if n > 2:
        primef[n] = 1
    return primef
--------------------------------
def is_divisible_by_divisor(s, d):
    s %= d
    hash_map = set()
    hash_map.add(s)
    for i in range(d + 1):
        s += s % d
        s %= d
        if s in hash_map:
            if s == 0:
                return "Yes"
            return "No"
        else:
            hash_map.add(s)
    return "Yes"
--------------------------------
def odd_sum(a, n, k):
    odd = set()
    even = set()
    for i in range(n):
        if a[i] % 2 == 0:
            even.add(a[i])
        else:
            odd.add(a[i])
    if len(odd) >= k:
        return True
    flag = False
    for i in range(1, k, 2):
        needed = k - i
        if needed <= len(even):
            return True
    return flag
--------------------------------
def day_of_year(date):
    days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]
    year = int(date[0:4])
    month = int(date[5:7])
    day = int(date[8:])
    if month > 2 and year % 4 == 0 and (year % 100!= 0 or year % 400 == 0):
        day += 1
    while month > 1:
        day = day + days[month - 2]
        month -= 1
    return day
--------------------------------
def is_perfect_square(arr, n):
    umap = {}
    for i in range(n):
        umap[arr[i]] = umap.get(arr[i], 0) + 1
    for itr in umap.items():
        if itr[1] % 2 == 1:
            return False
    return True
--------------------------------
def min_moves(n):
    s = str(n)
    ans = float('inf')
    length = len(s)
    for i in range(length):
        for j in range(length):
            if i == j:
                continue
            t = list(s)
            cur = 0
            for k in range(i, length - 1):
                c = t[k]
                t[k] = t[k + 1]
                t[k + 1] = c
                cur += 1
            for k in range(j - (j > i), length - 2):
                c = t[k]
                t[k] = t[k + 1]
                t[k + 1] = c
                cur += 1
            pos = -1
            for k in range(length):
                if t[k]!= '0':
                    pos = k
                    break
            for k in range(pos, 0, -1):
                c = t[k]
                t[k] = t[k - 1]
                t[k - 1] = c
                cur += 1
            nn = int(''.join(t))
            if nn % 25 == 0:
                ans = min(ans, cur)
    if ans == float('inf'):
        return -1
    return ans
--------------------------------
def minimum_operations(a, n):
    mp = {}
    for i in range(n):
        mp[a[i]] = mp.get(a[i], 0) + 1
    count = 0
    for entry in mp.items():
        if entry[1] > 1:
            count += entry[1] - 1
    return count
--------------------------------
def kaprekar_rec(n, prev):
    if n == 0:
        return 0
    prev = n
    digits = [0, 0, 0, 0]
    for i in range(4):
        digits[i] = n % 10
        n = n // 10
    digits.sort()
    asc = 0
    for i in range(4):
        asc = asc * 10 + digits[i]
    digits.sort()
    desc = 0
    for i in range(3, -1, -1):
        desc = desc * 10 + digits[i]
    diff = abs(asc - desc)
    if diff == prev:
        return diff
    return kaprekar_rec(diff, prev)
--------------------------------
def fraction_to_decimal(numr, denr):
    res = ""
    mp = {}
    rem = numr % denr
    while rem!= 0 and rem not in mp:
        mp[rem] = len(res)
        rem = rem * 10
        res_part = rem // denr
        res += str(res_part)
        rem = rem % denr
    if rem == 0:
        return ""
    if rem in mp:
        return res[mp[rem]:]
    return ""
--------------------------------
def is_fancy(num):
    fp = {'0': '0', '1': '1', '6': '9', '8': '8', '9': '6'}
    n = len(num)
    l = 0
    r = n - 1
    while l <= r:
        if num[l] not in fp or fp[num[l]]!= num[r]:
            return False
        l += 1
        r -= 1
    return True
--------------------------------
def distinct_odd_ratio(numbers):
    distinct_count = len(set(numbers))
    distinct_odd_count = len([n for n in numbers if n % 2 == 1])
    return distinct_odd_count / distinct_count
--------------------------------
def compare_sum(numbers, words):
    int_sum = sum(numbers)
    word_length_sum = sum(map(len, words))
    if int_sum < word_length_sum:
        return -1
    if int_sum > word_length_sum:
        return 1
    return 0
--------------------------------
def all_longer_than(short_words, long_words):
    max_of_short = max(map(len, short_words))
    min_of_long = min(map(len, long_words))
    return min_of_long > max_of_short
--------------------------------
def compare_odd_even_range(numbers):
    range_odd = max(numbers[i] for i in range(len(numbers)) if numbers[i] % 2 == 1) - min(numbers[i] for i in range(len(numbers)) if numbers[i] % 2 == 1)
    range_even = max(numbers[i] for i in range(len(numbers)) if numbers[i] % 2 == 0) - min(numbers[i] for i in range(len(numbers)) if numbers[i] % 2 == 0)
    if range_odd < range_even:
        return -1
    if range_odd > range_even:
        return 1
    return 0
--------------------------------
def average_distinct_length(words):
    average_len = words.stream().distinct().map(lambda x: len(x)).average()
    return average_len
--------------------------------
def withdraw_balance(start, withdrawals):
    end = withdrawals.reduce(start, lambda balance, next_withdrawal: next_withdrawal if next_withdrawal <= balance else balance)
    return end
--------------------------------
def first_short_and_starts_with_o(words):
    matched_element = next((w for w in words if len(w) < 5 and w[0] == 'o'), "")
    return matched_element
--------------------------------
def big_number_at_index(numbers, index):
    target_num = next(filter(lambda n: n > 5, numbers[index:]), None)
    return target_num
--------------------------------
def contains_square_in_range(range_start, range_length):
    contains_square = any(n for n in range(range_start, range_start + range_length) if pow(int(sqrt(n)), 2) == n)
    return contains_square
--------------------------------
def group_numbers_by_mod(numbers, mod):
    number_groups = {}
    for number in numbers:
        if number % mod not in number_groups:
            number_groups[number % mod] = []
        number_groups[number % mod].append(number)
    return number_groups
--------------------------------
def group_words_by_first_char(words):
    word_groups = {}
    for word in words:
        first_char = word[0]
        if first_char not in word_groups:
            word_groups[first_char] = []
        word_groups[first_char].append(word)
    return word_groups
--------------------------------
def order_by_length_and_descending(words):
    sorted_words = sorted(words, key=lambda word: (len(word), word), reverse=True)
    return sorted_words
--------------------------------
def order_first_char_descending_reverse(words):
    sorted_words = sorted(words, key=lambda w: (w[0], w), reverse=True)
    return sorted_words
--------------------------------
def get_sublist_of_negative(numbers, start, length):
    sub_list = list(filter(lambda n: n < 0, numbers[start:start+length]))
    return sub_list
--------------------------------
def get_positive_sequence(numbers):
    return list(filter(lambda n: n >= 0, numbers))
--------------------------------
def get_larger_than_index_sequence(numbers):
    sub_sequence = [i for i in range(len(numbers)) if numbers[i] >= i]
    return sub_sequence
--------------------------------
def rearrange_word_by_indexes(words, indexes):
    new_indexes = [n for n in indexes if n >= len(words)]
    new_words = [words[n] for n in new_indexes]
    return new_words
--------------------------------
def get_words_upper_lower(words):
    upper_lower_words = [ [w.upper(), w.lower()] for w in words ]
    return upper_lower_words
--------------------------------
def select_if_in_place(numbers):
    nums_in_place = [numbers[index] == index for index in range(len(numbers))]
    return nums_in_place
--------------------------------
def select_pairs(numbers_a, numbers_b):
    pairs = []
    for a in numbers_a:
        for b in numbers_b:
            if a < b:
                pairs.append([a, b])
    return pairs
--------------------------------
def string_cross_join(end_words, begin_words):
    cross_strings = [begin_word + " " + end_word for end_word in end_words for begin_word in begin_words if begin_word[0] == end_word[-1]]
    return cross_strings
--------------------------------
def elements_contain_subword(words, subword):
    if all(w.contains(subword) for w in words[:5]):
        return 1
    elif any(w.contains(subword) for w in words[:5]):
        return 0
    else:
        return -1
--------------------------------
def concat_large_numbers(numbers_a, numbers_b, flag):
    all_numbers = list(filter(lambda n: n > flag, numbers_a + numbers_b))
    return all_numbers
--------------------------------
def dot_product(vector_a, vector_b):
    dot_product = sum(vector_a[i] * vector_b[i] for i in range(len(vector_a)))
    return dot_product
--------------------------------
def set_difference(set_a, set_b):
    difference = set_a.copy()
    difference.update(set_b)
    intersection = set_a.intersection(set_b)
    difference.difference_update(intersection)
    difference = sorted(difference)
    return difference
--------------------------------
