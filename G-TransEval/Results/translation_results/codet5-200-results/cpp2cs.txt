int GreatestCommonDivisor ( int a , int b ) { if ( a == 0 || b == 0 ) { return a + b ; } if ( a == b ) { return a ; } if ( a > b ) { return GreatestCommonDivisor ( a % b , b ) ; } else { return GreatestCommonDivisor ( a , b % a ) ; } }
int LargestDivisor ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { return n / i ; } } return 1 ; }
bool IsPrime ( int n ) { if ( n < 2 ) { return false ; } for ( int k = 2 ; k < n ; k ++ ) { if ( n % k == 0 ) { return false ; } } return true ; }
int FizzBuzz ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 11 == 0 || i % 13 == 0 ) { int q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) { count += 1 ; } q /= 10 ; } } } return count ; }
int PrimeFib ( int n ) { int f0 = 0 ; int f1 = 1 ; while ( n > 0 ) { int p = f0 + f1 ; bool is_prime = p >= 2 ; for ( int i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { n -= 1 ; } f0 = f1 ; f1 = p ; } return f1 ; }
double TriangleArea ( double a , double h ) { return a * h / 2 ; }
int ModP ( int n , int p ) { int ret = 1 ; for ( int i = 0 ; i < n ; i ++ ) { ret = ( ret * 2 ) % p ; } return ret ; }
int Add ( int x , int y ) { return x + y ; }
int Fib ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return Fib ( n - 1 ) + Fib ( n - 2 ) ; }
int LargestPrimeFactor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) { while ( n % i == 0 && n > i ) { n /= i ; } } return n ; }
int SumToN ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { result += i ; } return result ; }
int Fibfib ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 0 ; } if ( n == 2 ) { return 1 ; } return Fibfib ( n - 1 ) + Fibfib ( n - 2 ) + Fibfib ( n - 3 ) ; }
bool IsMultiplyPrime ( int a ) { int num = 0 ; for ( int i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) { a /= i ; num += 1 ; } } return num == 3 ; }
bool IsSimplePower ( int x , int n ) { if ( n == 1 ) { return x == 1 ; } int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
int ChooseNum ( int x , int y ) { if ( x > y ) { return - 1 ; } if ( y % 2 == 0 ) { return y ; } if ( x == y ) { return - 1 ; } return y - 1 ; }
bool IsEqualToSumEven ( int n ) { return n % 2 == 0 && n >= 8 ; }
int SpecialFactorial ( int n ) { int fact = 1 ; int special_fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; special_fact *= fact ; } return special_fact ; }
int XOrY ( int n , int x , int y ) { bool is_prime = n >= 2 ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { return x ; } return y ; }
bool RightAngleTriangle ( int a , int b , int c ) { return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b ; }
int FastPow ( int n , int k ) { if ( k == 0 ) { return 1 ; } int temp = FastPow ( n , k / 2 ) ; if ( k % 2 == 0 ) { return temp * temp ; } else { return n * temp * temp ; } }
bool IsPalin ( String s ) { int l = s . Length ; for ( int i = 0 ; i < l ; i ++ ) { if ( s [ i ] != s [ s . Length - i - 1 ] ) { return false ; } } return true ; }
int FindSum ( int n ) { int ans = 0 , temp = 0 ; for ( int i = 1 ; i <= n && temp < n ; i ++ ) { temp = i - 1 ; int num = 1 ; while ( temp < n ) { if ( temp + i <= n ) { ans += i * num ; } else { ans += ( n - temp ) * num ; } temp += i ; num += 1 ; } } return ans ; }
int GetNextGap ( int gap ) { gap = gap * 10 / 13 ; if ( gap < 1 ) { return 1 ; } return gap ; }
int CountNonDecreasing ( int n ) { int k = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count /= i ; } return count ; }
int Power ( int x , int y ) { if ( y == 0 ) { return 1 ; } else if ( y % 2 == 0 ) { return Power ( x , y / 2 ) * Power ( x , y / 2 ) ; } else { return x * Power ( x , y / 2 ) * Power ( x , y / 2 ) ; } }
double Power ( double x , int y ) { if ( y == 0 ) { return 1 ; } double temp = Power ( x , y / 2 ) ; if ( y % 2 == 0 ) { return temp * temp ; } else { if ( y > 0 ) { return x * temp * temp ; } else { return temp * temp / x ; } } }
int Multiply ( int x , int y ) { if ( y == 0 ) { return 0 ; } else if ( y > 0 ) { return x + Multiply ( x , y - 1 ) ; } else { return - Multiply ( x , - y ) ; } }
int Smallest ( int x , int y , int z ) { if ( ! ( y / x ) ) { return ! ( y / z ) ? y : z ; } return ! ( x / z ) ? x : z ; }
bool IsPowerOfFour ( int n ) { if ( n == 0 ) { return false ; } while ( n != 1 ) { if ( n % 4 != 0 ) { return false ; } n = n / 4 ; } return true ; }
int ModInverse ( int a , int m ) { int m0 = m ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
int CntRotations ( string s , int n ) { string s2 = s + s ; List < int > pre = new List < int > ( ) ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) { pre [ i ] += pre [ i - 1 ] ; } if ( s2 [ i ] == 'a' || s2 [ i ] == 'e' || s2 [ i ] == 'i' || s2 [ i ] == 'o' || s2 [ i ] == 'u' ) { pre [ i ] ++ ; } } int ans = 0 ; for ( int i = n - 1 ; i < 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) { x1 -= pre [ l ] ; } r = i - n / 2 ; int left = pre [ r ] ; if ( l >= 0 ) { left -= pre [ l ] ; } int right = x1 - left ; if ( left > right ) { ans ++ ; } } return ans ; }
int BinomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) { k = n - k ; } for ( int i = 0 ; i < k ; ++ i ) { res *= n - i ; res /= i + 1 ; } return res ; }
bool IsPrefix ( String temp , String s ) { if ( temp . Length < s . Length ) { return false ; } else { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] != temp [ i ] ) { return false ; } } return true ; } }
string LexicographicallySmallestString ( String s , int n ) { int last_ze = - 1 ; String ans = "" ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { last_ze = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i <= last_ze && s [ i ] == '0' ) { ans += s [ i ] ; } else if ( i > last_ze ) { ans += s [ i ] ; } } return ans ; }
int CalculateMax ( int n , int m , int k ) { int ans = - 1 ; int low = 0 , high = m ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int val = 0 ; int l = k - 1 ; int r = n - k ; val += mid ; if ( mid >= l ) { val += l * ( 2 * mid - l - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( l - mid ) ; } if ( mid >= r ) { val += r * ( 2 * mid - r - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( r - mid ) ; } if ( val <= m ) { ans = Math . Max ( ans , mid ) ; low = mid + 1 ; } else { high = mid - 1 ; } } return ans ; }
int FindLength ( String s , char i , char j ) { char required = i ; int length = 0 ; for ( char curr in s ) { if ( curr == required ) { length += 1 ; if ( required == i ) { required = j ; } else { required = i ; } } } return length ; }
bool CheckReverse ( int left_sum , int right_sum ) { int rev = 0 ; int temp = right_sum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp /= 10 ; } if ( rev == left_sum ) { return true ; } return false ; }
bool IsComposite ( int n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return false ; } if ( n % 2 == 0 || n % 3 == 0 ) { return true ; } for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return true ; } } return false ; }
int MinDeletion ( String s ) { int n = s . Length ; int first_idx1 = - 1 ; int last_idx0 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { first_idx1 = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { last_idx0 = i ; break ; } } if ( first_idx1 == - 1 || last_idx0 == - 1 ) { return 0 ; } int count1 = 0 , count0 = 0 ; for ( int i = 0 ; i < last_idx0 ; i ++ ) { if ( s [ i ] == '1' ) { count1 ++ ; } } for ( int i = first_idx1 + 1 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { count0 ++ ; } } return Math . Min ( count0 , count1 ) ; }
int MinSteps ( string s , int n ) { int smaller , cost = 0 ; List < int > f = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int curr_ele = s [ i ] - 'a' ; smaller = 0 ; for ( int j = 0 ; j <= curr_ele ; j ++ ) { if ( f [ j ] != 0 ) { smaller += f [ j ] ; } } if ( smaller == 0 ) { cost += i + 1 ; } else { cost += i - smaller + 1 ; } f [ s [ i ] - 'a' ] ++ ; } return cost ; }
int NumberOfWays ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 1 ; b < n ; b ++ ) { int c = n - ( a + b ) ; if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } } return count ; }
int SlopeOfNum ( String num , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) { slope ++ ; } else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) { slope ++ ; } } return slope ; }
int MiddleOfThree ( int a , int b , int c ) { int x = a - b ; int y = b - c ; int z = a - c ; if ( x * y > 0 ) { return b ; } else if ( x * z > 0 ) { return c ; } else { return a ; } }
int CountMaxSetBits ( int left , int right ) { while ( ( left | ( left + 1 ) ) <= right ) { left |= left + 1 ; } return left ; }
int FindS ( int s ) { int l = 1 , r = ( s / 2 ) + 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) { return mid ; } else if ( sum > s ) { r = mid - 1 ; } else { l = mid + 1 ; } } return - 1 ; }
bool Check ( String s ) { int min = Int32 . MaxValue ; int max = Int32 . MinValue ; int sum = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { int ascii = s [ i ] ; if ( ascii < 96 || ascii > 122 ) { return false ; } sum += ascii ; if ( min > ascii ) { min = ascii ; } if ( max < ascii ) { max = ascii ; } } min -= 1 ; int eSum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == eSum ; }
int MinimumPossibleProduct ( int k ) { int res = 1 ; int r = ( 1 << k ) - 1 ; for ( int i = 0 ; i < k ; i ++ ) { res *= r - 1 ; } res *= r ; return res ; }
int FindInGrid ( int i , int j ) { if ( i == j ) { return i * i - ( i - 1 ) ; } else if ( i > j ) { if ( i % 2 == 0 ) { return i * i - ( j - 1 ) ; } else { return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } } else { if ( j % 2 == 0 ) { return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; } else { return j * j - ( i - 1 ) ; } } }
int FindMinOperationsReqEmpStr ( String s ) { int cnt_one = 0 ; int cnt_zero = 0 ; int n = s . Length ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '0' ) { if ( cnt_one ) { cnt_one -- ; } cnt_zero ++ ; } else { if ( cnt_zero ) { cnt_zero -- ; } cnt_one ++ ; } } return cnt_one + cnt_zero ; }
bool IsReachable ( int x1 , int y1 , int x2 , int y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) { x2 %= y2 ; } else { y2 %= x2 ; } } if ( x2 == x1 ) { return y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ; } else if ( y2 == y1 ) { return x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ; } else { return false ; } }
int FindMaxSoln ( int n , int x , int y ) { int ans = int . MinValue ; for ( int k = 0 ; k <= n ; k ++ ) { if ( k % x == y ) { ans = Math . Max ( ans , k ) ; } } return ans >= 0 && ans <= n ? ans : - 1 ; }
int NumberOfPairs ( int n ) { int count = 0 ; int i = 1 , j = n - 1 ; while ( i < j ) { if ( i + j == n ) { count ++ ; } i ++ ; j -- ; } return count ; }
int MinChanges ( String s , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( s [ 0 ] != '1' ) { count ++ ; ones ++ ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s [ i ] == '0' ) { zeros ++ ; } else { ones ++ ; } if ( zeros > ones ) { zeros -- ; ones ++ ; count ++ ; } } return count ; }
int KVisibleFromLeft ( int n , int k ) { if ( n == k ) { return 1 ; } if ( k == 1 ) { int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { ans *= i ; } return ans ; } return KVisibleFromLeft ( n - 1 , k - 1 ) + ( n - 1 ) * KVisibleFromLeft ( n - 1 , k ) ; }
double Find ( int n , int sum ) { if ( sum > 6 * n || sum < n ) { return 0 ; } if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) { return 1.0 / 6 ; } else { return 0 ; } } double s = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) { s += Find ( n - 1 , sum - i ) / 6 ; } return s ; }
int BinCoff ( int n , int r ) { int val = 1 ; if ( r > n - r ) { r = n - r ; } for ( int i = 0 ; i < r ; i ++ ) { val *= n - i ; val /= i + 1 ; } return val ; }
int GetMask ( int val ) { int mask = 0 ; if ( val == 0 ) { return 1 ; } while ( val > 0 ) { int d = val % 10 ; mask |= 1 << d ; val /= 10 ; } return mask ; }
int WaysToKAdjacentSetBits ( int n , int k , int current_index , int adjacent_set_bits , int last_bit ) { if ( current_index == n ) { if ( adjacent_set_bits == k ) { return 1 ; } return 0 ; } int no_of_ways = 0 ; if ( last_bit == 1 ) { no_of_ways += WaysToKAdjacentSetBits ( n , k , current_index + 1 , adjacent_set_bits + 1 , 1 ) ; no_of_ways += WaysToKAdjacentSetBits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } else if ( last_bit != 0 ) { no_of_ways += WaysToKAdjacentSetBits ( n , k , current_index + 1 , adjacent_set_bits , 1 ) ; no_of_ways += WaysToKAdjacentSetBits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } return no_of_ways ; }
int CheckFunc ( int i , int j , String st ) { if ( st [ i ] == '(' && st [ j ] == ')' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == ']' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '}' ) { return 1 ; } return 0 ; }
int FindGolomb ( int n ) { if ( n == 1 ) { return 1 ; } return 1 + FindGolomb ( n - FindGolomb ( FindGolomb ( n - 1 ) ) ) ; }
bool AllOnes ( String s , int n ) { int co = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { co += s [ i ] == '1' ? 1 : 0 ; } return co == n ; }
int Pad ( int n ) { int p_prev_prev = 1 , p_prev = 1 , p_curr = 1 , p_next = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { p_next = p_prev_prev + p_prev ; p_prev_prev = p_prev ; p_curr = p_next ; } return p_next ; }
int OddLengthPalindrome ( int k ) { int palin = k ; k = k / 10 ; while ( k > 0 ) { int rev = k % 10 ; palin = palin * 10 + rev ; k = k / 10 ; } return palin ; }
string ChangeString ( String s0 ) { String s = s0 ; int n = s . Length ; if ( s [ 0 ] == '?' ) { s [ 0 ] = 'a' ; if ( s [ 0 ] == s [ 1 ] ) { s [ 0 ] ++ ; } } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == '?' ) { s [ i ] = 'a' ; if ( s [ i ] == s [ i - 1 ] ) { s [ i ] ++ ; } if ( s [ i ] == s [ i + 1 ] ) { s [ i ] ++ ; } if ( s [ i ] == s [ i - 1 ] ) { s [ i ] ++ ; } } } if ( s [ n - 1 ] == '?' ) { s [ n - 1 ] = 'a' ; if ( s [ n - 1 ] == s [ n - 2 ] ) { s [ n - 1 ] ++ ; } } return s ; }
int TotalHammingDistance ( int n ) { int i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + n / i ; i = i * 2 ; } return sum ; }
int CheckBitonic ( String s ) { int i = 1 ; for ( ; i < s . Length ; i ++ ) { if ( s [ i ] > s [ i - 1 ] ) { continue ; } if ( s [ i ] <= s [ i - 1 ] ) { break ; } } if ( i == s . Length - 1 ) { return 1 ; } int j = i + 1 ; for ( ; j < s . Length ; j ++ ) { if ( s [ j ] < s [ j - 1 ] ) { continue ; } if ( s [ j ] >= s [ j - 1 ] ) { break ; } } i = j ; if ( i != s . Length ) { return 0 ; } return 1 ; }
bool EndsWith ( String str , String pat ) { int pat_len = pat . Length ; int str_len = str . Length ; if ( pat_len > str_len ) { return false ; } pat_len -- ; str_len -- ; while ( pat_len >= 0 ) { if ( pat [ pat_len ] != str [ str_len ] ) { return false ; } pat_len -- ; str_len -- ; } return true ; }
int GetSum ( int n , int d ) { if ( n < d ) { return 0 ; } while ( n % 10 != d ) { n -- ; } int k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
int BalancedStringBySwapping ( String s ) { int unbalanced_pair = 0 ; for ( int i = 0 ; i < s . Length ; ++ i ) { if ( unbalanced_pair > 0 && s [ i ] == '[' ) { -- unbalanced_pair ; } else if ( s [ i ] == '[' ) { ++ unbalanced_pair ; } } return ( unbalanced_pair + 1 ) / 2 ; }
int ComputeHash ( string s ) { int p = 31 ; long mod = 1e9 + 7 ; long hash_val = 0 ; long mul = 1 ; for ( char ch in s ) { hash_val = ( hash_val + ( ch - 'a' + 1 ) * mul ) % mod ; mul = mul * p % mod ; } return hash_val ; }
int CountOfSubstringWithOnlyOnes ( String s ) { int res = 0 , count = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { count = s [ i ] == '1' ? count + 1 : 0 ; res = res + count ; } return res ; }
int Composite ( int n ) { int flag = 0 ; int c = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) { c += 1 ; } } if ( c >= 3 ) { flag = 1 ; } return flag ; }
bool IsDivBySix ( String s , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += s [ i ] - 'a' + 1 ; } if ( sum % 3 != 0 ) { return false ; } int last_digit = ( s [ n - 1 ] - 'a' + 1 ) % 10 ; if ( last_digit % 2 != 0 ) { return false ; } return true ; }
bool IsRedundantBraces ( String s ) { int a = 0 , b = 0 ; for ( int i = 0 ; i < s . Length - 2 ; i ++ ) { if ( s [ i ] == '(' && s [ i + 2 ] == ')' ) { return true ; } if ( s [ i ] == '*' || s [ i ] == '+' || s [ i ] == '-' || s [ i ] == '/' ) { a ++ ; } if ( s [ i ] == '(' ) { b ++ ; } } if ( b > a ) { return true ; } return false ; }
int CountSubStr ( String s , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 2 ; ) { if ( s [ i ] == '0' && s [ i + 1 ] == '1' && s [ i + 2 ] == '0' ) { count ++ ; i += 3 ; } else if ( s [ i ] == '1' && s [ i + 1 ] == '0' && s [ i + 2 ] == '1' ) { count ++ ; i += 3 ; } else { i ++ ; } } return count ; }
int PrefixOccurrences ( String s ) { char c = s [ 0 ] ; int count_c = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == c ) { count_c ++ ; } } return count_c ; }
bool IsValid ( String s , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( s [ i ] == s [ i - 1 ] ) { return false ; } } return true ; }
int Count ( String s , int k ) { int n = s . Length ; int d = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d += s [ i ] ; } if ( d % k == 0 ) { count += 1 ; } for ( int i = k ; i < n ; i ++ ) { int prev = s [ i - k ] ; d -= prev ; d += s [ i ] ; if ( d % k == 0 ) { count += 1 ; } } return count ; }
int FindSubstringCount ( String s ) { int result = 0 ; int n = s . Length ; int i = 0 ; while ( i < n - 1 ) { if ( s [ i ] + 1 == s [ i + 1 ] ) { result ++ ; while ( i < n - 1 && s [ i ] + 1 == s [ i + 1 ] ) { i ++ ; } } i ++ ; } return result ; }
bool Find ( String s1 , String s2 ) { int len1 = s1 . Length , len2 = s2 . Length ; if ( len1 != len2 ) { return false ; } List < int > d = new List < int > ( ) ; d [ 0 ] = s2 [ 0 ] - s1 [ 0 ] ; for ( int i = 1 ; i < len1 ; i ++ ) { if ( s1 [ i ] > s2 [ i ] ) { return false ; } else { d [ i ] = s2 [ i ] - s1 [ i ] ; } } for ( int i = 0 ; i < len1 - 1 ; i ++ ) { if ( d [ i ] < d [ i + 1 ] ) { return false ; } } return true ; }
bool IsInGivenBase ( String s , int bas ) { if ( bas > 16 ) { return false ; } else if ( bas <= 10 ) { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( ! ( s [ i ] >= '0' && s [ i ] < '0' + bas ) ) { return false ; } } } else { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( ! ( ( s [ i ] >= '0' && s [ i ] < '0' + bas ) || ( s [ i ] >= 'A' && s [ i ] < ( 'A' + bas - 10 ) ) ) { return false ; } } } return true ; }
int CountNonEmptySubstr ( String s ) { int n = s . Length ; return n * ( n + 1 ) / 2 ; }
int EvenDecimalValue ( String s , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimal_value = 0 ; int power_of_2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimal_value += ( s [ k ] - '0' ) * power_of_2 ; power_of_2 *= 2 ; } if ( decimal_value % 2 == 0 ) { result ++ ; } } } return result ; }
int Calculate ( string s ) { int ans = 6 ; for ( int i = 0 ; i < 10 ; ++ i ) { for ( int j = 0 ; j < 10 ; ++ j ) { for ( int k = 0 ; k < 10 ; ++ k ) { for ( int l = 0 ; l < 10 ; ++ l ) { for ( int m = 0 ; m < 10 ; ++ m ) { for ( int n = 0 ; n < 10 ; ++ n ) { if ( i + j + k == l + m + n ) { int c = 0 ; if ( i != s [ 0 ] - '0' ) { c ++ ; } if ( j != s [ 1 ] - '0' ) { c ++ ; } if ( k != s [ 2 ] - '0' ) { c ++ ; } if ( l != s [ 3 ] - '0' ) { c ++ ; } if ( n != s [ 5 ] - '0' ) { c ++ ; } if ( c < ans ) { ans = c ; } } } } } return ans ; }
int XorZero ( String s ) { int one_count = 0 , zero_count = 0 ; int n = s . Length ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { one_count ++ ; } else { zero_count ++ ; } } if ( one_count % 2 == 0 ) { return zero_count ; } return one_count ; }
string EvenLength ( String n ) { String res = n ; for ( int j = n . Length - 1 ; j >= 0 ; -- j ) { res += n [ j ] ; } return res ; }
int CountSubstringWithEqualEnds ( String s ) { int result = 0 ; int n = s . Length ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( s [ i ] == s [ j ] ) { result ++ ; } } } return result ; }
double NormalSlope ( double a , double b , double x1 , double y1 ) { double g = a / 2 ; double f = b / 2 ; if ( g - x1 == 0 ) { return - 1 ; } double slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) { return - 2 ; } return slope ; }
bool Orthogonality ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) { int dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) { return true ; } else { return false ; } }
double FindAreaShaded ( double a ) { double sq_area = a * a ; double semi_circle_area = 3.14 * ( a * a ) / 8 ; double shaded_area = 4 * semi_circle_area - sq_area ; return shaded_area ; }
int Factorial ( int a , int b ) { int res = 1 ; for ( int i = 1 ; i <= a + b ; i ++ ) { res = res * i ; } for ( int i = 1 ; i <= a ; i ++ ) { res = res / i ; } for ( int i = 1 ; i <= b ; i ++ ) { res = res / i ; } return res ; }
int FactorTree ( int n ) { int height = 0 ; while ( n > 1 ) { bool flag = false ; for ( int i = 2 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( flag == false ) { break ; } } return height ; }
string FindIfPossible ( int n , int s , int x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) { return "Yes" ; } if ( n == 1 ) { if ( s == x ) { return "Yes" ; } else { return "No" ; } } if ( n == 2 ) { int c = ( s - x ) / 2 ; int a = c ; int b = c ; a = a + x ; if ( ( a ^ b ) == x ) { return "Yes" ; } else { return "No" ; } } } return "No" ; }
int MaximumTripletXor ( int a , int b , int c ) { int ans = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int cur = 1 << i ; if ( a >= cur ) { ans += cur ; a -= cur ; } else if ( b >= cur ) { ans += cur ; b -= cur ; } else if ( c >= cur ) { ans += cur ; c -= cur ; } } return ans ; }
int ItemType ( int n ) { int count = 0 ; int day = 1 ; while ( count + day * ( day + 1 ) / 2 < n ) { count += day * ( day + 1 ) / 2 ; day ++ ; } for ( int type = day ; type > 0 ; type -- ) { count += type ; if ( count >= n ) { return type ; } } return 0 ; }
int MaxGcdInRange ( int l , int r ) { int ans = 1 ; for ( int z = r ; z >= 1 ; z -- ) { if ( r / z - ( l - 1 ) / z > 1 ) { ans = z ; break ; } } return ans ; }
int SumOfDigits ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += n % 10 ; n = n / 10 ; } return sum ; }
bool IsRepUnitNum ( int n , int b ) { int length = 0 ; int count_one = 0 ; while ( n != 0 ) { int r = n % b ; length ++ ; if ( r == 1 ) { count_one ++ ; } n = n / b ; } return count_one >= 3 && count_one == length ; }
bool IsStraightLineNum ( int n ) { if ( n <= 99 ) { return false ; } String s = Convert . ToString ( n , 2 ) ; int d = s [ 1 ] - s [ 0 ] ; for ( int i = 2 ; i < s . Length ; i ++ ) { if ( s [ i ] - s [ i - 1 ] != d ) { return false ; } } return true ; }
int GetCount ( int d , int n ) { int no = n / d ; int result = no ; for ( int p = 2 ; p * p <= no ; ++ p ) { if ( no % p == 0 ) { while ( no % p == 0 ) { no /= p ; } result -= result / p ; } } if ( no > 1 ) { result -= result / no ; } return result ; }
bool IsEvenParity ( int x ) { int parity = 0 ; while ( x != 0 ) { if ( ( x & 1 ) > 0 ) { parity ++ ; } x = x >> 1 ; } if ( parity % 2 == 0 ) { return true ; } else { return false ; } }
int IsPerfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) { sum = sum + i + n / i ; } else { sum = sum + i ; } } } if ( sum == n && n != 1 ) { return n ; } return 0 ; }
int LogAToBaseB ( int a , int b ) { return a > b - 1 ? 1 + LogAToBaseB ( a / b , b ) : 0 ; }
int UsingBinarySearch ( int start , int end , int n , int s ) { if ( start >= end ) { return start ; } int mid = start + ( end - start ) / 2 ; int total_sum = n * ( n + 1 ) / 2 ; int mid_sum = mid * ( mid + 1 ) / 2 ; if ( total_sum - mid_sum <= s ) { return UsingBinarySearch ( start , mid , n , s ) ; } return UsingBinarySearch ( mid + 1 , end , n , s ) ; }
string MinInt ( String s ) { String s1 = s ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s1 [ i ] >= '5' ) { s1 [ i ] = '9' - s1 [ i ] + '0' ; } } if ( s1 [ 0 ] == '0' ) { s1 [ 0 ] = '9' ; } return s1 ; }
int CountTriplets ( int a , int b , int c ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { for ( int k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) { ans ++ ; } } } } return ans ; }
bool TopsyTurvy ( String s ) { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == '2' || s [ i ] == '4' || s [ i ] == '5' || s [ i ] == '6' || s [ i ] == '7' || s [ i ] == '9' ) { return false ; } } return true ; }
int SumOfLastDig ( int n , int m ) { int sum = 0 ; int k = n / m ; int [ ] arr = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ] ; } int rem = k % 10 ; int ans = k / 10 * sum ; for ( int i = 0 ; i < rem ; i ++ ) { ans += arr [ i ] ; } return ans ; }
int TotalPay ( int total_items , int price_of_one_item , int n , int m ) { int freeItems = 0 , actual = 0 ; freeItems = total_items / ( n + m ) ; actual = total_items - freeItems ; int amount = actual * price_of_one_item ; return amount ; }
int MinOperations ( int x , int y , int p , int q ) { if ( y % x != 0 ) { return - 1 ; } int d = y / x ; int a = 0 ; while ( d % p == 0 ) { d /= p ; a += 1 ; } int b = 0 ; while ( d % q == 0 ) { d /= q ; b += 1 ; } if ( d != 1 ) { return - 1 ; } return a + b ; }
bool IsMersenne ( int n ) { while ( n != 0 ) { int r = n % 2 ; if ( r == 0 ) { return false ; } n /= 2 ; } return true ; }
int FindThirdDigit ( int n ) { if ( n < 3 ) { return 0 ; } return n & 1 ? 1 : 6 ; }
bool IsOddLength ( int num ) { int count = 0 ; while ( num > 0 ) { num /= 10 ; count ++ ; } if ( count % 2 != 0 ) { return true ; } return false ; }
bool CheckIsPossible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return count > 1 ; }
int Bytes ( int kilobytes ) { int b = kilobytes * 1024 ; return b ; }
int OctahedralNum ( int n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
string CheckEqual ( String s ) { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] != '1' && s [ i ] != '0' && s [ i ] != '8' ) { return "No" ; } } int start = 0 , end = s . Length - 1 ; while ( start < end ) { if ( s [ start ] != s [ end ] ) { return "No" ; } start ++ ; end -- ; } return "Yes" ; }
bool IsUndulating ( String n ) { if ( n . Length <= 2 ) { return false ; } for ( int i = 2 ; i < n . Length ; i ++ ) { if ( n [ i - 2 ] != n [ i ] ) { return false ; } } return true ; }
int FirstDigit ( int n ) { while ( n >= 10 ) { n /= 10 ; } return n ; }
int CountDigit ( int n ) { if ( n == 0 ) { return 0 ; } return 1 + CountDigit ( n / 10 ) ; }
bool IsDivisibleBy5 ( String s ) { int n = s . Length ; return s [ n - 1 ] - '0' == 0 || s [ n - 1 ] - '0' == 5 ; }
int Inv ( int a , int m ) { int m0 = m ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
bool OnlyFirstAndLastAreSet ( int n ) { if ( n == 1 ) { return true ; } if ( n == 2 ) { return false ; } return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
int Divide ( int dividend , int divisor ) { int sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? - 1 : 1 ; dividend = Math . Abs ( dividend ) ; divisor = Math . Abs ( divisor ) ; int quotient = 0 ; long temp = 0 ; for ( int i = 31 ; i >= 0 ; -- i ) { if ( ( temp + ( ( long ) divisor << i ) <= dividend ) { temp += ( long ) divisor << i ; quotient |= 1 << i ; } } if ( sign == - 1 ) { quotient = - quotient ; } return quotient ; }
char FindProfession ( int level , int pos ) { if ( level == 1 ) { return 'e' ; } if ( FindProfession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) { return pos % 2 ? 'd' : 'e' ; } return pos % 2 ? 'e' : 'd' ; }
bool HasCloseElements ( List < double > numbers , double threshold ) { for ( int i = 0 ; i < numbers . Count ; i ++ ) { for ( int j = i + 1 ; j < numbers . Count ; j ++ ) { double distance = Math . Abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) { return true ; } } } return false ; }
double TruncateNumber ( double number ) { return fmod ( number , 1 ) ; }
bool BelowZero ( int [ ] operations ) { int balance = 0 ; for ( int op in operations ) { balance += op ; if ( balance < 0 ) { return true ; } } return false ; }
double MeanAbsoluteDeviation ( List < double > numbers ) { double sum_num = 0 ; for ( double num in numbers ) { sum_num += num ; } double mean = sum_num / numbers . Count ; double sum_abs_diff = 0 ; for ( double num in numbers ) { sum_abs_diff += Math . Abs ( num - mean ) ; } return sum_abs_diff / numbers . Count ; }
List < int > Intersperse ( List < int > numbers , int delimiter ) { List < int > result = new List < int > ( ) ; if ( numbers . Count == 0 ) { return result ; } for ( int i = 0 ; i < numbers . Count - 1 ; i ++ ) { result . Add ( numbers [ i ] ) ; result . Add ( delimiter ) ; } result . Add ( numbers [ numbers . Count - 1 ] ) ; return result ; }
int SumProduct ( int [ ] numbers ) { int sum_value = 0 ; int prod_value = 1 ; for ( int n in numbers ) { sum_value += n ; prod_value *= n ; } return { sum_value , prod_value } ; }
List < String > AllPrefixes ( String s ) { List < String > result = new List < String > ( ) ; for ( int i = 1 ; i <= s . Length ; i ++ ) { result . Add ( s . Substring ( 0 , i ) ) ; } return result ; }
List < int > ParseMusic ( String music_string ) { String current = "" ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i <= music_string . Length ; i ++ ) { if ( i == music_string . Length || music_string [ i ] == ' ' ) { if ( current == "o" ) { result . Add ( 4 ) ; } if ( current == "o|" ) { result . Add ( 2 ) ; } if ( current == ".|" ) { result . Add ( 1 ) ; } current . Clear ( ) ; } else { current += music_string [ i ] ; } } return result ; }
int Strlen ( String s ) { return s . Length ; }
List < int > Factorize ( int n ) { List < int > factors = new List < int > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n /= i ; factors . Add ( i ) ; i -- ; } } return factors ; }
string Concatenate ( string [ ] strings ) { string result = "" ; for ( string s in strings ) { result += s ; } return result ; }
List < double > GetPositive ( List < double > l ) { List < double > result = new List < double > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( l [ i ] > 0 ) { result . Add ( l [ i ] ) ; } } return result ; }
List < double > SortEven ( List < double > l ) { List < double > evens = new List < double > ( ) ; for ( int i = 0 ; i < l . Count ; i += 2 ) { evens . Add ( l [ i ] ) ; } Array . Sort ( evens ) ; List < double > result = new List < double > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( i % 2 == 0 ) { result . Add ( evens [ i / 2 ] ) ; } if ( i % 2 == 1 ) { result . Add ( l [ i ] ) ; } } return result ; }
string DecodeCyclic ( String s ) { string output = "" ; int i = 0 ; while ( i <= s . Length - 3 ) { string x = s [ i + 2 ] + s . Substring ( i , 2 ) ; output += x ; i += 3 ; } return output + s . Substring ( i ) ; }
int CarRaceCollision ( int n ) { return ( int ) Math . Pow ( n , 2 ) ; }
int [ ] IncrList ( int [ ] l ) { int [ ] result = new int [ 2 * l . Count ] ; for ( int i = 0 ; i < l . Count ; i ++ ) { result . Add ( i + 1 ) ; } return result ; }
bool PairsSumToZero ( List < int > l ) { for ( int i = 0 ; i < l . Count ; i ++ ) { for ( int j = i + 1 ; j < l . Count ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) { return true ; } } } return false ; }
string ChangeBase ( int x , int b ) { string ret = new String ( ) ; while ( x > 0 ) { ret . Add ( 0 , to_string ( x % b ) ) ; x /= b ; } return ret ; }
double Median ( List < double > l ) { Array . Sort ( l ) ; if ( l . Count % 2 == 1 ) { return l [ l . Count / 2 ] ; } return ( l [ l . Count / 2 ] + l [ l . Count / 2 - 1 ] ) / 2 ; }
string DecodeShift ( string s ) { string result = "" ; for ( char ch in s ) { char w = ( ch + 21 - 'a' ) % 26 + 'a' ; result += w ; } return result ; }
bool BelowThreshold ( List < int > l , int t ) { for ( int n in l ) { if ( n >= t ) { return false ; } } return true ; }
bool CorrectBracketing ( string brackets ) { int depth = 0 ; for ( char b in brackets ) { if ( b == '<' ) { depth += 1 ; } if ( b == '>' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
bool Monotonic ( List < double > l ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . Count ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr != 2 ; }
List < double > Derivative ( List < double > xs ) { List < double > result = new List < double > ( ) ; for ( int i = 1 ; i < xs . Count ; i ++ ) { result . Add ( i * xs [ i ] ) ; } return result ; }
int VowelsCount ( string s ) { string vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch in s ) { if ( vowels . ContainsKey ( ch ) ) { count += 1 ; } } if ( s [ s . Length - 1 ] == 'y' || s [ s . Length - 1 ] == 'Y' ) { count += 1 ; } return count ; }
int DigitSum ( String s ) { int sum = 0 ; for ( char c in s ) { if ( isupper ( c ) ) { sum += c ; } } return sum ; }
int FruitDistribution ( String s , int n ) { String num1 = "" ; String num2 = "" ; bool flag = false ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( isdigit ( s [ i ] ) ) { if ( flag == 0 ) { num1 += s [ i ] ; } if ( flag > 0 ) { num2 += s [ i ] ; } } else if ( flag && num1 . Length > 0 ) { flag = true ; } } return n - stoi ( num1 ) - stoi ( num2 ) ; }
List < int > Pluck ( int [ ] arr ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < arr . Count ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . Count == 0 ) { result . Add ( arr [ i ] ) ; result . Add ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } } return result ; }
List < int > StrangeSortList ( List < int > lst ) { List < int > res = new List < int > ( ) ; Array . Sort ( res ) ; int l = 0 ; int r = lst . Count - 1 ; while ( l < r ) { res . Add ( lst [ l ] ) ; l += 1 ; res . Add ( lst [ r ] ) ; r -= 1 ; } if ( l == r ) { res . Add ( lst [ l ] ) ; } return res ; }
double TriangleArea ( double a , double b , double c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return - 1 ; } double s = ( a + b + c ) / 2 ; return Math . Sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; }
bool WillItFly ( List < int > q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . Count ; i ++ ) { if ( q [ i ] != q [ q . Count - i - 1 ] ) { return false ; } sum += q [ i ] ; } return sum <= w ; }
bool IsCube ( int a ) { a = Math . Abs ( a ) ; int i = ( int ) Math . Round ( a , 1.0 / 3 ) ) ; return Math . Pow ( i , 3 ) == a ; }
int HexKey ( string num ) { string key = "2357BD" ; int total = 0 ; for ( char c in num ) { if ( key . ContainsKey ( c ) ) { total += 1 ; } } return total ; }
string DecimalToBinary ( int dec ) { string ans = "" ; if ( dec != 0 ) { while ( dec > 0 ) { ans . Add ( 0 , to_string ( dec % 2 ) ) ; dec /= 2 ; } } else { ans += "0" ; } return "db" + ans + "db" ; }
bool PrimeLength ( String s ) { int l = s . Length ; if ( l < 2 ) { return false ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return false ; } } return true ; }
int StartsOneEnds ( int n ) { if ( n < 1 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return 18 * Math . Pow ( 10 , n - 2 ) ; }
int Add ( int [ ] lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . Count ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; }
List < int > GetRow ( List < int > lst , int x ) { List < int > coords = new List < int > ( ) ; for ( int i = 0 ; i < lst . Count ; i ++ ) { for ( int j = lst [ i ] . Count - 1 ; j >= 0 ; j -- ) { if ( lst [ i , j ] == x ) { coords . Add ( { i , j } ) ; } } } return coords ; }
int NextSmallest ( int [ ] lst ) { Array . Sort ( lst ) ; for ( int i = 1 ; i < lst . Count ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) { return lst [ i ] ; } } return - 1 ; }
bool AnyInt ( double a , double b , double c ) { if ( Math . Round ( a ) != a || Math . Round ( b ) != b || Math . Round ( c ) != c ) { return false ; } return a + b == c || a + c == b || b + c == a ; }
List < int > CountUpTo ( int n ) { List < int > primes = new List < int > ( ) ; for ( int i = 2 ; i < n ; i ++ ) { bool is_prime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { primes . Add ( i ) ; } } return primes ; }
int ClosestInteger ( String value ) { double w = stod ( value ) ; return Math . Round ( w , 2 ) ; }
List < int > MakeAPile ( int n ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { result . Add ( n + 2 * i ) ; } return result ; }
List < String > WordsString ( String s ) { String current = "" ; List < String > words = new List < String > ( ) ; for ( int i = 0 ; i <= s . Length ; i ++ ) { if ( i == s . Length || s [ i ] == ' ' || s [ i ] == ',' ) { if ( current . Length > 0 ) { words . Add ( current ) ; current . Clear ( ) ; } } else { current += s [ i ] ; } } return words ; }
string RoundedAvg ( int n , int m ) { if ( n > m ) { return "-1" ; } int num = ( m + n ) / 2 ; String ret = new String ( ) ; while ( num > 0 ) { ret . Add ( 0 , to_string ( num % 2 ) ) ; num /= 2 ; } return ret ; }
List < int > UniqueDigits ( List < int > x ) { List < int > digits = new List < int > ( ) ; for ( int n = 0 ; n < x . Count ; n ++ ) { bool is_unique = true ; for ( char c in x ) { if ( c % 2 == 0 ) { is_unique = false ; break ; } } if ( is_unique ) { digits . Add ( n ) ; } } Array . Sort ( digits ) ; return digits ; }
int CountNums ( int [ ] arr ) { int num = 0 ; for ( int n in arr ) { int neg = n < 0 ? - 1 : 1 ; n = Math . Abs ( n ) ; List < int > digits = new List < int > ( ) ; for ( char c in n ) { digits . Add ( c - '0' ) ; } digits [ 0 ] *= neg ; int sum = 0 ; for ( int d in digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; }
bool MoveOneBall ( int [ ] arr ) { if ( arr . Empty ( ) ) { return true ; } int num = 0 ; for ( int i = 1 ; i < arr . Count ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ arr . Count - 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; }
string Exchange ( List < int > lst1 , List < int > lst2 ) { int odd = 0 ; int even = 0 ; for ( int n in lst1 ) { if ( n % 2 == 1 ) { odd += 1 ; } } for ( int n in lst2 ) { if ( n % 2 == 0 ) { even += 1 ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; }
List < String > OddCount ( List < String > lst ) { List < String > results = new List < String > ( ) ; string original_str = "the number of odd elements in the string i of the input." ; for ( string s in lst ) { int sum = 0 ; for ( char d in s ) { if ( isdigit ( d ) && d % 2 == 1 ) { sum += 1 ; } } String result = new String ( ) ; for ( char c in original_str ) { if ( c == 'i' ) { result += to_string ( sum ) ; } else { result += c ; } } results . Add ( result ) ; } return results ; }
int MinSubArraySum ( int [ ] nums ) { int min_sum = numeric_limits < int > :: Max ( ) ; int sum = 0 ; for ( int num in nums ) { sum += num ; if ( min_sum > sum ) { min_sum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return min_sum ; }
int MaxFill ( List < int > grid , int capacity ) { int res = 0 ; for ( int [ ] well in grid ) { int sum = 0 ; for ( int n in well ) { sum += n ; } if ( sum > 0 ) { res += ( sum - 1 ) / capacity + 1 ; } } return res ; }
List < String > SelectWords ( String s , int n ) { string vowels = "aeiouAEIOU" ; String current = " " ; List < String > result = new List < String > ( ) ; int consonant_num = 0 ; for ( int i = 0 ; i <= s . Length ; i ++ ) { if ( i == s . Length || s [ i ] == ' ' ) { if ( consonant_num == n ) { result . Add ( current ) ; } current . Clear ( ) ; consonant_num = 0 ; } else { current += s [ i ] ; if ( vowels . ContainsKey ( s [ i ] ) ) { consonant_num += 1 ; } } } return result ; }
int Solution ( int [ ] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . Count ; i += 2 ) { if ( lst [ i ] % 2 == 1 ) { sum += lst [ i ] ; } } return sum ; }
int AddElements ( int [ ] arr , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= - 99 && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; }
List < int > GetOddCollatz ( int n ) { List < int > odd_collatz = new List < int > ( ) ; while ( n != 1 ) { if ( n % 2 == 1 ) { odd_collatz . Add ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } odd_collatz . Add ( 1 ) ; Array . Sort ( odd_collatz ) ; return odd_collatz ; }
bool IsSorted ( int [ ] lst ) { for ( int i = 1 ; i < lst . Count ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; }
string Intersection ( int [ ] interval1 , int [ ] interval2 ) { int inter1 = Math . Max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = Math . Min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return "NO" ; } } return "YES" ; }
int ProdSigns ( int [ ] arr ) { if ( arr . Count == 0 ) { return - 32768 ; } int sum = 0 ; int prods = 1 ; for ( int i = 0 ; i < arr . Count ; i ++ ) { sum += Math . Abs ( i ) ; if ( i == 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; }
List < int > MinPath ( List < int > grid , int k ) { int n = grid . Count ; int min_num = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i , j ] == 1 ) { List < int > tmp = new List < int > ( ) ; if ( i != 0 ) { tmp . Add ( grid [ i - 1 , j ] ) ; } if ( j != 0 ) { tmp . Add ( grid [ i , j - 1 ] ) ; } if ( i != n - 1 ) { tmp . Add ( grid [ i + 1 , j ] ) ; } if ( j != n - 1 ) { tmp . Add ( grid [ i , j + 1 ] ) ; } min_num = * min_element ( tmp . Begin ( ) , tmp . End ( ) ) ; } } } List < int > ans = new List < int > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . Add ( 1 ) ; } else { ans . Add ( min_num ) ; } } return ans ; }
int Digits ( int n ) { int prod = 0 ; for ( char digit in n ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) { prod = 1 ; } prod *= digit - '0' ; } } return prod ; }
bool IsNested ( String s ) { int count = 0 ; int max_count = 0 ; for ( char ch in s ) { if ( ch == '[' ) { count += 1 ; } if ( ch == ']' ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > max_count ) { max_count = count ; } if ( count <= max_count - 2 ) { return true ; } } return false ; }
int SumSquares ( List < double > lst ) { int sum = 0 ; for ( double i = 0 ; i < lst . Count ; i ++ ) { sum += Math . Ceiling ( i ) * Math . Ceiling ( i ) ; } return sum ; }
int CanArrange ( int [ ] arr ) { int index = - 1 ; for ( int i = 0 ; i < arr . Count ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
int [ ] LargestSmallestIntegers ( int [ ] lst ) { int max_neg = 0 , min_pos = 0 ; for ( int n in lst ) { if ( n < 0 && ( max_neg == 0 || n > max_neg ) ) { max_neg = n ; } if ( n > 0 && ( min_pos == 0 || n < min_pos ) ) { min_pos = n ; } } return { max_neg , min_pos } ; }
string FixSpaces ( String text ) { String res = "" ; int space_len = 0 ; for ( int i = 0 ; i <= text . Length ; i ++ ) { if ( i == text . Length || text [ i ] != ' ' ) { if ( space_len == 1 ) { res += '_' ; } if ( space_len == 2 ) { res += "__" ; } if ( space_len > 2 ) { res += '-' ; } space_len = 0 ; if ( i != text . Length ) { res += text [ i ] ; } } else { space_len += 1 ; } } return res ; }
string FileNameCheck ( String file_name ) { int digit_num = 0 , dot_num = 0 ; if ( file_name . Length < 5 || ! isalpha ( file_name [ 0 ] ) ) { return "No" ; } string suffix = file_name . Substring ( 0 , file_name . Length - 4 ) ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) { return "No" ; } for ( char c in file_name ) { if ( isdigit ( c ) ) { digit_num += 1 ; } if ( c == '.' ) { dot_num += 1 ; } } if ( digit_num > 3 || dot_num != 1 ) { return "No" ; } return "Yes" ; }
int SumSquares ( List < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . Count ; i ++ ) { if ( i % 3 == 0 ) { sum += lst [ i ] * lst [ i ] ; } else if ( i % 4 == 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else { sum += lst [ i ] ; } } return sum ; }
string WordsInSentence ( String sentence ) { string result = "" ; string current = new String ( ) ; for ( int i = 0 ; i <= sentence . Length ; i ++ ) { if ( i == sentence . Length || sentence [ i ] == ' ' ) { bool is_prime = true ; int l = current . Length ; if ( l < 2 ) { is_prime = false ; } for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { result += current + ' ' ; } current . Clear ( ) ; } else { current += sentence [ i ] ; } } if ( result . Length > 0 ) { result . Pop ( ) ; } return result ; }
bool Simplify ( String x , String n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . Length ; i ++ ) { if ( x [ i ] == '/' ) { a = stoi ( x . Substring ( 0 , i ) ) ; b = stoi ( x . Substring ( i + 1 ) ) ; } } for ( int i = 0 ; i < n . Length ; i ++ ) { if ( n [ i ] == '/' ) { c = stoi ( n . Substring ( 0 , i ) ) ; d = stoi ( n . Substring ( i + 1 ) ) ; } } return ( a * c ) % ( b * d ) == 0 ; }
int SpecialFilter ( int [ ] nums ) { int count = 0 ; for ( int num in nums ) { if ( num > 10 ) { string w = Convert . ToString ( num , 2 ) ; if ( w [ 0 ] % 2 == 1 && w [ len - 1 ] % 2 == 1 ) { count += 1 ; } } } return count ; }
int GetMatrixTriples ( int n ) { int [ ] arr = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { arr . Add ( i * i - i + 1 ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) { count += 1 ; } } } return count ; }
int DoubleTheDifference ( double [ ] lst ) { int sum = 0 ; for ( double d in lst ) { int num = ( int ) Math . Round ( d , 2 ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) { sum += num * num ; } } } return sum ; }
List < int > Compare ( List < int > game , List < int > guess ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < game . Count ; i ++ ) { result . Add ( Math . Abs ( game [ i ] - guess [ i ] ) ) ; } return result ; }
string StrongestExtension ( string class_name , string [ ] extensions ) { string strongest = "" ; int max = numeric_limits < int > :: Min ( ) ; for ( int extension in extensions ) { int strength = 0 ; for ( char chr in extension ) { if ( isupper ( chr ) ) { strength += 1 ; } if ( islower ( chr ) ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return class_name + '.' + strongest ; }
string IntToMiniRoman ( int number ) { int [ ] num = new int [ ] { 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 } ; List < String > sym = new List < String > ( ) ; int pos = 0 ; string res = "" ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res += sym [ pos ] ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } return res ; }
List < int > Eat ( int number , int need , int remaining ) { return need > remaining ? List < int > { number + remaining , 0 } : List < int > { number + need , remaining - need } ; }
int DoAlgebra ( string [ ] ops , int [ ] operands ) { int [ ] nums = new int [ operands . Length ] ; int [ ] current_ops = new string [ operands . Length ] ; int i = current_ops . Count - 1 ; while ( i >= 0 ) { if ( current_ops [ i ] == "**" ) { nums [ i ] = ( int ) Math . Pow ( nums [ i ] , nums [ i + 1 ] ) ; current_ops . Remove ( current_ops . begin ( ) + i ) ; } i -- ; } i = 0 ; while ( i < current_ops . Count ) { if ( current_ops [ i ] == "*" ) { nums [ i ] *= nums [ i + 1 ] ; nums . Remove ( nums . begin ( ) + i + 1 ) ; current_ops . Remove ( current_ops . begin ( ) + i ) ; } else if ( current_ops [ i ] == "//" ) { nums [ i ] /= nums [ i + 1 ] ; nums . erase ( current_ops . begin ( ) + i ) ; } else { i ++ ; } } i = 0 ; while ( i < current_ops . Count ) { if ( current_ops [ i ] == "+" ) { nums [ i ] += nums [ i + 1 ] ; nums . Remove ( nums . begin ( ) + i + 1 ) ; current_ops . Remove ( current_ops . begin ( ) + i ) ; } else if ( current_ops [ i ] == "-" ) { nums [ i ] -= nums [ i + 1 ] ; nums . Remove ( nums . begin ( ) + i + 1 ) ; current_ops . Remove ( current_ops . begin ( ) + i ) ; } else { i ++ ; } } return nums [ 0 ] ; }
List < int > GenerateIntegers ( int a , int b ) { int lower = Math . Max ( 2 , Math . Min ( a , b ) ) ; int upper = Math . Min ( 8 , max ( a , b ) ) ; List < int > result = new List < int > ( ) ; for ( int i = lower ; i <= upper ; i += 2 ) { result . Add ( i ) ; } return result ; }
bool IsStepNum ( int n ) { int prev_digit = - 1 ; while ( n > 0 ) { int cur_digit = n % 10 ; if ( prev_digit == - 1 ) { prev_digit = cur_digit ; } else { if ( Math . Abs ( prev_digit - cur_digit ) != 1 ) { return false ; } } prev_digit = cur_digit ; n /= 10 ; } return true ; }
int NumOfWays ( int n , int k ) { int p = 1 ; if ( k % 2 == 1 ) { p = - 1 ; } return ( Math . Pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; }
List < int > FindDivisors ( int n ) { List < int > v = new List < int > ( ) ; for ( int i = 1 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { v . Add ( i ) ; } else { v . Add ( i ) ; v . Add ( n / i ) ; } } } return v ; }
int EggDrop ( int n , int k ) { if ( k == 1 || k == 0 ) { return k ; } if ( n == 1 ) { return k ; } int min = Int32 . MaxValue ; for ( int x = 1 ; x <= k ; x ++ ) { int res = Math . Max ( EggDrop ( n - 1 , x - 1 ) , EggDrop ( n , k - x ) ) ; if ( res < min ) { min = res ; } } return min + 1 ; }
bool IsPowerOfTwo ( int n ) { if ( n == 0 ) { return false ; } return Math . Ceiling ( log2 ( n ) ) == Math . Floor ( log2 ( n ) ) ; }
string ShortestPalindrome ( String s ) { int n = s . Length ; List < String > v = new List < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i ; int r = i ; string ans1 = "" ; string ans2 = "" ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans1 += s [ l ] ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans2 += s [ l ] ; l -- ; r ++ ; } v . Add ( ans1 ) ; v . Add ( ans2 ) ; } string ans = v [ 0 ] ; for ( int i = 0 ; i < v . Count ; i ++ ) { if ( v [ i ] != "" ) { ans = Math . Min ( ans , v [ i ] ) ; } } return ans ; }
int MinimumAdjacentDifference ( int [ ] a , int n , int k ) { int min_diff = int . MaxValue ; for ( int i = 0 ; i <= k ; i ++ ) { int max_diff = Int32 . MinValue ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { max_diff = Math . Max ( max_diff , a [ p + 1 ] - a [ p ] ) ; } } min_diff = Math . Min ( min_diff , max_diff ) ; } return min_diff ; }
int Cal ( int [ ] a , int mid ) { int chocolate = 0 ; for ( int i = 0 ; i < a . Count ; i ++ ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; }
bool Check ( int v , List < int > a , int m ) { int tec = 0 , ans = 0 ; List < int > b = new List < int > ( ) ; for ( int i = 0 ; i < a . Count ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; }
int LargestNum ( int [ ] arr ) { int res = 0 ; Array . Sort ( arr ) ; int l = 0 , r = arr . Count - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . Max ( res , Math . Max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) { l ++ ; } else { r -- ; } } return res ; }
int BinarySearch ( int [ ] p , int n ) { int i = 0 ; int j = p . Count - 1 ; int index = - 1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
int FindMinLength ( int [ ] arr ) { int index = arr . Length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; }
int MinDigits ( int n , int k ) { int digits_num = ( int ) Math . Floor ( log10 ( n ) + 1 ) ; int temp_sum = 0 ; int temp = digits_num ; int result = 0 ; int x , v ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = n / Math . Pow ( 10 , temp - 1 ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v /= 10 ; v ++ ; result = v * Math . Pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; } return - 1 ; }
int CheckForPerfectSquare ( int [ ] arr , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; }
int MinFlips ( int [ , ] mat , string s ) { int n = mat . Length ; int m = mat [ 0 ] . Length ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i , j ] != s [ i + j ] - '0' ) { count ++ ; } } } return count ; }
List < int > ConstructTree ( int n , List < int > edges ) { List < int > adjl = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { adjl . Add ( new List < int > ( ) ) ; } for ( int e in edges ) { int u = e [ 0 ] ; int v = e [ 1 ] ; adjl [ u ] . Add ( v ) ; adjl [ v ] . Add ( u ) ; } return adjl ; }
int FindSumOfValues ( int v , int [ ] parent , int [ ] values_children ) { int cur_node = v ; int sum = 0 ; while ( cur_node != - 1 ) { sum += values_children [ cur_node ] ; cur_node = parent [ cur_node ] ; } return sum ; }
int GetDistinct ( int d , int count ) { int ans = 0 ; count = Math . Pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return ans ; }
bool IsIncreasing ( int [ ] arr ) { for ( int i = 0 ; i < arr . Count - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; }
int MinAdjSwaps ( List < int > mat ) { int n = mat . Count ; List < int > cnt_zero = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 && mat [ i , j ] == 0 ; j -- ) { cnt_zero [ i ] ++ ; } } int cnt_swaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cnt_zero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) { return - 1 ; } while ( first > i ) { int t = cnt_zero [ first ] ; cnt_swaps ++ ; } } } return cnt_swaps ; }
int Solve ( List < int > values , List < int > salary , int mod ) { int ret = 1 ; int amt = 0 ; Array . Sort ( values ) ; Array . Sort ( salary ) ; while ( salary . Count > 0 ) { while ( values . Count > 0 && values [ values . Count - 1 ] >= salary [ salary . Count - 1 ] ) { amt ++ ; values . Remove ( ) ; } if ( amt == 0 ) { return 0 ; } ret *= amt -- ; ret %= mod ; salary . Add ( ) ; } return ret ; }
int [ ] OrganizeInOrder ( int [ ] vec , char [ ] op , int n ) { int [ ] result = new int [ n ] ; Array . Sort ( result ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; }
int CountPoints ( int n , int m , List < int > a , List < int > b , int x , int y ) { Array . Sort ( a ) ; Array . Sort ( b ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; }
bool AreSame ( List < int > a , List < int > b ) { Array . Sort ( a ) ; Array . Sort ( b ) ; return a == b ; }
int CountNumberOfStrings ( String s ) { int n = s . Length ; int count = ( int ) Math . Pow ( 2 , n ) ; return count ; }
List < int > PrimePower ( int x ) { List < int > prime_pow = new List < int > ( ) ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } prime_pow . Add ( p ) ; } } if ( x > 1 ) { prime_pow . Add ( x ) ; } return prime_pow ; }
bool IsPerfect ( int n0 ) { double n = ( double ) Math . Sqrt ( n0 ) ; if ( floor ( n ) != Math . Ceiling ( n ) ) { return false ; } return true ; }
int FindSum ( int l , int r ) { int [ ] arr = new int [ 2 * r ] ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . Add ( i + x ) ; if ( i + 1 <= r ) { arr . Add ( i + 1 + x ) ; } x *= - 1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr [ i ] ; } return sum ; }
int Results ( int n , int k ) { return Math . Round ( n , 1.0 / Math . Pow ( 2 , k ) ) ) ; }
List < int > Factors ( int n ) { List < int > v = new List < int > ( ) ; v . Add ( 1 ) ; for ( int i = 2 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . Add ( i ) ; if ( n / i != i ) { v . Add ( n / i ) ; } } } return v ; }
int SmallestNum ( int n ) { double x = ( double ) Math . Pow ( 10.0 , ( n - 1 ) / 2.0 ) ; return Math . Ceiling ( x ) ; }
int Smallest ( String s ) { List < int > a = new List < int > ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { a . Add ( s [ i ] - '0' ) ; } List < int > b = new List < int > ( ) ; for ( int i = 0 ; i < a . Count ; i ++ ) { if ( ( a [ i ] ) % 2 != 0 ) { b . Add ( a [ i ] ) ; } } Array . Sort ( b ) ; if ( b . Count > 1 ) { return b [ 0 ] * 10 + b [ 1 ] ; } return - 1 ; }
List < double > Diagonals ( double a , double b , double c , double d ) { List < double > ans = new List < double > ( ) ; ans . Add ( Math . Sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . Add ( Math . Sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; }
int FindNumberOfDigits ( int n , int bas ) { int dig = Math . Floor ( log ( n ) / log ( bas ) ) + 1 ; return dig ; }
double NGon ( int n ) { double pro_angle_var ; if ( n % 4 == 0 ) { pro_angle_var = numbers :: pi * ( 180.0 / n ) / 180 ; } else { pro_angle_var = numbers :: pi * ( 180.0 / ( 2 * n ) ) / 180 ; } double neg_x = 1.0e +99 , pos_x = - 1.0e +99 , neg_y = 1.0e +99 ; for ( int j = 0 ; j < n ; ++ j ) { double px = Math . Cos ( 2 * numbers :: pi * j / n + pro_angle_var ) ; double py = Math . Sqrt ( 2 * numbers :: pi * j / n + pro_angle_var ) ; neg_x = Math . Min ( neg_x , px ) ; pos_x = Math . Max ( pos_x , px ) ; neg_y = Math . Min ( neg_y , py ) ; pos_y = Math . Max ( pos_y , py ) ; } double opt2 = Math . Max ( pos_x - neg_x , pos_y - neg_y ) ; return opt2 / Math . Sqrt ( numbers :: pi / n ) / 2 ; }
int FindMaxK ( int n ) { int p = log2 ( n ) ; return Math . Pow ( 2 , p ) ; }
int NthFibo ( int n ) { double a = ( Math . Pow ( 5 , 0.5 ) + 1 ) / 2 ; double b = ( - 1 * Math . Pow ( 5 , 0.5 ) + 1 ) / 2 ; double r = Math . Pow ( 5 , 0.5 ) ; double ans = ( Math . Pow ( a , n ) - Math . Pow ( b , n ) ) / r ; return ans ; }
double FindProb ( int l , int r ) { double count_of_ps = Math . Floor ( Math . Sqrt ( r ) ) - Math . Ceiling ( Math . Sqrt ( l ) ) + 1 ; double total = r - l + 1 ; double prob = count_of_ps / total ; return prob ; }
int PreviousFibonacci ( int n ) { double a = n / ( ( 1 + Math . Sqrt ( 5 ) ) / 2.0 ) ; return Math . Round ( a , 2 ) ; }
List < int > DistPrime ( int [ ] arr , int [ ] all_primes ) { List < int > list1 = new List < int > ( ) ; for ( int i = 0 ; i < all_primes . Count ; i ++ ) { for ( int j in arr ) { if ( j % i == 0 ) { list1 . Add ( i ) ; break ; } } } return list1 ; }
List < int > GetArray ( int n ) { List < int > ans = new List < int > ( ) ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans . Add ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; }
int MaximumLength ( List < int > a ) { int [ ] counts = new int [ 11 ] ; int ans = 0 ; for ( int index = 0 ; index < a . Count ; index ++ ) { counts [ a [ index ] ] += 1 ; List < int > k = new List < int > ( ) ; for ( int i = 0 ; i < counts . Count ; i ++ ) { if ( i != 0 ) { k . Add ( i ) ; } } Array . Sort ( k ) ; if ( k . Count == 1 || ( k [ 0 ] == k [ k . Count - 2 ] && k [ k . Count - 1 ] - k [ k . Count - 2 ] == 1 ) || ( k [ 0 ] == 1 && k [ 1 ] == k [ k . Count - 1 ] ) ) { ans = index ; } } return ans + 1 ; }
int MaxEdges ( int n ) { int edges = Math . Floor ( n * n / 4 ) ; return edges ; }
int FindK ( int n , int k ) { ArrayList a = new ArrayList ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a . Add ( i ) ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a . Add ( i ) ; } } return a [ k - 1 ] ; }
bool IsKeith ( int x , int temp ) { ArrayList terms = new ArrayList ( ) ; int n = 0 ; while ( temp > 0 ) { terms . Add ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } Array . Sort ( terms ) ; int next_term = 0 , i = n ; while ( next_term < x ) { next_term = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { next_term += terms [ i - j ] ; } terms . Add ( next_term ) ; i ++ ; } return next_term == x ; }
bool Factors ( int n , int k ) { List < int > v = new List < int > ( ) ; while ( n % 2 == 0 ) { v . Add ( 2 ) ; n /= 2 ; } if ( v . Count >= k ) { return true ; } for ( int i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n = n / i ; v . Add ( i ) ; } if ( v . Count >= k ) { return true ; } } if ( n > 2 ) { v . Add ( n ) ; } if ( v . Count >= k ) { return true ; } return false ; }
List < String > SeparateParenGroups ( String paren_string ) { List < String > all_parens = new List < String > ( ) ; string current_paren ; int current_depth = 0 ; for ( char c in paren_string ) { if ( c == '(' ) { current_depth += 1 ; current_paren += c ; } else if ( c == ')' ) { current_depth -= 1 ; current_paren += c ; if ( current_depth == 0 ) { all_parens . Add ( current_paren ) ; current_paren . Clear ( ) ; } } } return all_parens ; }
List < int > ParseNestedParens ( String paren_string ) { List < int > all_levels = new List < int > ( ) ; int level = 0 ; int max_level = 0 ; for ( int i = 0 ; i < paren_string . Length ; i ++ ) { char chr = paren_string [ i ] ; if ( chr == '(' ) { level += 1 ; if ( level > max_level ) { max_level = level ; } } if ( chr == ')' ) { level -= 1 ; if ( level == 0 ) { all_levels . Add ( max_level ) ; max_level = 0 ; } } } return all_levels ; }
List < String > FilterBySubstring ( List < String > strings , String substring ) { List < String > result = new List < String > ( ) ; for ( String s in strings ) { if ( s . ContainsKey ( substring ) ) { result . Add ( s ) ; } } return result ; }
List < int > RollingMax ( List < int > numbers ) { int running_max = 0 ; List < int > result = new List < int > ( ) ; for ( int n in numbers ) { if ( n > running_max ) { running_max = n ; } result . Add ( running_max ) ; } return result ; }
string MakePalindrome ( String s ) { if ( s . Empty ( ) ) { return "" ; } for ( int i = 0 ; i < s . Length ; i ++ ) { String r_str = s . Substring ( i ) ; if ( r_str == string ( r_str . rbegin ( ) , r_str . rend ( ) ) ) { string n_str = s . Substring ( 0 , i ) ; string n2_str = Convert . ToInt32 ( n_str . rbegin ( ) , n_str . rend ( ) ) ; return s + n2_str ; } } return s . Substring ( 0 , s . Length - 1 ) + string ( s . rbegin ( ) , s . rend ( ) ) ; }
string StringXor ( String a , String b ) { String result = "" ; for ( int i = 0 ; i < a . Length ; i ++ ) { if ( a [ i ] == b [ i ] ) { result += '0' ; } else { result += '1' ; } } return result ; }
string Longest ( List < String > strings ) { if ( strings . Count == 0 ) { return "" ; } int max_len = ranges :: Max ( views :: transform ( strings , & string :: Length ) ) ; foreach ( String s in strings ) { if ( s . Length == max_len ) { return s ; } } return "" ; }
string StringSequence ( int n ) { string s = "" ; for ( int i = 0 ; i < n ; i ++ ) { s += to_string ( i ) ; s += " " ; } s += to_string ( n ) ; return s ; }
int CountDistinctCharacter ( string s ) { HashSet < char > distinct = new HashSet < char > ( ) ; for ( char c in views :: transform ( s , char . tolower ) ) { distinct . Add ( c ) ; } return distinct . Count ; }
int HowManyTimes ( String s , String sub ) { int times = 0 ; for ( int i = 0 ; i <= int ( s . Length - sub . Length ) ; i ++ ) { if ( s . Substring ( i , sub . Length ) == sub ) { times += 1 ; } } return times ; }
string SortNumbers ( string numbers ) { Dictionary < string , int > to_num = new Dictionary < string , int > ( ) ; for ( string i = 0 ; i < numbers . Length ; i ++ ) { if ( i == numbers . Length || numbers [ i ] == ' ' ) { if ( to_num . Count > 0 ) { ints . Add ( to_num [ current ] ) ; current . Clear ( ) ; } } else { current += numbers [ i ] ; } } List < int > from_num = new List < int > ( ) ; List < int > ints = new List < int > ( ) ; int current = new List < int > ( ) ; for ( int i = 0 ; i < ints . Count ; i ++ ) { if ( i != ints . Count - 1 ) { result += " " ; } } return result ; }
double [ ] FindClosestElements ( double [ ] numbers ) { double [ ] closest_pair = new double [ 2 * numbers . Length ] ; double distance = Math . Abs ( closest_pair [ 0 ] - closest_pair [ 1 ] ) ; for ( int i = 0 ; i < numbers . Count ; i ++ ) { for ( int j = i + 1 ; j < numbers . Count ; j ++ ) { if ( Math . Abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closest_pair [ 0 ] = numbers [ i ] ; closest_pair [ 1 ] = numbers [ j ] ; distance = Math . Abs ( numbers [ i ] - numbers [ j ] ) ; } } } Array . Sort ( closest_pair ) ; return closest_pair ; }
List < double > RescaleToUnit ( List < double > numbers ) { double min_num = * min_element ( numbers . begin ( ) , numbers . End ( ) ) ; double max_num = * max_element ( numbers . begin ( ) , numbers . End ( ) ) ; List < double > result = new List < double > ( ) ; for ( double n in numbers ) { result . Add ( ( n - min_num ) / ( max_num - min_num ) ) ; } return result ; }
List < int > FilterIntegers ( List < any > values ) { List < int > result = new List < int > ( ) ; for ( KeyValuePair < int , int > entry in values ) { if ( entry . Type == typeid ( int ) ) { result . Add ( entry . Key ) ; } } return result ; }
List < int > removeDuplicates ( List < int > numbers ) { Dictionary < int , int > counter = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < numbers . Count ; i ++ ) { counter [ i ] = counter [ i ] + 1 ; } List < int > result = new List < int > ( ) ; for ( int i in numbers ) { if ( counter [ i ] == 1 ) { result . Add ( i ) ; } } return result ; }
string FlipCase ( String s ) { string result = "" ; for ( char c in s ) { if ( islower ( c ) ) { result += toupper ( c ) ; } else { result += tolower ( c ) ; } } return result ; }
List < String > FilterByPrefix ( List < String > strings , String prefix ) { List < String > result = new List < String > ( ) ; for ( int i = 0 ; i < strings . Count ; i ++ ) { if ( strings [ i ] . Starts_with ( prefix ) ) { result . Add ( strings [ i ] ) ; } } return result ; }
double FindZero ( List < double > xs ) { double ans = 0 ; double value = 0 ; for ( int i = 0 ; i < xs . Count ; i ++ ) { value += xs [ i ] * Math . Pow ( ans , i ) ; } while ( Math . Abs ( value ) > 1e-6 ) { double driv = 0 ; for ( int i = 1 ; i < xs . Count ; i ++ ) { driv += xs [ i ] * Math . Pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . Count ; i ++ ) { value += xs [ i ] * Math . Pow ( ans , i ) ; } } return ans ; }
List < int > SortThird ( List < int > l ) { List < int > thirds = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i += 3 ) { thirds . Add ( l [ i ] ) ; } Array . Sort ( thirds ) ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( i % 3 == 0 ) { result . Add ( thirds [ i / 3 ] ) ; } else { result . Add ( l [ i ] ) ; } } return result ; }
List < int > Unique ( List < int > l ) { List < int > s = new List < int > ( ) ; l . Sort ( ) ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) s . Add ( i ) ; Array . Sort ( result . begin ( ) , result . end ( ) ) ; return result ; }
double MaxElement ( List < double > l ) { return Math . Max ( l . Begin ( ) , l . End ( ) ) ; }
bool TriplesSumToZero ( List < int > l ) { for ( int i = 0 ; i < l . Count ; i ++ ) { for ( int j = i + 1 ; j < l . Count ; j ++ ) { for ( int k = j + 1 ; k < l . Count ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) { return true ; } } } return false ; }
int Fib4 ( int n ) { int [ ] results = new int [ n + 1 ] ; for ( int i = 4 ; i <= n ; i ++ ) { results . Add ( results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ) ; } return results [ n ] ; }
bool IsPalindrome ( String text ) { String pr = new String ( text . rbegin ( ) , text . rend ( ) ) ; return pr == text ; }
string RemoveVowels ( String text ) { string result = "" ; string vowels = "aeiou" ; for ( char ch in text ) { if ( vowels . ContainsKey ( tolower ( ch ) ) == true ) { result += ch ; } } return result ; }
bool SameChars ( String s0 , String s1 ) { HashSet < char > set0 = new HashSet < char > ( ) ; for ( char c in s0 ) { set0 . Add ( c ) ; } unordered_set < char > set1 = new HashSet < char > ( ) ; for ( char c in s1 ) { set1 . Add ( c ) ; } return set0 == set1 ; }
List < int > Common ( List < int > l1 , List < int > l2 ) { List < int > us = new List < int > ( ) ; for ( int e1 = 0 ; e1 < l1 . Count ; e1 ++ ) { for ( int e2 in l2 ) { if ( e1 == e2 ) { us . Add ( e1 ) ; } } } List < int > ret = new List < int > ( ) ; for ( int i = 0 ; i < l2 . Count ; i ++ ) { Array . Sort ( us ) ; Array . Reverse ( ret ) ; return ret ; }
bool CorrectBracketing ( String brackets ) { int depth = 0 ; for ( char b in brackets ) { if ( b == '(' ) { depth += 1 ; } if ( b == ')' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
string CircularShift ( int x , int shift ) { string xs = Convert . ToString ( x , 2 ) ; if ( shift > xs . Length ) { return string ( xs . rbegin ( ) , xs . rend ( ) ) ; } return xs . Substring ( 0 , xs . Length - shift ) ; }
int Search ( int [ ] lst ) { Dictionary < int , int > counter = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < lst . Count ; i ++ ) { counter [ i ] += 1 ; } int ans = - 1 ; for ( int key , value ] in counter ) { if ( value >= key && key > ans ) { ans = key ; } } return ans ; }
int SmallestChange ( int [ ] arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . Count / 2 ; i ++ ) { if ( arr [ i ] != arr [ arr . Count - i - 1 ] ) { ans += 1 ; } } return ans ; }
int TotalMatch ( List < String > lst1 , List < String > lst2 ) { int sum1 = 0 ; for ( String st in lst1 ) { sum1 += st . Length ; } int sum2 = 0 ; for ( String st in lst2 ) { sum2 += st . Length ; } return sum1 > sum2 ? lst2 : lst1 ; }
bool IsHappy ( String s ) { if ( s . Length < 3 ) { return false ; } for ( int i = 0 ; i < s . Length - 2 ; i ++ ) { if ( s [ i ] == s [ i + 1 ] || s [ i ] == s [ i + 2 ] || s [ i + 1 ] == s [ i + 2 ] ) { return false ; } } return true ; }
List < String > NumericalLetterGrade ( List < double > grades ) { List < String > letter_grade = new List < String > ( ) ; for ( double gpa in grades ) { if ( gpa == 4.0 ) { letter_grade . Add ( "A+" ) ; } else if ( gpa > 3.3 ) { letter_grade . Add ( "A-" ) ; } else if ( gpa > 3.0 ) { letter_grade . Add ( "B+" ) ; } else if ( gpa > 2.7 ) { letter_grade . Add ( "B" ) ; } else if ( gpa > 2.3 ) { letter_grade . Add ( "C+" ) ; } else if ( gpa > 1.7 ) { letter_grade . Add ( "C" ) ; } else if ( gpa > 1.3 ) { letter_grade . Add ( "C-" ) ; } else if ( gpa > 1.0 ) { letter_grade . Add ( "D+" ) ; } else if ( gpa > 0.0 ) { letter_grade . Add ( "D" ) ; } else if ( gpa > 0.0 ) { letter_grade . Add ( "E" ) ; } } return letter_grade ; }
string Solve ( int n ) { string bi_str = new string ( ) ; int sum = 0 ; for ( char c in to_string ( n ) ) { sum += c - '0' ; } while ( sum > 0 ) { bi_str . Add ( 0 , to_string ( sum % 2 ) ) ; sum /= 2 ; } return bi_str ; }
string AntiShuffle ( String s ) { string ret = "" ; String current = new String ( ) ; for ( int i = 0 ; i <= s . Length ; i ++ ) { if ( i == s . Length || s [ i ] == ' ' ) { Array . Sort ( current ) ; if ( ret . Length > 0 ) { ret += ' ' ; } ret += current ; current . Clear ( ) ; } else { current += s [ i ] ; } } return ret ; }
int [ ] SortArray ( int [ ] array ) { if ( array . Count == 0 ) { return array ; } if ( ( array [ 0 ] + array [ array . Count - 1 ] ) % 2 == 1 ) { Array . Sort ( array . begin ( ) , array . End ( ) ) ; } else { Array . Sort ( array . begin ( ) , array . End ( ) , less < > ( ) ) ; } return array ; }
string Encrypt ( string s ) { string ans = "" ; for ( char c in s ) { if ( isalpha ( c ) ) { ans += ( char ) ( 'a' + ( c - 'a' + 4 ) % 26 ) ; } else { ans += c ; } } return ans ; }
int IsBored ( String s ) { bool is_start = true ; int sum = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == '.' || s [ i ] == '?' || s [ i ] == '!' ) { is_start = true ; } else if ( is_start ) { if ( s [ i ] == ' ' ) { continue ; } if ( s . Substring ( i , 2 ) == "I " ) { sum += 1 ; } is_start = false ; } } return sum ; }
string Encode ( string message ) { string vowels = "aeiouAEIOU" ; string ret = "" ; for ( char c in message ) { if ( isupper ( c ) ) { c = tolower ( c ) ; if ( vowels . ContainsKey ( c ) ) { c = 'a' + ( c - 'a' + 2 ) % 26 ; } } else if ( islower ( c ) ) { c = toupper ( c ) ; if ( vowels . ContainsKey ( c ) ) { c = 'A' + ( c - 'A' + 2 ) % 26 ; } } ret += c ; } return ret ; }
int Skjkasdkd ( int [ ] lst ) { int largest = 0 ; for ( int n in lst ) { if ( n > largest ) { bool prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } int sum = 0 ; string s = new String ( largest ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { sum += s [ i ] - '0' ; } return sum ; }
bool CheckDictCase ( Dictionary < String , String > dict ) { if ( dict . Count == 0 ) { return false ; } int is_lower = 0 ; int is_upper = 0 ; for ( KeyValuePair < String , String > entry in dict ) { for ( char c in key ) { if ( islower ( c ) ) { is_lower = 1 ; } else if ( isupper ( c ) ) { is_upper = 1 ; } else { return false ; } } } return is_lower + is_upper == 1 ; }
int Multiply ( int a , int b ) { return ( Math . Abs ( a ) % 10 ) * ( Math . Abs ( b ) % 10 ) ; }
int CountUpper ( String s ) { String u_vowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . Length ; i += 2 ) { if ( u_vowel . ContainsKey ( s [ i ] ) ) { count += 1 ; } } return count ; }
List < String > ByLength ( List < int > arr ) { Dictionary < int , String > num_to = new Dictionary < int , String > ( ) ; { 1 , "One" } , { 2 , "Two" } , { 3 , "Three" } , { 4 , "Four" } , { 5 , "Five" } , { 6 , "Six" } , { 8 , "Eight" } , { 9 , "Nine" } } ; List < int > l = new List < int > ( ) ; l . Sort ( ) ; l . Reverse ( ) ; List < string > new_arr = new List < String > ( ) ; for ( int n in sorted_arr ) { if ( n >= 1 && n <= 9 ) { new_arr . Add ( num_to [ n ] ) ; } } return new_arr ; }
List < int > f ( int n ) { int sum = 0 ; int prod = 1 ; List < int > result = new List < int > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) { result . Add ( prod ) ; } else { result . Add ( sum ) ; } } return result ; }
int [ ] EvenOddPalindrome ( int n ) { int even_count = 0 , odd_count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { String s = new String ( i ) ; String r_str = new String ( s . rbegin ( ) , s . rend ( ) ) ; if ( s == r_str ) { if ( i % 2 == 1 ) { odd_count += 1 ; } else { even_count += 1 ; } } } return { even_count , odd_count } ; }
int [ , ] Histogram ( string test ) { int [ , ] count = new int [ 2 * 32 ] ; int max = 0 ; for ( int i = 0 ; i < test . Length ; i ++ ) { if ( test [ i ] != ' ' ) { count [ test [ i ] ] += 1 ; if ( count [ test [ i ] ] > max ) { max = count [ test [ i ] ] ; } } } unordered_map < char , int > result = new int [ 2 * 32 ] ; for ( int key , value ] in count ) { if ( value == max ) { result [ key ] = value ; } } return result ; }
string ReverseDelete ( String s , String c ) { String ret = "" ; for ( char ch in s ) { if ( c . ContainsKey ( ch ) ) { ret += ch ; } } String flag = "False" ; if ( ret == string ( ret . rbegin ( ) , ret . rend ( ) ) ) { flag = "True" ; } return { ret , flag } ; }
int [ ] SortArray ( int [ ] arr ) { int [ ] bin = new int [ 2 * MAX ] ; for ( int i = 0 ; i < arr . Count ; i ++ ) { int b = 0 ; int n = Math . Abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . Add ( b ) ; } for ( int i = 0 ; i < arr . Count ; i ++ ) { for ( int j = 1 ; j < arr . Count ; j ++ ) { if ( bin [ j ] < bin [ j - 1 ] || ( bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) ) { int t = bin [ j ] ; bin [ j ] = arr [ j - 1 ] ; arr [ j - 1 ] = t ; } } } return arr ; }
string GetClosestVowel ( string word ) { string vowels = "AEIOUaeiou" ; for ( int i = word . Length - 2 ; i > 0 ; i -- ) { if ( vowels . ContainsKey ( word [ i ] ) ) { return string ( 1 , word [ i ] ) ; } } return "" ; }
string MatchParens ( string [ ] lst ) { string [ ] strings = new string [ ] { lst [ 0 ] + lst [ 1 ] , lst [ 1 ] + lst [ 0 ] } ; foreach ( string l in strings ) { int count = 0 ; for ( char c in l ) { if ( c == '(' ) { count += 1 ; } if ( c == ')' ) { count -= 1 ; } if ( count < 0 ) { break ; } } if ( count == 0 ) { return "Yes" ; } } return "No" ; }
int [ ] Maximum ( int [ ] arr , int k ) { if ( k == 0 ) { return { } ; } Array . Sort ( arr ) ; return new int [ 2 * k ] ; }
bool ValidDate ( String date ) { if ( date . Length != 10 ) { return false ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 || i == 5 ) { if ( date [ i ] != '-' ) { return false ; } } else if ( isdigit ( date [ i ] ) ) { return false ; } } int month = Int32 . Parse ( date . Substring ( 0 , 2 ) ) ; int day = Int32 . Parse ( date . Substring ( 3 , 2 ) ) ; int year = Int32 . Parse ( date . Substring ( 6 , 4 ) ) ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) { return false ; } if ( day == 30 && month == 2 ) { return false ; } return true ; }
List < String > SplitWords ( String txt ) { String current = new String ( ) ; List < String > result = new List < String > ( ) ; if ( txt . ContainsKey ( ' ' ) ) { for ( int i = 0 ; i <= txt . Length ; i ++ ) { if ( i == txt . Length || txt [ i ] == ' ' ) { if ( current . Length > 0 ) { result . Add ( current ) ; } current . Remove ( ) ; } else { current += txt [ i ] ; } } return result ; } if ( txt . ContainsKey ( ',' ) ) { for ( int i = 0 ; i <= txt . Length ; i ++ ) { if ( i == txt . Length || txt [ i ] == ',' ) { if ( current . Length > 0 ) { result . Add ( current ) ; } current . Clear ( ) ; } else { current += txt [ i ] ; } } return result ; } int num = 0 ; for ( char c in txt ) { if ( islower ( c ) && c % 2 == 0 ) { num += 1 ; } } return { to_string ( num ) } ; }
List < int > Tri ( int n ) { if ( n == 0 ) { return { 1 } ; } List < int > tris = new List < int > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { tris . Add ( i / 2 + 1 ) ; } else { tris . Add ( tris [ i - 1 ] + tris [ i - 2 ] + ( i + 3 ) / 2 ) ; } } return tris ; }
bool CheckIfLastCharIsALetter ( String txt ) { if ( txt . Length == 0 ) { return false ; } return isalpha ( txt [ txt . Length - 1 ] ) && ( txt . Length == 1 || ! isalpha ( txt [ txt . Length - 2 ] ) ) ; }
int [ ] OrderByPoints ( int [ ] nums ) { int [ ] result = new int [ 2 * nums . Count ] ; for ( int num = 0 ; i < nums . Count ; i ++ ) { string w = Convert . ToString ( Math . Abs ( num ) ) ; int sum = 0 ; for ( char c in w ) { sum += c - '0' ; } if ( num < 0 ) { sum -= 2 * ( w [ 0 ] - '0' ) ; } result . Add ( sum ) ; } for ( int i = 0 ; i < nums . Count ; i ++ ) { for ( int j = 1 ; j < nums . Count ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { int t = nums [ j ] ; nums [ j ] = t ; } } } return nums ; }
List < String > Bf ( string planet1 , string planet2 ) { List < String > planets = new List < String > ( ) ; int idx1 = 0 ; int idx2 = it2 == planets . end ( ) ? - 1 : it2 - planets . begin ( ) ; if ( idx1 == - 1 || idx2 == - 1 || idx1 == idx2 ) { return { } ; } return idx1 > idx2 ? List < String > ( planets . begin ( ) + idx2 + 1 , planets . begin ( ) + idx1 ) : List < String > ( planets . begin ( ) + idx2 + 1 , planets . begin ( ) + idx1 ) ; }
List < String > SortedListSum ( List < String > lst ) { List < String > result = new List < String > ( ) ; for ( string i in lst ) { if ( i . Length % 2 == 0 ) { result . Add ( i ) ; } } Array . Sort ( result ) ; result . Reverse ( ) ; return result ; }
bool CycpatternCheck ( String a , String b ) { for ( int i = 0 ; i < b . Length ; i ++ ) { String rotate = b . Substring ( i ) + b . Substring ( 0 , i ) ; if ( a . ContainsKey ( rotate ) ) { return true ; } } return false ; }
int EvenOddCount ( int num ) { int even_count = 0 , odd_count = 0 ; for ( char i in Convert . ToString ( num , 2 ) ) { if ( i % 2 == 0 ) { even_count += 1 ; } else { odd_count += 1 ; } } return { even_count , odd_count } ; }
string FindMax ( string [ ] words ) { string max = "" ; int max_length = 0 ; for ( string word in words ) { List < char > unique = new List < char > ( ) ; for ( char w in word ) { if ( find ( unique . begin ( ) , unique . end ( ) , w ) == unique . begin ( ) ) { unique . Add ( w ) ; } } if ( unique . Count > max_length || ( unique . Count == max_length && word < max ) ) { max = word ; max_length = unique . Count ; } } return max ; }
string Solve ( String s ) { bool no_letter = true ; String result = "" ; for ( char ch in s ) { if ( isupper ( ch ) ) { ch = tolower ( ch ) ; no_letter = false ; } else if ( islower ( ch ) ) { ch = toupper ( ch ) ; no_letter = false ; } result += ch ; } if ( no_letter ) { return string ( s . rbegin ( ) , s . rend ( ) ) ; } else { return result ; } }
int MostFrequent ( int [ ] arr , int n ) { Dictionary < int , int > hp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . ContainsKey ( arr [ i ] ) ) { hp [ arr [ i ] ] ++ ; } else { hp [ arr [ i ] ] = 1 ; } } int max_count = 0 , res = - 1 ; for ( KeyValuePair < int , int > entry in hp ) { if ( max_count < entry . Value ) { res = entry . Key ; max_count = entry . Value ; } } return res ; }
int Find ( int [ ] a , int [ ] b , int k , int n1 , int n2 ) { HashSet < int > s = new HashSet < int > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { s . Add ( b [ i ] ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( s . ContainsKey ( a [ i ] ) ) { missing ++ ; } if ( missing == k ) { return a [ i ] ; } } return - 1 ; }
int SolveQuery ( int start , int end , int [ ] arr ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = start ; i <= end ; i ++ ) { if ( mp . ContainsKey ( arr [ i ] ) ) { int val = mp [ arr [ i ] ] ; mp [ arr [ i ] ] ++ ; } int count = 0 ; for ( KeyValuePair < int , int > entry in mp ) { if ( key == value ) { count ++ ; } } return count ; }
int Segregate ( int [ ] arr , int n ) { int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= 0 ) { int t = arr [ j ] ; arr [ j ] = arr [ i ] ; arr [ i ] = t ; j ++ ; } } return j ; }
int CountTriplets ( int [ ] a , int n ) { HashSet < int > s = new HashSet < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . Add ( a [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( s . ContainsKey ( xr ) ) { count ++ ; } } } return count / 3 ; }
int LeastFrequent ( int [ ] arr , int n ) { Dictionary < int , int > hp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . ContainsKey ( arr [ i ] ) ) { hp [ arr [ i ] ] ++ ; } else { hp [ arr [ i ] ] = 1 ; } } int min_count = n + 1 , res = - 1 ; for ( KeyValuePair < int , int > entry in hp ) { if ( min_count >= entry . Value ) { res = entry . Key ; min_count = entry . Value ; } } return res ; }
int FindPermutations ( int [ ] arr ) { int cnt = 0 ; int max_ind = - 1 , min_ind = 10000000 ; int n = arr . Length ; int [ ] index_of = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { index_of [ arr [ i ] ] = i + 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { max_ind = Math . Max ( max_ind , index_of [ i ] ) ; min_ind = Math . Min ( min_ind , index_of [ i ] ) ; if ( max_ind - min_ind + 1 == i ) { cnt ++ ; } } return cnt ; }
int FormQuadruplets ( int [ ] arr , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; Array . Sort ( arr ) ; int j = 0 ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; }
string LexicographicallyMaximum ( string s , int n ) { Dictionary < char , int > m = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . ContainsKey ( s [ i ] ) ) { m [ s [ i ] ] ++ ; } else { m [ s [ i ] ] = 1 ; } } List < char > v = new List < char > ( ) ; for ( int i = 'a' ; i < 'a' + Math . Min ( n , 25 ) ; ++ i ) { if ( m . ContainsKey ( i ) ) { v . Add ( i ) ; } } int j = v . Count - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( s [ i ] >= 'a' + Math . Min ( n , 25 ) || ( m . ContainsKey ( s [ i ] ) && m [ s [ i ] ] > 1 ) ) { m [ s [ i ] ] -- ; s = s . Substring ( 0 , i ) + v [ j ] + s . Substring ( i + 1 ) ; j -- ; } if ( j < 0 ) { break ; } } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) { break ; } if ( s [ i ] >= 'a' + Math . Min ( n , 25 ) || ( m . ContainsKey ( s [ i ] ) ) { m [ s [ i ] ] -- ; s = s . Substring ( 0 , i ) + v [ l ] + s . Substring ( i + 1 ) ; l ++ ; } } return s ; }
int NoOfValidKbers ( int k , int [ ] arr ) { HashSet < int > s = new HashSet < int > ( ) ; while ( k != 0 ) { s . Add ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . Count ; i ++ ) { int no = arr [ i ] ; bool flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( s . ContainsKey ( digit ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag ) { count ++ ; } } return count ; }
int DelCost ( String s , int [ ] cost ) { int ans = 0 ; Dictionary < char , int > for_max = new Dictionary < char , int > ( ) ; Dictionary < char , int > for_tot = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( for_max . ContainsKey ( s [ i ] ) ) { for_max [ s [ i ] ] = cost [ i ] ; } else { for_max [ s [ i ] ] = Math . Max ( cost [ i ] , for_max [ s [ i ] ] ) ; } if ( for_tot . ContainsKey ( s [ i ] ) ) { for_tot [ s [ i ] ] = cost [ i ] ; } else { for_tot [ s [ i ] ] = for_tot [ s [ i ] ] + cost [ i ] ; } } foreach ( KeyValuePair < char , int > entry in for_max ) { ans += for_tot [ entry . Key ] - entry . Value ; } return ans ; }
string [ ] ReplaceDuplicates ( string [ ] names ) { Dictionary < String , int > hmap = new Dictionary < String , int > ( ) ; for ( int i = 0 ; i < names . Count ; i ++ ) { if ( hmap . ContainsKey ( names [ i ] ) ) { int val = hmap [ names [ i ] ] ; hmap . Remove ( names [ i ] ) ; hmap . Add ( names [ i ] , val + 1 ) ; } else hmap . Add ( names [ i ] , 1 ) ; } } return names ; }
int [ ] minmaxNumbers ( List < int > matrix , int [ ] res ) { HashSet < int > s = new HashSet < int > ( ) ; for ( int i = 0 ; i < matrix . Count ; i ++ ) { int min_r = int . MaxValue ; for ( int j = 0 ; j < matrix [ i , j ] ; j ++ ) { min_r = Math . Min ( min_r , matrix [ i , j ] ) ; } s . Add ( min_r ) ; } for ( int j = 0 ; j < matrix [ 0 ] . Count ; j ++ ) { int max_c = int . MinValue ; for ( int i = 0 ; i < matrix . Count ; i ++ ) { max_c = Math . Max ( max_c , matrix [ i , j ] ) ; } if ( s . ContainsKey ( max_c ) ) { res . Add ( max_c ) ; } } return res ; }
int LengthOfLongestAp ( int [ ] a , int n ) { Dictionary < int , int > dp = new Dictionary < int , int > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = i + 1 ; j < n ; ++ j ) { int d = a [ j ] - a [ i ] ; if ( dp . ContainsKey ( d ) ) { dp [ d , j ] = dp [ d , i ] + 1 ; } else { dp [ d , j ] = 2 ; } } else { dp [ d ] = new Dictionary < int , int > ( ) ; dp [ d , j ] = 2 ; } res = Math . Max ( res , dp [ d , j ] ) ; } } return res ; }
char FindKthChar ( int n , int k ) { string prev = "A" ; string cur ; if ( n == 1 ) { return 'A' ; } for ( int j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . Length ; i ++ ) { if ( prev [ i ] == 'A' ) { prev [ i ] = 'B' ; } else { prev [ i ] = 'A' ; } } Reverse ( prev . Begin ( ) , prev . End ( ) ) ; cur += prev ; prev = cur ; } return cur [ k - 1 ] ; }
char FindKthLargest ( String s , int k ) { String tmp = new String ( s ) ; Array . Sort ( tmp ) ; Array . Reverse ( tmp ) ; return tmp [ k - 1 ] ; }
int SubArraylen ( int [ ] arr , int n , int k ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; if ( mp . ContainsKey ( arr [ 0 ] ) ) { mp [ arr [ i ] ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; if ( mp . ContainsKey ( arr [ i ] ) ) { continue ; } else { length = Math . Min ( length , i ) ; } if ( mp . ContainsKey ( x ) ) { continue ; } else { length = Math . Min ( length , i - mp [ x ] ) ; } } } return length ; }
int FindMaxLen ( List < int > a , int k ) { int n = a . Count ; Array . Sort ( a ) ; int [ ] vis = new bool [ n ] ; int i ; for ( i = 0 ; i < n ; i ++ ) { vis [ i ] = true ; } int c = 0 ; for ( i = 0 ; i < n ; ++ i ) { if ( vis [ i ] ) { int check = a [ i ] * k ; if ( mp . ContainsKey ( check ) ) { c ++ ; vis [ mp [ check ] ] = false ; } } } return n - c ; }
int MinDistancePoints ( int [ ] a , int k , int n ) { Dictionary < int , int > m = new Dictionary < int , int > ( ) ; Queue < int > q = new Queue < int > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . ContainsKey ( a [ i ] ) ) m [ a [ i ] ] = 1 ; q . Enqueue ( a [ i ] ) ; } int ans = new int [ n ] ; while ( k > 0 ) { int x = q . Dequeue ( ) ; if ( m . ContainsKey ( x - 1 ) ) { m [ x - 1 ] = 1 ; q . Enqueue ( x - 1 ) ; ans . Add ( x - 1 ) ; k -- ; } if ( m [ x + 1 ] && k > 0 ) { m [ x + 1 ] = 1 ; q . Enqueue ( x + 1 ) ; ans . Add ( x + 1 ) ; k -- ; } } return ans ; }
bool IsValidLen ( String s , int length , int k ) { int n = s . Length ; Dictionary < char , int > mp = new Dictionary < char , int > ( ) ; int right = 0 ; while ( right < length ) { if ( ! mp . ContainsKey ( s [ right ] ) ) { mp [ s [ right ] ] ++ ; } else { mp [ s [ right ] ] = 1 ; } right ++ ; } if ( mp . Count <= k ) { return true ; } while ( right < n ) { if ( mp . ContainsKey ( s [ right ] ) ) { mp [ s [ right ] ] ++ ; } else { mp [ s [ right ] ] = 1 ; } if ( mp . ContainsKey ( s [ right - length ] ) ) { mp [ s [ right - length ] ] -- ; } if ( mp . ContainsKey ( s [ right - length ] ) ) { mp . Remove ( s [ right - length ] ) ; } if ( mp . Count <= k ) { return true ; } right ++ ; } return mp . Count <= k ; }
int Partition ( int [ ] arr , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; int t ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; t = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = t ; } } t = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ high ] ; arr [ high ] = t ; return i + 1 ; }
int StrScore ( string [ ] strs , string s , int n ) { Dictionary < String , int > m = new Dictionary < String , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . ContainsKey ( strs [ i ] ) ) m [ strs [ i ] ] = i + 1 ; } if ( m . ContainsKey ( s ) ) { return 0 ; } int score = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { score += s [ i ] - 'a' + 1 ; } score = score * m [ s ] ; return score ; }
int CountEle ( int [ ] s , int [ ] a , int n ) { Dictionary < int , bool > mp = new Dictionary < int , bool > ( ) ; int [ ] ans = new int [ n ] ; for ( int i = 0 ; i < n ; ++ i ) { int num = a [ i ] ; if ( ! mp . ContainsKey ( num ) ) { ans . Add ( 0 ) ; } else { int cnt = 0 ; while ( s [ 0 ] != num ) { mp [ s [ 0 ] ] = true ; s . Remove ( s . begin ( ) ) ; cnt ++ ; } s . Add ( s . begin ( ) ) ; cnt ++ ; ans . Add ( cnt ) ; } } return ans ; }
int MaxDistinctChar ( String s , int n , int k ) { Dictionary < char , int > freq = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ s [ i ] ] ++ ; } List < int > v = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { v . Add ( it . Key ) ; } Array . Sort ( v ) ; for ( int i = 0 ; i < v . Count ; i ++ ) { int mn = Math . Min ( v [ i ] - 1 , k ) ; v [ i ] -= mn ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . Count ; i ++ ) { int mn = Math . Min ( v [ i ] , k ) ; v [ i ] -= mn ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . Count ; i ++ ) { if ( v [ i ] == 1 ) { res ++ ; } } return res ; }
int FindKth ( int [ ] arr , int n , int k ) { HashSet < int > missing = new HashSet < int > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . Add ( arr [ i ] ) ; } int max_m = arr . Max ( ) ; arr . Min ( ) ; for ( int i = min_m + 1 ; i < max_m ; i ++ ) { if ( missing . ContainsKey ( i ) ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; }
bool AlmostSort ( int [ ] a , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { int temp1 = a [ i ] ; int temp2 = a [ i + 1 ] ; a [ i + 1 ] = temp2 ; a [ i ] = temp1 ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { return false ; } } return true ; }
int MaximumSum ( String s , int n , int k ) { int sum = 0 ; List < int > freq = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ s [ i ] ] ++ ; } Array . Sort ( freq ) ; Array . Reverse ( freq ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; }
int FindMinOperations ( int [ ] arr , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int j = i ; j < n ; j += k ) { freq [ arr [ j ] ] ++ ; } int max1 = 0 , num = 0 ; for ( int auto = new List < int > ( ) ; foreach ( int key , value ] in freq ) { if ( value > max1 ) { max1 = value ; num = key ; } } for ( int [ , ] freq ) { if ( key != num ) { operations += value ; } } } return operations ; }
List < String > SubString ( String s , int n ) { List < String > v = new List < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int length = 1 ; length <= n - i ; length ++ ) { String find = s . Substring ( i , length ) ; v . Add ( find ) ; } } return v ; }
bool CheckUniqueFrequency ( int [ ] arr , int n ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ arr [ i ] ] ++ ; } unordered_set < int > unique_freq = new Dictionary < int , int > ( ) ; for ( int key = 0 ; key < n ; i ++ ) { if ( unique_freq . ContainsKey ( value ) ) { return false ; } else { unique_freq . Add ( value ) ; } } return true ; }
int MinCost ( String str1 , String str2 , int n ) { int cost = 0 ; String tmp = str1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 [ i ] ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) { int t = tmp [ i ] ; tmp [ i ] = str2 [ i ] ; tmp [ i + 1 ] = t ; cost ++ ; } else { cost ++ ; } } } return cost ; }
bool IsValidNum ( String x ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < x . Length ; i ++ ) { if ( ! mp . ContainsKey ( x [ i ] - '0' ) ) { return false ; } else if ( x [ i ] - '0' > 5 ) { return false ; } else { mp . Add ( x [ i ] - '0' , 1 ) ; } } return true ; }
int MinimizeDiff ( int [ ] arr , int n , int k ) { int max = arr . Max ( ) ; arr . Min ( ) ; int min = arr . Min ( ) ; if ( max - min <= k ) { return max - min ; } int avg = ( max + min ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = * max_element ( arr . begin ( ) , arr . End ( ) ) ; min = * min_element ( arr . Begin ( ) , arr . End ( ) ) ; return max - min ; }
int GetMinCost ( int [ ] arr , int n ) { int min_ele = arr . Min ( ) ; return min_ele * ( n - 1 ) ; }
bool Possibility ( Dictionary < int , int > m , int length , String s ) { int count_odd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( m [ s [ i ] - '0' ] % 2 == 1 ) { count_odd ++ ; } if ( count_odd > 1 ) { return false ; } } return true ; }
int MinimumCostOfBreaking ( int [ ] x , int [ ] y , int m , int n ) { int res = 0 ; Array . Sort ( x ) ; Array . Sort ( y ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m && j < n ) { total += x [ i ++ ] ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y [ j ++ ] ; } res += total * hzntl ; return res ; }
int FindMaximumScore ( List < int > a , int n ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . ContainsKey ( a [ i ] ) ) { freq [ a [ i ] ] = freq [ a [ i ] ] + 1 ; } else { freq [ a [ i ] ] = 1 ; } } List < int > dp = new List < int > ( ) ; for ( int i = 2 ; i < dp . Count ; i ++ ) { dp [ i ] = Math . Max ( dp [ i - 1 ] , dp [ i - 2 ] + freq [ i ] * i ) ; } return dp [ dp . Count - 1 ] ; }
int CountWays ( String s , String t , int k , int mod ) { int n = s . Length ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String p = s . Substring ( i , n - i ) + s . Substring ( 0 , i ) ; if ( p == t ) { a ++ ; } else { b ++ ; } } List < int > dp1 = new List < int > ( ) ; List < int > dp2 = new List < int > ( ) ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; } return dp1 [ k ] ; }
int FindSubarraySum ( int [ ] arr , int n , int k ) { Dictionary < int , int > prev_sum = new Dictionary < int , int > ( ) ; int res = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ] ; if ( curr_sum == k ) { res ++ ; } if ( prev_sum . ContainsKey ( curr_sum - k ) ) { res += prev_sum [ curr_sum - k ] ; } prev_sum [ curr_sum ] ++ ; } return res ; }
int MaximumOccurrence ( String s ) { int n = s . Length ; Dictionary < String , int > freq = new Dictionary < String , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String temp ; temp += s [ i ] ; freq [ temp ] ++ ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { String temp ; temp += s [ i ] ; temp += s [ j ] ; freq [ temp ] ++ ; } } int answer = int . MinValue ; for ( KeyValuePair < String , int > entry in freq ) { answer = Math . Max ( answer , entry . Key ) ; } return answer ; }
int CountCharacters ( string [ ] strings , string chars ) { int res = 0 ; Dictionary < char , int > freq = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < chars . Length ; i ++ ) { freq . Add ( chars [ i ] , 1 ) ; } for ( string st in strings ) { bool flag = true ; for ( char c in st ) { if ( freq . ContainsKey ( c ) ) { flag = false ; break ; } } if ( flag ) { res += st . Length ; } } return res ; }
int DistinctSubstring ( String p , String q , int k , int n ) { HashSet < String > ss = new HashSet < String > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int sum = 0 ; String s = "" ; for ( int j = i ; j < n ; ++ j ) { int pos = p [ j ] - 'a' ; sum += q [ pos ] - '0' ; s += p [ j ] ; if ( sum <= k ) { ss . Add ( s ) ; } else { break ; } } } return ss . Count ; }
int UniqueMorseRep ( string [ ] arr ) { string [ ] morseCode = new string [ ] { ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , "...." , ".." , ".---" , "-.-" , ".-.." , "--" , "-." , "---" , ".-." , "..." , "-" , "..-" , "-.--" , "--.." } ; HashSet < String > st = new HashSet < String > ( ) ; int n = arr . Length ; for ( int i = 0 ; i < n ; i ++ ) { string temp ; int m = arr [ i ] . Length ; for ( int j = 0 ; j < m ; j ++ ) { temp += morseCode [ arr [ i , j ] - 'a' ] ; } st . Add ( temp ) ; } return st . Count ; }
int CountSubstrings ( String st , int k ) { int n = st . Length ; int answer = 0 ; Dictionary < char , int > map = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( map . ContainsKey ( st [ i ] ) ) { map [ st [ i ] ] = 1 ; } else { map [ st [ i ] ] ++ ; } } if ( map . Count == k ) { answer ++ ; } for ( int i = k ; i < n ; i ++ ) { if ( map . ContainsKey ( st [ i ] ) ) { map [ st [ i ] ] = 1 ; } else { map [ st [ i ] ] ++ ; } map [ st [ i - k ] ] -- ; if ( map [ st [ i - k ] ] == 0 ) { map . Remove ( st [ i - k ] ) ; } if ( map . Count == k ) { answer ++ ; } } return answer ; }
bool CanConstruct ( String s , int k ) { Dictionary < int , int > m = new Dictionary < int , int > ( ) ; int i = 0 , j = 0 , p = 0 ; if ( s . Length == k ) { return true ; } for ( i = 0 ; i < s . Length ; i ++ ) { if ( m . ContainsKey ( s [ i ] ) ) m [ s [ i ] ] = 1 ; } if ( k > s . Length ) { return false ; } else { for ( KeyValuePair < int , int > entry in m ) { if ( entry . Value % 2 != 0 ) { p = p + 1 ; } } } if ( k < p ) { return false ; } return true ; }
bool EqualIgnoreCase ( String str1 , String str2 ) { transform ( str1 . Begin ( ) , str1 . End ( ) , str1 . Begin ( ) , :: toupper ) ; transform ( str2 . Begin ( ) , str2 . Begin ( ) , :: toupper ) ; return str1 == str2 ; }
int FindLongestSub ( String bin ) { int n = bin . Length ; int i ; int sum = 0 ; Dictionary < int , int > prev_sum = new Dictionary < int , int > ( ) ; int max_len = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin [ i ] == '1' ) { sum ++ ; } else { sum -- ; } if ( sum > 0 ) { max_len = i + 1 ; } else if ( sum <= 0 ) { if ( prev_sum . ContainsKey ( sum - 1 ) ) { int curr_len = i - prev_sum [ sum - 1 ] ; max_len = Math . Max ( max_len , curr_len ) ; } } if ( prev_sum . ContainsKey ( sum ) ) { prev_sum [ sum ] = i ; } } return max_len ; }
bool HasAllCodes ( String s , int k ) { HashSet < String > us = new HashSet < String > ( ) ; for ( int i = 0 ; i + k <= s . Length ; i ++ ) { us . Add ( s . Substring ( i , k ) ) ; } return us . Count == 1 << k ; }
bool CheckPalin ( String word ) { int n = word . Length ; Transform ( word . Begin ( ) , word . End ( ) , Word . Begin ( ) , :: tolower ) ; for ( int i = 0 ; i < n ; i ++ , n -- ) { if ( word [ i ] != word [ n - 1 ] ) { return false ; } } return true ; }
string Convert ( string st ) { string w , z = "" ; transform ( st . Begin ( ) , st . End ( ) , :: toupper ) ; st += " " ; for ( int i = 0 ; i < st . Length ; i ++ ) { char ch = st [ i ] ; if ( ch != ' ' ) { w += ch ; } else { z += char ( tolower ( w [ 0 ] ) ) + w . Substring ( 1 ) + " " ; w = "" ; } } return z ; }
int MaxLines ( int n , List < int > x1 , List < int > y1 , List < int > x2 , List < int > y2 ) { ArrayList s = new ArrayList ( ) ; double slope ; for ( int i = 0 ; i < n ; ++ i ) { if ( x1 [ i ] == x2 [ i ] ) { slope = int . MaxValue ; } else { slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; } s . Add ( slope ) ; } return s . Count ; }
Dictionary < int , int > PrimeFactor ( int n ) { Dictionary < int , int > primef = new Dictionary < int , int > ( ) ; while ( n % 2 == 0 ) { if ( primef . ContainsKey ( 2 ) ) { primef [ 2 ] += 1 ; } else { primef [ 2 ] = 1 ; } n /= 2 ; } for ( int i = 3 ; i <= Math . Sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { if ( primef . ContainsKey ( i ) ) { primef [ i ] += 1 ; } else { primef [ i ] = 1 ; } n /= i ; } } if ( n > 2 ) { primef [ n ] = 1 ; } return primef ; }
string IsDivisibleByDivisor ( int s , int d ) { s %= d ; HashSet < int > hmap = new HashSet < int > ( ) ; hmap . Add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hmap . ContainsKey ( s ) ) { if ( s == 0 ) { return "Yes" ; } return "No" ; } else { hmap . Add ( s ) ; } } return "Yes" ; }
bool OddSum ( int [ ] a , int n , int k ) { HashSet < int > odd = new HashSet < int > ( ) ; HashSet < int > even = new HashSet < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { even . Add ( a [ i ] ) ; } else { odd . Add ( a [ i ] ) ; } } if ( odd . Count >= k ) { return true ; } bool flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= even . Count ) { return true ; } } return flag ; }
int DayOfYear ( String date ) { int [ ] days = new int [ ] { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 , 30 , 31 } ; int year = Int32 . Parse ( date . Substring ( 0 , 4 ) ) ; int month = Int32 . Parse ( date . Substring ( 5 , 2 ) ) ; int day = Int32 . Parse ( date . Substring ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days [ month - 2 ] ; -- month ; } return day ; }
bool IsPerfectSquare ( int [ ] arr , int n ) { Dictionary < int , int > umap = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { umap . Add ( arr [ i ] , 1 ) ; } foreach ( KeyValuePair < int , int > entry in umap ) { if ( entry . Value % 2 == 1 ) { return false ; } } return true ; }
int MinMoves ( int n ) { string s = Convert . ToString ( n , 2 ) ; int ans = Int32 . MaxValue ; int length = s . Length ; for ( int i = 0 ; i < length ; ++ i ) { for ( int j = 0 ; j < length ; ++ j ) { if ( i == j ) { continue ; } string t = s ; int cur = 0 ; for ( int k = i ; k < length - 1 ; ++ k ) { t [ k ] , t [ k + 1 ] ) ; ++ cur ; } for ( int k = j - ( j > i ) ; k < length - 2 ; ++ k ) { int pos = k ; break ; } } for ( int k = pos ; k > 0 ; -- k ) { int t = t [ k ] ; t [ k ] = t [ k - 1 ] ; ++ cur ; } int nn = stoi ( t ) ; if ( nn % 25 == 0 ) { ans = Math . Min ( ans , cur ) ; } } } if ( ans == Int32 . MaxValue ) { return - 1 ; } return ans ; }
int MinimumOperations ( int [ ] a , int n ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . ContainsKey ( a [ i ] ) ) { mp [ a [ i ] ] += 1 ; } int count = 0 ; for ( KeyValuePair < int , int > entry in mp ) { if ( entry . Value > 1 ) { count += entry . Value - 1 ; } } return count ; }
int KaprekarRec ( int n , int prev ) { if ( n == 0 ) { return 0 ; } prev = n ; int [ ] digits = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } Array . Sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } Array . Sort ( digits ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } int diff = Math . Abs ( asc - desc ) ; if ( diff == prev ) { return diff ; } return KaprekarRec ( diff , prev ) ; }
string FractionToDecimal ( int numr , int denr ) { string res = "" ; Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; int rem = numr % denr ; while ( rem != 0 && mp . ContainsKey ( rem ) ) { mp [ rem ] = res . Length ; rem = rem * 10 ; int res_part = rem / denr ; res += to_string ( res_part ) ; rem = rem % denr ; } if ( rem == 0 ) { return "" ; } if ( mp . ContainsKey ( rem ) ) { return res . Substring ( 0 , mp . Count ) ; } return "" ; }
bool IsFancy ( string num ) { Dictionary < char , char > fp = new Dictionary < char , char > ( ) ; fp [ '0' ] = '0' ; fp [ '1' ] = '1' ; fp [ '6' ] = '9' ; fp [ '8' ] = '8' ; fp [ '9' ] = '6' ; int n = num . Length ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( fp . ContainsKey ( num [ l ] ) ) { return false ; } l ++ ; r -- ; } return true ; }
double DistinctOddRatio ( int [ ] numbers ) { HashSet < int > distinct_numbers = new HashSet < int > ( ) ; int distinct_count = ranges :: distance ( distinct_numbers ) ; int distinct_odd_count = ranges :: distance ( distinct_numbers | views :: filter ( [ ] ( int n ) { return n % 2 == 1 ; } ) ) ; return ( double ) distinct_odd_count / distinct_count ; }
int CompareSum ( List < int > numbers , List < String > words ) { int int_sum = reduce ( numbers . Begin ( ) , numbers . End ( ) ) ; List < String > tmp = new List < String > ( ) ; for ( int i = 0 ; i < words . Count ; i ++ ) { String s = words [ i ] ; return s . Length ; } ) ; int word_length_sum = reduce ( tmp . Begin ( ) , tmp . End ( ) ) ; if ( int_sum < word_length_sum ) { return - 1 ; } if ( int_sum > word_length_sum ) { return 1 ; } return 0 ; }
bool AllLongerThan ( List < String > short_words , List < String > long_words ) { int max_of_short = ranges :: Max ( short_words | views :: transform ( [ ] ( string & w ) { return w . Length ; } ) ) ; int min_of_long = ranges :: Min ( long_words | views :: transform ( [ ] ( string & w ) { return w . Length ; } ) ) ; return min_of_long > max_of_short ; }
int CompareOddEvenRange ( int [ ] numbers ) { int range_odd = ranges :: Max ( numbers | views :: filter ( [ ] ( int n ) { return n % 2 == 1 ; } ) ) - ranges :: Min ( numbers | views :: filter ( [ ] ( int n ) { return n % 2 == 1 ; } ) ) ; int range_even = ranges :: Max ( numbers | views :: filter ( [ ] ( int n ) { return n % 2 == 0 ; } ) ) - ranges :: Min ( numbers | views :: filter ( [ ] ( int n ) { return n % 2 == 0 ; } ) ) ; if ( range_odd < range_even ) { return - 1 ; } if ( range_odd > range_even ) { return 1 ; } return 0 ; }
double AverageDistinctLength ( List < String > words ) { HashSet < String > s = new HashSet < String > ( ) ; s . Add ( words . Begin ( ) , words . End ( ) ) ; List < String > distinct_words = new List < String > ( ) ; for ( int i = 0 ; i < words . Count ; i ++ ) distinct_words . Add ( s . Begin ( ) , s . End ( ) ) ; int average_len = ! distinct_size . Empty ( ) ? ( double ) reduce ( distinct_size . Begin ( ) , distinct_size . End ( ) ) / ranges :: distance ( distinct_size ) : 0 ; return average_len ; }
int WithDrawBalance ( int start , List < int > withdrawals ) { int end = accumulate ( withdrawals . begin ( ) , withdrawals . end ( ) , start , [ ] ( int balance , int next_withdrawal ) { return next_withdrawal <= balance ? balance - next_withdrawal : balance ; } ) ; return end ; }
string FirstShortAndStartsWithO ( string [ ] words ) { int [ ] matched_view = words | views :: filter ( [ ] ( const string & w ) { return w . Length < 5 ; } ) | views :: filter ( [ ] ( const string & w ) { return w [ 0 ] == 'o' ; } ) | views :: take ( 1 ) ; string matched_element = matched_view . Empty ( ) ? "" : matched_view . Front ( ) ; return matched_element ; }
int BigNumberAtIndex ( int [ ] numbers , int index ) { int matched_view = numbers | views :: filter ( [ ] ( int n ) { return n > 5 ; } ) | views :: drop ( index ) ; int target_num = matched_view . Front ( ) ; return target_num ; }
bool ContainsSquareInRange ( int range_start , int range_start + range_length ) { bool contains_square = ranges :: any ( views :: iota ( range_start , range_start + range_length ) , [ ] ( int n ) { return Math . Pow ( ( int ) Math . Sqrt ( n ) , 2 ) == n ; } ) ; return contains_square ; }
int [ , ] GroupNumbersByMod ( int [ ] numbers , int mod ) { int [ , ] number_groups = new int [ mod ] ; for ( int n in numbers ) { int key = n % mod ; number_groups [ key ] . Add ( n ) ; } return number_groups ; }
Dictionary < char , List < string > > GroupWordsByFirstChar ( List < string > words ) { Dictionary < char , List < string > > word_groups = new Dictionary < char , List < string > > ( ) ; for ( string word in words ) { word_groups [ word [ 0 ] ] . Add ( word ) ; } return word_groups ; }
List < String > OrderByLengthAndDescending ( List < String > words ) { List < String > sorted_words = new List < String > ( ) ; Array . Sort ( sorted_words ) ; int j = 0 ; for ( int i = 0 ; i < words . Count ; i ++ ) { if ( a . Length == b . Length ) { return a > b ; } return a . Length < b . Length ; } ) ; return sorted_words ; }
List < String > OrderFirstCharDescendingReverse ( List < String > words ) { List < String > sorted_words = new List < String > ( ) ; Array . Sort ( sorted_words ) ; int j = 0 ; for ( int i = 0 ; i < words . Count ; i ++ ) { if ( a [ 0 ] == b [ 0 ] ) { return a < b ; } return a [ 0 ] > b [ 0 ] ; } ) ; j += sorted_words . Begin ( ) ; sorted_words . End ( ) ; return sorted_words ; }
List < int > GetSubListOfNegative ( List < int > numbers , int start , int length ) { int matched_view = numbers | views :: drop ( start ) | views :: filter ( [ ] ( int n ) { return n < 0 ; } ) | views :: take ( length ) ; List < int > sub_list = new List < int > ( ) ; ranges :: Copy ( matched_view , back_inserter ( sub_list ) ) ; return sub_list ; }
List < int > GetPositiveSequence ( List < int > numbers ) { int matched_view = numbers | views :: drop_while ( [ ] ( int n ) { return n <= 0 ; } ) | views :: take_while ( [ ] ( int n ) { return n >= 0 ; } ) ; List < int > sub_sequence = new List < int > ( ) ; ranges :: Copy ( matched_view , back_inserter ( sub_sequence ) ) ; return sub_sequence ; }
List < int > GetLargerThanIndexSequence ( List < int > numbers ) { int matched_view = views :: iota ( 0 , ( int ) numbers . Count ) | views :: drop_while ( [ & numbers ] ( int n ) { return numbers [ n ] < n ; } ) | views :: take_while ( [ & numbers ] ( int n ) { return numbers [ n ] > n ; } ) | views :: transform ( [ & numbers ] ( int n ) { return numbers [ n ] ; } ) ; List < int > sub_sequence = new List < int > ( ) ; ranges :: Copy ( matched_view , back_inserter ( sub_sequence ) ) ; return sub_sequence ; }
List < String > RearrangeWordByIndexes ( List < String > words , List < int > indexes ) { int new_indexes = indexes | views :: filter ( [ & words ] ( int n ) { return n >= words . Count ; } ) | views :: transform ( [ & words ] ( int n ) { return n % words . Count ; } ) ; int matched_view = new_indexes | views :: transform ( [ & words ] ( int n ) { return words [ n ] ; } ) ; List < String > new_words = new List < String > ( ) ; ranges :: Copy ( matched_view , back_inserter ( new_words ) ) ; return new_words ; }
List < String > GetWordsUpperLower ( List < String > words ) { auto matched_view = words | views :: transform ( [ ] { string upper = w ; string lower = w ; ranges :: Add ( upper . begin ( ) , upper . end ( ) , upper . begin ( ) , :: toupper ) ; ranges :: Add ( lower . begin ( ) , lower . begin ( ) , :: tolower ) ; return List < String > { upper , lower } ; } ) ; List < String > upper_lower_words = new List < String > ( ) ; ranges :: Copy ( matched_view , back_inserter ( upper_lower_words ) ) ; return upper_lower_words ; }
int SelectIfInPlace ( int [ ] numbers ) { int matched_view = views :: iota ( 0 , ( int ) numbers . Count ) | views :: transform ( [ & numbers ] ( int n ) { return numbers [ n ] == n ; } ) ; int [ ] nums_in_place = new int [ 2 * numbers . Count ] ; ranges :: Copy ( matched_view , back_inserter ( nums_in_place ) ) ; return nums_in_place ; }
List < int > SelectPairs ( List < int > numbers_a , List < int > numbers_b ) { int matched_view = numbers_a | views :: transform ( [ & numbers_b ] ( int a ) { return numbers_b | views :: filter ( [ a ] ( auto b ) { return a < b ; } ) | views :: transform ( [ a ] ( auto b ) { return vector < int > { a , b } ; } ) | views :: join ; List < int > pairs = new List < int > ( ) ; ranges :: Copy ( matched_view , back_inserter ( pairs ) ) ; return pairs ; }
List < String > StringCrossJoin ( List < String > end_words , List < String > begin_words ) { int matched_view = begin_words | views :: transform ( [ & end_words ] ( string & b ) { return end_words | views :: filter ( [ b ] ( string & e ) { return b [ 0 ] == e [ e . Length - 1 ] ; } ) | views :: transform ( [ b ] ( auto e ) { return e + " " + b ; } ) ; } ) | views :: join ; List < String > cross_strings = new List < String > ( ) ; ranges :: Copy ( matched_view , back_inserter ( cross_strings ) ) ; return cross_strings ; }
int ElementsContainSubword ( string [ ] words , string subword ) { if ( ranges :: all_of ( words | views :: take ( 5 ) , [ & subword ] ( string & w ) { return w . ContainsKey ( subword ) ; } ) ) return 1 ; if ( ranges :: any_of ( words | views :: take ( 5 ) , [ & subword ] ( string & w ) { return w . ContainsKey ( subword ) ; } ) ) return 0 ; return - 1 ; }
int ConcatLargeNumbers ( int [ ] numbers_a , int [ ] numbers_b , int flag ) { auto large_numbers_a = numbers_a | views :: filter ( [ flag ] ( int n ) { return n > flag ; } ) ; auto large_numbers_b = numbers_b | views :: filter ( [ flag ] ( int n ) { return n > flag ; } ) ; std :: List < int > all_numbers = new List < int > ( ) ; ranges :: Copy ( large_numbers_a , back_inserter ( all_numbers ) ) ; ranges :: Copy ( large_numbers_b , back_inserter ( all_numbers ) ) ; return all_numbers ; }
int DotProduct ( List < int > vector_a , List < int > vector_b ) { int dot_product = inner_product ( vector_a . begin ( ) , vector_a . end ( ) , vector_b . begin ( ) , 0 ) ; return dot_product ; }
int SetDifference ( List < int > set_a , List < int > set_b ) { int [ ] difference = new int [ 2 * N ] ; ranges :: Sort ( set_a ) ; ranges :: Sort ( set_b ) ; set_symmetric_difference ( set_a . begin ( ) , set_a . end ( ) , set_b . begin ( ) , set_b . end ( ) , back_inserter ( difference ) ) ; return difference ; }
