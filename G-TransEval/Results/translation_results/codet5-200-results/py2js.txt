function greatest_common_divisor ( a : int , b : int ) { if ( a == 0 b == 0 ) return a + b ; if ( a == b ) return a ; if ( a > b ) return greatest_common_divisor ( a % b , b ) ; else return greatest_common_divisor ( a , b % a ) ; }
function largest_divisor ( n ) { for ( let i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) return parseInt ( n / i ) ; } return 1 ; }
function is_prime ( n ) { if ( n < 2 ) return false ; for ( let k = 2 ; k < n ; k ++ ) if ( n % k == 0 ) return false ; return true ; }
function fizz_buzz ( n ) { let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( i % 11 == 0 i % 13 == 0 ) { let q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) { count ++ ; } q = parseInt ( q / 10 , 10 ) ; } } return count ; }
function prime_fib ( n ) { let f0 = 0 , f1 = 1 ; while ( n > 0 ) { let p = f0 + f1 , is_prime = true ; for ( let i = 2 ; i <= p ; i ++ ) { if ( p % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { n -- ; } f0 = f1  ; f1 = p  ; } return f1  ; }
function triangle_area ( a , h ) { return a * h / 2 ; }
function modp ( n , p ) { let ret = 1 ; for ( let i = 0 ; i < n ; i ++ ) { ret = ( ret * 2 ) % p ; } return ret ; }
function add ( x , y ) { return x + y ; }
function fib ( n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 1 ; return fib ( n - 1 ) + fib ( n - 2 ) ; }
function largest_prime_factor ( n ) { for ( let i = 2 ; i < n ; i ++ ) { while ( n % i == 0 && n > i ) n = parseInt ( n / i ) ; } return n ; }
function sum_to_n ( n ) { let result = 0 ; for ( let i = 1 ; i <= n ; i ++ ) result += i ; return result ; }
function fibfib ( n : int ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 0 ; if ( n == 2 ) return 1 ; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
function is_multiply_prime ( a ) { let num = 0 ; for ( let i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) a = parseInt ( a / i ) ; num ++ ; } return num == 3 ; }
function is_simple_power ( x , n ) { if ( n == 1 ) return x == 1 ; let power = 1 ; while ( power < x ) power *= n ; return power == x ; }
function choose_num ( x , y ) { if ( x > y ) return - 1 ; if ( y % 2 == 0 ) return y ; if ( x == y ) return - 1 ; return y - 1 ; }
function is_equal_to_sum_even ( n ) { return ( n % 2 == 0 && n >= 8 ) ; }
function special_factorial ( n ) { var fact = 1  var special_fact = 1  for ( i = 1 ; i <= n ; i ++ ) { fact *= i ; special_fact *= fact  ; } return special_fact  ; }
function x_or_y ( n , x , y ) { let is_prime = n >= 2 ; for ( let i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) return x ; return y ; }
function right_angle_triangle ( a , b , c ) { return a * a == b * b + c * c || b * b == a * a + c * c ; }
function fast_pow ( n , k ) { if ( k == 0 ) return 1 ; let temp = fast_pow ( n , k / 2 ) ; if ( k % 2 == 0 ) return temp * temp ; else return n * temp * temp ; }
function is_palin ( s ) { let l = s . length / 2 ; for ( let i = 0 ; i < l ; i ++ ) if ( s [ i ] != s [ s . length - i - 1 ] ) return false ; return true ; }
function find_sum ( n ) { var ans = 0 ; var temp = 0 ; for ( i = 1 ; i <= n ; i ++ ) { if ( ! temp < n ) break ; temp = i - 1 ; var num = 1 ; while ( temp < n ) { if ( temp + i <= n ) ans += i * num  ; else ans += ( n - temp ) * num  ; temp += i ; num ++ ; } } return ans ; }
function get_next_gap ( gap ) { gap = parseInt ( gap * 10 / 13 ) ; if ( gap < 1 ) return 1 ; return gap ; }
function count_non_decreasing ( n ) { let k = 10 ; let count = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count = parseInt ( count / i ) ; } return count ; }
function power ( x , y ) { if ( y == 0 ) return 1 ; else if ( y % 2 == 0 ) return power ( x , y / 2 ) * power ( x , y / 2 ) ; else return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; }
function power ( x , y ) { if ( y == 0 ) return 1 ; let temp = power ( x , y / 2 ) ; if ( y % 2 == 0 ) return temp * temp ; else return temp * temp / x ; }
function multiply ( x , y ) { if ( y == 0 ) return 0 ; if ( y > 0 ) return x + multiply ( x , y - 1 ) ; if ( y < 0 ) return - multiply ( x , - y ) ; }
function smallest ( x , y , z ) { if ( ! y / x ) return y ; return x ; }
function is_power_of_four ( n ) { if ( n == 0 ) return false ; while ( n != 1 ) { if ( n % 4 != 0 ) return false ; n = parseInt ( n / 4 ) ; } return true ; }
function mod_inverse ( a , m ) { let m0 = m , t , q ; let x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { q = parseInt ( a / m , 10 ) ; t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) x1 += m0 ; return x1 ; }
function cnt_rotations ( s , n ) { let s2 = s + s  let pre = new Array ( 2 * n ) ; for ( let i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; if ( s2 [ i ] == "a" s2 [ i ] == "e" s2 [ i ] == "i" s2 [ i ] == "o" s2 [ i ] == "u" ) pre [ i ] ++ ; } let ans = 0 ; for ( let i = n - 1 ; i >= 0 ; i -- ) { let r = i - n ; let l = i - n ; let x1 = pre [ r ]  ; if ( l >= 0 ) x1 -= pre [ l ] ; r = i - n / 2 ; let left = pre [ r ]  ; if ( l >= 0 ) left -- ; right = x1 - left ; if ( left > right ) ans ++ ; } return ans ; }
function binomial_coeff ( n , k ) { var res = 1 ; if ( k > n - k ) k = n - k ; for ( var i = 0 ; i < k ; i ++ ) { res *= n - i ; res = parseInt ( res / i + 1 ) ; } return res ; }
function is_prefix ( temp , s ) { if ( temp . length < s . length ) return false ; else { for ( let i = 0 ; i < s . length ; i ++ ) if ( s [ i ] != temp [ i ] ) return false ; } return true ; }
function lexicographically_smallest_string ( s , n ) { let last_ze = - 1 ; let ans = "" ; for ( let i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == "0" ) last_ze = i ; break ; } } for ( let i = 0 ; i < n ; i ++ ) { if ( i <= last_ze && s [ i ] == "0" ) ans += s [ i ] ; else ans += s [ i ] ; } return ans ; }
function calculate_max ( n , m , k ) { var ans = - 1 ; var low = 0 , high = m ; while ( low <= high ) { var mid = Math . floor ( ( low + high ) / 2 ) ; var val = 0 ; var l = k - 1 , r = n - k ; val += mid ; if ( mid >= l ) { val += l * ( 2 * mid - l - 1 ) / 2 ; } else { val += mid * ( 2 * mid - r - 1 ) / 2 ; } if ( mid >= r ) val += r * ( 2 * mid - r - 1 ) / 2 ; else val += mid * ( mid - 1 ) / 2 + ( r - mid ) ; } if ( val <= m ) ans = Math . max ( ans , mid ) ; low = mid + 1 ; else high = mid - 1 ; } return ans ; }
function find_length ( s , i , j ) { let required = i ; let length = 0 ; for ( let curr = 0 ; curr < s . length ; curr ++ ) { if ( curr == required ) length ++ ; if ( required == i ) required = j ; else required = i ; } return length ; }
function check_reverse ( left_sum , right_sum ) { let rev = 0 ; let temp = right_sum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp = parseInt ( temp / 10 ) ; } if ( rev == left_sum ) return true ; return false ; }
function is_composite ( n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return false ; if ( n % 2 == 0 n % 3 == 0 ) return true ; for ( let i = 5 ; i * i <= n ; i ++ ) if ( n % i == 0 n % ( i + 2 ) == 0 ) return true ; return false ; }
function min_deletion ( s ) { let n = s . length ; let first_idx1 = - 1 , last_idx0 = - 1 ; for ( let i = 0 ; i < n ; i ++ ) { if ( s [ i ] == "1" ) { first_idx1 = i ; break ; } } for ( let i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == "0" ) last_idx0 = i ; break ; } } if ( first_idx1 == - 1 last_idx0 == - 1 ) return 0 ; let count1 = 0 ; let count0 = 0 ; for ( let i = 0 ; i < last_idx0 ; i ++ ) { if ( s [ i ] == "1" ) { count1 ++ ; } } for ( let i = first_idx1 + 1 ; i < n ; i ++ ) { if ( s [ i ] == "1" ) count0 ++ ; } return Math . min ( count0 , count1 ) ; }
function min_steps ( s , n ) { let cost = 0 ; let f = new Array ( 26 ) ; for ( let i = 0 ; i < n ; i ++ ) { let curr_ele = s [ i ] . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) ; let smaller = 0 ; for ( let j = curr_ele ; j <= curr_ele ; j ++ ) { if ( f [ j ] != 0 ) smaller += f [ j ] ; } if ( smaller == 0 ) cost += i + 1 ; else cost += i - smaller + 1 ; f [ s [ i ] . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) ] ++ ; } return cost ; }
function number_of_ways ( n ) { let count = 0 ; for ( let a = 1 ; a < n ; a ++ ) { for ( let b = 1 ; b < n ; b ++ ) { let c = n - ( a + b ) ; if ( a < b + c && b < a + c && c < a + b ) { count ++ ; } } } return count ; }
function slope_of_num ( num , n ) { var slope = 0 ; for ( i = 1 ; i < n - 1 ; i ++ ) { if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) slope ++ ; else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) slope ++ ; } return slope ; }
function middle_of_three ( a , b , c ) { let x = a - b , y = b - c , z = a - c  ; if ( x * y > 0 ) return b ; else if ( x * z > 0 ) return c  ; else return a  ; }
function count_max_set_bits ( left , right ) { while ( left | ( left + 1 ) ) <= right ) { left |= ( left + 1 ) ; } return left ; }
function find_s ( s ) { let l = 1 , r = s / 2 + 1 ; while ( l <= r ) { let mid = parseInt ( ( l + r ) / 2 , 10 ) ; let sum = mid * ( mid + 1 ) / 2 , if ( sum == s ) return mid ; else if ( sum > s ) r = mid - 1 ; else l = mid + 1 ; } return - 1 ; }
function check ( s ) { let min = Number . MIN_VALUE ; let max = Number . MAX_VALUE ; let sum = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { let ascii = s [ i ] ; if ( ascii < 96 ascii > 122 ) return false ; sum += ascii ; if ( min > ascii ) min = ascii ; if ( max < ascii ) max = ascii ; } let e_sum = max * ( min + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == e_sum  ; }
function minimum_possible_product ( k ) { let res = 1 ; let r = ( 1 << k ) - 1 ; for ( let i = 0 ; i < k ; i ++ ) { res *= r - 1 ; } res *= r  ; return res ; }
function find_in_grid ( i , j ) { if ( i == j ) return i * i - ( i - 1 ) ; else if ( i > j ) { if ( i % 2 == 0 ) return i * i - ( j - 1 ) ; else return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } else { return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; } } else { return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; } }
function find_min_operations_req_emp_str ( s ) { let cnt_one = 0 , cnt_zero = 0 ; let n = s . length ; for ( let i = 0 ; i < n ; i ++ ) { if ( s [ i ] == "0" ) { if ( cnt_one > 0 ) cnt_one = cnt_one - 1 ; } cnt_zero = cnt_zero + 1 ; } else { if ( cnt_zero > 0 ) cnt_zero = cnt_zero - 1 ; } cnt_one = cnt_one + 1 ; } return cnt_one + cnt_zero  ; }
function is_reachable ( x1 , y1 , x2 , y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) { x2 %= y2 ; } else { y2 %= x2 ; } } if ( x2 == x1 ) return y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ; else return false ; }
function find_max_soln ( n , x , y ) { let ans = Number . MIN_VALUE ; for ( let k = n + 1 ; k <= n ; k ++ ) { if ( k % x == y ) ans = Math . max ( ans , k ) ; } return ans >= 0 && ans <= n ? ans : - 1 ; }
function number_of_pairs ( n ) { let count = 0 ; for ( let i = 1 , j = n - 1 ; i < j ; i ++ , j -- ) { if ( ( i + j ) == n ) { count ++ ; } } return count ; }
function min_changes ( s , n ) { var count = 0 , zeros = 0 , ones = 0 ; if ( s [ 0 ] != "1" ) { count ++ ; ones ++ ; } for ( var i = 1 ; i < n ; i ++ ) { if ( s [ i ] == "0" ) zeros ++ ; else ones ++ ; if ( zeros > ones ) zeros -- ; ones ++ ; count ++ ; } } return count ; }
function k_visible_from_left ( n , k ) { if ( n == k ) return 1 ; if ( k == 1 ) { var ans = 1 ; for ( i = 1 ; i < n ; i ++ ) { ans *= i ; } return ans ; } return k_visible_from_left ( n - 1 , k - 1 ) + ( n - 1 ) * k_visible_from_left ( n - 1 , k ) ; }
function find ( n , sum ) { if ( sum > 6 * n sum < n ) { return 0 ; } if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) { return 1.0 / 6 ; } else { return 0 ; } } let s = 0 ; for ( let i = 1 ; i < 7 ; i ++ ) { s += find ( n - 1 , sum - i ) / 6 ; } return s ; }
function bin_coff ( n , r ) { var val = 1 ; if ( r > ( n - r ) ) r = n - r ; for ( var i = 0 ; i < r ; i ++ ) { val *= n - i  ; val = parseInt ( val / i + 1 ) ; } return val ; }
function get_mask ( val ) { let mask = 0 ; if ( val == 0 ) return 1 ; while ( val > 0 ) { let d = val % 10 ; mask |= ( 1 << d ) ; val = parseInt ( val / 10 ) ; } return mask ; }
function ways_to_k_adjacent_set_bits ( n , k , current_index , adjacent_set_bits , last_bit ) { if ( current_index == n ) { if ( adjacent_set_bits == k ) { return 1 ; } return 0 ; } let no_of_ways = 0 ; if ( last_bit == 1 ) { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits + 1 , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } else { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } return no_of_ways ; }
function check_func ( i , j , st ) { if ( st [ i ] == '(' && st [ j ] == ')' ) { return 1 ; } if ( st [ i ] == '(' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == ')' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == ']' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '}' ) { return 1 ; } return 0 ; }
function find_golomb ( n ) { if ( n == 1 ) return 1 ; return 1 + find_golomb ( n - find_golomb ( find_golomb ( n - 1 ) ) ) ; }
function all_ones ( s , n ) { let co = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { co += s [ i ] == "1" ? 1 : 0 ; } return co == n ; }
function pad ( n ) { var p_prev_prev = 1 , p_prev = 1 , p_curr = 1 ; var p_next = 1 ; for ( var i = 3 ; i <= n ; i ++ ) { p_next = p_prev_prev + p_prev  ; p_prev_prev = p_prev  ; p_prev = p_curr  ; p_curr = p_next  } return p_next  ; }
function odd_length_palindrome ( k ) { let palin = k ; k = parseInt ( k / 10 , 10 ) ; while ( k > 0 ) { let rev = k % 10 ; palin = palin * 10 + rev ; k = parseInt ( k / 10 , 10 ) ; } return palin ; }
function change_string ( s0 ) { let s = s0 . slice ( ) ; let n = s0 . length ; if ( s [ 0 ] == '?' ) { s [ 0 ] = "a"  if ( s [ 0 ] == s [ 1 ] ) { s [ 0 ] = String . fromCharCode ( s [ 0 ] ) + 1 ) ; } } for ( let i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == s [ i - 1 ] ) s [ i ] = String . fromCharCode ( s [ i ] ) + 1 ) ; } if ( s [ i ] == s [ i + 1 ] ) { s [ i ] = String . fromCharCode ( s [ i ] ) + 1 ) ; } if ( s [ i ] == s [ i - 1 ] ) s [ i ] = String . fromCharCode ( s [ i ] ) + 1 ) ; } } if ( s [ n - 1 ] == '?' ) { s [ n - 1 ] = "a"  if ( s [ n - 1 ] == s [ n - 2 ] ) s [ n - 1 ] = String . fromCharCode ( s [ n - 1 ] ) + 1 ) ; } } return s [ 0 ] ; }
function total_hamming_distance ( n ) { let i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + parseInt ( n / i , 10 ) ; i = i * 2  ; } return sum ; }
function check_bitonic ( s ) { var i = 1 ; for ( i = 1 ; i < s . length ; i ++ ) { if ( s [ i ] > s [ i - 1 ] ) continue ; if ( s [ i ] <= s [ i - 1 ] ) break ; } if ( i == s . length - 1 ) return 1 ; var j = i + 1  ; for ( j = j ; j <= s . length ; j ++ ) { if ( s [ j ] < s [ j - 1 ] ) continue ; if ( s [ j ] >= s [ j - 1 ] ) break ; } } i = j ; if ( i != s . length - 1 ) return 0 ; return 1 ; }
function ends_with ( str , pat ) { let pat_len = pat . length ; let str_len = str . length ; if ( pat_len > str_len ) return false ; pat_len -- ; str_len -- ; while ( pat_len >= 0 ) if ( pat [ pat_len ] != str [ str_len ] ) return false ; pat_len -- ; str_len -- ; } return true ; }
function get_sum ( n , d ) { if ( n < d ) return 0 ; while ( n % 10 != d ) n -- ; let k = parseInt ( n / 10 , 10 ) ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
function balanced_string_by_swapping ( s ) { let unbalanced_pair = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( unbalanced_pair > 0 && s [ i ] == ']' ) unbalanced_pair -- ; else if ( s [ i ] == '[' ) unbalanced_pair ++ ; } return ( unbalanced_pair + 1 ) / 2 ; }
function compute_hash ( s ) { let p = 31 , mod = 10 * 9 + 7  let hash_val = 0  let mul = 1  for ( let ch = 0 ; ch < s . length ; ch ++ ) { hash_val = ( hash_val + ( ch . charCodeAt ( ) - "a" . charCodeAt ( ) + 1 ) * mul ) % mod  mul = mul * p % mod  } return hash_val  ; }
function count_of_substring_with_only_ones ( s ) { let res = 0 ; let count = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { count = count + 1 if ( s [ i ] == "1" ) count = 0 ; res = res + count  ; } return res ; }
function composite ( n ) { let flag = 0 ; let c = 0 ; for ( let j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) c += 1 ; } if ( c >= 3 ) flag = 1 ; return flag ; }
function is_div_by_six ( s , n ) { let sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) { sum += s [ i ] . charCodeAt ( ) - "a" . charCodeAt ( ) + 1 ; } if ( sum % 3 != 0 ) return false ; let last_digit = ( s [ n - 1 ] . charCodeAt ( ) - "a" . charCodeAt ( ) + 1 ) % 10 ; if ( last_digit % 2 != 0 ) return false ; return true ; }
function is_redundant_braces ( s ) { let a = 0 , b = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == '(' && s [ i + 2 ] == ')' ) return true ; if ( s [ i ] == '*' s [ i ] == '+' s [ i ] == '-' s [ i ] == '/' ) a ++ ; if ( s [ i ] == '(' ) b ++ ; } if ( b > a ) return true ; return false ; }
function count_sub_str ( s , n ) { var count = 0 ; for ( var i = 0 ; i < n - 2 ; ) { if ( s [ i ] == "0" && s [ i + 1 ] == "1" && s [ i + 2 ] == "0" ) count ++ ; i ++ ; } else if ( s [ i ] == "1" && s [ i + 1 ] == "0" && s [ i + 2 ] == "1" ) count ++ ; i ++ ; } return count ; }
function prefix_occurrences ( s ) { var c = s [ 0 ]  var count_c = 0 ; for ( var i = 1 ; i < s . length ; i ++ ) { if ( s [ i ] == c ) count_c ++ ; } return count_c ; }
function is_valid ( s , len ) { for ( let i = 1 ; i < len ; i ++ ) if ( s [ i ] == s [ i - 1 ] ) return false ; return true ; }
function count ( s , k ) { let n = s . length ; let d = 0 ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { d += s [ i ] ; } if ( d % k == 0 ) { count ++ ; } for ( let i = k ; i < n ; i ++ ) { let prev = s [ i - k ] ; d -= prev ; d += s [ i ] ; if ( d % k == 0 ) { count ++ ; } } return count ; }
function find_substring_count ( s ) { let result = 0 ; let n = s . length ; for ( let i = 0 ; i < n - 1 ; i ++ ) { if ( s [ i ] + 1 == s [ i + 1 ] ) result ++ ; while ( i < n - 1 && s [ i ] . charCodeAt ( ) + 1 == s [ i + 1 ] ) i ++ ; } return result ; }
function find ( s1 , s2 ) { let len1 = s1 . length ; let len2 = s2 . length ; if ( len1 != len2 ) return false ; let d = new Array ( len1 ) ; for ( let i = 0 ; i < len1 ; i ++ ) d [ i ] = s2 [ i ] - s1 [ i ] ; for ( let i = 1 ; i < len1 ; i ++ ) { if ( s1 [ i ] > s2 [ i ] ) return false ; else d [ i ] = s1 [ i ] ; } for ( let i = 0 ; i < len1 - 1 ; i ++ ) if ( d [ i ] < d [ i + 1 ] ) return false ; return true ; }
function is_in_given_base ( s , bas ) { if ( bas > 16 ) return false ; else if ( bas <= 10 ) { for ( let i = 0 ; i < s . length ; i ++ ) { if ( ! s [ i ] . charCodeAt ( 0 ) && s [ i ] . charCodeAt ( 0 ) < "0" + bas ) { return false ; } } else { for ( let i = 0 ; i < s . length ; i ++ ) { if ( ! ( s [ i ] . charCodeAt ( 0 ) && s [ i ] . charCodeAt ( 0 ) < "0" ) + bas ) ) { return false ; } } } return true ; }
function count_non_empty_substr ( s ) { n = s . length ; return ( n + 1 ) / 2 ; }
function even_decimal_value ( s , n ) { let result = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i ; j < n ; j ++ ) { let decimal_value = 0 ; let power_of_2 = 1 ; for ( let k = i ; k <= j ; k ++ ) { decimal_value += ( s [ k ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ) * power_of_2 ; power_of_2 *= 2 ; } if ( decimal_value % 2 == 0 ) result ++ ; } } return result ; }
function calculate ( s ) { var ans = 6 ; for ( var i = 0 ; i < 10 ; i ++ ) { for ( var j = 0 ; j < 10 ; j ++ ) { for ( var k = 0 ; k < 10 ; k ++ ) { for ( var l = 0 ; l < 10 ; l ++ ) { for ( var m = 0 ; m < 10 ; m ++ ) { for ( var n = 0 ; n < 10 ; n ++ ) { if ( i + j + k == l + m + n ) { var c = 0 ; if ( i != s [ 0 ] ) - "0" ) c ++ ; if ( j != s [ 1 ] ) - "0" ) c ++ ; if ( k != s [ 2 ] ) - "0" ) c ++ ; if ( m != s [ 4 ] ) - "0" ) c ++ ; if ( n != s [ 5 ] ) - "0" ) c ++ ; if ( c < ans ) ans = c  ; } } } return ans ; }
function xor_zero ( s ) { let one_count = 0  let zero_count = 0  let n = s . length ; for ( let i = 0 ; i < n ; i ++ ) { if ( s [ i ] == "1" ) one_count ++ ; else zero_count ++ ; } if ( one_count % 2 == 0 ) return zero_count  ; return one_count  ; }
function even_length ( n ) { let res = n ; for ( let j = n . length - 1 ; j >= 0 ; j -- ) { res += n [ j ]  ; } return res ; }
function count_substring_with_equal_ends ( s ) { let result = 0 ; let n = s . length ; for ( let i = 0 ; i < n ; i ++ ) for ( let j = i ; j < n ; j ++ ) if ( s [ i ] == s [ j ] ) result = result + 1 ; return result ; }
function normal_slope ( a , b , x1 , y1 ) { var g = a / 2 , f = b / 2 ; if ( g - x1 == 0 ) return - 1 ; var slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) return - 2 ; return slope ; }
function orthogonality ( x1 , y1 , x2 , y2 , r1 , r2 ) { var dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) return true ; else return false ; }
function find_area_shaded ( a ) { let sq_area = a * a  let semi_circle_area = ( 3.14 * ( a * a ) / 8 )  let shaded_area = 4 * semi_circle_area - sq_area  return shaded_area }
function factorial ( a , b ) { let res = 1 ; for ( let i = 1 ; i <= a + b ; i ++ ) res = res * i ; for ( let i = 1 ; i <= a ; i ++ ) res = res / i ; for ( let i = 1 ; i <= b ; i ++ ) res = parseInt ( res / i ) ; return res ; }
function factor_tree ( n ) { let height = 0 ; while ( n > 1 ) { let flag = false ; for ( let i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = parseInt ( n / i ) ; flag = true ; break ; } } height ++ ; if ( ! flag ) break ; } return height ; }
function find_if_possible ( n , s , x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) return "Yes" ; if ( n == 1 ) return "Yes" ; else return "No" ; } if ( n == 2 ) return c ; let a = s - x ; let b = c ; a = a + x ; if ( a ^ b ) == x ) return "Yes" ; else return "No" ; }
function maximum_triplet_xor ( a , b , c ) { var ans = 0 ; for ( var i = 30 ; i >= 0 ; i -- ) { var cur = 1 << i ; if ( a >= cur ) ans += cur  ; a -- ; } else if ( b >= cur ) ans += cur  ; b -- ; } else if ( c >= cur ) ans += cur  ; c -- ; } return ans ; }
function item_type ( n ) { var count = 0 ; var day = 1 ; while ( count + day * ( day + 1 ) / 2 < n ) { count += day * ( day + 1 ) / 2 ; day ++ ; } for ( var type = day ; type >= 1 ; type -- ) { count += type  ; if ( count >= n ) return type  ; } return 0 ; }
function max_gcd_in_range ( l , r ) { var ans = 1 ; for ( var z = r ; z >= l ; z -- ) { if ( r / z - ( l - 1 ) / z > 1 ) { ans = z ; break ; } } return ans ; }
function sum_of_digits ( n ) { let sum = 0 ; while ( n != 0 ) { sum += ( n % 10 ) ; n = parseInt ( n / 10 ) ; } return sum ; }
function is_rep_unit_num ( n , b ) { let length = 0 ; let count_one = 0 ; while ( n != 0 ) { let r = n % b ; length ++ ; if ( r == 1 ) count_one ++ ; n = parseInt ( n / b ) ; } return count_one >= 3 && count_one == length ; }
function is_straigh_line_num ( n ) { if ( n <= 99 ) return false ; let s = n . toString ( ) ; let d = s [ 1 ] . charCodeAt ( 0 ) - s [ 0 ] ; for ( let i = 2 ; i < s . length ; i ++ ) { if ( s [ i ] . charCodeAt ( 0 ) != d ) return false ; } return true ; }
function get_count ( d , n ) { let no = parseInt ( n / d , 10 ) ; let result = no ; for ( let p = 2 ; p * p <= no ; p ++ ) { if ( no % p == 0 ) { while ( no % p == 0 ) no = parseInt ( no / p , 10 ) ; } result -= parseInt ( result / p , 10 ) ; } return result ; }
function is_even_parity ( x ) { let parity = 0 ; while ( x != 0 ) { if ( ( x & 1 ) != 0 ) parity += 1 ; x = x >> 1 ; } if ( parity % 2 == 0 ) return true ; else return false ; }
function is_perfect ( n ) { let sum = 1 ; for ( let i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) sum = sum + i + parseInt ( n / i ) ; else sum = sum + i ; } } if ( sum == n && n != 1 ) return n ; return 0 ; }
function log_a_to_base_b ( a , b ) { return 1 + log_a_to_base_b ( a / b , b ) if a > ( b - 1 ) ) return 0 ; }
function using_binary_search ( start , end , n , s ) { if ( start >= end ) return start ; let mid = start + parseInt ( ( end - start ) / 2 , 10 ) ; let total_sum = parseInt ( ( n * ( n + 1 ) ) / 2 , 10 ) ; let mid_sum = parseInt ( ( mid * ( mid + 1 ) ) / 2 , 10 ) ; if ( total_sum - mid_sum <= s ) return using_binary_search ( start , mid , n , s ) ; return using_binary_search ( mid + 1 , end , n , s ) ; }
function min_int ( s ) { let s1 = Array . from ( s ) ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( s1 [ i ] >= "5" ) { s1 [ i ] = String . fromCharCode ( "9" . charCodeAt ( 0 ) - s1 [ i ] . charCodeAt ( 0 ) ) ; } } if ( s1 [ 0 ] == "0" ) s1 [ 0 ] = "9" ; return s1 ; }
function count_triplets ( a , b , c ) { var ans = 0 ; for ( i = 1 ; i <= a ; i ++ ) { for ( j = 1 ; j <= b ; j ++ ) { for ( var k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) ans ++ ; } } } return ans ; }
function topsy_turvy ( s ) { for ( var i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == "2" s [ i ] == "4" s [ i ] == "5" s [ i ] == "6" s [ i ] == "7" s [ i ] == "9" ) return false ; } return true ; }
function sum_of_last_dig ( n , m ) { let sum = 0 ; let k = n / m ; let arr = new Array ( 10 ) ; for ( let i = 0 ; i < 10 ; i ++ ) arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ] ; let rem = k % 10 ; let ans = k / 10 * sum ; for ( let i = 0 ; i < rem ; i ++ ) { ans += arr [ i ]  ; } return ans ; }
function total_pay ( total_items , price_of_one_item , n , m ) { let free_items = 0  let actual = 0  free_items = total_items / ( n + m ) ; actual = total_items - free_items   let amount = actual * price_of_one_item  return amount }
function min_operations ( x , y , p , q ) { if ( y % x != 0 ) return - 1 ; let d = y / x ; let a = 0 ; while ( d % p == 0 ) d = parseInt ( d / p ) ; a ++ ; } let b = 0 ; while ( d % q == 0 ) d = parseInt ( d / q ) ; b ++ ; if ( d != 1 ) return - 1 ; return a + b ; }
function is_mersenne ( n ) { while ( n > 0 ) { let r = n % 2 ; if ( r == 0 ) return false ; n = parseInt ( n / 2 ) ; } return true ; }
function find_third_digit ( n ) { if ( n < 3 ) return 0 ; return 1 if ( n & 1 ) != 0 ? 1 : 6 ; }
function is_odd_length ( num ) { let count = 0 ; while ( num > 0 ) { num = parseInt ( num / 10 , 10 ) ; count ++ ; } if ( count % 2 != 0 ) return true ; return false ; }
function check_is_possible ( l , r , k ) { let count = 0 ; for ( let i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return count > 1 ; }
function bytes ( kilobytes ) { let b = kilobytes * 1024  return b }
function octahedral_num ( n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
function check_equal ( s ) { for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] != "1" && s [ i ] != "0" && s [ i ] != "8" ) return "No" ; } let start = 0 ; let end = s . length - 1 ; while ( start < end ) { if ( s [ start ] != s [ end ] ) return "No" ; start ++ ; end -- ; } return "Yes" ; }
function is_undulating ( n ) { if ( n . length <= 2 ) return false ; for ( let i = 2 ; i < n . length ; i ++ ) if ( n [ i - 2 ] != n [ i ] ) return false ; return true ; }
function first_digit ( n ) { while ( n >= 10 ) n = parseInt ( n / 10 , 10 ) ; return n ; }
function count_digit ( n ) { if ( n == 0 ) return 0 ; return 1 + count_digit ( n / 10 ) ; }
function is_divisible_by_5 ( s ) { n = s . length ; return ( s [ n - 1 ] == "0" s [ n - 1 ] == "5" ) ; }
function inv ( a , m ) { let m0 = m , t , q ; let x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { q = parseInt ( a / m , 10 ) ; t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) x1 = x1 + m0  return x1 ; }
function only_first_and_last_are_set ( n ) { if ( n == 1 ) return true ; if ( n == 2 ) return false ; return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
function divide ( dividend , divisor ) { let sign = - 1 if ( ( dividend < 0 ) ^ ( divisor < 0 ) ) { sign = 1 ; if ( ( dividend < 0 ) != 0 ) { dividend = Math . abs ( dividend ) ; divisor = Math . abs ( divisor ) ; } let quotient = 0 ; let temp = 0 ; for ( let i = 31 ; i >= 0 ; i -- ) { if ( temp + ( divisor << i ) <= dividend ) temp += divisor << i ; quotient |= 1 << i ; } } if ( sign == - 1 ) quotient = - quotient  ; return quotient  ; }
function find_profession ( level , pos ) { if ( level == 1 ) return "e" ; if ( find_profession ( level - 1 , parseInt ( ( pos + 1 ) / 2 ) == "d" ) return "d" if ( pos % 2 ) return "e" ; return "e" if ( pos % 2 ) return "d" ; }
function has_close_elements ( numbers , threshold ) { for ( let i = 0 ; i < numbers . length ; i ++ ) { for ( let j = i + 1 ; j < numbers . length ; j ++ ) { let distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) return true ; } } return false ; }
function truncate_number ( number ) { return number % 1 ; }
function below_zero ( operations ) { let balance = 0 ; for ( let op of operations ) { balance += op ; if ( balance < 0 ) return true ; } return false ; }
function mean_absolute_deviation ( numbers ) { let sum_num = 0 ; for ( let num = 0 ; num < numbers . length ; num ++ ) { sum_num += num ; } let mean = sum_num / numbers . length ; let sum_abs_diff = 0 ; for ( let num = 0 ; num < numbers . length ; num ++ ) { sum_abs_diff += Math . abs ( num - mean ) ; } return sum_abs_diff / numbers . length ; }
function intersperse ( numbers , delimiter ) { let result = [ ] ; if ( ! numbers ) return result ; for ( let i = 0 ; i < numbers . length - 1 ; i ++ ) result . push ( numbers [ i ] ) ; result . push ( delimiter ) ; result . push ( numbers [ - 1 ] ) ; return result ; }
function sum_product ( numbers ) { let sum_value = 0 ; let prod_value = 1 ; for ( let n = 0 ; n < numbers . length ; n ++ ) { sum_value += n ; prod_value *= n ; } return [ sum_value , prod_value ] ; }
function all_prefixes ( str ) { let result = [ ] ; for ( let i = 1 ; i <= str . length ; i ++ ) result . push ( str [ : i ] ) ; return result ; }
function parse_music ( music_string ) { let current = [ ] ; let result = [ ] ; for ( let i = 0 ; i < music_string . length + 1 ; i ++ ) { if ( i == music_string . length || music_string [ i ] == " " ) { if ( "" . join ( current ) == "o" ) result . push ( 4 ) ; if ( "" . join ( current ) == "o|" ) result . push ( 2 ) ; if ( "" . join ( current ) == ".|" ) result . push ( 1 ) ; current . clear ( ) ; } else { current . push ( music_string [ i ] ) ; } } return result ; }
function strlen ( s ) { return s . length ; }
function factorize ( n ) { var factors = [ ] ; for ( i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { factors . push ( i ) ; n = parseInt ( n / i ) ; } else { i ++ ; } } return factors ; }
function concatenate ( strings ) { let result = [ ] ; for ( let s = 0 ; s < strings . length ; s ++ ) result . push ( s ) ; return "" . join ( result ) ; }
function get_positive ( l ) { let result = [ ] ; for ( let i = 0 ; i < l . length ; i ++ ) { if ( l [ i ] > 0 ) result . push ( l [ i ] ) ; } return result ; }
function sort_even ( l ) { let evens = [ ] ; for ( let i = 0 ; i < l . length ; i += 2 ) { evens . push ( l [ i ] ) ; } evens . sort ( ) ; let result = [ ] ; for ( let i = 0 ; i < l . length ; i ++ ) { if ( i % 2 == 0 ) result . push ( evens [ parseInt ( i / 2 ) ] ) ; if ( i % 2 == 1 ) result . push ( l [ i ] ) ; } return result ; }
function decode_cyclic ( s ) { let output = [ ] ; for ( let i = 0 ; i < s . length - 3 ; i ++ ) { let x = s [ i + 2 ] + s [ i : i + 2 ] ; output . push ( x ) ; } return "" . join ( output ) + s [ i : ] ; }
function car_race_collision ( n ) { return n * 2 ; }
function incr_list ( l ) { let result = [ ] ; for ( let i = 0 ; i < l . length ; i ++ ) { result . push ( i + 1 ) ; } return result ; }
function pairs_sum_to_zero ( l ) { for ( let i = 0 ; i < l . length ; i ++ ) { for ( let j = i + 1 ; j < l . length ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) return true ; } } return false ; }
function change_base ( x , b ) { let ret = [ ] ; while ( x > 0 ) { ret . push ( String . fromCharCode ( x % b ) ) ; x = parseInt ( x / b ) ; } return "" . join ( ret ) ; }
function median ( l ) { l . sort ( ) ; if ( l . length % 2 == 1 ) return l [ l . length / 2 ] ; else return l [ l . length / 2 - 1 ] + l [ l . length / 2 ] ; }
function decode_shift ( s ) { let result = [ ] ; for ( let ch = 0 ; ch < s . length ; ch ++ ) { let w = ( ch . charCodeAt ( ) + 21 - "a" . charCodeAt ( ) ) % 26 + "a" . charCodeAt ( ) ; result . push ( String . fromCharCode ( w ) ) ; } return "" . join ( result ) ; }
function below_threshold ( l , t ) { for ( let n = 0 ; n < l . length ; n ++ ) if ( n >= t ) return false ; return true ; }
function correct_bracketing ( brackets ) { let depth = 0 ; for ( let b = 0 ; b < brackets . length ; b ++ ) { if ( b == "<" ) depth ++ ; else depth -- ; } if ( depth < 0 ) return false ; return depth == 0 ; }
function monotonic ( l ) { let incr = 0 , decr = 0 ; for ( let i = 1 ; i < l . length ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) incr = 1 ; if ( l [ i ] < l [ i - 1 ] ) decr = 1 ; } return incr + decr != 2 ; }
function derivative ( xs ) { var result = [ ] ; for ( i = 1 ; i < xs . length ; i ++ ) result . push ( i * xs [ i ] ) ; return result ; }
function vowels_count ( s ) { let vowels = "aeiouAEIOU" ; let count = 0 ; for ( let ch = 0 ; ch < s . length ; ch ++ ) { if ( ch in vowels ) { count ++ ; } } if ( s [ - 1 ] == "y" s [ - 1 ] == "Y" ) count ++ ; } return count ; }
function digit_sum ( s ) { let sum = 0 ; for ( let c = 0 ; c < s . length ; c ++ ) { if ( c . isupper ( ) ) sum += c ; } return sum ; }
function fruit_distribution ( s , n ) { let num1 = [ ] ; let num2 = [ ] ; let flag = false ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] . isdigit ( ) ) { if ( ! flag ) { num1 . push ( s [ i ] ) ; } if ( flag ) { num2 . push ( s [ i ] ) ; } } else if ( ! flag && num1 . length > 0 ) flag = true ; } return n - parseInt ( "" . join ( num1 ) ) - parseInt ( "" . join ( num2 ) ) ; }
function pluck ( arr ) { let result = [ ] ; for ( let i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( ! result ) result . push ( arr [ i ] ) ; result . push ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } return result ; }
function strange_sort_list ( lst ) { let res = [ ] ; lst . sort ( ) ; let l = 0 , r = lst . length - 1 ; while ( l < r ) { res . push ( lst [ l ] ) ; l ++ ; res . push ( lst [ r ] ) ; r -- ; } if ( l == r ) res . push ( lst [ l ] ) ; return res ; }
function triangle_area ( a , b , c ) { if ( a + b <= c a + c <= b b + c <= a ) return - 1.0 ; let s = Math . floor ( ( a + b + c ) / 2 ) ; let area = Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; return area ; }
function will_it_fly ( q , w ) { let sum = 0 ; for ( let i = 0 ; i < q . length ; i ++ ) { if ( q [ i ] != q [ - i - 1 ] ) return false ; sum += q [ i ] ; } return sum <= w ; }
function is_cube ( a ) { a = Math . abs ( a ) ; let i = round ( a * ( 1.0 / 3 ) ) ; return i * 3 == a ; }
function hex_key ( num ) { let key = "2357BD" ; let total = 0 ; for ( let c = 0 ; c < num ; c ++ ) { if ( c == key ) total ++ ; } return total ; }
function decimal_to_binary ( dec ) { var ans = [ ] ; if ( dec != 0 ) { ans . push ( String . fromCharCode ( dec % 2 ) ) ; dec = parseInt ( dec / 2 ) ; } else { ans += "0" ; } return "db" + ans . join ( "db" ) + "db" ; }
function prime_length ( s ) { let l = s . length ; if ( l < 2 ) return false ; for ( let i = 2 ; i < l ; i ++ ) if ( l % i == 0 ) return false ; return true ; }
function starts_one_ends ( n ) { if ( n < 1 ) return 0 ; if ( n == 1 ) return 1 ; return 18 * ( 10 * ( n - 2 ) ) ; }
function add ( lst ) { let sum = 0 ; for ( let i = 1 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) sum += lst [ i ] ; } return sum ; }
function get_row ( lst , x ) { var coords = [ ] ; for ( var i = 0 ; i < lst . length ; i ++ ) { for ( var j = lst [ i ] . length - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] [ j ] == x ) coords . push ( [ i , j ] ) ; } } return coords ; }
function next_smallest ( lst ) { lst . sort ( ) ; for ( let i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) return lst [ i ] ; } return - 1 ; }
function any_int ( a , b , c ) { if ( round ( a ) != a b round ( c ) != c ) return false ; return a + b == c || a + c == b || b + c == a  ; }
function count_up_to ( n ) { let primes = [ ] ; for ( let i = 2 ; i < n ; i ++ ) { let is_prime = true ; for ( let j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) primes . push ( i ) ; } return primes ; }
function closest_integer ( value ) { let w = parseFloat ( value )  return round ( w ) }
function make_a_pile ( n ) { let result = [ ] ; for ( let i = 0 ; i < n ; i ++ ) result . push ( n + 2 * i ) ; return result ; }
function words_string ( s ) { let current = [ ] ; let words = [ ] ; for ( let i = 0 ; i < s . length + 1 ; i ++ ) { if ( i == s . length s [ i ] == " " s [ i ] == "," ) { if ( current . length > 0 ) words . push ( "" . join ( current ) ) ; current . clear ( ) ; } } return words ; }
function rounded_avg ( n , m ) { if ( n > m ) return - 1 ; let num = parseInt ( ( n + m ) / 2 , 10 ) ; let ret = [ ] ; while ( num > 0 ) { ret . push ( String . fromCharCode ( num % 2 ) ) ; num = parseInt ( num / 2 , 10 ) ; } return "" . join ( ret ) ; }
function unique_digits ( x ) { let digits = [ ] ; for ( let n = 0 ; n < x . length ; n ++ ) { let is_unique = true ; for ( let c = n [ 0 ] ; c < "0" . charCodeAt ( 0 ) ; c ++ ) { if ( c % 2 == 0 ) { is_unique = false ; break ; } } if ( is_unique ) { digits . push ( n ) ; } } return digits ; }
function count_nums ( arr ) { let num = 0 ; for ( let n = 0 ; n < arr . length ; n ++ ) { let neg = - 1 if ( n < 0 ) ? 1 : 0 ; n = Math . abs ( n ) ; let digits = [ ] ; for ( let c = n ; c < "0" . charCodeAt ( 0 ) ; c ++ ) { digits . push ( c . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ) ; } digits [ 0 ] *= neg ; let sum = 0 ; for ( let d = 0 ; d < digits . length ; d ++ ) { sum += digits [ d ] ; } if ( sum > 0 ) num ++ ; } return num ; }
function move_one_ball ( arr ) { if ( ! arr ) return true ; let num = 0 ; for ( let i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) num ++ ; } if ( arr [ - 1 ] > arr [ 0 ] ) num ++ ; if ( num < 2 ) return true ; return false ; }
function exchange ( lst1 , lst2 ) { let odd = 0 , even = 0 ; for ( let n = 0 ; n < lst1 . length ; n ++ ) { if ( n % 2 == 1 ) odd ++ ; } for ( let n = lst2 [ n ] ; n < lst2 . length ; n ++ ) { if ( n % 2 == 0 ) even ++ ; } if ( even >= odd ) return "YES" ; return "NO" ; }
function odd_count ( lst ) { let results = [ ] ; let original_str = "the original string i of the input." ; for ( let s = [ ] ; s < lst . length ; s ++ ) { let sum = 0 ; for ( let d = 0 ; d < s . length ; d ++ ) { if ( d . isdigit ( ) && d % 2 == 1 ) sum ++ ; } let result = [ ] ; for ( let c = original_str [ c ] ; c != "i" ; c ++ ) result . push ( str ( sum ) ) ; results . push ( "" . join ( result ) ) ; } return results ; }
function minSubArraySum ( nums ) { let min_sum = Number . MAX_SAFE_INTEGER ; let sum = 0 ; for ( let num = 0 ; num < nums . length ; num ++ ) { sum += num ; if ( min_sum > sum ) min_sum = sum ; if ( sum > 0 ) sum = 0 ; } return min_sum ; }
function max_fill ( grid , capacity ) { let res = 0 ; for ( let well = grid ; well < capacity ; well ++ ) { let sum = 0 ; for ( let n = 0 ; n < well . length ; n ++ ) { sum += n ; } if ( sum > 0 ) res += parseInt ( ( sum - 1 ) / capacity + 1 ) ; } return res ; }
function select_words ( s , n ) { let vowels = "aeiouAEIOU" ; let current = [ ] ; let result = [ ] ; let consonant_num = 0 ; for ( let i = 0 ; i <= s . length ; i ++ ) { if ( i == s . length s [ i ] == " " ) { if ( consonant_num == n ) { result . push ( "" . join ( current ) ) ; } current . clear ( ) ; consonant_num = 0 ; } else { current . push ( s [ i ] ) ; if ( s [ i ] not in vowels ) consonant_num ++ ; } } return result ; }
function solution ( lst ) { let sum = 0 ; for ( let i = 0 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 1 ) sum += lst [ i ] ; } return sum ; }
function add_elements ( arr , k ) { let sum = 0 ; for ( let i = 0 ; i < k ; i ++ ) { if ( - 99 <= arr [ i ] <= 99 ) sum += arr [ i ] ; } return sum ; }
function get_odd_collatz ( n ) { let odd_collatz = [ ] ; while ( n > 1 ) { if ( n % 2 == 1 ) { odd_collatz . push ( n ) ; n = n * 3 + 1 ; } else { n = parseInt ( n / 2 ) ; } } odd_collatz . push ( 1 ) ; odd_collatz . sort ( ) ; return odd_collatz ; }
function is_sorted ( lst ) { for ( let i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) return false ; if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) return false ; } return true ; }
function intersection ( interval1 , interval2 ) { let inter1 = Math . max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; let inter2 = Math . min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; let l = inter2 - inter1 ; if ( l < 2 ) return "NO" ; for ( let i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) return "NO" ; } } return "YES" ; }
function prod_signs ( arr ) { if ( ! arr ) return - 32768 ; let sum = 0 ; let prods = 1 ; for ( let i = 0 ; i < arr . length ; i ++ ) { sum += Math . abs ( i ) ; if ( i == 0 ) prods = 0 ; if ( i < 0 ) prods = - prods  ; } return sum * prods  ; }
function minPath ( grid , k ) { let n = grid . length ; let min_num = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { let tmp = [ ] ; if ( i != 0 ) tmp . push ( grid [ i - 1 ] [ j ] ) ; if ( j != 0 ) tmp . push ( grid [ i ] [ j - 1 ] ) ; if ( i != n - 1 ) tmp . push ( grid [ i + 1 ] [ j ] ) ; if ( j != n - 1 ) tmp . push ( grid [ i ] [ j + 1 ] ) ; min_num = Math . min ( tmp ) ; } } let ans = [ ] ; for ( let i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) ans . push ( 1 ) ; else ans . push ( min_num ) ; } } return ans ; }
function digits ( n ) { let prod = 1 ; for ( let digit = 0 ; digit < n . length ; digit ++ ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) prod = 1 ; } prod *= parseInt ( digit / 2 ) ; } return prod ; }
function is_nested ( s ) { var count = 0 , max_count = 0 ; for ( var ch = 0 ; ch < s . length ; ch ++ ) { if ( ch == "[" ) { count ++ ; } if ( ch == "]" ) { count -- ; } if ( count < 0 ) count = 0 ; if ( count > max_count ) max_count = count ; if ( count <= max_count - 2 ) return true ; } return false ; }
function sum_squares ( lst ) { let sum = 0 ; for ( let i = 0 ; i < lst . length ; i ++ ) sum += Math . ceil ( i ) * Math . ceil ( i ) ; return sum ; }
function can_arrange ( arr ) { let index = - 1 ; for ( let i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
function largest_smallest_integers ( lst ) { var max_neg = 0 , min_pos = 0 ; for ( var n = 0 ; n < lst . length ; n ++ ) { if ( n < 0 && ( max_neg == 0 n > max_neg ) max_neg = n  ; if ( n > 0 && ( min_pos == 0 n < min_pos ) min_pos = n  } return [ max_neg , min_pos ] ; }
function fix_spaces ( text ) { var res = [ ] ; var space_len = 0 ; for ( var i = 0 ; i <= text . length ; i ++ ) { if ( i == text . length text [ i ] != " " ) { if ( space_len == 1 ) { res . push ( '_' ) ; } if ( space_len == 2 ) { res . push ( '__' ) ; } if ( space_len > 2 ) { res . push ( '-' ) ; } space_len = 0 ; if ( i != text . length ) res . push ( text [ i ] ) ; } else { space_len ++ ; } } return "" . join ( res ) ; }
function file_name_check ( file_name ) { let digit_num = 0 , dot_num = 0 ; if ( file_name . length < 5 ) return "No" ; let suffix = file_name [ - 4 ] ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) return "No" ; for ( let c = 0 ; c < file_name . length ; c ++ ) { if ( c . isdigit ( ) ) digit_num ++ ; if ( c == "." ) dot_num ++ ; } if ( digit_num > 3 dot_num != 1 ) return "No" ; return "Yes" ; }
function sum_squares ( lst ) { let sum = 0 ; for ( let i = 0 ; i < lst . length ; i ++ ) { if ( i % 3 == 0 ) sum += lst [ i ] * lst [ i ] ; else sum += lst [ i ] * lst [ i ] * lst [ i ] ; } return sum ; }
function words_in_sentence ( sentence ) { var result = [ ] ; var current = [ ] ; for ( var i = 0 ; i < sentence . length + 1 ; i ++ ) { var is_prime = true ; var l = current . length ; if ( l < 2 ) is_prime = false ; for ( var j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) is_prime = false ; break ; } } if ( is_prime ) { result . push ( "" . join ( current ) + "▁" ) ; } current . clear ( ) ; } return result ; }
function simplify ( x , n ) { let a = 0 , b = 0 , c = 0 , d = 0 ; for ( let i = 0 ; i < x . length ; i ++ ) { if ( x [ i ] == "/" ) { a = parseInt ( x [ : i ] ) ; b = parseInt ( x [ i + 1 : ] ) ; } } for ( let i = 0 ; i < n . length ; i ++ ) { if ( n [ i ] == "/" ) { c = parseInt ( n [ : i ] ) ; d = parseInt ( n [ i + 1 : ] ) ; } } return ( a * c ) % ( b * d ) == 0 ; }
function specialFilter ( nums ) { let count = 0 ; for ( let num = 0 ; num < nums . length ; num ++ ) { let w = num . toString ( ) ; if ( w . charCodeAt ( 0 ) % 2 == 1 && w . charCodeAt ( - 1 ) % 2 == 1 ) { count ++ ; } } } return count ; }
function get_max_triples ( n ) { let arr = [ ] ; for ( let i = 1 ; i <= n ; i ++ ) arr [ i ] = i * i - i + 1 ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i + 1 ; j <= n ; j ++ ) { for ( let k = j + 1 ; k <= n ; k ++ ) { if ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) { count ++ ; } } } return count ; }
function double_the_difference ( lst ) { let sum = 0 ; for ( let d = 0 ; d < lst . length ; d ++ ) { let num = parseInt ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) sum += num * num ; } } return sum ; }
function compare ( game , guess ) { let result = [ ] ; for ( let i = 0 ; i < game . length ; i ++ ) { result . push ( Math . abs ( game [ i ] - guess [ i ] ) ) ; } return result ; }
function strongest_extension ( class_name , extensions ) { let strongest = "" ; let max = Number . MAX_SAFE_INTEGER ; for ( let extension = 0 ; extension < extensions . length ; extension ++ ) { let strength = 0 ; for ( let chr = 0 ; chr < extension . length ; chr ++ ) { if ( chr . isupper ( ) ) strength ++ ; if ( chr . islower ( ) ) strength -- ; } if ( strength > max ) max = strength ; strongest = extension ; } return class_name + "." + strongest ; }
function int_to_mini_roman ( number ) { let num = [ 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 10 , 9 , 5 , 4 , 1 ] ; let sym = [ "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" ] ; let pos = 0 ; let res = [ ] ; while ( number > 0 ) { res . push ( sym [ pos ] ) ; number -= num [ pos ] ; } if ( number > 0 ) pos ++ ; } return res ; }
function eat ( number , need , remaining ) { return [ number + remaining , 0 ] if ( need > remaining ) return [ number + need , remaining - need ] ; }
function do_algebra ( ops , operands ) { let nums = [ ] ; let current_ops = [ ] ; for ( let i = current_ops . length - 1 ; i >= 0 ; i -- ) { if ( current_ops [ i ] == "**" ) { nums [ i ] = Math . pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . pop ( i + 1 ) ; current_ops . pop ( i ) ; } i = 0 ; while ( i < current_ops . length ) { if ( current_ops [ i ] == "*" ) { nums [ i ] *= nums [ i + 1 ]  ; nums . pop ( i + 1 ) ; current_ops . pop ( i ) ; } else if ( current_ops [ i ] == "//" ) { nums [ i ] = Math . floor ( nums [ i ] / nums [ i + 1 ] ) ; nums . pop ( i + 1 ) ; current_ops . pop ( i ) ; } else { i ++ ; } } for ( let i = 0 ; i < current_ops . length ; i ++ ) { if ( current_ops [ i ] == "+" ) { nums [ i ] += nums [ i + 1 ] ; nums . pop ( i ) ; current_ops . pop ( i ) ; } else { i ++ ; } } return nums [ 0 ] ; }
function generate_integers ( a , b ) { let lower = Math . max ( 2 , Math . min ( a , b ) ) ; let upper = Math . min ( 8 , max ( a , b ) ) ; let result = [ ] ; for ( let i = lower ; i <= upper ; i ++ ) result . push ( i ) ; return result ; }
function isStepNum ( n ) { let prev_digit = - 1 ; while ( n > 0 ) { let cur_digit = n % 10 ; if ( prev_digit == - 1 ) prev_digit = cur_digit  ; else if ( Math . abs ( prev_digit - cur_digit ) != 1 ) return false ; prev_digit = cur_digit  ; n = parseInt ( n / 10 ) ; } return true ; }
function num_of_ways ( n , k ) { let p = 1 ; if ( k % 2 ) { p = - 1 ; } return ( ( n - 1 ) * k + p * ( n - 1 ) ) / n ; }
function find_divisors ( n ) { let v = [ ] ; for ( let i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) v . push ( i ) ; else { v . push ( i ) ; v . push ( parseInt ( n / i ) ) ; } } return v ; }
function egg_drop ( n , k ) { if ( k == 1 k == 0 ) return k ; if ( n == 1 ) return k ; let min = Number . MAX_SAFE_INTEGER ; for ( let x = 1 ; x <= k ; x ++ ) { let res = Math . max ( egg_drop ( n - 1 , x - 1 ) , egg_drop ( n , k - x ) ) ; if ( res < min ) min = res ; } return min + 1 ; }
function is_power_of_two ( n ) { return Math . ceil ( Math . log2 ( n ) ) == Math . floor ( Math . log2 ( n ) ) ; }
function shortest_palindrome ( s ) { let n = s . length ; let v = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { let l = i , r = i ; let ans1 = "" , ans2 = "" ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans1 += s [ l ]  l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans2 += s [ l ]  l -- ; r ++ ; } v . push ( ans1 ) ; v . push ( ans2 ) ; } let ans = v [ 0 ]  for ( let i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] != "" ) ans = Math . min ( ans , v [ i ] ) ; } return ans ; }
function minimum_adjacent_difference ( a , n , k ) { let min_diff = Number . MAX_SAFE_INTEGER ; for ( let i = 0 ; i < k + 1 ; i ++ ) { let max_diff = Number . MAX_SAFE_INTEGER ; for ( let j = n - k - 1 ; j >= 0 ; j -- ) { for ( let p = i ; p <= i ; p ++ ) { max_diff = Math . max ( max_diff , a [ p + 1 ] - a [ p ] ) ; } } min_diff = Math . min ( min_diff , max_diff ) ; } return min_diff ; }
function cal ( a , mid ) { let chocolate = 0 ; for ( let i = 0 ; i < a . length ; i ++ ) { if ( i >= mid ) chocolate += i - mid ; } return chocolate ; }
function check ( v , a , m ) { let tec = 0 , ans = 0 ; let b = new Array ( a . length + 3 ) ; for ( let i = 0 ; i < a . length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { let mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov  ; } } return ans <= m ; }
function largest_num ( arr ) { let res = 0 ; arr . sort ( ) ; let l = 0 , r = arr . length - 1 ; while ( l < r ) { let sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) l ++ ; else r -- ; } return res ; }
function binary_search ( p , n ) { let i = 0 , j = p . length - 1 ; let index = - 1 ; while ( i <= j ) { let mid = i + parseInt ( ( j - i ) / 2 , 10 ) ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
function find_min_length ( arr ) { let index = arr . length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; }
function min_digits ( n , k ) { let digits_num = Math . floor ( Math . log10 ( n ) + 1 ) ; let temp_sum = 0 ; let temp = digits_num ; let result = 0 ; let x = 0 , v = 0 ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 = parseInt ( num2 / 10 , 10 ) ; } if ( sum <= k ) { x = 0 ; } else { for ( let v = n / ( 10 ** ( temp - 1 ) ; v >= 0 ; v ++ ) { temp_sum += v % 10 ; if ( temp_sum >= k ) { v = parseInt ( v / 10 , 10 ) ; v ++ ; result = v * ( 10 ** temp ) ; break ; } temp -- ; } x = result - n  return x ; } return - 1 ; }
function check_for_perfect_square ( arr , i , j ) { let mid = 0 , sum = 0 ; for ( let m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } let low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + parseInt ( ( high - low ) / 2 , 10 ) ; if ( mid * mid == sum ) return mid ; else high = mid - 1 ; } else low = mid + 1 ; } return - 1 ; }
function min_flips ( mat , s ) { let n = mat . length ; let m = mat [ 0 ] . length ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s [ i + j ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ) { count ++ ; } } } return count ; }
function construct_tree ( n , edges ) { let adjl = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { adjl [ i ] = [ ] ; } for ( let e = 0 ; e < edges . length ; e ++ ) { let u = e [ 0 ] , v = e [ 1 ] ; adjl [ u ] . push ( v ) ; adjl [ v ] . push ( u ) ; } return adjl ; }
function find_sum_of_values ( v , parent , values_children ) { let cur_node = v ; let Sum = 0 ; while ( cur_node != - 1 ) { Sum += values_children [ cur_node ] ; cur_node = parent [ cur_node ] ; } return Sum ; }
function get_distinct ( d , count ) { let num = 0 ; count = Math . pow ( count - 1 ) ; while ( count > 0 ) { num += count * d ; count = parseInt ( count / 10 ) ; } return num ; }
function is_increasing ( arr ) { for ( var i = 0 ; i < arr . length - 1 ; i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) return false ; return true ; }
function min_adj_swaps ( mat ) { let n = mat . length ; let cnt_zero = new Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = n - 1 ; j >= 0 ; j -- ) { if ( mat [ i ] [ j ] != 0 ) break ; } cnt_zero [ i ] ++ ; } let cnt_swaps = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( cnt_zero [ i ] < ( n - i - 1 ) ) { let first = i ; while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) return - 1 ; } while ( first > i ) { let t = cnt_zero [ first ] ; cnt_zero [ first ] = cnt_zero [ first - 1 ] ; cnt_zero [ first - 1 ] = t ; cnt_swaps ++ ; } } return cnt_swaps ; }
function solve ( values , salary , mod ) { let ret = 1 ; let amt = 0 ; values . sort ( ) ; salary . sort ( ) ; while ( salary . length > 0 ) { while ( values . length > 0 ) { amt ++ ; values . push ( ) ; } if ( amt == 0 ) return 0 ; ret *= amt ; amt -- ; ret %= mod ; salary . pop ( ) ; } return ret ; }
function organize_in_order ( vec , op , n ) { let result = new Array ( n ) ; vec . sort ( ) ; let i = 0 , j = 0 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == "<" ) result [ k ] = vec [ i ]  ; i ++ ; } else result [ k ] = vec [ j ]  ; j -- ; } k ++ ; } result [ n - 1 ] = vec [ i ]  ; return result ; }
function count_points ( n , m , a , b , x , y ) { a . sort ( ( a , b ) => a - b ) ; b . sort ( ( a , b ) => a - b ) ; let j = 0 ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) break ; if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } return count ; }
function are_same ( a , b ) { a . sort ( ( a , b ) => a - b ) ; b . sort ( ( a , b ) => a - b ) ; return a == b ; }
function count_number_of_strings ( s ) { let n = s . length - 1 ; let count = 2 * n  return count }
function prime_power ( x ) { var prime_pow = [ ] ; for ( var i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { var p = 1 ; while ( x % i == 0 ) { x = parseInt ( x / i ) ; p *= i ; } prime_pow . push ( p ) ; } } if ( x > 1 ) prime_pow . push ( x ) ; return prime_pow ; }
function is_perfect ( n0 ) { let n = Math . sqrt ( n0 ) ; if ( Math . floor ( n ) != Math . ceil ( n ) ) return 0 ; return 1 ; }
function find_sum ( l , r ) { let arr = [ ] ; for ( let i = 0 , x = 2 ; i <= r ; i ++ ) { arr . push ( i + x ) ; if ( i + 1 <= r ) { arr . push ( i + 1 + x ) ; } x *= - 1 ; i ++ ; } let sum = 0 ; for ( let i = l ; i <= r ; i ++ ) { sum += arr [ i ] ; } return sum ; }
function results ( n , k ) { return round ( n * ( 1.0 / 2 ) ) ; }
function factors ( n ) { let v = [ ] ; v . push ( 1 ) ; for ( let i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . push ( i ) ; if ( parseInt ( n / i ) != i ) v . push ( parseInt ( n / i ) ) ; } } return v ; }
function smallest_num ( n ) { let x = Number . MAX_VALUE * ( ( n - 1 ) / 2 ) ; return Math . ceil ( x ) ; }
function smallest ( s ) { let a = new Array ( s ) ; for ( let i = 0 ; i < s . length ; i ++ ) { a [ i ] = s [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ; } let b = [ ] ; for ( let i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] % 2 != 0 ) b . push ( a [ i ] ) ; } b . sort ( ) ; if ( b . length > 1 ) return b [ 0 ] * 10 + b [ 1 ] ; return - 1 ; }
function diagonals ( a , b , c , d ) { var ans = [ ] ; ans . push ( Math . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ; ans . push ( Math . sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; }
function find_number_of_digits ( n , base ) { let dig = Math . floor ( Math . log ( n ) / Math . log ( base ) ) + 1 ; return dig ; }
function n_gon ( n ) { let pro_angle_var = 0 ; if ( n % 4 == 0 ) { pro_angle_var = Math . pi * ( 180.0 / n ) / 180 ; } else { pro_angle_var = Math . pi * ( 180.0 / ( 2 * n ) ) / 180 ; } let neg_x = 1.0e+99 , pos_x = - 1.0e+99 , neg_y = 1.0e+99 , pos_y = - 1.0e+99 ; for ( let j = 0 ; j < n ; j ++ ) {  let px = Math . cos ( 2 * Math . pi * j / n + pro_angle_var ) ; let py = Math . sin ( 2 * Math . pi * j / n + pro_angle_var ) ; neg_x = Math . min ( neg_x , px ) ; pos_x = Math . max ( pos_x , px ) ; neg_y = Math . min ( neg_y , py ) ; pos_y = Math . max ( pos_y , py ) ; } let opt2 = Math . max ( pos_x - neg_x , pos_y - neg_y ) ; return opt2 / Math . sin ( Math . PI / n ) / 2 ; }
function find_max_k ( n ) { let p = Math . floor ( Math . log2 ( n ) ) ; return 2 * p ; }
function nth_fibo ( n ) { let a = ( 5 , 0.5 + 1 ) / 2 , b = ( - 5 , 0.5 + 1 ) / 2 , r = 5 ; let ans = ( a * n - b * n ) / r ; return parseInt ( ans ) ; }
function find_prob ( l , r ) { var count_of_ps = Math . floor ( Math . sqrt ( r ) ) - Math . ceil ( Math . sqrt ( l ) ) + 1  var total = r - l + 1  var prob = count_of_ps / total  return prob }
function previous_fibonacci ( n ) { let a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return round ( a ) ; }
function dist_prime ( arr , all_primes ) { let list1 = [ ] ; for ( let i = 0 ; i < all_primes ; i ++ ) { for ( let j = 0 ; j < arr . length ; j ++ ) { if ( j % i == 0 ) { list1 . push ( i ) ; break ; } } } return list1 ; }
function get_array ( n ) { var ans = [ ] ; var p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) ans . push ( p2 ) ; n >>= 1 ; p2 *= 2 ; } return ans ; }
function maximum_length ( a ) { let counts = Array ( 11 ) . fill ( 0 ) ; let ans = 0 ; for ( let index = 0 ; index < a . length ; index ++ ) { counts [ a [ index ] ] += 1 ; } let k = [ ] ; for ( let i = 0 ; i < counts . length ; i ++ ) { if ( i != 0 ) k . push ( i ) ; } k . sort ( ) ; if ( k . length == 1 ) ans = index ; } return ans + 1 ; }
function max_edges ( n ) { var edges = Math . floor ( n * n / 4 ) ; return edges ; }
function find_k ( n , k ) { let a = [ ] ; for ( let i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) a . push ( i ) ; } for ( let i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) a . push ( i ) ; } return a [ k - 1 ] ; }
function is_keith ( x , temp ) { var terms = [ ] ; var n = 0 ; while ( temp > 0 ) { terms . push ( temp % 10 ) ; temp = Math . floor ( temp / 10 ) ; n ++ ; } terms . reverse ( ) ; var next_term = 0 ; for ( var i = 0 ; i < n ; i ++ ) { next_term = 0 ; for ( j = 1 ; j <= n ; j ++ ) next_term += terms [ i - j ] ; terms . push ( next_term ) ; i ++ ; } return next_term == x ; }
function factors ( n , k ) { var v = [ ] ; while ( n % 2 == 0 ) { v . push ( 2 ) ; n = Math . floor ( n / 2 ) ; } if ( v . length >= k ) return true ; for ( var i = 3 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { n = Math . floor ( n / i ) ; v . push ( i ) ; } if ( v . length >= k ) return true ; } if ( n > 2 ) { v . push ( n ) ; } if ( v . length >= k ) return true ; return false ; }
function separate_paren_groups ( paren_string ) { let all_parens = [ ] ; let current_paren = [ ] ; let current_depth = 0 ; for ( let c = 0 ; c < paren_string . length ; c ++ ) { if ( c == "(" ) { current_depth ++ ; current_paren . push ( c ) ; } else if ( c == ")" ) { current_depth -- ; current_paren . push ( c ) ; } else if ( c == 0 ) all_parens . push ( "" . join ( current_paren ) ) ; current_paren . clear ( ) ; } } return all_parens ; }
function parse_nested_parens ( paren_string ) { let all_levels = [ ] ; let level = 0 ; let max_level = 0 ; for ( let i = 0 ; i < paren_string . length ; i ++ ) { let chr = paren_string [ i ] ; if ( chr == "(" ) { level ++ ; if ( level > max_level ) max_level = level ; } } if ( chr == ")" ) { level -- ; if ( level == 0 ) all_levels . push ( max_level ) ; max_level = 0 ; } } return all_levels ; }
function filter_by_substring ( strings , substring ) { let result = [ ] ; for ( let s = 0 ; s < strings . length ; s ++ ) { if ( substring in s ) result . push ( s ) ; } return result ; }
function rolling_max ( numbers ) { let running_max = 0 ; let result = [ ] ; for ( let n = 0 ; n < numbers . length ; n ++ ) { if ( n > running_max ) running_max = n ; result . push ( running_max ) ; } return result ; }
function make_palindrome ( s ) { if ( ! s ) return "" ; for ( let i = 0 ; i < s . length ; i ++ ) { let r_str = s [ i ] ; if ( r_str == r_str [ : : - 1 ] ) { let n_str = s [ 0 ] ; let n2_str = n_str [ : : - 1 ] ; return s + n2_str  ; } } return s [ : - 2 ] + s [ : : - 1 ]  ; }
function string_xor ( a , b ) { let result = [ ] ; for ( let i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] == b [ i ] ) result . push ( "0" ) ; else result . push ( "1" ) ; } return "" . join ( result ) ; }
function longest ( strings ) { if ( ! strings ) return "" ; let max_len = Math . max ( ... strings ) ; for ( let s = "" ; s < strings . length ; s ++ ) if ( s . length == max_len ) return s ; return "" ; }
function string_sequence ( n ) { let s = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { s . push ( str ( i ) ) ; s . push ( "▁" ) ; } s . push ( str ( n ) ) ; return "" . join ( s ) ; }
function count_distinct_characters ( s ) { let distinct = new Set ( ) ; for ( let c = 0 ; c < s . length ; c ++ ) { distinct . add ( c ) ; } return distinct . size ; }
function how_many_times ( s , sub ) { let times = 0 ; for ( let i = 0 ; i < s . length - sub . length + 1 ; i ++ ) { if ( s [ i ] == sub ) times ++ ; } return times ; }
function sort_numbers ( numbers ) { let to_num = { "zero" : 0 , "one" : 1 , "two" : 2 , "three" : 3 , "four" : 4 , "five" : 5 , "six" : 6 , "seven" : 7 , "eight" : 8 , "nine" : 9 }  let from_num = { 0 : "zero" , 1 : "one" , 2 : "two" , 3 : "three" , 4 : "four" , 5 : "five" , 6 : "six" , 7 : "seven" , 8 : "eight" }  let ints = [ ] ; let current = [ ] ; for ( let i = 0 ; i < numbers . length ; i ++ ) { if ( i == numbers . length ) { ints . push ( to_num [ "" . join ( current ) ] ) ; current . clear ( ) ; } } else { current . push ( numbers [ i ] ) ; } } for ( let i = 0 ; i < ints . length ; i ++ ) { result . push ( from_num [ ints [ i ] ] ) ; if ( i != ints . length - 1 ) result . push ( "▁" ) ; } return result ; }
function find_closest_elements ( numbers ) { let closest_pair = new Array ( numbers ) ; let distance = Math . abs ( closest_pair [ 0 ] - closest_pair [ 1 ] ) ; for ( let i = 0 ; i < numbers . length ; i ++ ) { for ( let j = i + 1 ; j < numbers . length ; j ++ ) { if ( Math . abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closest_pair [ 0 ] = numbers [ i ] ; closest_pair [ 1 ] = numbers [ j ] ; distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; } } closest_pair . sort ( ) ; return closest_pair ; }
function rescale_to_unit ( numbers ) { let min_num = min ( numbers ) , max_num = max ( numbers ) ; let result = [ ] ; for ( let n = 0 ; n < numbers . length ; n ++ ) { result . push ( ( n - min_num ) / ( max_num - min_num ) ) ; } return result ; }
function filter_integers ( values ) { let result = [ ] ; for ( let e = 0 ; e < values . length ; e ++ ) { if ( isinstance ( e , int ) ) result . push ( e ) ; } return result ; }
function remove_duplicates ( numbers ) { let counter = new Map ( ) ; for ( let i = 0 ; i < numbers . length ; i ++ ) { counter . set ( i , 1 ) ; } let result = [ ] ; for ( let i = 0 ; i < numbers . length ; i ++ ) { if ( counter . get ( i ) == 1 ) result . push ( i ) ; } return result ; }
function flip_case ( s ) { let result = [ ] ; for ( let c = 0 ; c < s . length ; c ++ ) { if ( c . islower ( ) ) result . push ( c . toUpperCase ( ) ) ; else result . push ( c . toLowerCase ( ) ) ; } return "" . join ( result ) ; }
function filter_by_prefix ( strings , prefix ) { let result = [ ] ; for ( let i = 0 ; i < strings . length ; i ++ ) { if ( strings [ i ] . startsWith ( prefix ) ) result . push ( strings [ i ] ) ; } return result ; }
function find_zero ( xs ) { var ans = 0 ; var value = 0 ; for ( var i = 0 ; i < xs . length ; i ++ ) value += xs [ i ] * ans ** i ; while ( Math . abs ( value ) > 1e-6 ) { var driv = 0 ; for ( i = 1 ; i < xs . length ; i ++ ) { driv += xs [ i ] * ans ** ( i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( var i = 0 ; i < xs . length ; i ++ ) value += xs [ i ] * ans ** i ] ; } return ans ; }
function sort_third ( l ) { let thirds = [ ] ; for ( let i = 0 ; i < l . length ; i += 3 ) { thirds . push ( l [ i ] ) ; } thirds . sort ( ) ; let result = [ ] ; for ( let i = 0 ; i < l . length ; i ++ ) { if ( i % 3 == 0 ) result . push ( thirds [ parseInt ( i / 3 ) ) ; else result . push ( l [ i ] ) ; } return result ; }
function unique ( l ) { let result = new Set ( l ) ; result . add ( 0 ) ; return result ; }
function max_element ( l ) { return Math . max ( ... l ) ; }
function triples_sum_to_zero ( l ) { for ( let i = 0 ; i < l . length ; i ++ ) { for ( let j = i + 1 ; j < l . length ; j ++ ) { for ( let k = j + 1 ; k < l . length ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) return true ; } } return false ; }
function fib4 ( n ) { var results = [ 0 , 0 , 2 , 0 ] ; for ( var i = 4 ; i <= n ; i ++ ) results . push ( results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ) ; return results [ n ]  ; }
function is_palindrome ( text ) { let pr = text [ : : - 1 ] ; return pr == text ; }
function remove_vowels ( text ) { let result = [ ]  let vowels = "aeiou" ; for ( let ch = 0 ; ch < text . length ; ch ++ ) { if ( ch . toLowerCase ( ) not in vowels ) result . push ( ch ) ; } return "" . join ( result ) ; }
function same_chars ( s0 , s1 ) { let set0 = new Set ( ) ; for ( let c = 0 ; c < s0 . length ; c ++ ) { set0 . add ( c ) ; } let set1 = new Set ( ) ; for ( let c = 0 ; c < s1 . length ; c ++ ) { set1 . add ( c ) ; } return set0 == set1 ; }
function common ( l1 , l2 ) { let us = new Set ( ) ; for ( let e1 = 0 ; e1 < l1 . length ; e1 ++ ) { for ( let e2 = 0 ; e2 < l2 . length ; e2 ++ ) { if ( e1 == e2 ) us . add ( e1 ) ; } } let ret = new Array ( us ) ; ret . sort ( ) ; return ret ; }
function correct_bracketing ( brackets ) { let depth = 0 ; for ( let b = 0 ; b < brackets . length ; b ++ ) { if ( b == "(" ) depth ++ ; else depth -- ; } if ( depth < 0 ) return false ; return depth == 0 ; }
function circular_shift ( x , shift ) { let s = x . toString ( ) ; if ( shift > s . length ) return s [ : : - 1 ] ; return s [ - shift : ] + s [ : - shift ] ; }
function search ( lst ) { let counter = new Map ( ) ; for ( let i = 0 ; i < lst . length ; i ++ ) { counter . set ( i , 1 ) ; } let ans = - 1 ; for ( let key = 0 ; key < counter . size ; key ++ ) { if ( value >= key > ans ) ans = key ; } return ans ; }
function smallest_change ( arr ) { let ans = 0 ; for ( let i = 0 ; i < Math . floor ( arr . length / 2 ) ; i ++ ) { if ( arr [ i ] != arr [ - i - 1 ] ) ans ++ ; } return ans ; }
function total_match ( lst1 , lst2 ) { let sum1 = 0 ; for ( let st = 0 ; st < lst1 . length ; st ++ ) { sum1 += st . length ; } let sum2 = 0 ; for ( let st = 0 ; st < lst2 . length ; st ++ ) { sum2 += st . length ; } return lst2 if ( sum1 > sum2 ) lst1  ; }
function is_happy ( s ) { if ( s . length < 3 ) return false ; for ( var i = 0 ; i < s . length - 2 ; i ++ ) if ( s [ i ] == s [ i + 1 ] s [ i + 1 ] == s [ i + 2 ] s [ i ] == s [ i + 2 ] ) return false ; return true ; }
function numerical_letter_grade ( grades ) { let letter_grade = [ ] ; for ( let gpa = 0 ; gpa < grades . length ; gpa ++ ) { if ( gpa == 4.0 ) { letter_grade . push ( "A+" ) ; } else if ( gpa > 3.7 ) { letter_grade . push ( "A" ) ; } else if ( gpa > 3.0 ) { letter_grade . push ( "A-" ) ; } else if ( gpa > 2.0 ) { letter_grade . push ( "B+" ) ; } else if ( gpa > 2.7 ) { letter_grade . push ( "B" ) ; } else if ( gpa > 2.3 ) { letter_grade . push ( "B-" ) ; } else if ( gpa > 1.0 ) { letter_grade . push ( "C" ) ; } else if ( gpa > 0.0 ) { letter_grade . push ( "E" ) ; } } return letter_grade ; }
function solve ( n ) { let bi_str = [ ] ; let sum = 0 ; for ( let c = n ; c != "0" ; c ++ ) { sum += c . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ; } while ( sum > 0 ) { bi_str . push ( str ( sum % 2 ) ) ; sum = parseInt ( sum / 2 ) ; } return "" . join ( bi_str ) ; }
function anti_shuffle ( s ) { let ret = [ ] ; let current = [ ] ; for ( let i = 0 ; i < s . length + 1 ; i ++ ) { if ( i == s . length s [ i ] == " " ) { current . sort ( ) ; if ( ret ) ret . push ( "▁" ) ; } ret . push ( s [ i ] ) ; current . clear ( ) ; } else { current . push ( s [ i ] ) ; } } return ret ; }
function sort_array ( array ) { if ( ! array ) return array ; if ( Math . floor ( array [ 0 ] + array [ - 1 ] ) % 2 == 1 ) array . sort ( ) ; else array . sort ( reverse = true ) ; return array ; }
function encrypt ( s ) { var ans = [ ] ; for ( var c = 0 ; c < s . length ; c ++ ) { if ( c . isalpha ( ) ) ans . push ( String . fromCharCode ( "a" . charCodeAt ( 0 ) + ( c . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) % 26 ) ) ; else ans . push ( c ) ; } return ans . join ( "" ) ; }
function is_bored ( s ) { let is_start = true ; let sum = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == "." s [ i ] == "?" s [ i ] == "!" ) is_start = true ; else if ( is_start ) { if ( s [ i ] == " " ) continue ; if ( s [ i ] == "I" ) sum += 1 ; } is_start = false ; } return sum ; }
function encode ( message ) { let vowels = "aeiouAEIOU" ; let ret = [ ] ; for ( let c = 0 ; c < message . length ; c ++ ) { if ( c . isupper ( ) ) { c = c . toLowerCase ( ) ; if ( c in vowels ) { c = String . fromCharCode ( "a" ) + ( c . charCodeAt ( ) - "a" . charCodeAt ( ) + 2 ) % 26 ; } } else if ( c . islower ( ) ) { c = c . toUpperCase ( ) ; if ( c in vowels ) { c = String . fromCharCode ( "A" ) + ( c . charCodeAt ( ) - "A" . charCodeAt ( ) + 2 ) % 26 ; } } ret . push ( c ) ; } return "" . join ( ret ) ; }
function skjkasdkd ( lst ) { let largest = 0 ; for ( let n = 0 ; n < lst . length ; n ++ ) { let prime = true ; for ( let i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) prime = false ; } if ( prime ) largest = n ; } let sum = 0 ; let s = largest . toString ( ) ; for ( let i = 0 ; i < s . length ; i ++ ) { sum += s [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ] ; } return sum ; }
function check_dict_case ( dict ) { if ( ! dict ) return false ; let is_lower = 0 , is_upper = 0 ; for ( let key = 0 ; key < dict . length ; key ++ ) { for ( let c = 0 ; c < key . length ; c ++ ) { if ( c . islower ( ) ) is_lower = 1 ; else if ( c . isupper ( ) ) is_upper = 1 ; else return false ; } } return is_lower + is_upper == 1 ; }
function multiply ( a , b ) { return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ; }
function count_upper ( s ) { let u_vowel = "AEIOU" ; let count = 0 ; for ( let i = 0 ; i < s . length ; i += 2 ) { if ( s [ i ] == u_vowel ) count ++ ; } return count ; }
function by_length ( arr ) { let num_to = { 1 : "One" , 2 : "Two" , 3 : "Three" , 4 : "Four" , 5 : "Five" , 6 : "Six" , 7 : "Seven" , 8 : "Eight" , 9 : "Nine" }  for ( let n = 0 ; n < sorted_arr . length ; n ++ ) { if ( n >= 1 && n <= 9 ) new_arr . push ( num_to [ n ] ) ; } return new_arr ; }
function f ( n ) { let sum = 0 , prod = 1 ; let result = [ ] ; for ( let i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) result . push ( prod ) ; else result . push ( sum ) ; } return result ; }
function even_odd_palindrome ( n ) { let even_count = 0 ; let odd_count = 0 ; for ( let i = 1 ; i <= n ; i ++ ) { let s = str ( i ) ; let r_str = s [ : : - 1 ] ; if ( s == r_str ) { if ( i % 2 == 1 ) odd_count ++ ; else even_count ++ ; } } return [ even_count , odd_count ] ; }
function histogram ( test ) { var count = new Map ( ) ; var max = 0 ; for ( var i = 0 ; i < test . length ; i ++ ) { if ( test [ i ] != " " ) { count [ test [ i ] ] += 1 ; if ( count . has ( test [ i ] ) ) { max = count . get ( test [ i ] ) ; } } var result = new Map ( ) ; for ( var key = 0 ; key < count . length ; key ++ ) { if ( count . has ( key ) ) { result [ key ] = value ; } } return result ; }
function reverse_delete ( s , c ) { let ret = [ ] ; for ( let ch = 0 ; ch < s . length ; ch ++ ) { if ( ! c . has ( ch ) ) { ret . push ( ch ) ; } } let flag = "False" ; if ( ret . length == 0 ) flag = "True" ; return [ "" . join ( ret ) , flag ] ; }
function sort_array ( arr ) { let bin = [ ] ; for ( let i = 0 ; i < arr . length ; i ++ ) { let b = 0 ; let n = Math . abs ( i ) ; while ( n > 0 ) { b += Math . floor ( n % 2 ) ; n = Math . floor ( n / 2 ) ; } bin . push ( b ) ; } for ( let i = 0 ; i < arr . length ; i ++ ) { for ( let j = 1 ; j < arr . length ; j ++ ) { if ( bin [ j ] < bin [ j - 1 ] bin [ j - 1 ] = bin [ j - 1 ] ; arr [ j ] = arr [ j - 1 ] ; arr [ j - 1 ] = arr [ j ] ; } } } return arr ; }
function get_closest_vowel ( word ) { let vowels = "AEIOUaeiou" ; for ( let i = word . length - 2 ; i >= 0 ; i -- ) { if ( word [ i ] in vowels && word [ i + 1 ] not in vowels && word [ i - 1 ] not in vowels ) return word [ i ] ; } return "" ; }
function match_parens ( lst ) { var strings = [ lst [ 0 ] + lst [ 1 ] , lst [ 1 ] + lst [ 0 ] ] ; for ( var l = strings [ 0 ] ; l < strings . length ; l ++ ) { var count = 0 ; for ( var c = l [ 0 ] ; c < l . length ; c ++ ) { if ( c == "(" ) { count ++ ; } if ( c == ")" ) { count -- ; } if ( count < 0 ) break ; } } return "Yes" ; }
function maximum ( arr , k ) { if ( k == 0 ) return [ ] ; arr . sort ( ) ; return arr [ - k : ] ; }
function valid_date ( date ) { let n = date . length ; if ( n != 10 ) return false ; for ( let i = 0 ; i < 10 ; i ++ ) { if ( i == 2 i == 5 ) { if ( date [ i ] != "-" ) { return false ; } } else if ( date [ i ] . isdigit ( ) ) { return false ; } } let month = parseInt ( date [ 0 ] ) , day = parseInt ( date [ 3 : 5 ] ) , year = parseInt ( date [ 6 : 10 ] ) ; if ( month < 1 month > 12 ) return false ; if ( day == 31 && month == 4 || month == 6 month == 11 month == 2 ) { return false ; } return true ; }
function split_words ( txt ) { let current = [ ] ; let result = [ ] ; if ( " " in txt ) { for ( let i = 0 ; i < txt . length + 1 ; i ++ ) { if ( i == txt . length || txt [ i ] == " " ) { if ( current . length > 0 ) result . push ( "" . join ( current ) ) ; current . clear ( ) ; } else { current . push ( txt [ i ] ) ; } } return result ; }
function tri ( n ) { if ( n == 0 ) return [ 1 ] ; let tris = [ 1 , 3 ] ; for ( let i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) tris . push ( parseInt ( i / 2 , 10 ) + 1 ) ; else tris . push ( tris [ i - 1 ] + tris [ i - 2 ] + parseInt ( ( i + 3 ) / 2 , 10 ) ) ; } return tris ; }
function check_if_last_char_is_a_letter ( txt ) { if ( ! txt ) return false ; return txt [ - 1 ] . isalpha ( ) && ( txt . length == 1 || ! txt [ - 2 ] . isalpha ( ) ) ; }
function order_by_points ( nums ) { let result = [ ] ; for ( let num = 0 ; num < nums . length ; num ++ ) { let w = Math . abs ( num ) ; let sum = 0 ; for ( let c = w [ 0 ] ; c < "0" ; c ++ ) { sum += ( c . charCodeAt ( 0 ) - "0" ) ; } if ( num < 0 ) sum -= 2 * ( Math . charCodeAt ( w [ 0 ] ) - "0" ) ; result . push ( sum ) ; } for ( let i = 0 ; i < nums . length ; i ++ ) { for ( let j = 1 ; j < nums . length ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { let t = result [ j - 1 ] ; result [ j - 1 ] = t ; nums [ j ] = t ; } } } return result ; }
function bf ( planet1 , planet2 ) { let planets = [ "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" ] ; let idx1 = planets . index ( planet1 ) ; if ( planet1 in planets ) { return [ ] ; } let idx2 = planets . index ( planet2 ) ; if ( planet2 in planets ) { return planets [ idx2 + 1 : idx1 ] ; } return planets [ idx1 + 1 : idx2 ] ; }
function sorted_list_sum ( lst ) { let result = [ ] ; for ( let i = 0 ; i < lst . length ; i ++ ) { if ( i % 2 == 0 ) result . push ( i ) ; } result . sort ( ) ; return result ; }
function cycpattern_check ( a , b ) { for ( let i = 0 ; i < b . length ; i ++ ) { let rotate = b [ i : ] + b [ 0 : i ] ; if ( rotate in a ) return true ; } return false ; }
function even_odd_count ( num ) { let even_count = 0 , odd_count = 0 ; for ( let i = 0 ; i < Math . abs ( num ) ; i ++ ) { if ( parseInt ( i ) % 2 == 0 ) even_count ++ ; else odd_count ++ ; } return [ even_count , odd_count ] ; }
function find_max ( words ) { let max = "" ; let max_length = 0 ; for ( let word = "" ; word < words . length ; word ++ ) { let unique = [ ] ; for ( let w = 0 ; w < word . length ; w ++ ) { if ( ! unique . length ) { unique . push ( w ) ; } if ( unique . length > max_length ) { max = word ; max_length = unique . length ; } } return max ; }
function solve ( s ) { let no_letter = true ; let result = [ ] ; for ( let ch = 0 ; ch < s . length ; ch ++ ) { if ( ch . isupper ( ) ) { ch = ch . toLowerCase ( ) ; no_letter = false ; } else if ( ch . islower ( ) ) { ch = ch . toUpperCase ( ) ; no_letter = false ; } result . push ( ch ) ; } if ( no_letter ) return "" . join ( result ) ; else return "" . join ( result ) ; }
function most_frequent ( arr , n ) { let hp = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( hp . has ( arr [ i ] ) ) { hp . set ( arr [ i ] , 1 ) ; } else { hp . set ( arr [ i ] , 1 ) ; } } let max_count = 0 , res = - 1 ; for ( let key = 0 ; key < hp . length ; key ++ ) { if ( max_count < value ) { res = key ; max_count = value ; } } return res ; }
function find ( a , b , k , n1 , n2 ) { let s = new Set ( ) ; for ( let i = 0 ; i < n2 ; i ++ ) { s . add ( b [ i ] ) ; } let missing = 0 ; for ( let i = 0 ; i < n1 ; i ++ ) { if ( a [ i ] not in s ) missing ++ ; if ( missing == k ) return a [ i ] ; } return - 1 ; }
function solve_query ( start , end , arr ) { let frequency = new Map ( ) ; for ( let i = start ; i <= end ; i ++ ) { frequency . set ( arr [ i ] , frequency . get ( arr [ i ] , 0 ) + 1 ) ; } let count = 0 ; for ( let key = 0 ; key < frequency . size ; key ++ ) { if ( key == value ) { count ++ ; } } return count ; }
function segregate ( arr , n ) { let j = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= 0 ) { let t = arr [ j ] ; arr [ j ] = t ; j ++ ; } } return j ; }
function count_triplets ( a , n ) { let s = new Set ( ) ; for ( let i = 0 ; i < n ; i ++ ) { s . add ( a [ i ] ) ; } let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i + 1 ; j <= n ; j ++ ) { let xr = a [ i ] ^ a [ j ] ; if ( xr in s && xr != a [ i ] && xr != a [ j ] ) count ++ ; } } return count / 3 ; }
function least_frequent ( arr , n ) { let hp = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( hp . has ( arr [ i ] ) ) { hp . set ( arr [ i ] , 1 ) ; } else { hp . set ( arr [ i ] , 1 ) ; } } let min_count = n + 1 ; let res = - 1 ; for ( let key = 0 ; key < hp . length ; key ++ ) { if ( min_count >= value ) { res = key ; min_count = value ; } } return res ; }
function find_permutations ( arr ) { var cnt = 0 ; var max_ind = - 1 , min_ind = 10000000 ; var n = arr . length ; var index_of = new Map ( ) ; for ( var i = 0 ; i < n ; i ++ ) { index_of . set ( arr [ i ] , i + 1 ) ; } for ( var i = 1 ; i <= n ; i ++ ) { max_ind = Math . max ( max_ind , index_of . get ( i , 0 ) ) ; min_ind = Math . min ( min_ind , index_of . get ( i , 0 ) ) ; if ( max_ind - min_ind + 1 == i ) cnt ++ ; } return cnt ; }
function form_quadruplets ( arr , n ) { var ans = 0 ; var pairs = 0 ; pairs = parseInt ( n / 4 ) ; arr . sort ( ) ; var i ; for ( i = 0 ; i < n - pairs ; i ++ ) { ans += arr [ i + 2 ] ; } return ans ; }
function lexicographically_maximum ( s , n ) { let m = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( m . has ( s [ i ] ) ) { m . delete ( s [ i ] ) ; } else { m . set ( s [ i ] , 1 ) ; } } let v = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { if ( m . has ( i ) ) { v . push ( String . fromCharCode ( i ) ) ; } } let j = v . length - 1 ; for ( let i = 0 ; i < n ; i ++ ) { if ( m . has ( s [ i ] ) ) { continue ; } m . set ( s [ i ] , m . get ( s [ i ] ) + v [ j ] + s [ i + 1 : ] , j -- ; } if ( j < 0 ) break ; } let l = 0 ; for ( let i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) { break ; } } if ( m . has ( s [ i ] ) ) { m . delete ( s [ i ] ) ; s = s [ 0 : i ] + v [ l ] + s [ i + 1 : ] , l ++ ; } } return s ; }
function no_of_valid_kbers ( k , arr ) { let st = new Set ( ) ; while ( k != 0 ) { st . add ( k % 10 ) ; k = parseInt ( k / 10 ) ; } let count = 0 ; for ( let i = 0 ; i < arr . length ; i ++ ) { let no = arr [ i ] ; let flag = true ; while ( no != 0 ) { let digit = no % 10 ; if ( digit not in st ) flag = false ; break ; } no = parseInt ( no / 10 ) ; } if ( flag == true ) { count ++ ; } } return count ; }
function del_cost ( s , cost ) { var ans = 0 ; var for_max = new Map ( ) ; var for_tot = new Map ( ) ; for ( var i = 0 ; i < s . length ; i ++ ) { if ( ! for_max . has ( s [ i ] ) ) { for_max . set ( s [ i ] , cost [ i ] ) ; } else { for_max . set ( s [ i ] , for_max [ s [ i ] ] ) ; } for ( var key = 0 ; key < for_max . get ( key ) ; key ++ ) { ans += for_tot [ key ] - value  ; } return ans ; }
function replace_duplicates ( names ) { let hash = new Map ( ) ; for ( let i = 0 ; i < names . length ; i ++ ) { if ( ! hash . has ( names [ i ] ) ) { hash . set ( names [ i ] , 1 ) ; } else { let count = hash . get ( names [ i ] ) ; hash . set ( names [ i ] , count ) ; } } return names ; }
function minmax_numbers ( matrix , res ) { let s = new Set ( ) ; for ( let i = 0 ; i < matrix . length ; i ++ ) { let min_r = Number . MAX_SAFE_INTEGER ; for ( let j = 0 ; j < matrix [ i ] . length ; j ++ ) { min_r = Math . min ( min_r , matrix [ i ] [ j ] ) ; } s . add ( min_r ) ; } for ( let j = 0 ; j < matrix [ 0 ] . length ; j ++ ) { let max_c = - Number . MAX_VALUE ; for ( let i = 0 ; i < matrix . length ; i ++ ) { max_c = Math . max ( max_c , matrix [ i ] [ j ] ) ; } if ( max_c in s ) res . push ( max_c ) ; } return res ; }
function length_of_longest_ap ( a , n ) { let dp = new Map ( ) ; let res = 2 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { let d = a [ j ] - a [ i ] ; if ( d in dp ) { dp [ d ] [ j ] = dp [ d ] [ i ] + 1 ; } else dp [ d ] [ j ] = 2 ; } } return res ; }
function find_kth_char ( n , k ) { var prev = "A" , cur = "" ; if ( n == 1 ) return "A" ; for ( var i = 2 ; i <= n ; i ++ ) { cur = prev + "B" ; for ( var i = 0 ; i < prev . length ; i ++ ) { if ( prev [ i ] == "A" ) prev = prev [ 0 ] + "B" + prev [ i + 1 : ] ; else prev = prev [ 0 ] + "A" + prev [ i + 1 : ] ; prev = cur  ; } return cur [ k - 1 ] ; }
function find_kth_largest ( s , k ) { let tmp = list ( s ) ; tmp . sort ( ) ; return tmp [ k - 1 ] ; }
function sub_arraylen ( arr , n , k ) { var mp = new Map ( ) ; mp . set ( arr [ 0 ] , 0 ) ; for ( var i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp . set ( arr [ i ] , i ) ; } var len = Number . MAX_SAFE_INTEGER ; for ( var i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) continue ; else { var x = arr [ i ] - k ; if ( x == 0 ) len = Math . min ( len , i ) ; if ( x != 0 ) len = Math . min ( len , i - mp . get ( x , 0 ) ) ; } } return len ; }
function find_max_len ( a , k ) { let n = a . length ; a . sort ( ) ; let vis = new Array ( n ) ; let mp = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) mp . set ( a [ i ] , i ) ; let c = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( ! vis [ i ] ) { let check = a [ i ] * k ; if ( check in mp ) c += 1 ; vis [ mp [ check ] ] = true ; } } return n - c ; }
function min_distance_points ( a , k , n ) { let m = new Map ( ) ; let q = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { m [ a [ i ] ] = 1 ; q . push ( a [ i ] ) ; } let ans = [ ] ; while ( k > 0 ) { let x = q [ 0 ] ; q = q [ 1 : : ] ; if ( x - 1 ) not in m && k > 0 ) { m [ x - 1 ] = 1 ; q . push ( x - 1 ) ; ans . push ( x - 1 ) ; k -- ; } if ( x + 1 ) not in m && k > 0 ) { m [ x + 1 ] = 1 ; q . push ( x + 1 ) ; ans . push ( x + 1 ) ; k -- ; } } return ans ; }
function isValidLen ( s , length , k ) { let n = s . length ; let mp = new Map ( ) ; let right = 0 ; while ( right < length ) { if ( s [ right ] in mp ) mp . set ( s [ right ] , ++ ) ; else mp . set ( s [ right ] , 1 ) ; right ++ ; } if ( mp . has ( s [ right ] ) ) return true ; while ( right < n ) { if ( s [ right ] in mp ) mp . set ( s [ right ] , 1 ) ; mp . set ( s [ right ] , mp [ s [ right ] ] - 1 ) ; if ( mp . get ( s [ right - length ] ) == 0 ) delete mp . set ( s [ right - length ] , 0 ) ; } if ( mp . has ( s [ right - length ] ) ) return true ; right ++ ; } return mp . has ( s [ right - length ] ) ; }
function partition ( arr , low , high ) { var pivot = arr [ high ] ; var i = ( low - 1 ) ; for ( var j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; var t = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = t ; } } var t = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ high ] ; arr [ high ] = t ; return i + 1 ; }
function str_score ( strs , s , n ) { let m = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { m . set ( strs [ i ] , i + 1 ) ; } if ( ! m . has ( s ) ) return 0 ; let score = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { score += s [ i ] . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) + 1 ; } score = score * m . get ( s ) ; return score ; }
function count_ele ( s , a , n ) { var mp = new Map ( ) ; var ans = [ ] ; for ( var i = 0 ; i < n ; i ++ ) { var num = a [ i ] ; if ( mp . has ( num ) ) ans . push ( 0 ) ; else { var cnt = 0 ; while ( s [ 0 ] != num ) { mp . set ( s [ 0 ] , true ) ; s . pop ( 0 ) ; cnt ++ ; } s . push ( cnt ) ; } } return ans ; }
function maxDistinctChar ( s , n , k ) { let freq = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( freq . has ( s [ i ] ) ) { freq . delete ( s [ i ] ) ; } else { freq . set ( s [ i ] , 1 ) ; } } let v = [ ] ; for ( let key = 0 ; key < v . length ; key ++ ) { v . push ( value ) ; } v . sort ( ) ; for ( let i = 0 ; i < v . length ; i ++ ) { let mn = Math . min ( v [ i ] - 1 , k ) ; v [ i ] = v [ i ] - mn  ; k -- ; } if ( k > 0 ) { for ( let i = 0 ; i < v . length ; i ++ ) { mn = Math . min ( v [ i ] , k ) ; v [ i ] = v [ i ] - mn  ; k -- ; } } let res = 0 ; for ( let i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] == 1 ) res ++ ; } return res ; }
function find_kth ( arr , n , k ) { let missing = new Map ( ) ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { missing [ arr [ i ] ] = 1 ; } let max_m = Math . max ( ... arr ) ; let min_m = Math . min ( ... arr ) ; for ( let i = min_m + 1 ; i <= max_m ; i ++ ) { if ( ! missing . has ( arr [ i ] ) ) { count ++ ; } if ( count == k ) return i ; } return - 1 ; }
function almost_sort ( a , n ) { for ( let i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = a [ i ] ; i ++ ; } } for ( let i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) return false ; } return true ; }
function maximum_sum ( s , n , k ) { let sum = 0 ; let freq = new Array ( 256 ) ; freq . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) { freq [ s [ i ] ] += 1 ; } freq . sort ( ) ; for ( let i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) sum += freq [ i ] * freq [ i ]  ; k -= freq [ i ] ; else sum += freq [ i ] * k ; break ; } } return sum ; }
function find_min_operations ( arr , n , k ) { let operations = 0 ; for ( let i = 0 ; i < k ; i ++ ) { let freq = new Map ( ) ; for ( let j = i ; j < n ; j ++ ) { freq . set ( arr [ j ] , freq . get ( arr [ j ] , 0 ) + 1 ) ; } let max1 = 0 ; let num = 0 ; for ( let key = 0 ; key < freq . length ; key ++ ) { if ( value > max1 ) max1 = value ; num = key ; } } for ( let key = 0 ; key < freq . size ; key ++ ) { if ( key != num ) operations += value  ; } } return operations ; }
function sub_string ( s , n ) { var v = [ ] ; for ( var i = 0 ; i < n ; i ++ ) { for ( var len = 1 ; len <= n - i ; len ++ ) { var find = s [ i : i + len ]  ; v . push ( find ) ; } } return v ; }
function check_unique_frequency ( arr , n ) { let freq = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { freq . set ( arr [ i ] , freq . get ( arr [ i ] , 0 ) + 1 ) ; } let unique_freq = new Set ( ) ; for ( let i = 0 ; i < freq . length ; i ++ ) { if ( freq [ i ] in unique_freq ) return false ; else { unique_freq . add ( freq [ i ] ) ; } } return true ; }
function min_cost ( str1 , str2 , n ) { let cost = 0 ; let tmp = new Array ( str1 ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 [ i ] ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) { tmp [ i ] = tmp [ i + 1 ] ; tmp [ i + 1 ] = tmp [ i ] ; cost ++ ; } else { cost ++ ; } } return cost ; }
function is_valid_num ( x ) { var mp = new Map ( ) ; for ( var i = 0 ; i < x . length ; i ++ ) { if ( x [ i ] . charCodeAt ( 0 ) > 5 ) return false ; else if ( x [ i ] . charCodeAt ( 0 ) > 5 ) return false ; else { mp . set ( x [ i ] . charCodeAt ( 0 ) , 1 ) ; } } return true ; }
function minimize_diff ( arr , n , k ) { var max_element = Math . max ( ... arr ) ; var min_element = Math . min ( ... arr ) ; if ( max_element - min_element <= k ) { return max_element - min_element ; } var avg = parseInt ( ( max_element + min_element ) / 2 ) ; for ( var i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) arr [ i ] -= k ; else arr [ i ] += k ; } max_element = Math . max ( ... arr ) ; min_element = Math . min ( ... arr ) ; return max_element - min_element ; }
function get_min_cost ( arr , n ) { let min_ele = Math . min ( ... arr ) ; return min_ele * ( n - 1 ) ; }
function possibility ( m , length , s ) { let count_odd = 0 ; for ( let i = 0 ; i < length ; i ++ ) { if ( m [ s [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ] & 1 ) count_odd ++ ; } if ( count_odd > 1 ) return false ; return true ; }
function minimum_cost_of_breaking ( x , y , m , n ) { let res = 0 ; x . sort ( function ( a , b ) { return a - b } ) ; y . sort ( function ( a , b ) { return a - b } ) ; let hzntl = 1 , vert = 1 ; let i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) res += x [ i ] * vert  ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } let total = 0 ; while ( i < m ) total += x [ i ]  let i = 0 ; while ( j < n ) total += y [ j ]  j ++ ; res += total * hzntl  return res ; }
function find_maximum_score ( a , n ) { let freq = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( freq . has ( a [ i ] ) ) freq . set ( a [ i ] , 1 ) ; else freq . set ( a [ i ] , 1 ) ; } let dp = new Array ( n + 1 ) ; for ( let i = 0 ; i < n ; i ++ ) dp [ i ] = 0 ; dp [ 1 ] = freq . get ( 1 , 0 ) ; for ( let i = 2 ; i < dp . length ; i ++ ) { dp [ i ] = Math . max ( dp [ i - 1 ] , dp [ i - 2 ] + freq . get ( i , 0 ) * i ) ; } return dp [ - 1 ]  ; }
function count_ways ( s , t , k , mod ) { let n = s . length ; let a = 0 , b = 0 ; for ( let i = 0 ; i < n ; i ++ ) { let p = s [ i : n ] + s [ : i ] ; if ( p == t ) a ++ ; else b ++ ; } let dp1 = new Array ( k + 1 ) ; let dp2 = new Array ( k + 1 ) ; for ( let i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * b ) % mod + ( dp2 [ i - 1 ] * b - 1 ) ) % mod ; } return dp1 [ k ] ; }
function find_subarray_sum ( arr , n , k ) { let prev_sum = new Map ( ) ; let res = 0 ; let curr_sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ]  ; if ( curr_sum == k ) res ++ ; if ( curr_sum - k ) in prev_sum ) res += prev_sum [ curr_sum - k ]  ; prev_sum [ curr_sum ] = prev_sum . get ( curr_sum ) + 1 ; } return res ; }
function maximum_occurrence ( s ) { let n = s . length ; let freq = new Map ( ) ; for ( let i = 0 ; i < s . length ; i ++ ) { let temp = "" ; temp += s [ i ] ; freq [ temp ] = freq . get ( temp , 0 ) + 1 ; } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { temp = "" ; temp += s [ j ] ; freq [ temp ] = freq . get ( temp , 0 ) + 1 ; } } let answer = Number . MAX_VALUE ; for ( let key = 0 ; key < freq . size ; key ++ ) { answer = Math . max ( answer , value ) ; } return answer ; }
function count_characters ( strings , chars ) { let res = 0 ; let freq = new Map ( ) ; for ( let i = 0 ; i < chars . length ; i ++ ) { freq . set ( chars [ i ] , 1 ) ; } for ( let st = 0 ; st < strings . length ; st ++ ) { let flag = true ; for ( let c = 0 ; c < st . length ; c ++ ) { if ( ! freq . has ( c ) ) { flag = false ; break ; } } if ( flag ) { res += st . length ; } } return res ; }
function distinct_substring ( p , q , k , n ) { let ss = new Set ( ) ; for ( let i = 0 ; i < n ; i ++ ) { let sum = 0 ; let s = "" ; for ( let j = i ; j < n ; j ++ ) { let pos = p [ j ] - "a" ; sum += q [ pos ] - "0" ; s += p [ j ] ; if ( sum <= k ) ss . add ( s ) ; else break ; } } return ss . size ; }
function unique_morse_rep ( arr ) { let morse_code = [ ".-" , "-..." , "-.-." , "-.." , "." , "...." , ".." , ".---" ] ; let st = new Set ( ) ; for ( let i = 0 ; i < n ; i ++ ) { let temp = "" ; let m = arr [ i ] . length ; for ( let j = 0 ; j < m ; j ++ ) { temp += morse_code [ arr [ i ] [ j ] - "a" . charCodeAt ( 0 ) ] ; } st . add ( temp ) ; } return st . size ; }
function count_substrings ( str , k ) { let n = str . length ; let answer = 0 ; let map = new Map ( ) ; for ( let i = 0 ; i < k ; i ++ ) { if ( ! map . has ( str [ i ] ) ) { map . set ( str [ i ] , 1 ) ; } else { map . set ( str [ i ] , 1 ) ; } } if ( map . has ( str [ i ] ) ) answer ++ ; for ( let i = k ; i < n ; i ++ ) { if ( ! map . has ( str [ i ] ) ) { map . set ( str [ i ] , 0 ) ; } map . set ( str [ i ] , map . get ( str [ i ] ) ) ; } if ( map . has ( str [ i - k ] ) ) { answer ++ ; } } return answer ; }
function can_construct ( s , k ) { let m = new Map ( ) ; let p = 0 ; if ( s . length == k ) return true ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( ! m . has ( s [ i ] ) ) return false ; m . set ( s [ i ] , m . get ( s [ i ] ) + 1 ) ; } if ( k > s . length ) return false ; else { for ( let key = 0 ; key < m . size ; key ++ ) { if ( value % 2 != 0 ) { p = p + 1 ; } } if ( k < p ) return false ; return true ; }
function equal_ignore_case ( str1 , str2 ) { str1 = str1 . toUpperCase ( ) ; str2 = str2 . toUpperCase ( ) ; return str1 == str2 ; }
function find_longest_sub ( bin ) { let n = bin . length ; let sum = 0 , prev_sum = new Map ( ) ; let max_len = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( bin [ i ] == "1" ) sum ++ ; else { sum -- ; } if ( sum > 0 ) max_len = i + 1 ; } else if ( sum <= 0 ) { if ( i - prev_sum [ sum - 1 ] == prev_sum ) curr_len = i - prev_sum [ sum - 1 ] ; max_len = Math . max ( max_len , curr_len ) ; } } if ( sum not in prev_sum ) prev_sum [ sum ] = i ; } return max_len ; }
function has_all_codes ( s , k ) { let us = new Set ( ) ; for ( let i = 0 ; i < s . length ; i ++ ) { us . add ( s [ i : k ] ) ; } return us . size == 1 << k ; }
function check_palin ( word ) { let n = word . length ; word . toLowerCase ( ) ; for ( let i = 0 ; i < n ; i ++ ) if ( word [ i ] != word [ n - 1 ] ) return false ; n -- ; } return true ; }
function convert ( str ) { let w = ""  let z = ""  for ( let i = 0 ; i < str . length ; i ++ ) { let ch = str [ i ] ; if ( ch != " " ) w += ch ; else { z += w [ 0 ] . toLowerCase ( ) + w [ 1 : w . length ] + "▁" } w = ""  } return z  ; }
function max_lines ( n , x1 , y1 , x2 , y2 ) { var s = new Set ( ) ; var slope = 0 ; for ( var i = 0 ; i < n ; i ++ ) { if ( x1 [ i ] == x2 [ i ] ) slope = Number . MAX_SAFE_INTEGER ; else { slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; } s . add ( slope ) ; } return s . size ; }
function prime_factor ( n ) { var primef = new Map ( ) ; while ( n % 2 == 0 ) { if ( 2 in primef ) primef [ 2 ] ++ ; else primef [ 2 ] = 1 ; } n = Math . floor ( n / 2 ) ; } for ( var i = 3 ; i <= Math . sqrt ( n ) ; i = i + 2 ) { while ( n % i == 0 ) { if ( i in primef ) primef [ i ] ++ ; else primef [ i ] = 1 ; } n = parseInt ( n / i ) ; } if ( n > 2 ) primef [ n ] = 1  ; return primef  ; }
function is_divisible_by_divisor ( s , d ) { let hash_map = new Set ( ) ; hash_map . add ( s ) ; for ( let i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( s in hash_map ) { if ( s == 0 ) return "Yes" ; return "No" ; } else { hash_map . add ( s ) ; } } return "Yes" ; }
function odd_sum ( a , n , k ) { let odd = new Set ( ) ; let even = new Set ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) even . add ( a [ i ] ) ; else odd . add ( a [ i ] ) ; } if ( odd . size >= k ) return true ; let flag = false ; for ( let i = 1 ; i < k ; i += 2 ) { let needed = k - i ; if ( needed <= even . length ) return true ; } return flag ; }
function day_of_year ( date ) { let days = [ 31 , 28 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 31 , 30 , 31 , 31 , 30 , 31 ] ; let year = date . charCodeAt ( 0 ) ; let month = date . charCodeAt ( 5 ) ; let day = date . charCodeAt ( 8 ) ; if ( month > 2 && year % 4 == 0 && year % 100 != 0 year % 400 == 0 ) day ++ ; while ( month > 1 ) day = day + days [ month - 2 ] ; month -- ; } return day ; }
function is_perfect_square ( arr , n ) { let umap = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( umap . has ( arr [ i ] ) ) { let val = umap . get ( arr [ i ] ) ; umap . set ( arr [ i ] , val + 1 ) ; } else { umap . set ( arr [ i ] , 1 ) ; } } for ( let key = 0 ; key < n ; key ++ ) { if ( value % 2 == 1 ) return false ; } return true ; }
function min_moves ( n ) { let s = n . toString ( ) ; let ans = Number . MAX_SAFE_INTEGER ; let length = s . length ; for ( let i = 0 ; i < length ; i ++ ) { for ( let j = 0 ; j < length ; j ++ ) { if ( i == j ) continue ; t = new Array ( s ) ; for ( let k = i ; k < length - 1 ; k ++ ) { t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = t [ k ] ; cur ++ ; } for ( let k = j - ( j > i ) ; k -- ) { t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = t [ k ] ; cur ++ ; } for ( let k = 0 ; k < length ; k ++ ) { if ( t [ k ] != "0" ) { pos = k  ; break ; } } for ( let k = pos ; k >= 0 ; k -- ) { t [ k ] = t [ k - 1 ] ; t [ k - 1 ] = t [ k ] ; cur ++ ; } let nn = parseInt ( t [ 0 ] ) ; if ( nn % 25 == 0 ) ans = Math . min ( ans , cur ) ; } } if ( ans == Number . MAX_SAFE_INTEGER ) return - 1 ; return ans ; }
function minimum_operations ( a , n ) { var mp = new Map ( ) ; for ( var i = 0 ; i < n ; i ++ ) { mp . set ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; } var count = 0 ; for ( var key = 0 ; key < mp . size ; key ++ ) { if ( value > 1 ) count += value - 1 ; } return count ; }
function kaprekar_rec ( n , prev ) { if ( n == 0 ) return 0 ; prev = n ; let digits = new Array ( 4 ) ; for ( let i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = parseInt ( n / 10 , 10 ) ; } digits . sort ( ) ; let asc = 0 ; for ( let i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } digits . sort ( ) ; let desc = 0 ; for ( let i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } let diff = Math . abs ( asc - desc ) ; if ( diff == prev ) return diff ; } return kaprekar_rec ( diff , prev ) ; }
function fraction_to_decimal ( numr , denr ) { let res = "" ; let mp = new Map ( ) ; let rem = numr % denr ; while ( rem != 0 && rem != 0 ) { mp . set ( rem , res . length ) ; rem = rem * 10 ; res += res [ res_part ] ; rem = rem % denr ; } if ( rem == 0 ) return "" ; if ( mp . has ( rem ) ) return res [ mp [ rem ] ] ; return "" ; }
function is_fancy ( num ) { let fp = new Map ( ) ; fp [ "0" ] = "0"  ; fp [ "1" ] = "1"  let r = n - 1 ; let l = 0 ; let r = 9 ; while ( l <= r ) { if ( num [ l ] not in fp num [ l ] ] != num [ r ] ) return false ; l ++ ; r -- ; } return true ; }
function distinct_odd_ratio ( numbers ) { let distinct_count = numbers . length ; let distinct_odd_count = Math . floor ( set ( numbers ) ) ; let distinct_odd_count = Math . floor ( set ( numbers ) ) ; let distinct_odd_count = Math . floor ( distinct_odd_count / distinct_count ) ; return distinct_odd_count / distinct_count ; }
function compare_sum ( numbers , words ) { let int_sum = sum ( numbers ) ; let word_length_sum = sum ( [ words . length ] ) ; if ( int_sum < word_length_sum ) return - 1 ; else if ( int_sum > word_length_sum ) return 1 ; else return 0 ; }
function all_longer_than ( short_words , long_words ) { let max_of_short = Math . max ( ... short_words ) ; let min_of_long = Math . min ( ... long_words ) ; return min_of_long > max_of_short ; }
function compare_odd_even_range ( numbers ) { let range_odd = Math . max ( [ n for ( let n = 0 ; n < numbers . length ; n ++ ) { range_odd = Math . min ( [ n for ( let n = 0 ; n < numbers . length ; n ++ ) { range_even = Math . max ( [ n for ( let n = 0 ; n < numbers . length ; n ++ ) { if ( range_odd < range_even ) return - 1 ; if ( range_odd > range_even ) return 1 ; } return 0 ; }
function average_distinct_length ( words ) { let distinct_words = new Set ( words )  let average_len = sum ( [ distinct_words . size for ( let w = 0 ; w < distinct_words . size ; w ++ ) { average_len += 1 << w ; } return average_len ; }
function withdraw_balance ( start , withdrawals ) { let end = functools . reduce ( function ( balance , nextWithdrawal ) { return balance - nextWithdrawal if ( nextWithdrawal <= balance ) balance = balance - nextWithdrawal ; return end ; }
function first_short_and_starts_with_o ( words ) { let matched_element = next ( iter ( words ) ) ; return matched_element ; }
function big_number_at_index ( numbers , index ) { let target_num = [ n for ( let n = 0 ; n < numbers . length ; n ++ ) { target_num = numbers [ n ] ; } return target_num ; }
function contains_square_in_range ( range_start , range_length ) { let contains_square = any ( [ Math . sqrt ( n ) ) ** 2 == n ; return contains_square ; }
function group_numbers_by_mod ( numbers , mod ) { let number_groups = new Map ( ) ; for ( let k = 0 ; k < numbers . length ; k ++ ) { number_groups [ k ] = number_groups . get ( k , [ ] ) + list ( g ) ; } return number_groups ; }
function group_words_by_first_char ( words ) { let word_groups = new Map ( ) ; for ( let k = 0 ; k < words . length ; k ++ ) { word_groups [ k ] = word_groups . get ( k , [ ] ) + list ( g ) ; } return word_groups ; }
function order_by_length_and_descending ( words ) { let sorted_words = sorted ( words , key = lambda w : w , reverse = true ) ; sorted_words . sort ( function ( a , b ) { return a - b ; } ) ; return sorted_words ; }
function order_first_char_descending_reverse ( words ) { let sorted_words = sorted ( words , key = lambda w : ( w [ 0 ] - "0" ) , reverse = true ) ; return sorted_words ; }
function get_sublist_of_negative ( numbers , start , length ) { let sub_list = [ ] ; for ( let n = numbers [ start : ] ; n < length ; n ++ ) { sub_list . push ( n ) ; } return sub_list ; }
function get_positive_sequence ( numbers ) { let sub_sequence = new Iterable ( ) ; for ( let n = 0 ; n < numbers . length ; n ++ ) { sub_sequence . push ( itertools . takewhile ( lambda n : n > 0 , numbers ) ) ; } return sub_sequence ; }
function get_larger_than_index_sequence ( numbers ) { let sub_sequence = [ x [ 1 ] ] ; for ( let x = 0 ; x < numbers . length ; x ++ ) { sub_sequence . push ( x [ 1 ] ) ; } return sub_sequence ; }
function rearrange_word_by_indexes ( words , indexes ) { let new_indexes = [ n % words . length ] ; for ( let n = 0 ; n < new_indexes . length ; n ++ ) { new_indexes . push ( n ) ; } let new_words = [ words [ n ] ; for ( let n = 0 ; n < new_indexes . length ; n ++ ) { new_words [ n ] = new_indexes [ n ] ; } return new_words ; }
function get_words_upper_lower ( words ) { let upper_lower_words = [ ] ; for ( let w of words ) { upper_lower_words . push ( [ w . upper ( ) , w . lower ( ) ] ; } return upper_lower_words ; }
function select_if_in_place ( numbers ) { let nums_in_place = [ 0 ] ; for ( let i = 0 ; i < numbers . length ; i ++ ) { nums_in_place [ i ] = num == index ; } return nums_in_place ; }
function select_pairs ( numbers_a , numbers_b ) { let pairs = new Array ( numbers_a . length ) ; for ( let a = 0 ; a < numbers_a . length ; a ++ ) { pairs [ a ] = b ; } return pairs ; }
function string_cross_join ( end_words , begin_words ) { let cross_strings = [ e + "▁" + b ] ; for ( let e = 0 ; e < end_words . length ; e ++ ) { cross_strings [ e ] = b + "▁" + e ; } return cross_strings ; }
function elements_contain_subword ( words , subword ) { if ( all ( subword ) in w ) return 1 ; else if ( any ( subword ) in w ) return 0 ; else return - 1 ; }
function concat_large_numbers ( numbers_a , numbers_b , flag ) { let all_numbers = [ n ] + [ n ] ; return all_numbers ; }
function dot_product ( vector_a , vector_b ) { let dot_product = sum ( [ a * b for ( let a = 0 ; a < vector_a . length ; a ++ ) dot_product += ( b * b ) ; return dot_product ; }
function set_difference ( set_a , set_b ) { let difference = sorted ( list ( set ( set_a ) . symmetric_difference ( set ( set_b ) ) ) ; return difference ; }
