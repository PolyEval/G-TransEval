int greatest_common_divisor ( int a , int b ) { if ( a == 0 b == 0 ) return a + b  ; if ( a == b ) return a ; if ( a > b ) return greatest_common_divisor ( a % b , b ) ; else return greatest_common_divisor ( a , b % a ) ; }
int largest_divisor ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) if ( n % i == 0 ) return n / i ; return 1 ; }
boolean is_prime ( int n ) { if ( n < 2 ) return false ; for ( int k = 2 ; k < n ; k ++ ) if ( n % k == 0 ) return false ; return true ; }
int fizz_buzz ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) { count ++ ; } q /= 10 ; } } return count ; }
int prime_fib ( int n ) { int f0 = 0 , f1 = 1 ; while ( n > 0 ) { int p = f0 + f1  , is_prime = p >= 2 ; for ( int i = 2 ; i <= p ; i ++ ) { if ( p % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { n -- ; } f0 = f1  ; f1 = p ; } return f1 ; }
int triangle_area ( int a , int h ) { return a * h / 2 ; }
int modp ( int n , int p ) { int ret = 1 ; for ( int i = 0 ; i < n ; i ++ ) { ret = ( ret * 2 ) % p  ; } return ret ; }
int add ( int x , int y ) { return x + y ; }
int fib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 1 ; return fib ( n - 1 ) + fib ( n - 2 ) ; }
int largest_prime_factor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) { while ( n % i == 0 && n > i ) n /= i ; } return n ; }
int sum_to_n ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) result += i ; return result ; }
int fibfib ( int n ) { if ( n == 0 ) return 0 ; if ( n == 1 ) return 0 ; if ( n == 2 ) return 1 ; return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
boolean is_multiply_prime ( int a ) { int num = 0 ; for ( int i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) a /= i ; num ++ ; } } return num == 3 ; }
boolean is_simple_power ( int x , int n ) { if ( n == 1 ) return x == 1 ; int power = 1 ; while ( power < x ) power *= n ; return power == x ; }
int choose_num ( int x , int y ) { if ( x > y ) return - 1 ; if ( y % 2 == 0 ) return y ; if ( x == y ) return - 1 ; return y - 1 ; }
boolean is_equal_to_sum_even ( int n ) { return n % 2 == 0 && n >= 8 ; }
int special_factorial ( int n ) { int fact = 1 ; int special_fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; special_fact *= fact  ; } return special_fact ; }
int x_or_y ( int n , int x , int y ) { boolean is_prime = n >= 2  ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) return x ; return y ; }
boolean right_angle_triangle ( int a , int b , int c ) { return a * a == b * b + c * c || b * b == a * a + c * c ) == a * a + b * b ; }
int fast_pow ( int n , int k ) { if ( k == 0 ) return 1 ; int temp = fast_pow ( n , k / 2 ) ; if ( k % 2 == 0 ) return temp * temp ; else return n * temp * temp ; }
boolean is_palin ( String s ) { int l = s . length ( ) / 2 ; for ( int i = 0 ; i < l ; i ++ ) if ( s . charAt ( i ) != s . charAt ( s . length ( ) - i - 1 ) ) return false ; return true ; }
int find_sum ( int n ) { int ans = 0 ; int temp = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { if ( temp < n ) break ; temp = i - 1 ; num = 1 ; while ( temp < n ) { if ( temp + i <= n ) ans += i * num ; else { ans += ( n - temp ) * num ; } temp += i ; num ++ ; } } return ans ; }
int get_next_gap ( int gap ) { gap = gap * 10 / 13 ; if ( gap < 1 ) return 1 ; return gap ; }
int count_non_decreasing ( int n ) { int k = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count /= i ; } return count ; }
int power ( int x , int y ) { if ( y == 0 ) return 1 ; else if ( y % 2 == 0 ) return power ( x , y / 2 ) * power ( x , y / 2 ) ; else return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; }
int power ( int x , int y ) { if ( y == 0 ) return 1 ; int temp = power ( x , y / 2 ) ; if ( y % 2 == 0 ) return temp * temp ; else return temp * temp / x ; }
int multiply ( int x , int y ) { if ( y == 0 ) return 0 ; if ( y > 0 ) return x + multiply ( x , y - 1 ) ; if ( y < 0 ) return - multiply ( x , - y ) ; return 0 ; }
int smallest ( int x , int y , int z ) { if ( ! y / x ) return y ; if ( ! x / z ) return z ; return x if ( ! x / z ) else z ; }
boolean is_power_of_four ( int n ) { if ( n == 0 ) return false ; while ( n != 1 ) { if ( n % 4 != 0 ) return false ; n = n / 4 ; } return true ; }
int mod_inverse ( int a , int m ) { int m0 = m , t , q ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { q = a / m ; t = m  ; m = a % m ; a = t  ; t = x0  ; x0 = x1 - q * x0  ; x1 = t  ; } if ( x1 < 0 ) x1 += m0 ; return x1 ; }
int cnt_rotations ( String s , int n ) { String s2 = s + s ; int pre [ ] = new int [ 2 * n ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) pre [ i ] += pre [ i - 1 ] ; } if ( s2 [ i ] == 'a' s2 [ i ] == 'e' || s2 [ i ] == 'i' || s2 [ i ] == 'o' || s2 [ i ] == 'u' ) pre [ i ] ++ ; } int ans = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { int r = i , l = i - n ; if ( l >= 0 ) left -= pre [ l ] ; int right = x1 - left ; if ( left > right ) ans ++ ; } return ans ; }
int binomial_coeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) k = n - k ; for ( int i = 0 ; i < k ; i ++ ) { res *= n - i ; res /= i + 1 ; } return res ; }
boolean is_prefix ( String temp , String s ) { if ( temp . length ( ) < s . length ( ) ) return false ; else for ( int i = 0 ; i < s . length ( ) ; i ++ ) if ( s . charAt ( i ) != temp . charAt ( i ) ) return false ; return true ; }
String lexicographically_smallest_string ( String s , int n ) { int last_ze = - 1 ; String ans = "" ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { last_ze = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i <= last_ze && s . charAt ( i ) == '0' ) ans += s . charAt ( i ) ; else ans += s . charAt ( i ) ; } return ans ; }
int calculate_max ( int n , int m , int k ) { int ans = - 1 ; int low = 0 , high = m ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int val = 0 ; int l = k - 1 ; int r = n - k ; val += mid ; if ( mid >= l ) val += l * ( 2 * mid - l - 1 ) / 2 ; else { val += mid * ( mid - 1 ) / 2 + ( l - mid ) ; } if ( mid >= r ) val += r * ( 2 * mid - r - 1 ) / 2 ; else { val += mid * ( mid - 1 ) / 2 + ( r - mid ) ; } if ( val <= m ) { ans = Math . max ( ans , mid ) ; low = mid + 1 ; } else { high = mid - 1 ; } } return ans ; }
int find_length ( String s , int i , int j ) { int required = i ; int length = 0 ; for ( int curr = 0 ; curr < s . length ( ) ; curr ++ ) { if ( curr == required ) { length ++ ; if ( required == i ) required = j ; else required = i ; } } return length ; }
boolean check_reverse ( int left_sum , int right_sum ) { int rev = 0 ; int temp = right_sum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp /= 10 ; } if ( rev == left_sum ) return true ; return false ; }
boolean is_composite ( int n ) { if ( n <= 1 ) return false ; if ( n <= 3 ) return false ; if ( n % 2 == 0 n % 3 == 0 ) return true ; for ( int i = 5 ; i * i <= n ; i ++ ) if ( n % i == 0 n % ( i + 2 ) == 0 ) return true ; return false ; }
int min_deletion ( String s ) { int n = s . length ( ) ; int first_idx1 = - 1 ; int last_idx0 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { first_idx1 = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) last_idx0 = i ; break ; } } if ( first_idx1 == - 1 last_idx0 == - 1 ) return 0 ; int count1 = 0 ; int count0 = 0 ; for ( int i = 0 ; i < last_idx0 ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count1 ++ ; } } for ( int i = first_idx1 + 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count0 ++ ; } } return Math . min ( count0 , count1 ) ; }
int min_steps ( String s , int n ) { int cost = 0 ; int f [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int curr_ele = s . charAt ( i ) - 'a' ; int smaller = 0 ; for ( int j = 0 ; j < curr_ele + 1 ; j ++ ) { if ( f [ j ] != 0 ) smaller += f [ j ] ; } if ( smaller == 0 ) cost += i + 1 ; else cost += i - smaller + 1 ; } return cost ; }
int number_of_ways ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 1 ; b < n ; b ++ ) { int c = n - ( a + b ) ; if ( a < b + c && b < a + c && c < a + b ) { count ++ ; } } } return count ; }
int slope_of_num ( int num [ ] , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) slope ++ ; else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) slope ++ ; } return slope ; }
int middle_of_three ( int a , int b , int c ) { int x = a - b  , y = b - c  , z = a - c  ; if ( x * y > 0 ) return b  ; else if ( x * z > 0 ) return c  ; else return a ; }
int count_max_set_bits ( int left , int right ) { while ( left | ( left + 1 ) ) <= right ) left |= left + 1  ; return left ; }
int find_s ( String s ) { int l = 1 , r = s / 2 + 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) return mid ; else if ( sum > s ) r = mid - 1 ; else l = mid + 1 ; } return - 1 ; }
boolean check ( String s ) { int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { char ascii = s . charAt ( i ) ; if ( ascii < 96 ascii > 122 ) return false ; sum += ascii ; if ( min > ascii ) min = ascii ; if ( max < ascii ) max = ascii ; } min -- ; e_sum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == e_sum ; }
int minimum_possible_product ( int k ) { int res = 1 ; int r = ( 1 << k ) - 1 ; for ( int i = 0 ; i < k ; i ++ ) { res *= r - 1 ; } res *= r  ; return res ; }
int find_in_grid ( int i , int j ) { if ( i == j ) return i * i - ( i - 1 ) ; else if ( i > j ) { if ( i % 2 == 0 ) return i * i - ( j - 1 ) ; else return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } else return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; }
int find_min_operations_req_emp_str ( String s ) { int cnt_one = 0 , cnt_zero = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { if ( cnt_one > 0 ) cnt_one = cnt_one - 1 ; } cnt_zero = cnt_zero + 1 ; } else { if ( cnt_zero > 0 ) cnt_zero = cnt_zero - 1 ; } cnt_one = cnt_one + 1 ; } } return cnt_one + cnt_zero ; }
boolean is_reachable ( int x1 , int y1 , int x2 , int y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) { x2 %= y2 ; } else { y2 %= x2 ; } } if ( x2 == x1 ) { return y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ; } else { return x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ; } else return false ; } }
int find_max_soln ( int n , int x , int y ) { int ans = Integer . MIN_VALUE ; for ( int k = 0 ; k <= n ; k ++ ) { if ( k % x == y ) ans = Math . max ( ans , k ) ; } return ans ; }
int number_of_pairs ( int n ) { int count = 0 ; for ( int i = 1 , j = n - 1 ; i < j ; i ++ , j -- ) { if ( ( i + j ) == n ) { count ++ ; } } return count ; }
int min_changes ( String s , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( s . charAt ( 0 ) != '1' ) { count ++ ; ones ++ ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) zeros ++ ; else ones ++ ; if ( zeros > ones ) zeros -- ; ones ++ ; count ++ ; } } return count ; }
int k_visible_from_left ( int n , int k ) { if ( n == k ) return 1 ; if ( k == 1 ) { int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) ans *= i ; return ans ; } return k_visible_from_left ( n - 1 , k - 1 ) + ( n - 1 ) * k_visible_from_left ( n - 1 , k ) ; }
double find ( int n , int sum ) { if ( sum > 6 * n sum < n ) return 0 ; if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) return 1.0 / 6 ; else return 0 ; } int s = 0 ; for ( int i = 1 ; i < 7 ; i ++ ) s += find ( n - 1 , sum - i ) / 6 ; return s ; }
int bin_coff ( int n , int r ) { int val = 1 ; if ( r > ( n - r ) ) r = n - r ; for ( int i = 0 ; i < r ; i ++ ) { val *= n - i ; val /= i + 1 ; } return val ; }
int get_mask ( int val ) { int mask = 0 ; if ( val == 0 ) return 1 ; while ( val > 0 ) { int d = val % 10 ; mask |= ( 1 << d ) ; val /= 10 ; } return mask ; }
int ways_to_k_adjacent_set_bits ( int n , int k , int current_index , int adjacent_set_bits , int last_bit ) { if ( current_index == n ) { if ( adjacent_set_bits == k ) { return 1 ; } return 0 ; } int no_of_ways = 0 ; if ( last_bit == 1 ) { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits + 1 , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } else { no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 1 ) ; no_of_ways += ways_to_k_adjacent_set_bits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } return no_of_ways ; }
int check_func ( int i , int j , int st [ ] ) { if ( st [ i ] == '(' && st [ j ] == ')' ) return 1 ; if ( st [ i ] == '(' && st [ j ] == '?' ) return 1 ; if ( st [ i ] == '?' && st [ j ] == ')' ) return 1 ; if ( st [ i ] == '[' && st [ j ] == ']' ) return 1 ; if ( st [ i ] == '{' && st [ j ] == '}' ) return 1 ; if ( st [ i ] == '{' && st [ j ] == '}' ) return 1 ; if ( st [ i ] == '{' && st [ j ] == '?' ) return 1 ; if ( st [ i ] == '?' && st [ j ] == '}' ) return 1 ; if ( st [ i ] == '{' && st [ j ] == '?' ) return 1 ; if ( st [ i ] == '?' && st [ j ] == '}' ) return 1 ; if ( st [ i ] == '{' && st [ j ] == '?' ) return 1 ; if ( st [ i ] == '?' && st [ j ] == '}' ) return 1 ; if ( st [ i ] == '?' && st [ j ] == '}' ) return 1 ; return 0 ; }
int find_golomb ( int n ) { if ( n == 1 ) return 1 ; return 1 + find_golomb ( n - find_golomb ( find_golomb ( n - 1 ) ) ; }
boolean all_ones ( String s , int n ) { int co = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { co += s . charAt ( i ) == '1' ? 1 : 0 ; } return co == n ; }
int pad ( int n ) { int p_prev_prev = 1 , p_prev = 1 , p_curr = 1 , p_next = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { p_next = p_prev_prev + p_prev  ; p_prev_prev = p_prev  ; p_prev = p_curr  ; p_curr = p_next  ; } return p_next ; }
int odd_length_palindrome ( int k ) { int palin = k ; k = k / 10 ; while ( k > 0 ) { int rev = k % 10 ; palin = palin * 10 + rev ; k /= 10 ; } return palin ; }
String change_string ( String s0 ) { List < Character > s = new ArrayList < Character > ( s0 ) ; int n = s0 . length ( ) ; if ( s [ 0 ] == '?' ) { s [ 0 ] = 'a' ; if ( s [ 0 ] == s [ 1 ] ) { s [ 0 ] = '0' ; } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == s [ i - 1 ] ) s [ i ] = s [ i ] + 1 ; if ( s [ i ] == s [ i + 1 ] ) s [ i ] = s [ i ] + 1 ; if ( s [ i ] == s [ i - 1 ] ) s [ i ] = s [ i ] + 1 ; if ( s [ i ] == s [ i - 1 ] ) s [ i ] = s [ i ] + 1 ; } if ( s [ n - 1 ] == '?' ) { s [ n - 1 ] = 'a' ; if ( s [ n - 1 ] == s [ n - 2 ] ) s [ n - 1 ] = s [ n - 2 ] ) { s [ n - 1 ] = s [ n - 1 ] + 1 ; } } return "" . join ( s ) ; }
int total_hamming_distance ( int n ) { int i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + n / i ; i = i * 2 ; } return sum ; }
int check_bitonic ( String s ) { int i = 1 ; for ( i = 1 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i - 1 ) ) continue ; if ( s . charAt ( i ) <= s . charAt ( i - 1 ) ) break ; } if ( i == s . length ( ) - 1 ) return 1 ; int j = i + 1 ; for ( j = i + 1 ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) < s . charAt ( j - 1 ) ) continue ; if ( s . charAt ( j ) >= s . charAt ( j - 1 ) ) break ; } i = j ; if ( i != s . length ( ) - 1 ) return 0 ; return 1 ; }
boolean ends_with ( String str , String pat ) { int pat_len = pat . length ( ) ; int str_len = str . length ( ) ; if ( pat_len > str_len ) return false ; pat_len -- ; str_len -- ; while ( pat_len >= 0 ) { if ( pat . charAt ( pat_len ) != str . charAt ( str_len ) ) return false ; pat_len -- ; str_len -- ; } return true ; }
int get_sum ( int n , int d ) { if ( n < d ) return 0 ; while ( n % 10 != d ) n -- ; int k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
int balanced_string_by_swapping ( String s ) { int unbalanced_pair = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( unbalanced_pair > 0 && s . charAt ( i ) == ']' ) unbalanced_pair -- ; else if ( s . charAt ( i ) == '[' ) unbalanced_pair ++ ; } return ( unbalanced_pair + 1 ) / 2 ; }
int compute_hash ( String s ) { int p = 31 ; int mod = 10 * 9 + 7 ; int hash_val = 0 ; int mul = 1 ; for ( char ch = 'a' ; ch <= 'z' ; ch ++ ) { hash_val = ( hash_val + ( ch - 'a' + 1 ) * mul ) % mod ; mul = mul * p % mod  ; } return hash_val ; }
int count_of_substring_with_only_ones ( String s ) { int res = 0 , count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { count = count + 1 if ( s . charAt ( i ) == '1' ) else 0 ; res = res + count  ; } return res ; }
int composite ( int n ) { int flag = 0 ; int c = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) c ++ ; } if ( c >= 3 ) flag = 1 ; return flag ; }
boolean is_div_by_six ( String s , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += s . charAt ( i ) - 'a' + 1 ; } if ( sum % 3 != 0 ) return false ; int last_digit = ( s . charAt ( n - 1 ) - 'a' + 1 ) % 10 ; if ( last_digit % 2 != 0 ) return false ; return true ; }
boolean is_redundant_braces ( String s ) { int a = 0 , b = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '(' && s . charAt ( i + 2 ) == ')' ) return true ; if ( s . charAt ( i ) == '*' && s . charAt ( i ) == '+' || s . charAt ( i ) == '-' || s . charAt ( i ) == '/' ) a ++ ; if ( s . charAt ( i ) == '(' ) b ++ ; } if ( b > a ) return true ; return false ; }
int count_sub_str ( String s , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 2 ; ) { if ( s . charAt ( i ) == '0' && s . charAt ( i + 1 ) == '1' && s . charAt ( i + 2 ) == '0' ) { count ++ ; i ++ ; } else if ( s . charAt ( i ) == '1' && s . charAt ( i + 1 ) == '0' && s . charAt ( i + 2 ) == '1' ) { count ++ ; i ++ ; } else { i ++ ; } } return count ; }
int prefix_occurrences ( String s ) { char c = s . charAt ( 0 ) ; int count_c = 0 ; for ( int i = 1 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == c ) count_c ++ ; } return count_c ; }
boolean is_valid ( String s , int len ) { for ( int i = 1 ; i < len ; i ++ ) if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) return false ; return true ; }
int count ( String s , int k ) { int n = s . length ( ) ; int d = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d += s . charAt ( i ) ; } if ( d % k == 0 ) { count ++ ; } for ( int i = k ; i < n ; i ++ ) { char prev = s . charAt ( i - k ) ; d -= prev ; d += s . charAt ( i ) ; if ( d % k == 0 ) { count ++ ; } } return count ; }
int find_substring_count ( String s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) result ++ ; while ( i < n - 1 && s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) i ++ ; } return result ; }
boolean find ( String s1 , String s2 ) { int len1 = s1 . length ( ) ; int len2 = s2 . length ( ) ; if ( len1 != len2 ) return false ; char [ ] d = new char [ len1 ] ; d [ 0 ] = s2 . charAt ( 0 ) - s1 . charAt ( 0 ) ; for ( int i = 1 ; i < len1 ; i ++ ) { if ( s1 [ i ] > s2 [ i ] ) return false ; else { d [ i ] = s2 . charAt ( i ) - s1 . charAt ( i ) ; } } for ( int i = 0 ; i < len1 - 1 ; i ++ ) { if ( d [ i ] < d [ i + 1 ] ) return false ; } return true ; }
boolean is_in_given_base ( String s , int bas ) { if ( bas > 16 ) return false ; else if ( bas <= 10 ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) { return false ; } } else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ( s . charAt ( i ) >= '0' ) && s . charAt ( i ) < '0' + bas ) { return false ; } } } return true ; }
int count_non_empty_substr ( String s ) { int n = s . length ( ) ; return n * ( n + 1 ) / 2 ; }
int even_decimal_value ( String s , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimal_value = 0 ; int power_of_2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimal_value += ( s . charAt ( k ) - '0' ) * power_of_2 ; power_of_2 *= 2 ; } if ( decimal_value % 2 == 0 ) result ++ ; } } return result ; }
int calculate ( String s ) { int ans = 6 ; for ( int i = 0 ; i < 10 ; i ++ ) { for ( int j = 0 ; j < 10 ; j ++ ) { for ( int k = 0 ; k < 10 ; k ++ ) { for ( int l = 0 ; l < 10 ; l ++ ) { for ( int m = 0 ; m < 10 ; m ++ ) { for ( int n = 0 ; n < 10 ; n ++ ) { if ( j != s [ 1 ] ) - '0' ) c ++ ; if ( k != s . charAt ( 2 ) - '0' ) c ++ ; if ( l != s . charAt ( 3 ) - '0' ) c ++ ; if ( m != s . charAt ( 4 ) - '0' ) c ++ ; if ( n != s . charAt ( 5 ) - '0' ) c ++ ; if ( c < ans ) ans = c  ; } } } return ans ; }
int xor_zero ( String s ) { int one_count = 0 , zero_count = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) one_count ++ ; else zero_count ++ ; } if ( one_count % 2 == 0 ) return zero_count  ; return one_count ; }
int even_length ( String n ) { int res = n ; for ( int j = n . length ( ) - 1 ; j >= 0 ; j -- ) res += n . charAt ( j ) ; return res ; }
int count_substring_with_equal_ends ( String s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) for ( int j = i ; j < n ; j ++ ) if ( s . charAt ( i ) == s . charAt ( j ) ) result ++ ; return result ; }
double normal_slope ( double a , double b , double x1 , double y1 ) { double g = a / 2 ; double f = b / 2 ; if ( g - x1 == 0 ) return - 1 ; double slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) return - 2 ; return slope ; }
boolean orthogonality ( float x1 , float y1 , float x2 , float y2 , float r1 , float r2 ) { float dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) return true ; else return false ; }
int find_area_shaded ( int a ) { int sq_area = a * a ; double semi_circle_area = ( 3.14 * ( a * a ) / 8 ) ; int shaded_area = 4 * semi_circle_area - sq_area  ; return shaded_area ; }
int factorial ( int a , int b ) { int res = 1 ; for ( int i = 1 ; i <= a ; i ++ ) res = res * i ; for ( int i = 1 ; i <= b ; i ++ ) res = res / i ; for ( int i = 1 ; i <= a ; i ++ ) res = res / i ; for ( int i = 1 ; i <= b ; i ++ ) res = res / i ; return res ; }
int factor_tree ( int n ) { int height = 0 ; while ( n > 1 ) { boolean flag = false ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( flag == false ) break ; } return height ; }
String find_if_possible ( int n , String s , int x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) return "Yes" ; if ( n == 1 ) { if ( s == x ) return "Yes" ; else return "No" ; } if ( n == 2 ) { int c = ( s - x ) / 2 ; int a = c , b = c ; a += x ; if ( a ^ b ) == x ) return "Yes" ; else return "No" ; } } else return "No" ; }
int maximum_triplet_xor ( int a , int b , int c ) { int ans = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int cur = 1 << i ; if ( a >= cur ) { ans += cur ; a -- ; } else if ( b >= cur ) { ans += cur ; b -- ; } else if ( c >= cur ) { ans += cur ; c -- ; } } return ans ; }
int item_type ( int n ) { int count = 0 ; int day = 1 ; while ( count + day * ( day + 1 ) / 2 < n ) { count += day * ( day + 1 ) / 2 ; day ++ ; } for ( int type = day ; type >= 1 ; type -- ) { count += type ; if ( count >= n ) return type ; } return 0 ; }
int max_gcd_in_range ( int l , int r ) { int ans = 1 ; for ( int z = r ; z >= l ; z -- ) { if ( r / z - ( l - 1 ) / z > 1 ) { ans = z ; break ; } } return ans ; }
int sum_of_digits ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += ( n % 10 ) ; n /= 10 ; } return sum ; }
boolean is_rep_unit_num ( int n , int b ) { int length = 0 , count_one = 0 ; while ( n != 0 ) { int r = n % b ; length ++ ; if ( r == 1 ) { count_one ++ ; } n = n / b  ; } return count_one >= 3 && count_one == length ; }
boolean is_straigh_line_num ( int n ) { if ( n <= 99 ) return false ; String s = Integer . toString ( n , 2 ) ; int d = s . charAt ( 1 ) - s . charAt ( 0 ) ; for ( int i = 2 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) - s . charAt ( i - 1 ) != d ) return false ; } return true ; }
int get_count ( int d , int n ) { int no = n / d ; int result = no ; for ( int p = 2 ; p * p <= no ; p ++ ) { if ( no % p == 0 ) { while ( no % p == 0 ) no /= p ; } result -= result / p ; } } if ( no > 1 ) result -= result / no ; return result ; }
boolean is_even_parity ( int x ) { int parity = 0 ; while ( x != 0 ) { if ( ( x & 1 ) > 0 ) parity += 1 ; x = x >> 1 ; } if ( parity % 2 == 0 ) return true ; else return false ; }
int is_perfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) sum = sum + i + n / i ; else sum = sum + i ; } } if ( sum == n && n != 1 ) return n ; return 0 ; }
int log_a_to_base_b ( int a , int b ) { return 1 + log_a_to_base_b ( a / b , b ) ; }
int using_binary_search ( int start , int end , int n , String s ) { if ( start >= end ) { return start ; } int mid = start + ( end - start ) / 2 ; int total_sum = ( n * ( n + 1 ) ) / 2 ; int mid_sum = ( mid * ( mid + 1 ) ) / 2 ; if ( total_sum - mid_sum <= s ) { return using_binary_search ( start , mid , n , s ) ; } return using_binary_search ( mid + 1 , end , n , s ) ; }
String min_int ( String s ) { List < Character > s1 = new ArrayList < Character > ( s ) ; for ( int i = 0 ; i < s1 . size ( ) ; i ++ ) { if ( s1 . charAt ( i ) >= '5' ) s1 . add ( s1 . charAt ( i ) - '0' ) ; } if ( s1 . charAt ( 0 ) == '0' ) s1 . add ( '9' ) ; return "" . join ( s1 ) ; }
int count_triplets ( int a , int b , int c ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { for ( int k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) ans ++ ; } } } return ans ; }
boolean topsy_turvy ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '2' s . charAt ( i ) == '4' s . charAt ( i ) == '5' || s . charAt ( i ) == '6' || s . charAt ( i ) == '7' || s . charAt ( i ) == '9' ) return false ; } return true ; }
int sum_of_last_dig ( int n , int m ) { int sum = 0 ; int k = n / m ; int [ ] arr = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ] ; } int rem = k % 10 ; int ans = k / 10 * sum ; for ( int i = 0 ; i < rem ; i ++ ) { ans += arr [ i ]  ; } return ans ; }
int total_pay ( int total_items , int price_of_one_item , int n , int m ) { int free_items = 0 , actual = 0 ; free_items = total_items / ( n + m ) ; actual = total_items - free_items  ; amount = actual * price_of_one_item  ; return amount ; }
int min_operations ( int x , int y , int p , int q ) { if ( y % x != 0 ) return - 1 ; int d = y / x ; int a = 0 , b = 0 ; while ( d % p == 0 ) d /= p ; a ++ ; } b = 0 ; while ( d % q == 0 ) d /= q ; b ++ ; if ( d != 1 ) return - 1 ; return a + b  ; }
boolean is_mersenne ( int n ) { while ( n != 0 ) { int r = n % 2 ; if ( r == 0 ) return false ; n /= 2 ; } return true ; }
int find_third_digit ( int n ) { if ( n < 3 ) return 0 ; return 1 if ( n & 1 ) == 1 ? 1 : 6 ; }
boolean is_odd_length ( int num ) { int count = 0 ; while ( num > 0 ) { num = num / 10 ; count ++ ; } if ( count % 2 != 0 ) return true ; return false ; }
boolean check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return count > 1 ; }
long bytes ( long kilobytes ) { long b = kilobytes * 1024 ; return b ; }
int octahedral_num ( int n ) { return ( n ) * ( 2 * n * n + 1 ) / 3 ; }
String check_equal ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != '1' && s . charAt ( i ) != '0' && s . charAt ( i ) != '8' ) return "No" ; } int start = 0 , end = s . length ( ) - 1 ; while ( start < end ) { if ( s . charAt ( start ) != s . charAt ( end ) ) return "No" ; start ++ ; end -- ; } return "Yes" ; }
boolean is_undulating ( String n ) { if ( n . length ( ) <= 2 ) return false ; for ( int i = 2 ; i < n . length ( ) ; i ++ ) if ( n . charAt ( i - 2 ) != n . charAt ( i ) ) return false ; return true ; }
int first_digit ( int n ) { while ( n >= 10 ) n /= 10 ; return n ; }
int count_digit ( int n ) { if ( n == 0 ) return 0 ; return 1 + count_digit ( n / 10 ) ; }
boolean is_divisible_by_5 ( String s ) { int n = s . length ( ) ; return s . charAt ( n - 1 ) == '0' || s . charAt ( n - 1 ) == '5' ; }
int inv ( int a , int m ) { int m0 = m , t , q ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) return 0 ; while ( a > 1 ) { q = a / m ; t = m  ; m = a % m ; a = t  ; t = x0  ; x0 = x1 - q * x0 ; x1 = t  ; } if ( x1 < 0 ) x1 = x1 + m0  ; return x1 ; }
boolean only_first_and_last_are_set ( int n ) { if ( n == 1 ) return true ; if ( n == 2 ) return false ; return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
int divide ( int dividend , int divisor ) { int sign = - 1 if ( ( dividend < 0 ) ^ ( divisor < 0 ) ) { int digit = 0 ; for ( int i = 31 ; i >= 0 ; i -- ) { if ( temp + ( divisor << i ) <= dividend ) { temp += divisor << i ; quotient |= 1 << i ; } } if ( sign == - 1 ) quotient = - quotient  ; return quotient ; }
String find_profession ( int level , int pos ) { if ( level == 1 ) return 'e' ; if ( find_profession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) return 'd' ; return 'e' if ( pos % 2 == 1 ) return 'd' ; }
boolean has_close_elements ( int numbers [ ] , int threshold ) { for ( int i = 0 ; i < numbers . length ; i ++ ) { for ( int j = i + 1 ; j < numbers . length ; j ++ ) { int distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) return true ; } } return false ; }
int truncate_number ( int number ) { return number % 1 ; }
boolean below_zero ( int [ ] operations ) { int balance = 0 ; for ( int op = 0 ; op < operations . length ; op ++ ) balance += op ; if ( balance < 0 ) return true ; return false ; }
int mean_absolute_deviation ( int [ ] numbers ) { int sum_num = 0 ; for ( int num = 0 ; num < numbers . length ; num ++ ) { sum_num += num ; } int mean = sum_num / numbers . length ; int sum_abs_diff = 0 ; for ( int num = 0 ; num < numbers . length ; num ++ ) { sum_abs_diff += Math . abs ( num - mean ) ; } return sum_abs_diff / numbers . length ; }
int intersperse ( int numbers [ ] , String delimiter ) { int result [ ] = new int [ 2 * N ] ; if ( numbers == null ) return result ; for ( int i = 0 ; i < numbers . length ( ) - 1 ; i ++ ) { result [ i ] = numbers [ i ] ; result [ delimiter ] = delimiter ; } result [ numbers . length - 1 ] = numbers [ - 1 ] ; return result ; }
int sum_product ( int [ ] numbers ) { int sum_value = 0 , prod_value = 1 ; for ( int n = 1 ; n < numbers . length ; n ++ ) { sum_value += n ; prod_value *= n ; } return [ sum_value , prod_value ] ; }
List < String > all_prefixes ( String str ) { List < String > result = new ArrayList < > ( ) ; for ( int i = 1 ; i <= str . length ( ) ; i ++ ) { result . add ( str . charAt ( i ) ) ; } return result ; }
int parse_music ( String music_string ) { List < Integer > current = new ArrayList < > ( ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < music_string . length ( ) ; i ++ ) { if ( i == music_string . length ( ) music_string . charAt ( i ) == " " ) { if ( "" . join ( current ) == "o" ) result . add ( 4 ) ; if ( "" . join ( current ) == "o|" ) result . add ( 2 ) ; if ( "" . join ( current ) == ".|" ) result . add ( 1 ) ; current . clear ( ) ; } else { current . add ( music_string . charAt ( i ) ) ; } } return result ; }
int strlen ( String s ) { return s . length ( ) ; }
List < Integer > factorize ( int n ) { List < Integer > factors = new ArrayList < > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { factors . add ( i ) ; n /= i ; } else { i ++ ; } } return factors ; }
String concatenate ( String ... strings ) { List < String > result = new ArrayList < > ( ) ; for ( String s : strings ) result . add ( s ) ; return "" . join ( result ) ; }
List < Integer > get_positive ( Integer l ) { List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . length ( ) ; i ++ ) { if ( l . charAt ( i ) > 0 ) result . add ( l . charAt ( i ) ) ; } return result ; }
int sort_even ( String l ) { List < Integer > evens = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . length ( ) ; i ++ ) evens . add ( l . charAt ( i ) ) ; Arrays . sort ( evens ) ; int result [ ] = new int [ 2 * l . length ( ) ; for ( int i = 0 ; i < l . length ( ) ; i ++ ) { if ( i % 2 == 0 ) result . add ( evens . get ( i / 2 ) ) ; if ( i % 2 == 1 ) result . add ( l . charAt ( i ) ) ; } return result ; }
String decode_cyclic ( String s ) { List < Integer > output = new ArrayList < > ( ) ; for ( int i = 0 ; i <= s . length ( ) - 3 ; ) { int x = s . charAt ( i + 2 ) + s . charAt ( i : i + 2 ) ; output . add ( x ) ; i += 3 ; } return "" . join ( output ) + s . substring ( i : ] ; }
int car_race_collision ( int n ) { return n * n ; }
int incr_list ( int l [ ] ) { int result [ ] = new int [ 2 * l . length ] ; for ( int i = 0 ; i < l . length ; i ++ ) result [ i ] = i + 1 ; return result ; }
boolean pairs_sum_to_zero ( int l [ ] ) { for ( int i = 0 ; i < l . length ; i ++ ) { for ( int j = i + 1 ; j < l . length ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) return true ; } } return false ; }
String change_base ( int x , int b ) { List < String > ret = new ArrayList < > ( ) ; while ( x > 0 ) { ret . add ( x % b ) ; x /= b ; } return "" . join ( ret ) ; }
int median ( String l ) { Arrays . sort ( l ) ; if ( l . length ( ) % 2 == 1 ) return l . charAt ( l . length ( ) / 2 ) ; else return l . charAt ( l . length ( ) / 2 - 1 ) + l . charAt ( l . length ( ) / 2 ) ; }
String decode_shift ( String s ) { List < Character > result = new ArrayList < Character > ( ) ; for ( char ch = 0 ; ch < s . length ( ) ; ch ++ ) { int w = ( ch - '0' ) + 21 - 'a' ; result . add ( ch ) ; } return "" . join ( result ) ; }
boolean below_threshold ( int l [ ] , int t ) { for ( int n = 0 ; n < l . length ; n ++ ) if ( n >= t ) return false ; return true ; }
boolean correct_bracketing ( int [ ] brackets ) { int depth = 0 ; for ( int b = 0 ; b < brackets . length ; b ++ ) { if ( b == "<" ) depth ++ ; else depth -- ; } if ( depth < 0 ) return false ; return depth == 0 ; }
boolean monotonic ( String l ) { int incr = 0 , decr = 0 ; for ( int i = 1 ; i < l . length ( ) ; i ++ ) { if ( l . charAt ( i ) > l . charAt ( i - 1 ) ) incr = 1 ; if ( l . charAt ( i ) < l . charAt ( i - 1 ) ) decr = 1 ; } return incr + decr != 2 ; }
List < Integer > derivative ( int xs [ ] ) { List < Integer > result = new ArrayList < > ( ) ; for ( int i = 1 ; i < xs . length ; i ++ ) result . add ( i * xs [ i ] ) ; return result ; }
int vowels_count ( String s ) { String vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch = 0 ; ch < s . length ( ) ; ch ++ ) { if ( ch in vowels ) { count ++ ; } } if ( s . charAt ( - 1 ) == "y" s . charAt ( - 1 ) == "Y" ) { count ++ ; } return count ; }
int digit_sum ( String s ) { int sum = 0 ; for ( char c = '0' ; c < '9' ; c ++ ) { if ( c . isupper ( ) ) sum += c ; } return sum ; }
int fruit_distribution ( String s , int n ) { int num1 [ ] = new int [ 2 * n ] ; int num2 [ ] = new int [ 2 * n ] ; boolean flag = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '1' ) { if ( flag == 0 ) { num1 . add ( s . charAt ( i ) ) ; } if ( flag == 1 ) { num2 . add ( s . charAt ( i ) ) ; } } else if ( flag && num1 . length ( ) > 0 ) flag = true ; } return n - Integer . MAX_VALUE ; }
int pluck ( int arr [ ] ) { int result [ ] = new int [ 2 * N ] ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result == null ) result . add ( arr [ i ] ) ; result . add ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } return result ; }
List < Integer > strange_sort_list ( int lst [ ] ) { List < Integer > res = new ArrayList < > ( ) ; Arrays . sort ( res ) ; int l = 0 , r = lst . length - 1 ; while ( l < r ) { res . add ( lst [ l ] ) ; l ++ ; res . add ( lst [ r ] ) ; r -- ; } if ( l == r ) { res . add ( lst [ l ] ) ; } return res ; }
double triangle_area ( double a , double b , double c ) { if ( a + b <= c b <= c c <= b b + c <= a ) return - 1.0 ; double s = ( a + b + c ) / 2 ; double area = Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; return area ; }
boolean will_it_fly ( String q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . length ( ) ; i ++ ) { if ( q . charAt ( i ) != q . charAt ( - i - 1 ) ) return false ; sum += q . charAt ( i ) ; } return sum <= w ; }
boolean is_cube ( int a ) { a = Math . abs ( a ) ; int i = ( int ) Math . sqrt ( a ) ; return i * 3 == a ; }
int hex_key ( int num ) { String key = "2357BD" ; int total = 0 ; for ( int c = 0 ; c < num ; c ++ ) { if ( c == key ) total ++ ; } return total ; }
String decimal_to_binary ( int dec ) { String ans [ ] = new String [ 2 ] ; if ( dec != 0 ) { while ( dec > 0 ) { ans [ 0 ] = dec % 2 ; dec /= 2 ; } } else { ans += "0" ; } return "db" + "" . join ( ans ) + "db" ; }
boolean prime_length ( String s ) { int l = s . length ( ) ; if ( l < 2 ) return false ; for ( int i = 2 ; i <= l ; i ++ ) if ( l % i == 0 ) return false ; return true ; }
int starts_one_ends ( int n ) { if ( n < 1 ) return 0 ; if ( n == 1 ) return 1 ; return 18 * ( 10 * ( n - 2 ) ) ; }
int add ( String lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . length ( ) ; i += 2 ) { if ( lst . charAt ( i ) % 2 == 0 ) sum += lst . charAt ( i ) ; } return sum ; }
List < Integer > get_row ( int lst [ ] , int x ) { List < Integer > coords = new ArrayList < > ( ) ; for ( int i = 0 ; i < lst . length ; i ++ ) { for ( int j = 0 ; j < lst [ i ] . length ( ) - 1 ; j -- ) { if ( lst [ i ] [ j ] == x ) { coords . add ( [ i , j ] ) ; } } } return coords ; }
int next_smallest ( int lst [ ] ) { Arrays . sort ( lst ) ; for ( int i = 1 ; i < lst . length ; i ++ ) if ( lst [ i ] != lst [ i - 1 ] ) return lst [ i ] ; return - 1 ; }
boolean any_int ( int a , int b , int c ) { if ( round ( a ) != a || round ( b ) != b || round ( c ) != c ) return false ; return a + b == c || a + c == b || b + c == a ; }
int count_up_to ( int n ) { int primes [ ] = new int [ n ] ; for ( int i = 2 ; i < n ; i ++ ) { boolean is_prime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) primes . add ( i ) ; } return primes ; }
int closest_integer ( String value ) { float w = ( float ) value ; return round ( w ) ; }
List < Integer > make_a_pile ( int n ) { List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { result . add ( n + 2 * i ) ; } return result ; }
String words_string ( String s ) { List < String > current = new ArrayList < > ( ) ; List < String > words = new ArrayList < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == " " s . charAt ( i ) == "," ) { if ( current . size ( ) > 0 ) words . add ( "" . join ( current ) ) ; current . clear ( ) ; } } else { current . add ( s . charAt ( i ) ) ; } } return words ; }
String rounded_avg ( int n , int m ) { if ( n > m ) return - 1 ; int num = ( n + m ) / 2 ; String ret [ ] = new String [ 2 ] ; while ( num > 0 ) { ret [ 0 ] = Integer . toString ( num % 2 ) ; num /= 2 ; } return "" . join ( ret ) ; }
int unique_digits ( String x ) { int digits [ ] = new int [ 2 * x . length ( ) ; for ( int n = 0 ; n < x . length ( ) ; n ++ ) { boolean is_unique = true ; for ( char c = '0' ; c < n ; c ++ ) { if ( c % 2 == 0 ) { is_unique = false ; break ; } } if ( is_unique ) { digits [ n ] = n ; } } Arrays . sort ( digits ) ; return digits ; }
int count_nums ( int arr [ ] ) { int num = 0 ; for ( int n = 0 ; n < arr . length ; n ++ ) { int neg = - 1 if ( n < 0 ) 1 ; n = Math . abs ( n ) ; int [ ] digits = new int [ 2 ] ; for ( int c = 0 ; c < n ; c ++ ) { digits . add ( c - "0" ) ; } digits [ 0 ] *= neg ; int sum = 0 ; for ( int d : digits ) { sum += d ; } if ( sum > 0 ) num ++ ; } return num ; }
boolean move_one_ball ( int arr [ ] ) { if ( arr == null ) return true ; int num = 0 ; for ( int i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) num ++ ; } if ( arr [ - 1 ] > arr [ 0 ] ) num ++ ; if ( num < 2 ) return true ; return false ; }
String exchange ( String lst1 , String lst2 ) { int odd = 0 , even = 0 ; for ( int n = 0 ; n < lst1 . length ( ) ; n ++ ) { if ( n % 2 == 1 ) odd ++ ; } for ( int n = 0 ; n < lst2 . length ( ) ; n ++ ) { if ( n % 2 == 0 ) even ++ ; } if ( even >= odd ) return "YES" ; return "NO" ; }
int odd_count ( String lst ) { int results [ ] = new int [ 2 * lst . length ] ; String original_str = "the string i of the input." ; for ( String s : lst ) { int sum = 0 ; for ( String d : s ) { if ( d . isdigit ( ) && d . charAt ( d ) % 2 == 1 ) sum ++ ; } int [ ] result = new int [ 2 * lst . length ] ; for ( String c : original_str ) { if ( c == "i" ) result . add ( Integer . toString ( sum ) ) ; else result . add ( c ) ; } results . add ( "" . join ( result ) ) ; } return results ; }
int minSubArraySum ( int nums [ ] ) { int min_sum = Integer . MAX_VALUE ; int sum = 0 ; for ( int num = 0 ; num < nums . length ; num ++ ) { sum += num ; if ( min_sum > sum ) { min_sum = sum ; } if ( sum > 0 ) sum = 0 ; } return min_sum ; }
int max_fill ( int [ ] grid , int capacity ) { int res = 0 ; for ( int well [ ] : grid ) { int sum = 0 ; for ( int n = 0 ; n < well . length ; n ++ ) sum += n ; if ( sum > 0 ) { res += ( sum - 1 ) / capacity + 1 ; } } return res ; }
int select_words ( String s , int n ) { String vowels = "aeiouAEIOU" ; List < Integer > current = new ArrayList < Integer > ( ) ; int consonant_num = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( i == s . length ( ) s . charAt ( i ) == " " ) { if ( consonant_num == n ) { result . add ( "" . join ( current ) ) ; } current . clear ( ) ; consonant_num = 0 ; } else { current . add ( s . charAt ( i ) ) ; if ( s . charAt ( i ) != vowels ) consonant_num ++ ; } } return result ; }
int solution ( String lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ( ) ; i += 2 ) { if ( lst . charAt ( i ) % 2 == 1 ) sum += lst . charAt ( i ) ; } return sum ; }
int add_elements ( int arr [ ] , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( - 99 <= arr [ i ] <= 99 ) sum += arr [ i ] ; } return sum ; }
int get_odd_collatz ( int n ) { int odd_collatz [ ] = new int [ 2 * n ] ; while ( n > 1 ) { if ( n % 2 == 1 ) { odd_collatz . add ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } odd_collatz . add ( 1 ) ; odd_collatz . sort ( ) ; return odd_collatz ; }
boolean is_sorted ( int lst [ ] ) { for ( int i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) return false ; if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) return false ; } return true ; }
String intersection ( String interval1 [ ] , String interval2 [ ] ) { int inter1 = Math . max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = Math . min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) return "NO" ; for ( int i = 2 ; i <= l ; i ++ ) if ( l % i == 0 ) return "NO" ; return "YES" ; }
int prod_signs ( int arr [ ] ) { if ( arr == null ) return - 32768 ; int sum = 0 ; int prods = 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) { sum += Math . abs ( i ) ; if ( i == 0 ) prods = 0 ; if ( i < 0 ) prods = - prods  ; } return sum * prods ; }
int minPath ( int grid [ ] [ ] , int k ) { int n = grid . length ; int min_num = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { int tmp [ ] = new int [ n ] ; if ( i != 0 ) { tmp . add ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . add ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . add ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . add ( grid [ i ] [ j + 1 ] ) ; } min_num = Math . min ( tmp ) ; } } int ans [ ] = new int [ k ] ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) ans [ i ] = 1 ; else ans [ i ] = min_num ; } } return ans ; }
int digits ( String n ) { int prod = 1 ; for ( char digit = "0" ; digit < n . length ( ) ; digit ++ ) { if ( digit . charAt ( digit ) % 2 == 1 ) { if ( prod == 0 ) prod == 1 ; prod *= digit - "0" ; } } return prod ; }
boolean is_nested ( String s ) { int count = 0 ; int max_count = 0 ; for ( char ch = 0 ; ch < s . length ( ) ; ch ++ ) { if ( ch == "[" ) { count ++ ; } if ( ch == "]" ) { count -- ; } if ( count < 0 ) { count = 0 ; } if ( count > max_count ) { max_count = count ; } if ( count <= max_count - 2 ) return true ; } return false ; }
int sum_squares ( int [ ] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i ++ ) sum += Math . ceil ( i ) * Math . ceil ( i ) ; return sum ; }
int can_arrange ( int arr [ ] ) { int index = - 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
int largest_smallest_integers ( int [ ] lst ) { int max_neg = 0 , min_pos = 0 ; for ( int n = 0 ; n < lst . length ; n ++ ) { if ( n < 0 && ( max_neg == 0 n > max_neg ) max_neg = n ; if ( n > 0 && ( min_pos == 0 n < min_pos ) min_pos = n ; } return [ max_neg , min_pos ] ; }
String fix_spaces ( String text ) { List < String > res = new ArrayList < > ( ) ; int space_len = 0 ; for ( int i = 0 ; i < text . length ( ) ; i ++ ) { if ( i == text . length ( ) i != text . length ( ) i ++ ) { res . add ( text . charAt ( i ) ) ; } else { space_len ++ ; } } return "" . join ( res ) ; }
String file_name_check ( String file_name ) { int digit_num = 0 , dot_num = 0 ; if ( file_name . length ( ) < 5 file_name . charAt ( 0 ) != '1' ) return "No" ; String suffix = file_name . charAt ( - 4 ) ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) return "No" ; for ( char c = file_name . charAt ( c - 1 ) ; c ++ ) { if ( c . isdigit ( ) ) digit_num ++ ; if ( c == '.' ) dot_num ++ ; } if ( digit_num > 3 dot_num != 1 ) return "No" ; return "Yes" ; }
int sum_squares ( int lst [ ] ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i ++ ) { if ( i % 3 == 0 ) sum += lst [ i ] * lst [ i ] ; else if ( i % 4 == 0 ) sum += lst [ i ] * lst [ i ] * lst [ i ] ; else sum += lst [ i ] ; } return sum ; }
String words_in_sentence ( String sentence ) { List < String > result = new ArrayList < > ( ) ; List < Integer > current = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < sentence . length ( ) ; i ++ ) { boolean is_prime = true ; int l = current . length ( ) ; if ( l < 2 ) is_prime = false ; for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { result . add ( "" . join ( current ) + " " ) ; } current . clear ( ) ; } else { current . add ( sentence . charAt ( i ) ) ; } } result = "" . join ( result ) ; if ( result . length ( ) > 0 ) result = result . substring ( 0 , - 1 ) ; return result ; }
boolean simplify ( String x , int n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x . charAt ( i ) == '/' ) { a = x . charAt ( 0 ) ; b = x . charAt ( i + 1 ) ; } } for ( int i = 0 ; i < n . length ( ) ; i ++ ) { if ( n . charAt ( i ) == '/' ) { c = n . charAt ( 0 ) ; d = n . charAt ( i + 1 ) ; } } return ( a * c ) % ( b * d ) == 0 ; }
int specialFilter ( String nums ) { int count = 0 ; for ( int num = 0 ; num < nums . length ( ) ; num ++ ) { String w = Integer . toString ( num ) ; if ( w . charAt ( 0 ) == 1 && w . charAt ( - 1 ) % 2 == 1 ) { count ++ ; } } } return count ; }
int get_max_triples ( int n ) { int arr [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i <= n ; i ++ ) { arr [ i ] = i * i - i + 1 ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j <= n ; j ++ ) { for ( int k = j + 1 ; k <= n ; k ++ ) { if ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) { count ++ ; } } } return count ; }
int double_the_difference ( int [ ] lst ) { int sum = 0 ; for ( int d : lst ) { int num = ( int ) Math . round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) sum += num * num ; } } return sum ; }
int compare ( String game , String guess ) { int result [ ] = new int [ 2 * N ] ; for ( int i = 0 ; i < game . length ( ) ; i ++ ) { result [ i ] = Math . abs ( game . charAt ( i ) - guess . charAt ( i ) ) ; } return result ; }
String strongest_extension ( String class_name , String [ ] extensions ) { String strongest = "" ; int max = Integer . MAX_VALUE ; for ( int extension : extensions ) { int strength = 0 ; for ( char chr = 0 ; chr < extension . length ; ++ chr ) { if ( chr . isupper ( ) ) strength ++ ; if ( chr . islower ( ) ) strength -- ; } if ( strength > max ) { max = strength ; strongest = extension  ; } } return class_name + "." + strongest ; }
String int_to_mini_roman ( int number ) { int num [ ] = { 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 10 , 9 , 5 , 4 , 1 } ; int sym [ ] = { "m" , "cm" , "d" , "cd" , "c" , "l" , "x" , "ix" , "v" , "iv" , "i" } ; int pos = 0 ; List < Integer > res = new ArrayList < > ( ) ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res . add ( sym [ pos ] ) ; number -= num [ pos ] ; } if ( number > 0 ) pos ++ ; } return "" . join ( res ) ; }
int eat ( int number , int need , int remaining ) { return [ number + remaining , 0 ] if ( need > remaining ) return [ number + need , remaining - need ] ; }
int do_algebra ( int ops [ ] , int operands [ ] ) { int nums [ ] = new int [ operands . length ] ; List < Integer > current_ops = new ArrayList < Integer > ( ) ; int i = current_ops . size ( ) - 1 ; while ( i >= 0 ) { if ( current_ops [ i ] == "**" ) { nums [ i ] = Math . pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . remove ( i ) ; } i -- ; } for ( int i = 0 ; i < current_ops . size ( ) ; i ++ ) { if ( current_ops [ i ] == "*" ) { nums [ i ] *= nums [ i + 1 ] ; nums . remove ( i + 1 ) ; current_ops . remove ( i ) ; } else if ( current_ops [ i ] == "//" ) { nums [ i ] /= nums [ i + 1 ] ; nums . remove ( i ) ; } else { i ++ ; } } for ( int i = 0 ; i < current_ops . size ( ) ; i ++ ) { if ( current_ops [ i ] == "+" ) { nums [ i ] += nums [ i + 1 ] ; nums . remove ( i + 1 ) ; current_ops . remove ( i ) ; } else { i ++ ; } } return nums [ 0 ] ; }
List < Integer > generate_integers ( int a , int b ) { int lower = Math . max ( 2 , min ( a , b ) ) ; int upper = Math . min ( 8 , max ( a , b ) ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = lower ; i <= upper ; i += 2 ) result . add ( i ) ; return result ; }
boolean isStepNum ( int n ) { int prev_digit = - 1 ; while ( n > 0 ) { int cur_digit = n % 10 ; if ( prev_digit == - 1 ) prev_digit = cur_digit  ; else if ( Math . abs ( prev_digit - cur_digit ) != 1 ) return false ; prev_digit = cur_digit  ; n /= 10 ; } return true ; }
int num_of_ways ( int n , int k ) { int p = 1 ; if ( k % 2 == 1 ) p = - 1 ; return ( ( n - 1 ) * k + p * ( n - 1 ) ) / n ; }
List < Integer > find_divisors ( int n ) { List < Integer > v = new ArrayList < > ( ) ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . add ( i ) ; v . add ( n / i ) ; } } } return v ; }
int egg_drop ( int n , int k ) { if ( k == 1 k == 0 ) return k  ; if ( n == 1 ) return k  ; int min = Integer . MAX_VALUE ; for ( int x = 1 ; x <= k ; x ++ ) { int res = Math . max ( egg_drop ( n - 1 , x - 1 ) , egg_drop ( n , k - x ) ) ; if ( res < min ) min = res ; } return min + 1 ; }
boolean is_power_of_two ( int n ) { return Math . ceil ( Math . log2 ( n ) ) == Math . floor ( Math . log2 ( n ) ) ; }
int shortest_palindrome ( String s ) { int n = s . length ( ) ; List < Integer > v = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i , r = i ; int ans1 = "" , ans2 = "" ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans1 += s . charAt ( l ) ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans2 += s . charAt ( l ) ; l -- ; r ++ ; } v . add ( ans1 ) ; v . add ( ans2 ) ; } int ans = v [ 0 ] ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . charAt ( i ) != "" ) ans = Math . min ( ans , v . charAt ( i ) ) ; } return ans ; }
int minimum_adjacent_difference ( int a [ ] , int n , int k ) { int min_diff = Integer . MAX_VALUE ; for ( int i = 0 ; i < k + 1 ; i ++ ) { int max_diff = - Integer . MAX_VALUE ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i ; p ++ ) max_diff = Math . max ( max_diff , a [ p + 1 ] - a [ p ] ) ; } min_diff = Math . min ( min_diff , max_diff ) ; } return min_diff ; }
int cal ( int a [ ] , int mid ) { int chocolate = 0 ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( i >= mid ) chocolate += i - mid ; } return chocolate ; }
boolean check ( int v , int a [ ] , int m ) { int tec = 0 , ans = 0 ; int [ ] b = new int [ a . length + 3 ] ; for ( int i = 0 ; i < a . length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; }
int largest_num ( int arr [ ] ) { int res = 0 ; Arrays . sort ( arr ) ; int l = 0 , r = arr . length - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) l ++ ; else r -- ; } return res ; }
int binary_search ( int p [ ] , int n ) { int i = 0 , j = p . length - 1 ; int index = - 1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
int find_min_length ( int arr [ ] ) { int index = arr . length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; }
int min_digits ( int n , int k ) { int digits_num = ( int ) Math . log10 ( n ) + 1 ; int temp_sum = 0 ; int result = 0 ; int x = 0 , v = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { for ( ; temp > 0 ; v = n / ( 10 * ( temp - 1 ) ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v /= 10 ; v ++ ; result = v * ( 10 * temp ) ; break ; } temp -- ; } x = result - n ; return x ; }
int check_for_perfect_square ( int arr [ ] , int i , int j ) { int mid = 0 , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) return mid ; else if ( mid * mid > sum ) low = mid - 1 ; else high = mid + 1 ; } return - 1 ; }
int min_flips ( int mat [ ] [ ] , String s ) { int n = mat . length ; int m = mat [ 0 ] . length ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s . charAt ( i + j ) - '0' ) { count ++ ; } } } return count ; }
int construct_tree ( int n , int edges [ ] ) { int adjl [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { adjl [ i ] = new int [ n ] ; } for ( int e : edges ) { int u = e [ 0 ] , v = e [ 1 ] ; adjl [ u ] . add ( v ) ; adjl [ v ] . add ( u ) ; } return adjl ; }
int find_sum_of_values ( int v , int parent , int values_children [ ] ) { int cur_node = v  ; int Sum = 0 ; while ( cur_node != - 1 ) { Sum += values_children [ cur_node ]  ; cur_node = parent [ cur_node ]  ; } return Sum ; }
int get_distinct ( int d , int count ) { int num = 0 ; count = ( int ) Math . sqrt ( count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; }
boolean is_increasing ( int arr [ ] ) { for ( int i = 0 ; i < arr . length - 1 ; i ++ ) if ( arr [ i ] > arr [ i + 1 ] ) return false ; return true ; }
int min_adj_swaps ( int mat [ ] [ ] ) { int n = mat . length ; int cnt_zero [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 ; j -- ) { if ( mat [ i ] [ j ] != 0 ) { break ; } cnt_zero [ i ] ++ ; } } int cnt_swaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cnt_zero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) return - 1 ; while ( first > i ) { cnt_zero [ first ] = cnt_zero [ first - 1 ] ; cnt_zero [ first - 1 ] = cnt_zero [ first ] ; first -- ; cnt_swaps ++ ; } } return cnt_swaps ; }
int solve ( int values [ ] , int salary [ ] , int mod ) { int ret = 1 ; int amt = 0 ; Arrays . sort ( values ) ; Arrays . sort ( salary ) ; while ( salary . size ( ) > 0 ) { while ( values . size ( ) && values [ - 1 ] >= salary [ - 1 ] ) { amt ++ ; values . remove ( ) ; } if ( amt == 0 ) return 0 ; ret *= amt ; amt -- ; ret %= mod ; salary . remove ( ) ; } return ret ; }
int organize_in_order ( int vec [ ] , int op [ ] , int n ) { int result [ ] = new int [ n ] ; Arrays . sort ( result ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result [ k ] = vec [ i ]  ; i ++ ; } else { result [ k ] = vec [ j ] ; j -- ; } k ++ ; } result [ n - 1 ] = vec [ i ]  ; return result ; }
int count_points ( int n , int m , int a [ ] , int b [ ] , int x , int y ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) break ; if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; }
boolean are_same ( int a [ ] , int b [ ] ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; return a == b ; }
int count_number_of_strings ( String s ) { int n = s . length ( ) - 1 ; int count = 2 * n ; return count ; }
List < Integer > prime_power ( int x ) { List < Integer > prime_pow = new ArrayList < > ( ) ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } prime_pow . add ( p ) ; } } if ( x > 1 ) prime_pow . add ( x ) ; return prime_pow ; }
boolean is_perfect ( int n0 ) { int n = ( int ) Math . sqrt ( n0 ) ; if ( Math . floor ( n ) != Math . ceil ( n ) ) return 0 ; return 1 ; }
int find_sum ( int l , int r ) { int [ ] arr = new int [ r + 1 ] ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . add ( i + x ) ; if ( i + 1 <= r ) { arr . add ( i + 1 + x ) ; if ( i + 1 <= r ) { arr . add ( i + 1 + x ) ; } x *= - 1 ; i ++ ; } int sum = 0 ; for ( i = l ; i <= r ; i ++ ) { sum += arr [ i ] ; } return sum ; }
int results ( int n , int k ) { return ( n ) * ( 1.0 / 2 * k ) ; }
List < Integer > factors ( int n ) { List < Integer > v = new ArrayList < > ( ) ; v . add ( 1 ) ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) v . add ( i ) ; if ( n / i != i ) v . add ( n / i ) ; } } return v ; }
int smallest_num ( int n ) { long x = ( long ) Math . pow ( ( n - 1 ) / 2.0 , 2 ) ; return Math . ceil ( x ) ; }
int smallest ( String s ) { int a [ ] = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = s . charAt ( i ) - '0' ; } int [ ] b = new int [ 2 * a . length ] ; for ( int i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] % 2 != 0 ) b . add ( a [ i ] ) ; } Arrays . sort ( b ) ; if ( b . size ( ) > 1 ) return b [ 0 ] * 10 + b [ 1 ]  ; return - 1 ; }
double diagonals ( double a , double b , double c , double d ) { double ans [ ] = new double [ 2 * N ] ; ans [ 0 ] = Math . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ; ans [ 1 ] = Math . sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ; return ans ; }
int find_number_of_digits ( int n , int base ) { int dig = ( int ) Math . log ( n ) / Math . log ( base ) ; return dig ; }
int n_gon ( int n ) { int pro_angle_var = 0 ; if ( n % 4 == 0 ) { pro_angle_var = Math . pi * ( 180.0 / n ) / 180 ; } else { pro_angle_var = Math . pi * ( 180.0 / ( 2 * n ) ) / 180 ; } int neg_x = 1.0e +99 ; int pos_x = - 1.0e +99 ; int neg_y = 1.0e +99 ; int pos_y = - 1.0e + 99 ; for ( int j = 0 ; j < n ; j ++ ) { int px = Math . cos ( 2 * math . pi * j / n + pro_angle_var ) ; int py = Math . sin ( 2 * math . pi * j / n + pro_angle_var ) ; neg_x = Math . min ( neg_x , px ) ; pos_x = Math . max ( pos_x , py ) ; pos_y = Math . max ( pos_y , py ) ; } int opt2 = Math . max ( pos_x - neg_x , pos_y - neg_y ) ; return opt2 / Math . sin ( math . pi / n ) / 2 ; }
int find_max_k ( int n ) { int p = ( int ) Math . log2 ( n ) ; return 2 * p ; }
int nth_fibo ( int n ) { int a = ( 5 * 0.5 + 1 ) / 2 ; int b = ( - 5 * 0.5 + 1 ) / 2 ; int r = 5 * 0.5 ; int ans = ( a * n - b * n ) / r ; return ans ; }
int find_prob ( int l , int r ) { int count_of_ps = Math . floor ( Math . sqrt ( r ) ) - Math . ceil ( Math . sqrt ( l ) ) + 1 ; int total = r - l + 1 ; int prob = count_of_ps / total ; return prob ; }
int previous_fibonacci ( int n ) { int a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return round ( a ) ; }
int dist_prime ( int arr [ ] , int all_primes ) { int list1 [ ] = new int [ 2 * all_primes ] ; for ( int i = 0 ; i < all_primes ; i ++ ) { for ( int j = 0 ; j < arr . length ; j ++ ) { if ( j % i == 0 ) { list1 . add ( i ) ; break ; } } } return list1 ; }
int [ ] get_array ( int n ) { int ans [ ] = new int [ 2 * n ] ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans [ p2 ] = p2 ; } n >>= 1 ; p2 *= 2 ; } return ans ; }
int maximum_length ( String a ) { int counts [ ] = new int [ 11 ] ; int ans = 0 ; for ( int index = 0 ; index < a . length ( ) ; index ++ ) { counts [ a . charAt ( index ) ] ++ ; } int [ ] k = new int [ 2 ] ; for ( int i = 0 ; i < counts . length ; i ++ ) { if ( i != 0 ) k . add ( i ) ; } Arrays . sort ( k ) ; if ( k . size ( ) == 1 || ( k . charAt ( 0 ) == k . charAt ( - 2 ) && k . charAt ( - 1 ) - k . charAt ( - 2 ) == 1 ) ans = index ; } return ans + 1 ; }
int max_edges ( int n ) { int edges = ( int ) Math . floor ( n * n / 4 ) ; return edges ; }
int find_k ( int n , int k ) { int a [ ] = new int [ n + 1 ] ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a [ i ] = i ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a [ i ] = i ; } } return a [ k - 1 ] ; }
boolean is_keith ( int x , int temp ) { List < Integer > terms = new ArrayList < > ( ) ; int n = 0 ; while ( temp > 0 ) { terms . add ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } Arrays . sort ( terms ) ; int next_term = 0 ; for ( int i = 0 ; i < n ; i ++ ) { next_term += terms [ i - j ] ; } terms . add ( next_term ) ; } return next_term == x ; }
boolean factors ( int n , int k ) { List < Integer > v = new ArrayList < > ( ) ; while ( n % 2 == 0 ) { v . add ( 2 ) ; n /= 2 ; } if ( v . size ( ) >= k ) return true ; for ( int i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n = n / i ; v . add ( i ) ; } if ( v . size ( ) >= k ) return true ; } if ( n > 2 ) { v . add ( n ) ; } if ( v . size ( ) >= k ) return true ; } return false ; }
void separate_paren_groups ( String paren_string ) { List < String > all_parens = new ArrayList < > ( ) ; List < Integer > current_paren = new ArrayList < > ( ) ; int current_depth = 0 ; for ( char c = 0 ; c < paren_string . length ( ) ; c ++ ) { if ( c == "(" ) { current_depth ++ ; current_paren . add ( c ) ; } else if ( c == ")" ) { current_depth -- ; current_paren . add ( c ) ; if ( current_depth == 0 ) { all_parens . add ( "" . join ( current_paren ) ) ; current_paren . clear ( ) ; } } } return all_parens ; }
List < Integer > parse_nested_parens ( String paren_string ) { List < Integer > all_levels = new ArrayList < > ( ) ; int level = 0 , max_level = 0 ; for ( int i = 0 ; i < paren_string . length ( ) ; i ++ ) { char chr = paren_string . charAt ( i ) ; if ( chr == "(" ) { level ++ ; if ( level > max_level ) max_level = level ; } if ( chr == ")" ) { level -- ; if ( level == 0 ) { all_levels . add ( max_level ) ; max_level = 0 ; } } } return all_levels ; }
List < String > filter_by_substring ( List < String > strings , String substring ) { List < String > result = new ArrayList < > ( ) ; for ( String s : strings ) { if ( substring . equals ( s ) ) result . add ( s ) ; } return result ; }
int rolling_max ( int [ ] numbers ) { int running_max = 0 ; List < Integer > result = new ArrayList < > ( ) ; for ( int n = 0 ; n < numbers . length ; n ++ ) { if ( n > running_max ) running_max = n ; result . add ( running_max ) ; } return result ; }
String make_palindrome ( String s ) { if ( s == null ) return "" ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String r_str = s . charAt ( i ) ; if ( r_str == r_str . charAt ( : - 1 ) ) { String n_str = s . substring ( 0 , i ) ; int n2_str = n_str . substring ( : : - 1 ) ; return s + n2_str ; } } return s . substring ( : - 2 ) + s . substring ( : : - 1 ) ; }
String string_xor ( String a , String b ) { List < String > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) result . add ( "0" ) ; else result . add ( "1" ) ; } return "" . join ( result ) ; }
String longest ( String s ) { if ( s . length ( ) == 0 ) return s . length ( ) ; int max_len = Math . max ( s . length ( ) , max_len ) ; for ( String s : strings ) { if ( s . length ( ) == max_len ) return s . length ( ) ; } return "" ; }
String string_sequence ( int n ) { String s = new String [ n + 1 ] ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( i + " " ) ; } s . add ( str ( n ) ) ; return "" . join ( s ) ; }
int count_distinct_characters ( String s ) { HashSet < Character > distinct = new HashSet < Character > ( ) ; for ( char c = 0 ; c < s . length ( ) ; c ++ ) { distinct . add ( c ) ; } return distinct . size ( ) ; }
int how_many_times ( String s , String sub ) { int times = 0 ; for ( int i = 0 ; i < s . length ( ) - sub . length ( ) ; i ++ ) { if ( s . charAt ( i ) - sub . charAt ( i ) == sub ) times ++ ; } return times ; }
String sort_numbers ( String numbers ) { int to_num [ ] = { "zero" : 0 , "one" : 1 , "two" : 2 , "three" : 3 , "four" : 4 , "five" : 5 , "six" : 6 , "seven" : 7 , "eight" : 8 , "nine" : 9 } ; int from_num [ ] = { 0 : "zero" , 1 : "one" , 2 : "two" , 3 : "three" , 4 : "four" , 5 : "five" , 6 : "six" , 7 : "seven" , 8 : "eight" } int [ ] ints = new int [ 1 ] ; List < Integer > current = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { result . add ( from_num [ ints . get ( i ) ] ) ; if ( i != ints . size ( ) - 1 ) result . add ( " " ) ; } return "" . join ( result ) ; }
int find_closest_elements ( int numbers [ ] ) { int closest_pair [ ] = new int [ numbers . length ] ; int distance = Math . abs ( closest_pair [ 0 ] - closest_pair [ 1 ] ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { for ( int j = i + 1 ; j < numbers . length ; j ++ ) { if ( Math . abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closest_pair [ 0 ] = numbers [ i ] ; closest_pair [ 1 ] = numbers [ j ] ; distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; } } Arrays . sort ( closest_pair ) ; return closest_pair ; }
List < Integer > rescale_to_unit ( int [ ] numbers ) { int min_num = min ( numbers ) ; int max_num = max ( numbers ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int n = 0 ; n < numbers . length ; n ++ ) { result . add ( ( n - min_num ) / ( max_num - min_num ) ) ; } return result ; }
int [ ] filter_integers ( int [ ] values ) { int result [ ] = new int [ 2 * N ] ; for ( int e = 0 ; e < N ; e ++ ) { if ( isinstance ( e , int ) ) result [ e ] = e ; } return result ; }
int remove_duplicates ( int [ ] numbers ) { HashMap < Integer , Integer > counter = new HashMap < > ( ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { counter . put ( i , counter . get ( i , 0 ) + 1 ) ; } int [ ] result = new int [ 2 * numbers . length ] ; for ( int i = 0 ; i < numbers . length ; i ++ ) { if ( counter . get ( i ) == 1 ) result . add ( i ) ; } return result ; }
String flip_case ( String s ) { List < Character > result = new ArrayList < Character > ( ) ; for ( char c = " " ; c < " " ; c ++ ) { if ( c . islower ( ) ) result . add ( c . toUpperCase ( ) ) ; else result . add ( c . toLowerCase ( ) ) ; } return "" . join ( result ) ; }
List < String > filter_by_prefix ( String strings , String prefix ) { List < String > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < strings . length ( ) ; i ++ ) { if ( strings . charAt ( i ) . startsWith ( prefix ) ) result . add ( strings . charAt ( i ) ) ; } return result ; }
int find_zero ( int xs [ ] ) { int ans = 0 ; int value = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) { value += xs [ i ] * ans * i ; } while ( Math . abs ( value ) > 1e-6 ) { int driv = 0 ; for ( int i = 1 ; i < xs . length ; i ++ ) { driv += xs [ i ] * ans * ( i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) { value += xs [ i ] * ans * i ; } } return ans ; }
int sort_third ( String l ) { List < Integer > thirds = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . length ( ) ; i ++ ) { thirds . add ( l . charAt ( i ) ) ; } Arrays . sort ( thirds ) ; int result [ ] = new int [ 2 * l . length ( ) ; for ( int i = 0 ; i < l . length ( ) ; i ++ ) { if ( i % 3 == 0 ) result . add ( thirds . get ( i / 3 ) ) ; else result . add ( l . charAt ( i ) ) ; } return result ; }
List < Integer > unique ( int l ) { List < Integer > result = new ArrayList < > ( l ) ; Collections . sort ( result ) ; return result ; }
int max_element ( int l ) { return Math . max ( l , 1 ) ; }
boolean triples_sum_to_zero ( int l [ ] ) { for ( int i = 0 ; i < l . length ; i ++ ) { for ( int j = i + 1 ; j < l . length ; j ++ ) { for ( int k = j + 1 ; k < l . length ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) return true ; } } return false ; }
int fib4 ( int n ) { int results [ ] = new int [ n + 1 ] ; for ( int i = 4 ; i <= n ; i ++ ) { results [ i - 4 ] += results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ; } return results [ n ] ; }
boolean is_palindrome ( String text ) { String pr = text . charAt ( : - 1 ) ; return pr == text ; }
String remove_vowels ( String text ) { List < Character > result = new ArrayList < Character > ( ) ; String vowels = "aeiou" ; for ( char ch = 0 ; ch < text . length ( ) ; ch ++ ) { if ( ch . toLowerCase ( ) != vowels ) result . add ( ch ) ; } return "" . join ( result ) ; }
boolean same_chars ( String s0 , String s1 ) { HashSet < Character > set0 = new HashSet < Character > ( ) ; for ( char c = 0 ; c < s0 . length ( ) ; c ++ ) { set0 . add ( c ) ; } HashSet < Character > set1 = new HashSet < Character > ( ) ; for ( char c = 0 ; c < s1 . length ( ) ; c ++ ) { set1 . add ( c ) ; } return set0 == set1 ; }
int common ( int l1 [ ] , int l2 [ ] ) { HashSet < Integer > us = new HashSet < Integer > ( ) ; for ( int e1 = 0 ; e1 < l1 . length ( ) ; e1 ++ ) { for ( int e2 = 0 ; e2 < l2 . length ( ) ; e2 ++ ) { if ( e1 == e2 ) us . add ( e1 ) ; } } int ret = new int [ us . size ( ) ; Arrays . sort ( ret ) ; return ret ; }
boolean correct_bracketing ( String brackets [ ] ) { int depth = 0 ; for ( char b : brackets ) { if ( b == "(" ) depth ++ ; else depth -- ; } if ( depth < 0 ) return false ; return depth == 0 ; }
String circular_shift ( String x , int shift ) { String s = x . toString ( ) ; if ( shift > s . length ( ) ) return s . substring ( : : - 1 ) ; return s . substring ( - shift : ] + s . substring ( : - shift ) ; }
int search ( String lst ) { HashMap < Integer , Integer > counter = new HashMap < > ( ) ; for ( int i = 0 ; i < lst . length ( ) ; i ++ ) { counter . put ( i , counter . get ( i , 0 ) + 1 ) ; } int ans = - 1 ; for ( int key = 0 ; key < counter . size ( ) ; key ++ ) if ( value >= key > ans ) ans = key ; return ans ; }
int smallest_change ( int arr [ ] ) { int ans = 0 ; for ( int i = 0 ; i < arr . length / 2 ; i ++ ) if ( arr [ i ] != arr [ - i - 1 ] ) ans ++ ; return ans ; }
int total_match ( String lst1 , String lst2 ) { int sum1 = 0 ; for ( String st : lst1 ) { sum1 += st . length ( ) ; } int sum2 = 0 ; for ( String st : lst2 ) { sum2 += st . length ( ) ; } return lst2 if ( sum1 > sum2 ) lst1  ; }
boolean is_happy ( String s ) { if ( s . length ( ) < 3 ) return false ; for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) return false ; return true ; }
List < String > numerical_letter_grade ( int [ ] grades ) { List < String > letter_grade = new ArrayList < > ( ) ; for ( int gpa = 0 ; gpa < grades . length ; gpa ++ ) { if ( gpa == 4.0 ) { letter_grade . add ( "A+" ) ; } else if ( gpa > 3.3 ) { letter_grade . add ( "A-" ) ; } else if ( gpa > 2.0 ) { letter_grade . add ( "B+" ) ; } else if ( gpa > 2.3 ) { letter_grade . add ( "B-" ) ; } else if ( gpa > 1.0 ) { letter_grade . add ( "C+" ) ; } else if ( gpa > 1.3 ) { letter_grade . add ( "C-" ) ; } else if ( gpa > 1.0 ) { letter_grade . add ( "D+" ) ; } else if ( gpa > 0.0 ) { letter_grade . add ( "D-" ) ; } else { letter_grade . add ( "E" ) ; } } return letter_grade ; }
String solve ( int n ) { List < String > bi_str = new ArrayList < > ( ) ; int sum = 0 ; for ( char c = 0 ; c < n ; c ++ ) { sum += c - "0" ; } while ( sum > 0 ) { bi_str . add ( 0 , Integer . toString ( sum % 2 ) ) ; sum /= 2 ; } return "" . join ( bi_str ) ; }
String anti_shuffle ( String s ) { List < String > ret = new ArrayList < > ( ) ; List < Integer > current = new ArrayList < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == " " ) { Arrays . sort ( current ) ; if ( ret == null ) ret . add ( " " ) ; ret . add ( "" . join ( current ) ) ; current . clear ( ) ; } else { current . add ( s . charAt ( i ) ) ; } } return "" . join ( ret ) ; }
int sort_array ( int array [ ] ) { if ( array == null ) return array ; if ( ( array [ 0 ] + array [ - 1 ] ) % 2 == 1 ) { Arrays . sort ( array ) ; } else { Arrays . sort ( array ) ; } return array ; }
String encrypt ( String s ) { char ans [ ] = new char [ 2 * N ] ; for ( char c = " " ; c < " " ; c ++ ) { if ( c . isalpha ( ) ) { ans [ 0 ] = ( char ) ( "a" + ( c - "a" + 4 ) % 26 ) ; } else { ans [ c ] = c ; } } return "" . join ( ans ) ; }
int is_bored ( String s ) { boolean is_start = true ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == "." s . charAt ( i ) == "?" s . charAt ( i ) == "!" ) { is_start = true ; } else if ( is_start ) { if ( s . charAt ( i ) == " " ) continue ; if ( s . charAt ( i ) == "I" ) sum ++ ; is_start = false ; } } return sum ; }
String encode ( String message ) { String vowels = "aeiouAEIOU" ; List < Character > ret = new ArrayList < Character > ( ) ; for ( char c = "" ; c != " " ; c ++ ) { if ( c . isupper ( ) ) { c = c . toLowerCase ( ) ; if ( c in vowels ) { c = ( char ) ( "a" + ( c ) - "a" + 2 ) % 26 ) ; } } else if ( c . islower ( ) ) { c = c . toUpperCase ( ) ; if ( c in vowels ) { c = ( char ) ( "A" + ( c ) - "A" + 2 ) % 26 ) ; } } ret . add ( c ) ; } return "" . join ( ret ) ; }
int skjkasdkd ( String lst ) { int largest = 0 ; for ( int n = 0 ; n < lst . length ( ) ; n ++ ) { boolean prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) prime = false ; } if ( prime ) { largest = n ; } } int sum = 0 ; String s = new String ( largest ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum += s . charAt ( i ) - "0" ; } return sum ; }
boolean check_dict_case ( HashMap < Character , Integer > dict ) { if ( dict == null ) return false ; int is_lower = 0 , is_upper = 0 ; for ( Character c : dict . keySet ( ) ) { if ( c . islower ( ) ) is_lower = 1 ; else if ( c . isupper ( ) ) is_upper = 1 ; else return false ; } return is_lower + is_upper == 1 ; }
int multiply ( int a , int b ) { return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ; }
int count_upper ( String s ) { String u_vowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i += 2 ) { if ( s . charAt ( i ) == u_vowel ) { count ++ ; } } return count ; }
int by_length ( int arr [ ] ) { int num_to [ ] = { 1 : "One" , 2 : "Two" , 3 : "Three" , 4 : "Four" , 5 : "Five" , 6 : "Six" , 7 : "Seven" , 8 : "Eight" , 9 : "Nine" } ; Arrays . sort ( sorted_arr ) ; int new_arr [ ] = new int [ 2 ] ; for ( int n = 0 ; n < sorted_arr . length ; n ++ ) { if ( n >= 1 && n <= 9 ) { new_arr [ n ] = num_to [ n ] ; } } return new_arr ; }
List < Integer > f ( int n ) { int sum = 0 , prod = 1 ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) result . add ( prod ) ; else result . add ( sum ) ; } return result ; }
int even_odd_palindrome ( int n ) { int even_count = 0 , odd_count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { String s = Integer . toString ( i ) ; String r_str = s . charAt ( 0 ) ; if ( s == r_str ) { if ( i % 2 == 1 ) odd_count ++ ; else even_count ++ ; } } return [ even_count , odd_count ] ; }
void histogram ( String test ) { HashMap < Character , Integer > count = new HashMap < Character , Integer > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . length ( ) ; i ++ ) { if ( test . charAt ( i ) != " " ) count . put ( test . charAt ( i ) , count . get ( test . charAt ( i ) ) + 1 ) ; if ( count . get ( test . charAt ( i ) ) > max ) max = count . get ( test . charAt ( i ) ) ; } HashMap < Character , Integer > result = new HashMap < Character , Integer > ( ) ; for ( int key = 0 ; key < count . size ( ) ; key ++ ) { if ( value == max ) result . put ( key , value ) ; } return result ; }
int reverse_delete ( String s , int c ) { List < Character > ret = new ArrayList < Character > ( ) ; for ( char ch = 0 ; ch < s . length ( ) ; ch ++ ) { if ( ch not in c ) ret . add ( ch ) ; } int flag = "False" ; if ( "" . join ( ret ) == "" . join ( ret ) ) flag = "True" ; return [ "" . join ( ret ) , flag ] ; }
int sort_array ( int arr [ ] ) { int bin [ ] = new int [ 2 * N ] ; for ( int i = 0 ; i < N ; i ++ ) { int b = 0 ; int n = Math . abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin [ 0 ] = b ; } for ( int i = 0 ; i < N ; i ++ ) { for ( int j = 1 ; j < N ; j ++ ) { if ( bin [ j ] < bin [ j - 1 ] || ( bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) { bin [ j ] = bin [ j - 1 ] ; bin [ j - 1 ] = arr [ j ] ; arr [ j ] = arr [ j - 1 ] ; arr [ j - 1 ] = j ] ; } } return arr ; }
String get_closest_vowel ( String word ) { String vowels = "AEIOUaeiou" ; for ( int i = word . length ( ) - 2 ; i >= 0 ; i -- ) { if ( word . charAt ( i ) == vowels && word . charAt ( i + 1 ) != vowels && word . charAt ( i - 1 ) != vowels ) return word . charAt ( i ) ; } return "" ; }
String match_parens ( String lst ) { String [ ] strings = { lst [ 0 ] + lst [ 1 ] , lst [ 1 ] + lst [ 0 ] } ; for ( String l : strings ) { int count = 0 ; for ( char c = l . charAt ( 0 ) ; c == "(" ) { count ++ ; } if ( c == ")" ) { count -- ; } if ( count < 0 ) break ; } if ( count == 0 ) return "Yes" ; } return "No" ; }
int maximum ( int arr [ ] , int k ) { if ( k == 0 ) return [ ] ; Arrays . sort ( arr ) ; return arr [ - k : ] ; }
boolean valid_date ( String date ) { int n = date . length ( ) ; if ( n != 10 ) return false ; for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 i == 5 ) { if ( date . charAt ( i ) != "-" ) return false ; } else if ( date . charAt ( i ) != '1' ) return false ; int month = date . charAt ( 0 ) ; int day = date . charAt ( 3 ) ; int year = date . charAt ( 6 ) ; if ( month < 1 month > 12 ) return false ; if ( day == 31 && ( month == 4 month == 6 month == 9 month == 11 month == 2 ) return false ; if ( day == 30 && month == 2 ) return false ; return true ; }
String split_words ( String txt ) { List < Integer > current = new ArrayList < > ( ) ; List < Integer > result = new ArrayList < Integer > ( ) ; if ( " " in txt ) { for ( int i = 0 ; i < txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == " " ) { if ( current . size ( ) > 0 ) result . add ( "" . join ( current ) ) ; current . clear ( ) ; } } else { current . add ( txt . charAt ( i ) ) ; } } return result ; }
int tri ( int n ) { if ( n == 0 ) return [ 1 ] ; int tris [ ] = new int [ 3 ] ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) tris [ i ] = i / 2 + 1 ; else tris [ i ] = tris [ i - 1 ] + tris [ i - 2 ] + ( i + 3 ) / 2 ; } return tris ; }
boolean check_if_last_char_is_a_letter ( String txt ) { if ( txt == null ) return false ; return txt . charAt ( - 1 ) . isalpha ( ) && ( txt . charAt ( - 2 ) == 1 || ! txt . charAt ( - 2 ) . isalpha ( ) ) ; }
int order_by_points ( int [ ] nums ) { int result [ ] = new int [ 2 * nums . length ] ; for ( int num = 0 ; num < nums . length ; num ++ ) { String w = Integer . toString ( num , 2 ) ; int sum = 0 ; for ( char c = '0' ; c < w . length ( ) ; c ++ ) { sum += c - '0' ; } if ( num < 0 ) sum -= 2 * ( w . charAt ( 0 ) - '0' ) ; } for ( int i = 0 ; i < nums . length ; i ++ ) { for ( int j = 1 ; j < nums . length ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { result [ j ] = result [ j - 1 ] ; result [ j - 1 ] = result [ j ] ; nums [ j ] = nums [ j ] ; } } } return nums ; }
int bf ( String planet1 , String planet2 ) { int planets [ ] = { "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" } ; int idx1 = planets . indexOf ( planet1 ) ; if ( planet1 in planets ) { int idx2 = planets . indexOf ( planet2 ) ; if ( planet2 in planets ) { return planets . get ( idx2 + 1 ) ; } return planets . get ( idx1 + 1 ) ; }
int sorted_list_sum ( int l ) { int result [ ] = new int [ 2 * l ] ; for ( int i = 0 ; i < l ; i ++ ) { if ( i . length ( ) % 2 == 0 ) result [ i ] = i ; } Arrays . sort ( result ) ; return result ; }
boolean cycpattern_check ( String a , String b ) { for ( int i = 0 ; i < b . length ( ) ; i ++ ) { String rotate = b . charAt ( i ) + b . charAt ( 0 ) ; if ( rotate in a ) return true ; } return false ; }
int even_odd_count ( int num ) { int even_count = 0 , odd_count = 0 ; for ( String i = "0" ; i <= Math . sqrt ( num ) ; i ++ ) { if ( i . charAt ( i ) == '1' ) even_count ++ ; else odd_count ++ ; } return [ even_count , odd_count ] ; }
String find_max ( String words ) { String max = "" ; int max_length = 0 ; for ( String word : words ) { List < Integer > unique = new ArrayList < > ( ) ; for ( int w = 0 ; w < word . length ( ) ; w ++ ) { if ( unique . size ( ) > max_length ) { unique . add ( w ) ; } if ( unique . size ( ) > max_length ) { max = word ; max_length = unique . size ( ) ; } } return max ; }
String solve ( String s ) { boolean no_letter = true ; List < Character > result = new ArrayList < Character > ( ) ; for ( char ch = 0 ; ch < s . length ( ) ; ch ++ ) { if ( ch . isupper ( ) ) { ch = ch . toLowerCase ( ) ; no_letter = false ; } else if ( ch . islower ( ) ) { ch = ch . toUpperCase ( ) ; no_letter = false ; } result . add ( ch ) ; } if ( no_letter ) return "" . join ( result ) ; else return "" . join ( result ) ; }
int most_frequent ( int arr [ ] , int n ) { HashMap < Integer , Integer > hp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) hp . put ( arr [ i ] , 1 ) ; else hp . put ( arr [ i ] , 1 ) ; } int max_count = 0 , res = - 1 ; for ( Integer key : hp . keySet ( ) ) { if ( max_count < value ) { res = key ; max_count = value ; } } return res ; }
int find ( int a [ ] , int b [ ] , int k , int n1 , int n2 ) { Set < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) s . add ( b [ i ] ) ; int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( s . get ( a [ i ] ) == null ) missing ++ ; if ( missing == k ) return a [ i ] ; } return - 1 ; }
int solve_query ( int start , int end , int arr [ ] ) { HashMap < Integer , Integer > frequency = new HashMap < > ( ) ; for ( int i = start ; i <= end ; i ++ ) frequency . put ( arr [ i ] , frequency . get ( arr [ i ] ) + 1 ) ; int count = 0 ; for ( int key = 0 ; key < frequency . size ( ) ; key ++ ) if ( key == value ) { count ++ ; } } return count ; }
int segregate ( int arr [ ] , int n ) { int j = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] <= 0 ) { arr [ i ] = arr [ j ] ; arr [ j ] = i ; } } return j ; }
int count_triplets ( int a [ ] , int n ) { Set < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) s . add ( a [ i ] ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( xr in s && xr != a [ i ] && xr != a [ j ] ) { count ++ ; } } } return ( count / 3 ) ; }
int least_frequent ( int arr [ ] , int n ) { HashMap < Integer , Integer > hp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) hp . put ( arr [ i ] , 1 ) ; else hp . put ( arr [ i ] , 1 ) ; } int min_count = n + 1 ; int res = - 1 ; for ( Integer key : hp . keySet ( ) ) { if ( min_count >= value ) { res = key ; min_count = value ; } } return res ; }
int find_permutations ( int arr [ ] ) { int cnt = 0 ; int max_ind = - 1 ; int min_ind = 10000000 ; int n = arr . length ; HashMap < Integer , Integer > index_of = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { index_of . put ( arr [ i ] , i + 1 ) ; } for ( int i = 1 ; i <= n ; i ++ ) { max_ind = Math . max ( max_ind , index_of . get ( i , 0 ) ) ; min_ind = Math . min ( min_ind , index_of . get ( i , 0 ) ) ; if ( max_ind - min_ind + 1 == i ) cnt ++ ; } return cnt ; }
int form_quadruplets ( int arr [ ] , int n ) { int ans = 0 , pairs = 0 ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - pairs ; i += 2 ) ans += arr [ i + 2 ] ; return ans ; }
String lexicographically_maximum ( String s , int n ) { Map < Character , Integer > m = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; else m . put ( s . charAt ( i ) , 1 ) ; } int j = v . length - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) >= "a" + min ( n , 25 ) || ( s . charAt ( i ) in m && m . get ( s . charAt ( i ) ) > 1 ) { if ( v . charAt ( j ) < s . charAt ( i ) ) continue ; m . put ( s . charAt ( i ) , v . charAt ( j ) + s . charAt ( i + 1 ) ) ; j -- ; } if ( j < 0 ) break ; } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) >= "a" + min ( n , 25 ) || s . charAt ( i ) ) > 1 ) { m . put ( s . charAt ( i ) , s . charAt ( i ) ) ; } l ++ ; } } return s ; }
int no_of_valid_kbers ( int k , int arr [ ] ) { HashSet < Integer > st = new HashSet < Integer > ( ) ; while ( k != 0 ) { st . add ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { int no = arr [ i ] ; int flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( digit not in st ) { flag = false ; break ; } no = no / 10 ; } if ( flag == true ) { count ++ ; } } return count ; }
int del_cost ( String s , int cost ) { int ans = 0 ; Map < Character , Integer > for_max = new HashMap < Character , Integer > ( ) ; Map < Character , Integer > for_tot = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != '0' ) for_max . put ( s . charAt ( i ) , cost . charAt ( i ) ) ; else for_max . put ( s . charAt ( i ) , for_max . getOrDefault ( s . charAt ( i ) ) ) ; } if ( s . charAt ( i ) != '0' ) ans += for_tot . getOrDefault ( s . charAt ( i ) , 0 ) ; return ans ; }
String replace_duplicates ( String names ) { HashMap < Character , Integer > hmap = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < names . length ( ) ; i ++ ) { if ( hmap . containsKey ( names . charAt ( i ) ) ) { int val = hmap . get ( names . charAt ( i ) ) ; hmap . put ( names . charAt ( i ) , val + 1 ) ; } else hmap . put ( names . charAt ( i ) , 1 ) ; } } return names ; }
void minmax_numbers ( int [ ] [ ] matrix , int [ ] [ ] , int res [ ] ) { Set < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < matrix . length ; i ++ ) { int min_r = Integer . MAX_VALUE ; for ( int j = 0 ; j < matrix [ i ] . length ; j ++ ) { min_r = Math . min ( min_r , matrix [ i ] [ j ] ) ; } s . add ( min_r ) ; } for ( int j = 0 ; j < matrix . length ; j ++ ) { int max_c = - sys . maxsize ; for ( int i = 0 ; i < matrix . length ; i ++ ) { max_c = Math . max ( max_c , matrix [ i ] [ j ] ) ; } if ( max_c in s ) { res . add ( max_c ) ; } } return res ; }
int length_of_longest_ap ( int a [ ] , int n ) { int dp [ ] [ ] = new int [ n ] [ n ] ; int res = 2 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int d = a [ j ] - a [ i ] ; if ( d in dp ) { if ( i in dp [ d ] ) dp [ d ] [ j ] = dp [ d ] [ i ] + 1 ; else dp [ d ] [ j ] = 2 ; } } else { dp [ d ] = new int [ n ] ; dp [ d ] [ j ] = 2 ; } res = Math . max ( res , dp [ d ] [ j ] ) ; } } return res ; }
char find_kth_char ( int n , int k ) { String prev = "A" ; String cur = "" ; if ( n == 1 ) return "A" ; for ( int i = 2 ; i <= n ; i ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . length ( ) ; i ++ ) { if ( prev . charAt ( i ) == "A" ) prev = prev . substring ( 0 , i ) + "B" + prev . substring ( i + 1 ) ; else prev = prev . substring ( 0 , i ) + "A" + prev . substring ( i + 1 ) ; } prev = prev . substring ( : : - 1 ) ; cur += prev ; prev = cur ; } return cur [ k - 1 ] ; }
int find_kth_largest ( String s , int k ) { List < Integer > tmp = new ArrayList < > ( s ) ; Arrays . sort ( tmp ) ; return tmp . get ( k - 1 ) ; }
int sub_arraylen ( int arr [ ] , int n , int k ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; mp . put ( arr [ 0 ] , 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp . put ( arr [ i ] , i ) ; } int len = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { int x = arr [ i ] - k ; if ( x == 0 ) len = Math . min ( len , i ) ; if ( mp . get ( x , 0 ) == 0 ) continue ; else len = Math . min ( len , i - mp . getOrDefault ( x , 0 ) ) ; } } return len ; }
int find_max_len ( int a [ ] , int k ) { int n = a . length ; boolean vis [ ] = new boolean [ n ] ; Arrays . sort ( vis ) ; Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a [ i ] , i ) ; } int c = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( vis [ i ] ) { int check = a [ i ] * k ; if ( mp . get ( check ) ) c ++ ; vis [ mp . get ( check ) ] = true ; } } return n - c ; }
int min_distance_points ( int a [ ] , int k , int n ) { Map < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; List < Integer > q = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . put ( a [ i ] , 1 ) ; q . add ( a [ i ] ) ; } int ans [ ] = new int [ 2 * k ] ; while ( k > 0 ) { int x = q [ 0 ] ; q = q [ 1 : : ] ; if ( x - 1 ) not in m && k > 0 ) { m . put ( x - 1 , 1 ) ; ans . add ( x - 1 ) ; k -- ; } if ( x + 1 ) not in m && k > 0 ) { m . put ( x + 1 , 1 ) ; q . add ( x + 1 ) ; k -- ; } } return ans ; }
boolean isValidLen ( String s , int length , int k ) { int n = s . length ( ) ; Map < Character , Integer > mp = new HashMap < Character , Integer > ( ) ; int right = 0 ; while ( right < length ) { if ( mp . containsKey ( s . charAt ( right ) ) ) mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; else mp . put ( s . charAt ( right ) , 1 ) ; right ++ ; } if ( mp . size ( ) <= k ) return true ; for ( ; right < n ; right ++ ) { if ( mp . containsKey ( s . charAt ( right ) ) ) mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; else mp . put ( s . charAt ( right ) , 1 ) ; mp . put ( s . charAt ( right - length ) , 1 ) ; if ( mp . get ( s . charAt ( right - length ) == 0 ) return true ; } if ( mp . size ( ) <= k ) return true ; return false ; }
int partition ( int arr [ ] , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; } } int t = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ high ] ; arr [ high ] = t ; return i + 1 ; }
int str_score ( String strs , String s , int n ) { HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . put ( strs . charAt ( i ) , i + 1 ) ; } if ( m . get ( s ) == null ) return 0 ; int score = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { score += s . charAt ( i ) - "a" + 1 ; } score = score * m . get ( s ) ; return score ; }
int count_ele ( String s , int a [ ] , int n ) { Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; int ans [ ] = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { int num = a [ i ] ; if ( mp . get ( num ) == null ) ans [ 0 ] = 0 ; else { int cnt = 0 ; while ( s . size ( ) != num ) { mp . put ( s . charAt ( 0 ) , true ) ; s . remove ( 0 ) ; cnt ++ ; } s . remove ( 0 ) ; ans [ cnt ] = cnt ; } } return ans ; }
int maxDistinctChar ( String s , int n , int k ) { HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( s . charAt ( i ) ) ) freq . put ( s . charAt ( i ) , freq . get ( s . charAt ( i ) ) + 1 ) ; else freq . put ( s . charAt ( i ) , 1 ) ; } List < Integer > v = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) - 1 , k ) ; v . put ( i , v . get ( i ) - mn ) ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) { mn = Math . min ( v . get ( i ) , k ) ; v . put ( i , v . get ( i ) - mn ) ; k -- ; } } int res = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . get ( i ) == 1 ) res ++ ; } return res ; }
int find_kth ( int arr [ ] , int n , int k ) { Map < Integer , Integer > missing = new HashMap < Integer , Integer > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . put ( arr [ i ] , 1 ) ; } int max_m = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; ; int min_m = Arrays . stream ( arr ) . min ( ) ; for ( int i = min_m + 1 ; i <= max_m ; i ++ ) { if ( i not in missing ) { count ++ ; } if ( count == k ) return i ; } return - 1 ; }
boolean almost_sort ( int a [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = a [ i ] ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) return false ; } return true ; }
int maximum_sum ( String s , int n , int k ) { int sum = 0 ; int freq [ ] = new int [ 256 ] ; for ( int i = 0 ; i < n ; i ++ ) freq [ s . charAt ( i ) ] ++ ; Arrays . sort ( freq ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; }
int find_min_operations ( int arr [ ] , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { int freq = new HashMap < Integer , Integer > ( ) ; for ( int j = i ; j < n ; j ++ ) { freq . put ( arr [ j ] , freq . get ( arr [ j ] ) + 1 ) ; } int max1 = 0 ; int num = 0 ; for ( int key = 0 ; key < freq . size ( ) ; key ++ ) { if ( value > max1 ) max1 = value ; num = key ; } } for ( int key = 0 ; key < freq . size ( ) ; key ++ ) { if ( key != num ) operations += value  ; } } return operations ; }
List < Integer > sub_string ( String s , int n ) { List < Integer > v = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int len = 1 ; len <= n - i ; len ++ ) { String find = s . charAt ( i , i + len ) ; v . add ( find ) ; } } return v ; }
boolean check_unique_frequency ( int arr [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq . put ( arr [ i ] , freq . get ( arr [ i ] ) + 1 ; } HashSet < Integer > unique_freq = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . get ( arr [ i ] ) in unique_freq ) return false ; else unique_freq . add ( freq [ i ] ) ; } return true ; }
int min_cost ( String str1 , String str2 , int n ) { int cost = 0 ; List < Character > tmp = new ArrayList < Character > ( str1 ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp . charAt ( i ) != str2 . charAt ( i ) ) { if ( i < n - 1 && tmp . charAt ( i + 1 ) != str2 . charAt ( i + 1 ) ) { tmp . charAt ( i ) ; tmp . charAt ( i + 1 ) = tmp . charAt ( i ) ; tmp . add ( i ) ; cost ++ ; } } return cost ; }
boolean is_valid_num ( String x ) { Map < Character , Integer > mp = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( mp . get ( x . charAt ( i ) - "0" ) != null ) return false ; else if ( x . charAt ( i ) - "0" > 5 ) return false ; else { mp . put ( x . charAt ( i ) - "0" , 1 ) ; } } return true ; }
int minimize_diff ( int arr [ ] , int n , int k ) { int max_element = Arrays . max ( arr ) ; int min_element = Arrays . min ( arr ) ; if ( max_element - min_element <= k ) { return max_element - min_element ; } int avg = ( max_element + min_element ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) arr [ i ] -= k ; else arr [ i ] += k ; } max_element = Math . max ( arr ) ; min_element = Math . min ( arr ) ; return max_element - min_element ; }
int get_min_cost ( int arr [ ] , int n ) { int min_ele = Arrays . min ( arr ) ; return min_ele * ( n - 1 ) ; }
boolean possibility ( int m [ ] , int length , String s ) { int count_odd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( m [ s . charAt ( i ) - '0' ] & 1 ) count_odd ++ ; } if ( count_odd > 1 ) return false ; return true ; }
int minimum_cost_of_breaking ( int x [ ] , int y [ ] , int m , int n ) { int res = 0 ; Arrays . sort ( x ) ; Arrays . sort ( y ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += x [ i ] ; i ++ ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y [ j ] ; j ++ ; } res += total * hzntl  ; } return res ; }
int find_maximum_score ( int a [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( a [ i ] ) ) freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; else freq . put ( a [ i ] , 1 ) ; } int dp [ ] = new int [ n ] ; dp [ 0 ] = 0 ; dp [ 1 ] = freq . get ( 1 , 0 ) ; for ( int i = 2 ; i < dp . size ( ) ; i ++ ) { dp [ i ] = Math . max ( dp [ i - 1 ] , dp [ i - 2 ] + freq . get ( i , 0 ) * i ) ; } return dp [ - 1 ] ; }
int count_ways ( String s , int t , int k , int mod ) { int n = s . length ( ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { int p = s . charAt ( i ) - '0' ; if ( p == t ) a ++ ; else b ++ ; } int dp1 [ ] = new int [ k + 1 ] ; int dp2 [ ] = new int [ k + 1 ] ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ) ; } return dp1 [ k ] ; }
int find_subarray_sum ( int arr [ ] , int n , int k ) { Map < Integer , Integer > prev_sum = new HashMap < Integer , Integer > ( ) ; int res = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ] ; if ( curr_sum == k ) { res ++ ; } if ( curr_sum - k ) in prev_sum ) { res += prev_sum . get ( curr_sum - k ) ; } prev_sum . put ( curr_sum , 0 ) + 1 ; } return res ; }
int maximum_occurrence ( String s ) { int n = s . length ( ) ; HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String temp = "" ; temp += s . charAt ( i ) ; freq . put ( temp , 0 ) + 1 ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { temp = "" ; temp += s . charAt ( j ) ; freq . put ( temp , 0 ) + 1 ; } } int answer = Integer . MAX_VALUE ; for ( Integer key = 0 ; key < freq . size ( ) ; key ++ ) { answer = Math . max ( answer , value ) ; } return answer ; }
int count_characters ( String strings , char [ ] chars ) { int res = 0 ; HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < chars . length ( ) ; i ++ ) { freq . put ( chars . charAt ( i ) , freq . get ( chars . charAt ( i ) ) + 1 ) ; } for ( String str : strings ) { boolean flag = true ; for ( char c = 0 ; c < str . length ( ) ; c ++ ) { if ( freq . get ( c ) != 0 ) { flag = false ; break ; } } if ( flag ) { res += str . length ( ) ; } } return res ; }
int distinct_substring ( String p , String q , int k , int n ) { HashSet < String > ss = new HashSet < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int sum = 0 ; String s = "" ; for ( int j = i ; j < n ; j ++ ) { int pos = p . charAt ( j ) - 'a' ; sum += q . charAt ( pos ) - '0' ; s += p . charAt ( j ) ; if ( sum <= k ) ss . add ( s ) ; else break ; } } return ss . size ( ) ; }
int unique_morse_rep ( String arr [ ] ) { int morse_code [ ] = { ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "...." , ".." , ".---" , "-.-" , ".-." , "..." , "-" , "..-" , "-.--" , "--.." } ; HashSet < Integer > st = new HashSet < Integer > ( ) ; int n = arr . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String temp = "" ; int m = arr . length ; for ( int j = 0 ; j < m ; j ++ ) { temp += morse_code [ arr [ i ] . charAt ( j ) - "a" ] ; } st . add ( temp ) ; } return n ; }
int count_substrings ( String str , int k ) { int n = str . length ( ) ; int answer = 0 ; HashMap < Character , Integer > map = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( map . get ( str . charAt ( i ) ) == null ) map . put ( str . charAt ( i ) , 1 ) ; else map . put ( str . charAt ( i ) , 1 ) ; } if ( map . size ( ) == k ) answer ++ ; for ( int i = k ; i < n ; i ++ ) { if ( str . charAt ( i ) != null ) map . put ( str . charAt ( i ) , 1 ) ; else map . put ( str . charAt ( i ) , 1 ) ; } map . put ( str . charAt ( i - k ) , 0 ) ; if ( map . get ( str . charAt ( i - k ) ) == 0 ) answer ++ ; } return answer ; }
boolean can_construct ( String s , int k ) { HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; int p = 0 ; if ( s . length ( ) == k ) return true ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; } if ( k > s . length ( ) ) return false ; else { HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; for ( int key = 0 ; key < m . size ( ) ; key ++ ) { if ( value % 2 != 0 ) p = p + 1 ; } } if ( k < p ) return false ; return true ; }
boolean equal_ignore_case ( String str1 , String str2 ) { str1 = str1 . toUpperCase ( ) ; str2 = str2 . toUpperCase ( ) ; return str1 == str2 ; }
int find_longest_sub ( String bin ) { int n = bin . length ( ) ; int sum = 0 , prev_sum = new HashMap < Integer , Integer > ( ) ; int max_len = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( bin . charAt ( i ) == "1" ) sum ++ ; else { sum -- ; } if ( sum > 0 ) max_len = i + 1 ; else if ( sum <= 0 ) { if ( prev_sum . get ( sum - 1 ) == null ) { int curr_len = i - prev_sum . getOrDefault ( sum - 1 , 0 ) ; max_len = Math . max ( max_len , curr_len ) ; } } if ( sum not in prev_sum ) prev_sum . put ( sum , i ) ; } return max_len ; }
boolean has_all_codes ( String s , int k ) { HashSet < Character > us = new HashSet < Character > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { us . add ( s . charAt ( i ) ) ; } return us . size ( ) == 1 << k ; }
boolean check_palin ( String word ) { int n = word . length ( ) ; word = word . toLowerCase ( ) ; for ( int i = 0 ; i < n ; i ++ ) if ( word . charAt ( i ) != word . charAt ( n - 1 ) ) return false ; n -- ; } return true ; }
String convert ( String str ) { String w = "" , z = "" ; str = str . toUpperCase ( ) + " " ; for ( int i = 0 ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ch != " " ) w += ch ; else { z += w . charAt ( 0 ) . toLowerCase ( ) + w . substring ( 1 , w . length ( ) ) + " " ; w = "" ; } } return z ; }
int max_lines ( int n , int x1 [ ] , int y1 [ ] , int x2 [ ] , int y2 [ ] ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; int slope = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( x1 [ i ] == x2 [ i ] ) slope = Integer . MAX_VALUE ; else slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; s . add ( slope ) ; } return s . size ( ) ; }
int prime_factor ( int n ) { int primef [ ] = new int [ n + 1 ] ; while ( n % 2 == 0 ) { if ( 2 in primef ) primef [ 2 ] ++ ; else primef [ 2 ] = 1 ; } n = n / 2 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i += 2 ) { while ( n % i == 0 ) { if ( i in primef ) primef [ i ] ++ ; else primef [ i ] = 1 ; n = n / i ; } } if ( n > 2 ) primef [ n ] = 1 ; return primef ; }
String is_divisible_by_divisor ( String s , int d ) { HashSet < Integer > hash_map = new HashSet < Integer > ( ) ; hash_map . add ( s ) ; for ( int i = 0 ; i < d + 1 ; i ++ ) { s += s % d ; s %= d ; } if ( s in hash_map ) { if ( s == 0 ) return "Yes" ; return "No" ; } else { hash_map . add ( s ) ; } } return "Yes" ; }
boolean odd_sum ( int a [ ] , int n , int k ) { HashSet < Integer > odd = new HashSet < Integer > ( ) ; HashSet < Integer > even = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) even . add ( a [ i ] ) ; else odd . add ( a [ i ] ) ; } if ( odd . size ( ) >= k ) return true ; boolean flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= 0 ) return true ; } return flag ; }
int day_of_year ( String date ) { int days [ ] = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 } ; int year = date . charAt ( 0 ) ; int month = date . charAt ( 5 ) ; int day = date . charAt ( 8 ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) day ++ ; while ( month > 1 ) { day = day + days [ month - 2 ] ; month -- ; } return day ; }
boolean is_perfect_square ( int arr [ ] , int n ) { HashMap < Integer , Integer > umap = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { umap . put ( arr [ i ] , 1 ) + 1 ; } for ( Integer key : umap . keySet ( ) ) { if ( value % 2 == 1 ) return false ; } return true ; }
int min_moves ( int n ) { String s = Integer . toString ( n ) ; int ans = Integer . MAX_VALUE ; int length = s . length ( ) ; for ( int i = 0 ; i < length ; i ++ ) { for ( int j = 0 ; j < length ; j ++ ) { if ( i == j ) continue ; List < Integer > t = new ArrayList < > ( s ) ; int cur = 0 ; for ( int k = i ; k < length - 1 ; k ++ ) { t . add ( t ) ; cur ++ ; } for ( int k = 0 ; k < length ; k ++ ) { if ( t . charAt ( k ) != "0" ) { pos = k ; break ; } } for ( int k = 0 ; k < length ; k ++ ) { if ( t . charAt ( k ) != "0" ) { pos = k ; break ; } } for ( int k = pos ; k >= 0 ; k -- ) { t . add ( t . charAt ( k ) ) ; t . add ( t . charAt ( k ) ) ; if ( nn % 25 == 0 ) ans = Math . min ( ans , cur ) ; } } return ans ; }
int minimum_operations ( int a [ ] , int n ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; } int count = 0 ; for ( int key = 0 ; key < mp . size ( ) ; key ++ ) { if ( value > 1 ) { count += value - 1 ; } } return count ; }
int kaprekar_rec ( int n , int prev ) { if ( n == 0 ) return 0 ; int digits [ ] = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } Arrays . sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } digits . sort ( ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) desc = desc * 10 + digits [ i ] ; diff = Math . abs ( asc - desc ) ; if ( diff == prev ) return diff ; return kaprekar_rec ( diff , prev ) ; }
String fraction_to_decimal ( int numr , int denr ) { String res = "" ; Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; int rem = numr % denr ; while ( rem != 0 && rem != mp . getOrDefault ( rem , 0 ) ) { mp . put ( rem , 0 ) ; rem = rem % denr . getOrDefault ( rem , 0 ) ) ; } if ( rem == 0 ) return "" ; if ( mp . containsKey ( rem ) ) return res . substring ( mp . get ( rem ) ; return "" ; }
boolean is_fancy ( String num ) { int fp [ ] = new int [ n ] ; fp [ "0" ] = "0" ; fp [ "1" ] = "1" ; fp [ "6" ] = "9" ; fp [ "8" ] = "8" ; fp [ "9" ] = "6" ; int n = num . length ( ) ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( fp [ num [ l ] ] != num [ r ] ) return false ; l ++ ; r -- ; } return true ; }
int distinct_odd_ratio ( String numbers ) { int distinct_count = Set . size ( numbers ) ; int distinct_odd_count = Set . size ( numbers ) ; if ( distinct_odd_count % 2 == 1 ) { return distinct_odd_count / distinct_count ; } return distinct_odd_count ; }
int compare_sum ( int numbers [ ] , int words [ ] ) { int int_sum = sum ( numbers ) ; int word_length_sum = sum ( words ) ; if ( int_sum < word_length_sum ) return - 1 ; else if ( int_sum > word_length_sum ) return 1 ; else return 0 ; }
boolean all_longer_than ( String short_words [ ] , String long_words ) { int max_of_short = Math . max ( [ w . length ( ) for ( int w = short_words . charAt ( 0 ) ; w < long_words . length ( ) ; w ++ ) { int min_of_long = Math . min ( [ w . length ( ) for ( int w = long_words . charAt ( 0 ) ; w < max_of_short ; w ++ ) { min_of_long = Math . min ( [ w . length ( ) for ( int w = 0 ; w < long_words . charAt ( 0 ) ; w ++ ) { return min_of_long > max_of_short ; } return min_of_long > max_of_short ; }
int compare_odd_even_range ( int [ ] numbers ) { int range_odd = Math . max ( [ n for ( int n = numbers . length ; n % 2 == 1 ] ) - min ( [ n for ( int n = 0 ; n < numbers . length ; n ++ ) { int range_even = Math . max ( [ n for ( int n = 0 ; n < numbers . length ; n ++ ) { if ( range_odd < range_even ) return - 1 ; if ( range_odd > range_even ) return 1 ; } return 0 ; }
int average_distinct_length ( String words ) { HashSet < String > distinct_words = new HashSet < String > ( words ) ; int average_len = sum ( distinct_words . keySet ( ) ) / distinct_words . size ( ) ; return average_len ; }
int withdraw_balance ( int start , int withdrawals [ ] ) { int end = functools . reduce ( lambda balance , nextWithdrawal : balance , withdrawals , start ) ; return end ; }
String first_short_and_starts_with_o ( String words ) { String matched_element = first ( Arrays . asList ( words ) ) ; return matched_element ; }
int big_number_at_index ( int [ ] numbers , int index ) { int target_num = new int [ 5 ] [ index ] ; return target_num ; }
boolean contains_square_in_range ( int range_start , int range_length ) { boolean contains_square = true ; return contains_square ; }
void group_numbers_by_mod ( int numbers [ ] , int mod ) { HashMap < Integer , Integer > number_groups = new HashMap < > ( ) ; for ( int k = 0 ; k < numbers . length ; k ++ ) { if ( number_groups . containsKey ( k ) ) number_groups . put ( k , g ) ; } return number_groups ; }
void group_words_by_first_char ( String words ) { HashMap < Character , Integer > word_groups = new HashMap < Character , Integer > ( ) ; for ( int k = 0 ; k < words . length ( ) ; k ++ ) { if ( word_groups . containsKey ( k ) ) word_groups . put ( k , g ) ; } return word_groups ; }
List < String > order_by_length_and_descending ( String words ) { List < String > sorted_words = new ArrayList < > ( words ) ; Collections . sort ( sorted_words ) ; Collections . reverse ( sorted_words ) ; return sorted_words ; }
List < String > order_first_char_descending_reverse ( String words ) { List < String > sorted_words = new ArrayList < > ( words ) ; Collections . sort ( sorted_words ) ; Collections . reverse ( sorted_words ) ; return sorted_words ; }
int get_sublist_of_negative ( int [ ] numbers , int start , int length ) { int sub_list [ ] = new int [ length ] ; return sub_list ; }
List < Integer > get_positive_sequence ( int n ) { List < Integer > sub_sequence = new ArrayList < Integer > ( Arrays . asList ( numbers ) ) ; return sub_sequence ; }
int get_larger_than_index_sequence ( int [ ] numbers ) { int sub_sequence [ ] = new int [ numbers . length ] ; return sub_sequence ; }
String rearrange_word_by_indexes ( String words , int indexes [ ] ) { int new_indexes [ ] = new int [ indexes . length ] ; String new_words = new String [ new_indexes . length ] ; return new_words ; }
String get_words_upper_lower ( String words ) { String upper_lower_words = new String [ words . length ( ) ] ; return upper_lower_words ; }
boolean select_if_in_place ( int [ ] numbers ) { boolean nums_in_place = true ; return nums_in_place ; }
int select_pairs ( int [ ] numbers_a , int [ ] numbers_b ) { int pairs [ ] = new int [ 2 * numbers_a . length ] ; return pairs ; }
String cross_join ( String end_words , String begin_words ) { String cross_strings = new String [ end_words . length ( ) + ' ' + begin_words . charAt ( 0 ) ] ; return cross_strings ; }
int elements_contain_subword ( String words [ ] , int subword ) { if ( all ( subword in w for ( int w = words [ 0 ] ; w < 5 ; w ++ ) { return 1 ; } else if ( subword in w for ( int w = words [ 0 ] ; w < 5 ; w ++ ) { return 0 ; } else return - 1 ; }
int concat_large_numbers ( int [ ] numbers_a , int [ ] numbers_b , int flag ) { int all_numbers [ ] = new int [ numbers_a . length ] + [ numbers_b . length ] ; return all_numbers ; }
int dot_product ( int vector_a [ ] , int vector_b [ ] ) { int dot_product = sum ( [ a * b for ( int a = 0 ; a < vector_a . length ; a ++ ) dot_product = dot_product ( vector_a , vector_b ) ; return dot_product ; }
List < Integer > set_difference ( Set < Integer > set_a , Set < Integer > set_b ) { List < Integer > difference = new ArrayList < Integer > ( Arrays . asList ( set_a ) . symmetric_difference ( set ( set_b ) ) ; return difference ; }
