int greatestCommonDivisor ( int a , int b ) { if ( a == 0 || b == 0 ) { return a + b ; } if ( a == b ) { return a ; } if ( a > b ) { return greatestCommonDivisor ( a % b , b ) ; } else { return greatestCommonDivisor ( a , b % a ) ; } }
int largestDivisor ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { return n / i ; } } return 1 ; }
bool isPrime ( int n ) { if ( n < 2 ) { return false ; } for ( int k = 2 ; k < n ; k ++ ) { if ( n % k == 0 ) { return false ; } } return true ; }
int fizzBuzz ( int n ) { int count = 0 ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 11 == 0 || i % 13 == 0 ) { int q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) { count += 1 ; } q /= 10 ; } } } return count ; }
int primeFib ( int n ) { int f0 = 0 ; int f1 = 1 ; while ( n > 0 ) { int p = f0 + f1 ; bool isPrime = p >= 2 ; for ( int i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { n -= 1 ; } f0 = f1 ; f1 = p ; } return f1 ; }
double triangleArea ( double a , double h ) { return a * h / 2 ; }
int modP ( int n , int p ) { int ret = 1 ; for ( int i = 0 ; i < n ; i ++ ) { ret = ( ret * 2 ) % p ; } return ret ; }
int add ( int x , int y ) { return x + y ; }
int fib ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return fib ( n - 1 ) + fib ( n - 2 ) ; }
int largestPrimeFactor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) { while ( n % i == 0 && n > i ) { n /= i ; } } return n ; }
int sumToN ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { result += i ; } return result ; }
int fibfib ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 0 ; } if ( n == 2 ) { return 1 ; } return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
bool isMultiplyPrime ( int a ) { int num = 0 ; for ( int i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) { a /= i ; num += 1 ; } } return num == 3 ; }
bool isSimplePower ( int x , int n ) { if ( n == 1 ) { return x == 1 ; } int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
int chooseNum ( int x , int y ) { if ( x > y ) { return - 1 ; } if ( y % 2 == 0 ) { return y ; } if ( x == y ) { return - 1 ; } return y - 1 ; }
bool isEqualToSumEven ( int n ) { return n % 2 == 0 && n >= 8 ; }
int specialFactorial ( int n ) { int fact = 1 , specialFact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; specialFact *= fact ; } return specialFact ; }
int xOrY ( int n , int x , int y ) { bool isPrime = n >= 2 ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { return x ; } return y ; }
bool rightAngleTriangle ( int a , int b , int c ) { return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b ; }
int fastPow ( int n , int k ) { if ( k == 0 ) { return 1 ; } int temp = fastPow ( n , k / 2 ) ; if ( k % 2 == 0 ) { return temp * temp ; } else { return n * temp * temp ; } }
bool isPalin ( String s ) { int l = s . Length / 2 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s [ i ] != s [ s . Length - i - 1 ] ) { return false ; } } return true ; }
int findSum ( int n ) { int ans = 0 , temp = 0 ; for ( int i = 1 ; i <= n && temp < n ; i ++ ) { temp = i - 1 ; int num = 1 ; while ( temp < n ) { if ( temp + i <= n ) { ans += i * num ; } else { ans += ( n - temp ) * num ; } temp += i ; num ++ ; } } return ans ; }
int getNextGap ( int gap ) { gap = gap * 10 / 13 ; if ( gap < 1 ) { return 1 ; } return gap ; }
int countNonDecreasing ( int n ) { int k = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count /= i ; } return count ; }
int power ( int x , int y ) { if ( y == 0 ) { return 1 ; } else if ( y % 2 == 0 ) { return power ( x , y / 2 ) * power ( x , y / 2 ) ; } else { return x * power ( x , y / 2 ) * power ( x , y / 2 ) ; } }
double power ( double x , int y ) { if ( y == 0 ) { return 1 ; } double temp = power ( x , y / 2 ) ; if ( y % 2 == 0 ) { return temp * temp ; } else { if ( y > 0 ) { return x * temp * temp ; } else { return temp * temp / x ; } } }
int multiply ( int x , int y ) { if ( y == 0 ) { return 0 ; } else if ( y > 0 ) { return x + multiply ( x , y - 1 ) ; } else { return - multiply ( x , - y ) ; } }
int smallest ( int x , int y , int z ) { if ( y / x == 0 ) { return y / z == 0 ? y : z ; } return x / z == 0 ? x : z ; }
bool isPowerOfFour ( int n ) { if ( n == 0 ) { return false ; } while ( n != 1 ) { if ( n % 4 != 0 ) { return false ; } n = n / 4 ; } return true ; }
int modInverse ( int a , int m ) { int m0 = m ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
int cntRotations ( String s , int n ) { string s2 = s + s ; int [ ] pre = new int [ 2 * n ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) { pre [ i ] += pre [ i - 1 ] ; } if ( s2 [ i ] == 'a' || s2 [ i ] == 'e' || s2 [ i ] == 'i' || s2 [ i ] == 'u' ) { pre [ i ] ++ ; } } int ans = 0 ; for ( int i = n - 1 ; i < 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) { x1 -= pre [ l ] ; } r = i - n / 2 ; int left = pre [ r ] ; if ( l >= 0 ) { left -= pre [ l ] ; } int right = x1 - left ; if ( left > right ) { ans ++ ; } } return ans ; }
int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) { k = n - k ; } for ( int i = 0 ; i < k ; ++ i ) { res *= n - i ; res /= i + 1 ; } return res ; }
bool isPrefix ( String temp , String s ) { if ( temp . Length < s . Length ) { return false ; } else { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] != temp [ i ] ) { return false ; } } return true ; } }
string lexicographicallySmallestString ( String s , int n ) { int lastZe = - 1 ; String ans = "" ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { lastZe = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i <= lastZe && s [ i ] == '0' ) { ans += s [ i ] ; } else if ( i > lastZe ) { ans += s [ i ] ; } } return ans ; }
int calculateMax ( int n , int m , int k ) { int ans = - 1 ; int low = 0 , high = m ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int val = 0 ; int l = k - 1 ; int r = n - k ; val += mid ; if ( mid >= l ) { val += l * ( 2 * mid - l - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( l - mid ) ; } if ( mid >= r ) { val += r * ( 2 * mid - r - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( r - mid ) ; } if ( val <= m ) { ans = Math . Max ( ans , mid ) ; low = mid + 1 ; } else { high = mid - 1 ; } } return ans ; }
int findLength ( String s , char i , char j ) { char required = i ; int length = 0 ; for ( char curr in s ) { if ( curr == required ) { length += 1 ; if ( required == i ) { required = j ; } else { required = i ; } } } return length ; }
bool checkReverse ( int leftSum , int rightSum ) { int rev = 0 ; int temp = rightSum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp /= 10 ; } if ( rev == leftSum ) { return true ; } return false ; }
bool isComposite ( int n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return false ; } if ( n % 2 == 0 || n % 3 == 0 ) { return true ; } for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return true ; } } return false ; }
int minDeletion ( String s ) { int n = s . Length ; int firstIdx1 = - 1 ; int lastIdx0 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { firstIdx1 = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == '0' ) { lastIdx0 = i ; break ; } } if ( firstIdx1 == - 1 || lastIdx0 == - 1 ) { return 0 ; } int count1 = 0 , count0 = 0 ; for ( int i = 0 ; i < lastIdx0 ; i ++ ) { if ( s [ i ] == '1' ) { count1 ++ ; } } for ( int i = firstIdx1 + 1 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { count0 ++ ; } } return Math . Min ( count0 , count1 ) ; }
int minSteps ( String s , int n ) { int smaller , cost = 0 ; int [ ] f = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int currEle = s [ i ] - 'a' ; smaller = 0 ; for ( int j = 0 ; j <= currEle ; j ++ ) { if ( f [ j ] != 0 ) { smaller += f [ j ] ; } } if ( smaller == 0 ) { cost += i + 1 ; } else { cost += i - smaller + 1 ; } f [ s [ i ] - 'a' ] ++ ; } return cost ; }
int numberOfWays ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 0 ; b < n ; b ++ ) { int c = n - ( a + b ) ; if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } } return count ; }
int slopeOfNum ( String num , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) { slope ++ ; } else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) { slope ++ ; } } return slope ; }
int middleOfThree ( int a , int b , int c ) { int x = a - b ; int y = b - c ; int z = a - c ; if ( x * y > 0 ) { return b ; } else if ( x * z > 0 ) { return c ; } else { return a ; } }
int countMaxSetBits ( int left , int right ) { while ( ( left | ( left + 1 ) ) <= right ) { left |= left + 1 ; } return left ; }
int findS ( int s ) { int l = 1 , r = ( s / 2 ) + 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) { return mid ; } else if ( sum > s ) { r = mid - 1 ; } else { l = mid + 1 ; } } return - 1 ; }
bool check ( String s ) { int min = Int32 . MaxValue ; int max = Int32 . MinValue ; int sum = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { int ascii = s [ i ] ; if ( ascii < 96 || ascii > 122 ) { return false ; } sum += ascii ; if ( min > ascii ) { min = ascii ; } if ( max < ascii ) { max = ascii ; } } min -= 1 ; int eSum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == eSum ; }
int minimumPossibleProduct ( int k ) { int res = 1 ; int r = ( 1 << k ) - 1 ; for ( int i = 0 ; i < k ; i ++ ) { res *= r - 1 ; } res *= r ; return res ; }
int findInGrid ( int i , int j ) { if ( i == j ) { return i * i - ( i - 1 ) ; } else if ( i > j ) { if ( i % 2 == 0 ) { return i * i - ( j - 1 ) ; } else { return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } } else { if ( j % 2 == 0 ) { return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; } else { return j * j - ( i - 1 ) ; } } }
int findMinOperationsReqEmpStr ( String s ) { int cntOne = 0 ; int cntZero = 0 ; int n = s . Length ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '0' ) { if ( cntOne != 0 ) { cntOne -- ; } cntZero ++ ; } else { if ( cntZero != 0 ) { cntZero -- ; } cntOne ++ ; } } return cntOne + cntZero ; }
bool isReachable ( int x1 , int y1 , int x2 , int y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) { x2 %= y2 ; } else { y2 %= x2 ; } } if ( x2 == x1 ) { return ( y2 - y1 ) >= 0 && ( y2 - y1 ) % x1 == 0 ; } else if ( y2 == y1 ) { return ( x2 - x1 ) >= 0 && ( x2 - x1 ) % y1 == 0 ; } else { return false ; } }
int findMaxSoln ( int n , int x , int y ) { int ans = Int32 . MinValue ; for ( int k = 0 ; k <= n ; k ++ ) { if ( k % x == y ) { ans = Math . Max ( ans , k ) ; } } return ans >= 0 && ans <= n ? ans : - 1 ; }
int numberOfPairs ( int n ) { int count = 0 ; int i = 1 , j = n - 1 ; while ( i < j ) { if ( i + j == n ) { count ++ ; } i ++ ; j -- ; } return count ; }
int minChanges ( String s , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( s [ 0 ] != '1' ) { count ++ ; ones ++ ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s [ i ] == '0' ) { zeros ++ ; } else { ones ++ ; } if ( zeros > ones ) { zeros -- ; ones ++ ; count ++ ; } } return count ; }
int kVisibleFromLeft ( int n , int k ) { if ( n == k ) { return 1 ; } if ( k == 1 ) { int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { ans *= i ; } return ans ; } return kVisibleFromLeft ( n - 1 , k - 1 ) + ( n - 1 ) * kVisibleFromLeft ( n - 1 , k ) ; }
double find ( int n , int sum ) { if ( sum > 6 * n || sum < n ) { return 0 ; } if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) { return 1.0 / 6 ; } else { return 0 ; } } double s = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) { s += find ( n - 1 , sum - i ) / 6 ; } return s ; }
int binCoff ( int n , int r ) { int val = 1 ; if ( r > n - r ) { r = n - r ; } for ( int i = 0 ; i < r ; i ++ ) { val *= n - i ; val /= i + 1 ; } return val ; }
int getMask ( int val ) { int mask = 0 ; if ( val == 0 ) { return 1 ; } while ( val > 0 ) { int d = val % 10 ; mask |= 1 << d ; val /= 10 ; } return mask ; }
int waysToKAdjacentSetBits ( int n , int k , int currentIndex , int adjacentSetBits , int lastBit ) { if ( currentIndex == n ) { if ( adjacentSetBits == k ) { return 1 ; } return 0 ; } int noOfWays = 0 ; if ( lastBit == 1 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits + 1 , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } else if ( lastBit == 0 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } return noOfWays ; }
int checkFunc ( int i , int j , String st ) { if ( st [ i ] == '(' && st [ j ] == ')' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == ']' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '}' ) { return 1 ; } return 0 ; }
int findGolomb ( int n ) { if ( n == 1 ) { return 1 ; } return 1 + findGolomb ( n - findGolomb ( findGolomb ( n - 1 ) ) ) ; }
bool allOnes ( String s , int n ) { int co = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { co += s [ i ] == '1' ? 1 : 0 ; } return co == n ; }
int pad ( int n ) { int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { pNext = pPrevPrev + pPrev ; pPrevPrev = pPrev ; pPrev = pCurr ; pCurr = pNext ; } return pNext ; }
int oddLengthPalindrome ( int k ) { int palin = k ; k = k / 10 ; while ( k > 0 ) { int rev = k % 10 ; palin = palin * 10 + rev ; k = k / 10 ; } return palin ; }
string changeString ( String s0 ) { char [ ] s = s0 . ToCharArray ( ) ; int n = s0 . Length ; if ( s [ 0 ] == '?' ) { s [ 0 ] = 'a' ; if ( s [ 0 ] == s [ 1 ] ) { s [ 0 ] ++ ; } } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == '?' ) { s [ i ] = 'a' ; if ( s [ i ] == s [ i - 1 ] ) { s [ i ] ++ ; } if ( s [ i ] == s [ i - 1 ] ) { s [ i ] ++ ; } } } if ( s [ n - 1 ] == '?' ) { s [ n - 1 ] = 'a' ; if ( s [ n - 1 ] == s [ n - 2 ] ) { s [ n - 1 ] ++ ; } } return new String ( s ) ; }
int totalHammingDistance ( int n ) { int i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + n / i ; i = i * 2 ; } return sum ; }
int checkBitonic ( String s ) { int i = 1 ; for ( ; i < s . Length ; i ++ ) { if ( s [ i ] > s [ i - 1 ] ) { continue ; } if ( s [ i ] <= s [ i - 1 ] ) { break ; } } if ( i == s . Length - 1 ) { return 1 ; } int j = i + 1 ; for ( ; j < s . Length ; j ++ ) { if ( s [ j ] < s [ j - 1 ] ) { continue ; } if ( s [ j ] >= s [ j - 1 ] ) { break ; } } i = j ; if ( i != s . Length ) { return 0 ; } return 1 ; }
bool endsWith ( String str , String pat ) { int patLen = pat . Length ; int strLen = str . Length ; if ( patLen > strLen ) { return false ; } patLen -- ; strLen -- ; while ( patLen >= 0 ) { if ( pat [ patLen ] != str [ strLen ] ) { return false ; } patLen -- ; strLen -- ; } return true ; }
int getSum ( int n , int d ) { if ( n < d ) { return 0 ; } while ( n % 10 != d ) { n -- ; } int k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
int balancedStringBySwapping ( String s ) { int unbalancedPair = 0 ; for ( int i = 0 ; i < s . Length ; ++ i ) { if ( unbalancedPair > 0 && s [ i ] == ']' ) { -- unbalancedPair ; } else if ( s [ i ] == '[' ) { ++ unbalancedPair ; } } return ( unbalancedPair + 1 ) / 2 ; }
int computeHash ( String s ) { int p = 31 ; long mod = ( int ) 1e9 + 7 ; long hashVal = 0 ; long mul = 1 ; for ( char ch in s ) { hashVal = ( hashVal + ( ch - 'a' + 1 ) * mul ) % mod ; mul = mul * p % mod ; } return ( int ) hashVal ; }
int countOfSubstringWithOnlyOnes ( String s ) { int res = 0 , count = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { count = s [ i ] == '1' ? count + 1 : 0 ; res = res + count ; } return res ; }
int composite ( int n ) { int flag = 0 ; int c = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) { c += 1 ; } } if ( c >= 3 ) { flag = 1 ; } return flag ; }
bool isDivBySix ( String s , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += s [ i ] - 'a' + 1 ; } if ( sum % 3 != 0 ) { return false ; } int lastDigit = ( s [ n - 1 ] - 'a' + 1 ) % 10 ; if ( lastDigit % 2 != 0 ) { return false ; } return true ; }
bool IsRedundantBraces ( String s ) { int a = 0 , b = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == '(' && s [ i + 2 ] == ')' ) { return true ; } if ( s [ i ] == '*' || s [ i ] == '+' || s [ i ] == '-' || s [ i ] == '/' ) { a ++ ; } if ( s [ i ] == '(' ) { b ++ ; } } if ( b > a ) { return true ; } return false ; }
int countSubStr ( String s , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 2 ; ) { if ( s [ i ] == '0' && s [ i + 1 ] == '1' && s [ i + 2 ] == '0' ) { count ++ ; i += 3 ; } else if ( s [ i ] == '1' && s [ i + 1 ] == '0' && s [ i + 2 ] == '1' ) { count ++ ; i += 3 ; } else { i ++ ; } } return count ; }
int prefixOccurrences ( String s ) { char c = s [ 0 ] ; int countC = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == c ) { countC ++ ; } } return countC ; }
bool isValid ( String s , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( s [ i ] == s [ i - 1 ] ) { return false ; } } return true ; }
int count ( String s , int k ) { int n = s . Length ; int d = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d += s [ i ] ; } if ( d % k == 0 ) { count += 1 ; } for ( int i = k ; i < n ; i ++ ) { int prev = s [ i - k ] ; d -= prev ; d += s [ i ] ; if ( d % k == 0 ) { count += 1 ; } } return count ; }
int findSubstringCount ( String s ) { int result = 0 ; int n = s . Length ; int i = 0 ; while ( i < n - 1 ) { if ( s [ i ] + 1 == s [ i + 1 ] ) { result ++ ; while ( i < n - 1 && s [ i ] + 1 == s [ i + 1 ] ) { i ++ ; } } i ++ ; } return result ; }
bool find ( String s1 , String s2 ) { int len1 = s1 . Length , len2 = s2 . Length ; if ( len1 != len2 ) { return false ; } int [ ] d = new int [ len1 ] ; d [ 0 ] = s2 [ 0 ] - s1 [ 0 ] ; for ( int i = 1 ; i < len1 ; i ++ ) { if ( s1 [ i ] > s2 [ i ] ) { return false ; } else { d [ i ] = s2 [ i ] - s1 [ i ] ; } } for ( int i = 0 ; i < len1 - 1 ; i ++ ) { if ( d [ i ] < d [ i + 1 ] ) { return false ; } } return true ; }
bool isInGivenBase ( String s , int bas ) { if ( bas > 16 ) { return false ; } else if ( bas <= 10 ) { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( ! ( s [ i ] >= '0' && s [ i ] < '0' + bas ) ) { return false ; } } } else { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( ! ( ( s [ i ] >= '0' && s [ i ] < '0' + bas ) s [ i ] >= 'A' && s [ i ] < 'A' + bas - 10 ) ) ) { return false ; } } } return true ; }
int countNonEmptySubstr ( String s ) { int n = s . Length ; return n * ( n + 1 ) / 2 ; }
int evenDecimalValue ( String s , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimalValue = 0 ; int powerOf2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimalValue += ( s [ k ] - '0' ) * powerOf2 ; powerOf2 *= 2 ; } if ( decimalValue % 2 == 0 ) { result ++ ; } } } return result ; }
int calculate ( string s ) { int ans = 6 ; for ( int i = 0 ; i < 10 ; ++ i ) { for ( int j = 0 ; j < 10 ; ++ j ) { for ( int k = 0 ; k < 10 ; ++ k ) { for ( int l = 0 ; l < 10 ; ++ l ) { for ( int m = 0 ; m < 10 ; ++ m ) { for ( int n = 0 ; n < 10 ; ++ n ) { if ( i != s [ 0 ] - '0' ) { c ++ ; } if ( j != s [ 1 ] - '0' ) { c ++ ; } if ( k != s [ 2 ] - '0' ) { c ++ ; } if ( l != s [ 4 ] - '0' ) { c ++ ; } if ( m != s [ 5 ] - '0' ) { c ++ ; } if ( c < ans ) { ans = c ; } } } } } return ans ; }
int xorZero ( String s ) { int oneCount = 0 , zeroCount = 0 ; int n = s . Length ; for ( int i = 0 ; i < n ; i ++ ) { if ( s [ i ] == '1' ) { oneCount ++ ; } else { zeroCount ++ ; } } if ( oneCount % 2 == 0 ) { return zeroCount ; } return oneCount ; }
string evenLength ( String n ) { string res = n ; for ( int j = n . Length - 1 ; j >= 0 ; -- j ) { res += n [ j ] ; } return res ; }
int countSubstringWithEqualEnds ( String s ) { int result = 0 ; int n = s . Length ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( s [ i ] == s [ j ] ) { result ++ ; } } } return result ; }
double normalSlope ( double a , double b , double x1 , double y1 ) { double g = a / 2 ; double f = b / 2 ; if ( g - x1 == 0 ) { return - 1 ; } double slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) { return - 2 ; } return slope ; }
bool orthogonality ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) { int dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) { return true ; } else { return false ; } }
double findAreaShaded ( double a ) { double sqArea = a * a ; double semiCircleArea = 3.14 * ( a * a ) / 8 ; double shadedArea = 4 * semiCircleArea - sqArea ; return shadedArea ; }
int factorial ( int a , int b ) { int res = 1 ; for ( int i = 1 ; i <= a + b ; i ++ ) { res = res * i ; } for ( int i = 1 ; i <= a ; i ++ ) { res = res / i ; } for ( int i = 1 ; i <= b ; i ++ ) { res = res / i ; } return res ; }
int factorTree ( int n ) { int height = 0 ; while ( n > 1 ) { bool flag = false ; for ( int i = 2 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( ! flag ) { break ; } } return height ; }
string findIfPossible ( int n , int s , int x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) { return "Yes" ; } if ( n == 1 ) { if ( s == x ) { return "Yes" ; } else { return "No" ; } } if ( n == 2 ) { int c = ( s - x ) / 2 ; int a = c ; int b = c ; a = a + x ; if ( ( a ^ b ) == x ) { return "Yes" ; } else { return "No" ; } } } return "No" ; }
int maximumTripletXor ( int a , int b , int c ) { int ans = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int cur = 1 << i ; if ( a >= cur ) { ans += cur ; a -= cur ; } else if ( b >= cur ) { ans += cur ; b -= cur ; } else if ( c >= cur ) { ans += cur ; c -= cur ; } } return ans ; }
int itemType ( int n ) { int count = 0 ; int day = 1 ; while ( count + day * ( day + 1 ) / 2 < n ) { count += day * ( day + 1 ) / 2 ; day ++ ; } for ( int type = day ; type > 0 ; type -- ) { count += type ; if ( count >= n ) { return type ; } } return 0 ; }
int maxGcdInRange ( int l , int r ) { int ans = 1 ; for ( int z = r ; z >= 1 ; z -- ) { if ( r / z - ( l - 1 ) / z > 1 ) { ans = z ; break ; } } return ans ; }
int sumOfDigits ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += n % 10 ; n = n / 10 ; } return sum ; }
bool isRepUnitNum ( int n , int b ) { int length = 0 ; int countOne = 0 ; while ( n != 0 ) { int r = n % b ; length ++ ; if ( r == 1 ) { countOne ++ ; } n = n / b ; } return countOne >= 3 && countOne == length ; }
bool isStraightLineNum ( int n ) { if ( n <= 99 ) { return false ; } String s = Convert . ToString ( n ) ; int d = s [ 1 ] - s [ 0 ] ; for ( int i = 2 ; i < s . Length ; i ++ ) { if ( s [ i ] - s [ i - 1 ] != d ) { return false ; } } return true ; }
int getCount ( int d , int n ) { int no = n / d ; int result = no ; for ( int p = 2 ; p * p <= no ; ++ p ) { if ( no % p == 0 ) { while ( no % p == 0 ) { no /= p ; } result -= result / p ; } } if ( no > 1 ) { result -= result / no ; } return result ; }
bool isEvenParity ( int x ) { int parity = 0 ; while ( x != 0 ) { if ( x % 2 == 1 ) { parity ++ ; } x = x >> 1 ; } if ( parity % 2 == 0 ) { return true ; } else { return false ; } }
int isPerfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) { sum = sum + i + n / i ; } else { sum = sum + i ; } } } if ( sum == n && n != 1 ) { return n ; } return 0 ; }
int logAToBaseB ( int a , int b ) { return a > b - 1 ? 1 + logAToBaseB ( a / b , b ) : 0 ; }
int usingBinarySearch ( int start , int end , int n , int s ) { if ( start >= end ) { return start ; } int mid = start + ( end - start ) / 2 ; int totalSum = n * ( n + 1 ) / 2 ; int midSum = mid * ( mid + 1 ) / 2 ; if ( totalSum - midSum <= s ) { return usingBinarySearch ( start , mid , n , s ) ; } return usingBinarySearch ( mid + 1 , end , n , s ) ; }
string minInt ( String s ) { char [ ] s1 = s . ToCharArray ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s1 [ i ] >= '5' ) { s1 [ i ] = ( char ) ( '9' - s1 [ i ] + '0' ) ; } } if ( s1 [ 0 ] == '0' ) { s1 [ 0 ] = '9' ; } return new String ( s1 ) ; }
int countTriplets ( int a , int b , int c ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { for ( int k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) { ans ++ ; } } } return ans ; }
bool topsyTurvy ( String s ) { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == '2' || s [ i ] == '4' || s [ i ] == '5' || s [ i ] == '6' || s [ i ] == '7' || s [ i ] == '9' ) { return false ; } } return true ; }
int sumOfLastDig ( int n , int m ) { int sum = 0 ; int k = n / m ; int [ ] arr = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ] ; } int rem = k % 10 ; int ans = k / 10 * sum ; for ( int i = 0 ; i < rem ; i ++ ) { ans += arr [ i ] ; } return ans ; }
int totalPay ( int totalItems , int priceOfOneItem , int n , int m ) { int freeItems = 0 , actual = 0 ; freeItems = totalItems / ( n + m ) ; actual = totalItems - freeItems ; int amount = actual * priceOfOneItem ; return amount ; }
int minOperations ( int x , int y , int p , int q ) { if ( y % x != 0 ) { return - 1 ; } int d = y / x ; int a = 0 ; while ( d % p == 0 ) { d /= p ; a += 1 ; } int b = 0 ; while ( d % q == 0 ) { d /= q ; b += 1 ; } if ( d != 1 ) { return - 1 ; } return a + b ; }
bool isMersenne ( int n ) { while ( n != 0 ) { int r = n % 2 ; if ( r == 0 ) { return false ; } n /= 2 ; } return true ; }
int findThirdDigit ( int n ) { if ( n < 3 ) { return 0 ; } return ( n & 1 ) != 0 ? 1 : 6 ; }
bool isOddLength ( int num ) { int count = 0 ; while ( num > 0 ) { num /= 10 ; count ++ ; } if ( count % 2 != 0 ) { return true ; } return false ; }
bool checkIsPossible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return count > 1 ; }
int bytes ( int kilobytes ) { int b = kilobytes * 1024 ; return b ; }
int octahedralNum ( int n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
string checkEqual ( String s ) { for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] != '1' && s [ i ] != '0' && s [ i ] != '8' ) { return "No" ; } } int start = 0 , end = s . Length - 1 ; while ( start < end ) { if ( s [ start ] != s [ end ] ) { return "No" ; } start ++ ; end -- ; } return "Yes" ; }
bool isUndulating ( String n ) { if ( n . Length <= 2 ) { return false ; } for ( int i = 2 ; i < n . Length ; i ++ ) { if ( n [ i - 2 ] != n [ i ] ) { return false ; } } return true ; }
int firstDigit ( int n ) { while ( n >= 10 ) { n /= 10 ; } return n ; }
int countDigit ( int n ) { if ( n == 0 ) { return 0 ; } return 1 + countDigit ( n / 10 ) ; }
bool isDivisibleBy5 ( String s ) { int n = s . Length ; return s [ n - 1 ] - '0' == 0 || s [ n - 1 ] - '0' == 5 ; }
int inv ( int a , int m ) { int m0 = m ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
bool onlyFirstAndLastAreSet ( int n ) { if ( n == 1 ) { return true ; } if ( n == 2 ) { return false ; } return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
int divide ( int dividend , int divisor ) { int sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? - 1 : 1 ; dividend = Math . Abs ( dividend ) ; divisor = Math . Abs ( divisor ) ; int quotient = 0 ; long temp = 0 ; for ( int i = 31 ; i >= 0 ; -- i ) { if ( temp + ( ( long ) divisor << i ) <= dividend ) { temp += ( long )  divisor << i ; quotient |= 1 << i ; } } if ( sign == - 1 ) { quotient = - quotient ; } return quotient ; }
char findProfession ( int level , int pos ) { if ( level == 1 ) { return 'e' ; } if ( findProfession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) { return pos % 2 != 0 ? 'd' : 'e' ; } return pos % 2 != 0 ? 'e' : 'd' ; }
bool hasCloseElements ( List < Double > numbers , double threshold ) { for ( int i = 0 ; i < numbers . Count ; i ++ ) { for ( int j = i + 1 ; j < numbers . Count ; j ++ ) { double distance = Math . Abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) return true ; } } return false ; }
double truncateNumber ( double number ) { return number % 1.0 ; }
bool belowZero ( List < int > operations ) { int balance = 0 ; for ( var op in operations ) { balance += op ; if ( balance < 0 ) { return true ; } } return false ; }
double meanAbsoluteDeviation ( List < Double > numbers ) { double sumNum = 0 ; for ( var num in numbers ) { sumNum += num ; } double mean = sumNum / numbers . Count ; double sumAbsDiff = 0 ; for ( var num in numbers ) { sumAbsDiff += Math . Abs ( num - mean ) ; } return sumAbsDiff / numbers . Count ; }
List < int > intersperse ( List < int > numbers , int delimiter ) { List < int > result = new List < int > ( ) ; if ( numbers . Count == 0 ) { return result ; } for ( int i = 0 ; i < numbers . Count - 1 ; i ++ ) { result . Add ( numbers [ i ] ) ; result . Add ( delimiter ) ; } result . Add ( numbers [ numbers . Count - 1 ] ) ; return result ; }
List < int > sumProduct ( List < int > numbers ) { int sumValue = 0 ; int prodValue = 1 ; for ( int n in numbers ) { sumValue += n ; prodValue *= n ; } return new List < int > ( sumValue , prodValue ) ; }
List < String > allPrefixes ( String s ) { List < String > result = new List < String > ( ) ; for ( int i = 1 ; i <= s . Length ; i ++ ) { result . Add ( s [ 0 , i ] ) ; } return result ; }
List < int > parseMusic ( String musicString ) { StringBuilder current = new StringBuilder ( ) ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i <= musicString . Length ; i ++ ) { if ( i == musicString . Length || musicString [ i ] == ' ' ) { if ( current . ToString ( ) . Equals ( "o" ) ) { result . Add ( 4 ) ; } if ( current . ToString ( ) . Equals ( "o|" ) ) { result . Add ( 2 ) ; } if ( current . ToString ( ) . Equals ( ".|" ) ) { result . Add ( 1 ) ; } current . Length = 0 ) ; } else { current . Append ( musicString [ i ] ) ; } } return result ; }
int strlen ( String s ) { return s . Length ; }
List < int > factorize ( int n ) { List < int > factors = new List < int > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n /= i ; factors . Add ( i ) ; i -- ; } } return factors ; }
string concatenate ( List < String > strings ) { StringBuilder result = new StringBuilder ( ) ; for ( var s in strings ) { result . Append ( s ) ; } return result . ToString ( ) ; }
List < Double > getPositive ( List < Double > l ) { List < Double > result = new List < Double > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( l [ i ] > 0 ) { result . Add ( l [ i ] ) ; } } return result ; }
List < Double > sortEven ( List < Double > l ) { List < Double > evens = new List < Double > ( ) ; for ( int i = 0 ; i < l . Count ; i += 2 ) { evens . Add ( l [ i ] ) ; } Collections . Sort ( evens ) ; List < Double > result = new List < Double > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( i % 2 == 0 ) { result . Add ( evens [ i / 2 ] ) ; } if ( i % 2 == 1 ) { result . Add ( l [ i ] ) ; } } return result ; }
string decodeCyclic ( String s ) { StringBuilder output = new StringBuilder ( ) ; int i = 0 ; while ( i <= s . Length - 3 ) { String x = s [ i + 2 ] + s [ i , i + 2 ] ; output . Append ( x ) ; i += 3 ; } return output . ToString ( ) + s [ i ] ; }
int carRaceCollision ( int n ) { return ( int ) Math . Pow ( n , 2 ) ; }
List < int > incrList ( List < int > l ) { List < int > result = new List < int > ( ) ; for ( int i in l ) { result . Add ( i + 1 ) ; } return result ; }
bool pairsSumToZero ( List < int > l ) { for ( int i = 0 ; i < l . Count ; i ++ ) { for ( int j = i + 1 ; j < l . Count ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) { return true ; } } } return false ; }
string changeBase ( int x , int b ) { StringBuilder ret = new StringBuilder ( ) ; while ( x > 0 ) { ret . Append ( 0 , x % b ) ; x /= b ; } return ret . ToString ( ) ; }
double median ( List < double > l ) { l . Sort ( ) ; if ( l . Count % 2 == 1 ) { return l [ l . Count / 2 ] ; } return ( l [ l . Count / 2 - 1 ] + l [ l . Count / 2 ] ) / 2.0 ; }
string decodeShift ( String s ) { StringBuilder sb = new StringBuilder ( ) ; for ( char ch in s ) { char w = ( char ) ( ( ch + 21 - 'a' ) % 26 + 'a' ) ; sb . Append ( w ) ; } return sb . ToString ( ) ; }
bool belowThreshold ( List < int > l , int t ) { for ( int n in l ) { if ( n >= t ) { return false ; } } return true ; }
bool correctBracketing ( String brackets ) { int depth = 0 ; for ( char b in brackets ) { if ( b == '<' ) { depth += 1 ; } if ( b == '>' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
bool monotonic ( List < Double > l ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . Count ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr != 2 ; }
List < Double > derivative ( List < Double > xs ) { List < Double > result = new List < Double > ( ) ; for ( int i = 1 ; i < xs . Count ; i ++ ) { result . Add ( i * xs [ i ] ) ; } return result ; }
int vowelsCount ( String s ) { string vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch in s ) { if ( vowels . ContainsKey ( ch ) ) { count += 1 ; } } if ( s [ s . Length - 1 ] == 'y' || s [ s . Length - 1 ] == 'Y' ) { count += 1 ; } return count ; }
int digitSum ( String s ) { int sum = 0 ; for ( char c in s ) { if ( Character . IsUpperCase ( c ) ) { sum += c ; } } return sum ; }
int fruitDistribution ( String s , int n ) { StringBuilder num1 = new StringBuilder ( ) ; StringBuilder num2 = new StringBuilder ( ) ; bool flag = false ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( Character . isDigit ( s [ i ] ) ) { if ( ! flag ) { num1 . Append ( s [ i ] ) ; } if ( flag ) { num2 . Append ( s [ i ] ) ; } } else if ( ! flag && num1 . Length > 0 ) { flag = true ; } } return n - int . Parse ( num1 . ToString ( ) ) - int . Parse ( num2 . ToString ( ) ) ; }
List < int > pluck ( List < int > arr ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < arr . Count ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . IsEmpty ( ) ) { result . Add ( arr [ i ] ) ; result . Add ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) { result . Add ( 0 , arr [ i ] ) ; result . Add ( 1 , i ) ; } } } return result ; }
List < int > strangeSortList ( List < int > lst ) { List < int > res = new List < int > ( ) ; Collections . Sort ( lst ) ; int l = 0 ; int r = lst . Count - 1 ; while ( l < r ) { res . Add ( lst [ l ] ) ; l += 1 ; res . Add ( lst [ r ] ) ; r -= 1 ; } if ( l == r ) { res . Add ( lst [ l ] ) ; } return res ; }
double triangleArea ( double a , double b , double c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return - 1 ; } double s = ( a + b + c ) / 2 ; return Math . Sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; }
bool willItFly ( List < int > q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . Count ; i ++ ) { if ( ! q [ i ] . Equals ( q [ q . Count - i - 1 ] ) ) { return false ; } sum += q [ i ] ; } return sum <= w ; }
bool isCube ( int a ) { a = Math . Abs ( a ) ; int i = ( int ) Math . Round ( Math . Pow ( a , 1.0 / 3 ) ) ; return ( int ) Math . Pow ( i , 3 ) == a ; }
int hexKey ( String num ) { String key = "2357BD" ; int total = 0 ; for ( char c in num ) { if ( key [ c ] != - 1 ) { total += 1 ; } } return total ; }
string decimalToBinary ( int dec ) { StringBuilder ans = new StringBuilder ( ) ; if ( dec != 0 ) { while ( dec > 0 ) { ans . Insert ( 0 , dec % 2 ) ; dec /= 2 ; } } else { ans . Append ( "0" ) ; } return "db" + ans . ToString ( ) + "db" ; }
bool primeLength ( String s ) { int l = s . Length ; if ( l < 2 ) { return false ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return false ; } } return true ; }
int startsOneEnds ( int n ) { if ( n < 1 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return ( int ) ( 18 * Math . Pow ( 10 , n - 2 ) ) ; }
int add ( List < int > lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . Count ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; }
List < List < int > > getRow ( List < List < int > lst , int x ) { List < List < int > coords = new List < int > ( ) ; for ( int i = 0 ; i < lst . Count ; i ++ ) { for ( int j = lst [ i ] . Count - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] [ j ] == x ) { coords . Add ( i , j ) ) ; } } } return coords ; }
int nextSmallest ( List < int > lst ) { Collections . Sort ( lst ) ; for ( int i = 1 ; i < lst . Count ; i ++ ) { if ( ! lst [ i ] . Equals ( lst [ i - 1 ] ) ) { return lst [ i ] ; } } return - 1 ; }
bool anyInt ( double a , double b , double c ) { if ( Math . Round ( a ) != a || Math . Round ( b ) != b || Math . Round ( c ) != c ) { return false ; } return a + b == c || a + c == b || b + c == a ; }
List < int > countUpTo ( int n ) { List < int > primes = new List < int > ( ) ; for ( int i = 2 ; i < n ; i ++ ) { bool isPrime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { primes . Add ( i ) ; } } return primes ; }
int closestInteger ( String value ) { double w = Double . Parse ( value ) ; return ( int ) Math . Round ( w ) ; }
List < int > makeAPile ( int n ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { result . Add ( n + 2 * i ) ; } return result ; }
List < String > wordStrings ( String s ) { StringBuilder current = new StringBuilder ( ) ; List < String > words = new List < String > ( ) ; for ( int i = 0 ; i <= s . Length ; i ++ ) { if ( i == s . Length || s [ i ] == ' ' || s [ i ] == ',' ) { if ( current . Length > 0 ) { words . Add ( current . ToString ( ) ) ; current . Length = 0 ) ; } } else { current . Append ( s [ i ] ) ; } } return words ; }
string roundedAvg ( int n , int m ) { if ( n > m ) { return "-1" ; } int num = ( m + n ) / 2 ; StringBuilder ret = new StringBuilder ( ) ; while ( num > 0 ) { ret . Insert ( 0 , num % 2 ) ; num /= 2 ; } return ret . ToString ( ) ; }
List < int > uniqueDigits ( List < int > x ) { List < int > digits = new List < int > ( ) ; for ( int i in x ) { bool isUnique = true ; for ( char c in String . Parse ( i ) ) { if ( c % 2 == 0 ) { isUnique = false ; break ; } } if ( isUnique ) { digits . Add ( i ) ; } } Collections . Sort ( digits ) ; return digits ; }
int countNums ( List < int > arr ) { int num = 0 ; for ( int n in arr ) { int neg = n < 0 ? - 1 : 1 ; n = Math . Abs ( n ) ; List < int > digits = new List < int > ( ) ; for ( char c in String . Parse ( n ) ) { digits . Add ( c - '0' ) ; } digits . Add ( 0 , digits [ 0 ] * neg ) ; int sum = 0 ; for ( int d in digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; }
bool moveOneBall ( List < int > arr ) { if ( arr . Count == 0 ) { return true ; } int num = 0 ; for ( int i = 1 ; i < arr . Count ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ arr . Count - 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; }
string exchange ( List < int > lst1 , List < int > lst2 ) { int odd = 0 ; int even = 0 ; for ( int n in lst1 ) { if ( n % 2 == 1 ) { odd += 1 ; } } for ( int n in lst2 ) { if ( n % 2 == 0 ) { even += 1 ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; }
List < String > oddCount ( List < String > lst ) { List < String > results = new List < String > ( ) ; String originalStr = "the number of odd elements in the string i of the input." ; for ( String s in lst ) { int sum = 0 ; for ( char d in s . ToCharArray ( ) ) { if ( Character . isDigit ( d ) && d % 2 == 1 ) { sum += 1 ; } } StringBuilder result = new StringBuilder ( ) ; for ( char c in originalStr [ c ] ) { if ( c == 'i' ) { result . Append ( sum ) ; } else { result . Append ( c ) ; } } results . Add ( result . ToString ( ) ) ; } return results ; }
int minSubArraySum ( List < int > nums ) { int minSum = Int32 . MaxValue ; int sum = 0 ; for ( int num in nums ) { sum += num ; if ( minSum > sum ) { minSum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return minSum ; }
int maxFill ( List < int > grid , int capacity ) { int res = 0 ; for ( var well in grid ) { int sum = 0 ; for ( int n in well ) { sum += n ; } if ( sum > 0 ) { res += ( sum - 1 ) / capacity + 1 ; } } return res ; }
List < String > selectWords ( String s , int n ) { String vowels = "aeiouAEIOU" ; StringBuilder current = new StringBuilder ( ) ; List < String > result = new List < String > ( ) ; int consonantNum = 0 ; for ( int i = 0 ; i <= s . Length ; i ++ ) { if ( i == s . Length s [ i ] == ' ' ) { if ( consonantNum == n ) { result . Add ( current . ToString ( ) ) ; } current . Length ; consonantNum = 0 ; } else { current . Append ( s [ i ] ) ; if ( vowels . ContainsKey ( s [ i ] ) ) { consonantNum += 1 ; } } } return result ; }
int solution ( List < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . Count ; i += 2 ) { if ( ( lst [ i ] % 2 ) == 1 ) { sum += lst [ i ] ; } } return sum ; }
int addElements ( List < int > arr , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= - 99 && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; }
List < int > getOddCollatz ( int n ) { List < int > oddCollatz = new List < int > ( ) ; while ( n != 1 ) { if ( n % 2 == 1 ) { oddCollatz . Add ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } oddCollatz . Add ( 1 ) ; Collections . Sort ( oddCollatz ) ; return oddCollatz ; }
bool isSorted ( List < int > lst ) { for ( int i = 1 ; i < lst . Count ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; }
string intersection ( List < int > interval1 , List < int > interval2 ) { int inter1 = Math . Max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = Math . Min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return "NO" ; } } return "YES" ; }
int prodSigns ( List < int > arr ) { if ( arr . Count == 0 ) { return - 32768 ; } int sum = 0 ; int prods = 1 ; for ( int i in arr ) { sum += Math . Abs ( i ) ; if ( i == 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; }
List < int > minPath ( List < int > grid , int k ) { int n = grid . Count ; int minNum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i , j ] == 1 ) { List < int > tmp = new List < int > ( ) ; if ( i != 0 ) { tmp . Add ( grid [ i - 1 , j ] ) ; } if ( j != 0 ) { tmp . Add ( grid [ i , j - 1 ] ) ; } if ( i != n - 1 ) { tmp . Add ( grid [ i + 1 ] . Get ( j ) ) ; } if ( j != n - 1 ) { tmp . Add ( grid [ i ] . Get ( j + 1 ) ) ; } minNum = Collections . Min ( tmp ) ; } } } List < int > ans = new List < int > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . Add ( 1 ) ; } else { ans . Add ( minNum ) ; } } return ans ; }
int digits ( int n ) { int prod = 0 ; for ( char digit in String . Parse ( n ) ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) { prod = 1 ; } prod *= digit - '0' ; } } return prod ; }
bool isNested ( String s ) { int count = 0 ; int maxCount = 0 ; for ( char ch in s ) { if ( ch == '[' ) { count += 1 ; } if ( ch == ']' ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > maxCount ) { maxCount = count ; } if ( count <= maxCount - 2 ) { return true ; } } return false ; }
int sumSquares ( List < double > lst ) { int sum = 0 ; for ( double i in lst ) { sum += Math . Ceiling ( i ) * Math . Ceiling ( i ) ; } return sum ; }
int canArrange ( List < int > arr ) { int index = - 1 ; for ( int i = 0 ; i < arr . Count ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
List < int > largestSmallestIntegers ( List < int > lst ) { int maxNeg = 0 , minPos = 0 ; for ( int n in lst ) { if ( n < 0 && ( maxNeg == 0 || n > maxNeg ) ) { maxNeg = n ; } if ( n > 0 && ( minPos == 0 || n < minPos ) ) { minPos = n ; } } return Array . AsList ( maxNeg , minPos ) ; }
string fixSpaces ( String text ) { StringBuilder res = new StringBuilder ( ) ; int spaceLen = 0 ; for ( int i = 0 ; i <= text . Length ; i ++ ) { if ( i == text . Length || text [ i ] != ' ' ) { if ( spaceLen == 1 ) { res . Append ( '_' ) ; } if ( spaceLen == 2 ) { res . Append ( "__" ) ; } if ( spaceLen > 2 ) { res . Append ( '-' ) ; } spaceLen = 0 ; if ( i != text . Length ) { res . Append ( text [ i ] ) ; } } else { spaceLen += 1 ; } } return res . ToString ( ) ; }
string filenameCheck ( String fileName ) { int digitNum = 0 , dotNum = 0 ; if ( fileName . Length < 5 || ! Character . IsLetter ( fileName [ 0 ] ) ) { return "No" ; } String suffix = fileName [ fileName . Length - 4 ] ; if ( ! suffix . Equals ( ".txt" ) && ! suffix . Equals ( ".exe" ) && ! suffix . Equals ( ".dll" ) ) { return "No" ; } foreach ( char c in fileName ) { if ( Character . isDigit ( c ) ) { digitNum += 1 ; } if ( c == '.' ) { dotNum += 1 ; } } if ( digitNum > 3 || dotNum != 1 ) { return "No" ; } return "Yes" ; }
int sumSquares ( List < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . Count ; i ++ ) { if ( i % 3 == 0 ) { sum += lst [ i ] * lst [ i ] ; } else if ( i % 4 == 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else { sum += lst [ i ] ; } } return sum ; }
string wordsInSentence ( String sentence ) { StringBuilder result = new StringBuilder ( ) ; StringBuilder current = new StringBuilder ( ) ; for ( int i = 0 ; i <= sentence . Length ; i ++ ) { if ( i == sentence . Length || sentence [ i ] == ' ' ) { bool isPrime = true ; int l = current . Length ; if ( l < 2 ) { isPrime = false ; } for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { result . Append ( current . ToString ( ) ) . Append ( ' ' ) ; } current . Length = 0 ; } else { current . Append ( sentence [ i ] ) ; } } if ( result . Length > 0 ) { result . DeleteCharAt ( result . Length - 1 ) ; } return result . ToString ( ) ; }
bool simplify ( String x , String n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . Length ; i ++ ) { if ( x [ i ] == '/' ) { a = int . Parse ( x . Substring ( 0 , i ) ) ; b = int . Parse ( x . Substring ( i + 1 ) ) ; } } for ( int i = 0 ; i < n . Length ; i ++ ) { if ( n [ i ] == '/' ) { c = int . Parse ( n . Substring ( 0 , i ) ) ; d = int . Parse ( n [ i + 1 ] ) ; } } return ( a * c ) % ( b * d ) == 0 ; }
int specialFilter ( List < int > nums ) { int count = 0 ; for ( int num in nums ) { if ( num > 10 ) { String w = String . Parse ( num ) ; if ( w [ 0 ] % 2 == 1 && w [ w . Length - 1 ] % 2 == 1 ) { count += 1 ; } } } return count ; }
int getMaxTriples ( int n ) { ArrayList arr = new ArrayList ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { arr . Add ( i * i - i + 1 ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) { count += 1 ; } } } return count ; }
int doubleTheDifference ( List < Double > lst ) { int sum = 0 ; for ( double d in lst ) { int num = ( int ) Math . Round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) { sum += num * num ; } } } return sum ; }
List < int > compare ( List < int > game , List < int > guess ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < game . Count ; i ++ ) { result . Add ( Math . Abs ( game [ i ] - guess [ i ] ) ) ; } return result ; }
string strongestExtension ( String className , List < String > extensions ) { String strongest = "" ; int max = Int32 . MinValue ; for ( var extension in extensions ) { int strength = 0 ; for ( char chr in extension . ToCharArray ( ) ) { if ( Character . IsUpperCase ( chr ) ) { strength += 1 ; } if ( Character . IsLowerCase ( chr ) ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return className + '.' + strongest ; }
string intToMiniRoman ( int number ) { List < int > num = new List < int > ( 1000 , 900 , 500 , 400 , 90 , 50 , 10 , 9 , 5 , 4 , 1 ) ; List < String > sym = new List < String > ( "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "iv" , "i" ) ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res . Append ( sym [ pos ] ) ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } return res . ToString ( ) ; }
List < int > eat ( int number , int need , int remaining ) { return need > remaining ? Array . AsList ( number + remaining , 0 ) : Array . AsList ( number + need , remaining - need ) ; }
int doAlgebra ( List < String > ops , List < int > operands ) { List < int > nums = new List < int > ( operands ) ; List < String > currentOps = new List < String > ( ops ) ; int i = currentOps . Count - 1 ; while ( i >= 0 ) { if ( currentOps [ i ] . Equals ( "**" ) ) { nums . Add ( i , ( int ) Math . Pow ( nums [ i ] , nums [ i + 1 ] ) ) ; nums . Remove ( i + 1 ) ; currentOps . Remove ( i ) ; } i -- ; } i = 0 ; while ( i < currentOps . Count ) { if ( currentOps [ i ] . Equals ( "*" ) ) { nums . Set ( i , nums [ i ] * nums [ i + 1 ] ) ; nums . Remove ( i + 1 ) ; currentOps . Remove ( i ) ; } else if ( currentOps [ i ] . Equals ( "//" ) ) { nums . Set ( i , nums [ i ] / nums [ i + 1 ] ) ; nums . Remove ( i + 1 ) ; currentOps . Remove ( i ) ; } else { i ++ ; } } i = 0 ; while ( i < currentOps . Count ) { if ( currentOps [ i ] . Equals ( "+" ) ) { nums . Add ( i , nums [ i ] + nums [ i + 1 ] ) ; nums . Remove ( i + 1 ) ; currentOps . Remove ( i ) ; } else { i ++ ; } } return nums [ 0 ] ; }
List < int > generateIntegers ( int a , int b ) { int lower = Math . Max ( 2 , Math . Min ( a , b ) ) ; int upper = Math . Min ( 8 , Math . Max ( a , b ) ) ; List < int > result = new List < int > ( ) ; for ( int i = lower ; i <= upper ; i += 2 ) { result . Add ( i ) ; } return result ; }
bool isStepNum ( int n ) { int prevDigit = - 1 ; while ( n > 0 ) { int curDigit = n % 10 ; if ( prevDigit != - 1 ) { if ( Math . Abs ( curDigit - prevDigit ) != 1 ) { return false ; } } n /= 10 ; prevDigit = curDigit ; } return true ; }
int numOfWays ( int n , int k ) { int p = 1 ; if ( k % 2 != 0 ) { p = - 1 ; } return ( int ) ( Math . Pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; }
List < int > findDivisors ( int n ) { List < int > v = new List < int > ( ) ; for ( int i = 1 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { v . Add ( i ) ; } else { v . Add ( i ) ; v . Add ( n / i ) ; } } } return v ; }
int eggDrop ( int n , int k ) { if ( k == 1 || k == 0 ) { return k ; } if ( n == 1 ) { return k ; } int min = int . MaxValue ; int x , res ; for ( x = 1 ; x <= k ; x ++ ) { res = Math . Max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , k - x ) ) ; if ( res < min ) { min = res ; } } return min + 1 ; }
bool isPowerOfTwo ( int n ) { if ( n == 0 ) { return false ; } return Math . Ceiling ( Math . Log ( n ) / Math . Log ( 2 ) ) == Math . Floor ( Math . Log ( n ) / Math . Log ( 2 ) ) ; }
string shortestPalindrome ( String s ) { int n = s . Length ; List < String > v = new List < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i ; int r = i ; String ans1 = "" ; String ans2 = "" ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans1 += s [ l ] ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans2 += s [ l ] ; l -- ; r ++ ; } v . Add ( ans1 ) ; v . Add ( ans2 ) ; } String ans = v [ 0 ] ; for ( int i = 0 ; i < v . Count ; i ++ ) { if ( v [ i ] != "" ) { if ( ans . Length >= v [ i ] . Length ) { ans = v [ i ] ; } } } return ans ; }
int minimumAdjacentDifference ( List < int > a , int n , int k ) { int minDiff = Int32 . MaxValue ; for ( int i = 0 ; i <= k ; i ++ ) { int maxDiff = int . MinValue ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { maxDiff = Math . Max ( maxDiff , a [ p + 1 ] - a [ p ] ) ; } } minDiff = Math . Min ( minDiff , maxDiff ) ; } return minDiff ; }
int cal ( List < int > arr , int mid ) { int chocolate = 0 ; for ( var i in arr ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; }
bool check ( int v , List < int > a , int m ) { int tec = 0 , ans = 0 ; List < int > b = new List < int > ( ) ; for ( int i = 0 ; i < a . Count ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b . Set ( i + 2 , mov ) ; } } return ans <= m ; }
int largestNum ( List < int > arr ) { int res = 0 ; Collections . Sort ( arr ) ; int l = 0 , r = arr . Count - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . Max ( res , Math . Max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) { l ++ ; } else { r -- ; } } return res ; }
int binarySearch ( List < int > p , int n ) { int i = 0 ; int j = p . Count - 1 ; int index = - 1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
int findMinLength ( List < int > arr ) { int index = arr . Count - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; }
int minDigits ( int n , int k ) { int digitsNum = ( int ) Math . Floor ( Math . Log ( n ) + 1 ) ; int tempSum = 0 ; int temp = digitsNum ; int result = 0 ; int x , v ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = n / ( int ) Math . Pow ( 10 , temp - 1 ) ; tempSum += v % 10 ; if ( tempSum >= k ) { v /= 10 ; v ++ ; result = v * ( int ) Math . Pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; } return - 1 ; }
int checkForPerfectSquare ( List < int > arr , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; }
int minFlips ( List < int > mat , String s ) { int n = mat . Count ; int m = mat . Count ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s [ i + j ] - '0' ) { count ++ ; } } } return count ; }
List < List < int > > constructTree ( int n , List < List < int > > edges ) { List < List < int > adjl = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { adjl . Add ( new List < int > ( ) ) ; } foreach ( var e in edges ) { int u = e [ 0 ] ; int v = e [ 1 ] ; adjl [ u ] . Add ( v ) ; adjl [ v ] . Add ( u ) ; } return adjl ; }
int findSumOfValues ( int v , List < int > parent , List < int > valuesChildren ) { int curNode = v ; int sum = 0 ; while ( curNode != - 1 ) { sum += valuesChildren [ curNode ] ; curNode = parent [ curNode ] ; } return sum ; }
int getDistinct ( int d , int count ) { int num = 0 ; count = ( int ) Math . Pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; }
bool isIncreasing ( List < int > arr ) { for ( int i = 0 ; i < arr . Count - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; }
int minAdjSwaps ( List < int > mat ) { int n = mat . Count ; List < int > cntZero = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 && mat [ i ] [ j ] == 0 ; j -- ) { cntZero . Add ( i , cntZero [ i ] + 1 ) ; } } int cntSwaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cntZero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cntZero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) { return - 1 ; } while ( first > i ) { Collections . Swap ( cntZero , first , first - 1 ) ; first -- ; cntSwaps ++ ; } } } return cntSwaps ; }
int solve ( List < int > values , List < int > salary , int mod ) { int ret = 1 ; int amt = 0 ; Collections . Sort ( values ) ; Collections . Sort ( salary ) ; while ( salary . Count > 0 ) { while ( values . Count > 0 && values [ values . Count - 1 ] >= salary [ salary . Count - 1 ] ) { amt ++ ; values . Remove ( values . Count - 1 ) ; } if ( amt == 0 ) { return 0 ; } ret *= amt -- ; ret %= mod ; salary . Remove ( salary . Count - 1 ) ; } return ret ; }
List < int > organizeInOrder ( List < int > vec , List < char > op , int n ) { List < int > result = new List < int > ( ) ; Collections . Sort ( vec ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result . Add ( k , vec [ i ++ ] ) ; } else { result . Add ( k , vec [ j -- ] ) ; } k ++ ; } result . Add ( n - 1 , vec [ i ] ) ; return result ; }
int countPoints ( int n , int m , List < int > a , List < int > b , int x , int y ) { Collections . Sort ( a ) ; Collections . Sort ( b ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b . Get ( j ) ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; }
bool areSame ( List < int > a , List < int > b ) { Collections . Sort ( a ) ; Collections . Sort ( b ) ; return a . Equals ( b ) ; }
int countNumberOfStrings ( String s ) { int n = s . Length - 1 ; int count = ( int ) Math . Pow ( 2 , n ) ; return count ; }
List < int > primePower ( int x ) { List < int > primePow = new List < int > ( ) ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } primePow . Add ( p ) ; } } if ( x > 1 ) { primePow . Add ( x ) ; } return primePow ; }
bool isPerfect ( int n0 ) { double n = Math . Sqrt ( n0 ) ; if ( Math . Floor ( n ) != Math . Ceiling ( n ) ) { return false ; } return true ; }
int findSum ( int l , int r ) { ArrayList arr = new ArrayList ( ) ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . Add ( i + x ) ; if ( i + 1 <= r ) { arr . Add ( i + 1 + x ) ; } x *= - 1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr [ i ] ; } return sum ; }
int results ( int n , int k ) { return ( int ) Math . Round ( Math . Pow ( n , 1.0 / Math . Pow ( 2.0 , k ) ) ) ; }
List < int > factors ( int n ) { List < int > v = new List < int > ( ) ; v . Add ( 1 ) ; for ( int i = 2 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . Add ( i ) ; if ( n / i != i ) { v . Add ( n / i ) ; } } } return v ; }
int smallestNum ( int n ) { double x = Math . Pow ( 10 , ( n - 1 ) / 2.0 ) ; return ( int ) Math . Ceiling ( x ) ; }
int smallest ( string s ) { ArrayList a = new ArrayList ( Collections . nCopies ( s . Length , 0 ) ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { a . Add ( i , s [ i ] - '0' ) ; } List < int > b = new List < int > ( ) ; for ( int i = 0 ; i < a . Count ; i ++ ) { if ( a [ i ] % 2 != 0 ) { b . Add ( a [ i ] ) ; } } Collections . Sort ( b ) ; if ( b . Count > 1 ) { return b [ 0 ] * 10 + b [ 1 ] ; } return - 1 ; }
List < double > Diagonals ( double a , double b , double c , double d ) { List < double > ans = new List < double > ( ) ; ans . Add ( Math . Sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . Add ( Math . Sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; }
int findNumberOfDigits ( int n , int bas ) { int dig = ( int ) Math . Ceiling ( Math . Log ( n ) / Math . Log ( bas ) ) + 1 ; return dig ; }
double nGon ( int n ) { double proAngleVar ; if ( n % 4 == 0 ) { proAngleVar = Math . PI * ( 180.0 / n ) / 180 ; } else { proAngleVar = Math . PI * ( 180.0 / ( 2 * n ) ) / 180 ; } double negX = 1.0e+99 , posX = - 1.0e+99 , negY = 1.0e+99 , posY = - 1.0e+99 ; for ( int j = 0 ; j < n ; ++ j ) { double px = Math . Cos ( 2 * Math . PI * j / n + proAngleVar ) ; double py = Math . Sqrt ( 2 * Math . PI * j / n + proAngleVar ) ; negX = Math . Min ( negX , px ) ; posX = Math . Max ( posX , px ) ; negY = Math . Min ( negY , py ) ; posY = Math . Max ( posY , py ) ; } double opt2 = Math . Max ( posX - negX , posY - negY ) ; return opt2 / Math . Sqrt ( Math . PI / n ) / 2 ; }
int findMaxK ( int n ) { int p = ( int ) ( Math . Log ( n ) / Math . Log ( 2 ) ) ; return ( int ) Math . Pow ( 2 , p ) ; }
int nthFibo ( int n ) { double a = ( Math . Pow ( 5 , 0.5 ) + 1 ) / 2 ; double b = ( - 1 * Math . Pow ( 5 , 0.5 ) + 1 ) / 2 ; double r = Math . Pow ( 5 , 0.5 ) ; double ans = ( Math . Pow ( a , n ) - Math . Pow ( b , n ) ) / r ; return ( int ) ans ; }
double findProb ( int l , int r ) { double countOfPs = Math . Ceiling ( Math . Sqrt ( r ) ) - Math . Ceiling ( Math . Sqrt ( l ) ) + 1 ; double total = r - l + 1 ; double prob = countOfPs / total ; return prob ; }
int previousFibonacci ( int n ) { double a = n / ( ( 1 + Math . Sqrt ( 5 ) ) / 2.0 ) ; return ( int ) Math . Round ( a ) ; }
List < int > distPrime ( List < int > arr , List < int > allPrimes ) { List < int > list1 = new List < int > ( ) ; for ( int i in allPrimes ) { for ( int j in arr ) { if ( j % i == 0 ) { list1 . Add ( i ) ; break ; } } } return list1 ; }
List < int > getArray ( int n ) { List < int > ans = new List < int > ( ) ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans . Add ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; }
int maximumLength ( List < int > a ) { List < int > counts = new List < int > ( ) ; int ans = 0 ; for ( int index = 0 ; index < a . Count ; index ++ ) { counts . Add ( a [ index ] , counts [ a [ index ] ] + 1 ) ; List < int > k = new List < int > ( ) ; for ( var i in counts ) { if ( i != 0 ) { k . Add ( i ) ; } } Collections . Sort ( k ) ; if ( k . Count == 1 || ( k . Count == k . Count - 2 ) && k [ k . Count - 1 ] - k [ k . Count - 2 ] == 1 ) || ( k [ 0 ] == 1 && k [ 1 ] == k [ k . Count - 1 ] ) ) { ans = index ; } } return ans + 1 ; }
int maxEdges ( double n ) { double edges = Math . Ceiling ( n * n / 4 ) ; return ( int ) edges ; }
int findK ( int n , int k ) { ArrayList a = new ArrayList ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a . Add ( i ) ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a . Add ( i ) ; } } return a [ k - 1 ] ; }
bool isKeith ( int x , int temp ) { ArrayList terms = new ArrayList ( ) ; int n = 0 ; while ( temp > 0 ) { terms . Add ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } Collections . Reverse ( terms ) ; int nextTerm = 0 , i = n ; while ( nextTerm < x ) { nextTerm = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { nextTerm += terms [ i - j ] ; } terms . Add ( nextTerm ) ; i ++ ; } return nextTerm == x ; }
bool factors ( int n , int k ) { ArrayList v = new ArrayList ( ) ; while ( n % 2 == 0 ) { v . Add ( 2 ) ; n /= 2 ; } if ( v . Count >= k ) { return true ; } for ( int i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n = n / i ; v . Add ( i ) ; } if ( v . Count >= k ) { return true ; } return false ; }
List < String > separateParenGroups ( String parenString ) { List < String > allParens = new List < String > ( ) ; StringBuilder currentParen = new StringBuilder ( ) ; int currentDepth = 0 ; for ( var c in parenString ) { if ( c == '(' ) { currentDepth += 1 ; currentParen . Append ( c ) ; } else if ( c == ')' ) { currentDepth -= 1 ; currentParen . Append ( c ) ; if ( currentDepth == 0 ) { allParens . Add ( currentParen . ToString ( ) ) ; currentParen . Length = 0 ; } } } return allParens ; }
List < int > parseNestedParens ( String parenString ) { List < int > allLevels = new List < int > ( ) ; int level = 0 ; int maxLevel = 0 ; for ( int i = 0 ; i < parenString . Length ; i ++ ) { char chr = parenString [ i ] ; if ( chr == '(' ) { level += 1 ; if ( level > maxLevel ) { maxLevel = level ; } } if ( chr == ')' ) { level -= 1 ; if ( level == 0 ) { allLevels . Add ( maxLevel ) ; maxLevel = 0 ; } } } return allLevels ; }
List < String > filterBySubstring ( List < String > strings , String substring ) { List < String > result = new List < String > ( ) ; for ( var s in strings ) { if ( s . Contains ( substring ) ) { result . Add ( s ) ; } } return result ; }
List < int > rollingMax ( List < int > numbers ) { List < int > result = new List < int > ( ) ; int runningMax = 0 ; for ( int n in numbers ) { if ( n > runningMax ) { runningMax = n ; } result . Add ( runningMax ) ; } return result ; }
string makePalindrome ( String s ) { if ( s . IsEmpty ( ) ) { return "" ; } for ( int i = 0 ; i < s . Length ; i ++ ) { String rStr = s [ i ] ; if ( rStr . Equals ( new StringBuilder ( rStr ) . Reverse ( ) . ToString ( ) ) ) { String nStr = s . Substring ( 0 , i ) ; String n2Str = new StringBuilder ( nStr ) . Reverse ( ) . ToString ( ) ; return s + n2Str ; } } return s . Substring ( 0 , s . Length - 1 ) + new StringBuilder ( s ) . Reverse ( ) . ToString ( ) ; }
string stringXor ( String a , String b ) { StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i < a . Length ; i ++ ) { if ( a [ i ] == b [ i ] ) { result . Append ( '0' ) ; } else { result . Append ( '1' ) ; } } return result . ToString ( ) ; }
string longest ( List < String > strings ) { if ( strings . Count == 0 ) return "" ; int maxLen = strings . Max ( ) ; for ( String s in strings ) { if ( s . Length == maxLen ) { return s ; } } return "" ; }
string StringSequence ( int n ) { StringBuilder s = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . Append ( i ) ; s . Append ( " " ) ; } s . Append ( n ) ; return s . ToString ( ) ; }
int countDistinctCharacters ( String s ) { HashSet < char > distinct = new HashSet < char > ( ) ; for ( char c in s . ToLower ( ) . ToCharArray ( ) ) { distinct . Add ( c ) ; } return distinct . Count ; }
int howManyTimes ( String s , String sub ) { int times = 0 ; for ( int i = 0 ; i <= s . Length - sub . Length ; i ++ ) { if ( s . StartsWith ( sub , i ) ) { times += 1 ; } } return times ; }
string sortNumbers ( string numbers ) { Dictionary < String , int > toNum = Dictionary < String , int > ( ) ; for ( int i = 0 ; i <= numbers . Length ; i ++ ) { if ( i == numbers . Length || numbers [ i ] == ' ' ) { if ( toNum . ContainsKey ( current . ToString ( ) ) ) { ints . Add ( toNum [ current . ToString ( ) ) ; current . Length = 0 ; } } else { current . Append ( numbers [ i ] ) ; } } Collections . Sort ( ints ) ; StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i < ints . Count ; i ++ ) { result . Append ( fromNum [ ints [ i ] ] ) ; if ( i != ints . Count - 1 ) { result . Append ( " " ) ; } } return result . ToString ( ) ; }
List < Double > findClosestElements ( List < Double > numbers ) { List < Double > closestPair = new List < Double > ( ) ; double distance = Math . Abs ( numbers [ 0 ] - numbers [ 1 ] ) ; for ( int i = 0 ; i < numbers . Count ; i ++ ) { for ( int j = i + 1 ; j < numbers . Count ; j ++ ) { if ( Math . Abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closestPair . Set ( 0 , numbers [ i ] ) ; closestPair . Set ( 1 , numbers [ j ] ) ; distance = Math . Abs ( numbers [ i ] - numbers [ j ] ) ; } } } Collections . Sort ( closestPair ) ; return closestPair ; }
List < Double > rescaleToUnit ( List < Double > numbers ) { double minNum = Collections . Min ( numbers ) ; double maxNum = Collections . Max ( numbers ) ; List < Double > result = new List < Double > ( ) ; for ( double n in numbers ) { result . Add ( ( n - minNum ) / ( maxNum - minNum ) ) ; } return result ; }
List < int > filterIntegers ( List < Object > values ) { List < int > result = new List < int > ( ) ; for ( var e in values ) { if ( e instanceof int ) { result . Add ( ( int ) e ) ; } } return result ; }
List < int > removeDuplicates ( List < int > numbers ) { Dictionary < int , int > c = new Dictionary < int , int > ( ) ; for ( int i in numbers ) { c . Add ( i , 1 ) ; } List < int > result = new List < int > ( ) ; for ( int i in numbers ) { if ( c [ i ] == 1 ) { result . Add ( i ) ; } } return result ; }
string flipCase ( String s ) { StringBuilder result = new StringBuilder ( ) ; for ( char c in s ) { if ( Character . isLowerCase ( c ) ) { result . Append ( c ) ) ; } else { result . Append ( Character . ToLower ( c ) ) ; } } return result . ToString ( ) ; }
List < String > filterByPrefix ( List < String > strings , String prefix ) { List < String > result = new List < String > ( ) ; for ( int i = 0 ; i < strings . Count ; i ++ ) { if ( strings [ i ] . StartsWith ( prefix ) ) { result . Add ( strings [ i ] ) ; } } return result ; }
double findZero ( List < double > xs ) { double ans = 0 ; double value = 0 ; for ( int i = 0 ; i < xs . Count ; i ++ ) { value += xs [ i ] * Math . Pow ( ans , i ) ; } while ( Math . Abs ( value ) > 1e-6 ) { double driv = 0 ; for ( int i = 1 ; i < xs . Count ; i ++ ) { driv += xs [ i ] * Math . Pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . Count ; i ++ ) { value += xs [ i ] * Math . Pow ( ans , i ) ; } } return ans ; }
List < int > sortThird ( List < int > l ) { List < int > thirds = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i += 3 ) { thirds . Add ( l [ i ] ) ; } Collections . Sort ( thirds ) ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( i % 3 == 0 ) { result . Add ( thirds [ i / 3 ] ) ; } else { result . Add ( l [ i ] ) ; } } return result ; }
List < int > unique ( List < int > l ) { List < int > result = new List < int > ( new HashSet < int > ( l ) ) ; Collections . Sort ( result ) ; return result ; }
double maxElement ( List < double > l ) { return l . Max ( ) ; }
bool triplesSumToZero ( List < int > l ) { for ( int i = 0 ; i < l . Count ; i ++ ) { for ( int j = i + 1 ; j < l . Count ; j ++ ) { for ( int k = j + 1 ; k < l . Count ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) { return true ; } } } return false ; }
int fib4 ( int n ) { ArrayList results = new ArrayList ( ) ; for ( int i = 4 ; i <= n ; i ++ ) { results . Add ( results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ) ; } return results [ n ] ; }
bool isPalindrome ( String text ) { String pr = new StringBuilder ( text ) . Reverse ( ) ; return pr . Equals ( text ) ; }
string removeVowels ( String text ) { StringBuilder result = new StringBuilder ( ) ; String vowels = "aeiou" ; for ( char ch in text ) { if ( vowels . IndexOf ( char . ToLower ( ch ) ) == - 1 ) { result . Append ( ch ) ; } } return result . ToString ( ) ; }
bool sameChars ( String s0 , String s1 ) { HashSet < char > set0 = new HashSet < char > ( ) ; for ( char c in s0 . toCharArray ( ) ) { set0 . Add ( c ) ; } set < char > set1 = new HashSet < char > ( ) ; for ( char c in s1 . toCharArray ( ) ) { set1 . Add ( c ) ; } return set0 . Equals ( set1 ) ; }
List < int > common ( List < int > l1 , List < int > l2 ) { HashSet < int > us = new HashSet < int > ( ) ; for ( int e1 in l1 ) { for ( int e2 in l2 ) { if ( e1 == e2 ) { us . Add ( e1 ) ; } } } List < int > ret = new List < int > ( us ) ; Collections . Sort ( ret ) ; return ret ; }
bool correctBracketing ( String brackets ) { int depth = 0 ; for ( char b in brackets ) { if ( b == '(' ) { depth += 1 ; } if ( b == ')' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
string circularShift ( int x , int shift ) { string xs = String . Parse ( x ) ; if ( shift > xs . Length ) { return new StringBuilder ( xs ) . Reverse ( ) . ToString ( ) ; } return xs . Substring ( xs . Length - shift ) + xs . Substring ( 0 , xs . Length - shift ) ; }
int search ( List < int > lst ) { Dictionary < int , int > counter = new Dictionary < int , int > ( ) ; for ( int i in lst ) { counter . Add ( i , 1 ) ; } int ans = - 1 ; for ( var item in counter ) { if ( item . Value >= item . Key && item . Key > ans ) { ans = item . Key ; } } return ans ; }
int smallestChange ( List < int > arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . Count / 2 ; i ++ ) { if ( ! arr [ i ] . Equals ( arr [ arr . Count - i - 1 ] ) ) { ans += 1 ; } } return ans ; }
List < String > totalMatch ( List < String > lst1 , List < String > lst2 ) { int sum1 = 0 ; for ( var st in lst1 ) { sum1 += st . Length ; } int sum2 = 0 ; for ( String st in lst2 ) { sum2 += st . Length ; } return sum1 > sum2 ? lst2 : lst1 ; }
bool isHappy ( String s ) { if ( s . Length < 3 ) { return false ; } for ( int i = 0 ; i < s . Length - 2 ; i ++ ) { if ( s [ i ] == s [ i + 1 ] s [ i ] == s [ i + 2 ] s [ i + 1 ] == s [ i + 2 ] ) { return false ; } } return true ; }
List < String > numericalLetterGrade ( List < double > grades ) { List < String > letterGrade = new List < String > ( ) ; for ( double gpa in grades ) { if ( gpa == 4.0 ) { letterGrade . Add ( "A+" ) ; } else if ( gpa > 3.7 ) { letterGrade . Add ( "A" ) ; } else if ( gpa > 3.0 ) { letterGrade . Add ( "B+" ) ; } else if ( gpa > 2.7 ) { letterGrade . Add ( "B" ) ; } else if ( gpa > 2.0 ) { letterGrade . Add ( "C+" ) ; } else if ( gpa > 1.3 ) { letterGrade . Add ( "C-" ) ; } else if ( gpa > 1.0 ) { letterGrade . Add ( "D+" ) ; } else if ( gpa > 0.7 ) { letterGrade . Add ( "D" ) ; } else if ( gpa > 0.0 ) { letterGrade . Add ( "D-" ) ; } else { letterGrade . Add ( "E" ) ; } } return letterGrade ; }
string solve ( int n ) { StringBuilder biStr = new StringBuilder ( ) ; int sum = 0 ; for ( char c in String . Parse ( n ) ) { sum += c - '0' ; } while ( sum > 0 ) { biStr . Insert ( 0 , sum % 2 ) ; sum /= 2 ; } return biStr . ToString ( ) ; }
string antiShuffle ( String s ) { StringBuilder ret = new StringBuilder ( ) ; StringBuilder current = new StringBuilder ( ) ; for ( int i = 0 ; i <= s . Length ; i ++ ) { if ( i == s . Length s [ i ] == ' ' ) { char [ ] tmp = current . ToString ( ) ; Array . Sort ( tmp ) ; if ( ! ret . IsEmpty ( ) ) { ret . Append ( ' ' ) ; } ret . Append ( String . Parse ( tmp ) ) ; current . Length = 0 ; } else { current . Append ( s [ i ] ) ; } } return ret . ToString ( ) ; }
List < int > sortArray ( List < int > array ) { if ( array . Count == 0 ) { return array ; } if ( ( array [ 0 ] + array [ array . Count - 1 ] ) % 2 == 1 ) { Collections . Sort ( array ) ; } else { array . Sort ( Collections . ReverseOrder ( ) ) ; } return array ; }
string encrypt ( String s ) { StringBuilder ans = new StringBuilder ( ) ; for ( char c in s ) { if ( Character . IsLetter ( c ) ) { ans . Append ( ( char ) ( 'a' + ( c - 'a' + 4 ) % 26 ) ) ; } else { ans . Append ( c ) ; } } return ans . ToString ( ) ; }
int isBored ( String s ) { bool isStart = true ; int sum = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == '.' || s [ i ] == '?' || s [ i ] == '!' ) { isStart = true ; } else if ( isStart ) { if ( s [ i ] == ' ' ) { continue ; } if ( s [ i ] == 'I ' ) { sum += 1 ; } isStart = false ; } } return sum ; }
string encode ( String message ) { String vowels = "aeiouAEIOU" ; StringBuilder ret = new StringBuilder ( ) ; for ( char c in message ) { if ( Character . IsUpperCase ( c ) ) { c = Character . ToLower ( c ) ; if ( vowels . ContainsKey ( c ) ) { c = ( char ) ( 'a' + ( c - 'a' + 2 ) % 26 ) ; } } else if ( Character . IsLowerCase ( c ) ) { c = Character . ToUpper ( c ) ; if ( vowels . ContainsKey ( c ) ) { c = ( char ) ( 'A' + ( c - 'A' + 2 ) % 26 ) ; } } ret . Append ( c ) ; } return ret . ToString ( ) ; }
int skjkasdkd ( List < int > lst ) { int largest = 0 ; for ( int n in lst ) { if ( n > largest ) { bool prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } int sum = 0 ; String s = String . Parse ( largest ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { sum += s [ i ] - '0' ; } return sum ; }
bool checkDictCase ( Dictionary < String , String > dict ) { if ( dict . Count == 0 ) { return false ; } int isLower = 0 ; int isUpper = 0 ; for ( var key in dict . Keys ) { for ( char c in key . Values ) { if ( Character . IsLowerCase ( c ) ) { isLower = 1 ; } else if ( Character . IsUpperCase ( c ) ) { isUpper = 1 ; } else { return false ; } } } return isLower + isUpper == 1 ; }
int multiply ( int a , int b ) { return ( Math . Abs ( a ) % 10 ) * ( Math . Abs ( b ) % 10 ) ; }
int countUpper ( String s ) { String uVowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . Length ; i += 2 ) { if ( uVowel . IndexOf ( s [ i ] ) != - 1 ) { count += 1 ; } } return count ; }
List < String > byLength ( List < int > arr ) { Dictionary < int , String > numTo = new Dictionary < int , String > ( ) ; numTo . Add ( 1 , "One" , 2 , "Two" , 3 , "Three" , 4 , "Four" , 5 , "Five" , 6 , "Six" , 7 , "Seven" , 8 , "Eight" , 9 , "Nine" ) ; List < int > sortedArr = new List < int > ( arr ) ; sortedArr . Sort ( ) ; List < String > newArr = new List < String > ( ) ; for ( int n in sortedArr ) { if ( n >= 1 && n <= 9 ) { newArr . Add ( numTo [ n ] ) ; } } return newArr ; }
List < int > f ( int n ) { int sum = 0 ; int prod = 1 ; List < int > result = new List < int > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) { result . Add ( prod ) ; } else { result . Add ( sum ) ; } } return result ; }
List < int > evenOddPalindrome ( int n ) { int evenCount = 0 , oddCount = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { String s = String . Parse ( i ) ; String rStr = new StringBuilder ( s ) . Reverse ( ) ; if ( s . Equals ( rStr ) ) { if ( i % 2 == 1 ) { oddCount += 1 ; } else { evenCount += 1 ; } } } return new List < int > ( evenCount , oddCount ) ; }
Map < char , int > histogram ( string test ) { Dictionary < char , int > count = new Dictionary < char , int > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . Length ; i ++ ) { if ( test [ i ] != ' ' ) { count . Add ( test [ i ] , 1 ) ; if ( count [ test [ i ] ] > max ) { max = count [ test [ i ] ] ; } } } Map < char , int > result = new Dictionary < char , int > ( ) ; foreach ( KeyValuePair < char , int > entry in count ) { if ( entry . Value == max ) { result . Add ( entry . Key , entry . Value ) ; } } return result ; }
List < String > reverseDelete ( String s , String c ) { StringBuilder ret = new StringBuilder ( ) ; for ( char ch in s . ToCharArray ( ) ) { if ( c . IndexOf ( ch ) == - 1 ) { ret . Append ( ch ) ; } } String flag = "False" ; if ( ret . ToString ( ) . Equals ( new StringBuilder ( ret ) . Reverse ( ) . ToString ( ) ) ) { flag = "True" ; } return Array . ToList ( ret . ToString ( ) , flag ) ; }
List < int > sortArray ( List < int > arr ) { List < int > bin = new List < int > ( ) ; for ( int i in arr ) { int b = 0 ; int n = Math . Abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . Add ( b ) ; } for ( int i = 0 ; i < arr . Count ; i ++ ) { for ( int j = 1 ; j < arr . Count ; j ++ ) { if ( bin [ j ] < bin [ j - 1 ] || ( bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) ) { Collections . Swap ( bin , j , j - 1 ) ; Collections . Swap ( arr , j , j - 1 ) ; } } } return arr ; }
string getClosestVowel ( String word ) { string vowels = "AEIOUaeiou" ; for ( int i = word . Length - 2 ; i > 0 ; i -- ) { if ( vowels . ContainsKey ( word [ i ] ) ) != - 1 && vowels . ContainsKey ( word [ i + 1 ] ) == - 1 && vowels . ContainsKey ( word [ i - 1 ] ) == - 1 ) { return String . Parse ( word [ i ] ) ; } } return "" ; }
string matchParens ( List < String > lst ) { List < String > strings = new List < String > ( ) ; for ( int l in strings ) { int count = 0 ; for ( char c in l ) { if ( c == '(' ) { count += 1 ; } else { count -= 1 ; } if ( count < 0 ) { break ; } } if ( count == 0 ) { return "Yes" ; } } return "No" ; }
List < int > maximum ( List < int > arr , int k ) { if ( k == 0 ) { return new List < int > ( ) ; } Collections . Sort ( arr ) ; return arr . SubList ( arr . Count - k , arr . Count ) ; }
bool validDate ( String date ) { if ( date . Length != 10 ) { return false ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 || i == 5 ) { if ( date [ i ] != '-' ) { return false ; } } else if ( ! Character . isDigit ( date [ i ] ) ) { return false ; } } int month = Int32 . Parse ( date . Substring ( 0 , 2 ) ) ; int day = Int32 . Parse ( date . Substring ( 3 , 5 ) ) ; int year = int . Parse ( date [ 6 , 10 ) ) ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) { return false ; } return true ; }
object splitWords ( String txt ) { StringBuilder current = new StringBuilder ( ) ; List < String > result = new List < String > ( ) ; if ( txt . ContainsKey ( ' ' ) ) { for ( int i = 0 ; i <= txt . Length ; i ++ ) { if ( i == txt . Length || txt [ i ] == ' ' ) { if ( current . Length > 0 ) { result . Add ( current . ToString ( ) ) ; } current . Length = 0 ) ; } else { current . Append ( txt [ i ] ) ; } } return result ; } if ( txt . ContainsKey ( ',' ) ) { for ( int i = 0 ; i <= txt . Length ; i ++ ) { if ( i == txt . Length || txt [ i ] == ',' ) { if ( current . Length > 0 ) { result . Add ( current . ToString ( ) ) ; } current . Length = 0 ; } else { current . Append ( txt [ i ] ) ; } } return result ; } int num = 0 ; foreach ( char c in txt ) { if ( Character . IsLowerCase ( c ) && c % 2 == 0 ) { num += 1 ; } } return Array . ToList ( String . Parse ( num ) ) ; }
List < int > tri ( int n ) { if ( n == 0 ) { return Array . asList ( 1 ) ; } List < int > tris = new List < int > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { tris . Add ( i / 2 + 1 ) ; } else { tris . Add ( tris [ i - 1 ] + tris [ i - 2 ] + ( i + 3 ) / 2 ) ; } } return tris ; }
bool checkIfLastCharIsALetter ( String txt ) { if ( txt . Length == 0 ) { return false ; } return Character . IsLetter ( txt [ txt . Length - 1 ] ) && ( txt . Length == 1 || ! Character . IsLetter ( txt [ txt . Length - 2 ] ) ) ; }
List < int > orderByPoints ( List < int > nums ) { List < int > result = new List < int > ( ) ; for ( int num in nums ) { String w = String . Parse ( Math . Abs ( num ) ) ; int sum = 0 ; for ( char c in w . ToList ( ) ) { sum += c - '0' ; } if ( num < 0 ) { sum -= 2 * ( w [ 0 ] - '0' ) ; } result . Add ( sum ) ; } for ( int i = 0 ; i < nums . Count ; i ++ ) { for ( int j = 1 ; j < nums . Count ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { Collections . Swap ( result , j , j - 1 ) ; Collections . Swap ( nums , j , j - 1 ) ; } } } return nums ; }
List < String > bf ( String planet1 , String planet2 ) { List < String > planets = new List < String > ( "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" ) ; int idx1 = planets . IndexOf ( planet1 ) ; int idx2 = planets . IndexOf ( planet2 ) ; if ( idx1 == - 1 || idx2 == - 1 || idx1 == idx2 ) { return new List < String > ( ) ; } return idx1 > idx2 ? planets . Substring ( idx2 + 1 , idx1 ) : planets . Substring ( idx1 + 1 , idx2 ) ; }
List < String > sortedListSum ( List < String > lst ) { List < String > result = new List < String > ( ) ; for ( var i in lst ) { if ( i . Length % 2 == 0 ) { result . Add ( i ) ; } } result . Sort ( ) ; return result ; }
bool cycpatternCheck ( String a , String b ) { for ( int i = 0 ; i <= b . Length ; i ++ ) { String rotate = b [ i ] + b [ 0 , i ] ; if ( a . Contains ( rotate ) ) { return true ; } } return false ; }
List < int > evenOddCount ( int num ) { int evenCount = 0 , oddCount = 0 ; for ( char i in String . Parse ( Math . Abs ( num ) ) . ToList ( ) ) { if ( i % 2 == 0 ) { evenCount += 1 ; } else { oddCount += 1 ; } } return new List < int > ( evenCount , oddCount ) ; }
string findMax ( List < String > words ) { string max = "" ; int maxLength = 0 ; for ( var word in words ) { List < char > unique = new List < char > ( ) ; for ( char w in word . ToCharArray ( ) ) { if ( ! unique . ContainsKey ( w ) ) { unique . Add ( w ) ; } } if ( unique . Count > maxLength || ( unique . Count == maxLength && word . CompareTo ( max ) < 0 ) ) { max = word ; maxLength = unique . Count ; } } return max ; }
string solve ( string s ) { bool noLetter = true ; StringBuilder result = new StringBuilder ( ) ; for ( char ch in s ) { if ( Character . IsUpperCase ( ch ) ) { ch = Character . ToLower ( ch ) ; noLetter = false ; } else if ( Character . IsLowerCase ( ch ) ) { ch = Character . ToUpper ( ch ) ; noLetter = false ; } result . Append ( ch ) ; } if ( noLetter ) { return result . Reverse ( ) . ToString ( ) ; } else { return result . ToString ( ) ; } }
int mostFrequent ( List < int > arr , int n ) { Dictionary < int , int > hp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . ContainsKey ( arr [ i ] ) ) { hp [ arr [ i ] ] ++ ; } else { hp . Add ( arr [ i ] , 1 ) ; } } int maxCount = 0 , res = - 1 ; for ( var entry in hp ) { if ( maxCount < entry . Value ) ) { res = entry . Key ; maxCount = entry . Value ; } } return res ; }
int find ( List < int > a , List < int > b , int k , int n1 , int n2 ) { HashSet < int > s = new HashSet < int > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { s . Add ( b [ i ] ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( ! s . ContainsKey ( a [ i ] ) ) { missing ++ ; } if ( missing == k ) { return a [ i ] ; } } return - 1 ; }
int solveQuery ( int start , int end , List < int > arr ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = start ; i <= end ; i ++ ) { mp . Add ( arr [ i ] , 1 ) ; } int count = 0 ; for ( var entry in mp ) { if ( entry . Key == entry . Value ) { count ++ ; } } return count ; }
int segregate ( List < int > arr , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { Collections . Swap ( arr , i , j ) ; j ++ ; } } return j ; }
int countTriplets ( List < int > a , int n ) { HashSet < int > s = new HashSet < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . Add ( a [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( s . ContainsKey ( xr ) && xr != a [ i ] && xr != a [ j ] ) { count ++ ; } } } return count / 3 ; }
int leastFrequent ( List < int > arr , int n ) { Dictionary < int , int > hp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . ContainsKey ( arr [ i ] ) ) { hp [ arr [ i ] ] ++ ; } else { hp . Add ( arr [ i ] , 1 ) ; } } int minCount = n + 1 , res = - 1 ; for ( var entry in hp ) { if ( minCount >= entry . Value ) { res = entry . Key ; minCount = entry . Value ; } } return res ; }
int findPermutations ( List < int > arr ) { int cnt = 0 ; int maxInd = - 1 , minInd = 10000000 ; int n = arr . Count ; Dictionary < int , int > indexOf = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { indexOf . Add ( arr [ i ] , i + 1 ) ; } for ( int i = 1 ; i <= n ; i ++ ) { maxInd = Math . Max ( maxInd , indexOf [ i , 0 ] ) ; minInd = Math . Min ( minInd , indexOf [ i , 0 ] ) ; if ( maxInd - minInd + 1 == i ) { cnt ++ ; } } return cnt ; }
int formQuadruplets ( List < int > arr , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; arr . Sort ( ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; }
string lexicographicallyMaximum ( string s , int n ) { Dictionary < char , int > m = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . ContainsKey ( s [ i ] ) ) { m [ s [ i ] ] ++ ; } else { m [ s [ i ] ] = 1 ; } } List < char > v = new List < char > ( ) ; for ( int i = 'a' ; i < 'a' + Math . Min ( n , 25 ) ; ++ i ) { if ( s [ i ] >= 'a' + Math . Min ( n , 25 ) s = s . Substring ( 0 , i ) + v [ j ] + s [ i + 1 ] ; j -- ; } if ( j < 0 ) { break ; } } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) { break ; } if ( s [ i ] >= 'a' + Math . Min ( n , 25 ) || m . ContainsKey ( s [ i ] ) ) { s = s . Substring ( 0 , i ) + v [ l ] + s [ i + 1 ] ; l ++ ; } } return s ; }
int noOfValidKbers ( int k , List < int > arr ) { HashSet < int > s = new HashSet < int > ( ) ; while ( k != 0 ) { s . Add ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . Count ; i ++ ) { int no = arr [ i ] ; bool flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( ! s . ContainsKey ( digit ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag ) { count ++ ; } } return count ; }
int delCost ( String s , List < int > cost ) { int ans = 0 ; Dictionary < char , int > forMax = new Dictionary < char , int > ( ) ; Dictionary < char , int > forTot = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( ! forMax . ContainsKey ( s [ i ] ) ) { forMax . Add ( s [ i ] , cost [ i ] ) ; } else { forMax . Add ( s [ i ] , Math . Max ( cost [ i ] , forMax [ s [ i ] ] ) ) ; } if ( ! forTot . ContainsKey ( s [ i ] ) ) { forTot . Add ( s [ i ] , cost [ i ] ) ; } else { forTot . Add ( s [ i ] , forTot [ s [ i ] ] + cost [ i ] ) ; } } foreach ( var i in forMax . Entry ( ) ) { ans += forMax [ i . Key ] ) - i . Value ; } return ans ; }
List < String > replaceDuplicates ( List < String > names ) { Dictionary < String , int > hash = new Dictionary < String , int > ( ) ; for ( int i = 0 ; i < names . Count ; i ++ ) { if ( ! hash . ContainsKey ( names [ i ] ) ) { hash . Add ( names [ i ] , 1 ) ; } else { int count = hash [ names [ i ] ] ; hash . Remove ( names [ i ] ) ; hash . Add ( names [ i ] , count + 1 ) ; names . Add ( i , names [ i ] + int . ToString ( count ) ) ; } } return names ; }
List < int > minmaxNumbers ( List < int > matrix , List < int > res ) { HashSet < int > set = new HashSet < int > ( ) ; for ( int i = 0 ; i < matrix . Count ; i ++ ) { int minR = int . MaxValue ; for ( int j = 0 ; j < matrix . Count ; j ++ ) { minR = Math . Min ( minR , matrix [ i ] [ j ] ) ; } set . Add ( minR ) ; } for ( int j = 0 ; j < matrix . Count ; j ++ ) { int maxC = int . MinValue ; for ( int i = 0 ; i < matrix . Count ; i ++ ) { maxC = Math . Max ( maxC , matrix [ i ] [ j ] ) ; } if ( set . ContainsKey ( maxC ) ) { res . Add ( maxC ) ; } } return res ; }
int lengthOfLongestAP ( List < int > a , int n ) { Dictionary < int , int > dp = new Dictionary < int , int > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = i + 1 ; j < n ; ++ j ) { int d = a [ j ] - a [ i ] ; if ( dp . ContainsKey ( d ) ) { dp [ d ] . Add ( j , dp [ d ] [ i ] + 1 ) ; } else { dp [ d ] . Add ( j , 2 ) ; } } else { dp . Add ( d , new Dictionary < int , int > ( ) ) ; dp [ d ] . Add ( j , 2 ) ; } res = Math . Max ( res , dp [ d ] [ j ] ) ; } } return res ; }
char findKthChar ( int n , int k ) { String prev = "A" ; String cur = "" ; if ( n == 1 ) { return 'A' ; } for ( int j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . Length ; i ++ ) { if ( prev [ i ] == 'A' ) { prev = prev . Substring ( 0 , i ) + 'B' + prev . Substring ( i + 1 ) ; } else { prev = prev . Substring ( 0 , i ) + 'A' + prev . Substring ( i + 1 ) ; } } prev = new StringBuilder ( prev ) ; cur += prev ; prev = cur ; } return cur [ k - 1 ] ; }
char findKthLargest ( String s , int k ) { List < char > tmp = new List < char > ( ) ; tmp . Sort ( ) ; tmp . Reverse ( ) ; return tmp [ k - 1 ] ; }
int subArraylen ( List < int > arr , int n , int k ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; mp . Add ( arr [ 0 ] , 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr . Add ( i , arr [ i ] + arr [ i - 1 ] ) ; mp . Remove ( arr [ i ] ) ; } int len = int . MaxValue ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) { continue ; } else { int x = arr [ i ] - k ; if ( x == 0 ) { len = Math . Min ( len , i ) ; } if ( ! mp . ContainsKey ( x ) ) { continue ; } else { len = Math . Min ( len , i - mp [ x ] ) ; } } } return len ; }
int findMaxLen ( List < int > a , int k ) { int n = a . Count ; Collections . Sort ( a ) ; List < Boolean > vis = new List < Boolean > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . Add ( a [ i ] , i ) ; } int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( ! vis . Get ( i ) ) { int check = a [ i ] * k ; if ( mp . ContainsKey ( check ) ) { c ++ ; vis . Add ( check , true ) ; } } } return n - c ; }
List < int > minDistancePoints ( List < int > a , int k , int n ) { Dictionary < int , int > m = new Dictionary < int , int > ( ) ; Queue < int > q = new ArrayDeque < int > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { m . Add ( a [ i ] , 1 ) ; q . Enqueue ( a [ i ] ) ; } List < int > ans = new List < int > ( ) ; while ( k > 0 ) { int x = q . Dequeue ( ) ; if ( ! m . ContainsKey ( x - 1 ) && k > 0 ) { m . Enqueue ( x - 1 , 1 ) ; q . Enqueue ( x - 1 ) ; ans . Add ( x - 1 ) ; k -- ; } if ( ! m . ContainsKey ( x + 1 ) && k > 0 ) { m . Enqueue ( x + 1 , 1 ) ; q . Enqueue ( x + 1 ) ; k -- ; } } return ans ; }
bool isValidLen ( String s , int len , int k ) { int n = s . Length ; Dictionary < char , int > mp = new Dictionary < char , int > ( ) ; int right = 0 ; while ( right < len ) { if ( mp . ContainsKey ( s [ right ] ) ) { mp [ s [ right ] ] ++ ; } else { mp . Add ( s [ right ] , 1 ) ; } right ++ ; } if ( mp . Count <= k ) { return true ; } while ( right < n ) { if ( mp . ContainsKey ( s [ right ] ) ) { mp . Remove ( s [ right ] ) ; } if ( mp . Count <= k ) { return true ; } right ++ ; } return mp . Count <= k ; }
int partition ( List < int > arr , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; Collections . Swap ( arr , i , j ) ; } } Collections . Swap ( arr , i + 1 , high ) ; return i + 1 ; }
int strScore ( List < String > strs , String s , int n ) { Dictionary < String , int > m = new Dictionary < String , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . Add ( strs [ i ] , i + 1 ) ; } if ( ! m . ContainsKey ( s ) ) { return 0 ; } int score = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { score += s [ i ] - 'a' + 1 ; } score = score * m [ s ] ; return score ; }
List < int > countEle ( List < int > s , List < int > a , int n ) { Dictionary < int , Boolean > mp = new Dictionary < int , Boolean > ( ) ; List < int > ans = new List < int > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int num = a [ i ] ; if ( mp . ContainsKey ( num ) ) { ans . Add ( 0 ) ; } else { int cnt = 0 ; while ( s [ 0 ] != num ) { mp . Add ( s [ 0 ] , true ) ; s . Remove ( 0 ) ; cnt ++ ; } s . Remove ( 0 ) ; cnt ++ ; ans . Add ( cnt ) ; } } return ans ; }
int maxDistinctChar ( string s , int n , int k ) { Dictionary < char , int > freq = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . ContainsKey ( s [ i ] ) ) { freq [ s [ i ] ] ++ ; } else { freq [ s [ i ] ] = 1 ; } } List < int > v = new List < int > ( ) ; for ( int i = 0 ; i < v . Count ; i ++ ) { int mn = Math . Min ( v [ i ] - 1 , k ) ; v . Add ( i , v [ i ] - mn ) ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . Count ; i ++ ) { int mn = Math . Min ( v [ i ] , k ) ; v . Set ( i , v [ i ] - mn ) ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . Count ; i ++ ) { if ( v [ i ] == 1 ) { res ++ ; } } return res ; }
int findKth ( List < int > arr , int n , int k ) { HashSet < int > missing = new HashSet < int > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . Add ( arr [ i ] ) ; } int maxM = Collections . Max ( arr ) ; int minM = Collections . Min ( arr ) ; for ( int i = minM + 1 ; i < maxM ; i ++ ) { if ( ! missing . ContainsKey ( i ) ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; }
bool almostSort ( List < int > a , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { Collections . Swap ( a , i , i + 1 ) ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { return false ; } } return true ; }
int maximumSum ( string s , int n , int k ) { int sum = 0 ; List < int > freq = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq . Add ( s [ i ] , freq [ s [ i ] ] + 1 ) ; } freq . Sort ( ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; }
int findMinOperations ( List < int > arr , int N , int K ) { int operations = 0 ; for ( int i = 0 ; i < K ; i ++ ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int j = i ; j < N ; j += K ) { freq . Add ( arr [ j ] , 1 ) ; } int max1 = 0 , num = 0 ; for ( var entry in freq ) { if ( entry . Value > max1 ) { max1 = entry . Value ; num = entry . Key ; } } foreach ( var entry in freq . EntryPoint ( entry ) ) { if ( entry . Key != num ) { operations += entry . Value ; } } } return operations ; }
List < String > subString ( String s , int n ) { List < String > v = new List < String > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int len = 1 ; len <= n - i ; len ++ ) { String find = s [ i , i + len ] ; v . Add ( find ) ; } } return v ; }
bool checkUniqueFrequency ( List < int > arr , int n ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq . Add ( arr [ i ] , 1 ) ; } Dictionary < int , int > uniqueFreq = new Dictionary < int , int > ( ) ; for ( var entry in freq ) { if ( uniqueFreq . ContainsKey ( entry . Value ) ) { return false ; } else { uniqueFreq . Add ( entry . Value ) ; } } return true ; }
int minCost ( String str1 , String str2 , int n ) { int cost = 0 ; char [ ] tmp = str1 . ToCharArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 [ i ] ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) { char c = tmp [ i ] ; tmp [ i ] = tmp [ i + 1 ] ; tmp [ i + 1 ] = c ; cost ++ ; } else { cost ++ ; } } } return cost ; }
bool isValidNum ( String x ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < x . Length ; i ++ ) { if ( ! mp . ContainsKey ( x [ i ] - '0' ) ) { return false ; } else if ( x [ i ] - '0' > 5 ) { return false ; } else { mp . Add ( x [ i ] - '0' , 1 ) ; } } return true ; }
int minimizeDiff ( List < int > arr , int n , int k ) { int max = arr . Max ( ) ; int min = arr . Min ( arr ) ; if ( max - min <= k ) { return max - min ; } int avg = ( max + min ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr . Set ( i , arr [ i ] - k ) ; } else { arr . Set ( i , arr [ i ] + k ) ; } } max = arr . Max ( arr ) ; min = arr . Min ( arr ) ; return max - min ; }
int getMinCost ( List < int > arr , int n ) { int minEle = arr . Min ( ) ; return minEle * ( n - 1 ) ; }
bool possibility ( Dictionary < int , int > m , int length , String s ) { int countOdd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( m [ s [ i ] - '0' ] & 1 ) != 0 ) { countOdd ++ ; } if ( countOdd > 1 ) { return false ; } } return true ; }
int minimumCostOfBreaking ( List < int > x , List < int > y , int m , int n ) { int res = 0 ; x . Sort ( Collections . ReverseOrder ) ; y . Sort ( Collections . ReverseOrder ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y . Get ( j ) ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += x [ i ++ ] ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y [ j ++ ] ; } res += total * hzntl ; return res ; }
int findMaximumScore ( List < int > a , int n ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . ContainsKey ( a [ i ] ) ) { freq [ a [ i ] ] ++ ; } else { freq [ a [ i ] ] = 1 ; } } int [ ] dp = new int [ a ] + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = freq [ 1 , 0 ] ; for ( int i = 2 ; i < dp . Length ; i ++ ) { dp [ i ] = Math . Max ( dp [ i - 1 ] , dp [ i - 2 ] + freq [ i , 0 ] * i ) ; } return dp [ dp . Length - 1 ] ; }
int countWays ( String s , String t , int k , int mod ) { int n = s . Length ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String p = s [ i , n ] + s [ 0 , i ] ; if ( p . Equals ( t ) ) { a ++ ; } else { b ++ ; } } int [ ] dp1 = new int [ k + 1 ] ; int [ ] dp2 = new int [ k + 1 ] ; if ( s . Equals ( t ) ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ; } return dp1 [ k ] ; }
int findSubarraySum ( List < int > arr , int n , int k ) { Dictionary < int , int > prevSum = new Dictionary < int , int > ( ) ; int res = 0 ; int currSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { currSum += arr [ i ] ; if ( currSum == k ) { res ++ ; } if ( prevSum . ContainsKey ( currSum - k ) ) { res += prevSum [ currSum - k ] ; } prevSum . Add ( currSum , 1 ) ; } return res ; }
int maximumOccurrence ( string s ) { int n = s . Length ; Dictionary < String , int > freq = new Dictionary < String , int > ( ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { String temp = "" ; temp += s [ i ] ; freq . Add ( temp , 1 ) ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { String temp = "" ; temp += s [ i ] ; temp += s [ j ] ; freq . Remove ( temp ) + 1 ) ; } } int answer = int . MinValue ; foreach ( var entry in freq ) { answer = Math . Max ( answer , entry . Key ) ; } return answer ; }
int countCharacters ( List < String > strings , String chars ) { int res = 0 ; Dictionary < char , int > freq = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < chars . Length ; i ++ ) { freq . Add ( chars [ i ] , 1 ) ; } for ( String st in strings ) { bool flag = true ; for ( char c in st . ToCharArray ( ) ) { if ( ! freq . ContainsKey ( c ) ) { flag = false ; break ; } } if ( flag ) { res += st . Length ; } } return res ; }
int distinctSubstring ( String p , String q , int k , int n ) { HashSet < String > ss = new HashSet < String > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int sum = 0 ; String s = "" ; for ( int j = i ; j < n ; ++ j ) { int pos = p [ j ] - 'a' ; sum += q [ pos ] - '0' ; s += p [ j ] ; if ( sum <= k ) { ss . Add ( s ) ; } else { break ; } } } return ss . Count ; }
int uniqueMorseRep ( List < String > arr ) { List < String > morseCode = new List < String > ( ) ; int n = arr . Count ; for ( int i = 0 ; i < n ; i ++ ) { String temp = "" ; int m = arr . Count ; for ( int j = 0 ; j < m ; j ++ ) { temp += morseCode [ arr [ i ] [ j ] - 'a' ) ; } st . Add ( temp ) ; } return st . Count ; }
int countSubstrings ( String st , int k ) { int n = st . Length ; int answer = 0 ; Dictionary < char , int > map = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( ! map . ContainsKey ( st [ i ] ) ) { map . Add ( st [ i ] , 1 ) ; } else { map . Add ( st [ i ] , map [ st [ i ] ] + 1 ) ; } } if ( map . Count == k ) { answer ++ ; } for ( int i = k ; i < n ; i ++ ) { if ( ! map . ContainsKey ( st [ i ] ) ) { map . Remove ( st [ i ] ) ; } if ( map . Count == k ) { answer ++ ; } } return answer ; }
bool canConstruct ( String s , int k ) { Dictionary < char , int > m = new Dictionary < char , int > ( ) ; int p = 0 ; if ( s . Length == k ) { return true ; } for ( int i = 0 ; i < s . Length ; i ++ ) { m . Add ( s [ i ] , 1 ) ; } if ( k > s . Length ) { return false ; } else { for ( var h in m ) { if ( h . Value % 2 != 0 ) { p = p + 1 ; } } } if ( k < p ) { return false ; } return true ; }
bool equalIgnoreCase ( String str1 , String str2 ) { str1 = str1 . ToUpper ( ) ; str2 = str2 . ToUpper ( ) ; return str1 . Equals ( str2 ) ; }
int findLongestSub ( string bin ) { int n = bin . Length , i ; int sum = 0 ; Dictionary < int , int > prevSum = new Dictionary < int , int > ( ) ; int maxLen = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin [ i ] == '1' ) { sum ++ ; } else { sum -- ; } if ( sum > 0 ) { maxLen = i + 1 ; } else if ( sum <= 0 ) { if ( prevSum . ContainsKey ( sum - 1 ) ) { int currLen = i - prevSum [ sum - 1 ] ; maxLen = Math . Max ( maxLen , currLen ) ; } } if ( ! prevSum . ContainsKey ( sum ) ) { prevSum . Add ( sum , i ) ; } } return maxLen ; }
bool hasAllCodes ( String s , int k ) { HashSet < String > us = new HashSet < String > ( ) ; for ( int i = 0 ; i + k <= s . Length ; i ++ ) { us . Add ( s [ i , i + k ] ) ; } return us . Count == 1 << k ; }
bool checkPalin ( String word ) { int n = word . Length ; word = word . ToLower ( ) ; for ( int i = 0 ; i < n ; i ++ , n -- ) { if ( word [ i ] != word [ n - 1 ] ) { return false ; } } return true ; }
string convert ( String st ) { string w = "" , z = "" ; st = st . ToUpper ( ) + " " ; for ( int i = 0 ; i < st . Length ; i ++ ) { char ch = st [ i ] ; if ( ch != ' ' ) { w += ch ; } else { z += Character . ToLower ( w [ 0 ] ) + w . Substring ( 1 ) + " " ; w = "" ; } } return z ; }
int maxLines ( int n , List < int > x1 , List < int > y1 , List < int > x2 , List < int > y2 ) { HashSet < double > s = new HashSet < double > ( ) ; double slope ; for ( int i = 0 ; i < n ; ++ i ) { if ( x1 [ i ] == x2 [ i ] ) { slope = int . MaxValue ; } else { slope = ( y2 [ i ] - y1 . Get ( i ) ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; } s . Add ( slope ) ; } return s . Count ; }
Dictionary < int , int > PrimeFactor ( int n ) { Dictionary < int , int > primef = new Dictionary < int , int > ( ) ; while ( n % 2 == 0 ) { if ( primef . ContainsKey ( 2 ) ) { primef . Remove ( 2 ) ; } else { primef . Add ( 2 , 1 ) ; } n /= 2 ; } for ( int i = 3 ; i <= Math . Sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { if ( primef . ContainsKey ( i ) ) { primef . Add ( i , primef [ i ] + 1 ) ; } else { primef . Add ( i , 1 ) ; } n /= i ; } } if ( n > 2 ) { primef . Add ( n , 1 ) ; } return primef ; }
string isDivisibleByDivisor ( int s , int d ) { s %= d ; HashSet < int > hashMap = new HashSet < int > ( ) ; hashMap . Add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hashMap . ContainsKey ( s ) ) { if ( s == 0 ) { return "Yes" ; } return "No" ; } else { hashMap . Add ( s ) ; } } return "Yes" ; }
bool oddSum ( List < int > a , int n , int k ) { HashSet < int > odd = new HashSet < int > ( ) ; HashSet < int > even = new HashSet < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { even . Add ( a [ i ] ) ; } else { odd . Add ( a [ i ] ) ; } } if ( odd . Count >= k ) { return true ; } bool flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= even . Count ) { return true ; } } return flag ; }
int dayOfYear ( String date ) { List < int > days = new List < int > ( ) ; int year = Int32 . Parse ( date [ 0 , 4 ] ) ; int month = Int32 . Parse ( date [ 5 , 7 ] ) ; int day = int . Parse ( date [ 8 ] ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days [ month - 2 ] ; -- month ; } return day ; }
bool isPerfectSquare ( List < int > arr , int n ) { Dictionary < int , int > umap = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { umap . Add ( arr [ i ] , 1 ) ; } for ( var itr in umap ) { if ( itr . Value % 2 == 1 ) { return false ; } } return true ; }
int minMoves ( int n ) { string s = Convert . ToString ( n ) ; int ans = int . MaxValue ; int length = s . Length ; for ( int i = 0 ; i < length ; ++ i ) { for ( int j = 0 ; j < length ; ++ j ) { if ( i == j ) { continue ; } char [ ] t = s . ToCharArray ( ) ; int cur = 0 ; for ( int k = i ; k < length - 1 ; ++ k ) { char c = t [ k ] ; t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = c ; ++ cur ; } for ( int k = j - ( j > i ? 1 : 0 ) ; k < length - 2 ; ++ k ) { char c = t [ k ] ; t [ k ] = t [ k + 1 ] ; t [ k + 1 ] = c ; ++ cur ; } int pos = - 1 ; for ( int k = 0 ; k < length ; ++ k ) { if ( t [ k ] != '0' ) { pos = k ; break ; } } for ( int k = pos ; k > 0 ; -- k ) { char c = t [ k ] ; t [ k ] = t [ k - 1 ] ; t [ k - 1 ] = c ; ++ cur ; } int nn = Int32 . Parse ( t ) ) ; if ( nn % 25 == 0 ) { ans = Math . Min ( ans , cur ) ; } } } if ( ans == int . MaxValue ) { return - 1 ; } return ans ; }
int minimumOperations ( List < int > a , int n ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . Add ( a [ i ] , 1 ) ; } int count = 0 ; for ( var entry in mp ) { if ( entry . Value > 1 ) { count += entry . Value - 1 ; } } return count ; }
int kaprekarRec ( int n , int prev ) { if ( n == 0 ) { return 0 ; } prev = n ; int [ ] digits = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } Array . Sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } Array . Sort ( digits ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } int diff = Math . Abs ( asc - desc ) ; if ( diff == prev ) { return diff ; } return kaprekarRec ( diff , prev ) ; }
string fractionToDecimal ( int numr , int denr ) { string res = "" ; Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; int rem = numr % denr ; while ( rem != 0 && ! mp . ContainsKey ( rem ) ) { mp . Add ( rem , res . Length ) ; rem = rem * 10 ; int resPart = rem / denr ; res += String . Parse ( resPart ) ; rem = rem % denr ; } if ( rem == 0 ) { return "" ; } if ( mp . ContainsKey ( rem ) ) { return res . Substring ( mp [ rem ] ) ; } return "" ; }
bool isFancy ( String num ) { Dictionary < char , char > fp = new Dictionary < char , char > ( ) ; fp . Add ( '0' , '0' ) ; fp . Add ( '1' , '1' ) ; fp . Add ( '6' , '9' ) ; fp . Add ( '8' , '8' ) ; fp . Add ( '9' , '6' ) ; int n = num . Length ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( ! fp . ContainsKey ( num [ l ] ) ) { return false ; } l ++ ; r -- ; } return true ; }
double distinctOddRatio ( List < int > numbers ) { int distinctCount = ( int ) numbers . Count ; int distinctOddCount = ( int ) numbers . Count ; return ( double ) distinctOddCount / distinctCount ; }
int compareSum ( List < int > numbers , List < String > words ) { int intSum = numbers . Count . Sum ( ) ; int wordLengthSum = words . Count . Sum ( ) ; if ( intSum < wordLengthSum ) { return - 1 ; } if ( intSum > wordLengthSum ) { return 1 ; } return 0 ; }
bool allLongerThan ( List < String > shortWords , List < String > longWords ) { int maxOfShort = shortWords . Count ; int minOfLong = longWords . Count ; return minOfLong > maxOfShort ; }
int compareOddEvenRange ( List < int > numbers ) { int rangeOdd = numbers . Stream ( ) . Filter ( n -> n % 2 == 1 ) . MapToInt ( n -> n ) . Max ( ) . AsInt ( ) - numbers . Stream ( ) . Filter ( n -> n % 2 == 1 ) . MapToInt ( n -> n ) . Min ( ) . getAsInt ( ) ; int rangeEven = numbers . Stream ( ) . Filter ( n -> n % 2 == 0 ) . MapToInt ( n -> n ) . Max ( ) . AsInt ( ) - numbers . Stream ( ) . Filter ( n -> n % 2 == 0 ) . MapToInt ( n -> n ) . Min ( ) . AsInt ( ) ; if ( rangeOdd < rangeEven ) { return - 1 ; } if ( rangeOdd > rangeEven ) { return 1 ; } return 0 ; }
double averageDistinctLength ( List < String > words ) { double averageLen = words . Count . Average ( ) ; return averageLen ; }
int withDrawBalance ( int start , List < int > withdrawals ) { int end = withdrawals . Count ; return end ; }
string firstShortAndStartsWithO ( List < String > words ) { string matchedElement = words . stream ( ) . filter ( w => w . Length < 5 ) . Filter ( w => w [ 0 ] == 'o' ) . findFirst ( ) . orElse ( "" ) ; return matchedElement ; }
int bigNumberAtIndex ( List < int > numbers , int index ) { int targetNum = numbers . List < int > ( ) . Find ( n => n > 5 ) . Skip ( index ) . First ( ) ; return targetNum ; }
bool containsSquareInRange ( int rangeStart , int rangeLength ) { bool containsSquare = IntStream . Range ( rangeStart , rangeStart + rangeLength ) . AnyMatch ( n => Math . Pow ( ( int ) Math . Sqrt ( n ) , 2 ) == n ) ; return containsSquare ; }
Map < int , List < int > > groupNumbersByMod ( List < int > numbers , int mod ) { var numberGroups = numbers . Stream ( ) . Collect ( Collectors . groupingBy ( n => n % mod ) ) ; return numberGroups ; }
Map < char , List < String > > groupWordsByFirstChar ( List < String > words ) { var wordGroups = words . GroupBy ( w => w [ 0 ] ) ) ; return wordGroups ; }
List < String > orderByLengthAndDescending ( List < String > words ) { var sortedWords = words . stream ( ) . sorted ( Comparator . comparingInt ( String :: Length ) . thenComparing ( Comparator . reverseOrder ( ) ) ) . collect ( Collectors . toList ( ) ) ; return sortedWords ; }
List < String > orderFirstCharDescendingReverse ( List < String > words ) { var sortedWords = words . Stream ( ) . Sort ( Comparator . comparing ( ( String w ) => w [ 0 ] ) . reversed ( ) . thenComparing ( Comparator . naturalOrder ( ) ) ) . Collect ( ) ; return sortedWords ; }
List < int > getSubListOfNegative ( List < int > numbers , int start , int length ) { List < int > subList = numbers . Stream ( ) . Skip ( start ) . Filter ( n => n < 0 ) . Limit ( length ) . Collect ( Collectors . toList ( ) ) ; return subList ; }
List < int > getPositiveSequence ( List < int > numbers ) { List < int > subSequence = numbers . Stream ( ) . DropWhile ( n -> n <= 0 ) . TakeWhile ( n -> n >= 0 ) . Collect ( Collectors . toList ( ) ) ; return subSequence ; }
List < int > getLargerThanIndexSequence ( List < int > numbers ) { List < int > subSequence = IntStream . Range ( 0 , numbers . Count ) . DropWhile ( i -> numbers [ i ] < i ) . TakeWhile ( i -> numbers [ i ] >= i ) . ToList ( ) ; return subSequence ; }
List < String > rearrangeWordByIndexes ( List < String > words , List < int > indexes ) { List < int > newIndexes = indexes . Stream ( ) . Filter ( n -> n >= words . Count ) . Map ( n => n % words . Count ) . ToList ( ) ; List < String > newWords = newIndexes . Stream ( ) . Map ( n => words [ n ] ) . ToList ( ) ; return newWords ; }
List < List < String > > getWordsUpperLower ( List < String > words ) { var upperLowerWords = words . List < String > ( ) ; return upperLowerWords . List ( ) ; }
List < Boolean > selectIfInPlace ( List < int > numbers ) { List < Boolean > numsInPlace = new List < Boolean > ( ) ; return numsInPlace ; }
List < List < int > > selectPairs ( List < int > numbersA , List < int > numbersB ) { List < List < int > pairs = numbersA . Stream ( ) . flatMap ( a => numbersB . Stream ) . Filter ( b => a < b ) . Map ( b => Array . AsList ( a , b ) ) ) . Collect ( Collectors . toList ( ) ) ; return pairs ; }
List < String > stringCrossJoin ( List < String > endWords , List < String > beginWords ) { List < String > crossStrings = beginWords . Stream ( ) . flatMap ( b => endWords . Stream ) . Filter ( e => b [ 0 ] == e [ e . Length - 1 ] ) . Map ( e => e + " " + b ) ) . Collect ( Collectors . toList ( ) ) ; return crossStrings ; }
int elementsContainSubword ( List < String > words , String subword ) { if ( words . Count > 5 ) . AllMatch ( w -> w . ContainsSubword ) ) { return 1 ; } else if ( words . Count > 5 ) . AnyMatch ( w -> w . ContainsSubword ) ) { return 0 ; } else { return - 1 ; } }
List < int > ConcatLargeNumbers ( List < int > numbersA , List < int > numbersB , int flag ) { List < int > allNumbers = Stream . Concat ( numbersA . Stream ( ) . Filter ( n -> n > flag ) , numbersB . Stream ( ) . Filter ( n -> n > flag ) ) . Collect ( Collectors . toList ( ) ) ; return allNumbers ; }
int DotProduct ( List < int > vectorA , List < int > vectorB ) { int dotProduct = IntStream . Range ( 0 , vectorA . Count ) . Map ( i => vectorA [ i ] * vectorB [ i ] ) . Sum ( ) ; return dotProduct ; }
List < int > setDifference ( List < int > setA , List < int > setB ) { List < int > difference = new List < int > ( setA ) ; difference . Add ( setB ) ; List < int > intersection = new List < int > ( setA ) ; intersection . retainAll ( setB ) ; difference . removeAll ( intersection ) ; Collections . Sort ( difference ) ; return difference ; }
