int GreatestCommonDivisor ( int a , int b ) { if ( a == 0 || b == 0 ) { return a + b ; } if ( a == b ) { return a ; } if ( a > b ) { return GreatestCommonDivisor ( a % b , b ) ; } else { return GreatestCommonDivisor ( a , b % a ) ; } }
int LargestDivisor ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { return n / i ; } } return 1 ; }
boolean IsPrime ( int n ) { if ( n < 2 ) { return false ; } for ( int k = 2 ; k < n ; k ++ ) { if ( n % k == 0 ) { return false ; } } return true ; }
int FizzBuzz ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 11 == 0 || i % 13 == 0 ) { int q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) { count += 1 ; } q /= 10 ; } } } return count ; }
int PrimeFib ( int n ) { int f0 = 0 ; int f1 = 1 ; while ( n > 0 ) { int p = f0 + f1 ; boolean is_prime = p >= 2 ; for ( int i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { n -= 1 ; } f0 = f1 ; f1 = p ; } return f1 ; }
double TriangleArea ( double a , double h ) { return a * h / 2 ; }
int ModP ( int n , int p ) { int ret = 1 ; for ( int i = 0 ; i < n ; i ++ ) { ret = ( ret * 2 ) % p ; } return ret ; }
int Add ( int x , int y ) { return x + y ; }
int Fib ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return Fib ( n - 1 ) + Fib ( n - 2 ) ; }
int LargestPrimeFactor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) { while ( n % i == 0 && n > i ) { n /= i ; } } return n ; }
int SumToN ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { result += i ; } return result ; }
int Fibfib ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 0 ; } if ( n == 2 ) { return 1 ; } return Fibfib ( n - 1 ) + Fibfib ( n - 2 ) + Fibfib ( n - 3 ) ; }
boolean IsMultiplyPrime ( int a ) { int num = 0 ; for ( int i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) { a /= i ; num += 1 ; } } return num == 3 ; }
boolean IsSimplePower ( int x , int n ) { if ( n == 1 ) { return x == 1 ; } int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
int ChooseNum ( int x , int y ) { if ( x > y ) { return - 1 ; } if ( y % 2 == 0 ) { return y ; } if ( x == y ) { return - 1 ; } return y - 1 ; }
boolean IsEqualToSumEven ( int n ) { return n % 2 == 0 && n >= 8 ; }
int SpecialFactorial ( int n ) { int fact = 1 ; int special_fact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; special_fact *= fact ; } return special_fact ; }
int XOrY ( int n , int x , int y ) { boolean is_prime = n >= 2 ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { return x ; } return y ; }
boolean RightAngleTriangle ( int a , int b , int c ) { return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b ; }
int FastPow ( int n , int k ) { if ( k == 0 ) { return 1 ; } int temp = FastPow ( n , k / 2 ) ; if ( k % 2 == 0 ) { return temp * temp ; } else { return n * temp * temp ; } }
boolean IsPalin ( String s ) { int l = s . length ( ) / 2 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( s . length ( ) - i - 1 ) ) { return false ; } } return true ; }
int FindSum ( int n ) { int ans = 0 , temp = 0 ; for ( int i = 1 ; i <= n && temp < n ; i ++ ) { temp = i - 1 ; int num = 1 ; while ( temp < n ) { if ( temp + i <= n ) { ans += i * num ; } else { ans += ( n - temp ) * num ; } temp += i ; num += 1 ; } } return ans ; }
int GetNextGap ( int gap ) { gap = gap * 10 / 13 ; if ( gap < 1 ) { return 1 ; } return gap ; }
int CountNonDecreasing ( int n ) { int k = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count /= i ; } return count ; }
int Power ( int x , int y ) { if ( y == 0 ) { return 1 ; } else if ( y % 2 == 0 ) { return Power ( x , y / 2 ) * Power ( x , y / 2 ) ; } else { return x * Power ( x , y / 2 ) * Power ( x , y / 2 ) ; } }
double Power ( double x , int y ) { if ( y == 0 ) { return 1 ; } double temp = Power ( x , y / 2 ) ; if ( y % 2 == 0 ) { return temp * temp ; } else { if ( y > 0 ) { return x * temp * temp ; } else { return temp * temp / x ; } } }
int Multiply ( int x , int y ) { if ( y == 0 ) { return 0 ; } else if ( y > 0 ) { return x + Multiply ( x , y - 1 ) ; } else { return - Multiply ( x , - y ) ; } }
int Smallest ( int x , int y , int z ) { if ( ! ( y / x ) ) { return ! ( y / z ) ? y : z ; } return ! ( x / z ) ? x : z ; }
boolean IsPowerOfFour ( int n ) { if ( n == 0 ) { return false ; } while ( n != 1 ) { if ( n % 4 != 0 ) { return false ; } n = n / 4 ; } return true ; }
int ModInverse ( int a , int m ) { int m0 = m ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
int CntRotations ( String s , int n ) { String s2 = s + s ; int [ ] pre = new int [ 2 * n ] ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) { pre [ i ] += pre [ i - 1 ] ; } if ( s2 [ i ] == 'a' || s2 [ i ] == 'e' || s2 [ i ] == 'i' || s2 [ i ] == 'o' || s2 [ i ] == 'u' ) { pre [ i ] ++ ; } } int ans = 0 ; for ( int i = n - 1 ; i < 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) { x1 -= pre [ l ] ; } r = i - n / 2 ; int left = pre [ r ] ; if ( l >= 0 ) { left -= pre [ l ] ; } int right = x1 - left ; if ( left > right ) { ans ++ ; } } return ans ; }
int BinomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) { k = n - k ; } for ( int i = 0 ; i < k ; ++ i ) { res *= n - i ; res /= i + 1 ; } return res ; }
boolean IsPrefix ( String temp , String s ) { if ( temp . length ( ) < s . length ( ) ) { return false ; } else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != temp . charAt ( i ) ) { return false ; } } return true ; } }
String LexicographicallySmallestString ( String s , int n ) { int last_ze = - 1 ; String ans = "" ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { last_ze = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i <= last_ze && s . charAt ( i ) == '0' ) { ans += s . charAt ( i ) ; } else if ( i > last_ze ) { ans += s . charAt ( i ) ; } } return ans ; }
int CalculateMax ( int n , int m , int k ) { int ans = - 1 ; int low = 0 , high = m ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int val = 0 ; int l = k - 1 ; int r = n - k ; val += mid ; if ( mid >= l ) { val += l * ( 2 * mid - l - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( l - mid ) ; } if ( mid >= r ) { val += r * ( 2 * mid - r - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( r - mid ) ; } if ( val <= m ) { ans = Math . max ( ans , mid ) ; low = mid + 1 ; } else { high = mid - 1 ; } } return ans ; }
int FindLength ( String s , char i , char j ) { char required = i ; int length = 0 ; for ( char curr : s . toCharArray ( ) ) { if ( curr == required ) { length += 1 ; if ( required == i ) { required = j ; } else { required = i ; } } } return length ; }
boolean CheckReverse ( int left_sum , int right_sum ) { int rev = 0 ; int temp = right_sum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp /= 10 ; } if ( rev == left_sum ) { return true ; } return false ; }
boolean IsComposite ( int n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return false ; } if ( n % 2 == 0 || n % 3 == 0 ) { return true ; } for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return true ; } } return false ; }
int MinDeletion ( String s ) { int n = s . length ( ) ; int first_idx1 = - 1 ; int last_idx0 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { first_idx1 = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { last_idx0 = i ; break ; } } if ( first_idx1 == - 1 || last_idx0 == - 1 ) { return 0 ; } int count1 = 0 , count0 = 0 ; for ( int i = 0 ; i < last_idx0 ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count1 ++ ; } } for ( int i = first_idx1 + 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count0 ++ ; } } return Math . min ( count0 , count1 ) ; }
int MinSteps ( String s , int n ) { int smaller , cost = 0 ; int [ ] f = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int curr_ele = s . charAt ( i ) - 'a' ; smaller = 0 ; for ( int j = 0 ; j <= curr_ele ; j ++ ) { if ( f [ j ] != 0 ) { smaller += f [ j ] ; } } if ( smaller == 0 ) { cost += i + 1 ; } else { cost += i - smaller + 1 ; } f [ s . charAt ( i ) - 'a' ] ++ ; } return cost ; }
int NumberOfWays ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 1 ; b < n ; b ++ ) { int c = n - ( a + b ) ; if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } } return count ; }
int SlopeOfNum ( String num , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( num . charAt ( i ) > num . charAt ( i - 1 ) && num . charAt ( i ) > num . charAt ( i + 1 ) ) { slope ++ ; } else if ( num . charAt ( i ) < num . charAt ( i - 1 ) && num . charAt ( i ) < num . charAt ( i + 1 ) ) { slope ++ ; } } return slope ; }
int MiddleOfThree ( int a , int b , int c ) { int x = a - b ; int y = b - c ; int z = a - c ; if ( x * y > 0 ) { return b ; } else if ( x * z > 0 ) { return c ; } else { return a ; } }
int CountMaxSetBits ( int left , int right ) { while ( ( left | ( left + 1 ) ) <= right ) { left |= left + 1 ; } return left ; }
int FindS ( int s ) { int l = 1 , r = ( s / 2 ) + 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) { return mid ; } else if ( sum > s ) { r = mid - 1 ; } else { l = mid + 1 ; } } return - 1 ; }
boolean Check ( String s ) { int min = Integer . MAX_VALUE ; int max = Integer . MIN_VALUE ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int ascii = s . charAt ( i ) ; if ( ascii < 96 || ascii > 122 ) { return false ; } sum += ascii ; if ( min > ascii ) { min = ascii ; } if ( max < ascii ) { max = ascii ; } } min -= 1 ; int eSum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == eSum ; }
int MinimumPossibleProduct ( int k ) { int res = 1 ; int r = ( 1 << k ) - 1 ; for ( int i = 0 ; i < k ; i ++ ) { res *= r - 1 ; } res *= r ; return res ; }
int FindInGrid ( int i , int j ) { if ( i == j ) { return i * i - ( i - 1 ) ; } else if ( i > j ) { if ( i % 2 == 0 ) { return i * i - ( j - 1 ) ; } else { return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } } else { if ( j % 2 == 0 ) { return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; } else { return j * j - ( i - 1 ) ; } } }
int FindMinOperationsReqEmpStr ( String s ) { int cnt_one = 0 ; int cnt_zero = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { if ( cnt_one > 0 ) { cnt_one -- ; } cnt_zero ++ ; } else { if ( cnt_zero > 0 ) { cnt_zero -- ; } cnt_one ++ ; } } return cnt_one + cnt_zero ; }
boolean IsReachable ( int x1 , int y1 , int x2 , int y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) { x2 %= y2 ; } else { y2 %= x2 ; } } if ( x2 == x1 ) { return y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ; } else if ( y2 == y1 ) { return x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ; } else { return false ; } }
int FindMaxSoln ( int n , int x , int y ) { int ans = Integer . MIN_VALUE ; for ( int k = 0 ; k <= n ; k ++ ) { if ( k % x == y ) { ans = Math . max ( ans , k ) ; } } return ans >= 0 && ans <= n ? ans : - 1 ; }
int NumberOfPairs ( int n ) { int count = 0 ; int i = 1 , j = n - 1 ; while ( i < j ) { if ( i + j == n ) { count ++ ; } i ++ ; j -- ; } return count ; }
int MinChanges ( String s , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( s . charAt ( 0 ) != '1' ) { count ++ ; ones ++ ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { zeros ++ ; } else { ones ++ ; } if ( zeros > ones ) { zeros -- ; ones ++ ; count ++ ; } } return count ; }
int KVisibleFromLeft ( int n , int k ) { if ( n == k ) { return 1 ; } if ( k == 1 ) { int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { ans *= i ; } return ans ; } return KVisibleFromLeft ( n - 1 , k - 1 ) + ( n - 1 ) * KVisibleFromLeft ( n - 1 , k ) ; }
double Find ( int n , int sum ) { if ( sum > 6 * n || sum < n ) { return 0 ; } if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) { return 1.0 / 6 ; } else { return 0 ; } } double s = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) { s += Find ( n - 1 , sum - i ) / 6 ; } return s ; }
int BinCoff ( int n , int r ) { int val = 1 ; if ( r > n - r ) { r = n - r ; } for ( int i = 0 ; i < r ; i ++ ) { val *= n - i ; val /= i + 1 ; } return val ; }
int GetMask ( int val ) { int mask = 0 ; if ( val == 0 ) { return 1 ; } while ( val > 0 ) { int d = val % 10 ; mask |= 1 << d ; val /= 10 ; } return mask ; }
int WaysToKAdjacentSetBits ( int n , int k , int current_index , int adjacent_set_bits , int last_bit ) { if ( current_index == n ) { if ( adjacent_set_bits == k ) { return 1 ; } return 0 ; } int no_of_ways = 0 ; if ( last_bit == 1 ) { no_of_ways += WaysToKAdjacentSetBits ( n , k , current_index + 1 , adjacent_set_bits + 1 , 1 ) ; no_of_ways += WaysToKAdjacentSetBits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } else if ( last_bit == 0 ) { no_of_ways += WaysToKAdjacentSetBits ( n , k , current_index + 1 , adjacent_set_bits , 1 ) ; no_of_ways += WaysToKAdjacentSetBits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } return no_of_ways ; }
int CheckFunc ( int i , int j , String st ) { if ( st [ i ] == '(' && st [ j ] == ')' ) { return 1 ; } if ( st [ i ] == '(' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == ')' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == ']' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == ']' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '}' ) { return 1 ; } return 0 ; }
int FindGolomb ( int n ) { if ( n == 1 ) { return 1 ; } return 1 + FindGolomb ( n - FindGolomb ( n - 1 ) ) ; }
boolean AllOnes ( String s , int n ) { int co = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { co += s . charAt ( i ) == '1' ? 1 : 0 ; } return co == n ; }
int Pad ( int n ) { int p_prev_prev = 1 , p_prev = 1 , p_curr = 1 , p_next = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { p_next = p_prev_prev + p_prev ; p_prev_prev = p_prev ; p_prev = p_curr ; p_curr = p_next ; } return p_next ; }
int OddLengthPalindrome ( int k ) { int palin = k ; k = k / 10 ; while ( k > 0 ) { int rev = k % 10 ; palin = palin * 10 + rev ; k = k / 10 ; } return palin ; }
String ChangeString ( String s0 ) { String s = s0 ; int n = s . length ( ) ; if ( s . charAt ( 0 ) == '?' ) { s . charAt ( 0 ) = 'a' ; if ( s . charAt ( 0 ) == s . charAt ( 1 ) ) { s . charAt ( 0 ) ++ ; } } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s . charAt ( i ) == '?' ) { s . charAt ( i ) = 'a' ; if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) { s . charAt ( i ) ++ ; } if ( s . charAt ( i ) == s . charAt ( i + 1 ) ) { s . charAt ( i ) ++ ; } if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) { s . charAt ( i ) ++ ; } } } if ( s . charAt ( n - 1 ) == '?' ) { s . charAt ( n - 1 ) = 'a' ; if ( s . charAt ( n - 1 ) == s . charAt ( n - 2 ) ) { s . charAt ( n - 1 ) ++ ; } } return s ; }
int TotalHammingDistance ( int n ) { int i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + n / i ; i = i * 2 ; } return sum ; }
int CheckBitonic ( String s ) { int i = 1 ; for ( ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i - 1 ) ) { continue ; } if ( s . charAt ( i ) <= s . charAt ( i - 1 ) ) { break ; } } if ( i == s . length ( ) - 1 ) { return 1 ; } int j = i + 1 ; for ( ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) < s . charAt ( j - 1 ) ) { continue ; } if ( s . charAt ( j ) >= s . charAt ( j - 1 ) ) { break ; } } i = j ; if ( i != s . length ( ) ) { return 0 ; } return 1 ; }
boolean EndsWith ( String str , String pat ) { int pat_len = pat . length ( ) ; int str_len = str . length ( ) ; if ( pat_len > str_len ) { return false ; } pat_len -- ; str_len -- ; while ( pat_len >= 0 ) { if ( pat . charAt ( pat_len ) != str . charAt ( str_len ) ) { return false ; } pat_len -- ; str_len -- ; } return true ; }
int GetSum ( int n , int d ) { if ( n < d ) { return 0 ; } while ( n % 10 != d ) { n -- ; } int k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
int BalancedStringBySwapping ( String s ) { int unbalanced_pair = 0 ; for ( int i = 0 ; i < s . length ( ) ; ++ i ) { if ( unbalanced_pair > 0 && s . charAt ( i ) == ']' ) { -- unbalanced_pair ; } else if ( s . charAt ( i ) == '[' ) { ++ unbalanced_pair ; } } return ( unbalanced_pair + 1 ) / 2 ; }
int ComputeHash ( String s ) { int p = 31 ; long mod = ( int ) ( 1e9 + 7 ) ; int hash_val = 0 ; int mul = 1 ; for ( char ch : s . toCharArray ( ) ) { hash_val = ( hash_val + ( ch - 'a' + 1 ) * mul ) % mod ; mul = mul * p % mod ; } return hash_val ; }
int CountOfSubstringWithOnlyOnes ( String s ) { int res = 0 , count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { count = s . charAt ( i ) == '1' ? count + 1 : 0 ; res = res + count ; } return res ; }
int Composite ( int n ) { int flag = 0 ; int c = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) { c += 1 ; } } if ( c >= 3 ) { flag = 1 ; } return flag ; }
boolean IsDivBySix ( String s , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += s . charAt ( i ) - 'a' + 1 ; } if ( sum % 3 != 0 ) { return false ; } int last_digit = ( s . charAt ( n - 1 ) - 'a' + 1 ) % 10 ; if ( last_digit % 2 != 0 ) { return false ; } return true ; }
boolean IsRedundantBraces ( String s ) { int a = 0 , b = 0 ; for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s . charAt ( i ) == '(' && s . charAt ( i + 2 ) == ')' ) { return true ; } if ( s . charAt ( i ) == '*' || s . charAt ( i ) == '+' || s . charAt ( i ) == '-' || s . charAt ( i ) == '/' ) { a ++ ; } if ( s . charAt ( i ) == '(' ) { b ++ ; } } if ( b > a ) { return true ; } return false ; }
int CountSubStr ( String s , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 2 ; ) { if ( s . charAt ( i ) == '0' && s . charAt ( i + 1 ) == '1' && s . charAt ( i + 2 ) == '0' ) { count ++ ; i += 3 ; } else if ( s . charAt ( i ) == '1' && s . charAt ( i + 1 ) == '0' && s . charAt ( i + 2 ) == '1' ) { count ++ ; i += 3 ; } else { i ++ ; } } return count ; }
int PrefixOccurrences ( String s ) { char c = s . charAt ( 0 ) ; int count_c = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == c ) { count_c ++ ; } } return count_c ; }
boolean IsValid ( String s , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) { return false ; } } return true ; }
int Count ( String s , int k ) { int n = s . length ( ) ; int d = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d += s . charAt ( i ) ; } if ( d % k == 0 ) { count += 1 ; } for ( int i = k ; i < n ; i ++ ) { int prev = s . charAt ( i - k ) ; d -= prev ; d += s . charAt ( i ) ; if ( d % k == 0 ) { count += 1 ; } } return count ; }
int FindSubstringCount ( String s ) { int result = 0 ; int n = s . length ( ) ; int i = 0 ; while ( i < n - 1 ) { if ( s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) { result ++ ; while ( i < n - 1 && s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) { i ++ ; } } i ++ ; } return result ; }
boolean Find ( String s1 , String s2 ) { int len1 = s1 . length ( ) , len2 = s2 . length ( ) ; if ( len1 != len2 ) { return false ; } int [ ] d = new int [ len1 ] ; d [ 0 ] = s2 [ 0 ] - s1 [ 0 ] ; for ( int i = 1 ; i < len1 ; i ++ ) { if ( s1 . charAt ( i ) > s2 . charAt ( i ) ) { return false ; } else { d [ i ] = s2 . charAt ( i ) - s1 . charAt ( i ) ; } } for ( int i = 0 ; i < len1 - 1 ; i ++ ) { if ( d [ i ] < d [ i + 1 ] ) { return false ; } } return true ; }
boolean IsInGivenBase ( String s , int bas ) { if ( bas > 16 ) { return false ; } else if ( bas <= 10 ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) ) { return false ; } } } else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! ( ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) || ( s . charAt ( i ) >= 'A' && s . charAt ( i ) < ( 'A' + bas - 10 ) ) ) ) { return false ; } } } return true ; }
int CountNonEmptySubstr ( String s ) { int n = s . length ( ) ; return n * ( n + 1 ) / 2 ; }
int EvenDecimalValue ( String s , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimal_value = 0 ; int power_of_2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimal_value += ( s . charAt ( k ) - '0' ) * power_of_2 ; power_of_2 *= 2 ; } if ( decimal_value % 2 == 0 ) { result ++ ; } } } return result ; }
int Calculate ( String s ) { int ans = 6 ; for ( int i = 0 ; i < 10 ; ++ i ) { for ( int j = 0 ; j < 10 ; ++ j ) { for ( int k = 0 ; k < 10 ; ++ k ) { for ( int l = 0 ; l < 10 ; ++ l ) { for ( int m = 0 ; m < 10 ; ++ m ) { for ( int n = 0 ; n < 10 ; ++ n ) { if ( i + j + k == l + m + n ) { int c = 0 ; if ( i != s . charAt ( 0 ) - '0' ) { c ++ ; } if ( k != s . charAt ( 2 ) - '0' ) { c ++ ; } if ( l != s . charAt ( 3 ) - '0' ) { c ++ ; } if ( m != s . charAt ( 4 ) - '0' ) { c ++ ; } if ( n != s . charAt ( 5 ) - '0' ) { c ++ ; } if ( c < ans ) { ans = c ; } } } } } } return ans ; }
int XorZero ( String s ) { int one_count = 0 , zero_count = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { one_count ++ ; } else { zero_count ++ ; } } if ( one_count % 2 == 0 ) { return zero_count ; } return one_count ; }
String EvenLength ( String n ) { String res = n ; for ( int j = n . length ( ) - 1 ; j >= 0 ; -- j ) { res += n . charAt ( j ) ; } return res ; }
int CountSubstringWithEqualEnds ( String s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( s . charAt ( i ) == s . charAt ( j ) ) { result ++ ; } } } return result ; }
double NormalSlope ( double a , double b , double x1 , double y1 ) { double g = a / 2 ; double f = b / 2 ; if ( g - x1 == 0 ) { return - 1 ; } double slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) { return - 2 ; } return slope ; }
boolean Orthogonality ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) { int dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) { return true ; } else { return false ; } }
double FindAreaShaded ( double a ) { double sq_area = a * a ; double semi_circle_area = 3.14f * ( a * a ) / 8 ; double shaded_area = 4 * semi_circle_area - sq_area ; return shaded_area ; }
int Factorial ( int a , int b ) { int res = 1 ; for ( int i = 1 ; i <= a + b ; i ++ ) { res = res * i ; } for ( int i = 1 ; i <= a ; i ++ ) { res = res / i ; } for ( int i = 1 ; i <= b ; i ++ ) { res = res / i ; } return res ; }
int FactorTree ( int n ) { int height = 0 ; while ( n > 1 ) { boolean flag = false ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( flag == false ) { break ; } } return height ; }
String FindIfPossible ( int n , int s , int x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) { return "Yes" ; } if ( n == 1 ) { if ( s == x ) { return "Yes" ; } else { return "No" ; } } if ( n == 2 ) { int c = ( s - x ) / 2 ; int a = c ; int b = c ; a = a + x ; if ( ( a ^ b ) == x ) { return "Yes" ; } else { return "No" ; } } } return "No" ; }
int MaximumTripletXor ( int a , int b , int c ) { int ans = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int cur = 1 << i ; if ( a >= cur ) { ans += cur ; a -= cur ; } else if ( b >= cur ) { ans += cur ; b -= cur ; } else if ( c >= cur ) { ans += cur ; c -= cur ; } } return ans ; }
int ItemType ( int n ) { int count = 0 ; int day = 1 ; while ( count + day * ( day + 1 ) / 2 < n ) { count += day * ( day + 1 ) / 2 ; day ++ ; } for ( int type = day ; type > 0 ; type -- ) { count += type ; if ( count >= n ) { return type ; } } return 0 ; }
int MaxGcdInRange ( int l , int r ) { int ans = 1 ; for ( int z = r ; z >= 1 ; z -- ) { if ( r / z - ( l - 1 ) / z > 1 ) { ans = z ; break ; } } return ans ; }
int SumOfDigits ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += n % 10 ; n = n / 10 ; } return sum ; }
boolean IsRepUnitNum ( int n , int b ) { int length = 0 ; int count_one = 0 ; while ( n != 0 ) { int r = n % b ; length ++ ; if ( r == 1 ) { count_one ++ ; } n = n / b ; } return count_one >= 3 && count_one == length ; }
boolean IsStraightLineNum ( int n ) { if ( n <= 99 ) { return false ; } String s = Integer . toString ( n ) ; int d = s . charAt ( 1 ) - s . charAt ( 0 ) ; for ( int i = 2 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) - s . charAt ( i - 1 ) != d ) { return false ; } } return true ; }
int GetCount ( int d , int n ) { int no = n / d ; int result = no ; for ( int p = 2 ; p * p <= no ; ++ p ) { if ( no % p == 0 ) { while ( no % p == 0 ) { no /= p ; } result -= result / p ; } } if ( no > 1 ) { result -= result / no ; } return result ; }
boolean IsEvenParity ( int x ) { int parity = 0 ; while ( x != 0 ) { if ( ( x & 1 ) == 1 ) { parity ++ ; } x = x >> 1 ; } if ( parity % 2 == 0 ) { return true ; } else { return false ; } }
int IsPerfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) { sum = sum + i + n / i ; } else { sum = sum + i ; } } } if ( sum == n && n != 1 ) { return n ; } return 0 ; }
int LogAToBaseB ( int a , int b ) { return a > b - 1 ? 1 + LogAToBaseB ( a / b , b ) : 0 ; }
int UsingBinarySearch ( int start , int end , int n , int s ) { if ( start >= end ) { return start ; } int mid = start + ( end - start ) / 2 ; int total_sum = n * ( n + 1 ) / 2 ; int mid_sum = mid * ( mid + 1 ) / 2 ; if ( total_sum - mid_sum <= s ) { return UsingBinarySearch ( start , mid , n , s ) ; } return UsingBinarySearch ( mid + 1 , end , n , s ) ; }
String MinInt ( String s ) { String s1 = s ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s1 . charAt ( i ) >= '5' ) { s1 . charAt ( i ) = '9' - s1 . charAt ( i ) + '0' ; } } if ( s1 . charAt ( 0 ) == '0' ) { s1 . charAt ( 0 ) = '9' ; } return s1 ; }
int CountTriplets ( int a , int b , int c ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { for ( int k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) { ans ++ ; } } } } return ans ; }
boolean TopsyTurvy ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '2' || s . charAt ( i ) == '4' || s . charAt ( i ) == '5' || s . charAt ( i ) == '6' || s . charAt ( i ) == '7' || s . charAt ( i ) == '9' ) { return false ; } } return true ; }
int SumOfLastDig ( int n , int m ) { int sum = 0 ; int k = n / m ; int [ ] arr = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ] ; } int rem = k % 10 ; int ans = k / 10 * sum ; for ( int i = 0 ; i < rem ; i ++ ) { ans += arr [ i ] ; } return ans ; }
int TotalPay ( int total_items , int price_of_one_item , int n , int m ) { int freeItems = 0 , actual = 0 ; freeItems = total_items / ( n + m ) ; actual = total_items - freeItems ; int amount = actual * price_of_one_item ; return amount ; }
int MinOperations ( int x , int y , int p , int q ) { if ( y % x != 0 ) { return - 1 ; } int d = y / x ; int a = 0 ; while ( d % p == 0 ) { d /= p ; a += 1 ; } int b = 0 ; while ( d % q == 0 ) { d /= q ; b += 1 ; } if ( d != 1 ) { return - 1 ; } return a + b ; }
boolean IsMersenne ( int n ) { while ( n != 0 ) { int r = n % 2 ; if ( r == 0 ) { return false ; } n /= 2 ; } return true ; }
int FindThirdDigit ( int n ) { if ( n < 3 ) { return 0 ; } return n & 1 ? 1 : 6 ; }
boolean IsOddLength ( int num ) { int count = 0 ; while ( num > 0 ) { num /= 10 ; count ++ ; } if ( count % 2 != 0 ) { return true ; } return false ; }
boolean CheckIsPossible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return count > 1 ; }
int Bytes ( int kilobytes ) { int b = kilobytes * 1024 ; return b ; }
int OctahedralNum ( int n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
String CheckEqual ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != '1' && s . charAt ( i ) != '0' && s . charAt ( i ) != '8' ) { return "No" ; } } int start = 0 , end = s . length ( ) - 1 ; while ( start < end ) { if ( s . charAt ( start ) != s . charAt ( end ) ) { return "No" ; } start ++ ; end -- ; } return "Yes" ; }
boolean IsUndulating ( String n ) { if ( n . length ( ) <= 2 ) { return false ; } for ( int i = 2 ; i < n . length ( ) ; i ++ ) { if ( n . charAt ( i - 2 ) != n . charAt ( i ) ) { return false ; } } return true ; }
int FirstDigit ( int n ) { while ( n >= 10 ) { n /= 10 ; } return n ; }
int CountDigit ( int n ) { if ( n == 0 ) { return 0 ; } return 1 + CountDigit ( n / 10 ) ; }
boolean IsDivisibleBy5 ( String s ) { int n = s . length ( ) ; return ( s . charAt ( n - 1 ) - '0' == 0 || s . charAt ( n - 1 ) - '0' == 5 ) ; }
int Inv ( int a , int m ) { int m0 = m ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
boolean OnlyFirstAndLastAreSet ( int n ) { if ( n == 1 ) { return true ; } if ( n == 2 ) { return false ; } return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
int Divide ( int dividend , int divisor ) { int sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? - 1 : 1 ; dividend = Math . abs ( dividend ) ; divisor = Math . abs ( divisor ) ; int quotient = 0 ; int temp = 0 ; for ( int i = 31 ; i >= 0 ; -- i ) { if ( temp + ( ( long ) divisor << i ) <= dividend ) { temp += ( long ) divisor << i ; quotient |= 1 << i ; } } if ( sign == - 1 ) { quotient = - quotient ; } return quotient ; }
char FindProfession ( int level , int pos ) { if ( level == 1 ) { return 'e' ; } if ( FindProfession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) { return pos % 2 ? 'd' : 'e' ; } return pos % 2 ? 'e' : 'd' ; }
boolean HasCloseElements ( double [ ] numbers , double threshold ) { for ( int i = 0 ; i < numbers . length ; i ++ ) { for ( int j = i + 1 ; j < numbers . length ; j ++ ) { double distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) { return true ; } } } return false ; }
double TruncateNumber ( double number ) { return fmod ( number , 1 ) ; }
boolean BelowZero ( int [ ] operations ) { int balance = 0 ; for ( int op : operations ) { balance += op ; if ( balance < 0 ) { return true ; } } return false ; }
double MeanAbsoluteDeviation ( double [ ] numbers ) { double sum_num = 0 ; for ( double num : numbers ) { sum_num += num ; } double mean = sum_num / numbers . length ; double sum_abs_diff = 0 ; for ( double num : numbers ) { sum_abs_diff += Math . abs ( num - mean ) ; } return sum_abs_diff / numbers . length ; } 
List < Integer > Intersperse ( int [ ] numbers , int delimiter ) { List < Integer > result = new ArrayList < > ( ) ; if ( numbers . length == 0 ) { return result ; } for ( int i = 0 ; i < numbers . length - 1 ; i ++ ) { result . add ( numbers [ i ] ) ; result . add ( delimiter ) ; } result . add ( numbers [ numbers . length - 1 ] ) ; return result ; }
int SumProduct ( int [ ] numbers ) { int sum_value = 0 ; int prod_value = 1 ; for ( int n : numbers ) { sum_value += n ; prod_value *= n ; } return new int [ ] { sum_value , prod_value } ; } 
List < String > AllPrefixes ( String s ) { List < String > result = new ArrayList < > ( ) ; for ( int i = 1 ; i <= s . length ( ) ; i ++ ) { result . add ( s . substring ( 0 , i ) ) ; } return result ; } 
List < Integer > ParseMusic ( String music_string ) { String current = "" ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i <= music_string . length ( ) ; i ++ ) { if ( i == music_string . length ( ) || music_string . charAt ( i ) == ' ' ) { if ( current == "o" ) { result . add ( 4 ) ; } if ( current == "o|" ) { result . add ( 2 ) ; } if ( current == ".|" ) { result . add ( 1 ) ; } current . clear ( ) ; } else { current += music_string . charAt ( i ) ; } } return result ; }
int Strlen ( String s ) { return s . length ( ) ; } 
List < Integer > Factorize ( int n ) { List < Integer > factors = new ArrayList < > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n /= i ; factors . add ( i ) ; i -- ; } } return factors ; }
String Concatenate ( String [ ] strings ) { String result = "" ; for ( String s : strings ) { result += s ; } return result ; } 
List < Double > GetPositive ( double [ ] l ) { List < Double > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . length ; i ++ ) { if ( l [ i ] > 0 ) { result . add ( l [ i ] ) ; } } return result ; } 
List < Double > SortEven ( List < Double > l ) { List < Double > evens = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i += 2 ) { evens . add ( l . get ( i ) ) ; } Collections . sort ( evens ) ; List < Double > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 2 == 0 ) { result . add ( evens . get ( i / 2 ) ) ; } if ( i % 2 == 1 ) { result . add ( l . get ( i ) ) ; } } return result ; }
String DecodeCyclic ( String s ) { String output = "" ; int i = 0 ; while ( i <= s . length ( ) - 3 ) { String x = s . charAt ( i + 2 ) + s . substring ( i , i + 3 ) ; output += x ; i += 3 ; } return output + s . substring ( i ) ; }
int CarRaceCollision ( int n ) { return ( int ) Math . pow ( n , 2 ) ; } 
List < Integer > IncrList ( int [ ] l ) { List < Integer > result = new ArrayList < > ( ) ; for ( int i : l ) { result . add ( i + 1 ) ; } return result ; }
boolean PairsSumToZero ( int [ ] l ) { for ( int i = 0 ; i < l . length ; i ++ ) { for ( int j = i + 1 ; j < l . length ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) { return true ; } } } return false ; }
String ChangeBase ( int x , int b ) { String ret = new String ( ) ; while ( x > 0 ) { ret . add ( 0 , Integer . toString ( x % b ) ) ; x /= b ; } return ret ; }
double Median ( List < double > l ) { Collections . sort ( l ) ; if ( l . size ( ) % 2 == 1 ) { return l . get ( l . size ( ) / 2 ) ; } return ( l . get ( l . size ( ) / 2 ) + l . get ( l . size ( ) / 2 - 1 ) ) / 2 ; }
String DecodeShift ( String s ) { String result = "" ; for ( char ch : s . toCharArray ( ) ) { char w = ( ch + 21 - 'a' ) % 26 + 'a' ; result += w ; } return result ; }
boolean BelowThreshold ( int [ ] l , int t ) { for ( int n : l ) { if ( n >= t ) { return false ; } } return true ; }
boolean CorrectBracketing ( String brackets ) { int depth = 0 ; for ( char b : brackets ) { if ( b == '<' ) { depth += 1 ; } if ( b == '>' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
boolean Monotonic ( double [ ] l ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . length ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr != 2 ; } 
List < double > Derivative ( double [ ] xs ) { List < double > result = new ArrayList < double > ( ) ; for ( int i = 1 ; i < xs . length ; i ++ ) { result . add ( i * xs . get ( i ) ) ; } return result ; }
int VowelsCount ( String s ) { String vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch : s . toCharArray ( ) ) { if ( vowels . indexOf ( ch ) != - 1 ) { count += 1 ; } } if ( s . charAt ( s . length ( ) - 1 ) == 'y' || s . charAt ( s . length ( ) - 1 ) == 'Y' ) { count += 1 ; } return count ; }
int DigitSum ( String s ) { int sum = 0 ; for ( char c : s . toCharArray ( ) ) { if ( isupper ( c ) ) { sum += c ; } } return sum ; }
int FruitDistribution ( String s , int n ) { String num1 = "" ; String num2 = "" ; boolean flag = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( isdigit ( s . charAt ( i ) ) ) { if ( flag == false ) { num1 += s . charAt ( i ) ; } if ( flag == true ) { num2 += s . charAt ( i ) ; } } else if ( flag == true && num1 . length ( ) > 0 ) { flag = true ; } } return n - Integer . valueOf ( num1 ) - Integer . valueOf ( num2 ) ; } 
List < Integer > Pluck ( int [ ] arr ) { List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . isEmpty ( ) ) { result . add ( arr [ i ] ) ; result . add ( i ) ; } else if ( arr [ i ] < result . get ( 0 ) ) { result . set ( 0 , arr [ i ] ) ; result . set ( 1 , i ) ; } } } return result ; } 
List < Integer > StrangeSortList ( List < Integer > lst ) { List < Integer > res = new ArrayList < > ( ) ; Collections . sort ( lst ) ; int l = 0 ; int r = lst . size ( ) - 1 ; while ( l < r ) { res . add ( lst . get ( l ) ) ; l += 1 ; res . add ( lst . get ( r ) ) ; r -= 1 ; } if ( l == r ) { res . add ( lst . get ( l ) ) ; } return res ; }
double TriangleArea ( double a , double b , double c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return - 1 ; } double s = ( a + b + c ) / 2 ; return Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; }
boolean WillItFly ( int [ ] q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . length ; i ++ ) { if ( q [ i ] != q [ q . length - i - 1 ] ) { return false ; } sum += q [ i ] ; } return sum <= w ; }
boolean IsCube ( int a ) { a = Math . abs ( a ) ; int i = ( int ) Math . round ( Math . pow ( a , 1.0 / 3 ) ) ; return Math . pow ( i , 3 ) == a ; }
int HexKey ( String num ) { String key = "2357BD" ; int total = 0 ; for ( char c : num . toCharArray ( ) ) { if ( key . indexOf ( c ) != - 1 ) { total += 1 ; } } return total ; }
String DecimalToBinary ( int dec ) { String ans = "" ; if ( dec != 0 ) { while ( dec > 0 ) { ans . add ( 0 , Integer . toString ( dec % 2 ) ) ; dec /= 2 ; } } else { ans += "0" ; } return "db" + ans + "db" ; }
boolean PrimeLength ( String s ) { int l = s . length ( ) ; if ( l < 2 ) { return false ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return false ; } } return true ; }
int StartsOneEnds ( int n ) { if ( n < 1 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return 18 * ( int ) Math . pow ( 10 , n - 2 ) ; }
int Add ( int [ ] lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; } 
List < List < Integer > > GetRow ( List < Integer > lst , int x ) { List < Integer > coords = new ArrayList < List < Integer > > ( ) ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { for ( int j = lst . get ( i ) . size ( ) - 1 ; j >= 0 ; j -- ) { if ( lst . get ( i ) . get ( j ) == x ) { coords . add ( new ArrayList < Integer > ( ) ) ; } } } return coords ; }
int NextSmallest ( int [ ] lst ) { Arrays . sort ( lst ) ; for ( int i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) { return lst [ i ] ; } } return - 1 ; }
boolean AnyInt ( double a , double b , double c ) { if ( Math . round ( a ) != a || Math . round ( b ) != b || Math . round ( c ) != c ) { return false ; } return a + b == c || a + c == b || b + c == a ; } 
List < Integer > CountUpTo ( int n ) { List < Integer > primes = new ArrayList < > ( ) ; for ( int i = 2 ; i < n ; i ++ ) { boolean is_prime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { primes . add ( i ) ; } } return primes ; }
int ClosestInteger ( String value ) { double w = stod ( value ) ; return ( int ) Math . round ( w ) ; } 
List < Integer > MakeAPile ( int n ) { List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { result . add ( n + 2 * i ) ; } return result ; } 
List < String > WordsString ( String s ) { String current = "" ; List < String > words = new ArrayList < > ( ) ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' || s . charAt ( i ) == ',' ) { if ( current . length ( ) > 0 ) { words . add ( current ) ; current . clear ( ) ; } } else { current += s . charAt ( i ) ; } } return words ; }
String RoundedAvg ( int n , int m ) { if ( n > m ) { return "-1" ; } int num = ( m + n ) / 2 ; String ret = new String ( ) ; while ( num > 0 ) { ret . add ( 0 , Integer . toString ( num % 2 ) ) ; num /= 2 ; } return ret ; } 
List < Integer > UniqueDigits ( int [ ] x ) { List < Integer > digits = new ArrayList < Integer > ( ) ; for ( int n : x ) { boolean is_unique = true ; for ( char c : Integer . toString ( n ) ) { if ( c % 2 == 0 ) { is_unique = false ; break ; } } if ( is_unique ) { digits . add ( n ) ; } } Collections . sort ( digits ) ; return digits ; }
int CountNums ( int [ ] arr ) { int num = 0 ; for ( int n : arr ) { int neg = n < 0 ? - 1 : 1 ; n = Math . abs ( n ) ; List < Integer > digits = new ArrayList < Integer > ( ) ; for ( char c : String . valueOf ( n ) ) { digits . add ( ( int ) c - ( int ) '0' ) ; } digits . set ( 0 , neg ) ; int sum = 0 ; for ( int d : digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; }
boolean MoveOneBall ( int [ ] arr ) { if ( arr . length == 0 ) { return true ; } int num = 0 ; for ( int i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ arr . length - 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; }
String Exchange ( int [ ] lst1 , int [ ] lst2 ) { int odd = 0 ; int even = 0 ; for ( int n : lst1 ) { if ( n % 2 == 1 ) { odd += 1 ; } } for ( int n : lst2 ) { if ( n % 2 == 0 ) { even += 1 ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; } 
List < String > OddCount ( String lst [ ] ) { List < String > results = new ArrayList < > ( ) ; String original_str = "the number of odd elements in the String i of the input." ; for ( String s : lst ) { int sum = 0 ; for ( char d : s ) { if ( isdigit ( d ) && d % 2 == 1 ) { sum += 1 ; } } String result = new String ( ) ; for ( char c : original_str ) { if ( c == 'i' ) { result += Integer . toString ( sum ) ; } else { result += c ; } } results . add ( result ) ; } return results ; }
int MinSubArraySum ( int [ ] nums ) { int min_sum = Integer . MAX_VALUE ; int sum = 0 ; for ( int num : nums ) { sum += num ; if ( min_sum > sum ) { min_sum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return min_sum ; }
int MaxFill ( int [ ] grid , int capacity ) { int res = 0 ; for ( int [ ] well : grid ) { int sum = 0 ; for ( int n : well ) { sum += n ; } if ( sum > 0 ) { res += ( sum - 1 ) / capacity + 1 ; } } return res ; } 
List < String > SelectWords ( String s , int n ) { String vowels = "aeiouAEIOU" ; String current = "" ; List < String > result = new ArrayList < > ( ) ; int consonant_num = 0 ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { if ( consonant_num == n ) { result . add ( current ) ; } current . clear ( ) ; consonant_num = 0 ; } else { current += s . charAt ( i ) ; if ( vowels . indexOf ( s . charAt ( i ) ) == String . npos ) { consonant_num += 1 ; } } } return result ; }
int Solution ( int [ ] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 1 ) { sum += lst [ i ] ; } } return sum ; }
int AddElements ( int [ ] arr , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= - 99 && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; } 
List < Integer > GetOddCollatz ( int n ) { List < Integer > odd_collatz = new ArrayList < Integer > ( ) ; while ( n != 1 ) { if ( n % 2 == 1 ) { odd_collatz . add ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } odd_collatz . add ( 1 ) ; Arrays . sort ( odd_collatz ) ; return odd_collatz ; }
boolean IsSorted ( int [ ] lst ) { for ( int i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; }
String Intersection ( int [ ] interval1 , int [ ] interval2 ) { int inter1 = Math . max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = Math . min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return "NO" ; } } return "YES" ; }
int ProdSigns ( int [ ] arr ) { if ( arr . length == 0 ) { return - 32768 ; } int sum = 0 ; int prods = 1 ; for ( int i : arr ) { sum += Math . abs ( i ) ; if ( i == 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; } 
List < Integer > MinPath ( int [ ] [ ] grid , int k ) { int n = grid . length ; int min_num = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { List < Integer > tmp = new ArrayList < > ( ) ; if ( i != 0 ) { tmp . add ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . add ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . add ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . add ( grid [ i ] [ j + 1 ] ) ; } min_num = Arrays . stream ( tmp ) . min ( ) . getAsInt ( ) ; } } } List < Integer > ans = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . add ( 1 ) ; } else { ans . add ( min_num ) ; } } return ans ; }
int Digits ( int n ) { int prod = 0 ; for ( char digit : String . valueOf ( n ) ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) { prod = 1 ; } prod *= digit - '0' ; } } return prod ; }
boolean IsNested ( String s ) { int count = 0 ; int max_count = 0 ; for ( char ch : s . toCharArray ( ) ) { if ( ch == '[' ) { count += 1 ; } if ( ch == ']' ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > max_count ) { max_count = count ; } if ( count <= max_count - 2 ) { return true ; } } return false ; }
int SumSquares ( double [ ] lst ) { int sum = 0 ; for ( double i : lst ) { sum += Math . ceil ( i ) * Math . ceil ( i ) ; } return sum ; }
int CanArrange ( int [ ] arr ) { int index = - 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
int [ ] LargestSmallestIntegers ( int [ ] lst ) { int max_neg = 0 , min_pos = 0 ; for ( int n : lst ) { if ( n < 0 && ( max_neg == 0 || n > max_neg ) ) { max_neg = n ; } if ( n > 0 && ( min_pos == 0 || n < min_pos ) ) { min_pos = n ; } } return new int [ ] { max_neg , min_pos } ; }
String FixSpaces ( String text ) { String res = "" ; int space_len = 0 ; for ( int i = 0 ; i <= text . length ( ) ; i ++ ) { if ( i == text . length ( ) || text . charAt ( i ) != ' ' ) { if ( space_len == 1 ) { res += '_' ; } if ( space_len == 2 ) { res += "__" ; } if ( space_len > 2 ) { res += '-' ; } space_len = 0 ; if ( i != text . length ( ) ) { res += text . charAt ( i ) ; } } else { space_len += 1 ; } } return res ; }
String FileNameCheck ( String file_name ) { int digit_num = 0 , dot_num = 0 ; if ( file_name . length ( ) < 5 || ! isalpha ( file_name . charAt ( 0 ) ) ) { return "No" ; } String suffix = file_name . substring ( file_name . length ( ) - 4 ) ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) { return "No" ; } for ( char c : file_name ) { if ( isdigit ( c ) ) { digit_num += 1 ; } if ( c == '.' ) { dot_num += 1 ; } } if ( digit_num > 3 || dot_num != 1 ) { return "No" ; } return "Yes" ; }
int SumSquares ( int [ ] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i ++ ) { if ( i % 3 == 0 ) { sum += lst [ i ] * lst [ i ] ; } else if ( i % 4 == 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else { sum += lst [ i ] ; } } return sum ; }
String WordsInSentence ( String sentence ) { String result = "" ; String current = sentence ; for ( int i = 0 ; i <= sentence . length ( ) ; i ++ ) { if ( i == sentence . length ( ) || sentence . charAt ( i ) == ' ' ) { boolean is_prime = true ; int l = current . length ( ) ; if ( l < 2 ) { is_prime = false ; } for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { result += current + ' ' ; } current . clear ( ) ; } else { current += sentence . charAt ( i ) ; } } if ( result . length ( ) > 0 ) { result . remove ( ) ; } return result ; }
boolean Simplify ( String x , String n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x . charAt ( i ) == '/' ) { a = Integer . valueOf ( x . substring ( 0 , i ) ) ; b = Integer . valueOf ( x . substring ( i + 1 ) ) ; } } for ( int i = 0 ; i < n . length ( ) ; i ++ ) { if ( n . charAt ( i ) == '/' ) { c = Integer . valueOf ( n . substring ( 0 , i ) ) ; d = Integer . valueOf ( n . substring ( i + 1 ) ) ; } } return ( a * c ) % ( b * d ) == 0 ; }
int SpecialFilter ( int [ ] nums ) { int count = 0 ; for ( int num : nums ) { if ( num > 10 ) { String w = Integer . toString ( num ) ; if ( w . charAt ( 0 ) % 2 == 1 && w . charAt ( w . length ( ) - 1 ) % 2 == 1 ) { count += 1 ; } } } return count ; }
int GetMatrixTriples ( int n ) { List < Integer > arr = new ArrayList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { arr . add ( i * i - i + 1 ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr . get ( i ) + arr . get ( j ) + arr . get ( k ) ) % 3 == 0 ) { count += 1 ; } } } } return count ; }
int DoubleTheDifference ( int [ ] lst ) { int sum = 0 ; for ( double d : lst ) { int num = ( int ) Math . round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) { sum += num * num ; } } } return sum ; } 
List < Integer > Compare ( List < Integer > game , List < Integer > guess ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < game . size ( ) ; i ++ ) { result . add ( Math . abs ( game . get ( i ) - guess . get ( i ) ) ) ; } return result ; }
String StrongestExtension ( String class_name , List < String > extensions ) { String strongest = "" ; int max = Integer . MIN_VALUE ; for ( String extension : extensions ) { int strength = 0 ; for ( char chr : extension ) { if ( isupper ( chr ) ) { strength += 1 ; } if ( islower ( chr ) ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return class_name + '.' + strongest ; }
String IntToMiniRoman ( int number ) { int [ ] num = new int [ 1000 ] ; int [ ] sym = { "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" } ; int pos = 0 ; String res = "" ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res += sym [ pos ] ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } return res ; } 
List < Integer > Eat ( int number , int need , int remaining ) { return need > remaining ? new ArrayList < Integer > ( number + remaining , 0 ) : new ArrayList < Integer > ( number + need , remaining - need ) ; }
int DoAlgebra ( String ops , int [ ] operands ) { int [ ] nums = new int [ operands . length ] ; String [ ] current_ops = new String [ ops ] ; int i = current_ops . length - 1 ; while ( i >= 0 ) { if ( current_ops . charAt ( i ) == "**" ) { nums [ i ] = ( int ) Math . pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . remove ( current_ops . begin ( ) + i ) ; } i -- ; } i = 0 ; while ( i < current_ops . length ) { if ( current_ops . charAt ( i ) == "*" ) { nums [ i ] *= nums [ i + 1 ] ; nums . remove ( nums . begin ( ) + i + 1 ) ; current_ops . remove ( current_ops . begin ( ) + i ) ; } else if ( current_ops . charAt ( i ) == "//" ) { nums [ i ] /= nums [ i + 1 ] ; nums . remove ( nums . begin ( ) + i + 1 ) ; current_ops . remove ( current_ops . begin ( ) + i ) ; } else { i ++ ; } } i = 0 ; while ( i < current_ops . length ) { if ( current_ops . charAt ( i ) == "+" ) { nums [ i ] += nums [ i + 1 ] ; nums . remove ( nums . begin ( ) + i + 1 ) ; current_ops . remove ( current_ops . begin ( ) + i ) ; } else if ( current_ops . charAt ( i ) == "-" ) { nums [ i ] -= nums [ i + 1 ] ; nums . remove ( nums . begin ( ) + i + 1 ) ; current_ops . remove ( current_ops . begin ( ) + i ) ; } else { i ++ ; } } return nums [ 0 ] ; } 
List < Integer > GenerateIntegers ( int a , int b ) { int lower = Math . max ( 2 , Math . min ( a , b ) ) ; int upper = Math . min ( 8 , Math . max ( a , b ) ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = lower ; i <= upper ; i += 2 ) { result . add ( i ) ; } return result ; }
boolean IsStepNum ( int n ) { int prev_digit = - 1 ; while ( n > 0 ) { int cur_digit = n % 10 ; if ( prev_digit == - 1 ) { prev_digit = cur_digit ; } else { if ( Math . abs ( prev_digit - cur_digit ) != 1 ) { return false ; } } prev_digit = cur_digit ; n /= 10 ; } return true ; }
int NumOfWays ( int n , int k ) { int p = 1 ; if ( k % 2 == 1 ) { p = - 1 ; } return ( ( int ) Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; } 
List < Integer > FindDivisors ( int n ) { List < Integer > v = new ArrayList < Integer > ( ) ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { v . add ( i ) ; } else { v . add ( i ) ; v . add ( n / i ) ; } } } return v ; }
int EggDrop ( int n , int k ) { if ( k == 1 || k == 0 ) { return k ; } if ( n == 1 ) { return k ; } int min = Integer . MAX_VALUE ; for ( int x = 1 ; x <= k ; x ++ ) { int res = Math . max ( EggDrop ( n - 1 , x - 1 ) , EggDrop ( n , k - x ) ) ; if ( res < min ) { min = res ; } } return min + 1 ; }
boolean IsPowerOfTwo ( int n ) { if ( n == 0 ) { return false ; } return ( Math . ceil ( Math . log ( n ) / Math . log ( 2 ) ) ) == Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ; }
String ShortestPalindrome ( String s ) { int n = s . length ( ) ; List < String > v = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i ; int r = i ; String ans1 = "" ; String ans2 = "" ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans1 += s . charAt ( l ) ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans2 += s . charAt ( l ) ; l -- ; r ++ ; } v . add ( ans1 ) ; v . add ( ans2 ) ; } String ans = v . get ( 0 ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . get ( i ) != "" ) { ans = Math . min ( ans , v . get ( i ) ) ; } } return ans ; }
int MinimumAdjacentDifference ( int [ ] a , int n , int k ) { int min_diff = Integer . MAX_VALUE ; for ( int i = 0 ; i <= k ; i ++ ) { int max_diff = Integer . MIN_VALUE ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { max_diff = Math . max ( max_diff , a [ p + 1 ] - a [ p ] ) ; } } min_diff = Math . min ( min_diff , max_diff ) ; } return min_diff ; }
int Cal ( int [ ] a , int mid ) { int chocolate = 0 ; for ( int i : a ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; }
boolean Check ( int v , int [ ] a , int m ) { int tec = 0 , ans = 0 ; int [ ] b = new int [ a . length + 3 ] ; for ( int i = 0 ; i < a . length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; }
int LargestNum ( int [ ] arr ) { int res = 0 ; Arrays . sort ( arr ) ; int l = 0 , r = arr . length - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) { l ++ ; } else { r -- ; } } return res ; }
int BinarySearch ( int p [ ] , int n ) { int i = 0 ; int j = p . length - 1 ; int index = - 1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
int FindMinLength ( int [ ] arr ) { int index = arr . length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; }
int MinDigits ( int n , int k ) { int digits_num = ( int ) Math . floor ( ( Math . log10 ( n ) / 10 ) + 1 ) ; int temp_sum = 0 ; int temp = digits_num ; int result = 0 ; int x = 0 , v = 0 ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = n / Math . pow ( 10 , temp - 1 ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v /= 10 ; v ++ ; result = v * Math . pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; } return - 1 ; }
int CheckForPerfectSquare ( int arr [ ] , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; }
int MinFlips ( int [ ] [ ] mat , String s ) { int n = mat . length ; int m = mat [ 0 ] . length ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s [ i + j ] - '0' ) { count ++ ; } } } return count ; } 
List < List < Integer > > ConstructTree ( int n , List < Integer > edges ) { List < List < Integer > > adjl = new ArrayList < List < Integer > > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { adjl . add ( new ArrayList < Integer > ( ) ) ; } for ( int [ ] e : edges ) { int u = e [ 0 ] ; int v = e [ 1 ] ; adjl . get ( u ) . add ( v ) ; adjl . get ( v ) . add ( u ) ; } return adjl ; }
int FindSumOfValues ( int v , int [ ] parent , int [ ] values_children ) { int cur_node = v ; int sum = 0 ; while ( cur_node != - 1 ) { sum += values_children [ cur_node ] ; cur_node = parent [ cur_node ] ; } return sum ; }
int GetDistinct ( int d , int count ) { int num = 0 ; count = ( int ) Math . pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; }
boolean IsIncreasing ( int [ ] arr ) { for ( int i = 0 ; i < arr . length - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; }
int MinAdjSwaps ( int [ ] [ ] mat ) { int n = mat . length ; int [ ] cnt_zero = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 && mat [ i ] [ j ] == 0 ; j -- ) { cnt_zero [ i ] ++ ; } } int cnt_swaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cnt_zero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) { return - 1 ; } while ( first > i ) { int temp = cnt_zero [ first ] ; cnt_zero [ first ] = cnt_zero [ first - 1 ] ; cnt_swaps ++ ; } } } return cnt_swaps ; }
int Solve ( int [ ] values , int [ ] salary , int mod ) { int ret = 1 ; int amt = 0 ; Arrays . sort ( values ) ; Arrays . sort ( salary ) ; while ( salary . size ( ) > 0 ) { while ( values . length > 0 && values [ values . length - 1 ] >= salary [ salary . length - 1 ] ) { amt ++ ; values . remove ( ) ; } if ( amt == 0 ) { return 0 ; } ret *= amt -- ; ret %= mod ; salary . remove ( ) ; } return ret ; }
int [ ] OrganizeInOrder ( int [ ] vec , char [ ] op , int n ) { int [ ] result = new int [ n ] ; Arrays . sort ( result ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; }
int CountPoints ( int n , int m , int a [ ] , int b [ ] , int x , int y ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; }
boolean AreSame ( List < Integer > a , List < Integer > b ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; return a == b ; }
int CountNumberOfStrings ( String s ) { int n = s . length ( ) - 1 ; int count = ( int ) Math . pow ( 2 , n ) ; return count ; } 
List < Integer > PrimePower ( int x ) { List < Integer > prime_pow = new ArrayList < > ( ) ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } prime_pow . add ( p ) ; } } if ( x > 1 ) { prime_pow . add ( x ) ; } return prime_pow ; }
boolean IsPerfect ( int n0 ) { double n = Math . sqrt ( n0 ) ; if ( Math . floor ( n ) != Math . ceil ( n ) ) { return false ; } return true ; }
int FindSum ( int l , int r ) { List < Integer > arr = new ArrayList < > ( ) ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . add ( i + x ) ; if ( i + 1 <= r ) { arr . add ( i + 1 + x ) ; } x *= - 1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr . get ( i ) ; } return sum ; }
int Results ( int n , int k ) { return ( int ) Math . round ( Math . pow ( n , 1.0 / Math . pow ( 2 , k ) ) ) ; } 
List < Integer > Factors ( int n ) { List < Integer > v = new ArrayList < > ( ) ; v . add ( 1 ) ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . add ( i ) ; if ( n / i != i ) { v . add ( n / i ) ; } } } return v ; }
int SmallestNum ( int n ) { double x = Math . pow ( 10.0 , ( n - 1 ) / 2.0 ) ; return ( int ) Math . ceil ( x ) ; }
int Smallest ( String s ) { int [ ] a = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = ( int ) s . charAt ( i ) - ( int ) '0' ; } List < Integer > b = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( ( a [ i ] ) % 2 != 0 ) { b . add ( a [ i ] ) ; } } Collections . sort ( b ) ; if ( b . size ( ) > 1 ) { return b . get ( 0 ) * 10 + b . get ( 1 ) ; } return - 1 ; } 
List < Double > Diagonals ( double a , double b , double c , double d ) { List < Double > ans = new ArrayList < Double > ( ) ; ans . add ( Math . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . add ( Math . sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; }
int FindNumberOfDigits ( int n , int bas ) { int dig = ( int ) Math . floor ( ( Math . log ( n ) / Math . log ( bas ) ) + 1 ) ; return dig ; }
double NGon ( int n ) { double pro_angle_var ; if ( n % 4 == 0 ) { pro_angle_var = numbers :: pi * ( 180.0 / n ) / 180 ; } else { pro_angle_var = numbers :: pi * ( 180.0 / ( 2 * n ) ) / 180 ; } double neg_x = 1.0e+99 , pos_x = - 1.0e+99 , neg_y = 1.0e+99 ; pos_y = - 1.0e+99 ; for ( int j = 0 ; j < n ; ++ j ) { double px = Math . cos ( 2 * numbers :: pi * j / n + pro_angle_var ) ; double py = Math . sin ( 2 * numbers :: pi * j / n + pro_angle_var ) ; neg_x = Math . min ( neg_x , px ) ; pos_x = Math . max ( pos_x , px ) ; neg_y = Math . min ( neg_y , py ) ; pos_y = Math . max ( pos_y , py ) ; } double opt2 = Math . max ( pos_x - neg_x , pos_y - neg_y ) ; return opt2 / Math . sin ( numbers :: pi / n ) / 2 ; }
int FindMaxK ( int n ) { int p = ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ; return ( int ) Math . pow ( 2 , p ) ; }
int NthFibo ( int n ) { double a = ( Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; double b = ( - 1 * Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; double r = ( Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; double ans = ( Math . pow ( a , n ) - Math . pow ( b , n ) ) / r ; return ans ; }
double FindProb ( int l , int r ) { double count_of_ps = Math . floor ( Math . sqrt ( r ) ) - Math . ceil ( Math . sqrt ( l ) ) + 1 ; double total = r - l + 1 ; double prob = count_of_ps / total ; return prob ; }
int PreviousFibonacci ( int n ) { double a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return ( int ) Math . round ( a ) ; } 
List < Integer > DistPrime ( int [ ] arr , int [ ] all_primes ) { List < Integer > list1 = new ArrayList < > ( ) ; for ( int i : all_primes ) { for ( int j : arr ) { if ( j % i == 0 ) { list1 . add ( i ) ; break ; } } } return list1 ; } 
List < Integer > GetArray ( int n ) { List < Integer > ans = new ArrayList < > ( ) ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans . add ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; }
int MaximumLength ( int [ ] a ) { int [ ] counts = new int [ 11 ] ; int ans = 0 ; for ( int index = 0 ; index < a . length ; index ++ ) { counts [ a [ index ] ] += 1 ; List < Integer > k = new ArrayList < > ( ) ; for ( int i : counts ) { if ( i != 0 ) { k . add ( i ) ; } } Collections . sort ( k ) ; if ( k . size ( ) == 1 || ( k . get ( 0 ) == k . get ( k . size ( ) - 2 ) && k . get ( k . size ( ) - 1 ) - k . get ( k . size ( ) - 2 ) == 1 ) || ( k . get ( 0 ) == 1 && k . get ( 1 ) == k . get ( k . size ( ) - 1 ) ) ) { ans = index ; } } return ans + 1 ; }
int MaxEdges ( int n ) { int edges = ( int ) Math . floor ( n * n / 4 ) ; return edges ; }
int FindK ( int n , int k ) { List < Integer > a = new ArrayList < > ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a . add ( i ) ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a . add ( i ) ; } } return a . get ( k - 1 ) ; }
boolean IsKeith ( int x , int temp ) { List < Integer > terms = new ArrayList < > ( ) ; int n = 0 ; while ( temp > 0 ) { terms . add ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } Collections . reverse ( terms ) ; int next_term = 0 , i = n ; while ( next_term < x ) { next_term = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { next_term += terms . get ( i - j ) ; } terms . add ( next_term ) ; i ++ ; } return next_term == x ; }
boolean Factors ( int n , int k ) { List < Integer > v = new ArrayList < > ( ) ; while ( n % 2 == 0 ) { v . add ( 2 ) ; n /= 2 ; } if ( v . size ( ) >= k ) { return true ; } for ( int i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n = n / i ; v . add ( i ) ; } if ( v . size ( ) >= k ) { return true ; } } if ( n > 2 ) { v . add ( n ) ; } if ( v . size ( ) >= k ) { return true ; } return false ; } 
List < String > SeparateParenGroups ( String paren_string ) { List < String > all_parens = new ArrayList < > ( ) ; String current_paren ; int current_depth = 0 ; for ( char c : paren_string . toCharArray ( ) ) { if ( c == '(' ) { current_depth += 1 ; current_paren += c ; } else if ( c == ')' ) { current_depth -= 1 ; current_paren += c ; if ( current_depth == 0 ) { all_parens . add ( current_paren ) ; current_paren . clear ( ) ; } } } return all_parens ; } 
List < Integer > ParseNestedParens ( String paren_string ) { List < Integer > all_levels = new ArrayList < Integer > ( ) ; int level = 0 ; int max_level = 0 ; for ( int i = 0 ; i < paren_string . length ( ) ; i ++ ) { char chr = paren_string . charAt ( i ) ; if ( chr == '(' ) { level += 1 ; if ( level > max_level ) { max_level = level ; } } if ( chr == ')' ) { level -= 1 ; if ( level == 0 ) { all_levels . add ( max_level ) ; max_level = 0 ; } } } return all_levels ; } 
List < String > FilterBySubstring ( List < String > strings , String substring ) { List < String > result = new ArrayList < > ( ) ; for ( String s : strings ) { if ( s . indexOf ( substring ) != String . npos ) { result . add ( s ) ; } } return result ; } 
List < Integer > RollingMax ( int [ ] numbers ) { int running_max = 0 ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int n : numbers ) { if ( n > running_max ) { running_max = n ; } result . add ( running_max ) ; } return result ; }
String MakePalindrome ( String s ) { if ( s . isEmpty ( ) ) { return "" ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String r_str = s . substring ( i ) ; if ( r_str == String ( r_str . last ( ) , r_str . last ( ) ) ) { String n_str = s . substring ( 0 , i ) ; String n2_str = s . substring ( 0 , s . length ( ) - 1 ) + String . valueOf ( n_str . last ( ) , n_str . last ( ) ) ; return s + n2_str ; } } return s . substring ( 0 , s . length ( ) - 1 ) + String . valueOf ( s . last ( ) , s . last ( ) ) ; }
String StringXor ( String a , String b ) { String result = "" ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) { result += '0' ; } else { result += '1' ; } } return result ; }
String Longest ( String [ ] strings ) { if ( strings . length == 0 ) { return "" ; } int max_len = ranges . max ( strings ) ; for ( String s : strings ) { if ( s . length ( ) == max_len ) { return s ; } } return "" ; }
String StringSequence ( int n ) { String s = "" ; for ( int i = 0 ; i < n ; i ++ ) { s += String . valueOf ( i ) ; s += " " ; } s += String . valueOf ( n ) ; return s ; }
int CountDistinctCharacter ( String s ) { Set < Character > distinct = new HashSet < Character > ( ) ; for ( char c : views . transform ( s , Character . valueOf ) ) { distinct . add ( c ) ; } return distinct . size ( ) ; }
int HowManyTimes ( String s , String sub ) { int times = 0 ; for ( int i = 0 ; i <= Math . min ( s . length ( ) - sub . length ( ) ) ; i ++ ) { if ( s . substring ( i , sub . length ( ) ) == sub ) { times += 1 ; } } return times ; }
String SortNumbers ( String numbers ) { HashMap < String , Integer > to_num = new HashMap < > ( ) ; HashMap < String , Integer > from_num = new HashMap < > ( ) { { "zero" , 0 } , { "one" , 1 } , { "two" , 2 } , { "three" , 3 } , { "four" , 4 } , { "five" , 5 } , { "six" , 6 } , { "seven" , 7 } , { "eight" , 8 } , { "nine" , 9 } } ; HashMap < Integer , String > from_num = new HashMap < > ( ) ; { { "0" , "one" } , { 2 , "two" } , { 3 , "three" } , { 4 , "four" } , { 5 , "five" } , { 6 , "six" } , { 8 , "eight" } , { 9 , "nine" } } ; List < Integer > ints = new ArrayList < Integer > ( ) ; String current = "" ; for ( int i = 0 ; i <= numbers . length ( ) ; i ++ ) { if ( i == numbers . length ( ) || numbers . charAt ( i ) == ' ' ) { if ( to_num . containsKey ( current ) ) { ints . add ( to_num . get ( current ) ) ; current . clear ( ) ; } } else { current += numbers . charAt ( i ) ; } } Collections . sort ( ints ) ; String result = "" ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { result += from_num . get ( ints . get ( i ) ) ; if ( i != ints . size ( ) - 1 ) { result += " " ; } } return result ; } 
List < Double > FindClosestElements ( double [ ] numbers ) { List < Double > closest_pair = new ArrayList < Double > ( ) ; double distance = Math . abs ( closest_pair [ 0 ] - closest_pair [ 1 ] ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { for ( int j = i + 1 ; j < numbers . length ; j ++ ) { if ( Math . abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closest_pair [ 0 ] = numbers [ i ] ; closest_pair [ 1 ] = numbers [ j ] ; distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; } } } Collections . sort ( closest_pair ) ; return closest_pair ; } 
List < Double > RescaleToUnit ( double [ ] numbers ) { double min_num = Arrays . stream ( numbers ) . min ( ) . getAsDouble ( ) ; double max_num = Arrays . stream ( numbers ) . max ( ) . getAsDouble ( ) ; List < Double > result = new ArrayList < Double > ( ) ; for ( double n : numbers ) { result . add ( ( n - min_num ) / ( max_num - min_num ) ) ; } return result ; } 
List < Integer > FilterIntegers ( List < Any > values ) { List < Integer > result = new ArrayList < Integer > ( ) ; for ( Any e : values ) { if ( e . getType ( ) == typeid ( int ) ) { result . add ( any_cast < Integer > ( e ) ) ; } } return result ; } 
List < Integer > removeDuplicates ( int [ ] numbers ) { HashMap < Integer , Integer > counter = new HashMap < Integer , Integer > ( ) ; for ( int i : numbers ) { if ( counter . containsKey ( i ) ) { counter . put ( i , counter . get ( i ) + 1 ) ; } else { counter . put ( i , 1 ) ; } } List < Integer > result = new ArrayList < > ( ) ; for ( int i : numbers ) { if ( counter . get ( i ) == 1 ) { result . add ( i ) ; } } return result ; }
String FlipCase ( String s ) { String result = "" ; for ( char c : s . toCharArray ( ) ) { if ( islower ( c ) ) { result += toupper ( c ) ; } else { result += tolower ( c ) ; } } return result ; } 
List < String > FilterByPrefix ( List < String > strings , String prefix ) { List < String > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < strings . size ( ) ; i ++ ) { if ( strings . get ( i ) . startsWith ( prefix ) ) { result . add ( strings . get ( i ) ) ; } } return result ; }
double FindZero ( double [ ] xs ) { double ans = 0 ; double value = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) { value += xs [ i ] * ( double ) Math . pow ( ans , i ) ; } while ( Math . abs ( value ) > 1e-6 ) { double driv = 0 ; for ( int i = 1 ; i < xs . length ; i ++ ) { driv += xs [ i ] * ( double ) Math . pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) { value += xs [ i ] * ( double ) Math . pow ( ans , i ) ; } } return ans ; } 
List < Integer > SortThird ( int [ ] l ) { List < Integer > thirds = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < l . length ; i += 3 ) { thirds . add ( l [ i ] ) ; } Collections . sort ( thirds ) ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 0 ; i < l . length ; i ++ ) { if ( i % 3 == 0 ) { result . add ( thirds . get ( i / 3 ) ) ; } else { result . add ( l [ i ] ) ; } } return result ; } 
List < Integer > Unique ( List < Integer > l ) { Set < Integer > s = new HashSet < Integer > ( ) ; Collections . sort ( s ) ; Collections . sort ( result ) ; return result ; }
double MaxElement ( List < double > l ) { return max_element ( l ) ; }
boolean TriplesSumToZero ( int [ ] l ) { for ( int i = 0 ; i < l . length ; i ++ ) { for ( int j = i + 1 ; j < l . length ; j ++ ) { for ( int k = j + 1 ; k < l . length ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) { return true ; } } } } return false ; }
int Fib4 ( int n ) { int [ ] results = new int [ n ] ; for ( int i = 4 ; i <= n ; i ++ ) { results . add ( results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ) ; } return results [ n ] ; }
boolean IsPalindrome ( String text ) { String pr = text . substring ( 0 , text . length ( ) ) ; return pr == text ; }
String RemoveVowels ( String text ) { String result = "" ; String vowels = "aeiou" ; for ( char ch : text . toCharArray ( ) ) { if ( vowels . indexOf ( tolower ( ch ) ) == - 1 ) { result += ch ; } } return result ; }
boolean SameChars ( String s0 , String s1 ) { Set < Character > set0 = new HashSet < Character > ( ) ; for ( char c : s0 ) { set0 . add ( c ) ; } Set < Character > set1 = new HashSet < Character > ( ) ; for ( char c : s1 ) { set1 . add ( c ) ; } return set0 == set1 ; } 
List < Integer > Common ( List < Integer > l1 , List < Integer > l2 ) { Set < Integer > us = new HashSet < Integer > ( ) ; for ( int e1 : l1 ) { for ( int e2 : l2 ) { if ( e1 == e2 ) { us . add ( e1 ) ; } } } List < Integer > ret = new ArrayList < > ( ) ; Collections . sort ( ret ) ; Collections . sort ( ret ) ; return ret ; }
boolean CorrectBracketing ( String brackets ) { int depth = 0 ; for ( char b : brackets ) { if ( b == '(' ) { depth += 1 ; } if ( b == ')' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
String CircularShift ( int x , int shift ) { String xs = Integer . toString ( x ) ; if ( shift > xs . length ( ) ) { return String . valueOf ( xs . last ( ) , xs . last ( ) ) ; } return xs . substring ( xs . length ( ) - shift ) + xs . substring ( 0 , xs . length ( ) - shift ) ; }
int Search ( int [ ] lst ) { HashMap < Integer , Integer > counter = new HashMap < Integer , Integer > ( ) ; for ( int i : lst ) { if ( counter . containsKey ( i ) ) { counter . put ( i , counter . get ( i ) + 1 ) ; } else { counter . put ( i , 1 ) ; } } int ans = - 1 ; for ( int key : counter . keySet ( ) ) { if ( value >= key && key > ans ) { ans = key ; } } return ans ; }
int SmallestChange ( int [ ] arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . length / 2 ; i ++ ) { if ( arr [ i ] != arr [ arr . length - i - 1 ] ) { ans += 1 ; } } return ans ; } 
List < String > TotalMatch ( List < String > lst1 , List < String > lst2 ) { int sum1 = 0 ; for ( String st : lst1 ) { sum1 += st . length ( ) ; } int sum2 = 0 ; for ( String st : lst2 ) { sum2 += st . length ( ) ; } return sum1 > sum2 ? lst2 : lst1 ; }
boolean IsHappy ( String s ) { if ( s . length ( ) < 3 ) { return false ; } for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i ) == s . charAt ( i + 2 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) ) { return false ; } } return true ; } 
List < String > NumericalLetterGrade ( double [ ] grades ) { List < String > letter_grade = new ArrayList < > ( ) ; for ( double gpa : grades ) { if ( gpa == 4.0 ) { letter_grade . add ( "A+" ) ; } else if ( gpa > 3.7 ) { letter_grade . add ( "A" ) ; } else if ( gpa > 3.3 ) { letter_grade . add ( "A-" ) ; } else if ( gpa > 3.0 ) { letter_grade . add ( "B+" ) ; } else if ( gpa > 2.7 ) { letter_grade . add ( "B" ) ; } else if ( gpa > 2.3 ) { letter_grade . add ( "B-" ) ; } else if ( gpa > 2.0 ) { letter_grade . add ( "C+" ) ; } else if ( gpa > 1.7 ) { letter_grade . add ( "C" ) ; } else if ( gpa > 1.3 ) { letter_grade . add ( "C-" ) ; } else if ( gpa > 1.0 ) { letter_grade . add ( "D+" ) ; } else if ( gpa > 0.7 ) { letter_grade . add ( "D" ) ; } else if ( gpa > 0.0 ) { letter_grade . add ( "D-" ) ; } else { letter_grade . add ( "E" ) ; } } return letter_grade ; }
String Solve ( int n ) { String bi_str = new String ( ) ; int sum = 0 ; for ( char c : String . valueOf ( n ) ) { sum += c - '0' ; } while ( sum > 0 ) { bi_str . add ( 0 , String . valueOf ( sum % 2 ) ) ; sum /= 2 ; } return bi_str ; }
String AntiShuffle ( String s ) { String ret = "" ; String current = new String ( ) ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { Collections . sort ( current ) ; if ( ! ret . isEmpty ( ) ) { ret += ' ' ; } ret += current ; current . clear ( ) ; } else { current += s . charAt ( i ) ; } } return ret ; } 
List < Integer > SortArray ( List < Integer > array ) { if ( array . isEmpty ( ) ) { return array ; } if ( ( array . get ( 0 ) + array . get ( array . size ( ) - 1 ) % 2 == 1 ) { sort ( array . begin ( ) , array . end ( ) ) ; } else { sort ( array . begin ( ) , array . end ( ) , greater < > ( ) ) ; } return array ; }
String Encrypt ( String s ) { String ans = "" ; for ( char c : s . toCharArray ( ) ) { if ( isalpha ( c ) ) { ans += ( char ) ( 'a' + ( c - 'a' + 4 ) % 26 ) ; } else { ans += c ; } } return ans ; }
int IsBored ( String s ) { boolean is_start = true ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '.' || s . charAt ( i ) == '?' || s . charAt ( i ) == '!' ) { is_start = true ; } else if ( is_start ) { if ( s . charAt ( i ) == ' ' ) { continue ; } if ( s . substring ( i , 2 ) == "I " ) { sum += 1 ; } is_start = false ; } } return sum ; }
String Encode ( String message ) { String vowels = "aeiouAEIOU" ; String ret = "" ; for ( char c : message . toCharArray ( ) ) { if ( isupper ( c ) ) { c = tolower ( c ) ; if ( vowels . contains ( c ) ) { c = 'a' + ( c - 'a' + 2 ) % 26 ; } } else if ( islower ( c ) ) { c = toupper ( c ) ; if ( vowels . contains ( c ) ) { c = 'A' + ( c - 'A' + 2 ) % 26 ; } } ret += c ; } return ret ; }
int Skjkasdkd ( int [ ] lst ) { int largest = 0 ; for ( int n : lst ) { if ( n > largest ) { boolean prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } int sum = 0 ; String s = Integer . toString ( largest ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum += s . charAt ( i ) - '0' ; } return sum ; }
boolean CheckDictCase ( HashMap < String , String > dict ) { if ( dict . containsKey ( ) ) { return false ; } int is_lower = 0 ; int is_upper = 0 ; for ( String key : dict . keySet ( ) ) { for ( char c : key ) { if ( islower ( c ) ) { is_lower = 1 ; } else if ( isupper ( c ) ) { is_upper = 1 ; } else { return false ; } } } return is_lower + is_upper == 1 ; }
int Multiply ( int a , int b ) { return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ; }
int CountUpper ( String s ) { String u_vowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i += 2 ) { if ( u_vowel . indexOf ( s . charAt ( i ) ) != - 1 ) { count += 1 ; } } return count ; } 
List < String > ByLength ( int [ ] arr ) { HashMap < Integer , String > num_to = new HashMap < > ( ) ; for ( int i = 0 ; i < 101 ; i ++ ) { if ( num_to . containsKey ( i ) ) { num_to . put ( i , num_to . get ( i ) ) ; } else { num_to . put ( i , "Unknown" ) ; } } List < Integer > sorted_arr = new ArrayList < Integer > ( ) ; Collections . sort ( sorted_arr ) ; Collections . sort ( sorted_arr ) ; Collections . sort ( sorted_arr ) ; Collections . reverse ( sorted_arr ) ; List < String > new_arr = new ArrayList < > ( ) ; for ( int n : sorted_arr ) { if ( n >= 1 && n <= 9 ) { new_arr . add ( num_to . get ( n ) ) ; } } return new_arr ; } 
List < Integer > f ( int n ) { int sum = 0 ; int prod = 1 ; List < Integer > result = new ArrayList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) { result . add ( prod ) ; } else { result . add ( sum ) ; } } return result ; } 
List < Integer > EvenOddPalindrome ( int n ) { int even_count = 0 , odd_count = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { String s = String . valueOf ( i ) ; String r_str = String . valueOf ( s . substring ( 0 , s . length ( ) - 1 ) ; if ( s == r_str ) { if ( i % 2 == 1 ) { odd_count += 1 ; } else { even_count += 1 ; } } } return new ArrayList < Integer > ( ) ; }
HashMap < Character , Integer > Histogram ( String test ) { HashMap < Character , Integer > count = new HashMap < > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . length ( ) ; i ++ ) { if ( test . charAt ( i ) != ' ' ) { count . put ( test . charAt ( i ) , count . get ( test . charAt ( i ) ) + 1 ) ; if ( count . get ( test . charAt ( i ) ) > max ) { max = count . get ( test . charAt ( i ) ) ; } } } HashMap < Character , Integer > result = new HashMap < > ( ) ; for ( int key , value : count . entrySet ( ) ) { if ( value == max ) { result . put ( key , value ) ; } } return result ; } 
List < String > ReverseDelete ( String s , String c ) { String ret = s ; for ( char ch : s . toCharArray ( ) ) { if ( c . indexOf ( ch ) == 0 ) { ret += ch ; } } String flag = "False" ; if ( ret == String . valueOf ( ret . last ( ) , ret . last ( ) ) ) { flag = "True" ; } return new ArrayList < String > ( ) ; }
int [ ] SortArray ( int [ ] arr ) { int [ ] bin = new int [ 2 ] ; for ( int i : arr ) { int b = 0 ; int n = Math . abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . add ( b ) ; } for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 1 ; j < arr . length ; j ++ ) { if ( bin [ j ] < bin [ j - 1 ] || ( bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) ) { int temp1 = bin [ j ] ; bin [ j ] = bin [ j - 1 ] ; arr [ j - 1 ] = temp2 ; arr [ j ] = arr [ j - 1 ] ; arr [ j - 1 ] = temp1 ; } } } return arr ; }
String GetClosestVowel ( String word ) { String vowels = "AEIOUaeiou" ; for ( int i = word . length ( ) - 2 ; i > 0 ; i -- ) { if ( vowels . indexOf ( word . charAt ( i ) ) != string . npos && vowels . indexOf ( word . charAt ( i + 1 ) ) == string . npos && vowels . indexOf ( word . charAt ( i - 1 ) ) == string . npos ) { return String . valueOf ( 1 , word . charAt ( i ) ) ; } } return "" ; }
String MatchParens ( String lst [ ] ) { String [ ] strings = { lst [ 0 ] + lst [ 1 ] , lst [ 1 ] + lst [ 0 ] } ; for ( String l : strings ) { int count = 0 ; for ( char c : l ) { if ( c == '(' ) { count += 1 ; } if ( c == ')' ) { count -= 1 ; } if ( count < 0 ) { break ; } } if ( count == 0 ) { return "Yes" ; } } return "No" ; } 
List < Integer > Maximum ( List < Integer > arr , int k ) { if ( k == 0 ) { return new ArrayList < Integer > ( ) ; } Arrays . sort ( arr ) ; return new ArrayList < Integer > ( arr . end ( ) - k , arr . end ( ) ) ; }
boolean ValidDate ( String date ) { if ( date . length ( ) != 10 ) { return false ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 || i == 5 ) { if ( date . charAt ( i ) != '-' ) { return false ; } } else if ( ! isdigit ( date . charAt ( i ) ) ) { return false ; } } int month = Integer . valueOf ( date . substring ( 0 , 2 ) ) ; int day = Integer . valueOf ( date . substring ( 3 , 2 ) ) ; int year = Integer . valueOf ( date . substring ( 6 , 4 ) ) ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) { return false ; } if ( day == 30 && month == 2 ) { return false ; } return true ; } 
List < String > SplitWords ( String txt ) { String current = "" ; List < String > result = new ArrayList < > ( ) ; if ( txt . indexOf ( ' ' ) != String . npos ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == ' ' ) { if ( current . length ( ) > 0 ) { result . add ( current ) ; } current . clear ( ) ; } else { current += txt . charAt ( i ) ; } } return result ; } if ( txt . indexOf ( ',' ) != String . npos ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == ',' ) { if ( current . length ( ) > 0 ) { result . add ( current ) ; } current . clear ( ) ; } else { current += txt . charAt ( i ) ; } } return result ; } int num = 0 ; for ( char c : txt ) { if ( islower ( c ) && c % 2 == 0 ) { num += 1 ; } } return new ArrayList < String > ( ) ; } 
List < Integer > Tri ( int n ) { if ( n == 0 ) { return new ArrayList < Integer > ( ) ; } List < Integer > tris = new ArrayList < Integer > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { tris . add ( i / 2 + 1 ) ; } else { tris . add ( tris . get ( i - 1 ) + tris . get ( i - 2 ) + ( i + 3 ) / 2 ) ; } } return tris ; }
boolean CheckIfLastCharIsALetter ( String txt ) { if ( txt . isEmpty ( ) ) { return false ; } return isalpha ( txt . charAt ( txt . length ( ) - 1 ) ) && ( txt . length ( ) == 1 || ! isalpha ( txt . charAt ( txt . length ( ) - 2 ) ) ) ; }
int [ ] OrderByPoints ( int [ ] nums ) { int [ ] result = new int [ nums . length ] ; for ( int num : nums ) { String w = Integer . toString ( Math . abs ( num ) ) ; int sum = 0 ; for ( char c : w ) { sum += c - '0' ; } if ( num < 0 ) { sum -= 2 * ( w [ 0 ] - '0' ) ; } result . add ( sum ) ; } for ( int i = 0 ; i < nums . length ; i ++ ) { for ( int j = 1 ; j < nums . length ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { int temp1 = result [ j ] ; int temp2 = nums [ j - 1 ] ; nums [ j ] = temp2 ; nums [ j - 1 ] = temp1 ; } } } return nums ; } 
List < String > Bf ( String planet1 , String planet2 ) { List < String > planets = new ArrayList < String > ( ) ; planets . add ( "Mercury" ) ; "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" ) ; Integer it1 = find ( planets . begin ( ) , planets . end ( ) , planet1 ) ; int idx1 = it1 == planets . end ( ) ? - 1 : it1 - planets . begin ( ) ; Integer it2 = find ( planets . begin ( ) , planets . end ( ) , planet2 ) ; int idx2 = it2 == planets . end ( ) ? - 1 : it2 - planets . begin ( ) ; if ( idx1 == - 1 || idx2 == - 1 || idx1 == idx2 ) { return new ArrayList < String > ( ) ; } return idx1 > idx2 ? List < String > ( planets . begin ( ) + idx2 + 1 , planets . begin ( ) + idx1 ) : List < String > ( planets . begin ( ) + idx2 ) ; } 
List < String > SortedListSum ( String [ ] lst ) { List < String > result = new ArrayList < > ( ) ; for ( String i : lst ) { if ( i . length ( ) % 2 == 0 ) { result . add ( i ) ; } } Collections . sort ( result ) ; return result ; }
boolean CycpatternCheck ( String a , String b ) { for ( int i = 0 ; i < b . length ( ) ; i ++ ) { String rotate = b . substring ( i ) + b . substring ( 0 , i ) ; if ( a . contains ( rotate ) ) { return true ; } } return false ; }
int [ ] EvenOddCount ( int num ) { int even_count = 0 , odd_count = 0 ; for ( char i : Integer . toString ( Math . abs ( num ) ) ) { if ( i % 2 == 0 ) { even_count += 1 ; } else { odd_count += 1 ; } } return new int [ ] { even_count , odd_count } ; }
String FindMax ( String words ) { String max = null ; int max_length = 0 ; for ( String word : words ) { List < Character > unique = new ArrayList < Character > ( ) ; for ( char w : word . toCharArray ( ) ) { if ( find ( unique . begin ( ) , unique . end ( ) , w ) == unique . end ( ) ) { unique . add ( w ) ; } } if ( unique . size ( ) > max_length || ( unique . size ( ) == max_length && word < max ) ) { max = word ; max_length = unique . size ( ) ; } } return max ; }
String Solve ( String s ) { boolean no_letter = true ; String result = "" ; for ( char ch : s . toCharArray ( ) ) { if ( isupper ( ch ) ) { ch = tolower ( ch ) ; no_letter = false ; } else if ( islower ( ch ) ) { ch = toupper ( ch ) ; no_letter = false ; } result += ch ; } if ( no_letter ) { return String . valueOf ( s . substring ( 0 , s . length ( ) ) ; } else { return result ; } }
int MostFrequent ( int [ ] arr , int n ) { HashMap < Integer , Integer > hp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) { hp . put ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . put ( arr [ i ] , 1 ) ; } } int max_count = 0 , res = - 1 ; for ( Map . Entry < Integer , Integer > entry : hp . entrySet ( ) ) { if ( max_count < entry . getValue ( ) ) { res = entry . getKey ( ) ; max_count = entry . getValue ( ) ; } } return res ; }
int Find ( int [ ] a , int [ ] b , int k , int n1 , int n2 ) { HashSet < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { s . add ( b [ i ] ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( s . contains ( a [ i ] ) ) { missing ++ ; } if ( missing == k ) { return a [ i ] ; } } return - 1 ; }
int SolveQuery ( int start , int end , int arr [ ] ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = start ; i <= end ; i ++ ) { if ( mp . containsKey ( arr [ i ] ) ) { mp . put ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) ; } else { mp . put ( arr [ i ] , 1 ) ; } } int count = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( key == value ) { count ++ ; } } return count ; }
int Segregate ( int [ ] arr , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { int t = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = t ; j ++ ; } } return j ; }
int CountTriplets ( int [ ] a , int n ) { Set < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( a [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n - 1 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( s . contains ( xr ) && xr != a [ i ] && xr != a [ j ] ) { count ++ ; } } } return count / 3 ; }
int LeastFrequent ( int [ ] arr , int n ) { HashMap < Integer , Integer > hp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) { hp . put ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . put ( arr [ i ] , 1 ) ; } } int min_count = n + 1 , res = - 1 ; for ( Map . Entry < Integer , Integer > entry : hp . entrySet ( ) ) { if ( min_count >= entry . getValue ( ) ) { res = entry . getKey ( ) ; min_count = entry . getValue ( ) ; } } return res ; }
int FindPermutations ( int [ ] arr ) { int cnt = 0 ; int max_ind = - 1 , min_ind = 10000000 ; int n = arr . length ; HashMap < Integer , Integer > index_of = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( index_of . containsKey ( arr [ i ] ) ) { index_of . put ( arr [ i ] , index_of . get ( arr [ i ] ) + 1 ) ; } else { index_of . put ( arr [ i ] , 1 ) ; } for ( int i = 1 ; i <= n ; i ++ ) { max_ind = Math . max ( max_ind , index_of . get ( i ) ) ; min_ind = Math . min ( min_ind , index_of . get ( i ) ) ; if ( max_ind - min_ind + 1 == i ) { cnt ++ ; } } return cnt ; }
int FormQuadruplets ( List < Integer > arr , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; Arrays . sort ( arr ) ; reverse ( arr ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr . get ( i + 2 ) ; } return ans ; }
String LexicographicallyMaximum ( String s , int n ) { HashMap < Character , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . containsKey ( s [ i ] ) ) { m . put ( s [ i ] , m . get ( s [ i ] ) + 1 ) ; } else { m . put ( s [ i ] , 1 ) ; } } List < Character > v = new ArrayList < > ( ) ; for ( char i = 'a' ; i < 'a' + min ( n , 25 ) ; ++ i ) { if ( m . containsKey ( i ) ) { v . add ( i ) ; } } int j = v . size ( ) - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( s . charAt ( i ) >= 'a' + min ( n , 25 ) || ( m . containsKey ( s [ i ] ) && m . get ( s [ i ] ) > 1 ) ) { if ( v . get ( j ) < s . charAt ( i ) ) { continue ; } m . put ( s [ i ] , v . get ( j ) + s . substring ( i + 1 ) ; j -- ; } if ( j < 0 ) { break ; } } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) { break ; } if ( s . charAt ( i ) >= 'a' + min ( n , 25 ) || ( m . containsKey ( s [ i ] ) && m . get ( s [ i ] ) > 1 ) ) { m . put ( s [ i ] , v . get ( l ) + s . substring ( i + 1 ) ; l ++ ; } } return s ; }
int NoOfValidKbers ( int k , List < Integer > arr ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; while ( k != 0 ) { s . add ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { int no = arr . get ( i ) ; boolean flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( s . contains ( digit ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag ) { count ++ ; } } return count ; }
int DelCost ( String s , int [ ] cost ) { int ans = 0 ; Map < Character , Integer > for_max = new HashMap < Character , Integer > ( ) ; HashMap < Character , Integer > for_tot = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( for_max . containsKey ( s [ i ] ) ) { for_max . put ( s [ i ] , cost [ i ] ) ; } else { for_max . put ( s [ i ] , Math . max ( cost [ i ] , for_max . get ( s [ i ] ) ) ; } if ( for_tot . containsKey ( s [ i ] ) ) { for_tot . put ( s [ i ] , cost [ i ] ) ; } else { for_tot . put ( s [ i ] , for_tot . get ( s [ i ] ) + cost [ i ] ) ; } } for ( Map . Entry < Character , Integer > i : for_max . entrySet ( ) ) { ans += for_tot . get ( i . getKey ( ) ) - i . getValue ( ) ; } return ans ; }
String [ ] ReplaceDuplicates ( String [ ] names ) { HashMap < String , Integer > hash = new HashMap < > ( ) ; for ( int i = 0 ; i < names . length ; i ++ ) { if ( hash . get ( names [ i ] ) == null ) { hash . put ( names [ i ] , 1 ) ; } else { int count = hash . get ( names [ i ] ) ; hash . put ( names [ i ] , count + 1 ) ; } } return names ; } 
List < Integer > minmaxNumbers ( int [ ] [ ] matrix , List < Integer > res ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < matrix . length ; i ++ ) { int min_r = Integer . MAX_VALUE ; for ( int j = 0 ; j < matrix [ i ] . length ; j ++ ) { min_r = Math . min ( min_r , matrix [ i ] [ j ] ) ; } s . add ( min_r ) ; } for ( int j = 0 ; j < matrix [ 0 ] . length ; j ++ ) { int max_c = Integer . MIN_VALUE ; for ( int i = 0 ; i < matrix . length ; i ++ ) { max_c = Math . max ( max_c , matrix [ i ] [ j ] ) ; } if ( s . contains ( max_c ) ) { res . add ( max_c ) ; } } return res ; }
int LengthOfLongestAp ( int [ ] a , int n ) { HashMap < Integer , Integer > dp = new HashMap < > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = i + 1 ; j < n ; ++ j ) { int d = a [ j ] - a [ i ] ; if ( dp . containsKey ( d ) ) { if ( dp . get ( d ) . containsKey ( i ) ) { dp . put ( d , dp . get ( d ) . get ( i ) + 1 ) ; } else { dp . put ( d , 2 ) ; } } else { dp . put ( d , new HashMap < Integer , Integer > ( ) ) ; dp . put ( d , 2 ) ; } res = Math . max ( res , dp . get ( d ) [ j ] ) ; } } return res ; }
char FindKthChar ( int n , int k ) { String prev = "A" ; String cur ; if ( n == 1 ) { return 'A' ; } for ( int j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . length ( ) ; i ++ ) { if ( prev . charAt ( i ) == 'A' ) { prev . charAt ( i ) = 'B' ; } else { prev . charAt ( i ) = 'A' ; } } Collections . reverse ( prev ) ; cur += prev ; prev = cur ; } return cur . charAt ( k - 1 ) ; }
char FindKthLargest ( String s , int k ) { String tmp = s ; Arrays . sort ( tmp ) ; reverse ( tmp ) ; return tmp . charAt ( k - 1 ) ; }
int SubArraylen ( int [ ] arr , int n , int k ) { Map < Integer , Integer > mp = new HashMap < > ( ) ; mp . put ( arr [ 0 ] , 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp . put ( arr [ i ] , i ) ; } int length = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) { continue ; } else { int x = arr [ i ] - k ; if ( x == 0 ) { length = Math . min ( length , i ) ; } if ( mp . get ( x ) == null ) { continue ; } else { length = Math . min ( length , i - mp . getOrDefault ( x , 0 ) ) ; } } } return length ; }
int FindMaxLen ( int [ ] a , int k ) { int n = a . length ; Arrays . sort ( a ) ; boolean [ ] vis = new boolean [ n ] ; Arrays . fill ( vis , false ) ; Map < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( ! vis [ i ] ) { int check = a [ i ] * k ; if ( mp . containsKey ( check ) ) { c ++ ; vis [ mp . get ( check ) ] = true ; } } } return n - c ; } 
List < Integer > MinDistancePoints ( int [ ] a , int k , int n ) { HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; Queue < Integer > q = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . containsKey ( a [ i ] ) ) { m . put ( a [ i ] , 1 ) ; q . add ( a [ i ] ) ; } else { m . put ( a [ i ] , 0 ) ; } } List < Integer > ans = new ArrayList < Integer > ( ) ; while ( k > 0 ) { int x = q . peek ( ) ; q . poll ( ) ; if ( m . get ( x - 1 ) == m . size ( ) && k > 0 ) { m . put ( x - 1 , 1 ) ; q . add ( x - 1 ) ; ans . add ( x - 1 ) ; k -- ; } if ( m . get ( x + 1 ) && k > 0 ) { m . put ( x + 1 , 1 ) ; q . add ( x + 1 ) ; ans . add ( x + 1 ) ; k -- ; } } return ans ; }
boolean IsValidLen ( String s , int length , int k ) { int n = s . length ( ) ; Map < Character , Integer > mp = new HashMap < > ( ) ; int right = 0 ; while ( right < length ) { if ( mp . containsKey ( s [ right ] ) ) { mp . put ( s [ right ] , mp . get ( s [ right ] ) + 1 ) ; } else { mp . put ( s [ right ] , 1 ) ; } right ++ ; } if ( mp . size ( ) <= k ) { return true ; } while ( right < n ) { if ( mp . containsKey ( s [ right ] ) ) { mp . put ( s [ right ] , mp . get ( s [ right ] ) + 1 ) ; } else { mp . put ( s [ right ] , 1 ) ; } if ( mp . containsKey ( s [ right - length ] ) ) { mp . put ( s [ right - length ] , mp . get ( s [ right - length ] ) - 1 ) ; } if ( mp . get ( s [ right - length ] ) == 0 ) { mp . remove ( s [ right - length ] ) ; } if ( mp . size ( ) <= k ) { return true ; } right ++ ; } return mp . size ( ) <= k ; }
int Partition ( int [ ] arr , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; int temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; } } int temp1 = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ high ] ; arr [ high ] = temp2 ; return i + 1 ; }
int StrScore ( List < String > strs , String s , int n ) { HashMap < String , Integer > m = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( m . containsKey ( strs [ i ] ) ) { m . put ( strs [ i ] , m . get ( strs [ i ] ) + 1 ) ; } else { m . put ( strs [ i ] , 1 ) ; } } if ( m . get ( s ) == null ) { return 0 ; } int score = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { score += s . charAt ( i ) - 'a' + 1 ; } score = score * m . get ( s ) ; return score ; } 
List < Integer > CountEle ( List < Integer > s , List < Integer > a , int n ) { Map < Integer , Boolean > mp = new HashMap < Integer , Boolean > ( ) ; List < Integer > ans = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int num = a . get ( i ) ; if ( mp . get ( num ) == null ) { ans . add ( 0 ) ; } else { int cnt = 0 ; while ( s . get ( 0 ) != num ) { mp . put ( s . get ( 0 ) , true ) ; s . remove ( s . begin ( ) ) ; cnt ++ ; } s . remove ( s . begin ( ) ) ; cnt ++ ; ans . add ( cnt ) ; } } return ans ; }
int MaxDistinctChar ( String s , int n , int k ) { HashMap < Character , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( s . charAt ( i ) ) ) { freq . put ( s . charAt ( i ) , freq . get ( s . charAt ( i ) ) + 1 ) ; } else { freq . put ( s . charAt ( i ) , 1 ) ; } } List < Integer > v = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) - 1 , k ) ; v . set ( i , v . get ( i ) - mn ) ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) , k ) ; v . set ( i , mn ) ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . get ( i ) == 1 ) { res ++ ; } } return res ; }
int FindKth ( List < Integer > arr , int n , int k ) { HashSet < Integer > missing = new HashSet < > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . add ( arr . get ( i ) ) ; } int max_m = Arrays . stream ( arr ) . max ( ) . getAsInt ( ) ; int min_m = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; for ( int i = min_m + 1 ; i < max_m ; i ++ ) { if ( ! missing . contains ( i ) ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; }
boolean AlmostSort ( int [ ] a , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { int temp = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = temp ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { return false ; } } return true ; }
int MaximumSum ( String s , int n , int k ) { int sum = 0 ; List < Integer > freq = new ArrayList < Integer > ( 256 ) ; for ( int i = 0 ; i < n ; i ++ ) { freq . add ( s . charAt ( i ) ) ; } Arrays . sort ( freq ) ; Collections . sort ( freq ) ; Collections . reverse ( freq ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq . get ( i ) ) { sum += freq . get ( i ) * freq . get ( i ) ; k -= freq . get ( i ) ; } else { sum += freq . get ( i ) * k ; break ; } } return sum ; }
int FindMinOperations ( int arr [ ] , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int j = i ; j < n ; j += k ) { if ( freq . containsKey ( arr [ j ] ) ) { freq . put ( arr [ j ] , freq . get ( arr [ j ] ) + 1 ) ; } else { freq . put ( arr [ j ] , 1 ) ; } } int max1 = 0 , num = 0 ; for ( int key , value : freq . entrySet ( ) ) { if ( value > max1 ) { max1 = value ; num = key ; } } for ( int [ ] [ ] row : freq . entrySet ( ) ) { if ( key != num ) { operations += value ; } } } return operations ; } 
List < String > SubString ( String s , int n ) { List < String > v = new ArrayList < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int length = 1 ; length <= n - i ; length ++ ) { String find = s . substring ( i , length ) ; v . add ( find ) ; } } return v ; }
boolean CheckUniqueFrequency ( int arr [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( arr [ i ] ) ) { freq . put ( arr [ i ] , freq . get ( arr [ i ] ) + 1 ) ; } else { freq . put ( arr [ i ] , 1 ) ; } } HashSet < Integer > unique_freq = new HashSet < Integer > ( ) ; for ( int key , value ) : freq . entrySet ( ) ) { if ( unique_freq . contains ( value ) ) { return false ; } else { unique_freq . add ( value ) ; } } return true ; }
int MinCost ( String str1 , String str2 , int n ) { int cost = 0 ; String tmp = str1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp . charAt ( i ) != str2 . charAt ( i ) ) { if ( i < n - 1 && tmp . charAt ( i + 1 ) != str2 . charAt ( i + 1 ) ) { char t = tmp . charAt ( i ) ; tmp . charAt ( i ) = tmp . charAt ( i + 1 ) ; tmp . charAt ( i + 1 ) = t ; cost ++ ; } else { cost ++ ; } } } return cost ; }
boolean IsValidNum ( String x ) { Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( mp . get ( x . charAt ( i ) - '0' ) == null ) { return false ; } else if ( x . charAt ( i ) - '0' > 5 ) { return false ; } else { mp . put ( x . charAt ( i ) - '0' , 1 ) ; } } return true ; }
int MinimizeDiff ( int [ ] arr , int n , int k ) { int max = Collections . max ( Arrays . asList ( arr ) ) ; int min = Collections . min ( Arrays . asList ( arr ) ) ; if ( max - min <= k ) { return max - min ; } int avg = ( max + min ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = Collections . max ( Arrays . asList ( arr ) ) ; min = Collections . min ( Arrays . asList ( arr ) ) ; return max - min ; }
int GetMinCost ( List < Integer > arr , int n ) { int min_ele = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; return min_ele * ( n - 1 ) ; }
boolean Possibility ( HashMap < Integer , Integer > m , int length , String s ) { int count_odd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) - '0' ) ) { count_odd ++ ; } if ( count_odd > 1 ) { return false ; } } return true ; }
int MinimumCostOfBreaking ( int [ ] x , int [ ] y , int m , int n ) { int res = 0 ; Arrays . sort ( x ) ; Arrays . sort ( y ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += x [ i ++ ] ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y [ j ++ ] ; } res += total * hzntl ; return res ; }
int FindMaximumScore ( int [ ] a , int n ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( a [ i ] ) ) { freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; } else { freq . put ( a [ i ] , 1 ) ; } } int [ ] dp = new int [ 2 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = freq [ 1 ] ; for ( int i = 2 ; i < dp . size ( ) ; i ++ ) { dp [ i ] = Math . max ( dp . get ( i - 1 ) , dp . get ( i - 2 ) + freq . get ( i ) * i ) ; } return dp . get ( dp . size ( ) - 1 ) ; }
int CountWays ( String s , String t , int k , int mod ) { int n = s . length ( ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { String p = s . substring ( i , n - i ) + s . substring ( 0 , i ) ; if ( p == t ) { a ++ ; } else { b ++ ; } } int [ ] dp1 = new int [ k + 1 ] ; int [ ] dp2 = new int [ k + 1 ] ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; } return dp1 [ k ] ; }
int FindSubarraySum ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > prev_sum = new HashMap < Integer , Integer > ( ) ; int res = 0 ; int curr_sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ] ; if ( curr_sum == k ) { res ++ ; } if ( prev_sum . containsKey ( curr_sum - k ) ) { res += prev_sum . get ( curr_sum - k ) ; } prev_sum . put ( curr_sum , curr_sum + 1 ) ; } return res ; }
int MaximumOccurrence ( String s ) { int n = s . length ( ) ; HashMap < String , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { String temp = s . charAt ( i ) ; temp += s . charAt ( i ) ; if ( freq . containsKey ( temp ) ) { freq . put ( temp , freq . get ( temp ) + 1 ) ; } else { freq . put ( temp , 1 ) ; } } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { String temp = s . charAt ( i ) ; temp += s . charAt ( j ) ; freq . put ( temp , 1 ) ; } } int answer = Integer . MIN_VALUE ; for ( Map . Entry < String , Integer > entry : freq . entrySet ( ) ) { answer = Math . max ( answer , entry . getValue ( ) ) ; } return answer ; }
int CountCharacters ( List < String > strings , String chars ) { int res = 0 ; HashMap < Character , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < chars . length ( ) ; i ++ ) { if ( freq . containsKey ( chars . charAt ( i ) ) ) { freq . put ( chars . charAt ( i ) , freq . get ( chars . charAt ( i ) ) + 1 ) ; } else { freq . put ( chars . charAt ( i ) , 1 ) ; } } for ( String st : strings ) { boolean flag = true ; for ( char c : st ) { if ( freq . get ( c ) == freq . get ( end ( ) ) { flag = false ; break ; } } if ( flag ) { res += st . length ( ) ; } } return res ; }
int DistinctSubstring ( String p , String q , int k , int n ) { HashSet < String > ss = new HashSet < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int sum = 0 ; String s ; for ( int j = i ; j < n ; ++ j ) { int pos = p . charAt ( j ) - 'a' ; sum += q . charAt ( pos ) - '0' ; s += p . charAt ( j ) ; if ( sum <= k ) { ss . add ( s ) ; } else { break ; } } } return ss . size ( ) ; }
int UniqueMorseRep ( String [ ] arr ) { String [ ] morseCode = { ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , "...." , ".." , ".---" , "-.-" , ".-.." , "--" , "-." , "---" , ".--." , ".-." , "..." , "-" , "..-" , "...-" , ".--" , "-..-" , "-.--" , "--.." } ; HashSet < String > st = new HashSet < > ( ) ; int n = arr . length ; for ( int i = 0 ; i < n ; i ++ ) { String temp ; int m = arr [ i ] . length ( ) ; for ( int j = 0 ; j < m ; j ++ ) { temp += morseCode [ arr [ i ] . charAt ( j ) - 'a' ] ; } st . add ( temp ) ; } return st . size ( ) ; }
int CountSubstrings ( String st , int k ) { int n = st . length ( ) ; int answer = 0 ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( map . containsKey ( st [ i ] ) ) { map . put ( st [ i ] , 1 ) ; } else { map . put ( st [ i ] , ++ answer ) ; } } if ( map . size ( ) == k ) { answer ++ ; } for ( int i = k ; i < n ; i ++ ) { if ( map . containsKey ( st [ i ] ) ) { map . put ( st [ i ] , map . get ( st [ i ] ) + 1 ) ; } else { map . put ( st [ i ] , 1 ) ; } map . put ( st [ i - k ] , 1 ) ; if ( map . get ( st [ i - k ] ) == 0 ) { map . remove ( st [ i - k ] ) ; } if ( map . size ( ) == k ) { answer ++ ; } } return answer ; }
boolean CanConstruct ( String s , int k ) { HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; int i = 0 , j = 0 , p = 0 ; if ( s . length ( ) == k ) { return true ; } for ( i = 0 ; i < s . length ( ) ; i ++ ) { if ( m . containsKey ( s . charAt ( i ) ) ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; } else { for ( Map . Entry < Integer , Integer > h : m . entrySet ( ) ) { if ( h . getValue ( ) % 2 != 0 ) { p = p + 1 ; } } } if ( k < p ) { return false ; } return true ; }
boolean EqualIgnoreCase ( String str1 , String str2 ) { Transform str1 = str1 . toLowerCase ( ) ; Transform str2 = str2 . toLowerCase ( ) ; return str1 == str2 ; }
int FindLongestSub ( String bin ) { int n = bin . length ( ) ; int i ; int sum = 0 ; HashMap < Integer , Integer > prev_sum = new HashMap < Integer , Integer > ( ) ; int max_len = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin . charAt ( i ) == '1' ) { sum ++ ; } else { sum -- ; } if ( sum > 0 ) { max_len = i + 1 ; } else if ( sum <= 0 ) { if ( prev_sum . containsKey ( sum - 1 ) ) { int curr_len = i - prev_sum . get ( sum - 1 ) ; max_len = Math . max ( max_len , curr_len ) ; } } if ( prev_sum . containsKey ( sum ) ) { prev_sum . put ( sum , i ) ; } } return max_len ; }
boolean HasAllCodes ( String s , int k ) { Set < String > us = new HashSet < > ( ) ; for ( int i = 0 ; i + k <= s . length ( ) ; i ++ ) { us . add ( s . substring ( i , i + k ) ) ; } return us . size ( ) == 1 << k ; }
boolean CheckPalin ( String word ) { int n = word . length ( ) ; word = word . toLowerCase ( ) ; for ( int i = 0 ; i < n ; i ++ , n -- ) { if ( word . charAt ( i ) != word . charAt ( n - 1 ) ) { return false ; } } return true ; }
String Convert ( String st ) { String w = "" , z = "" ; st = st . toLowerCase ( ) ; st += " " ; for ( int i = 0 ; i < st . length ( ) ; i ++ ) { char ch = st . charAt ( i ) ; if ( ch != ' ' ) { w += ch ; } else { z += ( char ) ( Math . tolower ( w . charAt ( 0 ) ) ) + w . substring ( 1 ) + " " ; w = "" ; } } return z ; }
int MaxLines ( int n , int [ ] x1 , int [ ] y1 , int [ ] x2 , int [ ] y2 ) { HashSet < Double > s = new HashSet < Double > ( ) ; double slope ; for ( int i = 0 ; i < n ; ++ i ) { if ( x1 [ i ] == x2 [ i ] ) { slope = Integer . MAX_VALUE ; } else { slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; } s . add ( slope ) ; } return s . size ( ) ; }
HashMap < Integer , Integer > PrimeFactor ( int n ) { HashMap < Integer , Integer > primef = new HashMap < > ( ) ; while ( n % 2 == 0 ) { if ( primef . containsKey ( 2 ) ) { primef . put ( 2 , primef . get ( 2 ) + 1 ) ; } else { primef . put ( 2 , 1 ) ; } n /= 2 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { if ( primef . containsKey ( i ) ) { primef . put ( i , primef . get ( i ) + 1 ) ; } else { primef . put ( i , 1 ) ; } n /= i ; } } if ( n > 2 ) { primef . put ( n , 1 ) ; } return primef ; }
String IsDivisibleByDivisor ( int s , int d ) { s %= d ; Set < Integer > hash_map = new HashSet < Integer > ( ) ; hash_map . add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hash_map . contains ( s ) ) { if ( s == 0 ) { return "Yes" ; } return "No" ; } else { hash_map . add ( s ) ; } } return "Yes" ; }
boolean OddSum ( int [ ] a , int n , int k ) { Set < Integer > odd = new HashSet < Integer > ( ) ; Set < Integer > even = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { even . add ( a [ i ] ) ; } else { odd . add ( a [ i ] ) ; } } if ( odd . size ( ) >= k ) { return true ; } boolean flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= even . size ( ) ) { return true ; } } return flag ; }
int DayOfYear ( String date ) { int [ ] days = { 31 , 28 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 , 31 , 30 , 31 } ; int year = Integer . valueOf ( date . substring ( 0 , 4 ) ) ; int month = Integer . valueOf ( date . substring ( 5 , 2 ) ) ; int day = Integer . valueOf ( date . substring ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days [ month - 2 ] ; -- month ; } return day ; }
boolean IsPerfectSquare ( int [ ] arr , int n ) { HashMap < Integer , Integer > umap = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( umap . containsKey ( arr [ i ] ) ) { umap . put ( arr [ i ] , umap . get ( arr [ i ] ) + 1 ) ; } else { umap . put ( arr [ i ] , 1 ) ; } } for ( Map . Entry < Integer , Integer > itr : umap . entrySet ( ) ) { if ( itr . getValue ( ) % 2 == 1 ) { return false ; } } return true ; }
int MinMoves ( int n ) { String s = String . valueOf ( n ) ; int ans = Integer . MAX_VALUE ; int length = s . length ( ) ; for ( int i = 0 ; i < length ; ++ i ) { for ( int j = 0 ; j < length ; ++ j ) { if ( i == j ) { continue ; } String t = s ; int cur = 0 ; for ( int k = i ; k < length - 1 ; ++ k ) { temp ( t . charAt ( k ) , t . charAt ( k + 1 ) ) ; ++ cur ; } for ( int k = j - ( j > i ) ; k < length - 2 ; ++ k ) { temp ( t . charAt ( k ) , t . charAt ( k + 1 ) ) ; ++ cur ; } int pos = - 1 ; for ( int k = 0 ; k < length ; ++ k ) { if ( t . charAt ( k ) != '0' ) { pos = k ; break ; } } for ( int k = pos ; k > 0 ; -- k ) { temp ( t . charAt ( k ) , t . charAt ( k - 1 ) ) ; ++ cur ; } int nn = Integer . valueOf ( t ) ; if ( nn % 25 == 0 ) { ans = Math . min ( ans , cur ) ; } } } if ( ans == Integer . MAX_VALUE ) { return - 1 ; } return ans ; }
int MinimumOperations ( int [ ] a , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( mp . containsKey ( a [ i ] ) ) { mp . put ( a [ i ] , mp . get ( a [ i ] ) + 1 ) ; } else { mp . put ( a [ i ] , 1 ) ; } } int count = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) > 1 ) { count += entry . getValue ( ) - 1 ; } } return count ; }
int KaprekarRec ( int n , int prev ) { if ( n == 0 ) { return 0 ; } prev = n ; int [ ] digits = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } Arrays . sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } Arrays . sort ( digits ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } int diff = Math . abs ( asc - desc ) ; if ( diff == prev ) { return diff ; } return KaprekarRec ( diff , prev ) ; }
String FractionToDecimal ( int numr , int denr ) { String res = "" ; Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; int rem = numr % denr ; while ( rem != 0 && mp . containsKey ( rem ) ) { mp . put ( rem , res . length ( ) ) ; rem = rem * 10 ; int res_part = rem / denr ; res += Integer . toString ( res_part ) ; rem = rem % denr ; } if ( rem == 0 ) { return "" ; } if ( mp . containsKey ( rem ) ) { return res . substring ( mp . get ( rem ) ) ; } return "" ; }
boolean IsFancy ( String num ) { HashMap < Character , Character > fp = new HashMap < > ( ) ; fp . put ( '0' , '0' ) ; fp . put ( '1' , '1' ) ; fp . put ( '6' , '9' ) ; fp . put ( '8' , '8' ) ; fp . put ( '9' , '6' ) ; int n = num . length ( ) ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( fp . get ( num . charAt ( l ) ) == null || fp . get ( num . charAt ( l ) ) != num . charAt ( r ) ) { return false ; } l ++ ; r -- ; } return true ; }
double DistinctOddRatio ( int [ ] numbers ) { Set < Integer > distinct_numbers = new HashSet < Integer > ( ) ; Collections . sort ( distinct_numbers ) ; int distinct_count = ranges :: distance ( distinct_numbers ) ; int distinct_odd_count = ranges :: distance ( distinct_numbers , views :: filter ( function ( int n ) { return n % 2 == 1 ; } ) ) ; return ( double ) distinct_odd_count / distinct_count ; }
int CompareSum ( List < Integer > numbers , List < String > words ) { int int_sum = reduce ( numbers . get ( 0 ) , numbers . get ( end ) ) ; String tmp = words . get ( 0 ) ; for ( String w : tmp ) { return w . length ( ) ; } int word_length_sum = reduce ( tmp . get ( 0 ) , tmp . get ( end ) ) ; if ( int_sum < word_length_sum ) { return - 1 ; } if ( int_sum > word_length_sum ) { return 1 ; } return 0 ; }
boolean AllLongerThan ( List < String > short_words , List < String > long_words ) { int max_of_short = ranges . max ( short_words ) ; int min_of_long = ranges . min ( long_words , views :: transform ( new String [ ] ( ) ) ) ; return min_of_long > max_of_short ; }
int CompareOddEvenRange ( int [ ] numbers ) { int range_odd = ranges :: max ( numbers | views :: filter ( [ ] ( int n ) { return n % 2 == 1 ; } ) ) - ranges :: min ( numbers | views :: filter ( [ ] ( int n ) { return n % 2 == 1 ; } ) ) ; int range_even = ranges :: max ( numbers | views :: filter ( [ ] ( int n ) { return n % 2 == 0 ; } ) ) - ranges :: min ( numbers | views :: filter ( [ ] ( int n ) { return n % 2 == 0 ; } ) ) ; if ( range_odd < range_even ) { return - 1 ; } if ( range_odd > range_even ) { return 1 ; } return 0 ; }
double AverageDistinctLength ( List < String > words ) { Set < String > s = new HashSet < > ( ) ; Collections . addAll ( s , words ) ; List < String > distinct_words = new ArrayList < > ( words ) ; Collections . sort ( distinct_words ) ; HashMap < String , Integer > distinct_size = new HashMap < > ( ) ; for ( String w : distinct_words ) { if ( w . length ( ) > 0 ) { distinct_size . put ( w . length ( ) , w . length ( ) ) ; } else { distinct_size . put ( w . length ( ) , 0 ) ; } } double average_len = ! distinct_size . isEmpty ( ) ? ( double ) reduce ( distinct_size , 0 ) / ranges :: distance ( distinct_size ) : 0 ; return average_len ; }
int WithDrawBalance ( int start , List < Integer > withdrawals ) { int end = accumulate ( withdrawals . begin ( ) , withdrawals . end ( ) , start , new int [ ] { balance , next_withdrawal } ) ; return end ; }
String FirstShortAndStartsWithO ( String [ ] words ) { View matched_view = words | views :: filter ( [ ] ( String w ) { return w . length ( ) < 5 ; } ) | views :: filter ( [ ] ( String w ) { return w . charAt ( 0 ) == 'o' ; } ) | views :: take ( 1 ) ; String matched_element = matched_view . isEmpty ( ) ? "" : matched_view . peek ( ) ; return matched_element ; }
int BigNumberAtIndex ( List < Integer > numbers , int index ) { List < Integer > matched_view = numbers . stream ( ) . min ( ) . getAsInt ( ) ; return matched_view . get ( index ) ; }
boolean ContainsSquareInRange ( int range_start , int range_length ) { boolean contains_square = ranges . any ( views . iota ( range_start , range_start + range_length ) , [ ] ( int n ) { return Math . pow ( ( int ) Math . sqrt ( n ) , 2 ) == n ; } ) ; return contains_square ; }
HashMap < Integer , List < Integer > > GroupNumbersByMod ( int [ ] numbers , int mod ) { HashMap < Integer , List < Integer > > number_groups = new HashMap < Integer , List < Integer > > ( ) ; for ( int n : numbers ) { int key = n % mod ; number_groups . put ( key , new ArrayList < Integer > ( ) ) ; } return number_groups ; }
HashMap < Character , List < String > > GroupWordsByFirstChar ( String [ ] words ) { HashMap < Character , List < String > > word_groups = new HashMap < Character , List < String > > ( ) ; for ( String word : words ) { if ( word_groups . containsKey ( word [ 0 ] ) ) { word_groups . put ( word [ 0 ] , word_groups . get ( word [ 0 ] ) + 1 ) ; } else { word_groups . put ( word [ 0 ] , 1 ) ; } } return word_groups ; } 
List < String > OrderByLengthAndDescending ( List < String > words ) { List < String > sorted_words = new ArrayList < > ( words ) ; Collections . sort ( sorted_words ) ; return sorted_words ; } 
List < String > OrderFirstCharDescendingReverse ( List < String > words ) { List < String > sorted_words = new ArrayList < > ( ) ; Collections . sort ( sorted_words ) ; Collections . reverse ( sorted_words ) ; return sorted_words ; } 
List < Integer > GetSubListOfNegative ( int [ ] numbers , int start , int length ) { View matched_view = numbers | views :: drop ( start ) | views :: filter ( new int [ 0 ] ( ) ) | views :: take ( length ) ; List < Integer > sub_list = new ArrayList < Integer > ( ) ; ranges :: copy ( matched_view , back_inserter ( sub_list ) ) ; return sub_list ; } 
List < Integer > GetPositiveSequence ( int [ ] numbers ) { List < Integer > matched_view = numbers | views . drop ( [ ] ( int n ) { return n <= 0 ; } ) | views . take ( [ ] ( int n ) { return n >= 0 ; } ) ; List < Integer > sub_sequence = new ArrayList < Integer > ( ) ; ranges . copy ( matched_view , back_inserter ( sub_sequence ) ) ; return sub_sequence ; } 
List < Integer > GetLargerThanIndexSequence ( int [ ] numbers ) { View matched_view = views :: iota ( 0 , ( int ) numbers . length ) | views :: drop_while ( [ & numbers ] ( int n ) { return numbers [ n ] < n ; } ) | views :: take_while ( [ & numbers ] ( int n ) { return numbers [ n ] > n ; } ) | views :: transform ( [ & numbers ] ( int n ) { return numbers [ n ] ; } ) ; List < Integer > sub_sequence = new ArrayList < Integer > ( ) ; ranges :: copy ( matched_view , back_inserter ( sub_sequence ) ) ; return sub_sequence ; } 
List < String > RearrangeWordByIndexes ( int [ ] words , int [ ] indexes ) { Integer new_indexes = indexes | views :: filter ( [ & words ] ( int n ) { return n >= words . length ; } ) | views :: transform ( [ & words ] ( int n ) { return n % words . length ; } ) ; String matched_view = new_indexes | views :: transform ( [ & words ] ( int n ) { return words . charAt ( n ) ; } ) ; List < String > new_words = ranges :: copy ( matched_view , back_inserter ( new_words ) ) ; return new_words ; } 
List < List < String > > GetWordsUpperLower ( List < String > words ) { Map < String , String > matched_view = words . get ( 0 ) ; String upper = w ; String lower = w ; ranges :: transform ( upper . begin ( ) , upper . end ( ) , upper . begin ( ) , :: toupper ) ; ranges :: transform ( lower . begin ( ) , lower . end ( ) , lower . begin ( ) , :: tolower ) ; return List < String > { upper , lower } ; } ) ; List < List < String > upper_lower_words = new ArrayList < > ( ) ; ranges :: copy ( matched_view , back_inserter ( upper_lower_words ) ) ; return upper_lower_words ; } 
List < Boolean > SelectIfInPlace ( int [ ] numbers ) { View matched_view = views . iota ( 0 , ( int ) numbers . length ) | views . transform ( [ numbers ] ( int n ) ) ; List < Boolean > nums_in_place = new ArrayList < Boolean > ( ) ; ranges . copy ( matched_view , back_inserter ( nums_in_place ) ) ; return nums_in_place ; } 
List < List < Integer > > SelectPairs ( int [ ] numbers_a , int [ ] numbers_b ) { View matched_view = numbers_a | views :: transform ( [ & numbers_b ] ( int a ) { return numbers_b | views :: filter ( [ a ] ( auto b ) { return a < b ; } ) | views :: transform ( [ a ] ( auto b ) { return List < Integer > { a , b } ; } ) | views :: join ; List < List < Integer > pairs = ranges :: copy ( matched_view , back_inserter ( pairs ) ) ; return pairs ; } 
List < String > StringCrossJoin ( List < String > end_words , List < String > begin_words ) { View matched_view = begin_words | views :: transform ( [ end_words ] ( String b ) { return end_words | views :: filter ( [ b ] ( String & e ) { return b . charAt ( 0 ) == e . charAt ( e . length ( ) - 1 ) ; } ) | views :: transform ( [ b ] ( String e ) { return e + " " + b ; } ) ; } ) | views :: join ; List < String > cross_strings = new ArrayList < > ( ) ; ranges :: copy ( matched_view , back_inserter ( cross_strings ) ) ; return cross_strings ; }
int ElementsContainSubword ( int [ ] words , String subword ) { if ( ranges :: all_of ( words | views :: take ( 5 ) , [ & subword ] ( String w ) { return w . indexOf ( subword ) != string . npos ; } ) ) return 1 ; if ( ranges :: any_of ( words | views :: take ( 5 ) , [ & subword ] ( String w ) { return w . indexOf ( subword ) != string . npos ; } ) ) return 0 ; return - 1 ; } 
List < Integer > ConcatLargeNumbers ( List < Integer > numbers_a , List < Integer > numbers_b , int flag ) { Integer large_numbers_a = numbers_a | views :: filter ( [ flag ] ( int n ) { return n > flag ; } ) ; Integer large_numbers_b = numbers_b | views :: filter ( [ flag ] ( int n ) { return n > flag ; } ) ; HashSet < Integer > all_numbers = new HashSet < Integer > ( ) ; ranges :: copy ( large_numbers_a , back_inserter ( all_numbers ) ) ; ranges :: copy ( large_numbers_b , back_inserter ( all_numbers ) ) ; return all_numbers ; }
int DotProduct ( int [ ] vector_a , int [ ] vector_b ) { int dot_product = inner_product ( vector_a . begin ( ) , vector_a . length , vector_b . begin ( ) , 0 ) ; return dot_product ; }
int [ ] SetDifference ( int [ ] set_a , int [ ] set_b ) { int [ ] difference = new int [ set_a . length ] ; ranges :: sort ( set_a ) ; ranges :: sort ( set_b ) ; set_symmetric_difference ( set_a . begin ( ) , set_a . end ( ) , set_b . begin ( ) , set_b . end ( ) , back_inserter ( difference ) ) ; return difference ; }
