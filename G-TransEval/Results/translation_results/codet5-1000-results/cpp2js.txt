function GreatestCommonDivisor ( a , b ) { if ( a == 0 || b == 0 ) { return a + b ; } if ( a == b ) { return a ; } if ( a > b ) { return GreatestCommonDivisor ( a % b , b ) ; } else { return GreatestCommonDivisor ( a , b % a ) ; } }
function LargestDivisor ( n ) { for ( var i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { return n / i ; } } return 1 ; }
function IsPrime ( n ) { if ( n < 2 ) { return false ; } for ( let k = 2 ; k < n ; k ++ ) { if ( n % k == 0 ) { return false ; } } return true ; }
function FizzBuzz ( n ) { let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( i % 11 == 0 || i % 13 == 0 ) { let q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) { count += 1 ; } q = parseInt ( q / 10 ) ; } } } return count ; }
function PrimeFib ( n ) { let f0 = 0 ; let f1 = 1 ; while ( n > 0 ) { let p = f0 + f1 ; let is_prime = p >= 2 ; for ( let i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { n -= 1 ; } f0 = f1 ; f1 = p ; } return f1 ; }
function TriangleArea ( a , h ) { return a * h / 2 ; }
function ModP ( n , p ) { let ret = 1 ; for ( let i = 0 ; i < n ; i ++ ) { ret = ( ret * 2 ) % p ; } return ret ; }
function Add ( x , y ) { return x + y ; }
function Fib ( n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return Fib ( n - 1 ) + Fib ( n - 2 ) ; }
function LargestPrimeFactor ( n ) { for ( var i = 2 ; i < n ; i ++ ) { while ( n % i == 0 && n > i ) { n = parseInt ( n / i ) ; } } return n ; }
function SumToN ( n ) { let result = 0 ; for ( let i = 1 ; i <= n ; i ++ ) { result += i ; } return result ; }
function Fibfib ( n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 0 ; } if ( n == 2 ) { return 1 ; } return Fibfib ( n - 1 ) + Fibfib ( n - 2 ) + Fibfib ( n - 3 ) ; }
function IsMultiplyPrime ( a ) { let num = 0 ; for ( let i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) { a = parseInt ( a / i , 10 ) ; num += 1 ; } } return num == 3 ; }
function IsSimplePower ( x , n ) { if ( n == 1 ) { return x == 1 ; } let power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
function ChooseNum ( x , y ) { if ( x > y ) { return - 1 ; } if ( y % 2 == 0 ) { return y ; } if ( x == y ) { return - 1 ; } return y - 1 ; }
function IsEqualToSumEven ( n ) { return n % 2 == 0 && n >= 8 ; }
function SpecialFactorial ( n ) { let fact = 1 ; let special_fact = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { fact *= i ; special_fact *= fact ; } return special_fact ; }
function XOrY ( n , x , y ) { let is_prime = n >= 2 ; for ( let i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { return x ; } return y ; }
function RightAngleTriangle ( a , b , c ) { return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b ; }
function FastPow ( n , k ) { if ( k == 0 ) { return 1 ; } let temp = FastPow ( n , parseInt ( k / 2 ) ) ; if ( k % 2 == 0 ) { return temp * temp ; } else { return n * temp * temp ; } }
function IsPalin ( s ) { let l = Math . floor ( s . length / 2 ) ; for ( let i = 0 ; i < l ; i ++ ) { if ( s [ i ] != s [ s . length - i - 1 ] ) { return false ; } } return true ; }
function FindSum ( n ) { var ans = 0 , temp = 0 ; for ( var i = 1 ; i <= n && temp < n ; i ++ ) { temp = i - 1 ; var num = 1 ; while ( temp < n ) { if ( temp + i <= n ) { ans += i * num ; } else { ans += ( n - temp ) * num ; } temp += i ; num += 1 ; } } return ans ; }
function GetNextGap ( gap ) { gap = gap * 10 / 13 ; if ( gap < 1 ) { return 1 ; } return gap ; }
function CountNonDecreasing ( n ) { let k = 10 ; let count = 1 ; for ( let i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count = Math . floor ( count / i ) ; } return count ; }
function Power ( x , y ) { if ( y == 0 ) { return 1 ; } else if ( y % 2 == 0 ) { return Power ( x , y / 2 ) * Power ( x , y / 2 ) ; } else { return x * Power ( x , y / 2 ) * Power ( x , y / 2 ) ; } }
function Power ( x , y ) { if ( y == 0 ) { return 1 ; } let temp = Power ( x , parseInt ( y / 2 ) ) ; if ( y % 2 == 0 ) { return temp * temp ; } else { if ( y > 0 ) { return x * temp * temp ; } else { return temp * temp / x ; } } }
function Multiply ( x , y ) { if ( y == 0 ) { return 0 ; } else if ( y > 0 ) { return x + Multiply ( x , y - 1 ) ; } else { return - Multiply ( x , - y ) ; } }
function Smallest ( x , y , z ) { if ( ! ( y / x ) ) { return ! ( y / z ) ? y : z ; } return ! ( x / z ) ? x : z ; }
function IsPowerOfFour ( n ) { if ( n == 0 ) { return false ; } while ( n != 1 ) { if ( n % 4 != 0 ) { return false ; } n = Math . floor ( n / 4 ) ; } return true ; }
function ModInverse ( a , m ) { let m0 = m ; let x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { let q = parseInt ( a / m , 10 ) ; let t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
function CntRotations ( s , n ) { let s2 = s + s ; let pre = new Array ( 2 * n ) ; for ( let i = 0 ; i < 2 * n ; i ++ ) { pre [ i ] = 0 ; } for ( let i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) { pre [ i ] += pre [ i - 1 ] ; } if ( s2 [ i ] == "a" || s2 [ i ] == "e" || s2 [ i ] == "i" || s2 [ i ] == "o" || s2 [ i ] == "u" ) { pre [ i ] ++ ; } } let ans = 0 ; for ( let i = n - 1 ; i < 2 * n - 1 ; i ++ ) { let r = i , l = i - n ; let x1 = pre [ r ] ; if ( l >= 0 ) { x1 -= pre [ l ] ; } r = parseInt ( i - parseInt ( n / 2 , 10 ) ; let left = pre [ r ] ; if ( l >= 0 ) { left -= pre [ l ] ; } let right = x1 - left ; if ( left > right ) { ans ++ ; } } return ans ; }
function BinomialCoeff ( n , k ) { var res = 1 ; if ( k > n - k ) { k = n - k ; } for ( var i = 0 ; i < k ; ++ i ) { res *= n - i ; res = parseInt ( res / i + 1 ) ; } return res ; }
function IsPrefix ( temp , s ) { if ( temp . length < s . length ) { return false ; } else { for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] != temp [ i ] ) { return false ; } } return true ; } }
function LexicographicallySmallestString ( s , n ) { let last_ze = - 1 ; let ans = "" ; for ( let i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == "0" ) { last_ze = i ; break ; } } for ( let i = 0 ; i < n ; i ++ ) { if ( i <= last_ze && s [ i ] == "0" ) { ans += s [ i ] ; } else if ( i > last_ze ) { ans += s [ i ] ; } } return ans ; }
function CalculateMax ( n , m , k ) { var ans = - 1 ; var low = 0 , high = m ; while ( low <= high ) { var mid = Math . floor ( ( low + high ) / 2 ) ; var val = 0 ; var l = k - 1 ; var r = n - k ; val += mid ; if ( mid >= l ) { val += l * ( 2 * mid - l - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( l - mid ) ; } if ( mid >= r ) { val += r * ( 2 * mid - r - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( r - mid ) ; } if ( val <= m ) { ans = Math . max ( ans , mid ) ; low = mid + 1 ; } else { high = mid - 1 ; } } return ans ; }
function FindLength ( s , i , j ) { var required = i ; var length = 0 ; for ( var curr of s ) { if ( curr == required ) { length += 1 ; if ( required == i ) { required = j ; } else { required = i ; } } } return length ; }
function CheckReverse ( left_sum , right_sum ) { let rev = 0 ; let temp = right_sum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp = parseInt ( temp / 10 ) ; } if ( rev == left_sum ) { return true ; } return false ; }
function IsComposite ( n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return false ; } if ( n % 2 == 0 || n % 3 == 0 ) { return true ; } for ( let i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return true ; } } return false ; }
function MinDeletion ( s ) { let n = s . length ; let first_idx1 = - 1 ; let last_idx0 = - 1 ; for ( let i = 0 ; i < n ; i ++ ) { if ( s [ i ] == "1" ) { first_idx1 = i ; break ; } } for ( let i = n - 1 ; i >= 0 ; i -- ) { if ( s [ i ] == "0" ) { last_idx0 = i ; break ; } } if ( first_idx1 == - 1 || last_idx0 == - 1 ) { return 0 ; } let count1 = 0 , count0 = 0 ; for ( let i = 0 ; i < last_idx0 ; i ++ ) { if ( s [ i ] == "1" ) { count1 ++ ; } } for ( let i = first_idx1 + 1 ; i < n ; i ++ ) { if ( s [ i ] == "1" ) { count0 ++ ; } } return Math . min ( count0 , count1 ) ; }
function MinSteps ( s , n ) { let smaller , cost = 0 ; let f = Array ( 26 ) . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) { let curr_ele = s [ i ] . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) ; smaller = 0 ; for ( let j = 0 ; j <= curr_ele ; j ++ ) { if ( f [ j ] != 0 ) { smaller += f [ j ] ; } } if ( smaller == 0 ) { cost += i + 1 ; } else { cost += i - smaller + 1 ; } f [ s [ i ] . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) ] ++ ; } return cost ; }
function NumberOfWays ( n ) { let count = 0 ; for ( let a = 1 ; a < n ; a ++ ) { for ( let b = 1 ; b < n ; b ++ ) { let c = n - ( a + b ) ; if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } } return count ; }
function SlopeOfNum ( num , n ) { let slope = 0 ; for ( let i = 1 ; i < n - 1 ; i ++ ) { if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) { slope ++ ; } else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) { slope ++ ; } } return slope ; }
function MiddleOfThree ( a , b , c ) { let x = a - b ; let y = b - c ; let z = a - c ; if ( x * y > 0 ) { return b ; } else if ( x * z > 0 ) { return c ; } else { return a ; } }
function CountMaxSetBits ( left , right ) { while ( ( left | ( left + 1 ) ) <= right ) { left |= left + 1 ; } return left ; }
function FindS ( s ) { let l = 1 , r = parseInt ( s / 2 , 10 ) + 1 ; while ( l <= r ) { let mid = parseInt ( ( l + r ) / 2 , 10 ) ; let sum = mid * ( mid + 1 ) / 2 , 10 ) ; if ( sum == s ) { return mid ; } else if ( sum > s ) { r = mid - 1 ; } else { l = mid + 1 ; } } return - 1 ; }
function Check ( s ) { let min = Number . MAX_VALUE ; let max = Number . MIN_VALUE ; let sum = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { let ascii = s [ i ] ; if ( ascii < 96 || ascii > 122 ) { return false ; } sum += ascii ; if ( min > ascii ) { min = ascii ; } if ( max < ascii ) { max = ascii ; } } min -= 1 ; let eSum = max * parseInt ( ( max + 1 ) / 2 , 10 ) - min * parseInt ( ( min + 1 ) / 2 , 10 ) ; return sum == eSum ; }
function MinimumPossibleProduct ( k ) { var res = 1 ; var r = ( 1 << k ) - 1 ; for ( var i = 0 ; i < k ; i ++ ) { res *= r - 1 ; } res *= r ; return res ; }
function FindInGrid ( i , j ) { if ( i == j ) { return i * i - ( i - 1 ) ; } else if ( i > j ) { if ( i % 2 == 0 ) { return i * i - ( j - 1 ) ; } else { return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } } else { if ( j % 2 == 0 ) { return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; } else { return j * j - ( i - 1 ) ; } } }
function FindMinOperationsReqEmpStr ( s ) { let cnt_one = 0 ; let cnt_zero = 0 ; let n = s . length ; for ( let i = 0 ; i < n ; i ++ ) { if ( s [ i ] == "0" ) { if ( cnt_one > 0 ) { cnt_one -- ; } cnt_zero ++ ; } else { if ( cnt_zero > 0 ) { cnt_zero -- ; } cnt_one ++ ; } } return cnt_one + cnt_zero ; }
function IsReachable ( x1 , y1 , x2 , y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) { x2 %= y2 ; } else { y2 %= x2 ; } } if ( x2 == x1 ) { return y2 - y1 >= 0 && ( y2 - y1 ) % x1 == 0 ; } else if ( y2 == y1 ) { return x2 - x1 >= 0 && ( x2 - x1 ) % y1 == 0 ; } else { return false ; } }
function FindMaxSoln ( n , x , y ) { let ans = Number . MIN_VALUE ; for ( let k = 0 ; k <= n ; k ++ ) { if ( k % x == y ) { ans = Math . max ( ans , k ) ; } } return ans >= 0 && ans <= n ? ans : - 1 ; }
function NumberOfPairs ( n ) { let count = 0 ; let i = 1 , j = n - 1 ; while ( i < j ) { if ( i + j == n ) { count ++ ; } i ++ ; j -- ; } return count ; }
function MinChanges ( s , n ) { let count = 0 , zeros = 0 , ones = 0 ; if ( s [ 0 ] != "1" ) { count ++ ; ones ++ ; } for ( let i = 1 ; i < n ; i ++ ) { if ( s [ i ] == "0" ) { zeros ++ ; } else { ones ++ ; } if ( zeros > ones ) { zeros -- ; ones ++ ; count ++ ; } } return count ; }
function KVisibleFromLeft ( n , k ) { if ( n == k ) { return 1 ; } if ( k == 1 ) { let ans = 1 ; for ( let i = 1 ; i < n ; i ++ ) { ans *= i ; } return ans ; } return KVisibleFromLeft ( n - 1 , k - 1 ) + ( n - 1 ) * KVisibleFromLeft ( n - 1 , k ) ; }
function Find ( n , sum ) { if ( sum > 6 * n || sum < n ) { return 0 ; } if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) { return 1.0 / 6 ; } else { return 0 ; } } let s = 0 ; for ( let i = 1 ; i <= 6 ; i ++ ) { s += Find ( n - 1 , sum - i ) / 6 ; } return s ; }
function BinCoff ( n , r ) { let val = 1 ; if ( r > n - r ) { r = n - r ; } for ( let i = 0 ; i < r ; i ++ ) { val *= n - i ; val = parseInt ( val / i + 1 ) ; } return val ; }
function GetMask ( val ) { let mask = 0 ; if ( val == 0 ) { return 1 ; } while ( val > 0 ) { let d = val % 10 ; mask |= 1 << d ; val = parseInt ( val / 10 ) ; } return mask ; }
function WaysToKAdjacentSetBits ( n , k , current_index , adjacent_set_bits , last_bit ) { if ( current_index == n ) { if ( adjacent_set_bits == k ) { return 1 ; } return 0 ; } let no_of_ways = 0 ; if ( last_bit == 1 ) { no_of_ways += WaysToKAdjacentSetBits ( n , k , current_index + 1 , adjacent_set_bits + 1 , 1 ) ; no_of_ways += WaysToKAdjacentSetBits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } else if ( ! last_bit ) { no_of_ways += WaysToKAdjacentSetBits ( n , k , current_index + 1 , adjacent_set_bits , 1 ) ; no_of_ways += WaysToKAdjacentSetBits ( n , k , current_index + 1 , adjacent_set_bits , 0 ) ; } return no_of_ways ; }
function CheckFunc ( i , j , st ) { if ( st [ i ] == "(" && st [ j ] == ")" ) { return 1 ; } if ( st [ i ] == "(" && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == ')' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == ']' ) { return 1 ; } if ( st [ i ] == '[' && st [ j ] == '?' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == ']' ) { return 1 ; } if ( st [ i ] == '{' && st [ j ] == '}' ) { return 1 ; } if ( st [ i ] == '?' && st [ j ] == '?' ) { return 1 ; } return 0 ; }
function FindGolomb ( n ) { if ( n == 1 ) { return 1 ; } return 1 + FindGolomb ( n - FindGolomb ( FindGolomb ( n - 1 ) ) ) ; }
function AllOnes ( s , n ) { let co = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { co += s [ i ] == "1" ? 1 : 0 ; } return co == n ; }
function Pad ( n ) { let p_prev_prev = 1 , p_prev = 1 , p_curr = 1 , p_next = 1 ; for ( let i = 3 ; i <= n ; i ++ ) { p_next = p_prev_prev + p_prev ; p_prev_prev = p_prev ; p_prev = p_curr ; p_curr = p_next ; } return p_next ; }
function OddLengthPalindrome ( k ) { let palin = k ; k = parseInt ( k / 10 ) ; while ( k > 0 ) { let rev = k % 10 ; palin = palin * 10 + rev ; k = parseInt ( k / 10 ) ; } return palin ; }
function ChangeString ( s0 ) { var s = s0 ; var n = s . length ; if ( s [ 0 ] == '?' ) { s [ 0 ] = "a" ; if ( s [ 0 ] == s [ 1 ] ) { s [ 0 ] ++ ; } } for ( var i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == '?' ) { s [ i ] = "a" ; if ( s [ i ] == s [ i - 1 ] ) { s [ i ] ++ ; } if ( s [ i ] == s [ i + 1 ] ) { s [ i ] ++ ; } if ( s [ i ] == s [ i - 1 ] ) { s [ i ] ++ ; } } } if ( s [ n - 1 ] == '?' ) { s [ n - 1 ] = "a" ; if ( s [ n - 1 ] == s [ n - 2 ] ) { s [ n - 1 ] ++ ; } } return s ; }
function TotalHammingDistance ( n ) { let i = 1 , sum = 0 ; while ( n / i > 0 ) { sum = sum + n / i ; i = i * 2 ; } return sum ; }
function CheckBitonic ( s ) { let i = 1 ; for ( ; i < s . length ; i ++ ) { if ( s [ i ] > s [ i - 1 ] ) { continue ; } if ( s [ i ] <= s [ i - 1 ] ) { break ; } } if ( i == s . length - 1 ) { return 1 ; } let j = i + 1 ; for ( ; j < s . length ; j ++ ) { if ( s [ j ] < s [ j - 1 ] ) { continue ; } if ( s [ j ] >= s [ j - 1 ] ) { break ; } } i = j ; if ( i != s . length ) { return 0 ; } return 1 ; }
function EndsWith ( str , pat ) { let pat_len = pat . length ; let str_len = str . length ; if ( pat_len > str_len ) { return false ; } pat_len -- ; str_len -- ; while ( pat_len >= 0 ) { if ( pat [ pat_len ] != str [ str_len ] ) { return false ; } pat_len -- ; str_len -- ; } return true ; }
function GetSum ( n , d ) { if ( n < d ) { return 0 ; } while ( n % 10 != d ) { n -- ; } let k = parseInt ( n / 10 ) ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
function BalancedStringBySwapping ( s ) { let unbalanced_pair = 0 ; for ( let i = 0 ; i < s . length ; ++ i ) { if ( unbalanced_pair > 0 && s [ i ] == "]" ) { -- unbalanced_pair ; } else if ( s [ i ] == "[" ) { ++ unbalanced_pair ; } } return ( unbalanced_pair + 1 ) / 2 ; }
function ComputeHash ( s ) { let p = 31 ; let mod = ( 1e9 + 7 ) ; let hash_val = 0 ; let mul = 1 ; for ( let ch = 0 ; ch < s . length ; ch ++ ) { hash_val = ( hash_val + ( ch - "a" . charCodeAt ( ) + 1 ) * mul ) % mod ; mul = mul * p % mod ; } return hash_val ; }
function CountOfSubstringWithOnlyOnes ( s ) { var res = 0 , count = 0 ; for ( var i = 0 ; i < s . length ; i ++ ) { count = s [ i ] == "1" ? count + 1 : 0 ; res = res + count ; } return res ; }
function Composite ( n ) { let flag = 0 ; let c = 0 ; for ( let j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) { c += 1 ; } } if ( c >= 3 ) { flag = 1 ; } return flag ; }
function IsDivBySix ( s , n ) { let sum = 0 ; for ( let i = 0 ; i < n ; i ++ ) { sum += s [ i ] . charCodeAt ( ) - "a" . charCodeAt ( ) + 1 ; } if ( sum % 3 != 0 ) { return false ; } let last_digit = ( s [ n - 1 ] . charCodeAt ( ) - "a" . charCodeAt ( ) + 1 ) % 10 ; if ( last_digit . charCodeAt ( ) != 0 ) { return false ; } return true ; }
function IsRedundantBraces ( s ) { var a = 0 , b = 0 ; for ( var i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == "(" && s [ i + 2 ] == ")" ) { return true ; } if ( s [ i ] == "*" || s [ i ] == "+" || s [ i ] == '-' || s [ i ] == '/' ) { a ++ ; } if ( s [ i ] == "(" ) { b ++ ; } } if ( b > a ) { return true ; } return false ; }
function CountSubStr ( s , n ) { var count = 0 ; for ( var i = 0 ; i < n - 2 ; ) { if ( s [ i ] == "0" && s [ i + 1 ] == "1" && s [ i + 2 ] == "0" ) { count ++ ; i += 3 ; } else if ( s [ i ] == "1" && s [ i + 1 ] == "0" && s [ i + 2 ] == "1" ) { count ++ ; i += 3 ; } else { i ++ ; } } return count ; }
function PrefixOccurrences ( s ) { let c = s [ 0 ] ; let count_c = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == c ) { count_c ++ ; } } return count_c ; }
function IsValid ( s , len ) { for ( var i = 1 ; i < len ; i ++ ) { if ( s [ i ] == s [ i - 1 ] ) { return false ; } } return true ; }
function Count ( s , k ) { let n = s . length ; let d = 0 ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { d += s [ i ] ; } if ( d % k == 0 ) { count += 1 ; } for ( let i = k ; i < n ; i ++ ) { let prev = s [ i - k ] ; d -= prev ; d += s [ i ] ; if ( d % k == 0 ) { count += 1 ; } } return count ; }
function FindSubstringCount ( s ) { var result = 0 ; var n = s . length ; var i = 0 ; while ( i < n - 1 ) { if ( s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) { result ++ ; while ( i < n - 1 && s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) { i ++ ; } } i ++ ; } return result ; }
function Find ( s1 , s2 ) { var len1 = s1 . length , len2 = s2 . length ; if ( len1 != len2 ) { return false ; } var d = Array ( len1 ) ; d [ 0 ] = s2 [ 0 ] - s1 [ 0 ] ; for ( var i = 1 ; i < len1 ; i ++ ) { if ( s1 [ i ] > s2 [ i ] ) { return false ; } else { d [ i ] = s2 [ i ] - s1 [ i ] ; } } for ( var i = 0 ; i < len1 - 1 ; i ++ ) { if ( d [ i ] < d [ i + 1 ] ) { return false ; } } return true ; }
function IsInGivenBase ( s , bas ) { if ( bas > 16 ) { return false ; } else if ( bas <= 10 ) { for ( let i = 0 ; i < s . length ; i ++ ) { if ( ! ( s [ i ] >= "0" && s [ i ] < "0" + bas ) ) { return false ; } } } else { for ( let i = 0 ; i < s . length ; i ++ ) { if ( ! ( ( s [ i ] >= "0" && s [ i ] < "0" + bas ) || ( s [ i ] >= "A" && s [ i ] < ( "A" + bas - 10 ) ) ) ) { return false ; } } } return true ; }
function CountNonEmptySubstr ( s ) { let n = s . length ; return n * ( n + 1 ) / 2 ; }
function EvenDecimalValue ( s , n ) { let result = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i ; j < n ; j ++ ) { let decimal_value = 0 ; let power_of_2 = 1 ; for ( let k = i ; k <= j ; k ++ ) { decimal_value += ( s [ k ] - "0" ) * power_of_2 ; power_of_2 *= 2 ; } if ( decimal_value % 2 == 0 ) { result ++ ; } } } return result ; }
function Calculate ( s ) { var ans = 6 ; for ( var i = 0 ; i < 10 ; ++ i ) { for ( var j = 0 ; j < 10 ; ++ j ) { for ( var k = 0 ; k < 10 ; ++ k ) { for ( var l = 0 ; l < 10 ; ++ l ) { for ( var m = 0 ; m < 10 ; ++ m ) { for ( var n = 0 ; n < 10 ; ++ n ) { if ( i != s [ 0 ] - "0" ) { c ++ ; } if ( j != s [ 1 ] - "0" ) { c ++ ; } if ( k != s [ 2 ] - "0" ) { c ++ ; } if ( l != s [ 3 ] - "0" ) { c ++ ; } if ( m != s [ 4 ] - "0" ) { c ++ ; } if ( n != s [ 5 ] - "0" ) { c ++ ; } if ( c < ans ) { ans = c ; } } } } } } return ans ; }
function XorZero ( s ) { let one_count = 0 , zero_count = 0 ; let n = s . length ; for ( let i = 0 ; i < n ; i ++ ) { if ( s [ i ] == "1" ) { one_count ++ ; } else { zero_count ++ ; } } if ( one_count % 2 == 0 ) { return zero_count ; } return one_count ; }
function EvenLength ( n ) { let res = n ; for ( let j = n . length - 1 ; j >= 0 ; -- j ) { res += n [ j ] ; } return res ; }
function CountSubstringWithEqualEnds ( s ) { var result = 0 ; var n = s . length ; for ( i = 0 ; i < n ; i ++ ) { for ( j = i ; j < n ; j ++ ) { if ( s [ i ] == s [ j ] ) { result ++ ; } } } return result ; }
function NormalSlope ( a , b , x1 , y1 ) { let g = a / 2 ; let f = b / 2 ; if ( g - x1 == 0 ) { return - 1 ; } let slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) { return - 2 ; } return slope ; }
function Orthogonality ( x1 , y1 , x2 , y2 , r1 , r2 ) { let dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) { return true ; } else { return false ; } }
function FindAreaShaded ( a ) { let sq_area = a * a ; let semi_circle_area = 3.14 * ( a * a ) / 8 ; let shaded_area = 4 * semi_circle_area - sq_area ; return shaded_area ; }
function Factorial ( a , b ) { var res = 1 ; for ( var i = 1 ; i <= a + b ; i ++ ) { res = res * i ; } for ( var i = 1 ; i <= a ; i ++ ) { res = res / i ; } for ( var i = 1 ; i <= b ; i ++ ) { res = res / i ; } return res ; }
function FactorTree ( n ) { let height = 0 ; while ( n > 1 ) { let flag = false ; for ( let i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( ! flag ) { break ; } } return height ; }
function FindIfPossible ( n , s , x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) { return "Yes" ; } if ( n == 1 ) { if ( s == x ) { return "Yes" ; } else { return "No" ; } } if ( n == 2 ) { let c = parseInt ( ( s - x ) / 2 , 10 ) ; let a = c ; let b = c ; a = a + x ; if ( ( a ^ b ) == x ) { return "Yes" ; } else { return "No" ; } } } return "No" ; }
function MaximumTripletXor ( a , b , c ) { let ans = 0 ; for ( let i = 30 ; i >= 0 ; i -- ) { let cur = 1 << i ; if ( a >= cur ) { ans += cur ; a -= cur ; } else if ( b >= cur ) { ans += cur ; b -= cur ; } else if ( c >= cur ) { ans += cur ; c -= cur ; } } return ans ; }
function ItemType ( n ) { let count = 0 ; let day = 1 ; while ( count + day * ( day + 1 ) / 2 < n ) { count += day * ( day + 1 ) / 2 ; day ++ ; } for ( let type = day ; type > 0 ; type -- ) { count += type ; if ( count >= n ) { return type ; } } return 0 ; }
function MaxGcdInRange ( l , r ) { var ans = 1 ; for ( var z = r ; z >= 1 ; z -- ) { if ( parseInt ( r / z - ( l - 1 ) / z > 1 ) { ans = z ; break ; } } return ans ; }
function SumOfDigits ( n ) { let sum = 0 ; while ( n != 0 ) { sum += n % 10 ; n = Math . floor ( n / 10 ) ; } return sum ; }
function IsRepUnitNum ( n , b ) { let length = 0 ; let count_one = 0 ; while ( n != 0 ) { let r = n % b ; length ++ ; if ( r == 1 ) { count_one ++ ; } n = Math . floor ( n / b ) ; } return count_one >= 3 && count_one == length ; }
function IsStraightLineNum ( n ) { if ( n <= 99 ) { return false ; } let s = n . toString ( ) ; let d = s [ 1 ] - s [ 0 ] ; for ( let i = 2 ; i < s . length ; i ++ ) { if ( s [ i ] - s [ i - 1 ] != d ) { return false ; } } return true ; }
function GetCount ( d , n ) { let no = Math . floor ( n / d ) ; let result = no ; for ( let p = 2 ; p * p <= no ; ++ p ) { if ( no % p == 0 ) { while ( no % p == 0 ) { no = Math . floor ( no / p ) ; } result -= parseInt ( result / p ) ; } } if ( no > 1 ) { result -= parseInt ( result / no ) ; } return result ; }
function IsEvenParity ( x ) { let parity = 0 ; while ( x != 0 ) { if ( x & 1 ) { parity ++ ; } x = x >> 1 ; } if ( parity % 2 == 0 ) { return true ; } else { return false ; } }
function IsPerfect ( n ) { let sum = 1 ; for ( let i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) { sum = sum + i + n / i ; } else { sum = sum + i ; } } } if ( sum == n && n != 1 ) { return n ; } return 0 ; }
function LogAToBaseB ( a , b ) { return a > b - 1 ? 1 + LogAToBaseB ( a / b , b ) : 0 ; }
function UsingBinarySearch ( start , end , n , s ) { if ( start >= end ) { return start ; } let mid = start + parseInt ( ( end - start ) / 2 ) ; let total_sum = n * ( n + 1 ) / 2 ; let mid_sum = mid * ( mid + 1 ) / 2 ; if ( total_sum - mid_sum <= s ) { return UsingBinarySearch ( start , mid , n , s ) ; } return UsingBinarySearch ( mid + 1 , end , n , s ) ; }
function MinInt ( s ) { let s1 = s ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( s1 [ i ] >= "5" ) { s1 [ i ] = "9" - s1 [ i ] + "0" ; } } if ( s1 [ 0 ] == "0" ) { s1 [ 0 ] = "9" ; } return s1 ; }
function CountTriplets ( a , b , c ) { var ans = 0 ; for ( var i = 1 ; i <= a ; i ++ ) { for ( var j = 1 ; j <= b ; j ++ ) { for ( var k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) { ans ++ ; } } } } return ans ; }
function TopsyTurvy ( s ) { for ( var i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == "2" || s [ i ] == "4" || s [ i ] == "5" || s [ i ] == "6" || s [ i ] == "7" || s [ i ] == "9" ) { return false ; } } return true ; }
function SumOfLastDig ( n , m ) { let sum = 0 ; let k = n / m ; let arr = Array . from ( { length : 10 } , ( _ , i ) => 0 ) ; for ( let i = 0 ; i < 10 ; i ++ ) { arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ] ; } let rem = k % 10 ; let ans = k / 10 * sum ; for ( let i = 0 ; i < rem ; i ++ ) { ans += arr [ i ] ; } return ans ; }
function TotalPay ( total_items , price_of_one_item , n , m ) { let freeItems = 0 , actual = 0 ; freeItems = total_items / ( n + m ) ; actual = total_items - freeItems ; let amount = actual * price_of_one_item ; return amount ; }
function MinOperations ( x , y , p , q ) { if ( y % x != 0 ) { return - 1 ; } let d = Math . floor ( y / x ) ; let a = 0 ; while ( d % p == 0 ) { d = Math . floor ( d / p ) ; a += 1 ; } let b = 0 ; while ( d % q == 0 ) { d = Math . floor ( d / q ) ; b += 1 ; } if ( d != 1 ) { return - 1 ; } return a + b ; }
function IsMersenne ( n ) { while ( n != 0 ) { let r = n % 2 ; if ( r == 0 ) { return false ; } n = parseInt ( n / 2 ) ; } return true ; }
function FindThirdDigit ( n ) { if ( n < 3 ) { return 0 ; } return ( n & 1 ) == 1 ? 1 : 6 ; }
function IsOddLength ( num ) { let count = 0 ; while ( num > 0 ) { num /= 10 ; count ++ ; } if ( count % 2 != 0 ) { return true ; } return false ; }
function CheckIsPossible ( l , r , k ) { let count = 0 ; for ( let i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return count > 1 ; }
function Bytes ( kilobytes ) { let b = kilobytes * 1024 ; return b ; }
function OctahedralNum ( n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
function CheckEqual ( s ) { for ( var i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] != "1" && s [ i ] != "0" && s [ i ] != "8" ) { return "No" ; } } var start = 0 , end = s . length - 1 ; while ( start < end ) { if ( s [ start ] != s [ end ] ) { return "No" ; } start ++ ; end -- ; } return "Yes" ; }
function IsUndulating ( n ) { if ( n . length <= 2 ) { return false ; } for ( let i = 2 ; i < n . length ; i ++ ) { if ( n [ i - 2 ] != n [ i ] ) { return false ; } } return true ; }
function FirstDigit ( n ) { while ( n >= 10 ) { n /= 10 ; } return n ; }
function CountDigit ( n ) { if ( n == 0 ) { return 0 ; } return 1 + CountDigit ( n / 10 ) ; }
function IsDivisibleBy5 ( s ) { n = s . length ; return s [ n - 1 ] - "0" == 0 || s [ n - 1 ] - "0" == 5 ; }
function Inv ( a , m ) { let m0 = m ; let x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { let q = parseInt ( a / m , 10 ) ; let t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
function OnlyFirstAndLastAreSet ( n ) { if ( n == 1 ) { return true ; } if ( n == 2 ) { return false ; } return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
function Divide ( dividend , divisor ) { let sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? - 1 : 1 ; dividend = Math . abs ( dividend ) ; divisor = Math . abs ( divisor ) ; let quotient = 0 ; let temp = 0 ; for ( let i = 31 ; i >= 0 ; -- i ) { if ( temp + ( ( divisor << i ) <= dividend ) { temp += ( divisor << i ) ; quotient |= 1 << i ; } } if ( sign == - 1 ) { quotient = - quotient ; } return quotient ; }
function FindProfession ( level , pos ) { if ( level == 1 ) { return "e" ; } if ( FindProfession ( level - 1 , parseInt ( ( pos + 1 ) / 2 ) ) == "d" ) { return pos % 2 ? "d" : "e" ; } return pos % 2 ? "e" : "d" ; }
function HasCloseElements ( numbers , threshold ) { for ( let i = 0 ; i < numbers . length ; i ++ ) { for ( let j = i + 1 ; j < numbers . length ; j ++ ) { let distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) { return true ; } } } return false ; }
function TruncateNumber ( number ) { return Math . floor ( fmod ( number , 1 ) ) ; }
function BelowZero ( operations ) { let balance = 0 ; for ( let op = 0 ; op < operations . length ; op ++ ) { balance += operations [ op ] ; if ( balance < 0 ) { return true ; } } return false ; }
function MeanAbsoluteDeviation ( numbers ) { let sum_num = 0 ; for ( let num = 0 ; num < numbers . length ; num ++ ) { sum_num += num ; } let mean = sum_num / numbers . length ; let sum_abs_diff = 0 ; for ( let num of numbers ) { sum_abs_diff += Math . abs ( num - mean ) ; } return sum_abs_diff / numbers . length ; }
function Intersperse ( numbers , delimiter ) { let result = [ ] ; if ( numbers . length === 0 ) { return result ; } for ( let i = 0 ; i < numbers . length - 1 ; i ++ ) { result . push ( numbers [ i ] ) ; result . push ( delimiter ) ; } result . push ( numbers [ numbers . length - 1 ] ) ; return result ; }
function SumProduct ( numbers ) { let sum_value = 0 ; let prod_value = 1 ; for ( let n = 0 ; n < numbers . length ; n ++ ) { sum_value += n ; prod_value *= n ; } return [ sum_value , prod_value ] ; }
function AllPrefixes ( s ) { var result = [ ] ; for ( var i = 1 ; i <= s . length ; i ++ ) { result . push ( s . substr ( 0 , i ) ) ; } return result ; }
function ParseMusic ( music_string ) { let current = "" ; let result = [ ] ; for ( let i = 0 ; i <= music_string . length ; i ++ ) { if ( i == music_string . length || music_string [ i ] == "▁" ) { if ( current == "o" ) { result . push ( 4 ) ; } if ( current == "o|" ) { result . push ( 2 ) ; } if ( current == ".|" ) { result . push ( 1 ) ; } current = "" ; } else { current += music_string [ i ] ; } } return result ; }
function Strlen ( s ) { return s . length ; }
function Factorize ( n ) { let factors = [ ] ; for ( let i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n = parseInt ( n / i ) ; factors . push ( i ) ; i -- ; } } return factors ; }
function Concatenate ( strings ) { let result = "" ; for ( let s of strings ) { result += s ; } return result ; }
function GetPositive ( l ) { let result = [ ] ; for ( let i = 0 ; i < l . length ; i ++ ) { if ( l [ i ] > 0 ) { result . push ( l [ i ] ) ; } } return result ; }
function SortEven ( l ) { let evens = [ ] ; for ( let i = 0 ; i < l . length ; i += 2 ) { evens . push ( l [ i ] ) ; } evens . sort ( ( a , b ) => a - b ) ; let result = [ ] ; for ( let i = 0 ; i < l . length ; i ++ ) { if ( i % 2 == 0 ) { result . push ( evens [ i / 2 ] ) ; } if ( i % 2 == 1 ) { result . push ( l [ i ] ) ; } } return result ; }
function DecodeCyclic ( s ) { let output = s . substring ( 0 , i ) ; while ( i <= s . length - 3 ) { let x = s [ i + 2 ] + s . substring ( i , 2 ) ; output += x ; i += 3 ; } return output + s . substring ( i ) ; }
function CarRaceCollision ( n ) { return Math . pow ( n , 2 ) ; }
function IncrList ( l ) { let result = [ ] ; for ( let i of l ) { result . push ( i + 1 ) ; } return result ; }
function PairsSumToZero ( l ) { for ( var i = 0 ; i < l . length ; i ++ ) { for ( var j = i + 1 ; j < l . length ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) { return true ; } } } return false ; }
function ChangeBase ( x , b ) { let ret = [ ] ; while ( x > 0 ) { ret . push ( ( x % b ) . toString ( ) ) ; x = parseInt ( x / b ) ; } return ret ; }
function Median ( l ) { l . sort ( ) ; if ( l . length % 2 == 1 ) { return l [ l . length / 2 ] ; } return ( l [ l . length / 2 ] + l [ l . length / 2 - 1 ] ) / 2 ; }
function DecodeShift ( s ) { let result = "" ; for ( let ch = 0 ; ch < s . length ; ch ++ ) { let w = ( ch + 21 - "a" . charCodeAt ( 0 ) ) % 26 + "a" . charCodeAt ( 0 ) ; result += w ; } return result ; }
function BelowThreshold ( l , t ) { for ( let n = 0 ; n < l . length ; n ++ ) { if ( l [ n ] >= t ) { return false ; } } return true ; }
function CorrectBracketing ( brackets ) { let depth = 0 ; for ( let b = 0 ; b < brackets . length ; b ++ ) { if ( b == "<" ) { depth += 1 ; } if ( b == ">" ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
function Monotonic ( l ) { let incr = 0 ; let decr = 0 ; for ( let i = 1 ; i < l . length ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr != 2 ; }
function Derivative ( xs ) { let result = [ ] ; for ( let i = 1 ; i < xs . length ; i ++ ) { result . push ( i * xs [ i ] ) ; } return result ; }
function VowelsCount ( s ) { var vowels = "aeiouAEIOU" ; var count = 0 ; for ( const ch of s ) { if ( vowels . has ( ch ) ) { count += 1 ; } } if ( s [ s . length - 1 ] == "y" || s [ s . length - 1 ] == "Y" ) { count += 1 ; } return count ; }
function DigitSum ( s ) { let sum = 0 ; for ( let c = 0 ; c < s . length ; c ++ ) { if ( isupper ( c ) ) { sum += c ; } } return sum ; }
function FruitDistribution ( s , n ) { let num1 = "" ; let num2 = "" ; let flag = false ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( isdigit ( s [ i ] ) ) { if ( ! flag ) { num1 += s [ i ] ; } if ( flag ) { num2 += s [ i ] ; } } else if ( ! flag && num1 . length > 0 ) { flag = true ; } } return n - parseInt ( num1 ) - parseInt ( num2 ) ; }
function Pluck ( arr ) { let result = [ ] ; for ( let i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . length == 0 ) { result . push ( arr [ i ] ) ; result . push ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } } return result ; }
function StrangeSortList ( lst ) { var res = [ ] ; lst . sort ( ) ; var l = 0 ; var r = lst . length - 1 ; while ( l < r ) { res . push ( lst [ l ] ) ; l += 1 ; res . push ( lst [ r ] ) ; r -= 1 ; } if ( l == r ) { res . push ( lst [ l ] ) ; } return res ; }
function TriangleArea ( a , b , c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return - 1 ; } var s = ( a + b + c ) / 2 ; return Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; }
function WillItFly ( q , w ) { let sum = 0 ; for ( let i = 0 ; i < q . length ; i ++ ) { if ( q [ i ] != q [ q . length - i - 1 ] ) { return false ; } sum += q [ i ] ; } return sum <= w ; }
function IsCube ( a ) { a = Math . abs ( a ) ; let i = Math . round ( Math . pow ( a , 1.0 / 3 ) ) ; return Math . pow ( i , 3 ) == a ; }
function HexKey ( num ) { let key = "2357BD" ; let total = 0 ; for ( let c = 0 ; c < key . length ; c ++ ) { if ( key [ c ] != string . npos ) { total += 1 ; } } return total ; }
function DecimalToBinary ( dec ) { let ans = "" ; if ( dec != 0 ) { while ( dec > 0 ) { ans . push ( ( dec % 2 ) . toString ( ) ) ; dec = parseInt ( dec / 2 ) ; } } else { ans += "0" ; } return "db" + ans + "db" ; }
function PrimeLength ( s ) { let l = s . length ; if ( l < 2 ) { return false ; } for ( let i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return false ; } } return true ; }
function StartsOneEnds ( n ) { if ( n < 1 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return 18 * Math . pow ( 10 , n - 2 ) ; }
function Add ( lst ) { let sum = 0 ; for ( let i = 1 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; }
function GetRow ( lst , x ) { let coords = [ ] ; for ( let i = 0 ; i < lst . length ; i ++ ) { for ( let j = lst [ i ] . length - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] [ j ] == x ) { coords . push ( [ i , j ] ) ; } } } return coords ; }
function NextSmallest ( lst ) { lst . sort ( ( a , b ) => a - b ) ; for ( var i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) { return lst [ i ] ; } } return - 1 ; }
function AnyInt ( a , b , c ) { if ( Math . round ( a ) != a || Math . round ( b ) != b || Math . round ( c ) != c ) { return false ; } return a + b == c || a + c == b || b + c == a ; }
function CountUpTo ( n ) { let primes = [ ] ; for ( let i = 2 ; i < n ; i ++ ) { let is_prime = true ; for ( let j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { primes . push ( i ) ; } } return primes ; }
function ClosestInteger ( value ) { var w = stod ( value ) ; return parseInt ( w ) ; }
function MakeAPile ( n ) { let result = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { result . push ( n + 2 * i ) ; } return result ; }
function WordsString ( s ) { let current = "" ; let words = [ ] ; for ( let i = 0 ; i <= s . length ; i ++ ) { if ( i == s . length || s [ i ] == "▁" || s [ i ] == "," ) { if ( current . length > 0 ) { words . push ( current ) ; current = "" ; } } else { current += s [ i ] ; } } return words ; }
function RoundedAvg ( n , m ) { if ( n > m ) { return "-1" ; } let num = Math . floor ( ( m + n ) / 2 ) ; let ret = [ ] ; while ( num > 0 ) { ret . push ( ( num % 2 ) . toString ( ) ) ; num = Math . floor ( num / 2 ) ; } return ret ; }
function UniqueDigits ( x ) { let digits = [ ] ; for ( let n = 0 ; n < x . length ; n ++ ) { let is_unique = true ; for ( let c = 0 ; c < n . length ; c ++ ) { if ( x [ n ] % 2 == 0 ) { is_unique = false ; break ; } } if ( is_unique ) { digits . push ( n ) ; } } return digits ; }
function CountNums ( arr ) { let num = 0 ; for ( let n = 0 ; n < 0 ? - 1 : 1 ; n = Math . abs ( n ) ; let digits = [ ] ; for ( let c = 0 ; c < n . length ; c ++ ) { digits . push ( n . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ) ; } digits [ 0 ] *= neg ; let sum = 0 ; for ( let d of digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; }
function MoveOneBall ( arr ) { if ( arr . length === 0 ) { return true ; } let num = 0 ; for ( let i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ arr . length - 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; }
function Exchange ( lst1 , lst2 ) { let odd = 0 ; let even = 0 ; for ( let n = 0 ; n < lst1 . length ; n ++ ) { if ( lst1 [ n ] % 2 == 1 ) { odd += 1 ; } } for ( let n of lst2 ) { if ( n % 2 == 0 ) { even += 1 ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; }
function OddCount ( lst ) { let results = [ ] ; let original_str = "the number of odd elements in▁input▁i▁of▁the▁input▁" ; for ( let s = 0 ; s < lst . length ; s ++ ) { let sum = 0 ; for ( let d = 0 ; d < s . length ; d ++ ) { if ( isdigit ( s [ d ] ) && d % 2 == 1 ) { sum += 1 ; } } let result = [ ] ; for ( let c = original_str [ c ] ) { if ( c == "i" ) { result += ( sum ) . toString ( ) ; } else { result += c ; } } results . push ( result ) ; } return results ; }
function MinSubArraySum ( nums ) { let min_sum = Math . max ( ... nums ) ; let sum = 0 ; for ( let num = 0 ; num < nums . length ; num ++ ) { sum += num ; if ( min_sum > sum ) { min_sum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return min_sum ; }
function MaxFill ( grid , capacity ) { let res = 0 ; for ( let well of grid ) { let sum = 0 ; for ( let n = 0 ; n < well . length ; n ++ ) { sum += well [ n ] ; } if ( sum > 0 ) { res += parseInt ( ( sum - 1 ) / capacity + 1 ) ; } } return res ; }
function SelectWords ( s , n ) { var vowels = "aeiouAEIOU" ; var current = "" ; var result = [ ] ; var consonant_num = 0 ; for ( var i = 0 ; i <= s . length ; i ++ ) { if ( i == s . length || s [ i ] == "▁" ) { if ( consonant_num == n ) { result . push ( current ) ; } current . clear ( ) ; consonant_num = 0 ; } else { current += s [ i ] ; if ( vowels . indexOf ( s [ i ] ) == 0 ) { consonant_num += 1 ; } } } return result ; }
function Solution ( lst ) { let sum = 0 ; for ( let i = 0 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 1 ) { sum += lst [ i ] ; } } return sum ; }
function AddElements ( arr , k ) { let sum = 0 ; for ( let i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= - 99 && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; }
function GetOddCollatz ( n ) { let odd_collatz = [ ] ; while ( n != 1 ) { if ( n % 2 == 1 ) { odd_collatz . push ( n ) ; n = n * 3 + 1 ; } else { n = parseInt ( n / 2 ) ; } } odd_collatz . push ( 1 ) ; odd_collatz . sort ( ( a , b ) => a - b ) ; return odd_collatz ; }
function IsSorted ( lst ) { for ( var i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; }
function Intersection ( interval1 , interval2 ) { let inter1 = Math . max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; let inter2 = Math . min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; let l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( let i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return "NO" ; } } return "YES" ; }
function ProdSigns ( arr ) { if ( arr . length === 0 ) { return - 32768 ; } let sum = 0 ; let prods = 1 ; for ( let i = 0 ; i < arr . length ; i ++ ) { sum += Math . abs ( arr [ i ] ) ; if ( i == 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; }
function MinPath ( grid , k ) { let n = grid . length ; let min_num = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { let tmp = [ ] ; if ( i != 0 ) { tmp . push ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . push ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . push ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . push ( grid [ i ] [ j + 1 ] ) ; } min_num = Math . min ( tmp [ 0 ] , tmp [ 1 ] ) ; } } } let ans = [ ] ; for ( let i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . push ( 1 ) ; } else { ans . push ( min_num ) ; } } return ans ; }
function Digits ( n ) { let prod = 0 ; for ( let i = 0 ; i < n . length ; i ++ ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) { prod = 1 ; } prod *= digit - "0" ; } } return prod ; }
function IsNested ( s ) { let count = 0 ; let max_count = 0 ; for ( let ch = 0 ; ch < s . length ; ch ++ ) { if ( ch == "[" ) { count += 1 ; } if ( ch == "]" ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > max_count ) { max_count = count ; } if ( count <= max_count - 2 ) { return true ; } } return false ; }
function SumSquares ( lst ) { let sum = 0 ; for ( let i = 0 ; i < lst . length ; i ++ ) { sum += Math . ceil ( i ) * Math . ceil ( i ) ; } return sum ; }
function CanArrange ( arr ) { let index = - 1 ; for ( let i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
function LargestSmallestIntegers ( lst ) { let max_neg = 0 , min_pos = 0 ; for ( let n = 0 ; n < lst . length ; n ++ ) { if ( lst [ n ] < 0 && ( max_neg == 0 || n > max_neg ) ) { max_neg = n ; } if ( n > 0 && ( min_pos == 0 || n < min_pos ) ) { min_pos = n ; } } return [ max_neg , min_pos ] ; }
function FixSpaces ( text ) { var res = "" ; var space_len = 0 ; for ( var i = 0 ; i <= text . length ; i ++ ) { if ( i == text . length || text [ i ] != "▁" ) { if ( space_len == 1 ) { res += "_" ; } if ( space_len == 2 ) { res += "__" ; } if ( space_len > 2 ) { res += "-" ; } space_len = 0 ; if ( i != text . length ) { res += text [ i ] ; } } else { space_len += 1 ; } } return res ; }
function FileNameCheck ( file_name ) { let digit_num = 0 , dot_num = 0 ; if ( file_name . length < 5 || ! isalpha ( file_name [ 0 ] ) ) { return "No" ; } let suffix = file_name . substring ( 0 , file_name . length - 4 ) ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) { return "No" ; } for ( let c = 0 ; c < file_name . length ; c ++ ) { if ( isdigit ( c ) ) { digit_num += 1 ; } if ( c == "." ) { dot_num += 1 ; } } if ( digit_num > 3 || dot_num != 1 ) { return "No" ; } return "Yes" ; }
function SumSquares ( lst ) { let sum = 0 ; for ( let i = 0 ; i < lst . length ; i ++ ) { if ( i % 3 == 0 ) { sum += lst [ i ] * lst [ i ] ; } else if ( i % 4 == 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else { sum += lst [ i ] ; } } return sum ; }
function WordsInSentence ( sentence ) { var result = "" ; var current = "" ; for ( var i = 0 ; i <= sentence . length ; i ++ ) { if ( i == sentence . length || sentence [ i ] == "▁" ) { var is_prime = true ; var l = current . length ; if ( l < 2 ) { is_prime = false ; } for ( var j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { result += current + "▁" ; } current = "" ; } else { current += sentence [ i ] ; } } if ( result . length > 0 ) { result = result . substring ( 0 , sentence . length ) ; } return result ; }
function Simplify ( x , n ) { var a = 0 , b = 0 , c = 0 , d = 0 ; for ( var i = 0 ; i < x . length ; i ++ ) { if ( x [ i ] == "/" ) { a = parseInt ( x . substring ( 0 , i ) ) ; b = parseInt ( x . substring ( i + 1 ) ) ; } } for ( var i = 0 ; i < n . length ; i ++ ) { if ( n [ i ] == "/" ) { c = parseInt ( n . substring ( 0 , i ) ) ; d = parseInt ( n . substring ( i + 1 ) ) ; } } return ( a * c ) % ( b * d ) == 0 ; }
function SpecialFilter ( nums ) { let count = 0 ; for ( let num = 0 ; num < nums . length ; num ++ ) { if ( num > 10 ) { let w = ( num ) . toString ( ) ; if ( w [ 0 ] % 2 == 1 && w [ w . length - 1 ] % 2 == 1 ) { count += 1 ; } } } return count ; }
function GetMatrixTriples ( n ) { let arr = [ ] ; for ( let i = 1 ; i <= n ; i ++ ) { arr . push ( i * i - i + 1 ) ; } let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { for ( let k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) { count += 1 ; } } } } return count ; }
function DoubleTheDifference ( lst ) { let sum = 0 ; for ( let d = 0 ; d < lst . length ; d ++ ) { let num = Math . round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) { sum += num * num ; } } } return sum ; }
function Compare ( game , guess ) { let result = [ ] ; for ( let i = 0 ; i < game . length ; i ++ ) { result . push ( Math . abs ( game [ i ] - guess [ i ] ) ) ; } return result ; }
function StrongestExtension ( class_name , extensions ) { let strongest = "" ; let max = Number . MIN_VALUE ; for ( let extension of extensions ) { let strength = 0 ; for ( let chr of extension ) { if ( isupper ( chr ) ) { strength += 1 ; } if ( islower ( chr ) ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return class_name + "." + strongest ; }
function IntToMiniRoman ( number ) { let num = [ 1000 , 900 , 500 , 400 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 ] ; let sym = [ "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" ] ; let pos = 0 ; let res = "" ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res += sym [ pos ] ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } return res ; }
function Eat ( number , need , remaining ) { return need > remaining ? vector < int > { number + remaining , 0 } : vector < int > { number + need , remaining - need } ; }
function DoAlgebra ( ops , operands ) { let nums = new Array ( operands ) ; let current_ops = new Array ( ops ) ; let i = current_ops . length - 1 ; while ( i >= 0 ) { if ( current_ops [ i ] == "**" ) { nums [ i ] = Math . pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . delete ( nums . begin ( ) + i + 1 ) ; current_ops . delete ( current_ops . begin ( ) + i ) ; } i -- ; } i = 0 ; while ( i < current_ops . length ) { if ( current_ops [ i ] == "*" ) { nums [ i ] *= nums [ i + 1 ] ; nums . delete ( nums . begin ( ) + i + 1 ) ; current_ops . delete ( current_ops . begin ( ) + i ) ; } else if ( current_ops [ i ] == "//" ) { nums [ i ] = Math . floor ( nums . begin ( ) + i + 1 ) ; nums . delete ( current_ops [ i ] ) ; } else { i ++ ; } } i = 0 ; while ( i < current_ops . length ) { if ( current_ops [ i ] == "+" ) { nums [ i ] += nums [ i + 1 ] ; nums . delete ( nums . begin ( ) + i + 1 ) ; current_ops . delete ( current_ops [ i ] ) ; } else { i ++ ; } } return nums [ 0 ] ; }
function GenerateIntegers ( a , b ) { let lower = Math . max ( 2 , Math . min ( a , b ) ) ; let upper = Math . min ( 8 , Math . max ( a , b ) ) ; let result = [ ] ; for ( let i = lower ; i <= upper ; i += 2 ) { result . push ( i ) ; } return result ; }
function IsStepNum ( n ) { let prev_digit = - 1 ; while ( n > 0 ) { let cur_digit = n % 10 ; if ( prev_digit == - 1 ) { prev_digit = cur_digit ; } else { if ( Math . abs ( prev_digit - cur_digit ) != 1 ) { return false ; } } prev_digit = cur_digit ; n /= 10 ; } return true ; }
function NumOfWays ( n , k ) { let p = 1 ; if ( k % 2 ) { p = - 1 ; } return ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; }
function FindDivisors ( n ) { let v = [ ] ; for ( let i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { v . push ( i ) ; } else { v . push ( i ) ; v . push ( n / i ) ; } } } return v ; }
function EggDrop ( n , k ) { if ( k == 1 || k == 0 ) { return k ; } if ( n == 1 ) { return k ; } let min = Number . MAX_VALUE ; for ( let x = 1 ; x <= k ; x ++ ) { let res = Math . max ( EggDrop ( n - 1 , x - 1 ) , EggDrop ( n , k - x ) ) ; if ( res < min ) { min = res ; } } return min + 1 ; }
function IsPowerOfTwo ( n ) { if ( n == 0 ) { return false ; } return Math . ceil ( Math . log2 ( n ) ) == Math . floor ( Math . log2 ( n ) ) ; }
function ShortestPalindrome ( s ) { let n = s . length ; let v = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { let l = i ; let r = i ; let ans1 = "" ; let ans2 = "" ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans1 += s [ l ] ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans2 += s [ l ] ; l -- ; r ++ ; } v . push ( ans1 ) ; v . push ( ans2 ) ; } let ans = v [ 0 ] ; for ( let i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] != "" ) { ans = Math . min ( ans , v [ i ] ) ; } } return ans ; }
function MinimumAdjacentDifference ( a , n , k ) { let min_diff = Number . MAX_VALUE ; for ( let i = 0 ; i <= k ; i ++ ) { let max_diff = Number . MIN_VALUE ; for ( let j = 0 ; j < n - k - 1 ; j ++ ) { for ( let p = i ; p <= i + j ; p ++ ) { max_diff = Math . max ( max_diff , a [ p + 1 ] - a [ p ] ) ; } } min_diff = Math . min ( min_diff , max_diff ) ; } return min_diff ; }
function Cal ( a , mid ) { let chocolate = 0 ; for ( let i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] >= mid ) { chocolate += a [ i ] - mid ; } } return chocolate ; }
function Check ( v , a , m ) { let tec = 0 , ans = 0 ; let b = Array ( a . length + 3 ) . fill ( 0 ) ; for ( let i = 0 ; i < a . length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { let mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; }
function LargestNum ( arr ) { var res = 0 ; arr . sort ( ) ; var l = 0 , r = arr . length - 1 ; while ( l < r ) { var sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) { l ++ ; } else { r -- ; } } return res ; }
function BinarySearch ( p , n ) { let i = 0 ; let j = p . length - 1 ; let index = - 1 ; while ( i <= j ) { let mid = i + parseInt ( ( j - i ) / 2 , 10 ) ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
function FindMinLength ( arr ) { let index = arr . length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; }
function MinDigits ( n , k ) { let digits_num = Math . floor ( Math . log10 ( n ) + 1 ) ; let temp_sum = 0 ; let temp = digits_num ; let result = 0 ; let x = 0 , v ; let sum = 0 ; let num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 = Math . floor ( num2 / 10 ) ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = n / Math . pow ( 10 , temp - 1 ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v /= 10 ; v ++ ; result = v * Math . pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; }
function CheckForPerfectSquare ( arr , i , j ) { let mid , sum = 0 ; for ( let m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } let low = 0 , high = Math . floor ( sum / 2 ) ; while ( low <= high ) { mid = low + parseInt ( ( high - low ) / 2 ) ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; }
function MinFlips ( mat , s ) { let n = mat . length ; let m = mat [ 0 ] . length ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s [ i + j ] - "0" ) { count ++ ; } } } return count ; }
function ConstructTree ( n , edges ) { let adjl = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { adjl . push ( [ ] ) ; } for ( let e of edges ) { let u = e [ 0 ] ; let v = e [ 1 ] ; adjl [ u ] . push ( v ) ; adjl [ v ] . push ( u ) ; } return adjl ; }
function FindSumOfValues ( v , parent , values_children ) { let cur_node = v ; let sum = 0 ; while ( cur_node != - 1 ) { sum += values_children [ cur_node ] ; cur_node = parent [ cur_node ] ; } return sum ; }
function GetDistinct ( d , count ) { let num = 0 ; count = Math . pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count = Math . floor ( count / 10 ) ; } return num ; }
function IsIncreasing ( arr ) { for ( var i = 0 ; i < arr . length - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; }
function MinAdjSwaps ( mat ) { let n = mat . length ; let cnt_zero = Array ( n ) ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = n - 1 ; j >= 0 && mat [ i ] [ j ] == 0 ; j -- ) { cnt_zero [ i ] ++ ; } } let cnt_swaps = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( cnt_zero [ i ] < ( n - i - 1 ) ) { let first = i ; while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) { return - 1 ; } while ( first > i ) { let temp = cnt_zero [ first ] ; cnt_zero [ first ] = cnt_zero [ first - 1 ] ; first -- ; cnt_swaps ++ ; } } } return cnt_swaps ; }
function Solve ( values , salary , mod ) { let ret = 1 ; let amt = 0 ; values . sort ( function ( a , b ) { return a - b } ) ; salary . sort ( function ( a , b ) { return a - b } ) ; while ( salary . length > 0 ) { while ( values . length > 0 && values [ values . length - 1 ] >= salary [ salary . length - 1 ] ) { amt ++ ; values . pop ( ) ; } if ( amt == 0 ) { return 0 ; } ret *= amt -- ; ret %= mod ; salary . pop ( ) ; } return ret ; }
function OrganizeInOrder ( vec , op , n ) { let result = new Array ( n ) ; vec . sort ( function ( a , b ) { return a - b } ) ; let i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == "<" ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; }
function CountPoints ( n , m , a , b , x , y ) { a . sort ( function ( a , b ) { return a - b } ) ; b . sort ( function ( a , b ) { return a - b } ) ; let j = 0 ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; }
function AreSame ( a , b ) { a . sort ( function ( a , b ) { return a - b } ) ; b . sort ( function ( a , b ) { return a - b } ) ; return a == b ; }
function CountNumberOfStrings ( s ) { let n = s . length - 1 ; let count = Math . pow ( 2 , n ) ; return count ; }
function PrimePower ( x ) { let prime_pow = [ ] ; for ( let i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { let p = 1 ; while ( x % i == 0 ) { x = parseInt ( x / i , 10 ) ; p *= i ; } prime_pow . push ( p ) ; } } if ( x > 1 ) { prime_pow . push ( x ) ; } return prime_pow ; }
function IsPerfect ( n0 ) { var n = Math . sqrt ( n0 ) ; if ( Math . floor ( n ) != Math . ceil ( n ) ) { return false ; } return true ; }
function FindSum ( l , r ) { var arr = [ ] ; var i = 0 ; var x = 2 ; while ( i <= r ) { arr . push ( i + x ) ; if ( i + 1 <= r ) { arr . push ( i + 1 + x ) ; } x *= - 1 ; i += 2 ; } var sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr [ i ] ; } return sum ; }
function Results ( n , k ) { return Math . round ( Math . pow ( n , 1.0 / Math . pow ( 2 , k ) ) ) ; }
function Factors ( n ) { let v = [ ] ; v . push ( 1 ) ; for ( let i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . push ( i ) ; if ( n / i != i ) { v . push ( n / i ) ; } } } return v ; }
function SmallestNum ( n ) { let x = Math . pow ( 10.0 , ( n - 1 ) / 2.0 ) ; return parseInt ( x ) ; }
function Smallest ( s ) { let a = new Array ( s . length ) . fill ( 0 ) ; for ( let i = 0 ; i < s . length ; i ++ ) { a [ i ] = s [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ; } let b = [ ] ; for ( let i = 0 ; i < a . length ; i ++ ) { if ( ( a [ i ] . charCodeAt ( 0 ) ) % 2 != 0 ) { b . push ( a [ i ] ) ; } } b . sort ( ( a , b ) => a - b ) ; if ( b . length > 1 ) { return b [ 0 ] * 10 + b [ 1 ] ; } return - 1 ; }
function Diagonals ( a , b , c , d ) { var p = parseFloat ( Math . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; var q = parseFloat ( Math . sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return [ p , q ] ; }
function FindNumberOfDigits ( n , bas ) { let dig = Math . floor ( Math . log ( n ) / Math . log ( bas ) ) + 1 ; return dig ; }
function NGon ( n ) { let pro_angle_var ; if ( n % 4 == 0 ) { pro_angle_var = numbers :: pi * ( 180.0 / n ) / 180 ; } else { pro_angle_var = numbers :: pi * ( 180.0 / ( 2 * n ) ) / 180 ; } let neg_x = 1.0e+99 , pos_x = - 1.0e+99 , neg_y = 1.0e+99 , pos_y = - 1.0e+99 ; for ( let j = 0 ; j < n ; ++ j ) { let px = Math . cos ( 2 * numbers :: pi * j / n + pro_angle_var ) ; let py = Math . sin ( 2 * numbers :: pi * j / n + pro_angle_var ) ; neg_x = Math . min ( neg_x , px ) ; pos_x = Math . max ( pos_x , px ) ; neg_y = Math . min ( neg_y , py ) ; pos_y = Math . max ( pos_y , py ) ; } let opt2 = Math . max ( pos_x - neg_x , pos_y - neg_y ) ; return opt2 / Math . sin ( numbers :: pi / n ) / 2 ; }
function FindMaxK ( n ) { let p = Math . log ( n ) / Math . log ( 2 ) ; return Math . pow ( 2 , p ) ; }
function NthFibo ( n ) { let a = ( Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; let b = ( - 1 * Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; let r = Math . pow ( 5 , 0.5 ) ; let ans = ( Math . pow ( a , n ) - Math . pow ( b , n ) ) / r ; return ans ; }
function FindProb ( l , r ) { var count_of_ps = Math . floor ( Math . sqrt ( r ) ) - Math . ceil ( Math . sqrt ( l ) ) + 1 ; var total = r - l + 1 ; var prob = count_of_ps / total ; return prob ; }
function PreviousFibonacci ( n ) { let a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return parseInt ( a ) ; }
function DistPrime ( arr , all_primes ) { let list1 = [ ] ; for ( let i of all_primes ) { for ( let j of arr ) { if ( j % i == 0 ) { list1 . push ( i ) ; break ; } } } return list1 ; }
function GetArray ( n ) { let ans = [ ] ; let p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans . push ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; }
function MaximumLength ( a ) { let counts = new Array ( 11 ) . fill ( 0 ) ; let ans = 0 ; for ( let index = 0 ; index < a . length ; index ++ ) { counts [ a [ index ] ] += 1 ; let k = [ ] ; for ( let i of counts . values ( ) ) { if ( i != 0 ) { k . push ( i ) ; } } k . sort ( ( a , b ) => a - b ) ; if ( k . length == 1 || ( k [ 0 ] == k [ k . length - 2 ] && k [ k . length - 1 ] - k [ k . length - 2 ] == 1 ) || ( k [ 0 ] == 1 && k [ 1 ] == k [ k . length - 1 ] ) ) { ans = index ; } } return ans + 1 ; }
function MaxEdges ( n ) { let edges = Math . floor ( n * n / 4 ) ; return edges ; }
function FindK ( n , k ) { let a = [ ] ; for ( let i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a . push ( i ) ; } } for ( let i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a . push ( i ) ; } } return a [ k - 1 ] ; }
function IsKeith ( x , temp ) { let terms = [ ] ; let n = 0 ; while ( temp > 0 ) { terms . push ( temp % 10 ) ; temp = Math . floor ( temp / 10 ) ; n ++ ; } terms . reverse ( ) ; let next_term = 0 , i = n ; while ( next_term < x ) { next_term = 0 ; for ( let j = 1 ; j <= n ; j ++ ) { next_term += terms [ i - j ] ; } terms . push ( next_term ) ; i ++ ; } return next_term == x ; }
function Factors ( n , k ) { let v = [ ] ; while ( n % 2 == 0 ) { v . push ( 2 ) ; n = parseInt ( n / 2 ) ; } if ( v . length >= k ) { return true ; } for ( let i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n = parseInt ( n / i ) ; v . push ( i ) ; } if ( v . length >= k ) { return true ; } } if ( n > 2 ) { v . push ( n ) ; } if ( v . length >= k ) { return true ; } return false ; }
function SeparateParenGroups ( paren_string ) { let all_parens = [ ] ; let current_paren = "" ; let current_depth = 0 ; for ( let c = 0 ; c < paren_string . length ; c ++ ) { if ( c == "(" ) { current_depth += 1 ; current_paren += c ; } else if ( c == ")" ) { current_depth -= 1 ; current_paren += c ; if ( current_depth == 0 ) { all_parens . push ( current_paren ) ; current_paren = [ ] ; } } } return all_parens ; }
function ParseNestedParens ( paren_string ) { let all_levels = [ ] ; let level = 0 ; let max_level = 0 ; for ( let i = 0 ; i < paren_string . length ; i ++ ) { let chr = paren_string [ i ] ; if ( chr == "(" ) { level += 1 ; if ( level > max_level ) { max_level = level ; } } if ( chr == ")" ) { level -= 1 ; if ( level == 0 ) { all_levels . push ( max_level ) ; max_level = 0 ; } } } return all_levels ; }
function FilterBySubstring ( strings , substring ) { var result = [ ] ; for ( var s of strings ) { if ( s . indexOf ( substring ) != string . npos ) { result . push ( s ) ; } } return result ; }
function RollingMax ( numbers ) { let running_max = 0 ; let result = [ ] ; for ( let n = 0 ; n < numbers . length ; n ++ ) { if ( numbers [ n ] > running_max ) { running_max = n ; } result . push ( running_max ) ; } return result ; }
function MakePalindrome ( s ) { if ( s . length === 0 ) { return "" ; } for ( var i = 0 ; i < s . length ; i ++ ) { var r_str = s . substring ( i ) ; if ( r_str === string ( r_str . rbegin ( ) , r_str . rend ( ) ) ) { var n_str = s . substring ( 0 , i ) ; var n2_str = n_str . rbegin ( ) , n_str . rend ( ) ) ; return s + n2_str ; } } return s . substring ( 0 , s . length - 1 ) + string ( s . rbegin ( ) , s . rend ( ) ) ; }
function StringXor ( a , b ) { let result = "" ; for ( let i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] == b [ i ] ) { result += "0" ; } else { result += "1" ; } } return result ; }
function Longest ( strings ) { if ( strings . length === 0 ) { return "" ; } let max_len = ranges . max ( ... strings ) ; for ( let s of strings . values ( ) ) { if ( s . length === max_len ) { return s ; } } return "" ; }
function StringSequence ( n ) { let s = "" ; for ( let i = 0 ; i < n ; i ++ ) { s += ( i ) . toString ( ) ; s += "▁" ; } s += ( n ) . toString ( ) ; return s ; }
function CountDistinctCharacter ( s ) { let distinct = new Set ( ) ; for ( let c = 0 ; c < s . length ; c ++ ) { distinct . add ( s . charAt ( c ) ) ; } return distinct . size ; }
function HowManyTimes ( s , sub ) { let times = 0 ; for ( let i = 0 ; i <= parseInt ( s . length - sub . length ) ; i ++ ) { if ( s . substr ( i , sub . length ) == sub ) { times += 1 ; } } return times ; }
function SortNumbers ( numbers ) { var to_num = new Map ( ) ; to_num . set ( "zero" , 0 ) ; for ( var i = 0 ; i < numbers . length ; i ++ ) { to_num . set ( i , 1 ) ; } else { to_num . set ( i , 2 ) ; } } var from_num = new Map ( ) ; from_num . set ( 0 , "one" ) ; for ( var i = 0 ; i < numbers . length ; i ++ ) { if ( i == numbers . length || numbers [ i ] == "▁" ) { if ( to_num . has ( current ) ) { ints . push ( to_num . get ( current ) ) ; current = [ ] ; } } else { current += numbers [ i ] ; } } ints . sort ( ( x , y ) => x - y ) ; var result ; for ( var i = 0 ; i < ints . length ; i ++ ) { result += from_num . get ( ints [ i ] ) ; if ( i != ints . length - 1 ) { result += "▁" ; } } return result ; }
function FindClosestElements ( numbers ) { let closest_pair = [ numbers [ 0 ] , numbers [ 1 ] ] ; let distance = Math . abs ( closest_pair [ 0 ] - closest_pair [ 1 ] ) ; for ( let i = 0 ; i < numbers . length ; i ++ ) { for ( let j = i + 1 ; j < numbers . length ; j ++ ) { if ( Math . abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closest_pair [ 0 ] = numbers [ i ] ; closest_pair [ 1 ] = numbers [ j ] ; distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; } } } closest_pair . sort ( ( a , b ) => a - b ) ; return closest_pair ; }
function RescaleToUnit ( numbers ) { var min_num = Math . min ( ... numbers ) ; var max_num = Math . max ( ... numbers ) ; var result = [ ] ; for ( var n of numbers ) { result . push ( ( n - min_num ) / ( max_num - min_num ) ) ; } return result ; }
function FilterIntegers ( values ) { let result = [ ] ; for ( let e of values ) { if ( e . type ( ) == typeid ( int ) ) { result . push ( ( e ) . cast ( ) ) ; } } return result ; }
function removeDuplicates ( numbers ) { var counter = new Map ( ) ; for ( var i of numbers ) { if ( counter . has ( i ) ) { counter . set ( i , counter . get ( i ) + 1 ) ; } else { counter . set ( i , 1 ) ; } } var result = [ ] ; for ( var i of numbers ) { if ( counter . has ( i ) ) { result . push ( i ) ; } } return result ; }
function FlipCase ( s ) { let result = "" ; for ( let c = 0 ; c < s . length ; c ++ ) { if ( islower ( c ) ) { result += toupper ( c ) ; } else { result += tolower ( c ) ; } } return result ; }
function FilterByPrefix ( strings , prefix ) { var result = [ ] ; for ( var i = 0 ; i < strings . length ; i ++ ) { if ( strings [ i ] . startsWith ( prefix ) ) { result . push ( strings [ i ] ) ; } } return result ; }
function FindZero ( xs ) { var ans = 0 ; var value = 0 ; for ( var i = 0 ; i < xs . length ; i ++ ) { value += xs [ i ] * Math . pow ( ans , i ) ; } while ( Math . abs ( value ) > 1e-6 ) { var driv = 0 ; for ( var i = 1 ; i < xs . length ; i ++ ) { driv += xs [ i ] * Math . pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( var i = 0 ; i < xs . length ; i ++ ) { value += xs [ i ] * Math . pow ( ans , i ) ; } } return ans ; }
function SortThird ( l ) { let thirds = [ ] ; for ( let i = 0 ; i < l . length ; i += 3 ) { thirds . push ( l [ i ] ) ; } thirds . sort ( ( a , b ) => a - b ) ; let result = [ ] ; for ( let i = 0 ; i < l . length ; i ++ ) { if ( i % 3 == 0 ) { result . push ( thirds [ i / 3 ] ) ; } else { result . push ( l [ i ] ) ; } } return result ; }
function Unique ( l ) { var s = new Set ( l . begin ( ) , l . end ( ) ) ; var result = new Set ( s . begin ( ) , s . end ( ) ) ; result . sort ( ( a , b ) => a - b ) ; return result ; }
function MaxElement ( l ) { return Math . max ( ... l ) ; }
function TriplesSumToZero ( l ) { for ( let i = 0 ; i < l . length ; i ++ ) { for ( let j = i + 1 ; j < l . length ; j ++ ) { for ( let k = j + 1 ; k < l . length ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) { return true ; } } } } return false ; }
function Fib4 ( n ) { let results = [ 0 , 0 , 2 , 0 ] ; for ( let i = 4 ; i <= n ; i ++ ) { results . push ( results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ) ; } return results [ n ] ; }
function IsPalindrome ( text ) { var pr = text . substring ( 0 , text . length - 1 ) ; return pr == text ; }
function RemoveVowels ( text ) { let result = "" ; let vowels = "aeiou" ; for ( let ch = 0 ; ch < text . length ; ch ++ ) { if ( vowels . includes ( tolower ( ch ) ) == true ) { result += ch ; } } return result ; }
function SameChars ( s0 , s1 ) { let set0 = new Set ( ) ; for ( let c = 0 ; c < s0 . length ; c ++ ) { set0 . add ( c ) ; } let set1 = new Set ( ) ; for ( let c = 0 ; c < s1 . length ; c ++ ) { set1 . add ( c ) ; } return set0 == set1 ; }
function Common ( l1 , l2 ) { let us = new Set ( ) ; for ( let e1 = 0 ; e1 < l1 . length ; e1 ++ ) { for ( let e2 = 0 ; e2 < l2 . length ; e2 ++ ) { if ( e1 == e2 ) { us . add ( e1 ) ; } } } let ret = new Set ( us . values ( ) ) ; ret . sort ( function ( a , b ) { return a - b } ) ; return ret ; }
function CorrectBracketing ( brackets ) { let depth = 0 ; for ( let b = 0 ; b < brackets . length ; b ++ ) { if ( b == "(" ) { depth += 1 ; } if ( b == ")" ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
function CircularShift ( x , shift ) { let xs = x . toString ( ) ; if ( shift > xs . length ) { return xs . substring ( 0 , xs . length - shift ) + xs . substring ( 0 , xs . length - shift ) ; } return xs . substring ( xs . length - shift ) + xs . substring ( 0 , xs . length - shift ) ; }
function Search ( lst ) { var counter = new Map ( ) ; for ( var i of lst ) { if ( counter . has ( i ) ) { counter . set ( i , counter . get ( i ) + 1 ) } else { counter . set ( i , 1 ) } } var ans = - 1 ; for ( var key , value ) of counter . entries ( ) ) { if ( value >= key && key > ans ) { ans = key ; } } return ans ; }
function SmallestChange ( arr ) { let ans = 0 ; for ( let i = 0 ; i < parseInt ( arr . length / 2 , 10 ) ; i ++ ) { if ( arr [ i ] != arr [ arr . length - i - 1 ] ) { ans += 1 ; } } return ans ; }
function TotalMatch ( lst1 , lst2 ) { let sum1 = 0 ; for ( let st of lst1 ) { sum1 += st . length ; } let sum2 = 0 ; for ( let st of lst2 ) { sum2 += st . length ; } return sum1 > sum2 ? lst2 : lst1 ; }
function IsHappy ( s ) { if ( s . length < 3 ) { return false ; } for ( let i = 0 ; i < s . length - 2 ; i ++ ) { if ( s [ i ] == s [ i + 1 ] || s [ i ] == s [ i + 2 ] || s [ i + 1 ] == s [ i + 2 ] ) { return false ; } } return true ; }
function NumericalLetterGrade ( grades ) { let letter_grade = [ ] ; for ( let gpa of grades ) { if ( gpa == 4.0 ) { letter_grade . push ( "A+" ) ; } else if ( gpa > 3.7 ) { letter_grade . push ( "A" ) ; } else if ( gpa > 3.3 ) { letter_grade . push ( "A-" ) ; } else if ( gpa > 3.0 ) { letter_grade . push ( "B+" ) ; } else if ( gpa > 2.7 ) { letter_grade . push ( "B" ) ; } else if ( gpa > 2.3 ) { letter_grade . push ( "B-" ) ; } else if ( gpa > 2.0 ) { letter_grade . push ( "C+" ) ; } else if ( gpa > 1.7 ) { letter_grade . push ( "C" ) ; } else if ( gpa > 1.3 ) { letter_grade . push ( "C-" ) ; } else if ( gpa > 1.0 ) { letter_grade . push ( "D+" ) ; } else if ( gpa > 0.7 ) { letter_grade . push ( "D" ) ; } else if ( gpa > 0.0 ) { letter_grade . push ( "D-" ) ; } else { letter_grade . push ( "E" ) ; } } return letter_grade ; }
function Solve ( n ) { let bi_str = [ ] ; let sum = 0 ; for ( let c = 0 ; c < n . length ; c ++ ) { sum += n [ c ] - "0" ; } while ( sum > 0 ) { bi_str . push ( ( sum % 2 ) . toString ( ) ) ; sum = Math . floor ( sum / 2 ) ; } return bi_str ; }
function AntiShuffle ( s ) { let ret = "" ; let current = [ ] ; for ( let i = 0 ; i <= s . length ; i ++ ) { if ( i == s . length || s [ i ] == "▁" ) { current . sort ( function ( a , b ) { return a - b } ) ; if ( ret . length != 0 ) { ret += "▁" ; } ret += current ; current = [ ] ; } else { current += s [ i ] ; } } return ret ; }
function SortArray ( array ) { if ( array . length == 0 ) { return array ; } if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) { array . sort ( function ( a , b ) { return a - b ; } ) ; } else { array . sort ( function ( a , b ) { return a - b ; } ) ; } return array ; }
function Encrypt ( s ) { let ans = "" ; for ( let c = 0 ; c < s . length ; c ++ ) { if ( isalpha ( c ) ) { ans += String . fromCharCode ( "a" . charCodeAt ( 0 ) + ( c . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) + 4 ) % 26 ) ; } else { ans += String . fromCharCode ( c . charCodeAt ( 0 ) + 4 ) % 26 ; } } return ans ; }
function IsBored ( s ) { var is_start = true ; var sum = 0 ; for ( var i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] == "." || s [ i ] == '?' || s [ i ] == '!' ) { is_start = true ; } else if ( is_start ) { if ( s [ i ] == "▁" ) { continue ; } if ( s . substring ( i , 2 ) == "I▁" ) { sum += 1 ; } is_start = false ; } } return sum ; }
function Encode ( message ) { let vowels = "aeiouAEIOU" ; let ret = "" ; for ( let c = 0 ; c < message . length ; c ++ ) { if ( isupper ( c ) ) { c = tolower ( c ) ; if ( vowels . has ( c ) ) { c = "a" + ( c - "a" + 2 ) % 26 ; } } else if ( islower ( c ) ) { c = toupper ( c ) ; if ( vowels . has ( c ) ) { c = "A" + ( c - "A" + 2 ) % 26 ; } } ret += c ; } return ret ; }
function Skjkasdkd ( lst ) { let largest = 0 ; for ( let n = 0 ; n < lst . length ; n ++ ) { if ( n > largest ) { let prime = true ; for ( let i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } let sum = 0 ; let s = largest . toString ( ) ; for ( let i = 0 ; i < s . length ; i ++ ) { sum += s [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ; } return sum ; }
function CheckDictCase ( dict ) { if ( dict . isEmpty ( ) ) { return false ; } let is_lower = 0 ; let is_upper = 0 ; for ( let key , value ) { for ( let c = 0 ; c < key . length ; c ++ ) { if ( islower ( key [ c ] ) ) { is_lower = 1 ; } else if ( isupper ( key [ c ] ) ) { is_upper = 1 ; } else { return false ; } } } return is_lower + is_upper == 1 ; }
function Multiply ( a , b ) { return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ; }
function CountUpper ( s ) { let u_vowel = "AEIOU" ; let count = 0 ; for ( let i = 0 ; i < s . length ; i += 2 ) { if ( u_vowel . has ( s [ i ] ) ) { count += 1 ; } } return count ; }
function ByLength ( arr ) { var num_to = new Map ( ) ; num_to . set ( 1 , "One" ) ; num_to . set ( 2 , "Two" ) ; num_to . set ( 3 , "Three" ) ; num_to . set ( 4 , "Four" ) ; { 5 , "Five" } , { 6 , "Six" } , { 7 , "Seven" ] , { 8 , "Eight" ] , { 9 , "Nine" } } ; var sorted_arr = arr . sort ( ) ; arr . reverse ( ) ; var new_arr = [ ] ; for ( var n of sorted_arr ) { if ( n >= 1 && n <= 9 ) { new_arr . push ( num_to . get ( n ) ) ; } } return new_arr ; }
function f ( n ) { let sum = 0 ; let prod = 1 ; let result = [ ] ; for ( let i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) { result . push ( prod ) ; } else { result . push ( sum ) ; } } return result ; }
function EvenOddPalindrome ( n ) { let even_count = 0 , odd_count = 0 ; for ( let i = 1 ; i <= n ; i ++ ) { let s = i . toString ( ) ; let r_str = ( s [ 0 ] == "▁" ) ? s [ 1 ] : s [ 0 ] ; if ( s == r_str ) { if ( i % 2 == 1 ) { odd_count += 1 ; } else { even_count += 1 ; } } } return [ even_count , odd_count ] ; }
function Histogram ( test ) { var count = new Map ( ) ; var max = 0 ; for ( var i = 0 ; i < test . length ; i ++ ) { if ( test [ i ] != "▁" ) { count . set ( test [ i ] , count . get ( test [ i ] ) + 1 ) ; if ( count . has ( test [ i ] ) ) { max = count . get ( test [ i ] ) ; } } } var result = new Map ( ) ; for ( var key , value ) { if ( value == max ) { result . set ( key , value ) ; } } return result ; }
function ReverseDelete ( s , c ) { let ret = s . toString ( ) ; for ( let ch = 0 ; ch < s . length ; ch ++ ) { if ( c . indexOf ( ch ) == 0 ) { ret += ch ; } } let flag = "False" ; if ( ret == string ( ret . rbegin ( ) , ret . rend ( ) ) ) { flag = "True" ; } return [ ret , flag ] ; }
function SortArray ( arr ) { let bin = new Array ( ) ; for ( let i = 0 ; i < arr . length ; i ++ ) { let b = 0 ; let n = Math . abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n = Math . floor ( n / 2 ) ; } bin . push ( b ) ; } for ( let i = 0 ; i < arr . length ; i ++ ) { for ( let j = 1 ; j < arr . length ; j ++ ) { if ( bin [ j ] < bin [ j - 1 ] || ( bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) ) { let temp1 = bin [ j ] ; bin [ j ] = temp2 ; arr [ j ] = temp1 ; arr [ j - 1 ] = temp2 ; } } } return arr ; }
function GetClosestVowel ( word ) { var vowels = "AEIOUaeiou" ; for ( var i = word . length - 2 ; i > 0 ; i -- ) { if ( vowels . find ( word [ i ] ) != string :: npos && vowels . find ( word [ i + 1 ] ) == string :: npos && vowels . find ( word [ i - 1 ] ) == string :: npos ) { return String ( 1 , word [ i ] ) ; } } return "" ; }
function MatchParens ( lst ) { let strings = [ lst [ 0 ] + lst [ 1 ] , lst [ 1 ] + lst [ 0 ] ] ; for ( let l of strings ) { let count = 0 ; for ( let c = 0 ; c < l . length ; c ++ ) { if ( l [ c ] == "(" ) { count += 1 ; } if ( l [ c ] == ")" ) { count -= 1 ; } if ( count < 0 ) { break ; } } if ( count == 0 ) { return "Yes" ; } } return "No" ; }
function Maximum ( arr , k ) { if ( k == 0 ) { return [ ] ; } arr . sort ( ( a , b ) => a - b ) ; return new Array ( arr . length - k , arr . length ) ; }
function ValidDate ( date ) { if ( date . length != 10 ) { return false ; } for ( let i = 0 ; i < 10 ; i ++ ) { if ( i == 2 || i == 5 ) { if ( date [ i ] != "-" ) { return false ; } } else if ( ! isdigit ( date [ i ] ) ) { return false ; } } let month = parseInt ( date . substr ( 0 , 2 ) ) ; let day = parseInt ( date . substr ( 3 , 2 ) ) ; let year = parseInt ( date . substr ( 6 , 4 ) ) ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) { return false ; } if ( day == 30 && month == 2 ) { return false ; } return true ; }
function SplitWords ( txt ) { let current = [ ] ; let result = [ ] ; if ( txt . indexOf ( "▁" ) != string :: npos ) { for ( let i = 0 ; i <= txt . length ; i ++ ) { if ( i == txt . length || txt [ i ] == "▁" ) { if ( current . length > 0 ) { result . push ( current ) ; } current . clear ( ) ; } else { current += txt [ i ] ; } } return result ; } if ( txt . indexOf ( "," ) != string :: npos ) { for ( let i = 0 ; i <= txt . length ; i ++ ) { if ( i == txt . length || txt [ i ] == "," ) { if ( current . length > 0 ) { result . push ( current ) ; } current . clear ( ) ; } else { current += txt [ i ] ; } } return result ; } let num = 0 ; for ( let c = 0 ; c < txt . length ; c ++ ) { if ( islower ( c ) && c % 2 == 0 ) { num += 1 ; } } return [ ( num ) ] ; }
function Tri ( n ) { if ( n == 0 ) { return [ 1 ] ; } let tris = [ 1 , 3 ] ; for ( let i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { tris . push ( parseInt ( i / 2 ) + 1 ) ; } else { tris . push ( tris [ i - 1 ] + tris [ i - 2 ] + parseInt ( ( i + 3 ) / 2 ) ) ; } } return tris ; }
function CheckIfLastCharIsALetter ( txt ) { if ( txt . length === 0 ) { return false ; } return isalpha ( txt [ txt . length - 1 ] ) && ( txt . length === 1 || ! isalpha ( txt [ txt . length - 2 ] ) ) ; }
function OrderByPoints ( nums ) { let result = [ ] ; for ( let num = 0 ; num < nums . length ; num ++ ) { let w = ( Math . abs ( num ) ) . toString ( ) ; let sum = 0 ; for ( let c = 0 ; c < w . length ; c ++ ) { sum += w [ c ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ; } if ( num < 0 ) { sum -= 2 * ( w [ 0 ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ) ; } result . push ( sum ) ; } for ( let i = 0 ; i < nums . length ; i ++ ) { for ( let j = 1 ; j < nums . length ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { let temp = result [ j ] ; result [ j ] = result [ j - 1 ] ; result [ j - 1 ] = temp ; nums [ j ] = temp ; } } } return nums ; }
function Bf ( planet1 , planet2 ) { var planets = [ "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" ] ; var it1 = find ( planets . begin ( ) , planets . end ( ) , planet1 ) ; var idx1 = it1 == planets . end ( ) ? - 1 : it1 - planets . begin ( ) ; var it2 = find ( planets . begin ( ) , planets . end ( ) , planet2 ) ; var idx2 = it2 == planets . end ( ) ? - 1 : it2 - planets . begin ( ) ; if ( idx1 == - 1 || idx2 == - 1 || idx1 == idx2 ) { return { } ; } return idx1 > idx2 ? vector < string > ( planets . begin ( ) + idx2 + 1 , planets . begin ( ) + idx1 ) : vector < string > ( planets . begin ( ) + idx1 + 1 , planets . begin ( ) + idx2 ) ; }
function SortedListSum ( lst ) { var result = [ ] ; for ( var i of lst ) { if ( i . length % 2 == 0 ) { result . push ( i ) ; } } result . sort ( ( a , b ) => a - b ) ; return result ; }
function CycpatternCheck ( a , b ) { for ( var i = 0 ; i < b . length ; i ++ ) { var rotate = b . substring ( i ) + b . substring ( 0 , i ) ; if ( a . match ( rotate ) != null ) { return true ; } } return false ; }
function EvenOddCount ( num ) { let even_count = 0 , odd_count = 0 ; for ( let i = 0 ; i < Math . abs ( num ) ; i ++ ) { if ( i % 2 == 0 ) { even_count += 1 ; } else { odd_count += 1 ; } } return [ even_count , odd_count ] ; }
function FindMax ( words ) { var max ; var max_length = 0 ; for ( var word of words ) { var unique = [ ] ; for ( var w of word ) { if ( find ( unique [ 0 ] , unique [ 1 ] , w ) == unique [ 1 ] ) { unique . push ( w ) ; } } if ( unique . length > max_length || ( unique . length == max_length && word < max ) ) { max = word ; max_length = unique . length ; } } return max ; }
function Solve ( s ) { let no_letter = true ; let result = "" ; for ( let ch = 0 ; ch < s . length ; ch ++ ) { if ( isupper ( ch ) ) { ch = tolower ( ch ) ; no_letter = false ; } else if ( islower ( ch ) ) { ch = toupper ( ch ) ; no_letter = false ; } result += ch ; } if ( no_letter ) { return string ( s . rbegin ( ) , s . rend ( ) ) ; } else { return result ; } }
function MostFrequent ( arr , n ) { var hp = new Map ( ) ; for ( var i = 0 ; i < n ; i ++ ) { if ( hp . has ( arr [ i ] ) ) { hp . set ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . set ( arr [ i ] , 1 ) ; } } var max_count = 0 , res = - 1 ; for ( var entry of hp ) { if ( max_count < entry . second ) { res = entry . first ; max_count = entry . second ; } } return res ; }
function Find ( a , b , k , n1 , n2 ) { let s = new Set ( ) ; for ( let i = 0 ; i < n2 ; i ++ ) { s . add ( b [ i ] ) ; } let missing = 0 ; for ( let i = 0 ; i < n1 ; i ++ ) { if ( ! s . has ( a [ i ] ) ) { missing ++ ; } if ( missing == k ) { return a [ i ] ; } } return - 1 ; }
function SolveQuery ( start , end , arr ) { var mp = new Map ( ) ; for ( var i = start ; i <= end ; i ++ ) { if ( mp . has ( arr [ i ] ) ) { mp . set ( arr [ i ] , mp . get ( arr [ i ] ) + 1 ) } else { mp . set ( arr [ i ] , 1 ) } } var count = 0 ; for ( const [ key , value ] of mp ) { if ( key == value ) { count ++ ; } } return count ; }
function Segregate ( arr , size ) { let j = 0 ; for ( let i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { let temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; j ++ ; } } return j ; }
function CountTriplets ( a , n ) { var s = new Set ( ) ; for ( var i = 0 ; i < n ; i ++ ) { s . add ( a [ i ] ) ; } var count = 0 ; for ( var i = 0 ; i < n - 1 ; i ++ ) { for ( var j = i + 1 ; j < n ; j ++ ) { var xr = a [ i ] ^ a [ j ] ; if ( s . has ( xr ) && xr != a [ i ] && xr != a [ j ] ) { count ++ ; } } } return count / 3 ; }
function LeastFrequent ( arr , n ) { var hp = new Map ( ) ; for ( var i = 0 ; i < n ; i ++ ) { if ( hp . has ( arr [ i ] ) ) { hp . set ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . set ( arr [ i ] , 1 ) ; } } var min_count = n + 1 , res = - 1 ; for ( var entry of hp ) { if ( min_count >= entry . second ) { res = entry . first ; min_count = entry . second ; } } return res ; }
function FindPermutations ( arr ) { var cnt = 0 ; var max_ind = - 1 , min_ind = 10000000 ; var n = arr . length ; var index_of = new Map ( ) ; for ( var i = 0 ; i < n ; i ++ ) { if ( index_of . has ( arr [ i ] ) ) { index_of . set ( arr [ i ] , i + 1 ) ; } else { index_of . set ( arr [ i ] , i + 1 ) ; } } for ( var i = 1 ; i <= n ; i ++ ) { max_ind = Math . max ( max_ind , index_of [ i ] ) ; min_ind = Math . min ( min_ind , index_of [ i ] ) ; if ( max_ind - min_ind + 1 == i ) { cnt ++ ; } } return cnt ; }
function FormQuadruplets ( arr , n ) { let ans = 0 , pairs = 0 ; pairs = n / 4 ; arr . sort ( ( a , b ) => a - b ) ; for ( let i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; }
function LexicographicallyMaximum ( s , n ) { var m = new Map ( ) ; for ( var i = 0 ; i < n ; ++ i ) { if ( m . has ( s [ i ] ) ) { m . set ( s [ i ] , m . get ( s [ i ] ) + 1 ) ; } else { m . set ( s [ i ] , 1 ) ; } } var v = [ ] ; for ( var i = "a" ; i < "a" + min ( n , 25 ) ; ++ i ) { if ( m . has ( i ) ) { v . push ( i ) ; } } var j = v . length - 1 ; for ( var i = 0 ; i < n ; ++ i ) { if ( s [ i ] >= "a" + min ( n , 25 ) || ( m . has ( s [ i ] ) && m . get ( s [ i ] ) > 1 ) ) { if ( v [ j ] < s [ i ] ) { continue ; } m . set ( s [ i ] , m . get ( s [ i ] ) + v [ j ] + s . substring ( i + 1 ) ; j -- ; } if ( j < 0 ) { break ; } } var l = 0 ; for ( var i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) { break ; } if ( s [ i ] >= "a" + min ( n , 25 ) || ( m . has ( s [ i ] ) ) { m . set ( s [ i ] , m . get ( s [ i ] ) + v [ l ] + s . substring ( i + 1 ) ; l ++ ; } } return s ; }
function NoOfValidKbers ( k , arr ) { let s = new Set ( ) ; while ( k != 0 ) { s . add ( k % 10 ) ; k = parseInt ( k / 10 ) ; } let count = 0 ; for ( let i = 0 ; i < arr . length ; i ++ ) { let no = arr [ i ] ; let flag = true ; while ( no != 0 ) { let digit = no % 10 ; if ( s . has ( digit ) ) { flag = false ; break ; } no = parseInt ( no / 10 ) ; } if ( flag ) { count ++ ; } } return count ; }
function DelCost ( s , cost ) { var ans = 0 ; var for_max = { } ; var for_tot = { } ; for ( var i = 0 ; i < s . length ; i ++ ) { if ( for_max . hasOwnProperty ( s [ i ] ) ) { for_max [ s [ i ] ] = cost [ i ] ; } else { for_max [ s [ i ] ] = Math . max ( cost [ i ] , for_max [ s [ i ] ] ) ; } if ( for_tot . hasOwnProperty ( s [ i ] ) ) { for_tot [ s [ i ] ] = cost [ i ] ; } else { for_tot [ s [ i ] ] = for_tot [ s [ i ] ] + cost [ i ] ; } } for ( var i of for_max ) { ans += for_tot [ i . first ] - i . second ; } return ans ; }
function ReplaceDuplicates ( names ) { var hash = new Map ( ) ; for ( var i = 0 ; i < names . length ; i ++ ) { if ( ! hash . has ( names [ i ] ) ) { hash . set ( names [ i ] , 1 ) ; } else { var count = hash . get ( names [ i ] ) ; hash . set ( names [ i ] , hash . get ( names [ i ] ) + 1 ) ; } } return names ; }
function minmaxNumbers ( matrix , res ) { var s = new Set ( ) ; for ( var i = 0 ; i < matrix . length ; i ++ ) { var min_r = Number . MAX_VALUE ; for ( var j = 0 ; j < matrix [ i ] . length ; j ++ ) { min_r = Math . min ( min_r , matrix [ i ] [ j ] ) ; } s . add ( min_r ) ; } for ( var j = 0 ; j < matrix [ 0 ] . length ; j ++ ) { var max_c = Number . MIN_VALUE ; for ( var i = 0 ; i < matrix . length ; i ++ ) { max_c = Math . max ( max_c , matrix [ i ] [ j ] ) ; } if ( s . has ( max_c ) ) { res . push ( max_c ) ; } } return res ; }
function LengthOfLongestAp ( a , n ) { var dp = new Map ( ) ; var res = 2 ; for ( var i = 0 ; i < n ; ++ i ) { for ( var j = i + 1 ; j < n ; ++ j ) { var d = a [ j ] - a [ i ] ; if ( dp . has ( d ) ) { if ( dp [ d ] . has ( i ) ) { dp [ d ] [ j ] = dp [ d ] [ i ] + 1 ; } else { dp [ d ] [ j ] = 2 ; } } else { dp [ d ] = new Map ( ) ; dp [ d ] [ j ] = 2 ; } res = Math . max ( res , dp [ d ] [ j ] ) ; } } return res ; }
function FindKthChar ( n , k ) { let prev = "A" ; let cur ; if ( n == 1 ) { return "A" ; } for ( let j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( let i = 0 ; i < prev . length ; i ++ ) { if ( prev [ i ] == "A" ) { prev [ i ] = "B" ; } else { prev [ i ] = "A" ; } } prev = cur ; } return cur [ k - 1 ] ; }
function FindKthLargest ( s , k ) { let tmp = s . toLowerCase ( ) ; tmp . sort ( function ( a , b ) { return a - b ; } ) ; reverse ( tmp . begin ( ) , tmp . end ( ) ) ; return tmp [ k - 1 ] ; }
function SubArraylen ( arr , n , k ) { var mp = new Map ( ) ; mp . set ( arr [ 0 ] , 0 ) ; for ( var i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp . set ( arr [ i ] , i ) ; } var length = Number . MAX_VALUE ; for ( var i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) { continue ; } else { var x = arr [ i ] - k ; if ( x == 0 ) { length = Math . min ( length , i ) ; } if ( mp . has ( x ) ) { continue ; } else { length = Math . min ( length , i - mp . get ( x ) ) ; } } } return length ; }
function FindMaxLen ( a , k ) { var n = a . length ; a . sort ( ) ; var vis = Array ( n ) . fill ( false ) ; var mp = new Map ( ) ; for ( var i = 0 ; i < n ; i ++ ) { if ( ! mp . has ( a [ i ] ) ) { mp . set ( a [ i ] , i ) ; } else { mp . set ( a [ i ] , i ) ; } } var c = 0 ; for ( var i = 0 ; i < n ; ++ i ) { if ( vis [ i ] == null ) { var check = a [ i ] * k ; if ( mp . has ( check ) ) { c ++ ; vis [ mp . get ( check ) ] = true ; } } } return n - c ; }
function MinDistancePoints ( a , k , n ) { var m = new Map ( ) ; var q = [ ] ; for ( var i = 0 ; i < n ; ++ i ) { if ( ! m . has ( a [ i ] ) ) { m . set ( a [ i ] , 1 ) ; } m . set ( a [ i ] , 1 ) ; q . push ( a [ i ] ) ; } var ans = [ ] ; while ( k > 0 ) { var x = q [ 0 ] ; q . shift ( ) ; if ( m . has ( x - 1 ) && k > 0 ) { m . set ( x - 1 , 1 ) ; q . push ( x - 1 ) ; ans . push ( x - 1 ) ; k -- ; } if ( ! m . get ( x + 1 ) && k > 0 ) { m . set ( x + 1 , 1 ) ; q . push ( x + 1 ) ; ans . push ( x + 1 ) ; k -- ; } } return ans ; }
function IsValidLen ( s , length , k ) { var n = s . length ; var mp = new Map ( ) ; var right = 0 ; while ( right < length ) { if ( mp . has ( s [ right ] ) ) { mp . set ( s [ right ] , mp . get ( s [ right ] ) + 1 ) ; } else { mp . set ( s [ right ] , 1 ) ; } right ++ ; } if ( mp . size <= k ) { return true ; } while ( right < n ) { if ( mp . has ( s [ right ] ) ) { mp . set ( s [ right ] , mp . get ( s [ right ] ) + 1 ) ; } else { mp . set ( s [ right ] , 1 ) ; } if ( mp . has ( s [ right - length ] ) ) { mp . delete ( s [ right - length ] ) ; } if ( mp . has ( s [ right - length ] ) ) { mp . delete ( s [ right - length ] ) ; } if ( mp . has ( s [ right - length ] ) ) { mp . set ( s [ right - length ] , mp . get ( s [ right - length ] ) - 1 ) ; } right ++ ; } return mp . size <= k ; }
function Partition ( arr , low , high ) { var pivot = arr [ high ] ; var i = ( low - 1 ) ; for ( var j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; var temp1 = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp2 ; arr [ j ] = temp1 ; } } var temp2 = arr [ i + 1 ] ; arr [ i + 1 ] = arr [ high ] ; arr [ high ] = temp2 ; return i + 1 ; }
function StrScore ( strs , s , n ) { var m = new Map ( ) ; for ( var i = 0 ; i < n ; i ++ ) { if ( ! m . has ( strs [ i ] ) ) { m . set ( strs [ i ] , i + 1 ) ; } else { if ( ! m . has ( s ) ) { return 0 ; } var score = 0 ; for ( var i = 0 ; i < s . length ; i ++ ) { score += s [ i ] . charCodeAt ( ) - "a" . charCodeAt ( ) + 1 ; } score = score * m . get ( s ) ; return score ; }
function CountEle ( s , a , n ) { var mp = new Map ( ) ; var ans = [ ] ; for ( var i = 0 ; i < n ; ++ i ) { var num = a [ i ] ; if ( ! mp . has ( num ) ) { ans . push ( 0 ) ; } else { var cnt = 0 ; while ( s [ 0 ] != num ) { mp . set ( s [ 0 ] , true ) ; s . delete ( s [ 0 ] ) ; cnt ++ ; } s . delete ( s [ 0 ] ) ; cnt ++ ; ans . push ( cnt ) ; } } return ans ; }
function MaxDistinctChar ( s , n , k ) { var freq = new Map ( ) ; for ( var i = 0 ; i < n ; i ++ ) { if ( freq . has ( s [ i ] ) ) { freq . set ( s [ i ] , freq . get ( s [ i ] ) + 1 ) ; } else { freq . set ( s [ i ] , 1 ) ; } } var v = [ ] ; for ( var i = 0 ; i < v . length ; i ++ ) { var mn = Math . min ( v [ i ] - 1 , k ) ; v [ i ] -= mn ; k -= mn ; } if ( k > 0 ) { for ( var i = 0 ; i < v . length ; i ++ ) { var mn = Math . min ( v [ i ] , k ) ; v [ i ] -= mn ; k -= mn ; } } var res = 0 ; for ( var i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] == 1 ) { res ++ ; } } return res ; }
function FindKth ( arr , n , k ) { var missing = new Set ( ) ; var count = 0 ; for ( var i = 0 ; i < n ; i ++ ) { missing . add ( arr [ i ] ) ; } var max_m = arr . reduce ( ( a , b ) => Math . max ( a , b ) ) ; var min_m = arr . reduce ( ( a , b ) => Math . min ( a , b ) ) ; for ( var i = min_m + 1 ; i < max_m ; i ++ ) { if ( ! missing . has ( i ) ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; }
function AlmostSort ( a , n ) { for ( let i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { let temp = a [ i ] ; a [ i ] = a [ i + 1 ] ; a [ i + 1 ] = temp ; } } for ( let i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { return false ; } } return true ; }
function MaximumSum ( s , n , k ) { let sum = 0 ; let freq = new Array ( 256 ) . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) { freq [ s [ i ] ] += 1 ; } freq . sort ( ( a , b ) => a - b ) ; for ( let i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; }
function FindMinOperations ( arr , n , k ) { let operations = 0 ; for ( let i = 0 ; i < k ; i ++ ) { let freq = new Map ( ) ; for ( let j = i ; j < n ; j += k ) { if ( freq . has ( arr [ j ] ) ) { freq . set ( arr [ j ] , freq . get ( arr [ j ] ) + 1 ) else { freq . set ( arr [ j ] , 1 ) } } let max1 = 0 , num = 0 ; for ( let key , value ] of freq ) { if ( value > max1 ) { max1 = value ; num = key ; } } for ( let [ key , value ] of freq ) { if ( key != num ) { operations += value ; } } } return operations ; }
function SubString ( s , n ) { let v = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { for ( let length = 1 ; length <= n - i ; length ++ ) { let find = s . substring ( i , length ) ; v . push ( find ) ; } } return v ; }
function CheckUniqueFrequency ( arr , n ) { var freq = { } ; for ( var i = 0 ; i < n ; i ++ ) { if ( freq . hasOwnProperty ( arr [ i ] ) ) { freq [ arr [ i ] ] = freq [ arr [ i ] ] + 1 ; } else { freq [ arr [ i ] ] = 1 ; } } var unique_freq = new Set ( ) ; for ( var key , value ) of freq ) { if ( unique_freq . has ( value ) ) { return false ; } else { unique_freq . add ( value ) ; } } return true ; }
function MinCost ( str1 , str2 , n ) { var cost = 0 ; var tmp = str1 ; for ( var i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 [ i ] ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) { var temp = tmp [ i ] ; tmp [ i ] = tmp [ i + 1 ] ; tmp [ i + 1 ] = temp ; } else { cost ++ ; } } } return cost ; }
function IsValidNum ( x ) { var mp = new Map ( ) ; for ( var i = 0 ; i < x . length ; i ++ ) { if ( mp . has ( x [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ) { return false ; } else if ( x [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) > 5 ) { return false ; } else { mp . set ( x [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) , 1 ) ; } } return true ; }
function MinimizeDiff ( arr , n , k ) { let max = Math . max ( ... arr ) ; let min = Math . min ( ... arr ) ; if ( max - min <= k ) { return max - min ; } let avg = Math . floor ( ( max + min ) / 2 ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = Math . max ( ... arr ) ; min = Math . min ( ... arr ) ; return max - min ; }
function GetMinCost ( arr , n ) { let min_ele = arr . reduce ( ( a , b ) => Math . min ( a , b ) )  return min_ele * ( n - 1 ) }
function Possibility ( m , length , s ) { let count_odd = 0 ; for ( let i = 0 ; i < length ; i ++ ) { if ( m . get ( s [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ] & 1 ) { count_odd ++ ; } if ( count_odd > 1 ) { return false ; } } return true ; }
function MinimumCostOfBreaking ( x , y , m , n ) { let res = 0 ; x . sort ( function ( a , b ) { return a - b } ) ; y . sort ( function ( a , b ) { return a - b } ) ; let hzntl = 1 , vert = 1 ; let i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } let total = 0 ; while ( i < m ) { total += x [ i ++ ] ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y [ j ++ ] ; } res += total * hzntl ; return res ; }
function FindMaximumScore ( a , n ) { var freq = new Map ( ) ; for ( var i = 0 ; i < n ; i ++ ) { if ( freq . has ( a [ i ] ) ) { freq [ a [ i ] ] = freq [ a [ i ] ] + 1 ; } else { freq [ a [ i ] ] = 1 ; } } var dp = Array . from ( { length : 1000 } , ( _ , i ) => 0 ) ; dp [ 0 ] = 0 ; dp [ 1 ] = freq [ 1 ] ; for ( var i = 2 ; i < dp . length ; i ++ ) { dp [ i ] = Math . max ( dp [ i - 1 ] , dp [ i - 2 ] + freq [ i ] * i ) ; } return dp [ dp . length - 1 ] ; }
function CountWays ( s , t , k , mod ) { var n = s . length ; var a = 0 , b = 0 ; for ( var i = 0 ; i < n ; i ++ ) { var p = s . substring ( i , n - i ) + s . substring ( 0 , i ) ; if ( p == t ) { a ++ ; } else { b ++ ; } } var dp1 = Array ( k + 1 ) . fill ( 0 ) ; var dp2 = Array ( k + 1 ) . fill ( 0 ) ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( var i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ; } return dp1 [ k ] ; }
function FindSubarraySum ( arr , n , k ) { var prev_sum = new Map ( ) ; var res = 0 ; var curr_sum = 0 ; for ( var i = 0 ; i < n ; i ++ ) { curr_sum += arr [ i ] ; if ( curr_sum == k ) { res ++ ; } if ( prev_sum . has ( curr_sum - k ) ) { res += prev_sum . get ( curr_sum - k ) ; } prev_sum . set ( curr_sum , 1 ) ; } return res ; }
function MaximumOccurrence ( s ) { let n = s . length ; let freq = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { let temp = "" ; temp += s [ i ] ; freq . set ( temp , freq . get ( temp ) + 1 ) ; } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { let temp = s [ i ] ; temp += s [ j ] ; freq . set ( temp , freq . get ( temp ) + 1 ) ; } else { freq . set ( temp , 1 ) ; } } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { let temp = "" ; temp += s [ i ] ; temp += s [ j ] ; freq . set ( temp , 1 ) ; } } let answer = Number . MIN_VALUE ; for ( let entry of freq . entries ( ) ) { answer = Math . max ( answer , entry . value ) ; } return answer ; }
function CountCharacters ( strings , chars ) { var res = 0 ; var freq = new Map ( ) ; for ( var i = 0 ; i < chars . length ; i ++ ) { if ( freq . has ( chars [ i ] ) ) { freq . set ( chars [ i ] , freq . get ( chars [ i ] ) + 1 ) ; } else { freq . set ( chars [ i ] , 1 ) ; } } for ( var st of strings ) { var flag = true ; for ( var c of st ) { if ( freq . has ( c ) ) { flag = false ; break ; } } if ( flag ) { res += st . length ; } } return res ; }
function DistinctSubstring ( p , q , k , n ) { var ss = new Set ( ) ; for ( var i = 0 ; i < n ; ++ i ) { var sum = 0 ; var s ; for ( var j = i ; j < n ; ++ j ) { var pos = p [ j ] . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) ; sum += q [ pos ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ; s += p [ j ] ; if ( sum <= k ) { ss . add ( s ) ; } else { break ; } } } return ss . size ; }
function UniqueMorseRep ( arr ) { let morseCode = [ ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , ".." , ".---" ] ; let n = arr . length ; for ( let i = 0 ; i < n ; i ++ ) { let temp = "" ; let m = arr [ i ] . length ; for ( let j = 0 ; j < m ; j ++ ) { temp += morseCode [ arr [ i ] [ j ] . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) ] ; } st . add ( temp ) ; } return st . size ; }
function CountSubstrings ( st , k ) { var n = st . length ; var answer = 0 ; var map = new Map ( ) ; for ( var i = 0 ; i < k ; i ++ ) { if ( ! map . has ( st [ i ] ) ) { map . set ( st [ i ] , 1 ) ; } else { map . set ( st [ i ] , 1 ) ; } } if ( map . has ( k ) ) { answer ++ ; } for ( var i = k ; i < n ; i ++ ) { if ( map . has ( st [ i ] ) ) { map . set ( st [ i ] , map . get ( st [ i ] ) + 1 ) ; } else { map . set ( st [ i ] , 1 ) ; } map . set ( st [ i - k ] , -- ) ; if ( map . get ( st [ i - k ] ) == 0 ) { map . delete ( st [ i - k ] ) ; } if ( map . has ( k ) ) { answer ++ ; } } return answer ; }
function CanConstruct ( s , k ) { var m = { } ; var i = 0 , j = 0 , p = 0 ; if ( s . length == k ) { return true ; } for ( i = 0 ; i < s . length ; i ++ ) { if ( ! m . hasOwnProperty ( s [ i ] ) ) { m . set ( s [ i ] , 0 ) ; } m . set ( s [ i ] , m . get ( s [ i ] ) + 1 ) ; } if ( k > s . length ) { return false ; } else { for ( var h of m ) { if ( h . value % 2 != 0 ) { p = p + 1 ; } } } if ( k < p ) { return false ; } return true ; }
function EqualIgnoreCase ( str1 , str2 ) { str1 = str1 . toLowerCase ( ) ; str2 = str2 . toLowerCase ( ) ; return str1 == str2 ; }
function FindLongestSub ( bin ) { let n = bin . length , i ; let sum = 0 ; let prev_sum = new Map ( ) ; let max_len = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin [ i ] == "1" ) { sum ++ ; } else { sum -- ; } if ( sum > 0 ) { max_len = i + 1 ; } else if ( sum <= 0 ) { if ( prev_sum . has ( sum - 1 ) ) { let curr_len = i - prev_sum [ sum - 1 ] ; max_len = Math . max ( max_len , curr_len ) ; } } if ( prev_sum . has ( sum ) ) { prev_sum . set ( sum , i ) ; } } return max_len ; }
function HasAllCodes ( s , k ) { var us = new Set ( ) ; for ( var i = 0 ; i + k <= s . length ; i ++ ) { us . add ( s . substr ( i , k ) ) ; } return us . size == 1 << k ; }
function CheckPalin ( word ) { var n = word . length ; word = word . toLowerCase ( ) ; transform ( word . toLowerCase ( ) , word . toLowerCase ( ) , ( a , b ) => a - b ) ; for ( var i = 0 ; i < n ; i ++ , n -- ) { if ( word [ i ] != word [ n - 1 ] ) { return false ; } } return true ; }
function Convert ( st ) { var w = "" , z = "" ; st = st . toUpperCase ( ) ; st += "▁" ; for ( var i = 0 ; i < st . length ; i ++ ) { var ch = st [ i ] ; if ( ch != "▁" ) { w += ch ; } else { z += String . fromCharCode ( tolower ( w [ 0 ] ) ) + w . substring ( 1 ) + "▁" ; w = "" ; } } return z ; }
function MaxLines ( n , x1 , y1 , x2 , y2 ) { let s = new Set ( ) ; let slope ; for ( let i = 0 ; i < n ; ++ i ) { if ( x1 [ i ] == x2 [ i ] ) { slope = Number . MAX_SAFE_INTEGER ; } else { slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; } s . add ( slope ) ; } return s . size ; }
function PrimeFactor ( n ) { var primef = new Map ( ) ; while ( n % 2 == 0 ) { if ( primef . has ( 2 ) ) { primef [ 2 ] += 1 ; } else { primef [ 2 ] = 1 ; } n = parseInt ( n / 2 ) ; } for ( var i = 3 ; i <= Math . sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { if ( primef . has ( i ) ) { primef [ i ] += 1 ; } else { primef [ i ] = 1 ; } n = parseInt ( n / i ) ; } } if ( n > 2 ) { primef [ n ] = 1 ; } return primef ; }
function IsDivisibleByDivisor ( s , d ) { s %= d ; let hash_map = new Set ( ) ; hash_map . add ( s ) ; for ( let i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hash_map . has ( s ) ) { if ( s == 0 ) { return "Yes" ; } return "No" ; } else { hash_map . add ( s ) ; } } return "Yes" ; }
function OddSum ( a , n , k ) { var odd = new Set ( ) ; var even = new Set ( ) ; for ( var i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { even . add ( a [ i ] ) ; } else { odd . add ( a [ i ] ) ; } } if ( odd . size >= k ) { return true ; } var flag = false ; for ( var i = 1 ; i < k ; i += 2 ) { var needed = k - i ; if ( needed <= even . size ) { return true ; } } return flag ; }
function DayOfYear ( date ) { var days = Array ( 31 ) . fill ( 0 ) ; var year = parseInt ( date . substring ( 0 , 4 ) ) ; var month = parseInt ( date . substring ( 5 , 2 ) ) ; var day = parseInt ( date . substring ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days [ month - 2 ] ; -- month ; } return day ; }
function IsPerfectSquare ( arr , n ) { let umap = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( umap . has ( arr [ i ] ) ) { umap . set ( arr [ i ] , umap . get ( arr [ i ] ) + 1 ) } else { umap . set ( arr [ i ] , 1 ) } } for ( let itr of umap . values ( ) ) { if ( itr . value % 2 == 1 ) { return false ; } } return true ; }
function MinMoves ( n ) { let s = n . toString ( ) ; let ans = Number . MAX_VALUE ; let length = s . length ; for ( let i = 0 ; i < length ; ++ i ) { for ( let j = 0 ; j < length ; ++ j ) { if ( i == j ) { continue ; } let t = s ; let cur = 0 ; for ( let k = i ; k < length - 1 ; ++ k ) { let t = t [ k ] ; t [ k + 1 ] = cur ; } for ( let k = j - ( j > i ) ; k < length - 2 ; ++ k ) { let t = t [ k ] ; t [ k + 1 ] = t [ k + 1 ] ; ++ cur ; } let pos = - 1 ; for ( let k = 0 ; k < length ; ++ k ) { if ( t [ k ] != "0" ) { pos = k ; break ; } } for ( let k = pos ; k > 0 ; -- k ) { let t = t [ k ] ; t [ k ] = t [ k - 1 ] ; ++ cur ; } let nn = parseInt ( t ) ; if ( nn % 25 == 0 ) { ans = Math . min ( ans , cur ) ; } } } if ( ans == Number . MAX_VALUE ) { return - 1 ; } return ans ; }
function MinimumOperations ( a , n ) { let mp = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( mp . has ( a [ i ] ) ) { mp . set ( a [ i ] , mp . get ( a [ i ] ) + 1 ) } else { mp . set ( a [ i ] , 1 ) } } let count = 0 ; for ( let [ key , value ] of mp . entries ( ) ) { if ( value > 1 ) { count += value - 1 ; } } return count ; }
function KaprekarRec ( n , prev ) { if ( n == 0 ) { return 0 ; } prev = n ; let digits = new Array ( 4 ) ; for ( let i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = Math . floor ( n / 10 ) ; } digits . sort ( function ( a , b ) { return a - b } ) ; let asc = 0 ; for ( let i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } digits . sort ( function ( a , b ) { return a - b } ) ; let desc = 0 ; for ( let i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } let diff = Math . abs ( asc - desc ) ; if ( diff == prev ) { return diff ; } return KaprekarRec ( diff , prev ) ; }
function FractionToDecimal ( numr , denr ) { let res = "" ; let mp = new Map ( ) ; let rem = numr % denr ; while ( rem != 0 && mp . has ( rem ) ) { mp . set ( rem , mp . get ( rem ) + 1 ) ; rem = rem * 10 ; let res_part = rem / denr ; res += parseInt ( res_part ) ; rem = rem % denr ; } if ( rem == 0 ) { return "" ; } if ( mp . has ( rem ) ) { return res . substring ( mp . get ( rem ) ) ; } return "" ; }
function IsFancy ( num ) { var fp = { } ; fp [ "0" ] = "0" ; fp [ "1" ] = "1" ; fp [ "6" ] = "9" ; fp [ "8" ] = "8" ; fp [ "9" ] = "6" ; var n = num . length ; var l = 0 , r = n - 1 ; while ( l <= r ) { if ( fp . has ( num [ l ] ) ) { return false ; } l ++ ; r -- ; } return true ; }
function DistinctOddRatio ( numbers ) { var distinct_numbers = new Set ( numbers ) ; distinct_numbers . sort ( ( a , b ) => a - b ) ; var distinct_count = ranges :: distance ( distinct_numbers ) ; var distinct_odd_count = ranges :: distance ( distinct_numbers | views :: filter ( ( a , b ) => a % 2 == 1 ) ) ; return distinct_odd_count / distinct_count ; }
function CompareSum ( numbers , words ) { let int_sum = reduce ( numbers . begin ( ) , numbers . end ( ) ) ; let tmp = words | views :: transform ( [ ] , ( ) => { return words . length ; } ) ; let word_length_sum = reduce ( tmp . begin ( ) , tmp . end ( ) ) ; if ( int_sum < word_length_sum ) { return - 1 ; } if ( int_sum > word_length_sum ) { return 1 ; } return 0 ; }
function AllLongerThan ( short_words , long_words ) { let max_of_short = ranges :: max ( short_words | views :: transform ( [ ] , ( w ) => w . length ) ) ; let min_of_long = ranges :: min ( long_words | views :: transform ( [ ] , ( w ) => w . length ) ) ; return min_of_long > max_of_short ; }
function CompareOddEvenRange ( numbers ) { let range_odd = ranges :: max ( numbers | views :: filter ( [ ] ( n ) { return n % 2 == 1 ; } ) ) - ranges :: min ( numbers | views :: filter ( [ ] ( n ) { return n % 2 == 1 ; } ) ) ; let range_even = ranges :: max ( numbers | views :: filter ( [ ] ( n ) { return n % 2 == 0 ; } ) ) - ranges :: min ( numbers | views :: filter ( [ ] ( n ) { return n % 2 == 0 ; } ) ) ; if ( range_odd < range_even ) { return - 1 ; } if ( range_odd > range_even ) { return 1 ; } return 0 ; }
function AverageDistinctLength ( words ) { var s = new Set ( words . begin ( ) , words . end ( ) ) ; var distinct_words = [ ... s ] . sort ( ( a , b ) => a - b )  var distinct_size = distinct_words | views :: map ( ( a , b ) => a - b )  var average_len = distinct_size . length > 0 ? distinct_size [ 0 ] : 0 ; return average_len ; }
function WithDrawBalance ( start , withdrawals ) { let end = accumulate ( withdrawals . begin ( ) , withdrawals . end ( ) , start , [ ] ) ; return end ; }
function FirstShortAndStartsWithO ( words ) { var matched_view = words | views :: filter ( [ ] , ( w , i ) => { return w . length < 5 ; } ) | views :: filter ( [ ] , ( w , i ) => { return w [ 0 ] == "o" ; } ) | views :: take ( 1 ) ; var matched_element = matched_view . length == 0 ? "" : matched_view [ 0 ] ; return matched_element ; }
function BigNumberAtIndex ( numbers , index ) { let matched_view = numbers | views :: filter ( function ( a , b ) { return a > 5 ; } ) | views :: drop ( index ) ; let target_num = matched_view [ 0 ] ; return target_num ; }
function ContainsSquareInRange ( range_start , range_length ) { let contains_square = ranges :: any ( views :: iota ( range_start , range_start + range_length ) , function ( n ) { return Math . pow ( Math . sqrt ( n ) , 2 ) == n ; } ) ; return contains_square ; }
function GroupNumbersByMod ( numbers , mod ) { let number_groups = new Map ( ) ; for ( let n = 0 ; n < numbers . length ; n ++ ) { let key = n % mod ; number_groups . set ( key , [ ] ) ; } return number_groups ; }
function GroupWordsByFirstChar ( words ) { var word_groups = new Map ( ) ; for ( var word of words ) { if ( word_groups . has ( word [ 0 ] ) ) { word_groups . set ( word [ 0 ] , [ ] ) ; } else { word_groups . set ( word [ 0 ] , [ ] ) ; } } return word_groups ; }
function OrderByLengthAndDescending ( words ) { let sorted_words = words ; sorted_words . sort ( ( a , b ) => a - b ) ; return sorted_words ; }
function OrderFirstCharDescendingReverse ( words ) { let sorted_words = words ; sorted_words . sort ( function ( a , b ) { if ( a [ 0 ] == b [ 0 ] ) { return a < b ; } return a [ 0 ] > b [ 0 ] ; } ) ; reverse ( sorted_words ) ; return sorted_words ; }
function GetSubListOfNegative ( numbers , start , length ) { var matched_view = numbers | views :: drop ( start ) | views :: filter ( [ ] ( n ) => n < 0 ) | views :: take ( length ) ; var sub_list = [ ] ; ranges :: copy ( matched_view , back_inserter ( sub_list ) ) ; return sub_list ; }
function GetPositiveSequence ( numbers ) { var matched_view = numbers | views :: drop_while ( [ ] , ( n ) => n <= 0 ) | views :: take_while ( [ ] , ( n ) => n >= 0 ) ; var sub_sequence = [ ] ; ranges :: copy ( matched_view , back_inserter ( sub_sequence ) ) ; return sub_sequence ; }
function GetLargerThanIndexSequence ( numbers ) { var matched_view = views . iota ( 0 , numbers . length ) | views :: drop_while ( [ & numbers ] ( n ) { return numbers [ n ] < n ; } ) | views :: take_while ( [ & numbers ] ( n ) { return numbers [ n ] > n ; } ) | views :: transform ( [ & numbers ] ( n ) { return numbers [ n ] ; } ) ; var sub_sequence = ranges :: copy ( matched_view , back_inserter ( sub_sequence ) ) ; return sub_sequence ; }
function RearrangeWordByIndexes ( words , indexes ) { var new_indexes = indexes | views :: filter ( [ & words ] ( n ) { return n >= words . length ; } ) | views :: transform ( [ & words ] ( n ) { return n % words . length ; } ) ; var matched_view = new_indexes | views :: transform ( [ & words ] ( n ) { return words [ n ] ; } ) ; var new_words = ranges :: copy ( matched_view , back_inserter ( new_words ) ) ; return new_words ; }
function GetWordsUpperLower ( words ) { let matched_view = words | views :: transform ( [ ] ) ; let upper = w ; let lower = w ; ranges :: transform ( upper . begin ( ) , upper . end ( ) , upper . begin ( ) , :: toupper ) ; ranges :: transform ( lower . begin ( ) , lower . end ( ) , lower . begin ( ) , :: tolower ) ; return [ upper , lower ] ; } ) ; let upper_lower_words = ranges :: copy ( matched_view , back_inserter ( upper_lower_words ) ) ; return upper_lower_words ; }
function SelectIfInPlace ( numbers ) { var matched_view = views :: iota ( 0 , numbers . length ) | views :: transform ( [ numbers ] ( n ) => numbers [ n ] == n ) ; var nums_in_place = [ ] ; ranges :: copy ( matched_view , back_inserter ( nums_in_place ) ) ; return nums_in_place ; }
function SelectPairs ( numbers_a , numbers_b ) { var matched_view = numbers_a | views :: transform ( [ & numbers_b ] ( int a ) { return numbers_b | views :: filter ( [ a ] ( auto b ) { return a < b ; } ) | views :: transform ( [ a ] ( auto b ) { return a , b ] ; } ) ; } ) | views :: join ; var pairs = ranges :: from ( matched_view , back_inserter ( pairs ) ) ; return pairs ; }
function StringCrossJoin ( end_words , begin_words ) { var matched_view = begin_words | views :: transform ( [ & end_words ] ( string & b ) { return end_words | views :: filter ( [ b ] ( string & e ) { return b [ 0 ] == e [ e . length - 1 ] ; } ) | views :: transform ( [ b ] ( auto e ) { return e + "▁" + b ; } ) ; } ) | views :: join ; var cross_strings = [ ] ; ranges :: copy ( matched_view , back_inserter ( cross_strings ) ) ; return cross_strings ; }
function ElementsContainSubword ( words , subword ) { if ( ranges :: all_of ( words | views :: take ( 5 ) , [ & subword ] ( string & w ) { return w . find ( subword ) != string . npos ; } ) ) return 1 ; if ( ranges :: any_of ( words | views :: take ( 5 ) , [ & subword ] ( string & w ) { return w . find ( subword ) != string . npos ; } ) ) return 0 ; return - 1 ; }
function ConcatLargeNumbers ( numbers_a , numbers_b , flag ) { var large_numbers_a = numbers_a | views :: filter ( [ flag ] ( var n ) { return n > flag ; } ) ; var large_numbers_b = numbers_b | views :: filter ( [ flag ] ( var n ) { return n > flag ; } ) ; var all_numbers = [ ] ; ranges :: copy ( large_numbers_a , back_inserter ( all_numbers ) ) ; ranges :: copy ( large_numbers_b , back_inserter ( all_numbers ) ) ; return all_numbers ; }
function DotProduct ( vector_a , vector_b ) { let dot_product = inner_product ( vector_a [ 0 ] , vector_a [ 1 ] , vector_b [ 0 ] , 0 ) ; return dot_product ; }
function SetDifference ( set_a , set_b ) { let difference = [ ] ; ranges . sort ( set_a ) ; ranges . sort ( set_b ) ; set_symmetric_difference ( set_a . begin ( ) , set_a . end ( ) , set_b . begin ( ) , set_b . end ( ) , back_inserter ( difference ) ) ; return difference ; }
