int greatestCommonDivisor ( int a , int b ) { if ( a == 0 || b == 0 ) { return a + b ; } if ( a == b ) { return a ; } if ( a > b ) { return greatestCommonDivisor ( a % b , b ) ; } else { return greatestCommonDivisor ( a , b % a ) ; } }
int largestDivisor ( int n ) { for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { return n / i ; } } return 1 ; }
boolean isPrime ( int n ) { if ( n < 2 ) { return false ; } for ( int k = 2 ; k < n ; k ++ ) { if ( n % k == 0 ) { return false ; } } return true ; }
int fizzBuzz ( int n ) { int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( i % 11 == 0 || i % 13 == 0 ) { int q = i ; while ( q > 0 ) { if ( q % 10 == 7 ) { count += 1 ; } q /= 10 ; } } } return count ; }
int primeFib ( int n ) { int f0 = 0 ; int f1 = 1 ; while ( n > 0 ) { int p = f0 + f1 ; boolean isPrime = p >= 2 ; for ( int i = 2 ; i < p ; i ++ ) { if ( p % i == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { n -= 1 ; } f0 = f1 ; f1 = p ; } return f1 ; }
float triangleArea ( float a , float h ) { return a * h / 2 ; }
int modp ( int n , int p ) { int ret = 1 ; for ( int i = 0 ; i < n ; i ++ ) { ret = ( ret * 2 ) % p ; } return ret ; }
int add ( int x , int y ) { return x + y ; }
int fib ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return fib ( n - 1 ) + fib ( n - 2 ) ; }
int largestPrimeFactor ( int n ) { for ( int i = 2 ; i < n ; i ++ ) { while ( n % i == 0 && n > i ) { n /= i ; } } return n ; }
int sumToN ( int n ) { int result = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { result += i ; } return result ; }
int fibfib ( int n ) { if ( n == 0 ) { return 0 ; } if ( n == 1 ) { return 0 ; } if ( n == 2 ) { return 1 ; } return fibfib ( n - 1 ) + fibfib ( n - 2 ) + fibfib ( n - 3 ) ; }
boolean isMultiplyPrime ( int a ) { int num = 0 ; for ( int i = 2 ; i <= a ; i ++ ) { while ( a % i == 0 && a >= i ) { a /= i ; num += 1 ; } } return num == 3 ; }
boolean isSimplePower ( int x , int n ) { if ( n == 1 ) { return x == 1 ; } int power = 1 ; while ( power < x ) { power *= n ; } return power == x ; }
int chooseNum ( int x , int y ) { if ( x > y ) { return - 1 ; } if ( y % 2 == 0 ) { return y ; } if ( x == y ) { return - 1 ; } return y - 1 ; }
boolean isEqualToSumEven ( int n ) { return n % 2 == 0 && n >= 8 ; }
int specialFactorial ( int n ) { int fact = 1 ; int specialFact = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { fact *= i ; specialFact *= fact ; } return specialFact ; }
int xOrY ( int n , int x , int y ) { boolean isPrime = n >= 2 ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { return x ; } return y ; }
boolean rightAngleTriangle ( int a , int b , int c ) { return a * a == b * b + c * c || b * b == a * a + c * c || c * c == a * a + b * b ; }
int fastPow ( int n , int k ) { if ( k == 0 ) { return 1 ; } int temp = fastPow ( n , k / 2 ) ; if ( k % 2 == 0 ) { return temp * temp ; } else { return n * temp * temp ; } }
boolean isPalin ( String s ) { int l = s . length ( ) / 2 ; for ( int i = 0 ; i < l ; i ++ ) { if ( s . charAt ( i ) != s . charAt ( s . length ( ) - i - 1 ) ) { return false ; } } return true ; }
int findSum ( int n ) { int ans = 0 , temp = 0 ; for ( int i = 1 ; i <= n && temp < n ; i ++ ) { temp = i - 1 ; int num = 1 ; while ( temp < n ) { if ( temp + i <= n ) { ans += i * num ; } else { ans += ( n - temp ) * num ; } temp += i ; num ++ ; } } return ans ; }
int getNextGap ( int gap ) { gap = Math . trunc ( gap * 10 / 13 ) ; if ( gap < 1 ) { return 1 ; } return gap ; }
int countNonDecreasing ( int n ) { int k = 10 ; int count = 1 ; for ( int i = 1 ; i <= n ; i ++ ) { count *= k + i - 1 ; count = count / i ; } return count ; }
int power ( int x , int y ) { if ( y == 0 ) { return 1 ; } else if ( y % 2 == 0 ) { return power ( x , Math . trunc ( y / 2 ) ) * power ( x , Math . trunc ( y / 2 ) ) ; } else { return x * power ( x , Math . trunc ( y / 2 ) ) * power ( x , Math . trunc ( y / 2 ) ) ; } }
double power ( int x , int y ) { if ( y == 0 ) { return 1 ; } double temp = power ( x , Math . trunc ( y / 2 ) ) ; if ( y % 2 == 0 ) { return temp * temp ; } else { if ( y > 0 ) { return x * temp * temp ; } else { return temp * temp / x ; } } }
int multiply ( int x , int y ) { if ( y == 0 ) { return 0 ; } else if ( y > 0 ) { return x + multiply ( x , y - 1 ) ; } else { return - multiply ( x , - y ) ; } }
int smallest ( int x , int y , int z ) { if ( ! Math . trunc ( y / x ) ) { return ! Math . trunc ( y / z ) ? y : z ; } return ! Math . trunc ( x / z ) ? x : z ; }
boolean isPowerOfFour ( int n ) { if ( n == 0 ) { return false ; } while ( n != 1 ) { if ( n % 4 != 0 ) { return false ; } n = n / 4 ; } return true ; }
int modInverse ( int a , int m ) { int m0 = m ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
int cntRotations ( int s , int n ) { String s2 = s + s ; int [ ] pre = new int [ 2 * n ] ; Arrays . fill ( pre , 0 ) ; for ( int i = 0 ; i < 2 * n ; i ++ ) { if ( i != 0 ) { pre [ i ] += pre [ i - 1 ] ; } if ( s2 [ i ] == 'a' || s2 [ i ] == 'e' || s2 [ i ] == 'i' || s2 [ i ] == 'o' || s2 [ i ] == 'u' ) { pre [ i ] ++ ; } } int ans = 0 ; for ( int i = n - 1 ; i < 2 * n - 1 ; i ++ ) { int r = i , l = i - n ; int x1 = pre [ r ] ; if ( l >= 0 ) { x1 -= pre [ l ] ; } r = i - Math . trunc ( n / 2 ) ; int left = pre [ r ] ; if ( l >= 0 ) { left -= pre [ l ] ; } int right = x1 - left ; if ( left > right ) { ans ++ ; } } return ans ; }
int binomialCoeff ( int n , int k ) { int res = 1 ; if ( k > n - k ) { k = n - k ; } for ( int i = 0 ; i < k ; ++ i ) { res *= n - i ; res /= ( i + 1 ) ; } return res ; }
boolean isPrefix ( String temp , String s ) { if ( temp . length ( ) < s . length ( ) ) { return false ; } else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != temp . charAt ( i ) ) { return false ; } } return true ; } }
String lexicographicallySmallestString ( String s , int n ) { int lastZe = - 1 ; String ans = "" ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { lastZe = i ; break ; } } for ( int i = 0 ; i < n ; i ++ ) { if ( i <= lastZe && s . charAt ( i ) == '0' ) { ans += s . charAt ( i ) ; } else if ( i > lastZe ) { ans += s . charAt ( i ) ; } } return ans ; }
int calculateMax ( int n , int m , int k ) { int ans = - 1 ; int low = 0 , high = m ; while ( low <= high ) { int mid = ( low + high ) / 2 ; int val = 0 ; int l = k - 1 ; int r = n - k ; val += mid ; if ( mid >= l ) { val += l * ( 2 * mid - l - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( l - mid ) ; } if ( mid >= r ) { val += r * ( 2 * mid - r - 1 ) / 2 ; } else { val += mid * ( mid - 1 ) / 2 + ( r - mid ) ; } if ( val <= m ) { ans = Math . max ( ans , mid ) ; low = mid + 1 ; } else { high = mid - 1 ; } } return ans ; }
int findLength ( String s , int i , int j ) { int required = i ; int length = 0 ; for ( char curr : s ) { if ( curr == required ) { length += 1 ; if ( required == i ) { required = j ; } else { required = i ; } } } return length ; }
boolean checkReverse ( int leftSum , int rightSum ) { int rev = 0 ; int temp = rightSum ; while ( temp != 0 ) { rev = rev * 10 + temp % 10 ; temp = temp / 10 ; } if ( rev == leftSum ) { return true ; } return false ; }
boolean isComposite ( int n ) { if ( n <= 1 ) { return false ; } if ( n <= 3 ) { return false ; } if ( n % 2 == 0 || n % 3 == 0 ) { return true ; } for ( int i = 5 ; i * i <= n ; i = i + 6 ) { if ( n % i == 0 || n % ( i + 2 ) == 0 ) { return true ; } } return false ; }
int minDeletion ( String s ) { int n = s . length ( ) ; int firstIdx1 = - 1 ; int lastIdx0 = - 1 ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { firstIdx1 = i ; break ; } } for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( s . charAt ( i ) == '0' ) { lastIdx0 = i ; break ; } } if ( firstIdx1 == - 1 || lastIdx0 == - 1 ) { return 0 ; } int count1 = 0 , count0 = 0 ; for ( int i = 0 ; i < lastIdx0 ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count1 ++ ; } } for ( int i = firstIdx1 + 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { count0 ++ ; } } return Math . min ( count0 , count1 ) ; }
int minSteps ( String s , int n ) { int smaller , cost = 0 ; int f [ ] = new int [ 26 ] ; for ( int i = 0 ; i < n ; i ++ ) { int currEle = s . charAt ( i ) - 'a' ; smaller = 0 ; for ( int j = 0 ; j <= currEle ; j ++ ) { if ( f [ j ] != 0 ) { smaller += f [ j ] ; } } if ( smaller == 0 ) { cost += i + 1 ; } else { cost += i - smaller + 1 ; } f [ s . charAt ( i ) - 'a' ] ++ ; } return cost ; }
int numberOfWays ( int n ) { int count = 0 ; for ( int a = 1 ; a < n ; a ++ ) { for ( int b = 1 ; b < n ; b ++ ) { int c = n - ( a + b ) ; if ( a + b > c && a + c > b && b + c > a ) { count ++ ; } } } return count ; }
int slopeOfNum ( int num [ ] , int n ) { int slope = 0 ; for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( num [ i ] > num [ i - 1 ] && num [ i ] > num [ i + 1 ] ) { slope ++ ; } else if ( num [ i ] < num [ i - 1 ] && num [ i ] < num [ i + 1 ] ) { slope ++ ; } } return slope ; }
int middleOfThree ( int a , int b , int c ) { int x = a - b ; int y = b - c ; int z = a - c ; if ( x * y > 0 ) { return b ; } else if ( x * z > 0 ) { return c ; } else { return a ; } }
int countMaxSetBits ( int left , int right ) { while ( ( left | ( left + 1 ) ) <= right ) { left |= left + 1 ; } return left ; }
int findS ( int s ) { int l = 1 , r = s / 2 + 1 ; while ( l <= r ) { int mid = ( l + r ) / 2 ; int sum = mid * ( mid + 1 ) / 2 ; if ( sum == s ) { return mid ; } else if ( sum > s ) { r = mid - 1 ; } else { l = mid + 1 ; } } return - 1 ; }
boolean check ( String s ) { int min = Integer . MAX_VALUE ; int max = Integer . MAX_VALUE ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { int ascii = s . charAt ( i ) ; if ( ascii < 96 || ascii > 122 ) { return false ; } sum += ascii ; if ( min > ascii ) { min = ascii ; } if ( max < ascii ) { max = ascii ; } } min -= 1 ; int eSum = max * ( max + 1 ) / 2 - min * ( min + 1 ) / 2 ; return sum == eSum ; }
int minimumPossibleProduct ( int k ) { int res = 1 ; int r = ( 1 << k ) - 1 ; for ( int i = 0 ; i < k ; i ++ ) { res *= r - 1 ; } res *= r ; return res ; }
int findInGrid ( int i , int j ) { if ( i == j ) { return i * i - ( i - 1 ) ; } else if ( i > j ) { if ( i % 2 == 0 ) { return i * i - ( j - 1 ) ; } else { return ( i - 1 ) * ( i - 1 ) + 1 + ( j - 1 ) ; } } else { if ( j % 2 == 0 ) { return ( j - 1 ) * ( j - 1 ) + 1 + ( i - 1 ) ; } else { return j * j - ( i - 1 ) ; } } }
int findMinOperationsReqEmpStr ( String s ) { int cntOne = 0 ; int cntZero = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { if ( cntOne != 0 ) { cntOne -- ; } cntZero ++ ; } else { if ( cntZero != 0 ) { cntZero -- ; } cntOne ++ ; } } return cntOne + cntZero ; }
boolean isReachable ( int x1 , int y1 , int x2 , int y2 ) { while ( x2 > x1 && y2 > y1 ) { if ( x2 > y2 ) { x2 %= y2 ; } else { y2 %= x2 ; } } if ( x2 == x1 ) { return ( y2 - y1 ) >= 0 && ( y2 - y1 ) % x1 == 0 ; } else if ( y2 == y1 ) { return ( x2 - x1 ) >= 0 && ( x2 - x1 ) % y1 == 0 ; } else { return false ; } }
int findMaxSoln ( int n , int x , int y ) { int ans = Integer . MIN_VALUE ; for ( int k = 0 ; k <= n ; k ++ ) { if ( k % x == y ) { ans = Math . max ( ans , k ) ; } } return ans >= 0 && ans <= n ? ans : - 1 ; }
int numberOfPairs ( int n ) { int count = 0 ; int i = 1 , j = n - 1 ; while ( i < j ) { if ( i + j == n ) { count ++ ; } i ++ ; j -- ; } return count ; }
int minChanges ( String s , int n ) { int count = 0 , zeros = 0 , ones = 0 ; if ( s . charAt ( 0 ) != '1' ) { count ++ ; ones ++ ; } for ( int i = 1 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '0' ) { zeros ++ ; } else { ones ++ ; } if ( zeros > ones ) { zeros -- ; ones ++ ; count ++ ; } } return count ; }
int kVisibleFromLeft ( int n , int k ) { if ( n == k ) { return 1 ; } if ( k == 1 ) { int ans = 1 ; for ( int i = 1 ; i < n ; i ++ ) { ans *= i ; } return ans ; } return kVisibleFromLeft ( n - 1 , k - 1 ) + ( n - 1 ) * kVisibleFromLeft ( n - 1 , k ) ; }
double find ( int n , int sum ) { if ( sum > 6 * n || sum < n ) { return 0 ; } if ( n == 1 ) { if ( sum >= 1 && sum <= 6 ) { return 1.0 / 6 ; } else { return 0 ; } } double s = 0 ; for ( int i = 1 ; i <= 6 ; i ++ ) { s += find ( n - 1 , sum - i ) / 6 ; } return s ; }
int binCoff ( int n , int r ) { int val = 1 ; int i ; if ( r > n - r ) { r = n - r ; } for ( i = 0 ; i < r ; i ++ ) { val *= n - i ; val /= i + 1 ; } return val ; }
int getMask ( int val ) { int mask = 0 ; if ( val == 0 ) { return 1 ; } while ( val > 0 ) { int d = val % 10 ; mask |= ( 1 << d ) ; val /= 10 ; } return mask ; }
int waysToKAdjacentSetBits ( int n , int k , int currentIndex , int adjacentSetBits , int lastBit ) { if ( currentIndex == n ) { if ( adjacentSetBits == k ) { return 1 ; } return 0 ; } int noOfWays = 0 ; if ( lastBit == 1 ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits + 1 , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } else if ( lastBit ) { noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 1 ) ; noOfWays += waysToKAdjacentSetBits ( n , k , currentIndex + 1 , adjacentSetBits , 0 ) ; } return noOfWays ; }
int checkFunc ( int i , int j , int [ ] st ) { if ( st [ i ] == "(" && st [ j ] == ")" ) { return 1 ; } if ( st [ i ] == "?" && st [ j ] == ")" ) { return 1 ; } if ( st [ i ] == "[" && st [ j ] == "]" ) { return 1 ; } if ( st [ i ] == "{" && st [ j ] == "}" ) { return 1 ; } if ( st [ i ] == "{" && st [ j ] == "?" ) { return 1 ; } if ( st [ i ] == "?" && st [ j ] == "}" ) { return 1 ; } if ( st [ i ] == "{" && st [ j ] == "?" ) { return 1 ; } if ( st [ i ] == "?" && st [ j ] == "}" ) { return 1 ; } return 0 ; }
int findGolomb ( int n ) { if ( n == 1 ) { return 1 ; } return 1 + findGolomb ( n - findGolomb ( findGolomb ( n - 1 ) ) ; }
boolean allOnes ( String s , int n ) { int co = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { co += s . charAt ( i ) == '1' ? 1 : 0 ; } return co == n ; }
int pad ( int n ) { int pPrevPrev = 1 , pPrev = 1 , pCurr = 1 , pNext = 1 ; for ( int i = 3 ; i <= n ; i ++ ) { pNext = pPrevPrev + pPrev ; pPrevPrev = pPrev ; pPrev = pCurr ; pCurr = pNext ; } return pNext ; }
int oddLengthPalindrome ( int k ) { int palin = k ; k = Math . trunc ( k / 10 ) ; while ( k > 0 ) { int rev = k % 10 ; palin = palin * 10 + rev ; k /= 10 ; } return palin ; }
String changeString ( String s0 ) { String [ ] s = s0 . split ( "" ) ; int n = s0 . length ( ) ; if ( s [ 0 ] == "?" ) { s [ 0 ] = 'a' ; if ( s [ 0 ] == s [ 1 ] ) { s [ 0 ] = ( char ) ( s [ 0 ] + 1 ) ; } } for ( int i = 1 ; i < n - 1 ; i ++ ) { if ( s [ i ] == "?" ) { s [ i ] = 'a' ; if ( s [ i ] == s [ i - 1 ] ) { s [ i ] = ( char ) ( s [ i ] ) + 1 ) ; } if ( s [ i ] == s [ i + 1 ] ) { s [ i ] = ( char ) ( s [ i ] ) + 1 ) ; } if ( s [ i ] == s [ i - 1 ] ) { s [ i ] = ( char ) ( s [ i ] ) + 1 ) ; } } } if ( s [ n - 1 ] == "?" ) { s [ n - 1 ] = 'a' ; if ( s [ n - 1 ] == s [ n - 2 ] ) { s [ n - 1 ] = ( char ) ( s [ n - 1 ] ) + 1 ) ; } } return s ; }
int totalHammingDistance ( int n ) { int i = 1 , sum = 0 ; while ( ( n / i ) > 0 ) { sum = sum + ( n / i ) ; i = i * 2 ; } return sum ; }
int checkBitonic ( String s ) { int i = 1 ; for ( ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) > s . charAt ( i - 1 ) ) { continue ; } if ( s . charAt ( i ) <= s . charAt ( i - 1 ) ) { break ; } } if ( i == s . length ( ) - 1 ) { return 1 ; } int j = i + 1 ; for ( ; j < s . length ( ) ; j ++ ) { if ( s . charAt ( j ) < s . charAt ( j - 1 ) ) { continue ; } if ( s . charAt ( j ) >= s . charAt ( j - 1 ) ) { break ; } } i = j ; if ( i != s . length ( ) ) { return 0 ; } return 1 ; }
boolean endsWith ( String str , String pat ) { int patLen = pat . length ( ) ; int strLen = str . length ( ) ; if ( patLen > strLen ) { return false ; } patLen -- ; strLen -- ; while ( patLen >= 0 ) { if ( pat . charAt ( patLen ) != str . charAt ( strLen ) ) { return false ; } patLen -- ; strLen -- ; } return true ; }
int getSum ( int n , int d ) { if ( n < d ) { return 0 ; } while ( n % 10 != d ) { n -- ; } int k = n / 10 ; return ( k + 1 ) * d + ( k * 10 + 10 * k * k ) / 2 ; }
int balancedStringBySwapping ( String s ) { int unbalancedPair = 0 ; for ( int i = 0 ; i < s . length ( ) ; ++ i ) { if ( unbalancedPair > 0 && s . charAt ( i ) == "]" ) { -- unbalancedPair ; } else if ( s . charAt ( i ) == "[" ) { ++ unbalancedPair ; } } return ( unbalancedPair + 1 ) / 2 ; }
int computeHash ( String s ) { int p = 31 ; int mod = ( int ) 1e9 + 7 ; int hashVal = 0 ; int mul = 1 ; for ( char ch : s ) { hashVal = ( hashVal + ( ch - 'a' + 1 ) * mul ) % mod ; mul = mul * p % mod ; } return hashVal ; }
int countOfSubstringWithOnlyOnes ( String s ) { int res = 0 , count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { count = s . charAt ( i ) == '1' ? count + 1 : 0 ; res = res + count ; } return res ; }
int composite ( int n ) { int flag = 0 ; int c = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { if ( n % j == 0 ) { c += 1 ; } } if ( c >= 3 ) { flag = 1 ; } return flag ; }
boolean isDivBySix ( String s , int n ) { int sum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { sum += s . charAt ( i ) - 'a' + 1 ; } if ( sum % 3 != 0 ) { return false ; } int lastDigit = ( s . charAt ( n - 1 ) - 'a' + 1 ) % 10 ; if ( lastDigit % 2 != 0 ) { return false ; } return true ; }
boolean isRedundantBraces ( String s ) { int a = 0 , b = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '(' && s . charAt ( i + 2 ) == ")" ) { return true ; } if ( s . charAt ( i ) == '*' || s . charAt ( i ) == "+" || s . charAt ( i ) == "-" || s . charAt ( i ) == "/" ) { a ++ ; } if ( s . charAt ( i ) == '(' ) { b ++ ; } } if ( b > a ) { return true ; } return false ; }
int countSubStr ( String s , int n ) { int count = 0 ; for ( int i = 0 ; i < n - 2 ; ) { if ( s . charAt ( i ) == '0' && s . charAt ( i + 1 ) == '1' && s . charAt ( i + 2 ) == '0' ) { count ++ ; i += 3 ; } else if ( s . charAt ( i ) == '1' && s . charAt ( i + 1 ) == '0' && s . charAt ( i + 2 ) == '1' ) { count ++ ; i += 3 ; } else { i ++ ; } } return count ; }
int prefixOccurrences ( String s ) { char c = s . charAt ( 0 ) ; int countC = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == c ) { countC ++ ; } } return countC ; }
boolean isValid ( String s , int len ) { for ( int i = 1 ; i < len ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i - 1 ) ) { return false ; } } return true ; }
int count ( String s , int k ) { int n = s . length ( ) ; int d = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { d += s . charAt ( i ) ; } if ( d % k == 0 ) { count += 1 ; } for ( int i = k ; i < n ; i ++ ) { char prev = s . charAt ( i - k ) ; d -= prev ; d += s . charAt ( i ) ; if ( d % k == 0 ) { count += 1 ; } } return count ; }
int findSubstringCount ( String s ) { int result = 0 ; int n = s . length ( ) ; int i = 0 ; while ( i < n - 1 ) { if ( s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) { result ++ ; while ( i < n - 1 && s . charAt ( i ) + 1 == s . charAt ( i + 1 ) ) { i ++ ; } } i ++ ; } return result ; }
boolean find ( String s1 , String s2 ) { int len1 = s1 . length ( ) , len2 = s2 . length ( ) ; if ( len1 != len2 ) { return false ; } int [ ] d = new int [ len1 ] ; d [ 0 ] = ( int ) s2 . charAt ( 0 ) - ( int ) s1 . charAt ( 0 ) ; for ( int i = 1 ; i < len1 ; i ++ ) { if ( s1 . charAt ( i ) > s2 . charAt ( i ) ) { return false ; } else { d [ i ] = ( int ) s2 . charAt ( i ) - ( int ) s1 . charAt ( i ) ; } } for ( int i = 0 ; i < len1 - 1 ; i ++ ) { if ( d [ i ] < d [ i + 1 ] ) { return false ; } } return true ; }
boolean isInGivenBase ( String s , int bas ) { if ( bas > 16 ) { return false ; } else if ( bas <= 10 ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) ) { return false ; } } } else { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( ! ( ( s . charAt ( i ) >= '0' && s . charAt ( i ) < '0' + bas ) || ( s . charAt ( i ) >= 'A' && s . charAt ( i ) < 'A' + bas - 10 ) ) ) { return false ; } } } return true ; }
int countNonEmptySubstr ( String s ) { int n = s . length ( ) ; return n * ( n + 1 ) / 2 ; }
int evenDecimalValue ( String s , int n ) { int result = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { int decimalValue = 0 ; int powerOf2 = 1 ; for ( int k = i ; k <= j ; k ++ ) { decimalValue += ( s . charAt ( k ) - '0' ) * powerOf2 ; powerOf2 *= 2 ; } if ( decimalValue % 2 == 0 ) { result ++ ; } } } return result ; }
int calculate ( String s ) { int ans = 6 ; for ( int i = 0 ; i < 10 ; ++ i ) { for ( int j = 0 ; j < 10 ; ++ j ) { for ( int k = 0 ; k < 10 ; ++ k ) { for ( int l = 0 ; l < 10 ; ++ l ) { for ( int m = 0 ; m < 10 ; ++ m ) { for ( int n = 0 ; n < 10 ; ++ n ) { if ( i != s . charAt ( 0 ) - '0' ) { c ++ ; } if ( j != s . charAt ( 1 ) - '0' ) { c ++ ; } if ( k != s . charAt ( 2 ) - '0' ) { c ++ ; } if ( l != s . charAt ( 3 ) - '0' ) { c ++ ; } if ( m != s . charAt ( 4 ) - '0' ) { c ++ ; } if ( n != s . charAt ( 5 ) - '0' ) { c ++ ; } if ( c < ans ) { ans = c ; } } } } } }
int xorZero ( String s ) { int oneCount = 0 , zeroCount = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( s . charAt ( i ) == '1' ) { oneCount ++ ; } else { zeroCount ++ ; } } if ( oneCount % 2 == 0 ) { return zeroCount ; } return oneCount ; }
String evenLength ( String n ) { String res = n ; for ( int j = n . length ( ) - 1 ; j >= 0 ; -- j ) { res += n . charAt ( j ) ; } return res ; }
int countSubstringWithEqualEnds ( String s ) { int result = 0 ; int n = s . length ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i ; j < n ; j ++ ) { if ( s . charAt ( i ) == s . charAt ( j ) ) { result ++ ; } } } return result ; }
double normalSlope ( double a , double b , double x1 , double y1 ) { double g = ( double ) a / 2 ; double f = ( double ) b / 2 ; if ( g - x1 == 0 ) { return - 1 ; } double slope = ( f - y1 ) / ( g - x1 ) ; if ( slope == 0 ) { return - 2 ; } return slope ; }
boolean orthogonality ( int x1 , int y1 , int x2 , int y2 , int r1 , int r2 ) { int dsquare = ( x1 - x2 ) * ( x1 - x2 ) + ( y1 - y2 ) * ( y1 - y2 ) ; if ( dsquare == r1 * r1 + r2 * r2 ) { return true ; } else { return false ; } }
float findAreaShaded ( float a ) { float sqArea = a * a ; float semiCircleArea = 3.14f * ( a * a ) / 8 ; float shadedArea = 4 * semiCircleArea - sqArea ; return shadedArea ; }
int factorial ( int a , int b ) { int res = 1 ; for ( int i = 1 ; i <= a + b ; i ++ ) { res = res * i ; } for ( int i = 1 ; i <= a ; i ++ ) { res = res / i ; } for ( int i = 1 ; i <= b ; i ++ ) { res = res / i ; } return res ; }
int factorTree ( int n ) { int height = 0 ; while ( n > 1 ) { boolean flag = false ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { n = n / i ; flag = true ; break ; } } height ++ ; if ( flag ) { break ; } } return height ; }
char findIfPossible ( int n , int s , int x ) { if ( s >= x && s % 2 == x % 2 ) { if ( n >= 3 ) { return 'Yes' ; } if ( n == 1 ) { if ( s == x ) { return 'Yes' ; } else { return 'No' ; } } if ( n == 2 ) { char c = ( s - x ) / 2 ; int a = c ; int b = c ; a = a + x ; if ( ( a ^ b ) == x ) { return 'Yes' ; } else { return 'No' ; } } } return 'No' ; }
int maximumTripletXor ( int a , int b , int c ) { int ans = 0 ; for ( int i = 30 ; i >= 0 ; i -- ) { int cur = 1 << i ; if ( a >= cur ) { ans += cur ; a -= cur ; } else if ( b >= cur ) { ans += cur ; b -= cur ; } else if ( c >= cur ) { ans += cur ; c -= cur ; } } return ans ; }
int itemType ( int n ) { int count = 0 ; int day = 1 ; while ( count + day * ( day + 1 ) / 2 < n ) { count += day * ( day + 1 ) / 2 ; day ++ ; } for ( int type = day ; type > 0 ; type -- ) { count += type ; if ( count >= n ) { return type ; } } }
int maxGcdInRange ( int l , int r ) { int ans = 1 ; for ( int z = r ; z >= 1 ; z -- ) { if ( ( r / z ) - Math . trunc ( ( l - 1 ) / z ) > 1 ) { ans = z ; break ; } } return ans ; }
int sumOfDigits ( int n ) { int sum = 0 ; while ( n != 0 ) { sum += n % 10 ; n = n / 10 ; } return sum ; }
boolean isRepUnitNum ( int n , int b ) { int length = 0 ; int countOne = 0 ; while ( n != 0 ) { int r = n % b ; length ++ ; if ( r == 1 ) { countOne ++ ; } n = n / b ; } return countOne >= 3 && countOne == length ; }
boolean isStraightLineNum ( int n ) { if ( n <= 99 ) { return false ; } String s = Integer . toString ( n ) ; int d = s . charAt ( 1 ) - s . charAt ( 0 ) ; for ( int i = 2 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) - s . charAt ( i - 1 ) != d ) { return false ; } } return true ; }
int getCount ( int d , int n ) { int no = n / d ; int result = no ; for ( int p = 2 ; p * p <= no ; ++ p ) { if ( no % p == 0 ) { while ( no % p == 0 ) { no = no / p ; } result = Math . trunc ( result - result / p ) ; } } if ( no > 1 ) { result = Math . trunc ( result - result / no ) ; } return result ; }
boolean isEvenParity ( int x ) { int parity = 0 ; while ( x != 0 ) { if ( x % 2 == 1 ) { parity ++ ; } x = x >> 1 ; } if ( parity % 2 == 0 ) { return true ; } else { return false ; } }
int isPerfect ( int n ) { int sum = 1 ; for ( int i = 2 ; i * i <= n ; i ++ ) { if ( n % i == 0 ) { if ( i * i != n ) { sum = sum + i + n / i ; } else { sum = sum + i ; } } } if ( sum == n && n != 1 ) { return n ; } return 0 ; }
int logAToBaseB ( int a , int b ) { return a > b - 1 ? 1 + logAToBaseB ( a / b , b ) : 0 ; }
int usingBinarySearch ( int start , int end , int n , int s ) { if ( start >= end ) { return start ; } int mid = start + ( end - start ) / 2 ; int totalSum = n * ( n + 1 ) / 2 ; int midSum = mid * ( mid + 1 ) / 2 ; if ( totalSum - midSum <= s ) { return usingBinarySearch ( start , mid , n , s ) ; } return usingBinarySearch ( mid + 1 , end , n , s ) ; }
String minInt ( String s ) { String [ ] s1 = s . split ( "" ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s1 [ i ] >= '5' ) { s1 [ i ] = ( char ) ( '9' - s1 [ i ] + '0' ) ; } } if ( s1 [ 0 ] == '0' ) { s1 [ 0 ] = '9' ; } return s1 . join ( "" ) ; }
int countTriplets ( int a , int b , int c ) { int ans = 0 ; for ( int i = 1 ; i <= a ; i ++ ) { for ( int j = 1 ; j <= b ; j ++ ) { for ( int k = 1 ; k <= c ; k ++ ) { if ( i * k > j * j ) { ans ++ ; } } } } return ans ; }
boolean topsyTurvy ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '2' || s . charAt ( i ) == '4' || s . charAt ( i ) == '5' || s . charAt ( i ) == '6' || s . charAt ( i ) == '7' || s . charAt ( i ) == '9' ) { return false ; } } return true ; }
int sumOfLastDig ( int n , int m ) { int sum = 0 ; int k = n / m ; int [ ] arr = new int [ 10 ] ; for ( int i = 0 ; i < 10 ; i ++ ) { arr [ i ] = m * ( i + 1 ) % 10 ; sum += arr [ i ] ; } int rem = k % 10 ; int ans = ( int ) Math . trunc ( k / 10 ) * sum ; for ( int i = 0 ; i < rem ; i ++ ) { ans += arr [ i ] ; } return ans ; }
int totalPay ( int totalItems , int priceOfOneItem , int n , int m ) { int freeItems = 0 , actual = 0 ; freeItems = totalItems / ( n + m ) ; actual = totalItems - freeItems ; int amount = actual * priceOfOneItem ; return amount ; }
int minOperations ( int x , int y , int p , int q ) { if ( y % x != 0 ) { return - 1 ; } int d = ( int ) Math . trunc ( y / x ) ; int a = 0 ; while ( d % p == 0 ) { d = d / p ; a += 1 ; } int b = 0 ; while ( d % q == 0 ) { d = d / q ; b += 1 ; } if ( d != 1 ) { return - 1 ; } return a + b ; }
boolean isMersenne ( int n ) { while ( n != 0 ) { int r = n % 2 ; if ( r == 0 ) { return false ; } n = n / 2 ; } return true ; }
int findThirdDigit ( int n ) { if ( n < 3 ) { return 0 ; } return ( n & 1 ) == 1 ? 1 : 6 ; }
boolean isOddLength ( int num ) { int count = 0 ; while ( num > 0 ) { num = num / 10 ; count ++ ; } if ( count % 2 != 0 ) { return true ; } return false ; }
boolean Check_is_possible ( int l , int r , int k ) { int count = 0 ; for ( int i = l ; i <= r ; i ++ ) { if ( i % k == 0 ) { count ++ ; } } return count > 1 ; }
BigInteger bytes ( int kilobytes ) { BigInteger b = BigInteger . valueOf ( kilobytes ) ; return b ; }
int octahedralNum ( int n ) { return n * ( 2 * n * n + 1 ) / 3 ; }
String checkEqual ( String s ) { for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) != '1' && s . charAt ( i ) != '0' && s . charAt ( i ) != '8' ) { return 'No' ; } } int start = 0 , end = s . length ( ) - 1 ; while ( start < end ) { if ( s . charAt ( start ) != s . charAt ( end ) ) { return 'No' ; } start ++ ; end -- ; } return "Yes" ; }
boolean isUndulating ( String n ) { if ( n . length ( ) <= 2 ) { return false ; } for ( int i = 2 ; i < n . length ( ) ; i ++ ) { if ( n . charAt ( i - 2 ) != n . charAt ( i ) ) { return false ; } } return true ; }
int firstDigit ( int n ) { while ( n >= 10 ) { n = n / 10 ; } return n ; }
int countDigit ( int n ) { if ( n == 0 ) { return 0 ; } return 1 + countDigit ( n / 10 ) ; }
boolean isDivisibleBy5 ( String s ) { int n = s . length ( ) ; return ( s . charAt ( n - 1 ) - '0' == 0 || s . charAt ( n - 1 ) - '0' == 5 ) ; }
int inv ( int a , int m ) { int m0 = m ; int x0 = 0 , x1 = 1 ; if ( m == 1 ) { return 0 ; } while ( a > 1 ) { int q = a / m ; int t = m ; m = a % m ; a = t ; t = x0 ; x0 = x1 - q * x0 ; x1 = t ; } if ( x1 < 0 ) { x1 += m0 ; } return x1 ; }
boolean onlyFirstAndLastAreSet ( int n ) { if ( n == 1 ) { return true ; } if ( n == 2 ) { return false ; } return ( ( n - 1 ) & ( n - 2 ) ) == 0 ; }
int divide ( int dividend , int divisor ) { int sign = ( ( dividend < 0 ) ^ ( divisor < 0 ) ) ? - 1 : 1 ; dividend = Math . abs ( dividend ) ; divisor = Math . abs ( divisor ) ; int quotient = 0 , temp = BigInt ( 0 ) ; for ( int i = 31 ; i >= 0 ; -- i ) { if ( temp + ( BigInt ( divisor ) << BigInt ( i ) ) <= dividend ) { temp += BigInt ( divisor ) << BigInt ( i ) ; quotient |= 1 << i ; } } if ( sign == - 1 ) { quotient = - quotient ; } return quotient ; }
char findProfession ( int level , int pos ) { if ( level == 1 ) { return 'e' ; } if ( findProfession ( level - 1 , ( pos + 1 ) / 2 ) == 'd' ) { return pos % 2 ? 'd' : 'e' ; } return pos % 2 ? 'e' : 'd' ; }
boolean hasCloseElements ( int [ ] numbers , int threshold ) { for ( int i = 0 ; i < numbers . length ; i ++ ) { for ( int j = i + 1 ; j < numbers . length ; j ++ ) { int distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) { return true ; } } } return false ; }
int truncateNumber ( int number ) { return number % 1 ; }
boolean belowZero ( int [ ] operations ) { int balance = 0 ; for ( int op : operations ) { balance += op ; if ( balance < 0 ) { return true ; } } return false ; }
double meanAbsoluteDeviation ( int [ ] numbers ) { int sumNum = 0 ; for ( int num : numbers ) { sumNum += num ; } double mean = sumNum / numbers . length ; int sumAbsDiff = 0 ; for ( int num : numbers ) { sumAbsDiff += Math . abs ( num - mean ) ; } return sumAbsDiff / numbers . length ; }
Vector < Integer > intersperse ( Vector < Integer > numbers , char delimiter ) { Vector < Integer > result = new Vector < > ( ) ; if ( numbers . size ( ) == 0 ) { return result ; } for ( int i = 0 ; i < numbers . size ( ) - 1 ; i ++ ) { result . add ( numbers . get ( i ) , delimiter ) ; } result . add ( numbers . get ( numbers . size ( ) - 1 ) ) ; return result ; }
int [ ] sumProduct ( int [ ] numbers ) { int sumValue = 0 ; int prodValue = 1 ; for ( int n : numbers ) { sumValue += n ; prodValue *= n ; } return new int [ ] { sumValue , prodValue } ; }
Vector < String > allPrefixes ( String string ) { Vector < String > result = new Vector < > ( ) ; for ( int i = 1 ; i <= string . length ( ) ; i ++ ) { result . add ( string . substring ( 0 , i ) ) ; } return result ; }
Vector < Integer > parseMusic ( String musicString ) { Vector < Integer > current = new Vector < Integer > ( ) ; Vector < Integer > result = new Vector < Integer > ( ) ; for ( int i = 0 ; i <= musicString . length ( ) ; i ++ ) { if ( i == musicString . length ( ) || musicString . charAt ( i ) == ' ' ) { if ( current . toString ( ) == 'o' ) { result . add ( 4 ) ; } if ( current . toString ( ) == 'o|' ) { result . add ( 2 ) ; } if ( current . toString ( ) == '.|' ) { result . add ( 1 ) ; } current . size ( ) = 0 ; } else { current . add ( musicString . charAt ( i ) ) ; } } return result ; }
int strlen ( String s ) { return s . length ( ) ; }
Vector < Integer > factorize ( int n ) { Vector < Integer > factors = new Vector < > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n /= i ; factors . add ( i ) ; i -- ; } } return factors ; }
String concatenate ( String ... strings ) { Vector < String > result = new Vector < > ( ) ; for ( String s : strings ) { result . add ( s ) ; } return result . toString ( ) ; }
Vector < Integer > getPositive ( Integer [ ] l ) { Vector < Integer > result = new Vector < > ( ) ; for ( int i = 0 ; i < l . length ; i ++ ) { if ( l [ i ] > 0 ) { result . add ( l [ i ] ) ; } } return result ; }
Vector < Integer > sortEven ( Vector < Integer > l ) { Vector < Integer > evens = new Vector < > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i += 2 ) { evens . add ( l . get ( i ) ) ; } Collections . sort ( evens ) ; Vector < Integer > result = new Vector < Integer > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 2 == 0 ) { result . add ( evens . get ( i / 2 ) ) ; } if ( i % 2 == 1 ) { result . add ( l . get ( i ) ) ; } } return result ; }
String decodeCyclic ( String s ) { Vector < String > output = new Vector < > ( ) ; int i = 0 ; while ( i <= s . length ( ) - 3 ) { String x = s . charAt ( i + 2 ) + s . substring ( i , i + 2 ) ; output . add ( x ) ; i += 3 ; } return output . toString ( ) + s . substring ( i ) ; }
int carRaceCollision ( int n ) { return ( int ) Math . pow ( n , 2 ) ; }
Vector < Integer > incrList ( Integer [ ] l ) { Vector < Integer > result = new Vector < > ( ) ; for ( int i : l ) { result . add ( i + 1 ) ; } return result ; }
boolean pairsSumToZero ( int [ ] l ) { for ( int i = 0 ; i < l . length ; i ++ ) { for ( int j = i + 1 ; j < l . length ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) { return true ; } } } return false ; }
String changeBase ( int x , int b ) { List < String > ret = new ArrayList < > ( ) ; while ( x > 0 ) { ret . add ( String . valueOf ( x % b ) ) ; x /= b ; } return ret . toString ( ) ; }
double median ( ArrayList < Integer > l ) { Collections . sort ( l ) ; if ( l . size ( ) % 2 == 1 ) { return l . get ( Math . trunc ( l . size ( ) / 2 ) ) ; } else { return ( l . get ( l . size ( ) / 2 - 1 ) + l . get ( l . size ( ) / 2 ) ) / 2.0 ; } }
String decodeShift ( String s ) { Vector < Character > result = new Vector < Character > ( ) ; for ( char ch : s ) { int w = ( ch + 21 - 'a' ) % 26 + 'a' ; result . add ( ( char ) ( w ) ) ; } return result . toString ( ) ; }
boolean belowThreshold ( int l [ ] , int t ) { for ( int n : l ) { if ( n >= t ) { return false ; } } return true ; }
boolean correctBracketing ( int [ ] brackets ) { int depth = 0 ; for ( int b : brackets ) { if ( b == "<" ) { depth += 1 ; } else { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
boolean monotonic ( int [ ] l ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . length ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr != 2 ; }
Vector < Integer > derivative ( int [ ] xs ) { Vector < Integer > result = new Vector < Integer > ( ) ; for ( int i = 1 ; i < xs . length ; i ++ ) { result . add ( i * xs [ i ] ) ; } return result ; }
int vowelsCount ( String s ) { String vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch : s ) { if ( vowels . contains ( ch ) ) { count += 1 ; } } if ( s . charAt ( s . length ( ) - 1 ) == 'y' || s . charAt ( s . length ( ) - 1 ) == 'Y' ) { count += 1 ; } return count ; }
int digitSum ( String s ) { int sum = 0 ; for ( char c : s ) { if ( c . toUpperCase ( ) == c && c . toLowerCase ( ) != c ) { sum += c ; } } return sum ; }
int fruitDistribution ( String s , int n ) { Vector < Character > num1 = new Vector < Character > ( ) ; Vector < Character > num2 = new Vector < Character > ( ) ; boolean flag = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( '0' <= s . charAt ( i ) && s . charAt ( i ) <= '9' ) { if ( flag ) { num1 . add ( s . charAt ( i ) ) ; } if ( flag ) { num2 . add ( s . charAt ( i ) ) ; } } else if ( flag && num1 . size ( ) > 0 ) { flag = true ; } } return n - ( int ) num1 . get ( 0 ) - ( int ) num2 . get ( 0 ) ; }
Vector < Integer > pluck ( int [ ] arr ) { Vector < Integer > result = new Vector < > ( ) ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . size ( ) == 0 ) { result . add ( arr [ i ] ) ; result . add ( i ) ; } else if ( arr [ i ] < result . get ( 0 ) ) { result . set ( 0 , arr [ i ] ) ; result . set ( 1 , i ) ; } } } return result ; }
Vector < Integer > strangeSortList ( Vector < Integer > lst ) { Vector < Integer > res = new Vector < > ( ) ; Collections . sort ( lst ) ; int l = 0 ; int r = lst . size ( ) - 1 ; while ( l < r ) { res . add ( lst . get ( l ) ) ; l += 1 ; res . add ( lst . get ( r ) ) ; r -= 1 ; } if ( l == r ) { res . add ( lst . get ( l ) ) ; } return res ; }
float triangleArea ( float a , float b , float c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return - 1 ; } float s = ( a + b + c ) / 2 ; float area = ( float ) Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; return area ; }
boolean willItFly ( Queue < Character > q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . size ( ) ; i ++ ) { if ( q . get ( i ) != q . get ( q . size ( ) - 1 - i ) ) { return false ; } sum += q . get ( i ) ; } return sum <= w ; }
boolean isCube ( float a ) { a = Math . abs ( a ) ; float i = ( float ) Math . round ( Math . pow ( a , 1.0 / 3 ) ) ; return ( float ) Math . pow ( i , 3 ) == a ; }
int hexKey ( int num [ ] ) { String key = "2357BD" ; int total = 0 ; for ( int c : num ) { if ( key . contains ( c ) ) { total += 1 ; } } return total ; }
String decimalToBinary ( int dec ) { Vector < String > ans = new Vector < > ( ) ; if ( dec != 0 ) { while ( dec > 0 ) { ans . add ( String . valueOf ( dec % 2 ) ) ; dec /= 2 ; } } else { ans . add ( "0" ) ; } return "db" + ans . toString ( "" ) + "db" ; }
boolean primeLength ( String s ) { int len = s . length ( ) ; if ( len < 2 ) { return false ; } for ( int i = 2 ; i < len ; i ++ ) { if ( len % i == 0 ) { return false ; } } return true ; }
int startsOneEnds ( int n ) { if ( n < 1 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return 18 * ( int ) Math . pow ( 10 , n - 2 ) ; }
int add ( int [ ] lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; }
Vector < pair > getRow ( ArrayList < Integer > lst [ ] , int x ) { Vector < pair > coords = new Vector < pair > ( ) ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { for ( int j = lst [ i ] . size ( ) - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] . get ( j ) == x ) { coords . add ( new pair ( i , j ) ) ; } } } return coords ; }
int nextSmallest ( int [ ] lst ) { Arrays . sort ( lst ) ; for ( int i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) { return lst [ i ] ; } } return - 1 ; }
boolean anyInt ( int a , int b , int c ) { if ( Math . round ( a ) != a || Math . round ( b ) != b || Math . round ( c ) != c ) { return false ; } return a + b == c || a + c == b || b + c == a ; }
Vector < Integer > countUpTo ( int n ) { Vector < Integer > primes = new Vector < > ( ) ; for ( int i = 2 ; i < n ; i ++ ) { int p = 1 ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { p = 0 ; break ; } } if ( p == 1 ) { primes . add ( i ) ; } } return primes ; }
int closestInteger ( String value ) { float w = parseFloat ( value ) ; return Math . round ( w ) ; }
Vector < Integer > makeAPile ( int n ) { Vector < Integer > reuslt = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { reuslt . add ( n + 2 * i ) ; } return reuslt ; }
Vector < String > wordsString ( String s ) { Vector < String > current = new Vector < > ( ) ; Vector < String > words = new Vector < > ( ) ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' || s . charAt ( i ) == ',' ) { if ( current . size ( ) > 0 ) { words . add ( current . join ( "" ) ) ; current . size ( ) = 0 ; } } else { current . add ( s . charAt ( i ) ) ; } } return words ; }
String roundedAvg ( int n , int m ) { if ( n > m ) { return - 1 ; } int num = ( n + m ) / 2 ; ArrayList < String > ret = new ArrayList < > ( ) ; while ( num > 0 ) { ret . add ( String . valueOf ( num % 2 ) ) ; num /= 2 ; } return ret . toString ( ) ; }
Vector < Integer > uniqueDigits ( int [ ] x ) { Vector < Integer > digits = new Vector < Integer > ( ) ; for ( int n : x ) { boolean isUnique = true ; for ( char c : n ) { if ( c % 2 == 0 ) { isUnique = false ; break ; } } if ( isUnique ) { digits . add ( n ) ; } } Collections . sort ( digits ) ; return digits ; }
int countNums ( int arr [ ] ) { int num = 0 ; for ( int n : arr ) { int neg = n < 0 ? - 1 : 1 ; n = Math . abs ( n ) ; Vector < Integer > digits = new Vector < Integer > ( ) ; for ( int c : n ) { digits . add ( c - '0' ) ; } digits . set ( 0 , neg ) ; int sum = 0 ; for ( int d : digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; }
boolean moveOneBall ( int arr [ ] ) { if ( arr . length == 0 ) { return true ; } int num = 0 ; for ( int i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ arr . length - 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; }
String exchange ( List < Integer > lst1 , List < Integer > lst2 ) { int odd = 0 ; int even = 0 ; for ( Integer n : lst1 ) { if ( n % 2 == 1 ) { odd ++ ; } } for ( Integer n : lst2 ) { if ( n % 2 == 0 ) { even ++ ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; }
Vector < String > oddCount ( String lst ) { Vector < String > results = new Vector < > ( ) ; String originalStr = "the number of odd elements in the string i of the input." ; for ( String s : lst ) { int sum = 0 ; for ( String d : s ) { if ( '0' <= d && d <= '9' && d % 2 == 1 ) { sum += 1 ; } } Vector < String > result = new Vector < String > ( ) ; for ( char c : originalStr ) { if ( c == 'i' ) { result . add ( sum . toString ( ) ) ; } else { result . add ( c ) ; } } results . add ( result . toString ( "" ) ) ; } return results ; }
int minSubArraySum ( int [ ] nums ) { int minSum = Integer . MAX_VALUE ; int sum = 0 ; for ( int num : nums ) { sum += num ; if ( minSum > sum ) { minSum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return minSum ; }
int maxFill ( int grid [ ] , int capacity ) { int res = 0 ; for ( int well : grid ) { int sum = 0 ; for ( int n : well ) { sum += n ; } if ( sum > 0 ) { res += ( ( sum - 1 ) / capacity ) + 1 ; } } return res ; }
Vector < String > selectWords ( String s , int n ) { String vowels = "aeiouAEIOU" ; Vector < String > current = new Vector < > ( ) ; Vector < Integer > result = new Vector < > ( ) ; int consonantNum = 0 ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { if ( consonantNum == n ) { result . add ( current . toString ( ) ) ; } current . clear ( ) ; consonantNum = 0 ; } else { current . add ( s . charAt ( i ) ) ; if ( ! vowels . contains ( s . charAt ( i ) ) ) { consonantNum += 1 ; } } } return result ; }
int solution ( Vector < Integer > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . size ( ) ; i += 2 ) { if ( lst . get ( i ) % 2 == 1 ) { sum += lst . get ( i ) ; } } return sum ; }
int addElements ( int arr [ ] , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= - 99 && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; }
Vector < Integer > getOddCollatz ( int n ) { Vector < Integer > oddCollatz = new Vector < Integer > ( ) ; while ( n != 1 ) { if ( n % 2 == 1 ) { oddCollatz . add ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } oddCollatz . add ( 1 ) ; Collections . sort ( oddCollatz ) ; return oddCollatz ; }
boolean isSorted ( int [ ] lst ) { for ( int i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; }
String intersection ( int interval1 [ ] , int interval2 [ ] ) { int inter1 = Math . max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = Math . min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return "NO" ; } } return "YES" ; }
int prodSigns ( int [ ] arr ) { if ( arr . length == 0 ) { return - 32768 ; } int sum = 0 ; int prods = 1 ; for ( int i : arr ) { sum += Math . abs ( i ) ; if ( i == 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; }
Vector < Integer > minPath ( Vector < Integer > [ ] grid , int k ) { int n = grid . length ; int minNum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { Vector < Integer > tmp = new Vector < > ( ) ; if ( i != 0 ) { tmp . add ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . add ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . add ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . add ( grid [ i ] [ j + 1 ] ) ; } minNum = Math . min ( ... tmp ) ; } } } Vector < Integer > ans = new Vector < Integer > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . add ( 1 ) ; } else { ans . add ( minNum ) ; } } return ans ; }
int digits ( int n ) { int prod = 0 ; for ( char digit : n ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) { prod = 1 ; } prod *= digit - '0' ; } } return prod ; }
boolean isNested ( String s ) { int count = 0 ; int maxCount = 0 ; for ( char ch : s ) { if ( ch == "[" ) { count += 1 ; } if ( ch == "]" ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > maxCount ) { maxCount = count ; } if ( count <= maxCount - 2 ) { return true ; } } return false ; }
int sumSquares ( int [ ] lst ) { int sum = 0 ; for ( int i : lst ) { sum += Math . ceil ( i ) * Math . ceil ( i ) ; } return sum ; }
int canArrange ( int [ ] arr ) { int index = - 1 ; for ( int i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; }
int largestSmallestIntegers ( int [ ] lst ) { int maxNeg = 0 , minPos = 0 ; for ( int n : lst ) { if ( n < 0 && ( maxNeg == 0 || n > maxNeg ) ) { maxNeg = n ; } if ( n > 0 && ( minPos == 0 || n < minPos ) ) { minPos = n ; } } return new int [ ] { maxNeg , minPos } ; }
String fixSpaces ( String text ) { Vector < String > res = new Vector < > ( ) ; int spaceLen = 0 ; for ( int i = 0 ; i <= text . length ( ) ; i ++ ) { if ( i == text . length ( ) || text . charAt ( i ) != ' ' ) { if ( spaceLen == 1 ) { res . add ( "_" ) ; } if ( spaceLen == 2 ) { res . add ( "__" ) ; } if ( spaceLen > 2 ) { res . add ( "-" ) ; } spaceLen = 0 ; if ( i != text . length ( ) ) { res . add ( text . charAt ( i ) ) ; } } else { spaceLen += 1 ; } } return res . toString ( ) ; }
String fileNameCheck ( String fileName ) { int digitNum = 0 , dotNum = 0 ; if ( fileName . length ( ) < 5 || fileName . charAt ( 0 ) . toUpperCase ( ) == fileName . charAt ( 0 ) . toLowerCase ( ) ) { return 'No' ; } char suffix = fileName . substring ( - 4 ) ; if ( suffix != '.txt' && suffix != '.exe' && suffix != '.dll' ) { return 'No' ; } for ( char c : fileName ) { if ( '0' <= c && c <= '9' ) { digitNum += 1 ; } if ( c == '.' ) { dotNum += 1 ; } } if ( digitNum > 3 || dotNum != 1 ) { return 'No' ; } return 'Yes' ; }
int sumSquares ( int [ ] lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . length ; i ++ ) { if ( i % 3 == 0 ) { sum += lst [ i ] * lst [ i ] ; } else if ( i % 4 == 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else { sum += lst [ i ] ; } } return sum ; }
String wordsInSentence ( String sentence ) { Vector < String > result = new Vector < > ( ) ; Vector < Integer > current = new Vector < > ( ) ; for ( int i = 0 ; i <= sentence . length ( ) ; i ++ ) { if ( i == sentence . length ( ) || sentence . charAt ( i ) == ' ' ) { boolean isPrime = true ; int l = current . size ( ) ; if ( l < 2 ) { isPrime = false ; } for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { result . add ( current . toString ( "" ) + " " ) ; } current . size ( ) = 0 ; } else { current . add ( sentence . charAt ( i ) ) ; } } result = result . join ( "" ) ; if ( result . size ( ) > 0 ) { result = result . slice ( 0 , - 1 ) ; } return result ; }
boolean simplify ( String x , String n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x . charAt ( i ) == '/' ) { a = x . substring ( 0 , i ) ; b = x . substring ( i + 1 ) ; } } for ( int i = 0 ; i < n . length ( ) ; i ++ ) { if ( n . charAt ( i ) == '/' ) { c = n . substring ( 0 , i ) ; d = n . substring ( i + 1 ) ; } } return ( a * c ) % ( b * d ) == 0 ; }
int specialFilter ( int [ ] nums ) { int count = 0 ; for ( int num : nums ) { if ( num > 10 ) { String w = Integer . toString ( num ) ; if ( w . charAt ( 0 ) % 2 == 1 && w . charAt ( w . length ( ) - 1 ) % 2 == 1 ) { count += 1 ; } } } return count ; }
int getMaxTriples ( int n ) { ArrayList < Integer > arr = new ArrayList < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { arr . add ( i * i - i + 1 ) ; } int count = 0 ; for ( int i = 0 ; i < n - 2 ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr . get ( i ) + arr . get ( j ) + arr . get ( k ) ) % 3 == 0 ) { count += 1 ; } } } } return count ; }
int doubleTheDifference ( int [ ] lst ) { int sum = 0 ; for ( int d : lst ) { int num = ( int ) Math . round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) { sum += num * num ; } } } return sum ; }
Vector < Integer > compare ( String game , String guess ) { Vector < Integer > result = new Vector < Integer > ( ) ; for ( int i = 0 ; i < game . length ( ) ; i ++ ) { result . add ( Math . abs ( game . charAt ( i ) - guess . charAt ( i ) ) ) ; } return result ; }
String strongestExtension ( String className , List < String > extensions ) { String strongest = "" ; int max = Integer . MAX_VALUE ; for ( String extension : extensions ) { int strength = 0 ; for ( String chr : extension ) { if ( chr . toUpperCase ( ) == chr && chr . toLowerCase ( ) != chr ) { strength += 1 ; } if ( chr . toUpperCase ( ) != chr && chr . toLowerCase ( ) == chr ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return className + "." + strongest ; }
String intToMiniRoman ( int number ) { int [ ] num = new int [ 1000 ] ; int [ ] sym = new int [ 900 ] ; int pos = 0 ; Vector < Character > res = new Vector < Character > ( ) ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res . add ( sym [ pos ] ) ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } return res . toString ( ) ; }
int eat ( int number , int need , int remaining ) { return need > remaining ? new int [ number + remaining ] : new int [ number + need ] ; }
int doAlgebra ( int ops [ ] , int operands [ ] ) { int [ ] nums = new int [ operands ] ; Vector < Integer > currentOps = new Vector < > ( ) ; int i = currentOps . size ( ) - 1 ; while ( i >= 0 ) { if ( currentOps . get ( i ) == "**" ) { nums . set ( i , Math . pow ( nums . get ( i ) , nums . get ( i + 1 ) ) ; nums . set ( i + 1 , 1 ) ; currentOps . remove ( i , 1 ) ; } i -- ; } i = 0 ; while ( i < currentOps . size ( ) ) { if ( currentOps . get ( i ) == '*' ) { nums . set ( i , *= nums . get ( i + 1 ) ) ; nums . set ( i + 1 , 1 ) ; currentOps . set ( i , 1 ) ; } else if ( currentOps . get ( i ) == "//" ) { nums . set ( i , Math . trunc ( nums . get ( i ) / nums . get ( i + 1 ) ) ; nums . set ( i , 1 ) ; } else { i ++ ; } } i = 0 ; while ( i < currentOps . size ( ) ) { if ( currentOps . get ( i ) == "+" ) { nums . set ( i , nums . get ( i + 1 ) ) ; currentOps . set ( i , 1 ) ; } else if ( currentOps . get ( i ) == "-" ) { nums . set ( i , - nums . get ( i + 1 ) ) ; currentOps . set ( i , 1 ) ; } else { i ++ ; } } return nums . get ( 0 ) ; }
Vector < Integer > generateIntegers ( int a , int b ) { int lower = Math . max ( 2 , Math . min ( a , b ) ) ; int upper = Math . min ( 8 , Math . max ( a , b ) ) ; Vector < Integer > result = new Vector < > ( ) ; for ( int i = lower ; i <= upper ; i += 2 ) { result . add ( i ) ; } return result ; }
boolean isStepNum ( int n ) { int prevDigit = - 1 ; while ( n > 0 ) { int curDigit = n % 10 ; if ( prevDigit == - 1 ) { prevDigit = curDigit ; } else { if ( Math . abs ( prevDigit - curDigit ) != 1 ) { return false ; } } prevDigit = curDigit ; n = n / 10 ; } return true ; }
int numOfWays ( int n , int k ) { int p = 1 ; if ( k % 2 != 0 ) { p = - 1 ; } return ( int ) ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; }
Vector < Integer > findDivisors ( int n ) { Vector < Integer > v = new Vector < Integer > ( ) ; for ( int i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { v . add ( i ) ; } else { v . add ( i ) ; v . add ( n / i ) ; } } } return v ; }
int eggDrop ( int n , int k ) { if ( k == 1 || k == 0 ) { return k ; } if ( n == 1 ) { return k ; } int min = Integer . MAX_VALUE ; int x , res ; for ( x = 1 ; x <= k ; x ++ ) { res = Math . max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , k - x ) ) ; if ( res < min ) { min = res ; } } return min + 1 ; }
boolean isPowerOfTwo ( int n ) { if ( n == 0 ) { return false ; } return ( int ) Math . ceil ( Math . log ( n ) / Math . log ( 2 ) ) == Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ; }
String shortestPalindrome ( String s ) { int n = s . length ( ) ; Vector < String > v = new Vector < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i ; int r = i ; String ans1 = "" ; String ans2 = "" ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans1 += s . charAt ( l ) ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s . charAt ( l ) == s . charAt ( r ) ) { ans2 += s . charAt ( l ) ; l -- ; r ++ ; } v . add ( ans1 ) ; v . add ( ans2 ) ; } String ans = v . get ( 0 ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . get ( i ) != "" ) { if ( ans . charAt ( 0 ) >= v . get ( i ) . charAt ( 0 ) ) { ans = v . get ( i ) ; } } } return ans ; }
int minimumAdjacentDifference ( int a [ ] , int n , int k ) { int minDiff = Integer . MAX_VALUE ; for ( int i = 0 ; i <= k ; i ++ ) { int maxDiff = Integer . MAX_VALUE ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { maxDiff = Math . max ( maxDiff , a [ p + 1 ] - a [ p ] ) ; } } minDiff = Math . min ( minDiff , maxDiff ) ; } return minDiff ; }
int cal ( int arr [ ] , int mid ) { int chocolate = 0 ; for ( int i : arr ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; }
boolean check ( int v , int a [ ] , int m ) { int tec = 0 , ans = 0 ; int b [ ] = new int [ a . length + 3 ] ; for ( int i = 0 ; i < a . length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; }
int largestNum ( int [ ] arr ) { int res = 0 ; Arrays . sort ( arr ) ; int l = 0 , r = arr . length - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) { l ++ ; } else { r -- ; } } return res ; }
int binarySearch ( int p [ ] , int n ) { int i = 0 ; int j = p . length - 1 ; int index = - 1 ; while ( i <= j ) { int mid = i + Math . trunc ( ( j - i ) / 2 ) ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; }
int findMinLength ( int arr [ ] ) { int index = arr . length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; }
int minDigits ( int n , int k ) { int digits_num = ( int ) ( Math . log ( n ) / Math . log ( 10 ) + 1 ) ; int temp_sum = 0 ; int temp = digits_num ; int result ; int x , v ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 = num2 / 10 ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = ( n / Math . pow ( 10 , temp - 1 ) ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v = ( v / 10 ) ; v ++ ; result = v * Math . pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; } return - 1 ; }
int checkForPerfectSquare ( int arr [ ] , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + Math . trunc ( ( high - low ) / 2 ) ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; }
int minFlips ( int mat [ ] [ ] , int s [ ] ) { int n = 3 ; int m = 3 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s [ ( i + j ) ] - '0' ) { count ++ ; } } } return count ; }
Vector < Integer > constructTree ( int n , ArrayList < Integer > edges ) { Vector < Integer > [ ] adjl = new Vector [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { adjl [ i ] = new Vector < Integer > ( ) ; } for ( int e : edges ) { int u = e . get ( 0 ) ; int v = e . get ( 1 ) ; adjl [ u ] . add ( v ) ; adjl [ v ] . add ( u ) ; } return adjl ; }
int findSumOfValues ( int v , int parent [ ] , int valuesChildren [ ] ) { int curNode = v ; int sum = 0 ; while ( curNode != - 1 ) { sum += valuesChildren [ curNode ] ; curNode = parent [ curNode ] ; } return sum ; }
int getDistinct ( int d , int count ) { int num = 0 ; count = ( int ) Math . pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; }
boolean isIncreasing ( int arr [ ] ) { for ( int i = 0 ; i < arr . length - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; }
int minAdjSwaps ( int mat [ ] [ ] ) { int n = 3 ; int [ ] cntZero = new int [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 && mat [ i ] [ j ] == 0 ; j -- ) { cntZero [ i ] ++ ; } } int cntSwaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cntZero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cntZero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) { return - 1 ; } while ( first > i ) { Arrays . fill ( cntZero [ first ] , cntZero [ first - 1 ] ) ; first -- ; cntSwaps ++ ; } } } return cntSwaps ; }
int solve ( ArrayList < Integer > values , ArrayList < Integer > salary , int mod ) { int ret = 1 ; int amt = 0 ; Arrays . sort ( values ) ; Arrays . sort ( salary ) ; while ( salary . size ( ) > 0 ) { while ( values . size ( ) != 0 && values . get ( values . size ( ) - 1 ) >= salary . get ( salary . size ( ) - 1 ) ) { amt ++ ; values . remove ( ) ; } if ( amt == 0 ) { return 0 ; } ret *= amt -- ; ret %= mod ; salary . pop ( ) ; } return ret ; }
int organizeInOrder ( int [ ] vec , int op [ ] , int n ) { int result [ ] = new int [ n ] ; Arrays . sort ( result ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == "<" ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; }
int countPoints ( int n , int m , int a [ ] , int b [ ] , int x , int y ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; }
boolean areSame ( int [ ] a , int [ ] b ) { Arrays . sort ( a ) ; Arrays . sort ( b ) ; return a . equals ( b ) ; }
int countNumberOfStrings ( String s ) { int n = s . length ( ) - 1 ; int count = ( int ) Math . pow ( 2 , n ) ; return count ; }
Vector < Integer > primePower ( int x ) { Vector < Integer > primePow = new Vector < Integer > ( ) ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } primePow . add ( p ) ; } } if ( x > 1 ) { primePow . add ( x ) ; } return primePow ; }
boolean isPerfect ( int n0 ) { double n = Math . sqrt ( n0 ) ; if ( Math . floor ( n ) != Math . ceil ( n ) ) { return false ; } return true ; }
int findSum ( int l , int r ) { ArrayList < Integer > arr = new ArrayList < > ( ) ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . add ( i + x ) ; if ( i + 1 <= r ) { arr . add ( i + 1 + x ) ; } x *= - 1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr . get ( i ) ; } return sum ; }
double results ( int n , int k ) { return Math . round ( Math . pow ( n , 1.0 / Math . pow ( 2.0 , k ) ) ; }
Vector < Integer > factors ( int n ) { Vector < Integer > v = new Vector < Integer > ( ) ; v . add ( 1 ) ; for ( int i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . add ( i ) ; if ( n / i != i ) { v . add ( n / i ) ; } } } return v ; }
int smallestNum ( int n ) { double x = Math . pow ( 10.0 , ( n - 1 ) / 2.0 ) ; return Math . ceil ( x ) ; }
int smallest ( String s ) { int [ ] a = new int [ s . length ( ) ] ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = ( int ) s . charAt ( i ) - ( int ) '0' ; } ArrayList < Integer > b = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( ( a [ i ] ) % 2 != 0 ) { b . add ( a [ i ] ) ; } } Collections . sort ( b ) ; if ( b . size ( ) > 1 ) { return b . get ( 0 ) * 10 + b . get ( 1 ) ; } return - 1 ; }
Vector < Float > Diagonals ( int a , int b , int c , int d ) { Vector < Float > ans = new Vector < Float > ( ) ; ans . add ( Math . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . add ( Math . sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; }
int findNumberOfDigits ( int n , int bas ) { int dig = ( int ) ( Math . log ( n ) / Math . log ( bas ) ) + 1 ; return dig ; }
double nGon ( int n ) { double proAngleVar ; if ( n % 4 == 0 ) { proAngleVar = Math . PI * ( 180.0 / n ) / 180 ; } else { proAngleVar = Math . PI * ( 180.0 / ( 2 * n ) ) / 180 ; } double negX = 1.0e +99 , posX = - 1.0e +99 , negY = 1.0e +99 , posY = - 1.0e+99 ; for ( int j = 0 ; j < n ; ++ j ) { int px = Math . cos ( 2 * Math . PI * j / n + proAngleVar ) ; int py = Math . sin ( 2 * Math . PI * j / n + proAngleVar ) ; negX = Math . min ( negX , px ) ; posX = Math . max ( posX , px ) ; negY = Math . min ( negY , py ) ; posY = Math . max ( posY , py ) ; } double opt2 = Math . max ( posX - negX , posY - negY ) ; return opt2 / Math . sin ( Math . PI / n ) / 2 ; }
double findMaxK ( int n ) { int p = ( int ) ( Math . log ( n ) / Math . log ( 2 ) ) ; return Math . pow ( 2 , p ) ; }
int nthFibo ( int n ) { int a = ( int ) ( Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; int b = ( - 1 * ( int ) Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; int r = ( int ) Math . pow ( 5 , 0.5 ) ; int ans = ( int ) ( Math . pow ( a , n ) - Math . pow ( b , n ) ) / r ; return ans ; }
double findProb ( int l , int r ) { int countOfPs = ( int ) ( Math . sqrt ( r ) ) - Math . ceil ( Math . sqrt ( l ) ) + 1 ; int total = r - l + 1 ; double prob = countOfPs / total ; return prob ; }
double previousFibonacci ( double n ) { double a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return a ; }
Vector < Integer > distPrime ( int arr [ ] , int allPrimes [ ] ) { Vector < Integer > list1 = new Vector < > ( ) ; for ( int i : allPrimes ) { for ( int j : arr ) { if ( j % i == 0 ) { list1 . add ( i ) ; break ; } } } return list1 ; }
Vector < Integer > getArray ( int n ) { Vector < Integer > ans = new Vector < Integer > ( ) ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans . add ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; }
int maximumLength ( int a [ ] ) { int counts [ ] = new int [ 11 ] ; int ans = 0 ; for ( int index = 0 ; index < a . length ; index ++ ) { counts [ a [ index ] ] ++ ; List < Integer > k = new ArrayList < > ( ) ; for ( int i : counts ) { if ( i != 0 ) { k . add ( i ) ; } } Collections . sort ( k ) ; if ( k . size ( ) == 1 || ( k . get ( 0 ) == k . get ( k . size ( ) - 2 ) && k . get ( k . size ( ) - 1 ) - k . get ( k . size ( ) - 2 ) == 1 ) || ( k . get ( 0 ) == 1 && k . get ( 1 ) == k . get ( k . size ( ) - 1 ) ) ) { ans = index ; } } return ans + 1 ; }
int maxEdges ( int n ) { int edges = n * n / 4 ; return edges ; }
int findK ( int n , int k ) { Vector < Integer > a = new Vector < > ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a . add ( i ) ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a . add ( i ) ; } } return a . get ( k - 1 ) ; }
boolean isKeith ( int x , int temp ) { Vector < Integer > terms = new Vector < > ( ) ; int n = 0 ; while ( temp > 0 ) { terms . add ( temp % 10 ) ; temp /= 10 ; n ++ ; } Collections . reverse ( terms ) ; int nextTerm = 0 , i = n ; while ( nextTerm < x ) { nextTerm = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { nextTerm += terms . get ( i - j ) ; } terms . add ( nextTerm ) ; i ++ ; } return nextTerm == x ; }
boolean factors ( int n , int k ) { Vector < Integer > v = new Vector < > ( ) ; while ( n % 2 == 0 ) { v . add ( 2 ) ; n /= 2 ; } if ( v . size ( ) >= k ) { return true ; } for ( int i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n /= i ; v . add ( i ) ; } if ( v . size ( ) >= k ) { return true ; } } if ( n > 2 ) { v . add ( n ) ; } if ( v . size ( ) >= k ) { return true ; } return false ; }
Vector < String > separateParenGroups ( String parenString ) { Vector < String > allParens = new Vector < > ( ) ; Vector < Character > currentParen = new Vector < > ( ) ; int currentDepth = 0 ; for ( char c : parenString ) { if ( c == '(' ) { currentDepth += 1 ; currentParen . add ( c ) ; } else if ( c == ")" ) { currentDepth -= 1 ; currentParen . add ( c ) ; if ( currentDepth == 0 ) { allParens . add ( currentParen . join ( "" ) ) ; currentParen . size ( ) = 0 ; } } } return allParens ; }
Vector < Integer > parseNestedParens ( String parenString ) { Vector < Integer > allLevels = new Vector < Integer > ( ) ; int level = 0 ; int maxLevel = 0 ; for ( int i = 0 ; i < parenString . length ( ) ; i ++ ) { char chr = parenString . charAt ( i ) ; if ( chr == '(' ) { level += 1 ; if ( level > maxLevel ) { maxLevel = level ; } } if ( chr == ")" ) { level -= 1 ; if ( level == 0 ) { allLevels . add ( maxLevel ) ; maxLevel = 0 ; } } } return allLevels ; }
Vector < String > filterBySubstring ( String strings , String substring ) { Vector < String > result = new Vector < > ( ) ; for ( String s : strings ) { if ( s . startsWith ( substring ) ) { result . add ( s ) ; } } return result ; }
Vector < Integer > rollingMax ( int [ ] numbers ) { int runningMax = 0 ; Vector < Integer > result = new Vector < Integer > ( ) ; for ( int n : numbers ) { if ( n > runningMax ) { runningMax = n ; } result . add ( runningMax ) ; } return result ; }
String makePalindrome ( String s ) { if ( s . length ( ) == 0 ) { return "" ; } for ( int i = 0 ; i < s . length ( ) ; i ++ ) { String rStr = s . substring ( i ) ; if ( rStr == rStr . split ( "" ) . reverse ( ) . join ( "" ) ) { String nStr = s . substring ( 0 , i ) ; String n2Str = nStr . split ( "" ) . reverse ( ) . join ( "" ) ; return s + n2Str ; } } return s . substring ( 0 , - 1 ) + s . split ( "" ) . reverse ( ) . join ( "" ) ; }
String stringXor ( String a , String b ) { Vector < String > result = new Vector < > ( ) ; for ( int i = 0 ; i < a . length ( ) ; i ++ ) { if ( a . charAt ( i ) == b . charAt ( i ) ) { result . add ( "0" ) ; } else { result . add ( "1" ) ; } } return result . toString ( ) ; }
String longest ( String [ ] strings ) { if ( strings . length == 0 ) { return "" ; } int maxLen = Arrays . stream ( strings ) . max ( ) . getAsInt ( ) ; for ( String s : strings ) { if ( s . length ( ) == maxLen ) { return s ; } } return "" ; }
String stringSequence ( int n ) { StringSequence s = new StringSequence ( n + 1 ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( i . toString ( ) ) ; s . add ( " " ) ; } s . add ( n ) ; return s . toString ( ) ; }
int countDistinctCharacters ( String s ) { Set < Character > distinct = new HashSet < Character > ( ) ; for ( char c : s . toCharArray ( ) ) { distinct . add ( c ) ; } return distinct . size ( ) ; }
int howManyTimes ( String s , String sub ) { int times = 0 ; for ( int i = 0 ; i <= s . length ( ) - sub . length ( ) ; i ++ ) { if ( s . substring ( i , i + sub . length ( ) ) == sub ) { times += 1 ; } } return times ; }
String sortNumbers ( String [ ] numbers ) { HashMap < Integer , Integer > toNum = new HashMap < > ( ) ; Map < Integer , Integer > fromNum = new HashMap < > ( ) ; int [ ] ints = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i <= numbers . length ; i ++ ) { if ( i == numbers . length || numbers [ i ] == ' ' ) { if ( toNum . containsKey ( current . join ( "" ) ) ) { ints . add ( toNum . get ( current . join ( "" ) ) ; current . clear ( ) ; } } else { current . add ( numbers [ i ] ) ; } } Collections . sort ( ints ) ; List < Integer > result = new ArrayList < Integer > ( ) ; for ( int i = 0 ; i < ints . size ( ) ; i ++ ) { result . add ( fromNum . get ( ints . get ( i ) ) ) ; if ( i != ints . size ( ) - 1 ) { result . add ( ' ' ) ; } } return result . toString ( ) ; }
Vector < Integer > findClosestElements ( int [ ] numbers ) { Vector < Integer > closestPair = new Vector < Integer > ( ) ; int distance = Math . abs ( closestPair [ 0 ] - closestPair [ 1 ] ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { for ( int j = i + 1 ; j < numbers . length ; j ++ ) { if ( Math . abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closestPair [ 0 ] = numbers [ i ] ; closestPair [ 1 ] = numbers [ j ] ; distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; } } } Collections . sort ( closestPair ) ; return closestPair ; }
Vector < Integer > rescaleToUnit ( int [ ] numbers ) { int minNum = Collections . min ( Arrays . asList ( numbers ) ) ; int maxNum = Collections . max ( Arrays . asList ( numbers ) ) ; Vector < Integer > result = new Vector < Integer > ( ) ; for ( int n : numbers ) { result . add ( ( n - minNum ) / ( maxNum - minNum ) ) ; } return result ; }
Vector < Integer > filterIntegers ( int [ ] values ) { Vector < Integer > result = new Vector < > ( ) ; for ( int e : values ) { if ( Integer . isInteger ( e ) ) { result . add ( e ) ; } } return result ; }
Vector < Integer > removeDuplicates ( int [ ] numbers ) { HashMap < Integer , Integer > counter = new HashMap < Integer , Integer > ( ) ; for ( int i : numbers ) { counter . put ( i , ( counter . get ( i ) ?? 0 ) + 1 ) ; } Vector < Integer > result = new Vector < Integer > ( ) ; for ( int i : numbers ) { if ( counter . get ( i ) == 1 ) { result . add ( i ) ; } } return result ; }
String flipCase ( String s ) { Vector < Character > result = new Vector < > ( ) ; for ( char c : s ) { if ( c == c . toLowerCase ( ) && c != c . toUpperCase ( ) ) { result . add ( c . toUpperCase ( ) ) ; } else { result . add ( c ) ; } } return result . toString ( ) ; }
Vector < String > filterByPrefix ( String strings , String prefix ) { Vector < String > result = new Vector < > ( ) ; for ( int i = 0 ; i < strings . length ( ) ; i ++ ) { if ( strings . charAt ( i ) . startsWith ( prefix ) ) { result . add ( strings . charAt ( i ) ) ; } } return result ; }
int findZero ( int [ ] xs ) { int ans = 0 ; int value = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) { value += xs [ i ] * Math . pow ( ans , i ) ; } while ( Math . abs ( value ) > 1e-6 ) { int driv = 0 ; for ( int i = 1 ; i < xs . length ; i ++ ) { driv += xs [ i ] * Math . pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . length ; i ++ ) { value += xs [ i ] * Math . pow ( ans , i ) ; } } return ans ; }
Vector < Integer > sortThird ( Vector < Integer > l ) { Vector < Integer > thirds = new Vector < > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i += 3 ) { thirds . add ( l . get ( i ) ) ; } Collections . sort ( thirds ) ; Vector < Integer > result = new Vector < > ( ) ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 3 == 0 ) { result . add ( thirds . get ( i / 3 ) ) ; } else { result . add ( l . get ( i ) ) ; } } return result ; }
int [ ] unique ( int [ ] l ) { int [ ] result = new int [ l ] ; Collections . addAll ( result , l ) ; Collections . sort ( result ) ; return result ; }
int maxElement ( int ... l ) { return Math . max ( Arrays . asList ( l ) ) ; }
boolean triplesSumToZero ( int [ ] l ) { for ( int i = 0 ; i < l . length ; i ++ ) { for ( int j = i + 1 ; j < l . length ; j ++ ) { for ( int k = j + 1 ; k < l . length ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) { return true ; } } } } return false ; }
int fib4 ( int n ) { int results [ ] = new int [ n + 1 ] ; for ( int i = 4 ; i <= n ; i ++ ) { results . add ( results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ) ; } return results [ n ] ; }
boolean isPalindrome ( String text ) { String pr = Collections . reverse ( text . split ( "" ) ) . join ( "" ) ; return pr == text ; }
String removeVowels ( String text ) { Vector < Character > result = new Vector < > ( ) ; String vowels = "aeiou" ; for ( char ch : text ) { if ( ! vowels . contains ( ch . toLowerCase ( ) ) ) { result . add ( ch ) ; } } return result . toString ( ) ; }
boolean sameChars ( String s0 , String s1 ) { Set < Character > set0 = new HashSet < Character > ( ) ; for ( char c : s0 ) { set0 . add ( c ) ; } Set < Character > set1 = new HashSet < Character > ( ) ; for ( char c : s1 ) { set1 . add ( c ) ; } return Arrays . stream ( set0 ) . max ( ) . getAsInt ( ) == Arrays . stream ( set1 ) . max ( ) ; }
Vector < Integer > common ( Vector < Integer > l1 , Vector < Integer > l2 ) { HashSet < Integer > us = new HashSet < Integer > ( ) ; for ( int el1 : l1 ) { for ( int el2 : l2 ) { if ( el1 == el2 ) { us . add ( e1 ) ; } } } Vector < Integer > ret = new Vector < Integer > ( us ) ; Collections . sort ( ret ) ; return ret ; }
boolean correctBracketing ( String brackets ) { int depth = 0 ; for ( char b : brackets ) { if ( b == '(' ) { depth += 1 ; } else { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; }
String circularShift ( int x , int shift ) { String s = Integer . toString ( x ) ; if ( shift > s . length ( ) ) { return s . split ( "" ) . reverse ( ) . join ( "" ) ; } return s . substring ( - shift ) + s . substring ( 0 , - shift ) ; }
int search ( int [ ] lst ) { HashMap < Integer , Integer > counter = new HashMap < Integer , Integer > ( ) ; for ( int i : lst ) { counter . put ( i , ( counter . get ( i ) ?? 0 ) + 1 ) ; } int ans = - 1 ; for ( Map . Entry < Integer , Integer > i : counter . entrySet ( ) ) { if ( i >= key && i > ans ) { ans = i ; } } return ans ; }
int smallestChange ( int [ ] arr ) { int ans = 0 ; for ( int i = 0 ; i < Math . trunc ( arr . length / 2 ) ; i ++ ) { if ( arr [ i ] != arr [ arr . length - i - 1 ] ) { ans += 1 ; } } return ans ; }
int totalMatch ( String lst1 , String lst2 ) { int sum1 = 0 ; for ( String st : lst1 ) { sum1 += st . length ( ) ; } int sum2 = 0 ; for ( String st : lst2 ) { sum2 += st . length ( ) ; } return sum1 > sum2 ? lst2 : lst1 ; }
boolean isHappy ( String s ) { if ( s . length ( ) < 3 ) { return false ; } for ( int i = 0 ; i < s . length ( ) - 2 ; i ++ ) { if ( s . charAt ( i ) == s . charAt ( i + 1 ) || s . charAt ( i + 1 ) == s . charAt ( i + 2 ) || s . charAt ( i ) == s . charAt ( i + 2 ) ) { return false ; } } return true ; }
Vector < String > numericalLetterGrade ( Vector < Integer > grades ) { Vector < String > letterGrade = new Vector < String > ( ) ; for ( int i = 0 ; i < grades . size ( ) ; i ++ ) { double gpa = grades . get ( i ) ; if ( gpa == 4.0 ) { letterGrade . add ( "A+" ) ; } else if ( gpa > 3.7 ) { letterGrade . add ( "A" ) ; } else if ( gpa > 3.3 ) { letterGrade . add ( "A-" ) ; } else if ( gpa > 3.0 ) { letterGrade . add ( "B+" ) ; } else if ( gpa > 2.7 ) { letterGrade . add ( "B" ) ; } else if ( gpa > 2.3 ) { letterGrade . add ( "B-" ) ; } else if ( gpa > 2.0 ) { letterGrade . add ( "C+" ) ; } else if ( gpa > 1.7 ) { letterGrade . add ( "C" ) ; } else if ( gpa > 1.3 ) { letterGrade . add ( "C-" ) ; } else if ( gpa > 1.0 ) { letterGrade . add ( "D+" ) ; } else if ( gpa > 0.7 ) { letterGrade . add ( "D" ) ; } else if ( gpa > 0.0 ) { letterGrade . add ( "D-" ) ; } else { letterGrade . add ( "E" ) ; } } return letterGrade ; }
String solve ( int n ) { Vector < String > biStr = new Vector < > ( ) ; int sum = 0 ; for ( char c : n ) { sum += c - '0' ; } while ( sum > 0 ) { biStr . add ( ( sum % 2 ) . toString ( ) ) ; sum /= 2 ; } return biStr . toString ( ) ; }
String antiShuffle ( String s ) { ArrayList < String > ret = new ArrayList < > ( ) ; ArrayList < String > current = new ArrayList < > ( ) ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s . charAt ( i ) == ' ' ) { current . sort ( ) ; if ( ret . size ( ) > 0 ) { ret . add ( " " ) ; } ret . add ( current . join ( "" ) ) ; current . size ( ) = 0 ; } else { current . add ( s . charAt ( i ) ) ; } } return ret . toString ( ) ; }
void sortArray ( int [ ] array ) { if ( array . length == 0 ) { return array ; } if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) { Arrays . sort ( array ) ; } else { Arrays . sort ( array ) ; } return array ; }
String encrypt ( String s ) { Vector < Character > ans = new Vector < Character > ( ) ; for ( char c : s ) { if ( c . toUpperCase ( ) != c . toLowerCase ( ) ) { ans . add ( ( char ) ( 'a' + ( c - 'a' + 4 ) % 26 ) ) ; } else { ans . add ( c ) ; } } return ans . toString ( ) ; }
int isBored ( String s ) { boolean isStart = true ; int sum = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( s . charAt ( i ) == '.' || s . charAt ( i ) == '?' || s . charAt ( i ) == '!' ) { isStart = true ; } else if ( isStart ) { if ( s . charAt ( i ) == ' ' ) { continue ; } if ( s . charAt ( i + 2 ) == 'I' ) { sum += 1 ; } isStart = false ; } } return sum ; }
String encode ( String message ) { String vowels = "aeiouAEIOU" ; Vector < Character > ret = new Vector < Character > ( ) ; for ( char c : message ) { if ( c . toUpperCase ( ) == c && c . toLowerCase ( ) != c ) { c = c . toLowerCase ( ) ; if ( vowels . contains ( c ) ) { c = ( char ) ( 'a' + ( c - 'a' + 2 ) % 26 ) ; } } else if ( c . toUpperCase ( ) != c && c . toLowerCase ( ) == c ) { c = c . toUpperCase ( ) ; if ( vowels . contains ( c ) ) { c = ( char ) ( 'A' + ( c - 'A' + 2 ) % 26 ) ; } } ret . add ( c ) ; } return ret . toString ( "" ) ; }
int skjkasdkd ( int [ ] lst ) { int largest = 0 ; for ( int n : lst ) { if ( n > largest ) { boolean prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } int sum = 0 ; String s = Integer . toString ( largest ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { sum += s . charAt ( i ) - '0' ; } return sum ; }
boolean checkDictCase ( String dict ) { if ( dict . size ( ) == 0 ) { return false ; } int isLower = 0 ; int isUpper = 0 ; for ( Map . Entry < Integer , String > i : dict . entrySet ( ) ) { for ( char c : i . toCharArray ( ) ) { if ( c . toLowerCase ( ) == c && c . toUpperCase ( ) != c ) { isLower = 1 ; } else if ( c . toLowerCase ( ) != c && c . toUpperCase ( ) == c ) { isUpper = 1 ; } else { return false ; } } } return isLower + isUpper == 1 ; }
int multiply ( int a , int b ) { return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ; }
int countUpper ( String s ) { String uVowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . length ( ) ; i += 2 ) { if ( uVowel . contains ( s . charAt ( i ) ) ) { count ++ ; } } return count ; }
Vector < Integer > byLength ( int [ ] arr ) { HashMap < Integer , String > numTo = new HashMap < Integer , String > ( ) ; for ( int i = 1 ; i <= 9 ; i ++ ) { numTo . put ( i , "One" ) ; } int sortedArr [ ] = new int [ ] { Collections . sort ( arr ) ; int newArr [ ] = new Vector < Integer > ( ) ; for ( int i = 0 ; i < 9 ; i ++ ) { if ( i >= 1 && i <= 9 ) { newArr . add ( numTo . get ( i ) ) ; } } return newArr ; }
Vector < Integer > f ( int n ) { int sum = 1 ; int prod = 0 ; Vector < Integer > result = new Vector < > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { prod += i ; sum *= i ; if ( i % 2 == 0 ) { result . add ( sum ) ; } else { result . add ( prod ) ; } } return result ; }
int evenOddPalindrome ( int n ) { int evenCount = 0 ; int oddCount = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { String s = Integer . toString ( i ) ; String rStr = s . split ( "" ) . reverse ( ) . join ( "" ) ; if ( s == rStr ) { if ( i % 2 == 1 ) { oddCount += 1 ; } else { evenCount += 1 ; } } } return new int [ ] { evenCount , oddCount } ; }
HashMap < Integer , Integer > histogram ( String test ) { HashMap < Integer , Integer > count = new HashMap < > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . length ( ) ; i ++ ) { if ( test . charAt ( i ) != ' ' ) { count . put ( test . charAt ( i ) , ( count . get ( test . charAt ( i ) ) ?? 0 ) + 1 ) ; if ( count . get ( test . charAt ( i ) ) > max ) { max = count . get ( test . charAt ( i ) ) ; } } } HashMap < Integer , Integer > result = new HashMap < > ( ) ; for ( Integer a : count . entrySet ( ) ) { if ( a . getValue ( ) == max ) { result . put ( a . getKey ( ) , a . getValue ( ) ) ; } } return result ; }
Vector < Character > reverseDelete ( String s , String c ) { Vector < Character > ret = new Vector < Character > ( ) ; for ( char ch : s ) { if ( ! c . contains ( ch ) ) { ret . add ( ch ) ; } } char flag = "False" ; if ( ret . toString ( ) . equals ( ret . toString ( ) ) ) { flag = "True" ; } return ret ; }
int sortArray ( int [ ] arr ) { ArrayList < Integer > bin = new ArrayList < Integer > ( ) ; for ( int i : arr ) { int b = 0 ; int n = Math . abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . add ( b ) ; } for ( int i = 0 ; i < arr . length ; i ++ ) { for ( int j = 1 ; j < arr . length ; j ++ ) { if ( bin . get ( j ) < bin . get ( j - 1 ) || ( bin . get ( j ) == bin . get ( j - 1 ) && arr . get ( j ) < arr . get ( j - 1 ) ) ) { Arrays . fill ( bin . get ( j ) , bin . get ( j - 1 ) ) ; Arrays . fill ( arr , arr . get ( j ) ) ; } } } return arr ; }
String getClosestVowel ( String word ) { String vowels = "AEIOUaeiou" ; for ( int i = word . length ( ) - 2 ; i > 0 ; i -- ) { if ( vowels . contains ( word . charAt ( i ) ) && ! vowels . contains ( word . charAt ( i + 1 ) ) && ! vowels . contains ( word . charAt ( i - 1 ) ) ) { return word . charAt ( i ) ; } } return "" ; }
String matchParens ( List < String > lst ) { List < String > strings = new ArrayList < > ( ) ; for ( String l : strings ) { int count = 0 ; for ( char c : l ) { if ( c == '(' ) { count += 1 ; } if ( c == ")" ) { count -= 1 ; } if ( count < 0 ) { break ; } } if ( count == 0 ) { return "Yes" ; } } return "No" ; }
int maximum ( int arr [ ] , int k ) { if ( k == 0 ) { return arr ; } Arrays . sort ( arr ) ; return arr . slice ( - k ) ; }
boolean validDate ( String date ) { if ( date . length ( ) != 10 ) { return false ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 || i == 5 ) { if ( date . charAt ( i ) != '-' ) { return false ; } } else if ( '0' > date . charAt ( i ) && date . charAt ( i ) > '9' ) { return false ; } } int month = date . charAt ( 0 ) ; int day = date . charAt ( 3 , 5 ) ; int year = date . charAt ( 6 ) ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) { return false ; } if ( day == 30 && month == 2 ) { return false ; } return true ; }
Vector < String > splitWords ( String txt ) { Vector < String > current = new Vector < > ( ) ; Vector < String > result = new Vector < > ( ) ; if ( txt . includes ( ' ' ) ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == ' ' ) { if ( current . size ( ) > 0 ) { result . add ( current . join ( "" ) ) ; } current . size ( ) = 0 ; } else { current . add ( txt . charAt ( i ) ) ; } } return result ; } if ( txt . includes ( "," ) ) { for ( int i = 0 ; i <= txt . length ( ) ; i ++ ) { if ( i == txt . length ( ) || txt . charAt ( i ) == "," ) { if ( current . size ( ) > 0 ) { result . add ( current . join ( "" ) ) ; } current . size ( ) = 0 ; } else { current . add ( txt . charAt ( i ) ) ; } } return result ; } int num = 0 ; for ( char c : txt ) { if ( c . toLowerCase ( ) == c && c . toUpperCase ( ) != c && c % 2 == 0 ) { num += 1 ; } } return new Vector < String > ( ) ; }
Vector < Integer > tri ( int n ) { if ( n == 0 ) { return new Vector < Integer > ( ) ; } Vector < Integer > tris = new Vector < Integer > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { tris . add ( 1 + i / 2 ) ; } else { tris . add ( tris . get ( i - 2 ) + tris . get ( i - 1 ) + ( i + 3 ) / 2 ) ; } } return tris ; }
boolean checkIfLastCharIsALetter ( String txt ) { if ( txt . length ( ) == 0 ) { return false ; } return txt . charAt ( txt . length ( ) - 1 ) != txt . charAt ( txt . length ( ) - 1 ) . toLowerCase ( ) && ( txt . length ( ) == 1 || txt . charAt ( txt . length ( ) - 2 ) . toUpperCase ( ) == txt . charAt ( txt . length ( ) - 2 ) . toLowerCase ( ) ) ; }
int [ ] orderByPoints ( int [ ] nums ) { Vector < Integer > result = new Vector < Integer > ( ) ; for ( int num : nums ) { String w = Integer . toString ( num ) ; int sum = 0 ; for ( char c : w ) { sum += c - '0' ; } if ( num < 0 ) { sum -= 2 * ( w [ 0 ] - '0' ) ; } result . add ( sum ) ; } for ( int i = 0 ; i < nums . length ; i ++ ) { for ( int j = 1 ; j < nums . length ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { Vector < Integer , Integer > t = result . get ( j ) ; result . set ( j - 1 , t ) ; } } } return nums ; }
Vector < String > bf ( String planet1 , String planet2 ) { Vector < String > planets = new Vector < String > ( ) ; int idx1 = planets . indexOf ( planet1 ) ; int idx2 = planets . indexOf ( planet2 ) ; if ( idx1 == - 1 || idx2 == - 1 || idx1 == idx2 ) { return new Vector < > ( ) ; } return idx1 > idx2 ? planets . slice ( idx2 + 1 , idx1 ) : planets . slice ( idx1 + 1 , idx2 ) ; }
Vector < Integer > sortedListSum ( List < Integer > lst ) { Vector < Integer > result = new Vector < > ( ) ; for ( Integer i : lst ) { if ( i . size ( ) % 2 == 0 ) { result . add ( i ) ; } } Collections . sort ( result ) ; return result ; }
boolean cycpatternCheck ( String a , String b ) { for ( int i = 0 ; i < b . length ( ) ; i ++ ) { String rotate = b . substring ( i ) + b . substring ( 0 , i ) ; if ( a . contains ( rotate ) ) { return true ; } } return false ; }
int evenOddCount ( int num ) { int evenCount = 0 , oddCount = 0 ; for ( int i : Integer . toString ( num ) . toCharArray ( ) ) { if ( i % 2 == 0 ) { evenCount += 1 ; } else { oddCount += 1 ; } } return new int [ ] { evenCount , oddCount } ; }
String findMax ( List < String > words ) { String max = "" ; int maxLength = 0 ; for ( String word : words ) { List < String > unique = new ArrayList < > ( ) ; for ( String w : word ) { if ( ! unique . contains ( w ) ) { unique . add ( w ) ; } } if ( unique . size ( ) > maxLength || ( unique . size ( ) == maxLength && word < max ) ) { max = word ; maxLength = unique . size ( ) ; } } return max ; }
String solve ( String s ) { boolean noLetter = true ; Vector < Character > result = new Vector < Character > ( ) ; for ( char ch : s ) { if ( ch . toUpperCase ( ) == ch && ch . toLowerCase ( ) != ch ) { ch = ch . toLowerCase ( ) ; noLetter = false ; } else if ( ch . toUpperCase ( ) != ch && ch . toLowerCase ( ) == ch ) { ch = ch . toUpperCase ( ) ; noLetter = false ; } result . add ( ch ) ; } if ( noLetter ) { return Collections . reverse ( result ) . join ( "" ) ; } else { return result . toString ( "" ) ; } }
int mostFrequent ( int arr [ ] , int n ) { HashMap < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) { hp . put ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . put ( arr [ i ] , 1 ) ; } } int maxCount = 0 , res = - 1 ; for ( Map . Entry < Integer , Integer > entry : hp . entrySet ( ) ) { if ( maxCount < entry . getValue ( ) ) { res = entry . getKey ( ) ; maxCount = entry . getValue ( ) ; } } return res ; }
int find ( int a [ ] , int b [ ] , int k , int n1 , int n2 ) { HashSet < Integer > s = new HashSet < > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { s . add ( b [ i ] ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( ! s . contains ( a [ i ] ) ) { missing ++ ; } if ( missing == k ) { return a [ i ] ; } } return - 1 ; }
int solveQuery ( int start , int end , int arr [ ] ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; for ( int i = start ; i <= end ; i ++ ) { mp . put ( arr [ i ] , ( mp . get ( arr [ i ] ) ?? 0 ) + 1 ) ; } int count = 0 ; for ( Map . Entry < Integer , Integer > i : mp . entrySet ( ) ) { if ( i . getKey ( ) == i . getValue ( ) ) { count ++ ; } } return count ; }
int segregate ( int arr [ ] , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { pair t = arr [ i ] ; arr [ j ] = t ; j ++ ; } } return j ; }
int countTriplets ( int a [ ] , int n ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . add ( a [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( s . contains ( xr ) && xr != a [ i ] && xr != a [ j ] ) { count ++ ; } } } return count / 3 ; }
int leastFrequent ( int arr [ ] , int n ) { HashMap < Integer , Integer > hp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . containsKey ( arr [ i ] ) ) { hp . put ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . put ( arr [ i ] , 1 ) ; } } int minCount = n + 1 , res = - 1 ; for ( Map . Entry < Integer , Integer > entry : hp . entrySet ( ) ) { if ( minCount >= entry . getValue ( ) ) { res = entry . getKey ( ) ; minCount = entry . getValue ( ) ; } } return res ; }
int findPermutations ( int [ ] arr ) { int cnt = 0 ; int maxInd = - 1 , minInd = 10000000 ; int n = arr . length ; HashMap < Integer , Integer > indexOf = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { indexOf . put ( arr [ i ] , i + 1 ) ; } for ( int i = 1 ; i <= n ; i ++ ) { maxInd = Math . max ( maxInd , indexOf . get ( i ) ?? 0 ) ; minInd = Math . min ( minInd , indexOf . get ( i ) ?? 0 ) ; if ( maxInd - minInd + 1 == i ) { cnt ++ ; } } return cnt ; }
int formQuadruplets ( int arr [ ] , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; Arrays . sort ( arr ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; }
String lexicographicallyMaximum ( String s , int n ) { HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . containsKey ( s . charAt ( i ) ) ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) + 1 ) ; } else { m . put ( s . charAt ( i ) , 1 ) ; } } ArrayList < Character > v = new ArrayList < Character > ( ) ; for ( int i = 'a' ; i < 'a' + Math . min ( n , 25 ) ; ++ i ) { if ( m . containsKey ( s . charAt ( i ) ) ) { continue ; } m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) - 1 ) ; s = s . slice ( 0 , i ) + v . get ( j ) + s . slice ( i + 1 ) ; j -- ; } if ( j < 0 ) { break ; } } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) { break ; } if ( s . charAt ( i ) >= 'a' + Math . min ( n , 25 ) || m . containsKey ( s . charAt ( i ) ) && m . get ( s . charAt ( i ) ) > 1 ) { m . put ( s . charAt ( i ) , m . get ( s . charAt ( i ) ) - 1 ) ; s = s . slice ( 0 , i ) + v . get ( l ) + s . slice ( i + 1 ) ; l ++ ; } } return s ; }
int noOfValidKbers ( int k , int [ ] arr ) { HashSet < Integer > set = new HashSet < Integer > ( ) ; while ( k != 0 ) { set . add ( k % 10 ) ; k /= 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . length ; i ++ ) { int no = arr [ i ] ; boolean flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( ! set . contains ( digit ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag ) { count ++ ; } } return count ; }
int delCost ( String s , int [ ] cost ) { int ans = 0 ; HashMap < Character , Integer > forMax = new HashMap < Character , Integer > ( ) ; HashMap < Character , Integer > forTot = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < s . length ; i ++ ) { if ( ! forMax . containsKey ( s [ i ] ) ) { forMax . put ( s [ i ] , cost [ i ] ) ; } else { forMax . put ( s [ i ] , Math . max ( forMax . get ( s [ i ] ) , cost [ i ] ) ) ; } if ( ! forTot . containsKey ( s [ i ] ) ) { forTot . put ( s [ i ] , cost [ i ] ) ; } else { forTot . put ( s [ i ] , forTot . get ( s [ i ] ) + cost [ i ] ) ; } } for ( int i : forMax ) { ans += forTot . get ( i [ 0 ] ) - i [ 1 ] ; } return ans ; }
String replaceDuplicates ( String names ) { HashMap < Character , Integer > hash = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < names . length ( ) ; i ++ ) { if ( ! hash . containsKey ( names . charAt ( i ) ) ) { hash . put ( names . charAt ( i ) , 1 ) ; } else { int count = hash . get ( names . charAt ( i ) ) ; hash . put ( names . charAt ( i ) , hash . get ( names . charAt ( i ) ) + 1 ) ; names . charAt ( i ) += count . toString ( ) ; } } return names ; }
Vector < Integer > minmaxNumbers ( int [ ] [ ] matrix , Vector < Integer > res ) { TreeSet < Integer > s = new TreeSet < Integer > ( ) ; for ( int i = 0 ; i < matrix . length ; i ++ ) { int minR = Integer . MAX_VALUE ; for ( int j = 0 ; j < matrix [ i ] . length ; j ++ ) { minR = Math . min ( minR , matrix [ i ] [ j ] ) ; } s . add ( minR ) ; } for ( int j = 0 ; j < matrix [ 0 ] . size ( ) ; j ++ ) { int maxC = - Integer . MAX_VALUE ; for ( int i = 0 ; i < matrix . length ; i ++ ) { maxC = Math . max ( maxC , matrix [ i ] [ j ] ) ; } if ( s . contains ( maxC ) ) { res . add ( maxC ) ; } } return res ; }
int lengthOfLongestAP ( int a [ ] , int n ) { Map < Integer , Integer > dp = new HashMap < Integer , Integer > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = i + 1 ; j < n ; ++ j ) { int d = a [ j ] - a [ i ] ; if ( dp . containsKey ( d ) ) { if ( dp . get ( d ) . containsKey ( i ) ) { dp . get ( d ) . put ( j , dp . get ( d ) . get ( i ) + 1 ) ; } else { dp . get ( d ) . put ( j , 2 ) ; } } else { dp . put ( d , new HashMap < > ( ) ) ; dp . get ( d ) . put ( j , 2 ) ; } res = Math . max ( res , dp . get ( d ) . get ( j ) ) ; } } return res ; }
char findKthChar ( int n , int k ) { String prev = "A" ; String cur = "" ; if ( n == 1 ) { return 'A' ; } for ( int j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . length ( ) ; i ++ ) { if ( prev . charAt ( i ) == 'A' ) { prev = prev . slice ( 0 , i ) + "B" + prev . slice ( i + 1 ) ; } else { prev = prev . slice ( 0 , i ) + "A" + prev . slice ( i + 1 ) ; } } prev = prev . split ( "" ) . reverse ( ) . join ( "" ) ; cur += prev ; prev = cur ; } return cur . charAt ( k - 1 ) ; }
int findKthLargest ( String s , int k ) { String tmp = s . split ( "" ) ; Collections . sort ( tmp ) ; Collections . reverse ( tmp ) ; return tmp . get ( k - 1 ) ; }
int subArraylen ( int [ ] arr , int n , int K ) { HashMap < Integer , Integer > mp = new HashMap < > ( ) ; mp . put ( arr [ 0 ] , 0 ) ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp . put ( arr [ i ] , i ) ; } int len = Integer . MAX_VALUE ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < K ) { continue ; } else { int x = arr [ i ] - K ; if ( x == 0 ) { len = Math . min ( len , i ) ; } if ( mp . get ( x ) == null ) { len = Math . min ( len , i - mp . get ( x ) ) ; } } } return len ; }
int findMaxLen ( int a [ ] , int k ) { int n = a . length ; Arrays . sort ( a ) ; boolean [ ] vis = new boolean [ n ] ; Arrays . fill ( vis , false ) ; HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { mp . put ( a [ i ] , i ) ; } int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( ! vis [ i ] ) { int check = a [ i ] * k ; if ( mp . containsKey ( check ) ) { c ++ ; vis [ mp . get ( check ) ] = true ; } } } return n - c ; }
Vector < Integer > minDistancePoints ( int a [ ] , int k , int n ) { HashMap < Integer , Integer > m = new HashMap < Integer , Integer > ( ) ; Queue < Integer > q = new LinkedList < > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { m . put ( a [ i ] , 1 ) ; q . add ( a [ i ] ) ; } Vector < Integer > ans = new Vector < Integer > ( ) ; while ( k > 0 ) { int x = q . peek ( ) ; q . poll ( ) ; if ( m . containsKey ( x - 1 ) && k > 0 ) { m . put ( x - 1 , 1 ) ; q . add ( x - 1 ) ; ans . add ( x - 1 ) ; k -- ; } if ( ! m . containsKey ( x + 1 ) && k > 0 ) { m . put ( x + 1 , 1 ) ; q . add ( x + 1 ) ; ans . add ( x + 1 ) ; k -- ; } } return ans ; }
boolean isValidLen ( String s , int length , int k ) { int n = s . length ( ) ; HashMap < Character , Integer > mp = new HashMap < Character , Integer > ( ) ; int right = 0 ; while ( right < length ) { if ( mp . containsKey ( s . charAt ( right ) ) ) { mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; } else { mp . put ( s . charAt ( right ) , 1 ) ; } right ++ ; } if ( mp . size ( ) <= k ) { return true ; } while ( right < n ) { if ( mp . containsKey ( s . charAt ( right ) ) ) { mp . put ( s . charAt ( right ) , mp . get ( s . charAt ( right ) ) + 1 ) ; } else { mp . put ( s . charAt ( right ) , 1 ) ; } if ( mp . containsKey ( s . charAt ( right - length ) ) ) { mp . put ( s . charAt ( right - length ) , mp . get ( s . charAt ( right - length ) ) - 1 ) ; } if ( mp . containsKey ( s . charAt ( right - length ) ) && mp . get ( s . charAt ( right - length ) ) == 0 ) { mp . remove ( s . charAt ( right - length ) ) ; } if ( mp . size ( ) <= k ) { return true ; } right ++ ; } return mp . size ( ) <= k ; }
int partition ( int arr [ ] , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; [ arr [ i ] , arr [ j ] ] = new pair ( arr [ j ] , arr [ i ] ) ; } } [ arr [ i + 1 ] , arr [ high ] ] = new pair ( high ) , arr [ i + 1 ] ) ; return ( i + 1 ) ; }
int strScore ( String strs , String s , int n ) { HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m . put ( strs . charAt ( i ) , i + 1 ) ; } if ( m . get ( s ) == null ) { return 0 ; } int score = 0 ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { score += s . charAt ( i ) - 'a' + 1 ; } score = score * m . get ( s ) ; return score ; }
Vector < Integer > countEle ( String s , int a [ ] , int n ) { Map < Integer , Boolean > mp = new HashMap < Integer , Boolean > ( ) ; Vector < Integer > ans = new Vector < Integer > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int num = a [ i ] ; if ( mp . get ( num ) == null ) { ans . add ( 0 ) ; } else { int cnt = 0 ; while ( s . charAt ( 0 ) != num ) { mp . put ( s . charAt ( 0 ) , true ) ; s . remove ( ) ; cnt ++ ; } s . remove ( ) ; cnt ++ ; ans . add ( cnt ) ; } } return ans ; }
int maxDistinctChar ( String s , int n , int k ) { HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( s . charAt ( i ) ) ) { freq . put ( s . charAt ( i ) , freq . get ( s . charAt ( i ) ) + 1 ) ; } else { freq . put ( s . charAt ( i ) , 1 ) ; } } ArrayList < Integer > v = new ArrayList < > ( ) ; for ( Map . Entry < Integer , Integer > it : freq . entrySet ( ) ) { v . add ( it . getKey ( ) ) ; } Collections . sort ( v ) ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) - 1 , k ) ; v . set ( i , mn ) ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . size ( ) ; i ++ ) { int mn = Math . min ( v . get ( i ) , k ) ; v . set ( i , - mn ) ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v . get ( i ) == 1 ) { res ++ ; } } return res ; }
int findKth ( int arr [ ] , int n , int k ) { HashSet < Integer > missing = new HashSet < > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . add ( arr [ i ] ) ; } int maxM = Collections . max ( Arrays . asList ( arr ) ) ; int minM = Collections . min ( Arrays . asList ( arr ) ) ; for ( int i = minM + 1 ; i < maxM ; i ++ ) { if ( ! missing . contains ( i ) ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; }
boolean almostSort ( int a [ ] , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { pair t = a [ i ] ; a [ i + 1 ] = t ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { return false ; } } return true ; }
int maximumSum ( String s , int n , int k ) { int sum = 0 ; int [ ] freq = new int [ 256 ] ; for ( int i = 0 ; i < n ; i ++ ) { freq [ s . charAt ( i ) ] ++ ; } Arrays . sort ( freq ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; }
int findMinOperations ( int arr [ ] , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int j = i ; j < n ; j += k ) { freq . put ( arr [ j ] , ( freq . get ( arr [ j ] ) ?? 0 ) + 1 ) ; } int max1 = 0 , num = 0 ; for ( Map . Entry < Integer , Integer > i : freq . entrySet ( ) ) { if ( i > max1 ) { max1 = i ; num = key ; } } for ( Map . Entry < Integer , Integer > i : freq . entrySet ( ) ) { if ( i != num ) { operations += i ; } } } return operations ; }
Vector < String > subString ( String s , int n ) { Vector < String > v = new Vector < > ( ) ; int i , len ; for ( i = 0 ; i < n ; i ++ ) { for ( len = 1 ; len <= n - i ; len ++ ) { String find = s . substring ( i , i + len ) ; v . add ( find ) ; } } return v ; }
boolean checkUniqueFrequency ( int arr [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq . put ( arr [ i ] , ( freq . get ( arr [ i ] ) ?? 0 ) + 1 ) ; } Set < Integer > uniqueFreq = new HashSet < Integer > ( ) ; for ( Map . Entry < Integer , Integer > i : freq . entrySet ( ) ) { if ( uniqueFreq . contains ( i . getValue ( ) ) ) { return false ; } else { uniqueFreq . add ( i . getValue ( ) ) ; } } return true ; }
int minCost ( String str1 , String str2 , int n ) { int cost = 0 ; String tmp [ ] = str1 . split ( "" ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 [ i ] ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) { [ tmp [ i ] , tmp [ i + 1 ] ] = new pair ( tmp [ i + 1 ] , tmp [ i ] ) ; cost ++ ; } else { cost ++ ; } } } return cost ; }
boolean isValidNum ( String x ) { Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( mp . get ( x . charAt ( i ) - '0' ) ) { return false ; } else if ( x . charAt ( i ) - '0' > 5 ) { return false ; } else { mp . put ( x . charAt ( i ) - '0' , 1 ) ; } } return true ; }
int minimizeDiff ( int [ ] arr , int n , int k ) { int max = Collections . max ( Arrays . asList ( arr ) ) ; int min = Collections . min ( Arrays . asList ( arr ) ) ; if ( max - min <= k ) { return max - min ; } int avg = ( int ) Math . trunc ( ( max + min ) / 2 ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = Collections . max ( Arrays . asList ( arr ) ) ; min = Collections . min ( Arrays . asList ( arr ) ) ; return max - min ; }
int getMinCost ( int arr [ ] , int n ) { int minEle = Arrays . stream ( arr ) . min ( ) . getAsInt ( ) ; return minEle * ( n - 1 ) ; }
boolean possibility ( String m , int length , String s ) { int countOdd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( m . get ( s . charAt ( i ) - 48 ) & 1 ) { countOdd ++ ; } if ( countOdd > 1 ) { return false ; } } return true ; }
int minimumCostOfBreaking ( int [ ] x , int [ ] y , int m , int n ) { int res = 0 ; Arrays . sort ( x ) ; Arrays . sort ( y ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += x [ i ++ ] ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y [ j ++ ] ; } res += total * hzntl ; return res ; }
int findMaximumScore ( int a [ ] , int n ) { HashMap < Integer , Integer > freq = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . containsKey ( a [ i ] ) ) { freq . put ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; } else { freq . put ( a [ i ] , 1 ) ; } } int [ ] dp = new int [ 100 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = freq . get ( 1 ) ?? 0 ; for ( int i = 2 ; i < dp . length ; i ++ ) { dp [ i ] = Math . max ( dp [ i - 1 ] , dp [ i - 2 ] + ( freq . get ( i ) ?? 0 ) * i ) ; } return dp [ dp . length - 1 ] ; }
int countWays ( String s , int t , int k , int mod ) { int n = s . length ( ) ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { char p = s . charAt ( i , n ) + s . charAt ( 0 , i ) ; if ( p == t ) { a ++ ; } else { b ++ ; } } int [ ] dp1 = new int [ k + 1 ] ; int [ ] dp2 = new int [ k + 1 ] ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; } return dp1 [ k ] ; }
int findSubarraySum ( int arr [ ] , int n , int k ) { HashMap < Integer , Integer > prevSum = new HashMap < Integer , Integer > ( ) ; int res = 0 ; int currSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { currSum += arr [ i ] ; if ( currSum == k ) { res ++ ; } if ( prevSum . containsKey ( currSum - k ) ) { res += ( prevSum . get ( currSum - k ) ) ; } prevSum . put ( currSum , ( prevSum . get ( currSum ) ?? 0 ) + 1 ) ; } return res ; }
int maximumOccurrence ( String s ) { int n = s . length ( ) ; HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { char temp = "" ; temp += s . charAt ( i ) ; freq . put ( temp , ( freq . get ( temp ) ?? 0 ) + 1 ) ; } for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { char temp = "" ; temp += s . charAt ( i ) ; temp += s . charAt ( j ) ; freq . put ( temp , ( freq . get ( temp ) ?? 0 ) + 1 ) ; } } int answer = - Integer . MAX_VALUE ; for ( Map . Entry < Integer , Integer > entry : freq . entrySet ( ) ) { answer = Math . max ( answer , entry . getValue ( ) ) ; } return answer ; }
int countCharacters ( String strings , char [ ] chars ) { int res = 0 ; HashMap < Character , Integer > freq = new HashMap < Character , Integer > ( ) ; for ( int i = 0 ; i < chars . length ; i ++ ) { freq . put ( chars [ i ] , ( freq . get ( chars [ i ] ) ?? 0 ) + 1 ) ; } for ( String st : strings ) { boolean flag = true ; for ( char c : st ) { if ( freq . containsKey ( c ) ) { flag = false ; break ; } } if ( flag ) { res += st . length ( ) ; } } return res ; }
int distinctSubstring ( String p , String q , int k , int n ) { HashSet < String > ss = new HashSet < String > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int sum = 0 ; String s = "" ; for ( int j = i ; j < n ; ++ j ) { int pos = p . charAt ( j ) - 'a' ; sum += q . charAt ( pos ) - '0' ; s += p . charAt ( j ) ; if ( sum <= k ) { ss . add ( s ) ; } else { break ; } } } return ss . size ( ) ; }
int uniqueMorseRep ( String arr [ ] ) { int morseCode [ ] = { ".-" , "-..." , "-.-." , "-.." , '.' , '..-.' , '--.' , '....' , ".." , '.---' , "-.-" , ".-.." , "--" , "-." , "---" , ".--." , ".-." , "..." , "-" , "..-" , "...-" , ".--" , "-..-" , "-.--" , "--.." } ; HashSet < String > st = new HashSet < String > ( ) ; int N = arr . length ; for ( int i = 0 ; i < N ; i ++ ) { String temp = "" ; int M = arr [ i ] . length ( ) ; for ( int j = 0 ; j < M ; j ++ ) { temp += morseCode [ arr [ i ] . charAt ( j ) - 'a' ] ; } st . add ( temp ) ; } return st . size ( ) ; }
int countSubstrings ( String st , int k ) { int n = st . length ( ) ; int answer = 0 ; HashMap < Character , Integer > map = new HashMap < > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( ! map . containsKey ( st . charAt ( i ) ) ) { map . put ( st . charAt ( i ) , 1 ) ; } else { map . put ( st . charAt ( i ) , map . get ( st . charAt ( i ) ) + 1 ) ; } } if ( map . size ( ) == k ) { answer ++ ; } for ( int i = k ; i < n ; i ++ ) { if ( ! map . containsKey ( st . charAt ( i ) ) ) { map . put ( st . charAt ( i ) , 1 ) ; } else { map . put ( st . charAt ( i ) , map . get ( st . charAt ( i ) ) + 1 ) ; } map . put ( st . charAt ( i - k ) , map . get ( st . charAt ( i - k ) ) - 1 ) ; if ( map . containsKey ( st . charAt ( i - k ) ) && map . get ( st . charAt ( i - k ) ) == 0 ) { map . remove ( st . charAt ( i - k ) ) ; } if ( map . size ( ) == k ) { answer ++ ; } } return answer ; }
boolean canConstruct ( String s , int k ) { HashMap < Character , Integer > m = new HashMap < Character , Integer > ( ) ; int i = 0 , j = 0 , p = 0 ; if ( s . length ( ) == k ) { return true ; } for ( i = 0 ; i < s . length ( ) ; i ++ ) { m . put ( s . charAt ( i ) , ( m . get ( s . charAt ( i ) ) ?? 0 ) + 1 ) ; } if ( k > s . length ( ) ) { return false ; } else { for ( Map . Entry < Character , Integer > h : m . entrySet ( ) ) { if ( h . getKey ( ) % 2 != 0 ) { p = p + 1 ; } } } if ( k < p ) { return false ; } return true ; }
boolean equalIgnoreCase ( String str1 , String str2 ) { str1 = str1 . toUpperCase ( ) ; str2 = str2 . toUpperCase ( ) ; return ( str1 == str2 ) ; }
int findLongestSub ( String bin ) { int n = bin . length ( ) , i ; int sum = 0 ; HashMap < Integer , Integer > prevSum = new HashMap < Integer , Integer > ( ) ; int maxlen = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin . charAt ( i ) == '1' ) { sum ++ ; } else { sum -- ; } if ( sum > 0 ) { maxlen = i + 1 ; } else if ( sum <= 0 ) { if ( prevSum . containsKey ( sum - 1 ) ) { int currLen = i - prevSum . get ( sum - 1 ) ; maxlen = Math . max ( maxlen , currLen ) ; } } if ( ! prevSum . containsKey ( sum ) ) { prevSum . put ( sum , i ) ; } } return maxlen ; }
boolean hasAllCodes ( String s , int k ) { Set < String > us = new HashSet < > ( ) ; for ( int i = 0 ; i + k <= s . length ( ) ; i ++ ) { us . add ( s . substring ( i , i + k ) ) ; } return us . size ( ) == 1 << k ; }
boolean checkPalin ( String word ) { int n = word . length ( ) ; word = word . toLowerCase ( ) ; for ( int i = 0 ; i < n ; i ++ , n -- ) { if ( word . charAt ( i ) != word . charAt ( n - 1 ) ) { return false ; } } return true ; }
String convert ( String st ) { String w = "" , z = "" ; st = st . toUpperCase ( ) + " " ; for ( int i = 0 ; i < st . length ( ) ; i ++ ) { char ch = st . charAt ( i ) ; if ( ch != ' ' ) { w += ch ; } else { z += w . charAt ( 0 ) + w . substring ( 1 ) + " " ; w = "" ; } } return z ; }
int maxLines ( int n , int x1 [ ] , int y1 [ ] , int x2 [ ] , int y2 [ ] ) { HashSet < Integer > s = new HashSet < Integer > ( ) ; int slope ; for ( int i = 0 ; i < n ; i ++ ) { if ( x1 [ i ] == x2 [ i ] ) { slope = Integer . MAX_VALUE ; } else { slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; } s . add ( slope ) ; } return s . size ( ) ; }
HashMap < Integer , Integer > PrimeFactor ( int n ) { HashMap < Integer , Integer > primef = new HashMap < Integer , Integer > ( ) ; while ( n % 2 == 0 ) { if ( primef . containsKey ( 2 ) ) { primef . put ( 2 , primef . get ( 2 ) + 1 ) ; } else { primef . put ( 2 , 1 ) ; } n = n / 2 ; } for ( int i = 3 ; i <= Math . sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { if ( primef . containsKey ( i ) ) { primef . put ( i , primef . get ( i ) + 1 ) ; } else { primef . put ( i , 1 ) ; } n = n / i ; } } if ( n > 2 ) { primef . put ( n , 1 ) ; } return primef ; }
String isDivisibleByDivisor ( int s , int d ) { s %= d ; ArrayList < Integer > hashMap = new ArrayList < Integer > ( ) ; hashMap . add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hashMap . contains ( s ) ) { if ( s == 0 ) { return "Yes" ; } return "No" ; } else { hashMap . add ( s ) ; } } return "Yes" ; }
boolean oddSum ( int a [ ] , int n , int k ) { HashSet < Integer > odd = new HashSet < Integer > ( ) ; Set < Integer > even = new HashSet < Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { even . add ( a [ i ] ) ; } else { odd . add ( a [ i ] ) ; } } if ( odd . size ( ) >= k ) { return true ; } boolean flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= even . size ( ) ) { return true ; } } return flag ; }
int dayOfYear ( String date ) { int [ ] days = { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 , 30 , 31 , 30 , 31 } ; int year = date . substring ( 0 , 4 ) ; int month = date . substring ( 5 , 7 ) ; int day = date . substring ( 8 ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days [ month - 2 ] ; -- month ; } return day ; }
boolean isPerfectSquare ( int arr [ ] , int n ) { HashMap < Integer , Integer > umap = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { umap . put ( arr [ i ] , ( umap . get ( arr [ i ] ) ?? 0 ) + 1 ) ; } for ( Map . Entry < Integer , Integer > itr : umap . entrySet ( ) ) { if ( itr . getKey ( ) % 2 == 1 ) { return false ; } } return true ; }
int minMoves ( int n ) { String s = Integer . toString ( n ) ; int ans = Integer . MAX_VALUE ; int length = s . length ( ) ; for ( int i = 0 ; i < length ; ++ i ) { for ( int j = 0 ; j < length ; ++ j ) { if ( i == j ) { continue ; } String t = s . split ( "" ) ; int cur = 0 ; for ( int k = i ; k < length - 1 ; ++ k ) { [ t [ k ] , t [ k + 1 ] ] = [ t [ k + 1 ] , t [ k ] ] ; ++ cur ; } for ( int k = j - ( j > i ? 1 : 0 ) ; k < length - 2 ; ++ k ) { [ t [ k ] , t [ k + 1 ] ] = [ t [ k + 1 ] , t [ k ] ] ; ++ cur ; } int pos = - 1 ; for ( int k = 0 ; k < length ; ++ k ) { if ( t [ k ] != "" ) { pos = k ; break ; } } for ( int k = pos ; k > 0 ; -- k ) { [ t [ k ] , t [ k - 1 ] ] = [ t [ k - 1 ] , t [ k ] ] ; ++ cur ; } int nn = t . join ( "" ) ; if ( nn % 25 == 0 ) { ans = Math . min ( ans , cur ) ; } } } if ( ans == Integer . MAX_VALUE ) { return - 1 ; } return ans ; }
int minimumOperations ( int a [ ] , int n ) { HashMap < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp . put ( a [ i ] , ( mp . get ( a [ i ] ) ?? 0 ) + 1 ) ; } int count = 0 ; for ( Map . Entry < Integer , Integer > entry : mp . entrySet ( ) ) { if ( entry . getValue ( ) > 1 ) { count += entry . getValue ( ) - 1 ; } } return count ; }
int kaprekarRec ( int n , int prev ) { if ( n == 0 ) { return 0 ; } prev = n ; int [ ] digits = new int [ 4 ] ; Arrays . sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } Arrays . sort ( digits ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } int diff = Math . abs ( asc - desc ) ; if ( diff == prev ) { return diff ; } return kaprekarRec ( diff , prev ) ; }
String fractionToDecimal ( int numr , int denr ) { String res = "" ; Map < Integer , Integer > mp = new HashMap < Integer , Integer > ( ) ; mp . clear ( ) ; int rem = numr % denr ; while ( ( rem != 0 ) && ( ! mp . get ( rem ) ) ) { mp . put ( rem , res . length ( ) ) ; rem = rem * 10 ; int res_part = rem / denr ; res += res_part . toString ( ) ; rem = rem % denr ; } if ( rem == 0 ) { return "" ; } if ( mp . containsKey ( rem ) ) { return res . substring ( mp . get ( rem ) ) ; } return "" ; }
boolean isFancy ( String num ) { HashMap < Character , Character > fp = new HashMap < Character , Character > ( ) ; fp . put ( '0' , '0' ) ; fp . put ( '1' , '1' ) ; fp . put ( '6' , '9' ) ; fp . put ( '8' , '8' ) ; fp . put ( '9' , '6' ) ; int n = num . length ( ) ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( ! fp . containsKey ( num . charAt ( l ) ) || fp . get ( num . charAt ( l ) ) != num . charAt ( r ) ) { return false ; } l ++ ; r -- ; } return true ; }
double distinctOddRatio ( int [ ] numbers ) { int distinctCount = new HashSet < Integer > ( ) ; int distinctOddCount = new HashSet < Integer > ( numbers ) . size ( ) ; return distinctOddCount / distinctCount ; }
int compareSum ( int [ ] numbers , int [ ] words ) { int intSum = Arrays . stream ( numbers ) . sum ( ) . getAsInt ( ) ; int wordLengthSum = Arrays . stream ( words ) . max ( ) . getAsInt ( ) ; if ( intSum < wordLengthSum ) { return - 1 ; } else if ( intSum > wordLengthSum ) { return 1 ; } else { return 0 ; } }
boolean allLongerThan ( List < String > shortWords , List < Integer > longWords ) { int maxOfShort = Collections . max ( Arrays . asList ( shortWords ) ) ; int minOfLong = Collections . min ( Arrays . asList ( longWords ) ) ; return minOfLong > maxOfShort ; }
int compareOddEvenRange ( int [ ] numbers ) { int rangeOdd = Arrays . stream ( numbers ) . max ( ) . getAsInt ( ) - Arrays . stream ( numbers ) . min ( ) . getAsInt ( ) ; int rangeEven = Arrays . stream ( numbers ) . max ( ) . getAsInt ( ) - Arrays . stream ( numbers ) . min ( ) . getAsInt ( ) ; if ( rangeOdd < rangeEven ) { return - 1 ; } if ( rangeOdd > rangeEven ) { return 1 ; } return 0 ; }
int averageDistinctLength ( String words ) { Set < String > distinctWords = new HashSet < > ( ) ; int averageLen = distinctWords != null ? distinctWords . size ( ) : 0 ; return averageLen ; }
int withdrawBalance ( int start , int [ ] withdrawals ) { int end = Arrays . stream ( withdrawals ) . max ( ) . getAsInt ( ) ; return nextWithdrawal <= balance ? balance - nextWithdrawal : balance ; }
String firstShortAndStartsWithO ( String words ) { String matchedElement = Arrays . stream ( words ) . first ( ) . toLowerCase ( ) ; return matchedElement ; }
int bigNumberAtIndex ( int [ ] numbers , int index ) { int targetNum = numbers [ index ] ; return targetNum ; }
boolean containsSquareInRange ( int rangeStart , int rangeLength ) { boolean containsSquare = new boolean [ rangeStart + rangeLength ] ; Arrays . stream ( rangeStart ) . any ( n -> Math . pow ( Math . trunc ( Math . sqrt ( n ) ) , 2 ) == n ) ; return containsSquare ; }
HashMap < Integer , Integer > groupNumbersByMod ( int [ ] numbers , int mod ) { HashMap < Integer , Integer > numberGroups = new HashMap < Integer , Integer > ( ) ; for ( int n : numbers ) { int key = n % mod ; if ( acc . containsKey ( key ) ) { acc . get ( key ) . add ( n ) ; } else { acc . put ( key , new ArrayList < > ( ) ) ; } return acc ; }
HashMap < Integer , Integer > groupNumbersByFirstChar ( String words ) { HashMap < Integer , Integer > wordsGroups = new HashMap < > ( ) ; for ( char w : words ) { int key = w . charAt ( 0 ) ; if ( acc . containsKey ( key ) ) { acc . get ( key ) . add ( w ) ; } else { acc . put ( key , new ArrayList < > ( ) ) ; } return acc ; }
Vector < String > orderByLengthAndDescending ( Vector < String > words ) { Collections . sort ( words ) ; return sortedWords ; }
Vector < Character > orderFirstCharDescendingReverse ( String words ) { Vector < Character > sortedWords = new Vector < > ( ) ; Collections . sort ( words ) ; reverse ( sortedWords ) ; return sortedWords ; }
Vector < Integer > getSubListOfNegative ( int [ ] numbers , int start , int length ) { Vector < Integer > subList = new Vector < Integer > ( ) ; Collections . addAll ( subList , numbers ) ; start = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( i < 0 ) { return subList ; } } return subList ; }
Vector < Integer > getPositiveSequence ( int [ ] numbers ) { Vector < Integer > subSequence = new Vector < Integer > ( ) ; for ( int i = 0 ; i < numbers . length ; i ++ ) { if ( numbers [ i ] <= 0 ) { continue ; } subSequence = numbers . slice ( i ) ; break ; } for ( int i = 0 ; i < subSequence . size ( ) ; i ++ ) { if ( subSequence . get ( i ) > 0 ) { continue ; } subSequence = subSequence . get ( 0 , i ) ; break ; } return subSequence ; }
Vector < Integer > getLargerThanIndexSequence ( int [ ] numbers ) { Vector < Integer > subSequence = new Vector < > ( ) ; for ( int i = 0 ; i < subSequence . size ( ) ; i ++ ) { if ( subSequence . get ( i ) . get ( 0 ) < subSequence . get ( i ) . get ( 1 ) ) { continue ; } subSequence . set ( i , subSequence . get ( i ) . get ( 1 ) ) ; break ; } for ( int i = 0 ; i < subSequence . size ( ) ; i ++ ) { if ( subSequence . get ( i ) . get ( 0 ) >= subSequence . get ( i ) . get ( 1 )  ) { continue ; } subSequence = subSequence . get ( 0 , i ) ; } subSequence = subSequence . stream ( ) . map ( x -> x . get ( 0 ) ) ; return subSequence ; }
Vector < Integer > rearrangeWordByIndexes ( int [ ] words , int indexes [ ] ) { Vector < Integer > newIndexes = Arrays . stream ( indexes ) . max ( ) . getAsInt ( ) ; int newWords = newIndexes . get ( 0 ) ; return newWords ; }
Vector < String > getWordsUpperLower ( String words ) { Vector < String > upperLowerWords = new Vector < > ( ) ; Collections . addAll ( upperLowerWords , words ) ; return upperLowerWords ; }
int [ ] selectIfInPlace ( int [ ] numbers ) { int [ ] numsInPlace = Arrays . stream ( numbers ) . select ( ) . getAsInt ( ) ; return numsInPlace ; }
Vector < pair > selectPairs ( int [ ] numbersA , int [ ] numbersB ) { Vector < pair > pairs = new Vector < pair > ( ) ; for ( int a : numbersA ) for ( int b : numbersB ) for ( int i = 0 ; i < 101 ; i ++ ) pairs . add ( new pair ( a , b ) ) ; return pairs ; }
Vector < String > stringCrossJoin ( Vector < String > endWords , Vector < String > beginWords ) { Vector < String > crossStrings = beginWords . flatMap ( b -> endWords . filter ( e -> e . charAt ( 0 ) == e . slice ( - 1 ) ) . map ( e => e + ' ' + b ) ) ; return crossStrings ; }
int elementsContainSubword ( String words , int subword ) { if ( words . substring ( 0 , 5 ) . contains ( subword ) ) { return 1 ; } else if ( words . substring ( 0 , 5 ) . contains ( subword ) ) { return 0 ; } else return - 1 ; }
int concatLargeNumbers ( int [ ] numbersA , int [ ] numbersB , int flag ) { int [ ] allNumbers = new int [ numbersA . length ] ; Arrays . addAll ( allNumbers , numbersB ) ; return allNumbers ; }
int dotProduct ( int vectorA [ ] , int vectorB [ ] ) { int dotProduct = Arrays . stream ( vectorA ) . dot ( vectorB ) . getAsInt ( ) ; return dotProduct ; }
Vector < Integer > setDifference ( Set < Integer > setA , Set < Integer > setB ) { Vector < Integer > difference = new Vector < Integer > ( ) ; difference . addAll ( setA ) ; difference . remove ( setB ) ; Collections . sort ( difference ) ; return difference ; }
