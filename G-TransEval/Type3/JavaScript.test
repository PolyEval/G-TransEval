function separateParenGroups ( parenString ) { let allParens = [ ] ; let currentParen = [ ] ; let currentDepth = 0 ; for ( let c of parenString ) { if ( c === "(" ) { currentDepth += 1 ; currentParen . push ( c ) ; } else if ( c === ")" ) { currentDepth -= 1 ; currentParen . push ( c ) ; if ( currentDepth === 0 ) { allParens . push ( currentParen . join ( "" ) ) ; currentParen . length = 0 ; } } } return allParens ; } 
function parseNestedParens ( parenString ) { let allLevels = [ ] ; let level = 0 ; let maxLevel = 0 ; for ( let i = 0 ; i < parenString . length ; i ++ ) { let chr = parenString [ i ] ; if ( chr === "(" ) { level += 1 ; if ( level > maxLevel ) { maxLevel = level ; } } if ( chr === ")" ) { level -= 1 ; if ( level === 0 ) { allLevels . push ( maxLevel ) ; maxLevel = 0 ; } } } return allLevels ; } 
function filterBySubstring ( strings , substring ) { let result = [ ] ; for ( let s of strings ) { if ( s . includes ( substring ) ) { result . push ( s ) ; } } return result ; } 
function rollingMax ( numbers ) { let runningMax = 0 ; let result = [ ] ; for ( let n of numbers ) { if ( n > runningMax ) { runningMax = n ; } result . push ( runningMax ) ; } return result ; } 
function makePalindrome ( s ) { if ( ! s . length ) { return "" ; } for ( let i = 0 ; i < s . length ; i ++ ) { let rStr = s . slice ( i ) ; if ( rStr === rStr . split ( "" ) . reverse ( ) . join ( "" ) ) { let nStr = s . slice ( 0 , i ) ; let n2Str = nStr . split ( "" ) . reverse ( ) . join ( "" ) ; return s + n2Str ; } } return s . slice ( 0 , - 1 ) + s . split ( "" ) . reverse ( ) . join ( "" ) ; } 
function stringXor ( a , b ) { let result = [ ] ; for ( let i = 0 ; i < a . length ; i ++ ) { if ( a [ i ] === b [ i ] ) { result . push ( "0" ) ; } else { result . push ( "1" ) ; } } return result . join ( "" ) ; } 
function longest ( strings ) { if ( ! strings . length ) { return "" ; } let maxLen = Math . max ( ... strings . map ( ( x ) => x . length ) ) ; for ( let s of strings ) { if ( s . length === maxLen ) { return s ; } } return "" ; } 
function stringSequence ( n ) { let s = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { s . push ( i . toString ( ) ) ; s . push ( " " ) ; } s . push ( n . toString ( ) ) ; return s . join ( "" ) ; } 
function countDistinctCharacters ( s ) { let distinct = new Set ( ) ; for ( let c of s . toLowerCase ( ) ) { distinct . add ( c ) ; } return distinct . size ; } 
function howManyTimes ( s , sub ) { let times = 0 ; for ( let i = 0 ; i <= s . length - sub . length ; i ++ ) { if ( s . slice ( i , i + sub . length ) === sub ) { times += 1 ; } } return times ; } 
function sortNumbers ( numbers ) { let toNum = new Map ( [ [ "zero" , 0 ] , [ "one" , 1 ] , [ "two" , 2 ] , [ "three" , 3 ] , [ "four" , 4 ] , [ "five" , 5 ] , [ "six" , 6 ] , [ "seven" , 7 ] , [ "eight" , 8 ] , [ "nine" , 9 ] ] ) ; let fromNum = new Map ( [ [ 0 , "zero" ] , [ 1 , "one" ] , [ 2 , "two" ] , [ 3 , "three" ] , [ 4 , "four" ] , [ 5 , "five" ] , [ 6 , "six" ] , [ 7 , "seven" ] , [ 8 , "eight" ] , [ 9 , "nine" ] ] ) ; let ints = [ ] ; let current = [ ] ; for ( let i = 0 ; i <= numbers . length ; i ++ ) { if ( i === numbers . length || numbers [ i ] === " " ) { if ( toNum . has ( current . join ( "" ) ) ) { ints . push ( toNum . get ( current . join ( "" ) ) ) ; current . length = 0 ; } } else { current . push ( numbers [ i ] ) ; } } ints . sort ( ( a , b ) => a - b ) ; let result = [ ] ; for ( let i = 0 ; i < ints . length ; i ++ ) { result . push ( fromNum . get ( ints [ i ] ) ) ; if ( i !== ints . length - 1 ) { result . push ( " " ) ; } } return result . join ( "" ) ; } 
function findClosestElements ( numbers ) { let closestPair = [ numbers [ 0 ] , numbers [ 1 ] ] ; let distance = Math . abs ( closestPair [ 0 ] - closestPair [ 1 ] ) ; for ( let i = 0 ; i < numbers . length ; i ++ ) { for ( let j = i + 1 ; j < numbers . length ; j ++ ) { if ( Math . abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closestPair [ 0 ] = numbers [ i ] ; closestPair [ 1 ] = numbers [ j ] ; distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; } } } closestPair . sort ( ( a , b ) => a - b ) ; return closestPair ; } 
function rescaleToUnit ( numbers ) { let minNum = Math . min ( ... numbers ) ; let maxNum = Math . max ( ... numbers ) ; let result = [ ] ; for ( let n of numbers ) { result . push ( ( n - minNum ) / ( maxNum - minNum ) ) ; } return result ; } 
function filterIntegers ( values ) { let result = [ ] ; for ( let e of values ) { if ( Number . isInteger ( e ) ) { result . push ( e ) ; } } return result ; } 
function removeDuplicates ( numbers ) { let counter = new Map ( ) ; for ( let i of numbers ) { counter . set ( i , ( counter . get ( i ) ?? 0 ) + 1 ) ; } let result = [ ] ; for ( let i of numbers ) { if ( counter . get ( i ) === 1 ) { result . push ( i ) ; } } return result ; } 
function flipCase ( s ) { let result = [ ] ; for ( let c of s ) { if ( c === c . toLowerCase ( ) && c !== c . toUpperCase ( ) ) { result . push ( c . toUpperCase ( ) ) ; } else { result . push ( c . toLowerCase ( ) ) ; } } return result . join ( "" ) ; } 
function filterByPrefix ( strings , prefix ) { let result = [ ] ; for ( let i = 0 ; i < strings . length ; i ++ ) { if ( strings [ i ] . startsWith ( prefix ) ) { result . push ( strings [ i ] ) ; } } return result ; } 
function findZero ( xs ) { let ans = 0 ; let value = 0 ; for ( let i = 0 ; i < xs . length ; i ++ ) { value += xs [ i ] * Math . pow ( ans , i ) ; } while ( Math . abs ( value ) > 1e-6 ) { let driv = 0 ; for ( let i = 1 ; i < xs . length ; i ++ ) { driv += xs [ i ] * Math . pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( let i = 0 ; i < xs . length ; i ++ ) { value += xs [ i ] * Math . pow ( ans , i ) ; } } return ans ; } 
function sortThird ( l ) { let thirds = [ ] ; for ( let i = 0 ; i < l . length ; i += 3 ) { thirds . push ( l [ i ] ) ; } thirds . sort ( ( a , b ) => a - b ) ; let result = [ ] ; for ( let i = 0 ; i < l . length ; i ++ ) { if ( i % 3 === 0 ) { result . push ( thirds [ i / 3 ] ) ; } else { result . push ( l [ i ] ) ; } } return result ; } 
function unique ( l ) { let result = Array . from ( new Set ( l ) ) ; result . sort ( ( a , b ) => a - b ) ; return result ; } 
function maxElement ( l ) { return Math . max ( ... l ) ; } 
function triplesSumToZero ( l ) { for ( let i = 0 ; i < l . length ; i ++ ) { for ( let j = i + 1 ; j < l . length ; j ++ ) { for ( let k = j + 1 ; k < l . length ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] === 0 ) { return true ; } } } } return false ; } 
function fib4 ( n ) { let results = [ 0 , 0 , 2 , 0 ] ; for ( let i = 4 ; i <= n ; i ++ ) { results . push ( results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ) ; } return results [ n ] ; } 
function isPalindrome ( text ) { let pr = text . split ( "" ) . reverse ( ) . join ( "" ) ; return pr === text ; } 
function removeVowels ( text ) { let result = [ ] ; let vowels = "aeiou" ; for ( let ch of text ) { if ( ! vowels . includes ( ch . toLowerCase ( ) ) ) { result . push ( ch ) ; } } return result . join ( "" ) ; } 
function sameChars ( s0 , s1 ) { let set0 = new Set ( ) ; for ( let c of s0 ) { set0 . add ( c ) ; } let set1 = new Set ( ) ; for ( let c of s1 ) { set1 . add ( c ) ; } return [ ... set0 ] . sort ( ) . join ( "" ) === [ ... set1 ] . sort ( ) . join ( "" ) ; } 
function common ( l1 , l2 ) { let us = new Set ( ) ; for ( let e1 of l1 ) { for ( let e2 of l2 ) { if ( e1 === e2 ) { us . add ( e1 ) ; } } } let ret = [ ... us ] ; ret . sort ( ( a , b ) => a - b ) ; return ret ; } 
function correctBracketing ( brackets ) { let depth = 0 ; for ( let b of brackets ) { if ( b === "(" ) { depth += 1 ; } else { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth === 0 ; } 
function circularShift ( x , shift ) { let s = x . toString ( ) ; if ( shift > s . length ) { return s . split ( "" ) . reverse ( ) . join ( "" ) ; } return s . slice ( - shift ) + s . slice ( 0 , - shift ) ; } 
function search ( lst ) { let counter = new Map ( ) ; for ( let i of lst ) { counter . set ( i , ( counter . get ( i ) ?? 0 ) + 1 ) ; } let ans = - 1 ; for ( let [ key , value ] of counter ) { if ( value >= key && key > ans ) { ans = key ; } } return ans ; } 
function smallestChange ( arr ) { let ans = 0 ; for ( let i = 0 ; i < Math . trunc ( arr . length / 2 ) ; i ++ ) { if ( arr [ i ] !== arr [ arr . length - i - 1 ] ) { ans += 1 ; } } return ans ; } 
function totalMatch ( lst1 , lst2 ) { let sum1 = 0 ; for ( let st of lst1 ) { sum1 += st . length ; } let sum2 = 0 ; for ( let st of lst2 ) { sum2 += st . length ; } return sum1 > sum2 ? lst2 : lst1 ; } 
function isHappy ( s ) { if ( s . length < 3 ) { return false ; } for ( let i = 0 ; i < s . length - 2 ; i ++ ) { if ( s [ i ] === s [ i + 1 ] || s [ i + 1 ] === s [ i + 2 ] || s [ i ] === s [ i + 2 ] ) { return false ; } } return true ; } 
function numericalLetterGrade ( grades ) { let letterGrade = [ ] ; for ( let i = 0 ; i < grades . length ; i ++ ) { let gpa = grades [ i ] ; if ( gpa === 4.0 ) { letterGrade . push ( "A+" ) ; } else if ( gpa > 3.7 ) { letterGrade . push ( "A" ) ; } else if ( gpa > 3.3 ) { letterGrade . push ( "A-" ) ; } else if ( gpa > 3.0 ) { letterGrade . push ( "B+" ) ; } else if ( gpa > 2.7 ) { letterGrade . push ( "B" ) ; } else if ( gpa > 2.3 ) { letterGrade . push ( "B-" ) ; } else if ( gpa > 2.0 ) { letterGrade . push ( "C+" ) ; } else if ( gpa > 1.7 ) { letterGrade . push ( "C" ) ; } else if ( gpa > 1.3 ) { letterGrade . push ( "C-" ) ; } else if ( gpa > 1.0 ) { letterGrade . push ( "D+" ) ; } else if ( gpa > 0.7 ) { letterGrade . push ( "D" ) ; } else if ( gpa > 0.0 ) { letterGrade . push ( "D-" ) ; } else { letterGrade . push ( "E" ) ; } } return letterGrade ; } 
function solve ( n ) { let biStr = [ ] ; let sum = 0 ; for ( let c of n . toString ( ) ) { sum += c . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ; } while ( sum > 0 ) { biStr . unshift ( ( sum % 2 ) . toString ( ) ) ; sum = Math . trunc ( sum / 2 ) ; } return biStr . join ( "" ) ; } 
function antiShuffle ( s ) { let ret = [ ] ; let current = [ ] ; for ( let i = 0 ; i <= s . length ; i ++ ) { if ( i === s . length || s [ i ] === " " ) { current . sort ( ) ; if ( ret . length ) { ret . push ( " " ) ; } ret . push ( current . join ( "" ) ) ; current . length = 0 ; } else { current . push ( s [ i ] ) ; } } return ret . join ( "" ) ; } 
function sortArray ( array ) { if ( ! array . length ) { return array ; } if ( ( array [ 0 ] + array [ array . length - 1 ] ) % 2 == 1 ) { array . sort ( ( a , b ) => a - b ) ; } else { array . sort ( ( a , b ) => b - a ) ; } return array ; } 
function encrypt ( s ) { let ans = [ ] ; for ( let c of s ) { if ( c . toUpperCase ( ) !== c . toLowerCase ( ) ) { ans . push ( String . fromCharCode ( "a" . charCodeAt ( 0 ) + ( c . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) + 4 ) % 26 ) ) ; } else { ans . push ( c ) ; } } return ans . join ( "" ) ; } 
function isBored ( s ) { let isStart = true ; let sum = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( s [ i ] === "." || s [ i ] === "?" || s [ i ] === "!" ) { isStart = true ; } else if ( isStart ) { if ( s [ i ] === " " ) { continue ; } if ( s . slice ( i , i + 2 ) === "I " ) { sum += 1 ; } isStart = false ; } } return sum ; } 
function encode ( message ) { let vowels = "aeiouAEIOU" ; let ret = [ ] ; for ( let c of message ) { if ( c . toUpperCase ( ) === c && c . toLowerCase ( ) !== c ) { c = c . toLowerCase ( ) ; if ( vowels . includes ( c ) ) { c = String . fromCharCode ( "a" . charCodeAt ( 0 ) + ( c . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) + 2 ) % 26 ) ; } } else if ( c . toUpperCase ( ) !== c && c . toLowerCase ( ) === c ) { c = c . toUpperCase ( ) ; if ( vowels . includes ( c ) ) { c = String . fromCharCode ( "A" . charCodeAt ( 0 ) + ( c . charCodeAt ( 0 ) - "A" . charCodeAt ( 0 ) + 2 ) % 26 ) ; } } ret . push ( c ) ; } return ret . join ( "" ) ; } 
function skjkasdkd ( lst ) { let largest = 0 ; for ( let n of lst ) { if ( n > largest ) { let prime = true ; for ( let i = 2 ; i < n ; i ++ ) { if ( n % i === 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } let sum = 0 ; let s = largest . toString ( ) ; for ( let i = 0 ; i < s . length ; i ++ ) { sum += s [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ; } return sum ; } 
function checkDictCase ( dict ) { if ( ! dict . size ) { return false ; } let isLower = 0 ; let isUpper = 0 ; for ( let [ key , value ] of dict ) { for ( let c of key ) { if ( c . toLowerCase ( ) === c && c . toUpperCase ( ) !== c ) { isLower = 1 ; } else if ( c . toLowerCase ( ) !== c && c . toUpperCase ( ) === c ) { isUpper = 1 ; } else { return false ; } } } return isLower + isUpper === 1 ; } 
function multiply ( a , b ) { return ( Math . abs ( a ) % 10 ) * ( Math . abs ( b ) % 10 ) ; } 
function countUpper ( s ) { let uVowel = "AEIOU" ; let count = 0 ; for ( let i = 0 ; i < s . length ; i += 2 ) { if ( uVowel . includes ( s [ i ] ) ) { count ++ ; } } return count ; } 
function byLength ( arr ) { let numTo = new Map ( [ [ 1 , "One" ] , [ 2 , "Two" ] , [ 3 , "Three" ] , [ 4 , "Four" ] , [ 5 , "Five" ] , [ 6 , "Six" ] , [ 7 , "Seven" ] , [ 8 , "Eight" ] , [ 9 , "Nine" ] ] ) ; let sortedArr = [ ... arr ] . sort ( ( a , b ) => b - a ) ; let newArr = [ ] ; for ( let n of sortedArr ) { if ( n >= 1 && n <= 9 ) { newArr . push ( numTo . get ( n ) ) ; } } return newArr ; } 
function f ( n ) { let sum = 1 ; let prod = 0 ; let result = [ ] ; for ( let i = 1 ; i <= n ; i ++ ) { prod += i ; sum *= i ; if ( i % 2 === 0 ) { result . push ( sum ) ; } else { result . push ( prod ) ; } } return result ; } 
function evenOddPalindrome ( n ) { let evenCount = 0 ; let oddCount = 0 ; for ( let i = 1 ; i <= n ; i ++ ) { let s = i . toString ( ) ; let rStr = s . split ( "" ) . reverse ( ) . join ( "" ) ; if ( s === rStr ) { if ( i % 2 === 1 ) { oddCount += 1 ; } else { evenCount += 1 ; } } } return [ evenCount , oddCount ] ; } 
function histogram ( test ) { let count = new Map ( ) ; let max = 0 ; for ( let i = 0 ; i < test . length ; i ++ ) { if ( test [ i ] !== " " ) { count . set ( test [ i ] , ( count . get ( test [ i ] ) ?? 0 ) + 1 ) ; if ( count . get ( test [ i ] ) > max ) { max = count . get ( test [ i ] ) ; } } } let result = new Map ( ) ; for ( let [ key , value ] of count ) { if ( value === max ) { result . set ( key , value ) ; } } return result ; } 
function reverseDelete ( s , c ) { let ret = [ ] ; for ( let ch of s ) { if ( ! c . includes ( ch ) ) { ret . push ( ch ) ; } } let flag = "False" ; if ( ret . join ( "" ) === [ ... ret ] . reverse ( ) . join ( "" ) ) { flag = "True" ; } return [ ret . join ( "" ) , flag ] ; } 
function sortArray ( arr ) { let bin = [ ] ; for ( let i of arr ) { let b = 0 ; let n = Math . abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n = Math . trunc ( n / 2 ) ; } bin . push ( b ) ; } for ( let i = 0 ; i < arr . length ; i ++ ) { for ( let j = 1 ; j < arr . length ; j ++ ) { if ( bin [ j ] < bin [ j - 1 ] || ( bin [ j ] === bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) ) { [ bin [ j ] , bin [ j - 1 ] ] = [ bin [ j - 1 ] , bin [ j ] ] ; [ arr [ j ] , arr [ j - 1 ] ] = [ arr [ j - 1 ] , arr [ j ] ] ; } } } return arr ; } 
function getClosestVowel ( word ) { let vowels = "AEIOUaeiou" ; for ( let i = word . length - 2 ; i > 0 ; i -- ) { if ( vowels . includes ( word [ i ] ) && ! vowels . includes ( word [ i + 1 ] ) && ! vowels . includes ( word [ i - 1 ] ) ) { return word [ i ] ; } } return "" ; } 
function matchParens ( lst ) { let strings = [ lst [ 0 ] + lst [ 1 ] , lst [ 1 ] + lst [ 0 ] ] ; for ( let l of strings ) { let count = 0 ; for ( let c of l ) { if ( c === "(" ) { count += 1 ; } if ( c === ")" ) { count -= 1 ; } if ( count < 0 ) { break ; } } if ( count === 0 ) { return "Yes" ; } } return "No" ; } 
function maximum ( arr , k ) { if ( k == 0 ) { return [ ] ; } arr . sort ( ( a , b ) => a - b ) ; return arr . slice ( - k ) ; } 
function validDate ( date ) { if ( date . length !== 10 ) { return false ; } for ( let i = 0 ; i < 10 ; i ++ ) { if ( i === 2 || i === 5 ) { if ( date [ i ] !== "-" ) { return false ; } } else if ( "0" > date [ i ] && date [ i ] > "9" ) { return false ; } } let month = parseInt ( date . slice ( 0 , 2 ) ) ; let day = parseInt ( date . slice ( 3 , 5 ) ) ; let year = parseInt ( date . slice ( 6 , 10 ) ) ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day === 31 && ( month === 4 || month === 6 || month === 9 || month === 11 || month === 2 ) ) { return false ; } if ( day === 30 && month === 2 ) { return false ; } return true ; } 
function splitWords ( txt ) { let current = [ ] ; let result = [ ] ; if ( txt . includes ( " " ) ) { for ( let i = 0 ; i <= txt . length ; i ++ ) { if ( i === txt . length || txt [ i ] === " " ) { if ( current . length > 0 ) { result . push ( current . join ( "" ) ) ; } current . length = 0 ; } else { current . push ( txt [ i ] ) ; } } return result ; } if ( txt . includes ( "," ) ) { for ( let i = 0 ; i <= txt . length ; i ++ ) { if ( i === txt . length || txt [ i ] === "," ) { if ( current . length > 0 ) { result . push ( current . join ( "" ) ) ; } current . length = 0 ; } else { current . push ( txt [ i ] ) ; } } return result ; } let num = 0 ; for ( let c of txt ) { if ( c . toLowerCase ( ) === c && c . toUpperCase ( ) !== c && c . charCodeAt ( 0 ) % 2 === 0 ) { num += 1 ; } } return [ num . toString ( ) ] ; }
function tri ( n ) { if ( n === 0 ) { return [ 1 ] ; } let tris = [ 1 , 3 ] ; for ( let i = 2 ; i <= n ; i ++ ) { if ( i % 2 === 0 ) { tris . push ( 1 + i / 2 ) ; } else { tris . push ( tris [ i - 2 ] + tris [ i - 1 ] + ( i + 3 ) / 2 ) ; } } return tris ; } 
function checkIfLastCharIsALetter ( txt ) { if ( ! txt . length ) { return false ; } return txt [ txt . length - 1 ] . toUpperCase ( ) !== txt [ txt . length - 1 ] . toLowerCase ( ) && ( txt . length === 1 || txt [ txt . length - 2 ] . toUpperCase ( ) === txt [ txt . length - 2 ] . toLowerCase ( ) ) ; } 
function orderByPoints ( nums ) { let result = [ ] ; for ( let num of nums ) { let w = Math . abs ( num ) . toString ( ) ; let sum = 0 ; for ( let c of w ) { sum += c . codePointAt ( 0 ) - "0" . codePointAt ( 0 ) ; } if ( num < 0 ) { sum -= 2 * ( w [ 0 ] - "0" ) ; } result . push ( sum ) ; } for ( let i = 0 ; i < nums . length ; i ++ ) { for ( let j = 1 ; j < nums . length ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { [ result [ j ] , result [ j - 1 ] ] = [ result [ j - 1 ] , result [ j ] ] ; [ nums [ j ] , nums [ j - 1 ] ] = [ nums [ j - 1 ] , nums [ j ] ] ; } } } return nums ; } 
function bf ( planet1 , planet2 ) { let planets = [ "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" ] ; let idx1 = planets . indexOf ( planet1 ) ; let idx2 = planets . indexOf ( planet2 ) ; if ( idx1 === - 1 || idx2 === - 1 || idx1 === idx2 ) { return [ ] ; } return idx1 > idx2 ? planets . slice ( idx2 + 1 , idx1 ) : planets . slice ( idx1 + 1 , idx2 ) ; } 
function sortedListSum ( lst ) { let result = [ ] ; for ( let i of lst ) { if ( i . length % 2 === 0 ) { result . push ( i ) ; } } result . sort ( ( l , r ) => { if ( l . length === r . length ) { return l < r ? -1 : 1 ; } return l . length - r . length ; } ) ; return result ; }
function cycpatternCheck ( a , b ) { for ( let i = 0 ; i < b . length ; i ++ ) { let rotate = b . slice ( i ) + b . slice ( 0 , i ) ; if ( a . includes ( rotate ) ) { return true ; } } return false ; } 
function evenOddCount ( num ) { let evenCount = 0 , oddCount = 0 ; for ( let i of Math . abs ( num ) . toString ( ) ) { if ( i % 2 === 0 ) { evenCount += 1 ; } else { oddCount += 1 ; } } return [ evenCount , oddCount ] ; } 
function findMax ( words ) { let max = "" ; let maxLength = 0 ; for ( let word of words ) { let unique = [ ] ; for ( let w of word ) { if ( ! unique . includes ( w ) ) { unique . push ( w ) ; } } if ( unique . length > maxLength || ( unique . length === maxLength && word < max ) ) { max = word ; maxLength = unique . length ; } } return max ; } 
function solve ( s ) { let noLetter = true ; let result = [ ] ; for ( let ch of s ) { if ( ch . toUpperCase ( ) === ch && ch . toLowerCase ( ) !== ch ) { ch = ch . toLowerCase ( ) ; noLetter = false ; } else if ( ch . toUpperCase ( ) !== ch && ch . toLowerCase ( ) === ch ) { ch = ch . toUpperCase ( ) ; noLetter = false ; } result . push ( ch ) ; } if ( noLetter ) { return result . reverse ( ) . join ( "" ) ; } else { return result . join ( "" ) ; } } 
function mostFrequent ( arr , n ) { let hp = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( hp . has ( arr [ i ] ) ) { hp . set ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . set ( arr [ i ] , 1 ) ; } } let maxCount = 0 , res = - 1 ; for ( let entry of hp ) { if ( maxCount < entry [ 1 ] ) { res = entry [ 0 ] ; maxCount = entry [ 1 ] ; } } return res ; } 
function find ( a , b , k , n1 , n2 ) { let s = new Set ( ) ; for ( let i = 0 ; i < n2 ; i ++ ) { s . add ( b [ i ] ) ; } let missing = 0 ; for ( let i = 0 ; i < n1 ; i ++ ) { if ( ! s . has ( a [ i ] ) ) { missing ++ ; } if ( missing === k ) { return a [ i ] ; } } return - 1 ; } 
function solveQuery ( start , end , arr ) { let mp = new Map ( ) ; for ( let i = start ; i <= end ; i ++ ) { mp . set ( arr [ i ] , ( mp . get ( arr [ i ] ) ?? 0 ) + 1 ) ; } let count = 0 ; for ( let [ key , value ] of mp . entries ( ) ) { if ( key === value ) { count ++ ; } } return count ; } 
function segregate ( arr , size ) { let j = 0 ; for ( let i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { [ arr [ i ] , arr [ j ] ] = [ arr [ j ] , arr [ i ] ] ; j ++ ; } } return j ; } 
function countTriplets ( a , n ) { let s = new Set ( ) ; for ( let i = 0 ; i < n ; i ++ ) { s . add ( a [ i ] ) ; } let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { let xr = a [ i ] ^ a [ j ] ; if ( s . has ( xr ) && xr !== a [ i ] && xr !== a [ j ] ) { count ++ ; } } } return Math . trunc ( count / 3 ) ; } 
function leastFrequent ( arr , n ) { let hp = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( hp . has ( arr [ i ] ) ) { hp . set ( arr [ i ] , hp . get ( arr [ i ] ) + 1 ) ; } else { hp . set ( arr [ i ] , 1 ) ; } } let minCount = n + 1 , res = - 1 ; for ( let entry of hp ) { if ( minCount >= entry [ 1 ] ) { res = entry [ 0 ] ; minCount = entry [ 1 ] ; } } return res ; } 
function findPermutations ( arr ) { let cnt = 0 ; let maxInd = - 1 , minInd = 10000000 ; let n = arr . length ; let indexOf = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { indexOf . set ( arr [ i ] , i + 1 ) ; } for ( let i = 1 ; i <= n ; i ++ ) { maxInd = Math . max ( maxInd , indexOf . get ( i ) ?? 0 ) ; minInd = Math . min ( minInd , indexOf . get ( i ) ?? 0 ) ; if ( maxInd - minInd + 1 === i ) { cnt ++ ; } } return cnt ; } 
function formQuadruplets ( arr , n ) { let ans = 0 , pairs = 0 ; pairs = Math . trunc ( n / 4 ) ; arr . sort ( ( a , b ) => b - a ) ; for ( let i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; } 
function lexicographicallyMaximum ( s , n ) { let m = new Map ( ) ; for ( let i = 0 ; i < n ; ++ i ) { if ( m . has ( s [ i ] ) ) { m . set ( s [ i ] , m . get ( s [ i ] ) + 1 ) ; } else { m . set ( s [ i ] , 1 ) ; } } let v = [ ] ; for ( let i = "a" . charCodeAt ( 0 ) ; i < "a" . charCodeAt ( 0 ) + Math . min ( n , 25 ) ; ++ i ) { if ( m . has ( String.fromCharCode( i ) ) === false ) { v . push ( String . fromCharCode ( i ) ) ; } } let j = v . length - 1 ; for ( let i = 0 ; i < n ; ++ i ) { if ( s [ i ] . charCodeAt ( 0 ) >= "a" . charCodeAt ( 0 ) + Math . min ( n , 25 ) || ( m . has ( s [ i ] ) && m . get ( s [ i ] ) > 1 ) ) { if ( v [ j ] . charCodeAt ( 0 ) < s [ i ] . charCodeAt ( 0 ) ) { continue ; } m . set ( s [ i ] , m . get ( s [ i ] ) - 1 ) ; s = s . slice ( 0 , i ) + v [ j ] + s . slice ( i + 1 ) ; j -- ; } if ( j < 0 ) { break ; } } let l = 0 ; for ( let i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) { break ; } if ( s [ i ] . charCodeAt ( 0 ) >= "a" . charCodeAt ( 0 ) + Math . min ( n , 25 ) || m . has ( s [ i ] ) && m . get ( s [ i ] ) > 1 ) { m . set ( s [ i ] , m . get ( s [ i ] ) - 1 ) ; s = s . slice ( 0 , i ) + v [ l ] + s . slice ( i + 1 ) ; l ++ ; } } return s ; } 
function noOfValidKbers ( k , arr ) { let set = new Set ( ) ; while ( k !== 0 ) { set . add ( k % 10 ) ; k = Math . trunc ( k / 10 ) ; } let count = 0 ; for ( let i = 0 ; i < arr . length ; i ++ ) { let no = arr [ i ] ; let flag = true ; while ( no !== 0 ) { let digit = no % 10 ; if ( ! set . has ( digit ) ) { flag = false ; break ; } no = Math . trunc ( no / 10 ) ; } if ( flag ) { count ++ ; } } return count ; } 
function delCost ( s , cost ) { let ans = 0 ; let forMax = new Map ( ) ; let forTot = new Map ( ) ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( ! forMax . has ( s [ i ] ) ) { forMax . set ( s [ i ] , cost [ i ] ) ; } else { forMax . set ( s [ i ] , Math . max ( forMax . get ( s [ i ] ) , cost [ i ] ) ) ; } if ( ! forTot . has ( s [ i ] ) ) { forTot . set ( s [ i ] , cost [ i ] ) ; } else { forTot . set ( s [ i ] , forTot . get ( s [ i ] ) + cost [ i ] ) ; } } for ( let i of forMax ) { ans += forTot . get ( i [ 0 ] ) - i [ 1 ] ; } return ans ; } 
function replaceDuplicates ( names ) { let hash = new Map ( ) ; for ( let i = 0 ; i < names . length ; i ++ ) { if ( ! hash . has ( names [ i ] ) ) { hash . set ( names [ i ] , 1 ) ; } else { let count = hash . get ( names [ i ] ) ; hash . set ( names [ i ] , hash . get ( names [ i ] ) + 1 ) ; names [ i ] += count . toString ( ) ; } } return names ; } 
function minmaxNumbers ( matrix , res ) { let s = new Set ( ) ; for ( let i = 0 ; i < matrix . length ; i ++ ) { let minR = Number . MAX_VALUE ; for ( let j = 0 ; j < matrix [ i ] . length ; j ++ ) { minR = Math . min ( minR , matrix [ i ] [ j ] ) ; } s . add ( minR ) ; } for ( let j = 0 ; j < matrix [ 0 ] . length ; j ++ ) { let maxC = - Number . MAX_VALUE ; for ( let i = 0 ; i < matrix . length ; i ++ ) { maxC = Math . max ( maxC , matrix [ i ] [ j ] ) ; } if ( s . has ( maxC ) ) { res . push ( maxC ) ; } } return res ; } 
function lengthOfLongestAP ( a , n ) { let dp = new Map ( ) ; let res = 2 ; for ( let i = 0 ; i < n ; ++ i ) { for ( let j = i + 1 ; j < n ; ++ j ) { let d = a [ j ] - a [ i ] ; if ( dp . has ( d ) ) { if ( dp . get ( d ) . has ( i ) ) { dp . get ( d ) . set ( j , dp . get ( d ) . get ( i ) + 1 ) ; } else { dp . get ( d ) . set ( j , 2 ) ; } } else { dp . set ( d , new Map ( ) ) ; dp . get ( d ) . set ( j , 2 ) ; } res = Math . max ( res , dp . get ( d ) . get ( j ) ) ; } } return res ; } 
function findKthChar ( n , k ) { let prev = "A" ; let cur = "" ; if ( n === 1 ) { return "A" ; } for ( let j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( let i = 0 ; i < prev . length ; i ++ ) { if ( prev [ i ] === "A" ) { prev = prev . slice ( 0 , i ) + "B" + prev . slice ( i + 1 ) ; } else { prev = prev . slice ( 0 , i ) + "A" + prev . slice ( i + 1 ) ; } } prev = prev . split ( "" ) . reverse ( ) . join ( "" ) ; cur += prev ; prev = cur ; } return cur [ k - 1 ] ; } 
function findKthLargest ( s , k ) { let tmp = s . split ( "" ) ; tmp . sort ( ) ; tmp . reverse ( ) ; return tmp [ k - 1 ] ; } 
function subArraylen ( arr , n , K ) { let mp = new Map ( ) ; mp . set ( arr [ 0 ] , 0 ) ; for ( let i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp . set ( arr [ i ] , i ) ; } let len = Number . MAX_VALUE ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < K ) { continue ; } else { let x = arr [ i ] - K ; if ( x === 0 ) { len = Math . min ( len , i ) ; } if ( ! mp . has ( x ) ) { continue ; } else { len = Math . min ( len , i - mp . get ( x ) ) ; } } } return len ; } 
function findMaxLen ( a , k ) { let n = a . length ; a . sort ( ( a , b ) => a - b ) ; let vis = new Array ( n ) . fill ( false ) ; let mp = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { mp . set ( a [ i ] , i ) ; } let c = 0 ; for ( let i = 0 ; i < n ; ++ i ) { if ( ! vis [ i ] ) { let check = a [ i ] * k ; if ( mp . has ( check ) ) { c ++ ; vis [ mp . get ( check ) ] = true ; } } } return n - c ; } 
function minDistancePoints ( a , k , n ) { let m = new Map ( ) ; let q = [ ] ; for ( let i = 0 ; i < n ; ++ i ) { m . set ( a [ i ] , 1 ) ; q . push ( a [ i ] ) ; } let ans = [ ] ; while ( k > 0 ) { let x = q . shift ( ) ; if ( ! m . has ( x - 1 ) && k > 0 ) { m . set ( x - 1 , 1 ) ; q . push ( x - 1 ) ; ans . push ( x - 1 ) ; k -- ; } if ( ! m . has ( x + 1 ) && k > 0 ) { m . set ( x + 1 , 1 ) ; q . push ( x + 1 ) ; ans . push ( x + 1 ) ; k -- ; } } return ans ;  } 
function isValidLen ( s , length , k ) { let n = s . length ; let mp = new Map ( ) ; let right = 0 ; while ( right < length ) { if ( mp . has ( s [ right ] ) ) { mp . set ( s [ right ] , mp . get ( s [ right ] ) + 1 ) ; } else { mp . set ( s [ right ] , 1 ) ; } right ++ ; } if ( mp . size <= k ) { return true ; } while ( right < n ) { if ( mp . has ( s [ right ] ) ) { mp . set ( s [ right ] , mp . get ( s [ right ] ) + 1 ) ; } else { mp . set ( s [ right ] , 1 ) ; } if ( mp . has ( s [ right - length ] ) ) { mp . set ( s [ right - length ] , mp . get ( s [ right - length ] ) - 1 ) ; } if ( mp . has ( s [ right - length ] ) && mp . get ( s [ right - length ] ) === 0 ) { mp . delete ( s [ right - length ] ) ; } if ( mp . size <= k ) { return true ; } right ++ ; } return mp . size <= k ; } 
function partition ( arr , low , high ) { let pivot = arr [ high ] ; let i = ( low - 1 ) ; for ( let j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; [ arr [ i ] , arr [ j ] ] = [ arr [ j ] , arr [ i ] ] ; } } [ arr [ i + 1 ] , arr [ high ] ] = [ arr [ high ] , arr [ i + 1 ] ] ; return ( i + 1 ) ; } 
function strScore ( strs , s , n ) { let m = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { m . set ( strs [ i ] , i + 1 ) ; } if ( ! m . has ( s ) ) { return 0 ; } let score = 0 ; for ( let i = 0 ; i < s . length ; i ++ ) { score += s [ i ] . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) + 1 ; } score = score * m . get ( s ) ; return score ; } 
function countEle ( s , a , n ) { let mp = new Map ( ) ; let ans = [ ] ; for ( let i = 0 ; i < n ; ++ i ) { let num = a [ i ] ; if ( mp . has ( num ) ) { ans . push ( 0 ) ; } else { let cnt = 0 ; while ( s [ 0 ] !== num ) { mp . set ( s [ 0 ] , true ) ; s . shift ( ) ; cnt ++ ; } s . shift ( ) ; cnt ++ ; ans . push ( cnt ) ; } } return ans ; } 
function maxDistinctChar ( s , n , k ) { let freq = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( freq . has ( s [ i ] ) ) { freq . set ( s [ i ] , freq . get ( s [ i ] ) + 1 ) ; } else { freq . set ( s [ i ] , 1 ) ; } } let v = [ ] ; for ( let it of freq ) { v . push ( it [ 1 ] ) ; } v . sort ( ) ; for ( let i = 0 ; i < v . length ; i ++ ) { let mn = Math . min ( v [ i ] - 1 , k ) ; v [ i ] -= mn ; k -= mn ; } if ( k > 0 ) { for ( let i = 0 ; i < v . length ; i ++ ) { let mn = Math . min ( v [ i ] , k ) ; v [ i ] -= mn ; k -= mn ; } } let res = 0 ; for ( let i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] === 1 ) { res ++ ; } } return res ; } 
function findKth ( arr , n , k ) { let missing = new Set ( ) ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { missing . add ( arr [ i ] ) ; } let maxM = Math . max ( ... arr ) ; let minM = Math . min ( ... arr ) ; for ( let i = minM + 1 ; i < maxM ; i ++ ) { if ( ! missing . has ( i ) ) { count ++ ; } if ( count === k ) { return i ; } } return - 1 ; } 
function almostSort ( a , n ) { for ( let i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { [ a [ i ] , a [ i + 1 ] ] = [ a [ i + 1 ] , a [ i ] ] ; i ++ ; } } for ( let i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { return false ; } } return true ; } 
function maximumSum ( s , n , k ) { let sum = 0 ; let freq = new Array ( 256 ) . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) { freq [ s [ i ] . charCodeAt ( 0 ) ] ++ ; } freq . sort ( ( a , b ) => b - a ) ; for ( let i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; } 
function findMinOperations ( arr , n , k ) { let operations = 0 ; for ( let i = 0 ; i < k ; i ++ ) { let freq = new Map ( ) ; for ( let j = i ; j < n ; j += k ) { freq . set ( arr [ j ] , ( freq [ arr [ j ] ] ?? 0 ) + 1 ) ; } let max1 = 0 , num = 0 ; for ( let [ key , value ] of freq . entries ( ) ) { if ( value > max1 ) { max1 = value ; num = key ; } } for ( let [ key , value ] of freq . entries ( ) ) { if ( key !== num ) { operations += value ; } } } return operations ; } 
function subString ( s , n ) { let v = [ ] ; let i , len ; for ( i = 0 ; i < n ; i ++ ) { for ( len = 1 ; len <= n - i ; len ++ ) { let find = s . slice ( i , i + len ) ; v . push ( find ) ; } } return v ; } 
function checkUniqueFrequency ( arr , n ) { let freq = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { freq . set ( arr [ i ] , ( freq . get ( arr [ i ] ) ?? 0 ) + 1 ) ; } let uniqueFreq = new Set ( ) ; for ( let [ key , value ] of freq . entries ( ) ) { if ( uniqueFreq . has ( value ) ) { return false ; } else { uniqueFreq . add ( value ) ; } } return true ; } 
function minCost ( str1 , str2 , n ) { let cost = 0 ; let tmp = str1 . split ( "" ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] !== str2 [ i ] ) { if ( i < n - 1 && tmp [ i + 1 ] !== str2 [ i + 1 ] ) { [ tmp [ i ] , tmp [ i + 1 ] ] = [ tmp [ i + 1 ] , tmp [ i ] ] ; cost ++ ; } else { cost ++ ; } } } return cost ; } 
function isValidNum ( x ) { let mp = new Map ( ) ; for ( let i = 0 ; i < x . length ; i ++ ) { if ( mp . has ( x [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ) ) { return false ; } else if ( x [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) > 5 ) { return false ; } else { mp . set ( x [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) , 1 ) ; } } return true ; } 
function minimizeDiff ( arr , n , k ) { let max = Math . max ( ... arr ) ; let min = Math . min ( ... arr ) ; if ( max - min <= k ) { return max - min ; } let avg = Math . trunc ( ( max + min ) / 2 ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = Math . max ( ... arr ) ; min = Math . min ( ... arr ) ; return max - min ; } 
function getMinCost ( arr , n ) { let minEle = Math . min ( ... arr ) ; return minEle * ( n - 1 ) ; } 
function possibility ( m , length , s ) { let countOdd = 0 ; for ( let i = 0 ; i < length ; i ++ ) { if ( m . get ( s . charCodeAt ( i ) - 48 ) & 1 ) { countOdd ++ ; } if ( countOdd > 1 ) { return false ; } } return true ; } 
function minimumCostOfBreaking ( x , y , m , n ) { let res = 0 ; x . sort ( ( a , b ) => b - a ) ; y . sort ( ( a , b ) => b - a ) ; let hzntl = 1 , vert = 1 ; let i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } let total = 0 ; while ( i < m ) { total += x [ i ++ ] ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y [ j ++ ] ; } res += total * hzntl ; return res ; } 
function findMaximumScore ( a , n ) { let freq = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( freq . has ( a [ i ] ) ) { freq . set ( a [ i ] , freq . get ( a [ i ] ) + 1 ) ; } else { freq . set ( a [ i ] , 1 ) ; } } let dp = new Array ( Math . max ( ... a ) + 1 ) ; dp [ 0 ] = 0 ; dp [ 1 ] = freq . get ( 1 ) ?? 0 ; for ( let i = 2 ; i < dp . length ; i ++ ) { dp [ i ] = Math . max ( dp [ i - 1 ] , dp [ i - 2 ] + ( freq . get ( i ) ?? 0 ) * i ) ; } return dp [ dp . length - 1 ] ; } 
function countWays ( s , t , k , mod ) { let n = s . length ; let a = 0 , b = 0 ; for ( let i = 0 ; i < n ; i ++ ) { let p = s . slice ( i , n ) + s . slice ( 0 , i ) ; if ( p === t ) { a ++ ; } else { b ++ ; } } let dp1 = new Array ( k + 1 ) . fill ( 0 ) ; let dp2 = new Array ( k + 1 ) . fill ( 0 ) ; if ( s === t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( let i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; } return dp1 [ k ] ; } 
function findSubarraySum ( arr , n , k ) { let prevSum = new Map ( ) ; let res = 0 ; let currSum = 0 ; for ( let i = 0 ; i < n ; i ++ ) { currSum += arr [ i ] ; if ( currSum === k ) { res ++ ; } if ( prevSum . has ( currSum - k ) ) { res += ( prevSum . get ( currSum - k ) ) ; } prevSum . set ( currSum , ( prevSum . get ( currSum ) ?? 0 ) + 1 ) ; } return res ; } 
function maximumOccurrence ( s ) { let n = s . length ; let freq = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { let temp = "" ; temp += s [ i ] ; freq . set ( temp , ( freq . get ( temp ) ?? 0 ) + 1 ) ; } for ( let i = 0 ; i < n ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { let temp = "" ; temp += s [ i ] ; temp += s [ j ] ; freq . set ( temp , ( freq . get ( temp ) ?? 0 ) + 1 ) ; } } let answer = - Number . MAX_VALUE ; for ( let entry of freq ) { answer = Math . max ( answer , entry [ 1 ] ) ; } return answer ; } 
function countCharacters ( strings , chars ) { let res = 0 ; let freq = new Map ( ) ; for ( let i = 0 ; i < chars . length ; i ++ ) { freq . set ( chars [ i ] , ( freq . get ( chars [ i ] ) ?? 0 ) + 1 ) ; } for ( let st of strings ) { let flag = true ; for ( let c of st ) { if ( ! freq . has ( c ) ) { flag = false ; break ; } } if ( flag ) { res += st . length ; } } return res ; } 
function distinctSubstring ( p , q , k , n ) { let ss = new Set ( ) ; for ( let i = 0 ; i < n ; ++ i ) { let sum = 0 ; let s = "" ; for ( let j = i ; j < n ; ++ j ) { let pos = p [ j ] . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) ; sum += q [ pos ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ; s += p [ j ] ; if ( sum <= k ) { ss . add ( s ) ; } else { break ; } } } return ss . size ; } 
function uniqueMorseRep ( arr ) { let morseCode = [ ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , "...." , ".." , ".---" , "-.-" , ".-.." , "--" , "-." , "---" , ".--." , "--.-" , ".-." , "..." , "-" , "..-" , "...-" , ".--" , "-..-" , "-.--" , "--.." ] ; let st = new Set ( ) ; let N = arr . length ; for ( let i = 0 ; i < N ; i ++ ) { let temp = "" ; let M = arr [ i ] . length ; for ( let j = 0 ; j < M ; j ++ ) { temp += morseCode [ arr [ i ] [ j ] . charCodeAt ( 0 ) - "a" . charCodeAt ( 0 ) ] ; } st . add ( temp ) ; } return st . size ; } 
function countSubstrings ( st , k ) { let n = st . length ; let answer = 0 ; let map = new Map ( ) ; for ( let i = 0 ; i < k ; i ++ ) { if ( ! map . has ( st [ i ] ) ) { map . set ( st [ i ] , 1 ) ; } else { map . set ( st [ i ] , map . get ( st [ i ] ) + 1 ) ; } } if ( map . size === k ) { answer ++ ; } for ( let i = k ; i < n ; i ++ ) { if ( ! map . has ( st [ i ] ) ) { map . set ( st [ i ] , 1 ) ; } else { map . set ( st [ i ] , map . get ( st [ i ] ) + 1 ) ; } map . set ( st [ i - k ] , map . get ( st [ i - k ] ) - 1 ) ; if ( map . has ( st [ i - k ] ) && map . get ( st [ i - k ] ) === 0 ) { map . delete ( st [ i - k ] ) ; } if ( map . size === k ) { answer ++ ; } } return answer ; } 
function canConstruct ( s , k ) { let m = new Map ( ) ; let i = 0 , j = 0 , p = 0 ; if ( s . length === k ) { return true ; } for ( i = 0 ; i < s . length ; i ++ ) { m . set ( s [ i ] , ( m . get ( s [ i ] ) ?? 0 ) + 1 ) ; } if ( k > s . length ) { return false ; } else { for ( let h of m ) { if ( h [ 1 ] % 2 !== 0 ) { p = p + 1 ; } } } if ( k < p ) { return false ; } return true ; } 
function equalIgnoreCase ( str1 , str2 ) { str1 = str1 . toUpperCase ( ) ; str2 = str2 . toUpperCase ( ) ; return str1 === str2 ; } 
function findLongestSub ( bin ) { let n = bin . length , i ; let sum = 0 ; let prevSum = new Map ( ) ; let maxlen = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin [ i ] === "1" ) { sum ++ ; } else { sum -- ; } if ( sum > 0 ) { maxlen = i + 1 ; } else if ( sum <= 0 ) { if ( prevSum . has ( sum - 1 ) ) { let currLen = i - prevSum . get ( sum - 1 ) ; maxlen = Math . max ( maxlen , currLen ) ; } } if ( ! prevSum . has ( sum ) ) { prevSum . set ( sum , i ) ; } } return maxlen ; } 
function hasAllCodes ( s , k ) { let us = new Set ( ) ; for ( let i = 0 ; i + k <= s . length ; i ++ ) { us . add ( s . slice ( i , i + k ) ) ; } return us . size === 1 << k ; } 
function checkPalin ( word ) { let n = word . length ; word = word . toLowerCase ( ) ; for ( let i = 0 ; i < n ; i ++ , n -- ) { if ( word [ i ] !== word [ n - 1 ] ) { return false ; } } return true ; } 
function convert ( st ) { let w = "" , z = "" ; st = st . toUpperCase ( ) + " " ; for ( let i = 0 ; i < st . length ; i ++ ) { let ch = st [ i ] ; if ( ch !== " " ) { w += ch ; } else { z += w [ 0 ] . toLowerCase ( ) + w . substring ( 1 ) + " " ; w = "" ; } } return z ; }
function maxLines ( n , x1 , y1 , x2 , y2 ) { let s = new Set ( ) ; let slope ; for ( let i = 0 ; i < n ; i ++ ) { if ( x1 [ i ] === x2 [ i ] ) { slope = Number . MAX_VALUE ; } else { slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; } s . add ( slope ) ; } return s . size ; }
function PrimeFactor ( n ) { let primef = new Map ( ) ; while ( n % 2 === 0 ) { if ( primef . has ( 2 ) ) { primef . set ( 2 , primef . get ( 2 ) + 1 ) ; } else { primef . set ( 2 , 1 ) ; } n = n / 2 ; } for ( let i = 3 ; i <= Math . sqrt ( n ) ; i ++ ) { while ( n % i === 0 ) { if ( primef . has ( i ) ) { primef . set ( i , primef . get ( i ) + 1 ) ; } else { primef . set ( i , 1 ) ; } n = n / i ; } } if ( n > 2 ) { primef . set ( n , 1 ) ; } return primef ; }
function isDivisibleByDivisor ( s , d ) { s %= d ; let hashMap = [ ] ; hashMap . push ( s ) ; for ( let i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hashMap . includes ( s ) ) { if ( s === 0 ) { return "Yes" ; } return "No" ; } else { hashMap . push ( s ) ; } } return "Yes" ; } 
function oddSum ( a , n , k ) { let odd = new Set ( ) ; let even = new Set ( ) ; for ( let i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 === 0 ) { even . add ( a [ i ] ) ; } else { odd . add ( a [ i ] ) ; } } if ( odd . size >= k ) { return true ; } let flag = false ; for ( let i = 1 ; i < k ; i += 2 ) { let needed = k - i ; if ( needed <= even . size ) { return true ; } } return flag ; } 
function dayOfYear ( date ) { let days = [ 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 ] ; let year = parseInt ( date . slice ( 0 , 4 ) ) ; let month = parseInt ( date . slice ( 5 , 7 ) ) ; let day = parseInt ( date . slice ( 8 ) ) ; if ( month > 2 && year % 4 === 0 && ( year % 100 !== 0 || year % 400 === 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days [ month - 2 ] ; -- month ; } return day ; } 
function isPerfectSquare ( arr , n ) { let umap = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { umap . set ( arr [ i ] , ( umap . get ( arr [ i ] ) ?? 0 ) + 1 ) ; } for ( let itr of umap ) { if ( itr [ 1 ] % 2 === 1 ) { return false ; } } return true ; } 
function minMoves ( n ) { let s = n . toString ( ) ; let ans = Number . MAX_VALUE ; let length = s . length ; for ( let i = 0 ; i < length ; ++ i ) { for ( let j = 0 ; j < length ; ++ j ) { if ( i === j ) { continue ; } let t = s . split ( "" ) ; let cur = 0 ; for ( let k = i ; k < length - 1 ; ++ k ) { [ t [ k ] , t [ k + 1 ] ] = [ t [ k + 1 ] , t [ k ] ] ; ++ cur ; } for ( let k = j - ( j > i ? 1 : 0 ) ; k < length - 2 ; ++ k ) { [ t [ k ] , t [ k + 1 ] ] = [ t [ k + 1 ] , t [ k ] ] ; ++ cur ; } let pos = - 1 ; for ( let k = 0 ; k < length ; ++ k ) { if ( t [ k ] !== "" ) { pos = k ; break ; } } for ( let k = pos ; k > 0 ; -- k ) { [ t [ k ] , t [ k - 1 ] ] = [ t [ k - 1 ] , t [ k ] ] ; ++ cur ; } let nn = parseInt ( t . join ( "" ) ) ; if ( nn % 25 === 0 ) { ans = Math . min ( ans , cur ) ; } } } if ( ans === Number . MAX_VALUE ) { return - 1 ; } return ans ; } 
function minimumOperations ( a , n ) { let mp = new Map ( ) ; for ( let i = 0 ; i < n ; i ++ ) { mp . set ( a [ i ] , ( mp . get ( a [ i ] ) ?? 0 ) + 1 ) ; } let count = 0 ; for ( let entry of mp ) { if ( entry [ 1 ] > 1 ) { count += entry [ 1 ] - 1 ; } } return count ; } 
function kaprekarRec ( n , prev ) { if ( n === 0 ) { return 0 ; } prev = n ; let digits = new Array ( 4 ) . fill ( 0 ) ; for ( let i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = Math . trunc ( n / 10 ) ; } digits . sort ( ) ; let asc = 0 ; for ( let i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } digits . sort ( ) ; let desc = 0 ; for ( let i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } let diff = Math . abs ( asc - desc ) ; if ( diff === prev ) { return diff ; } return kaprekarRec ( diff , prev ) ; } 
function fractionToDecimal ( numr , denr ) { let res = "" ; let mp = new Map ( ) ; mp . clear ( ) ; let rem = numr % denr ; while ( ( rem !== 0 ) && ( ! mp . has ( rem ) ) ) { mp . set ( rem , res . length ) ; rem = rem * 10 ; let res_part = Math . floor ( rem / denr ) ; res += res_part . toString ( ) ; rem = rem % denr ; } if ( rem === 0 ) { return "" ; } if ( mp . has ( rem ) ) { return res . slice ( mp . get ( rem ) ) ; } return "" ; } 
function isFancy ( num ) { let fp = new Map ( ) ; fp . set ( "0" , "0" ) ; fp . set ( "1" , "1" ) ; fp . set ( "6" , "9" ) ; fp . set ( "8" , "8" ) ; fp . set ( "9" , "6" ) ; let n = num . length ; let l = 0 , r = n - 1 ; while ( l <= r ) { if ( ! fp . has ( num . charAt ( l ) ) || fp . get ( num . charAt ( l ) ) !== num . charAt ( r ) ) { return false ; } l ++ ; r -- ; } return true ; } 
