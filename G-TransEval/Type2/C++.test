bool HasCloseElements ( vector < double > numbers , double threshold ) { for ( int i = 0 ; i < numbers . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < numbers . size ( ) ; j ++ ) { double distance = abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) { return true ; } } } return false ; } 
double TruncateNumber ( double number ) { return fmod ( number , 1 ) ; } 
bool BelowZero ( vector < int > operations ) { int balance = 0 ; for ( auto op : operations ) { balance += op ; if ( balance < 0 ) { return true ; } } return false ; } 
double MeanAbsoluteDeviation ( vector < double > numbers ) { double sum_num = 0 ; for ( auto num : numbers ) { sum_num += num ; } double mean = sum_num / numbers . size ( ) ; double sum_abs_diff = 0 ; for ( auto num : numbers ) { sum_abs_diff += abs ( num - mean ) ; } return sum_abs_diff / numbers . size ( ) ; } 
vector < int > Intersperse ( vector < int > numbers , int delimiter ) { vector < int > result ; if ( numbers . empty ( ) ) { return result ; } for ( int i = 0 ; i < numbers . size ( ) - 1 ; i ++ ) { result . push_back ( numbers [ i ] ) ; result . push_back ( delimiter ) ; } result . push_back ( numbers [ numbers . size ( ) - 1 ] ) ; return result ; } 
vector < int > SumProduct ( vector < int > numbers ) { int sum_value = 0 ; int prod_value = 1 ; for ( int n : numbers ) { sum_value += n ; prod_value *= n ; } return { sum_value , prod_value } ; } 
vector < string > AllPrefixes ( string s ) { vector < string > result ; for ( int i = 1 ; i <= s . length ( ) ; i ++ ) { result . push_back ( s . substr ( 0 , i ) ) ; } return result ; } 
vector < int > ParseMusic ( string music_string ) { string current ; vector < int > result ; for ( int i = 0 ; i <= music_string . length ( ) ; i ++ ) { if ( i == music_string . length ( ) || music_string [ i ] == ' ' ) { if ( current == "o" ) { result . push_back ( 4 ) ; } if ( current == "o|" ) { result . push_back ( 2 ) ; } if ( current == ".|" ) { result . push_back ( 1 ) ; } current . clear ( ) ; } else { current += music_string [ i ] ; } } return result ; } 
int Strlen ( string s ) { return s . length ( ) ; } 
vector < int > Factorize ( int n ) { vector < int > factors ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n /= i ; factors . push_back ( i ) ; i -- ; } } return factors ; } 
string Concatenate ( vector < string > strings ) { string result ; for ( auto & s : strings ) { result += s ; } return result ; } 
vector < double > GetPositive ( vector < double > l ) { vector < double > result ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( l [ i ] > 0 ) { result . push_back ( l [ i ] ) ; } } return result ; } 
vector < double > SortEven ( vector < double > l ) { vector < double > evens ; for ( int i = 0 ; i < l . size ( ) ; i += 2 ) { evens . push_back ( l [ i ] ) ; } sort ( evens . begin ( ) , evens . end ( ) ) ; vector < double > result ; for ( int i = 0 ; i < l . size ( ) ; i ++ ) { if ( i % 2 == 0 ) { result . push_back ( evens [ i / 2 ] ) ; } if ( i % 2 == 1 ) { result . push_back ( l [ i ] ) ; } } return result ; } 
string DecodeCyclic ( string s ) { string output ; int i = 0 ; while ( i <= s . length ( ) - 3 ) { string x = s [ i + 2 ] + s . substr ( i , 2 ) ; output += x ; i += 3 ; } return output + s . substr ( i ) ; } 
int CarRaceCollision ( int n ) { return pow ( n , 2 ) ; } 
vector < int > IncrList ( vector < int > l ) { vector < int > result ; for ( int i : l ) { result . push_back ( i + 1 ) ; } return result ; } 
bool PairsSumToZero ( vector < int > l ) { for ( int i = 0 ; i < l . size ( ) ; i ++ ) { for ( int j = i + 1 ; j < l . size ( ) ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) { return true ; } } } return false ; } 
string ChangeBase ( int x , int b ) { string ret ; while ( x > 0 ) { ret . insert ( 0 , to_string ( x % b ) ) ; x /= b ; } return ret ; } 
double Median ( vector < double > l ) { sort ( l . begin ( ) , l . end ( ) ) ; if ( l . size ( ) % 2 == 1 ) { return l [ l . size ( ) / 2 ] ; } return ( l [ l . size ( ) / 2 ] + l [ l . size ( ) / 2 - 1 ] ) / 2 ; } 
string DecodeShift ( string s ) { string result ; for ( char ch : s ) { char w = ( ch + 21 - 'a' ) % 26 + 'a' ; result += w ; } return result ; } 
bool BelowThreshold ( vector < int > l , int t ) { for ( int n : l ) { if ( n >= t ) { return false ; } } return true ; } 
bool CorrectBracketing ( string brackets ) { int depth = 0 ; for ( char b : brackets ) { if ( b == '<' ) { depth += 1 ; } if ( b == '>' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; } 
bool Monotonic ( vector < double > l ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . size ( ) ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr != 2 ; } 
vector < double > Derivative ( vector < double > xs ) { vector < double > result ; for ( int i = 1 ; i < xs . size ( ) ; i ++ ) { result . push_back ( i * xs [ i ] ) ; } return result ; } 
int VowelsCount ( string s ) { string vowels = "aeiouAEIOU" ; int count = 0 ; for ( char ch : s ) { if ( vowels . find ( ch ) != string :: npos ) { count += 1 ; } } if ( s [ s . length ( ) - 1 ] == 'y' || s [ s . length ( ) - 1 ] == 'Y' ) { count += 1 ; } return count ; } 
int DigitSum ( string s ) { int sum = 0 ; for ( char c : s ) { if ( isupper ( c ) ) { sum += c ; } } return sum ; } 
int FruitDistribution ( string s , int n ) { string num1 ; string num2 ; bool flag = false ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { if ( isdigit ( s [ i ] ) ) { if ( ! flag ) { num1 += s [ i ] ; } if ( flag ) { num2 += s [ i ] ; } } else if ( ! flag && num1 . length ( ) > 0 ) { flag = true ; } } return n - stoi ( num1 ) - stoi ( num2 ) ; } 
vector < int > Pluck ( vector < int > arr ) { vector < int > result ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . empty ( ) ) { result . push_back ( arr [ i ] ) ; result . push_back ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } } return result ; } 
vector < int > StrangeSortList ( vector < int > lst ) { vector < int > res ; sort ( lst . begin ( ) , lst . end ( ) ) ; int l = 0 ; int r = lst . size ( ) - 1 ; while ( l < r ) { res . push_back ( lst [ l ] ) ; l += 1 ; res . push_back ( lst [ r ] ) ; r -= 1 ; } if ( l == r ) { res . push_back ( lst [ l ] ) ; } return res ; } 
double TriangleArea ( double a , double b , double c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return -1 ; } double s = ( a + b + c ) / 2 ; return sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; } 
bool WillItFly ( vector < int > q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . size ( ) ; i ++ ) { if ( q [ i ] != q [ q . size ( ) - i - 1 ] ) { return false ; } sum += q [ i ] ; } return sum <= w ; } 
bool IsCube ( int a ) { a = abs ( a ) ; int i = round ( pow ( a , 1.0 / 3 ) ) ; return pow ( i , 3 ) == a ; } 
int HexKey ( string num ) { string key = "2357BD" ; int total = 0 ; for ( char c : num ) { if ( key . find ( c ) != string :: npos ) { total += 1 ; } } return total ; } 
string DecimalToBinary ( int dec ) { string ans ; if ( dec != 0 ) { while ( dec > 0 ) { ans . insert ( 0 , to_string ( dec % 2 ) ) ; dec /= 2 ; } } else { ans += "0" ; } return "db" + ans + "db" ; } 
bool PrimeLength ( string s ) { int l = s . length ( ) ; if ( l < 2 ) { return false ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return false ; } } return true ; } 
int StartsOneEnds ( int n ) { if ( n < 1 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return 18 * pow ( 10 , n - 2 ) ; } 
int Add ( vector < int > lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . size ( ) ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; } 
vector < vector < int > > GetRow ( vector < vector < int > > lst , int x ) { vector < vector < int > > coords ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { for ( int j = lst [ i ] . size ( ) - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] [ j ] == x ) { coords . push_back ( { i , j } ) ; } } } return coords ; } 
int NextSmallest ( vector < int > lst ) { sort ( lst . begin ( ) , lst . end ( ) ) ; for ( int i = 1 ; i < lst . size ( ) ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) { return lst [ i ] ; } } return -1 ; } 
bool AnyInt ( double a , double b , double c ) { if ( round ( a ) != a || round ( b ) != b || round ( c ) != c ) { return false ; } return a + b == c || a + c == b || b + c == a ; } 
vector < int > CountUpTo ( int n ) { vector < int > primes ; for ( int i = 2 ; i < n ; i ++ ) { bool is_prime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { primes . push_back ( i ) ; } } return primes ; } 
int ClosestInteger ( string value ) { double w = stod ( value ) ; return round ( w ) ; } 
vector < int > MakeAPile ( int n ) { vector < int > result ; for ( int i = 0 ; i < n ; i ++ ) { result . push_back ( n + 2 * i ) ; } return result ; } 
vector < string > WordsString ( string s ) { string current ; vector < string > words ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s [ i ] == ' ' || s [ i ] == ',' ) { if ( current . length ( ) > 0 ) { words . push_back ( current ) ; current . clear ( ) ; } } else { current += s [ i ] ; } } return words ; } 
string RoundedAvg ( int n , int m ) { if ( n > m ) { return "-1" ; } int num = ( m + n ) / 2 ; string ret ; while ( num > 0 ) { ret . insert ( 0 , to_string ( num % 2 ) ) ; num /= 2 ; } return ret ; } 
vector < int > UniqueDigits ( vector < int > x ) { vector < int > digits ; for ( int n : x ) { bool is_unique = true ; for ( char c : to_string ( n ) ) { if ( c % 2 == 0 ) { is_unique = false ; break ; } } if ( is_unique ) { digits . push_back ( n ) ; } } sort ( digits . begin ( ) , digits . end ( ) ) ; return digits ; } 
int CountNums ( vector < int > arr ) { int num = 0 ; for ( int n : arr ) { int neg = n < 0 ? -1 : 1 ; n = abs ( n ) ; vector < int > digits ; for ( char c : to_string ( n ) ) { digits . push_back ( c - '0' ) ; } digits [ 0 ] *= neg ; int sum = 0 ; for ( int d : digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; } 
bool MoveOneBall ( vector < int > arr ) { if ( arr . empty ( ) ) { return true ; } int num = 0 ; for ( int i = 1 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ arr . size ( ) - 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; } 
string Exchange ( vector < int > lst1 , vector < int > lst2 ) { int odd = 0 ; int even = 0 ; for ( int n : lst1 ) { if ( n % 2 == 1 ) { odd += 1 ; } } for ( int n : lst2 ) { if ( n % 2 == 0 ) { even += 1 ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; } 
vector < string > OddCount ( vector < string > lst ) { vector < string > results ; string original_str = "the number of odd elements in the string i of the input." ; for ( string & s : lst ) { int sum = 0 ; for ( char d : s ) { if ( isdigit ( d ) && d % 2 == 1 ) { sum += 1 ; } } string result ; for ( char c : original_str ) { if ( c == 'i' ) { result += to_string ( sum ) ; } else { result += c ; } } results . push_back ( result ) ; } return results ; } 
int MinSubArraySum ( vector < int > nums ) { int min_sum = numeric_limits < int > :: max ( ) ; int sum = 0 ; for ( int num : nums ) { sum += num ; if ( min_sum > sum ) { min_sum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return min_sum ; } 
int MaxFill ( vector < vector < int > > grid , int capacity ) { int res = 0 ; for ( auto & well : grid ) { int sum = 0 ; for ( int n : well ) { sum += n ; } if ( sum > 0 ) { res += ( sum - 1 ) / capacity + 1 ; } } return res ; } 
vector < string > SelectWords ( string s , int n ) { string vowels = "aeiouAEIOU" ; string current ; vector < string > result ; int consonant_num = 0 ; for ( int i = 0 ; i <= s . length ( ) ; i ++ ) { if ( i == s . length ( ) || s [ i ] == ' ' ) { if ( consonant_num == n ) { result . push_back ( current ) ; } current . clear ( ) ; consonant_num = 0 ; } else { current += s [ i ] ; if ( vowels . find ( s [ i ] ) == string :: npos ) { consonant_num += 1 ; } } } return result ; } 
int Solution ( vector < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . size ( ) ; i += 2 ) { if ( lst [ i ] % 2 == 1 ) { sum += lst [ i ] ; } } return sum ; } 
int AddElements ( vector < int > arr , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= -99 && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; } 
vector < int > GetOddCollatz ( int n ) { vector < int > odd_collatz ; while ( n != 1 ) { if ( n % 2 == 1 ) { odd_collatz . push_back ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } odd_collatz . push_back ( 1 ) ; sort ( odd_collatz . begin ( ) , odd_collatz . end ( ) ) ; return odd_collatz ; } 
bool IsSorted ( vector < int > lst ) { for ( int i = 1 ; i < lst . size ( ) ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; } 
string Intersection ( vector < int > interval1 , vector < int > interval2 ) { int inter1 = max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return "NO" ; } } return "YES" ; } 
int ProdSigns ( vector < int > arr ) { if ( arr . empty ( ) ) { return -32768 ; } int sum = 0 ; int prods = 1 ; for ( int i : arr ) { sum += abs ( i ) ; if ( i == 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; } 
vector < int > MinPath ( vector < vector < int > > grid , int k ) { int n = grid . size ( ) ; int min_num = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { vector < int > tmp ; if ( i != 0 ) { tmp . push_back ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . push_back ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . push_back ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . push_back ( grid [ i ] [ j + 1 ] ) ; } min_num = * min_element ( tmp . begin ( ) , tmp . end ( ) ) ; } } } vector < int > ans ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . push_back ( 1 ) ; } else { ans . push_back ( min_num ) ; } } return ans ; } 
int Digits ( int n ) { int prod = 0 ; for ( char digit : to_string ( n ) ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) { prod = 1 ; } prod *= digit - '0' ; } } return prod ; } 
bool IsNested ( string s ) { int count = 0 ; int max_count = 0 ; for ( char ch : s ) { if ( ch == '[' ) { count += 1 ; } if ( ch == ']' ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > max_count ) { max_count = count ; } if ( count <= max_count - 2 ) { return true ; } } return false ; } 
int SumSquares ( vector < double > lst ) { int sum = 0 ; for ( double i : lst ) { sum += ceil ( i ) * ceil ( i ) ; } return sum ; } 
int CanArrange ( vector < int > arr ) { int index = -1 ; for ( int i = 0 ; i < arr . size ( ) ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; } 
vector < int > LargestSmallestIntegers ( vector < int > lst ) { int max_neg = 0 , min_pos = 0 ; for ( int n : lst ) { if ( n < 0 && ( max_neg == 0 || n > max_neg ) ) { max_neg = n ; } if ( n > 0 && ( min_pos == 0 || n < min_pos ) ) { min_pos = n ; } } return { max_neg , min_pos } ; } 
string FixSpaces ( string text ) { string res ; int space_len = 0 ; for ( int i = 0 ; i <= text . length ( ) ; i ++ ) { if ( i == text . length ( ) || text [ i ] != ' ' ) { if ( space_len == 1 ) { res += '_' ; } if ( space_len == 2 ) { res += "__" ; } if ( space_len > 2 ) { res += '-' ; } space_len = 0 ; if ( i != text . length ( ) ) { res += text [ i ] ; } } else { space_len += 1 ; } } return res ; } 
string FileNameCheck ( string file_name ) { int digit_num = 0 , dot_num = 0 ; if ( file_name . length ( ) < 5 || ! isalpha ( file_name [ 0 ] ) ) { return "No" ; } string suffix = file_name . substr ( file_name . length ( ) - 4 ) ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) { return "No" ; } for ( char c : file_name ) { if ( isdigit ( c ) ) { digit_num += 1 ; } if ( c == '.' ) { dot_num += 1 ; } } if ( digit_num > 3 || dot_num != 1 ) { return "No" ; } return "Yes" ; } 
int SumSquares ( vector < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . size ( ) ; i ++ ) { if ( i % 3 == 0 ) { sum += lst [ i ] * lst [ i ] ; } else if ( i % 4 == 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else { sum += lst [ i ] ; } } return sum ; } 
string WordsInSentence ( string sentence ) { string result ; string current ; for ( int i = 0 ; i <= sentence . length ( ) ; i ++ ) { if ( i == sentence . length ( ) || sentence [ i ] == ' ' ) { bool is_prime = true ; int l = current . length ( ) ; if ( l < 2 ) { is_prime = false ; } for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { is_prime = false ; break ; } } if ( is_prime ) { result += current + ' ' ; } current . clear ( ) ; } else { current += sentence [ i ] ; } } if ( result . length ( ) > 0 ) { result . pop_back ( ) ; } return result ; } 
bool Simplify ( string x , string n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . length ( ) ; i ++ ) { if ( x [ i ] == '/' ) { a = stoi ( x . substr ( 0 , i ) ) ; b = stoi ( x . substr ( i + 1 ) ) ; } } for ( int i = 0 ; i < n . length ( ) ; i ++ ) { if ( n [ i ] == '/' ) { c = stoi ( n . substr ( 0 , i ) ) ; d = stoi ( n . substr ( i + 1 ) ) ; } } return ( a * c ) % ( b * d ) == 0 ; } 
int SpecialFilter ( vector < int > nums ) { int count = 0 ; for ( int num : nums ) { if ( num > 10 ) { string w = to_string ( num ) ; if ( w [ 0 ] % 2 == 1 && w [ w . length ( ) - 1 ] % 2 == 1 ) { count += 1 ; } } } return count ; } 
int GetMatrixTriples ( int n ) { vector < int > arr ; for ( int i = 1 ; i <= n ; i ++ ) { arr . push_back ( i * i - i + 1 ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) { count += 1 ; } } } } return count ; } 
int DoubleTheDifference ( vector < double > lst ) { int sum = 0 ; for ( double d : lst ) { int num = round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) { sum += num * num ; } } } return sum ; } 
vector < int > Compare ( vector < int > game , vector < int > guess ) { vector < int > result ; for ( int i = 0 ; i < game . size ( ) ; i ++ ) { result . push_back ( abs ( game [ i ] - guess [ i ] ) ) ; } return result ; } 
string StrongestExtension ( string class_name , vector < string > extensions ) { string strongest ; int max = numeric_limits < int > :: min ( ) ; for ( auto & extension : extensions ) { int strength = 0 ; for ( char chr : extension ) { if ( isupper ( chr ) ) { strength += 1 ; } if ( islower ( chr ) ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return class_name + '.' + strongest ; } 
string IntToMiniRoman ( int number ) { vector < int > num = { 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 } ; vector < string > sym = { "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" } ; int pos = 0 ; string res ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res += sym [ pos ] ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } return res ; } 
vector < int > Eat ( int number , int need , int remaining ) { return need > remaining ? vector < int > { number + remaining , 0 } : vector < int > { number + need , remaining - need } ; } 
int DoAlgebra ( vector < string > ops , vector < int > operands ) { vector < int > nums ( operands ) ; vector < string > current_ops ( ops ) ; int i = current_ops . size ( ) - 1 ; while ( i >= 0 ) { if ( current_ops [ i ] == "**" ) { nums [ i ] = pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . erase ( nums . begin ( ) + i + 1 ) ; current_ops . erase ( current_ops . begin ( ) + i ) ; } i -- ; } i = 0 ; while ( i < current_ops . size ( ) ) { if ( current_ops [ i ] == "*" ) { nums [ i ] *= nums [ i + 1 ] ; nums . erase ( nums . begin ( ) + i + 1 ) ; current_ops . erase ( current_ops . begin ( ) + i ) ; } else if ( current_ops [ i ] == "//" ) { nums [ i ] /= nums [ i + 1 ] ; nums . erase ( nums . begin ( ) + i + 1 ) ; current_ops . erase ( current_ops . begin ( ) + i ) ; } else { i ++ ; } } i = 0 ; while ( i < current_ops . size ( ) ) { if ( current_ops [ i ] == "+" ) { nums [ i ] += nums [ i + 1 ] ; nums . erase ( nums . begin ( ) + i + 1 ) ; current_ops . erase ( current_ops . begin ( ) + i ) ; } else if ( current_ops [ i ] == "-" ) { nums [ i ] -= nums [ i + 1 ] ; nums . erase ( nums . begin ( ) + i + 1 ) ; current_ops . erase ( current_ops . begin ( ) + i ) ; } else { i ++ ; } } return nums [ 0 ] ; } 
vector < int > GenerateIntegers ( int a , int b ) { int lower = max ( 2 , min ( a , b ) ) ; int upper = min ( 8 , max ( a , b ) ) ; vector < int > result ; for ( int i = lower ; i <= upper ; i += 2 ) { result . push_back ( i ) ; } return result ; } 
bool IsStepNum ( int n ) { int prev_digit = -1 ; while ( n > 0 ) { int cur_digit = n % 10 ; if ( prev_digit == -1 ) { prev_digit = cur_digit ; } else { if ( abs ( prev_digit - cur_digit ) != 1 ) { return false ; } } prev_digit = cur_digit ; n /= 10 ; } return true ; } 
int NumOfWays ( int n , int k ) { int p = 1 ; if ( k % 2 ) { p = -1 ; } return ( pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; } 
vector < int > FindDivisors ( int n ) { vector < int > v ; for ( int i = 1 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { v . push_back ( i ) ; } else { v . push_back ( i ) ; v . push_back ( n / i ) ; } } } return v ; } 
int EggDrop ( int n , int k ) { if ( k == 1 || k == 0 ) { return k ; } if ( n == 1 ) { return k ; } int min = INT_MAX ; for ( int x = 1 ; x <= k ; x ++ ) { int res = max ( EggDrop ( n - 1 , x - 1 ) , EggDrop ( n , k - x ) ) ; if ( res < min ) { min = res ; } } return min + 1 ; } 
bool IsPowerOfTwo ( int n ) { if ( n == 0 ) { return false ; } return ceil ( log2 ( n ) ) == floor ( log2 ( n ) ) ; } 
string ShortestPalindrome ( string s ) { int n = s . length ( ) ; vector < string > v ; for ( int i = 0 ; i < n ; i ++ ) { int l = i ; int r = i ; string ans1 ; string ans2 ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans1 += s [ l ] ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans2 += s [ l ] ; l -- ; r ++ ; } v . push_back ( ans1 ) ; v . push_back ( ans2 ) ; } string ans = v [ 0 ] ; for ( int i = 0 ; i < v . size ( ) ; i ++ ) { if ( v [ i ] != "" ) { ans = min ( ans , v [ i ] ) ; } } return ans ; } 
int MinimumAdjacentDifference ( vector < int > a , int n , int k ) { int min_diff = INT_MAX ; for ( int i = 0 ; i <= k ; i ++ ) { int max_diff = INT_MIN ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { max_diff = max ( max_diff , a [ p + 1 ] - a [ p ] ) ; } } min_diff = min ( min_diff , max_diff ) ; } return min_diff ; } 
int Cal ( vector < int > a , int mid ) { int chocolate = 0 ; for ( auto i : a ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; } 
bool Check ( int v , vector < int > a , int m ) { int tec = 0 , ans = 0 ; vector < int > b ( a . size ( ) + 3 ) ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; } 
int LargestNum ( vector < int > arr ) { int res = 0 ; sort ( arr . begin ( ) , arr . end ( ) ) ; int l = 0 , r = arr . size ( ) - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = max ( res , max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) { l ++ ; } else { r -- ; } } return res ; } 
int BinarySearch ( vector < int > p , int n ) { int i = 0 ; int j = p . size ( ) - 1 ; int index = -1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; } 
int FindMinLength ( vector < int > arr ) { int index = arr . size ( ) - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; } 
int MinDigits ( int n , int k ) { int digits_num = floor ( log10 ( n ) + 1 ) ; int temp_sum = 0 ; int temp = digits_num ; int result = 0 ; int x , v ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = n / pow ( 10 , temp - 1 ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v /= 10 ; v ++ ; result = v * pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; } return - 1 ; } 
int CheckForPerfectSquare ( vector < int > arr , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return -1 ; } 
int MinFlips ( vector < vector < int > > mat , string s ) { int n = mat . size ( ) ; int m = mat [ 0 ] . size ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s [ i + j ] - '0' ) { count ++ ; } } } return count ; } 
vector < vector < int > > ConstructTree ( int n , vector < vector < int > > edges ) { vector < vector < int > > adjl ; for ( int i = 0 ; i < n ; i ++ ) { adjl . push_back ( vector < int > ( ) ) ; } for ( auto e : edges ) { int u = e [ 0 ] ; int v = e [ 1 ] ; adjl [ u ] . push_back ( v ) ; adjl [ v ] . push_back ( u ) ; } return adjl ; } 
int FindSumOfValues ( int v , vector < int > parent , vector < int > values_children ) { int cur_node = v ; int sum = 0 ; while ( cur_node != -1 ) { sum += values_children [ cur_node ] ; cur_node = parent [ cur_node ] ; } return sum ; } 
int GetDistinct ( int d , int count ) { int num = 0 ; count = pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; } 
bool IsIncreasing ( vector < int > arr ) { for ( int i = 0 ; i < arr . size ( ) - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; } 
int MinAdjSwaps ( vector < vector < int > > mat ) { int n = mat . size ( ) ; vector < int > cnt_zero ( n ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 && mat [ i ] [ j ] == 0 ; j -- ) { cnt_zero [ i ] ++ ; } } int cnt_swaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cnt_zero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cnt_zero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) { return -1 ; } while ( first > i ) { swap ( cnt_zero [ first ] , cnt_zero [ first - 1 ] ) ; first -- ; cnt_swaps ++ ; } } } return cnt_swaps ; } 
int Solve ( vector < int > values , vector < int > salary , int mod ) { int ret = 1 ; int amt = 0 ; sort ( values . begin ( ) , values . end ( ) ) ; sort ( salary . begin ( ) , salary . end ( ) ) ; while ( salary . size ( ) > 0 ) { while ( values . size ( ) > 0 && values [ values . size ( ) - 1 ] >= salary [ salary . size ( ) - 1 ] ) { amt ++ ; values . pop_back ( ) ; } if ( amt == 0 ) { return 0 ; } ret *= amt -- ; ret %= mod ; salary . pop_back ( ) ; } return ret ; } 
vector < int > OrganizeInOrder ( vector < int > vec , vector < char > op , int n ) { vector < int > result ( n ) ; sort ( vec . begin ( ) , vec . end ( ) ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; } 
int CountPoints ( int n , int m , vector < int > a , vector < int > b , int x , int y ) { sort ( a . begin ( ) , a . end ( ) ) ; sort ( b . begin ( ) , b . end ( ) ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; } 
bool AreSame ( vector < int > a , vector < int > b ) { sort ( a . begin ( ) , a . end ( ) ) ; sort ( b . begin ( ) , b . end ( ) ) ; return a == b ; } 
int CountNumberOfStrings ( string s ) { int n = s . length ( ) - 1 ; int count = pow ( 2 , n ) ; return count ; } 
vector < int > PrimePower ( int x ) { vector < int > prime_pow ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } prime_pow . push_back ( p ) ; } } if ( x > 1 ) { prime_pow . push_back ( x ) ; } return prime_pow ; } 
bool IsPerfect ( int n0 ) { double n = sqrt ( n0 ) ; if ( floor ( n ) != ceil ( n ) ) { return false ; } return true ; } 
int FindSum ( int l , int r ) { vector < int > arr ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . push_back ( i + x ) ; if ( i + 1 <= r ) { arr . push_back ( i + 1 + x ) ; } x *= -1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr [ i ] ; } return sum ; } 
int Results ( int n , int k ) { return round ( pow ( n , 1.0 / pow ( 2 , k ) ) ) ; } 
vector < int > Factors ( int n ) { vector < int > v ; v . push_back ( 1 ) ; for ( int i = 2 ; i <= sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . push_back ( i ) ; if ( n / i != i ) { v . push_back ( n / i ) ; } } } return v ; } 
int SmallestNum ( int n ) { double x = pow ( 10.0 , ( n - 1 ) / 2.0 ) ; return ceil ( x ) ; } 
int Smallest ( string s ) { vector < int > a ( s . length ( ) ) ; for ( int i = 0 ; i < s . length ( ) ; i ++ ) { a [ i ] = s [ i ] - '0' ; } vector < int > b ; for ( int i = 0 ; i < a . size ( ) ; i ++ ) { if ( ( a [ i ] ) % 2 != 0 ) { b . push_back ( a [ i ] ) ; } } sort ( b . begin ( ) , b . end ( ) ) ; if ( b . size ( ) > 1 ) { return b [ 0 ] * 10 + b [ 1 ] ; } return -1 ; } 
vector < double > Diagonals ( double a , double b , double c , double d ) { vector < double > ans ; ans . push_back ( sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . push_back ( sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; } 
int FindNumberOfDigits ( int n , int bas ) { int dig = floor ( log ( n ) / log ( bas ) ) + 1 ; return dig ; } 
double NGon ( int n ) { double pro_angle_var ; if ( n % 4 == 0 ) { pro_angle_var = numbers :: pi * ( 180.0 / n ) / 180 ; } else { pro_angle_var = numbers :: pi * ( 180.0 / ( 2 * n ) ) / 180 ; } double neg_x = 1.0e+99 , pos_x = -1.0e+99 , neg_y = 1.0e+99 , pos_y = -1.0e+99 ; for ( int j = 0 ; j < n ; ++ j ) { double px = cos ( 2 * numbers :: pi * j / n + pro_angle_var ) ; double py = sin ( 2 * numbers :: pi * j / n + pro_angle_var ) ; neg_x = min ( neg_x , px ) ; pos_x = max ( pos_x , px ) ; neg_y = min ( neg_y , py ) ; pos_y = max ( pos_y , py ) ; } double opt2 = max ( pos_x - neg_x , pos_y - neg_y ) ; return opt2 / sin ( numbers :: pi / n ) / 2 ; } 
int FindMaxK ( int n ) { int p = log2 ( n ) ; return pow ( 2 , p ) ; } 
int NthFibo ( int n ) { double a = ( pow ( 5 , 0.5 ) + 1 ) / 2 ; double b = ( -1 * pow ( 5 , 0.5 ) + 1 ) / 2 ; double r = pow ( 5 , 0.5 ) ; double ans = ( pow ( a , n ) - pow ( b , n ) ) / r ; return ans ; } 
double FindProb ( int l , int r ) { double count_of_ps = floor ( sqrt ( r ) ) - ceil ( sqrt ( l ) ) + 1 ; double total = r - l + 1 ; double prob = count_of_ps / total ; return prob ; } 
int PreviousFibonacci ( int n ) { double a = n / ( ( 1 + sqrt ( 5 ) ) / 2.0 ) ; return round ( a ) ; } 
vector < int > DistPrime ( vector < int > arr , vector < int > all_primes ) { vector < int > list1 ; for ( int i : all_primes ) { for ( int j : arr ) { if ( j % i == 0 ) { list1 . push_back ( i ) ; break ; } } } return list1 ; } 
vector < int > GetArray ( int n ) { vector < int > ans ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans . push_back ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; } 
int MaximumLength ( vector < int > a ) { vector < int > counts ( 11 ) ; int ans = 0 ; for ( int index = 0 ; index < a . size ( ) ; index ++ ) { counts [ a [ index ] ] += 1 ; vector < int > k ; for ( auto i : counts ) { if ( i != 0 ) { k . push_back ( i ) ; } } sort ( k . begin ( ) , k . end ( ) ) ; if ( k . size ( ) == 1 || ( k [ 0 ] == k [ k . size ( ) - 2 ] && k [ k . size ( ) - 1 ] - k [ k . size ( ) - 2 ] == 1 ) || ( k [ 0 ] == 1 && k [ 1 ] == k [ k . size ( ) - 1 ] ) ) { ans = index ; } } return ans + 1 ; } 
int MaxEdges ( int n ) { int edges = floor ( n * n / 4 ) ; return edges ; } 
int FindK ( int n , int k ) { vector < int > a ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a . push_back ( i ) ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a . push_back ( i ) ; } } return a [ k - 1 ] ; } 
bool IsKeith ( int x , int temp ) { vector < int > terms ; int n = 0 ; while ( temp > 0 ) { terms . push_back ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } reverse ( terms . begin ( ) , terms . end ( ) ) ; int next_term = 0 , i = n ; while ( next_term < x ) { next_term = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { next_term += terms [ i - j ] ; } terms . push_back ( next_term ) ; i ++ ; } return next_term == x ; } 
bool Factors ( int n , int k ) { vector < int > v ; while ( n % 2 == 0 ) { v . push_back ( 2 ) ; n /= 2 ; } if ( v . size ( ) >= k ) { return true ; } for ( int i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n = n / i ; v . push_back ( i ) ; } if ( v . size ( ) >= k ) { return true ; } } if ( n > 2 ) { v . push_back ( n ) ; } if ( v . size ( ) >= k ) { return true ; } return false ; } 
