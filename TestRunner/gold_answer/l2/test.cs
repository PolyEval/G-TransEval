bool HasCloseElements ( List < double > numbers , double threshold ) { for ( int i = 0 ; i < numbers . Count ; i ++ ) { for ( int j = i + 1 ; j < numbers . Count ; j ++ ) { double distance = Math . Abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) return true ; } } return false ; } 
double TruncateNumber ( double number ) { return number % 1.0 ; } 
bool BelowZero ( List < int > operations ) { int balance = 0 ; foreach ( var op in operations ) { balance += op ; if ( balance < 0 ) { return true ; } } return false ; } 
double MeanAbsoluteDeviation ( List < double > numbers ) { double sumNum = 0 ; foreach ( var num in numbers ) { sumNum += num ; } double mean = sumNum / numbers . Count ; double sumAbsDiff = 0 ; foreach ( var num in numbers ) { sumAbsDiff += Math . Abs ( num - mean ) ; } return sumAbsDiff / numbers . Count ; } 
List < int > Intersperse ( List < int > numbers , int delimiter ) { List < int > result = new List < int > ( ) ; if ( numbers . Count == 0 ) { return result ; } for ( int i = 0 ; i < numbers . Count - 1 ; i ++ ) { result . Add ( numbers [ i ] ) ; result . Add ( delimiter ) ; } result . Add ( numbers [ ^ 1 ] ) ; return result ; } 
List < int > SumProduct ( List < int > numbers ) { int sumValue = 0 ; int prodValue = 1 ; foreach ( int n in numbers ) { sumValue += n ; prodValue *= n ; } return new List < int > { sumValue , prodValue } ; } 
List < string > AllPrefixes ( string s ) { List < string > result = new List < string > ( ) ; for ( int i = 1 ; i <= s . Length ; i ++ ) { result . Add ( s . Substring ( 0 , i ) ) ; } return result ; } 
List < int > ParseMusic ( string musicString ) { StringBuilder current = new StringBuilder ( ) ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i <= musicString . Length ; i ++ ) { if ( i == musicString . Length || musicString [ i ] == ' ' ) { if ( current . ToString ( ) == "o" ) { result . Add ( 4 ) ; } if ( current . ToString ( ) == "o|" ) { result . Add ( 2 ) ; } if ( current . ToString ( ) == ".|" ) { result . Add ( 1 ) ; } current . Clear ( ) ; } else { current . Append ( musicString [ i ] ) ; } } return result ; } 
int Strlen ( string s ) { return s . Length ; } 
List < int > Factorize ( int n ) { List < int > factors = new List < int > ( ) ; for ( int i = 2 ; i <= n ; i ++ ) { if ( n % i == 0 ) { n /= i ; factors . Add ( i ) ; i -- ; } } return factors ; } 
string Concatenate ( List < string > strings ) { StringBuilder result = new StringBuilder ( ) ; foreach ( var s in strings ) { result . Append ( s ) ; } return result . ToString ( ) ; } 
List < double > GetPositive ( List < double > l ) { List < double > result = new List < double > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( l [ i ] > 0 ) { result . Add ( l [ i ] ) ; } } return result ; } 
List < double > SortEven ( List < double > l ) { List < double > evens = new List < double > ( ) ; for ( int i = 0 ; i < l . Count ; i += 2 ) { evens . Add ( l [ i ] ) ; } evens . Sort ( ) ; List < double > result = new List < double > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( i % 2 == 0 ) { result . Add ( evens [ i / 2 ] ) ; } if ( i % 2 == 1 ) { result . Add ( l [ i ] ) ; } } return result ; } 
string DecodeCyclic ( string s ) { StringBuilder output = new StringBuilder ( ) ; int i = 0 ; while ( i <= s . Length - 3 ) { string x = s [ i + 2 ] + s . Substring ( i , 2 ) ; output . Append ( x ) ; i += 3 ; } return output . ToString ( ) + s . Substring ( i ) ; } 
int CarRaceCollision ( int n ) { return ( int ) Math . Pow ( n , 2 ) ; } 
List < int > IncrList ( List < int > l ) { List < int > result = new List < int > ( ) ; foreach ( int i in l ) { result . Add ( i + 1 ) ; } return result ; } 
bool PairsSumToZero ( List < int > l ) { for ( int i = 0 ; i < l . Count ; i ++ ) { for ( int j = i + 1 ; j < l . Count ; j ++ ) { if ( l [ i ] + l [ j ] == 0 ) { return true ; } } } return false ; } 
string ChangeBase ( int x , int b ) { StringBuilder ret = new StringBuilder ( ) ; while ( x > 0 ) { ret . Insert ( 0 , x % b ) ; x /= b ; } return ret . ToString ( ) ; } 
double Median ( List < double > l ) { l . Sort ( ) ; if ( l . Count % 2 == 1 ) { return l [ l . Count / 2 ] ; } return ( l [ l . Count / 2 - 1 ] + l [ l . Count / 2 ] ) / 2.0 ; } 
string DecodeShift ( string s ) { StringBuilder sb = new StringBuilder ( ) ; foreach ( char ch in s ) { char w = ( char ) ( ( ch + 21 - 'a' ) % 26 + 'a' ) ; sb . Append ( w ) ; } return sb . ToString ( ) ; } 
bool BelowThreshold ( List < int > l , int t ) { foreach ( int n in l ) { if ( n >= t ) { return false ; } } return true ; } 
bool CorrectBracketing ( string brackets ) { int depth = 0 ; foreach ( char b in brackets ) { if ( b == '<' ) { depth += 1 ; } if ( b == '>' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; } 
bool Monotonic ( List < double > l ) { int incr = 0 ; int decr = 0 ; for ( int i = 1 ; i < l . Count ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr != 2 ; } 
List < double > Derivative ( List < double > xs ) { List < double > result = new List < double > ( ) ; for ( int i = 1 ; i < xs . Count ; i ++ ) { result . Add ( i * xs [ i ] ) ; } return result ; } 
int VowelsCount ( string s ) { string vowels = "aeiouAEIOU" ; int count = 0 ; foreach ( char ch in s ) { if ( vowels . Contains ( ch ) ) { count += 1 ; } } if ( s [ ^ 1 ] == 'y' || s [ ^ 1 ] == 'Y' ) { count += 1 ; } return count ; } 
int DigitSum ( string s ) { int sum = 0 ; foreach ( char c in s ) { if ( char . IsUpper ( c ) ) { sum += c ; } } return sum ; } 
int FruitDistribution ( string s , int n ) { StringBuilder num1 = new StringBuilder ( ) ; StringBuilder num2 = new StringBuilder ( ) ; bool flag = false ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( char . IsDigit ( s [ i ] ) ) { if ( ! flag ) { num1 . Append ( s [ i ] ) ; } if ( flag ) { num2 . Append ( s [ i ] ) ; } } else if ( ! flag && num1 . Length > 0 ) { flag = true ; } } return n - int . Parse ( num1 . ToString ( ) ) - int . Parse ( num2 . ToString ( ) ) ; } 
List < int > Pluck ( List < int > arr ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < arr . Count ; i ++ ) { if ( arr [ i ] % 2 == 0 ) { if ( result . Count == 0 ) { result . Add ( arr [ i ] ) ; result . Add ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } } return result ; } 
List < int > StrangeSortList ( List < int > lst ) { List < int > res = new List < int > ( ) ; lst . Sort ( ) ; int l = 0 ; int r = lst . Count - 1 ; while ( l < r ) { res . Add ( lst [ l ] ) ; l += 1 ; res . Add ( lst [ r ] ) ; r -= 1 ; } if ( l == r ) { res . Add ( lst [ l ] ) ; } return res ; } 
double TriangleArea ( double a , double b , double c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return - 1 ; } double s = ( a + b + c ) / 2 ; return Math . Sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; } 
bool WillItFly ( List < int > q , int w ) { int sum = 0 ; for ( int i = 0 ; i < q . Count ; i ++ ) { if ( q [ i ] != q [ ^ ( i + 1 ) ] ) { return false ; } sum += q [ i ] ; } return sum <= w ; } 
bool IsCube ( int a ) { a = Math . Abs ( a ) ; int i = ( int ) Math . Round ( Math . Pow ( a , 1.0 / 3 ) ) ; return ( int ) Math . Pow ( i , 3 ) == a ; } 
int HexKey ( string num ) { string key = "2357BD" ; int total = 0 ; foreach ( char c in num ) { if ( key . Contains ( c ) ) { total += 1 ; } } return total ; } 
string DecimalToBinary ( int dec ) { StringBuilder ans = new StringBuilder ( ) ; if ( dec != 0 ) { while ( dec > 0 ) { ans . Insert ( 0 , dec % 2 ) ; dec /= 2 ; } } else { ans . Append ( "0" ) ; } return "db" + ans . ToString ( ) + "db" ; } 
bool PrimeLength ( string s ) { int l = s . Length ; if ( l < 2 ) { return false ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return false ; } } return true ; } 
int StartsOneEnds ( int n ) { if ( n < 1 ) { return 0 ; } if ( n == 1 ) { return 1 ; } return ( int ) ( 18 * Math . Pow ( 10 , n - 2 ) ) ; } 
int Add ( List < int > lst ) { int sum = 0 ; for ( int i = 1 ; i < lst . Count ; i += 2 ) { if ( lst [ i ] % 2 == 0 ) { sum += lst [ i ] ; } } return sum ; } 
List < List < int > > GetRow ( List < List < int > > lst , int x ) { List < List < int > > coords = new List < List < int > > ( ) ; for ( int i = 0 ; i < lst . Count ; i ++ ) { for ( int j = lst [ i ] . Count - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] [ j ] == x ) { coords . Add ( new List < int > { i , j } ) ; } } } return coords ; } 
int NextSmallest ( List < int > lst ) { lst . Sort ( ) ; for ( int i = 1 ; i < lst . Count ; i ++ ) { if ( lst [ i ] != lst [ i - 1 ] ) { return lst [ i ] ; } } return - 1 ; } 
bool AnyInt ( double a , double b , double c ) { if ( Math . Round ( a ) != a || Math . Round ( b ) != b || Math . Round ( c ) != c ) { return false ; } return a + b == c || a + c == b || b + c == a ; } 
List < int > CountUpTo ( int n ) { List < int > primes = new List < int > ( ) ; for ( int i = 2 ; i < n ; i ++ ) { bool isPrime = true ; for ( int j = 2 ; j < i ; j ++ ) { if ( i % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { primes . Add ( i ) ; } } return primes ; } 
int ClosestInt ( string value ) { double w = Double . Parse ( value ) ; return ( int ) Math . Round ( w ) ; }
List < int > MakeAPile ( int n ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { result . Add ( n + 2 * i ) ; } return result ; } 
List < string > WordStrings ( string s ) { StringBuilder current = new StringBuilder ( ) ; List < string > words = new List < string > ( ) ; for ( int i = 0 ; i <= s . Length ; i ++ ) { if ( i == s . Length || s [ i ] == ' ' || s [ i ] == ',' ) { if ( current . Length > 0 ) { words . Add ( current . ToString ( ) ) ; current . Clear ( ) ; } } else { current . Append ( s [ i ] ) ; } } return words ; } 
string RoundedAvg ( int n , int m ) { if ( n > m ) { return "-1" ; } int num = ( m + n ) / 2 ; StringBuilder ret = new StringBuilder ( ) ; while ( num > 0 ) { ret . Insert ( 0 , num % 2 ) ; num /= 2 ; } return ret . ToString ( ) ; } 
List < int > UniqueDigits ( List < int > x ) { List < int > digits = new List < int > ( ) ; foreach ( int i in x ) { bool isUnique = true ; foreach ( char c in i . ToString ( ) ) { if ( c % 2 == 0 ) { isUnique = false ; break ; } } if ( isUnique ) { digits . Add ( i ) ; } } digits . Sort ( ) ; return digits ; } 
int CountNums ( List < int > arr ) { int num = 0 ; foreach ( int n0 in arr ) { int neg = n0 < 0 ? - 1 : 1 ; int n = Math . Abs ( n0 ) ; List < int > digits = new List < int > ( ) ; foreach ( char c in n . ToString ( ) ) { digits . Add ( c - '0' ) ; } digits [ 0 ] *= neg ; int sum = 0 ; foreach ( int d in digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; } 
bool MoveOneBall ( List < int > arr ) { if ( arr . Count == 0 ) { return true ; } int num = 0 ; for ( int i = 1 ; i < arr . Count ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ ^ 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; } 
string Exchange ( List < int > lst1 , List < int > lst2 ) { int odd = 0 ; int even = 0 ; foreach ( int n in lst1 ) { if ( n % 2 == 1 ) { odd += 1 ; } } foreach ( int n in lst2 ) { if ( n % 2 == 0 ) { even += 1 ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; } 
List < string > OddCount ( List < string > lst ) { List < string > results = new List < string > ( ) ; string originalStr = "the number of odd elements in the string i of the input." ; foreach ( string s in lst ) { int sum = 0 ; foreach ( char d in s ) { if ( char . IsDigit ( d ) && d % 2 == 1 ) { sum += 1 ; } } StringBuilder result = new StringBuilder ( ) ; foreach ( char c in originalStr ) { if ( c == 'i' ) { result . Append ( sum ) ; } else { result . Append ( c ) ; } } results . Add ( result . ToString ( ) ) ; } return results ; } 
int MinSubArraySum ( List < int > nums ) { int minSum = int . MaxValue ; int sum = 0 ; foreach ( int num in nums ) { sum += num ; if ( minSum > sum ) { minSum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return minSum ; } 
int MaxFill ( List < List < int > > grid , int capacity ) { int res = 0 ; foreach ( var well in grid ) { int sum = 0 ; foreach ( int n in well ) { sum += n ; } if ( sum > 0 ) { res += ( sum - 1 ) / capacity + 1 ; } } return res ; } 
List < string > SelectWords ( string s , int n ) { string vowels = "aeiouAEIOU" ; StringBuilder current = new StringBuilder ( ) ; List < string > result = new List < string > ( ) ; int consonantNum = 0 ; for ( int i = 0 ; i <= s . Length ; i ++ ) { if ( i == s . Length || s [ i ] == ' ' ) { if ( consonantNum == n ) { result . Add ( current . ToString ( ) ) ; } current . Clear ( ) ; consonantNum = 0 ; } else { current . Append ( s [ i ] ) ; if ( ! vowels . Contains ( s [ i ] ) ) { consonantNum += 1 ; } } } return result ; } 
int Solution ( List < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . Count ; i += 2 ) { if ( ( lst [ i ] % 2 ) == 1 ) { sum += lst [ i ] ; } } return sum ; } 
int AddElements ( List < int > arr , int k ) { int sum = 0 ; for ( int i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= - 99 && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; } 
List < int > GetOddCollatz ( int n ) { List < int > oddCollatz = new List < int > ( ) ; while ( n != 1 ) { if ( n % 2 == 1 ) { oddCollatz . Add ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } oddCollatz . Add ( 1 ) ; oddCollatz . Sort ( ) ; return oddCollatz ; } 
bool IsSorted ( List < int > lst ) { for ( int i = 1 ; i < lst . Count ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] == lst [ i - 1 ] && lst [ i ] == lst [ i - 2 ] ) { return false ; } } return true ; } 
string Intersection ( List < int > interval1 , List < int > interval2 ) { int inter1 = Math . Max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; int inter2 = Math . Min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; int l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( int i = 2 ; i < l ; i ++ ) { if ( l % i == 0 ) { return "NO" ; } } return "YES" ; } 
int ProdSigns ( List < int > arr ) { if ( arr . Count == 0 ) { return - 32768 ; } int sum = 0 ; int prods = 1 ; foreach ( int i in arr ) { sum += Math . Abs ( i ) ; if ( i == 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; } 
List < int > MinPath ( List < List < int > > grid , int k ) { int n = grid . Count ; int minNum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] == 1 ) { List < int > tmp = new List < int > ( ) ; if ( i != 0 ) { tmp . Add ( grid [ i - 1 ] [ j ] ) ; } if ( j != 0 ) { tmp . Add ( grid [ i ] [ j - 1 ] ) ; } if ( i != n - 1 ) { tmp . Add ( grid [ i + 1 ] [ j ] ) ; } if ( j != n - 1 ) { tmp . Add ( grid [ i ] [ j + 1 ] ) ; } minNum = tmp . Min ( ) ; } } } List < int > ans = new List < int > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( i % 2 == 0 ) { ans . Add ( 1 ) ; } else { ans . Add ( minNum ) ; } } return ans ; } 
int Digits ( int n ) { int prod = 0 ; foreach ( char digit in n . ToString ( ) ) { if ( digit % 2 == 1 ) { if ( prod == 0 ) { prod = 1 ; } prod *= digit - '0' ; } } return prod ; } 
bool IsNested ( string s ) { int count = 0 ; int maxCount = 0 ; foreach ( char ch in s ) { if ( ch == '[' ) { count += 1 ; } if ( ch == ']' ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > maxCount ) { maxCount = count ; } if ( count <= maxCount - 2 ) { return true ; } } return false ; } 
int SumSquares ( List < double > lst ) { int sum = 0 ; foreach ( double i in lst ) { sum += ( int ) ( Math . Ceiling ( i ) * Math . Ceiling ( i ) ) ; } return sum ; } 
int CanArrange ( List < int > arr ) { int index = - 1 ; for ( int i = 0 ; i < arr . Count ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; } 
List < int > LargestSmallestints ( List < int > lst ) { int maxNeg = 0 , minPos = 0 ; foreach ( int n in lst ) { if ( n < 0 && ( maxNeg == 0 || n > maxNeg ) ) { maxNeg = n ; } if ( n > 0 && ( minPos == 0 || n < minPos ) ) { minPos = n ; } } return new List < int > { maxNeg , minPos } ; } 
string FixSpaces ( string text ) { StringBuilder res = new StringBuilder ( ) ; int spaceLen = 0 ; for ( int i = 0 ; i <= text . Length ; i ++ ) { if ( i == text . Length || text [ i ] != ' ' ) { if ( spaceLen == 1 ) { res . Append ( '_' ) ; } if ( spaceLen == 2 ) { res . Append ( "__" ) ; } if ( spaceLen > 2 ) { res . Append ( '-' ) ; } spaceLen = 0 ; if ( i != text . Length ) { res . Append ( text [ i ] ) ; } } else { spaceLen += 1 ; } } return res . ToString ( ) ; } 
string FilenameCheck ( string fileName ) { int digitNum = 0 , dotNum = 0 ; if ( fileName . Length < 5 || ! char . IsLetter ( fileName [ 0 ] ) ) { return "No" ; } string suffix = fileName . Substring ( fileName . Length - 4 ) ; if ( suffix != ".txt" && suffix != ".exe" && suffix != ".dll" ) { return "No" ; } foreach ( char c in fileName ) { if ( char . IsDigit ( c ) ) { digitNum += 1 ; } if ( c == '.' ) { dotNum += 1 ; } } if ( digitNum > 3 || dotNum != 1 ) { return "No" ; } return "Yes" ; } 
int SumSquares ( List < int > lst ) { int sum = 0 ; for ( int i = 0 ; i < lst . Count ; i ++ ) { if ( i % 3 == 0 ) { sum += lst [ i ] * lst [ i ] ; } else if ( i % 4 == 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else { sum += lst [ i ] ; } } return sum ; } 
string WordsInSentence ( string sentence ) { StringBuilder result = new StringBuilder ( ) ; StringBuilder current = new StringBuilder ( ) ; for ( int i = 0 ; i <= sentence . Length ; i ++ ) { if ( i == sentence . Length || sentence [ i ] == ' ' ) { bool isPrime = true ; int l = current . Length ; if ( l < 2 ) { isPrime = false ; } for ( int j = 2 ; j < l ; j ++ ) { if ( l % j == 0 ) { isPrime = false ; break ; } } if ( isPrime ) { result . Append ( current . ToString ( ) ) . Append ( ' ' ) ; } current . Clear ( ) ; } else { current . Append ( sentence [ i ] ) ; } } if ( result . Length > 0 ) { result . Remove ( result . Length - 1 , 1 ) ; } return result . ToString ( ) ; } 
bool Simplify ( string x , string n ) { int a = 0 , b = 0 , c = 0 , d = 0 ; for ( int i = 0 ; i < x . Length ; i ++ ) { if ( x [ i ] == '/' ) { a = int . Parse ( x . Substring ( 0 , i ) ) ; b = int . Parse ( x . Substring ( i + 1 ) ) ; } } for ( int i = 0 ; i < n . Length ; i ++ ) { if ( n [ i ] == '/' ) { c = int . Parse ( n . Substring ( 0 , i ) ) ; d = int . Parse ( n . Substring ( i + 1 ) ) ; } } return ( a * c ) % ( b * d ) == 0 ; } 
int SpecialFilter ( List < int > nums ) { int count = 0 ; foreach ( int num in nums ) { if ( num > 10 ) { string w = num . ToString ( ) ; if ( w [ 0 ] % 2 == 1 && w [ ^ 1 ] % 2 == 1 ) { count += 1 ; } } } return count ; } 
int GetMaxTriples ( int n ) { List < int > arr = new List < int > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { arr . Add ( i * i - i + 1 ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { for ( int k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 == 0 ) { count += 1 ; } } } } return count ; } 
int DoubleTheDifference ( List < double > lst ) { int sum = 0 ; foreach ( double d in lst ) { int num = ( int ) Math . Round ( d ) ; if ( d == num ) { if ( num > 0 && num % 2 == 1 ) { sum += num * num ; } } } return sum ; } 
List < int > Compare ( List < int > game , List < int > guess ) { List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < game . Count ; i ++ ) { result . Add ( Math . Abs ( game [ i ] - guess [ i ] ) ) ; } return result ; } 
string StrongestExtension ( string className , List < string > extensions ) { string strongest = "" ; int max = int . MinValue ; foreach ( var extension in extensions ) { int strength = 0 ; foreach ( char chr in extension ) { if ( char . IsUpper ( chr ) ) { strength += 1 ; } if ( char . IsLower ( chr ) ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return className + '.' + strongest ; } 
string IntToMiniRoman ( int number ) { List < int > num = new List < int > { 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 } ; List < string > sym = new List < string > { "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" } ; int pos = 0 ; StringBuilder res = new StringBuilder ( ) ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res . Append ( sym [ pos ] ) ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } return res . ToString ( ) ; } 
List < int > Eat ( int number , int need , int remaining ) { return need > remaining ? new List < int > { number + remaining , 0 } : new List < int > { number + need , remaining - need } ; } 
int DoAlgebra ( List < string > ops , List < int > operands ) { List < int > nums = new List < int > ( operands ) ; List < string > currentOps = new List < string > ( ops ) ; int i = currentOps . Count - 1 ; while ( i >= 0 ) { if ( currentOps [ i ] == "**" ) { nums [ i ] = ( int ) Math . Pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . RemoveAt ( i + 1 ) ; currentOps . RemoveAt ( i ) ; } i -- ; } i = 0 ; while ( i < currentOps . Count ) { if ( currentOps [ i ] == "*" ) { nums [ i ] *= nums [ i + 1 ] ; nums . RemoveAt ( i + 1 ) ; currentOps . RemoveAt ( i ) ; } else if ( currentOps [ i ] == "//" ) { nums [ i ] /= nums [ i + 1 ] ; nums . RemoveAt ( i + 1 ) ; currentOps . RemoveAt ( i ) ; } else { i ++ ; } } i = 0 ; while ( i < currentOps . Count ) { if ( currentOps [ i ] == "+" ) { nums [ i ] += nums [ i + 1 ] ; nums . RemoveAt ( i + 1 ) ; currentOps . RemoveAt ( i ) ; } else if ( currentOps [ i ] == "-" ) { nums [ i ] -= nums [ i + 1 ] ; nums . RemoveAt ( i + 1 ) ; currentOps . RemoveAt ( i ) ; } else { i ++ ; } } return nums [ 0 ] ; } 
List < int > GenerateIntegers ( int a , int b ) { int lower = Math . Max ( 2 , Math . Min ( a , b ) ) ; int upper = Math . Min ( 8 , Math . Max ( a , b ) ) ; List < int > result = new List < int > ( ) ; for ( int i = lower ; i <= upper ; i += 2 ) { result . Add ( i ) ; } return result ; } 
bool IsStepNum ( int n ) { int prevDigit = - 1 ; while ( n > 0 ) { int curDigit = n % 10 ; if ( prevDigit != - 1 ) { if ( Math . Abs ( curDigit - prevDigit ) != 1 ) { return false ; } } n /= 10 ; prevDigit = curDigit ; } return true ; } 
int NumOfWays ( int n , int k ) { int p = 1 ; if ( k % 2 != 0 ) { p = - 1 ; } return ( int ) ( Math . Pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; } 
List < int > FindDivisors ( int n ) { List < int > v = new List < int > ( ) ; for ( int i = 1 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { if ( n / i == i ) { v . Add ( i ) ; } else { v . Add ( i ) ; v . Add ( n / i ) ; } } } return v ; } 
int EggDrop ( int n , int k ) { if ( k == 1 || k == 0 ) { return k ; } if ( n == 1 ) return k ; int min = int . MaxValue ; int x , res ; for ( x = 1 ; x <= k ; x ++ ) { res = Math . Max ( EggDrop ( n - 1 , x - 1 ) , EggDrop ( n , k - x ) ) ; if ( res < min ) min = res ; } return min + 1 ; } 
bool IsPowerOfTwo ( int n ) { if ( n == 0 ) { return false ; } return Math . Ceiling ( Math . Log ( n ) / Math . Log ( 2 ) ) == Math . Floor ( Math . Log ( n ) / Math . Log ( 2 ) ) ; } 
string ShortestPalindrome ( string s ) { int n = s . Length ; List < string > v = new List < string > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { int l = i ; int r = i ; string ans1 = "" ; string ans2 = "" ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans1 += s [ l ] ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s [ l ] == s [ r ] ) { ans2 += s [ l ] ; l -- ; r ++ ; } v . Add ( ans1 ) ; v . Add ( ans2 ) ; } string ans = v [ 0 ] ; for ( int i = 0 ; i < v . Count ; i ++ ) { if ( v [ i ] != "" ) { if ( ans [ 0 ] >= v [ i ] [ 0 ] ) { ans = v [ i ] ; } } } return ans ; } 
int MinimumAdjacentDifference ( List < int > a , int n , int k ) { int minDiff = int . MaxValue ; for ( int i = 0 ; i <= k ; i ++ ) { int maxDiff = int . MinValue ; for ( int j = 0 ; j < n - k - 1 ; j ++ ) { for ( int p = i ; p <= i + j ; p ++ ) { maxDiff = Math . Max ( maxDiff , a [ p + 1 ] - a [ p ] ) ; } } minDiff = Math . Min ( minDiff , maxDiff ) ; } return minDiff ; } 
int Cal ( List < int > arr , int mid ) { int chocolate = 0 ; foreach ( var i in arr ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; } 
bool Check ( int v , List < int > a , int m ) { int tec = 0 , ans = 0 ; List < int > b = new List < int > ( Enumerable . Repeat ( 0 , a . Count + 3 ) ) ; for ( int i = 0 ; i < a . Count ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { int mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; } 
int largestNum ( List < int > arr ) { int res = 0 ; arr . Sort ( ) ; int l = 0 , r = arr . Count - 1 ; while ( l < r ) { int sum = arr [ l ] + arr [ r ] ; if ( sum == 0 ) { res = Math . Max ( res , Math . Max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) { l ++ ; } else { r -- ; } } return res ; } 
int BinarySearch ( List < int > p , int n ) { int i = 0 ; int j = p . Count - 1 ; int index = - 1 ; while ( i <= j ) { int mid = i + ( j - i ) / 2 ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; } 
int FindMinLength ( List < int > arr ) { int index = arr . Count - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; } 
int MinDigits ( int n , int k ) { int digitsNum = ( int ) Math . Floor ( Math . Log ( n ) + 1 ) ; int tempSum = 0 ; int temp = digitsNum ; int result = 0 ; int x , v ; int sum = 0 ; int num2 = n ; while ( num2 != 0 ) { sum += num2 % 10 ; num2 /= 10 ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = n / ( int ) Math . Pow ( 10 , temp - 1 ) ; tempSum += v % 10 ; if ( tempSum >= k ) { v /= 10 ; v ++ ; result = v * ( int ) Math . Pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; } return - 1 ; } 
int CheckForPerfectSquare ( List < int > arr , int i , int j ) { int mid , sum = 0 ; for ( int m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } int low = 0 , high = sum / 2 ; while ( low <= high ) { mid = low + ( high - low ) / 2 ; if ( mid * mid == sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; } 
int MinFlips ( List < List < int > > mat , String s ) { int n = mat . Count ; int m = mat [ 0 ] . Count ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] != s [ i + j ] - '0' ) { count ++ ; } } } return count ; } 
List < List < int > > ConstructTree ( int n , List < List < int > > edges ) { List < List < int > > adjl = new List < List < int > > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { adjl . Add ( new List < int > ( ) ) ; } foreach ( var e in edges ) { int u = e [ 0 ] ; int v = e [ 1 ] ; adjl [ u ] . Add ( v ) ; adjl [ v ] . Add ( u ) ; } return adjl ; } 
int FindSumOfValues ( int v , List < int > parent , List < int > valuesChildren ) { int curNode = v ; int sum = 0 ; while ( curNode != - 1 ) { sum += valuesChildren [ curNode ] ; curNode = parent [ curNode ] ; } return sum ; } 
int GetDistinct ( int d , int count ) { int num = 0 ; count = ( int ) Math . Pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count /= 10 ; } return num ; } 
bool IsIncreasing ( List < int > arr ) { for ( int i = 0 ; i < arr . Count - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; } 
int MinAdjSwaps ( List < List < int > > mat ) { int n = mat . Count ; List < int > cntZero = new List < int > ( Enumerable . Repeat ( 0 , n ) ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = n - 1 ; j >= 0 && mat [ i ] [ j ] == 0 ; j -- ) { cntZero [ i ] ++ ; } } int cntSwaps = 0 ; for ( int i = 0 ; i < n ; i ++ ) { if ( cntZero [ i ] < ( n - i - 1 ) ) { int first = i ; while ( first < n && cntZero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first == n ) { return - 1 ; } while ( first > i ) { ( cntZero [ first ] , cntZero [ first - 1 ] ) = ( cntZero [ first - 1 ] , cntZero [ first ] ) ; first -- ; cntSwaps ++ ; } } } return cntSwaps ; } 
int Solve ( List < int > values , List < int > salary , int mod ) { int ret = 1 ; int amt = 0 ; values . Sort ( ) ; salary . Sort ( ) ; while ( salary . Count > 0 ) { while ( values . Count > 0 && values [ values . Count - 1 ] >= salary [ salary . Count - 1 ] ) { amt ++ ; values . RemoveAt ( values . Count - 1 ) ; } if ( amt == 0 ) return 0 ; ret *= amt -- ; ret %= mod ; salary . RemoveAt ( salary . Count - 1 ) ; } return ret ; } 
List < int > OrganizeInOrder ( List < int > vec , List < char > op , int n ) { List < int > result = new List < int > ( Enumerable . Repeat ( 0 , n ) ) ; vec . Sort ( ) ; int i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] == '<' ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; } 
int CountPoints ( int n , int m , List < int > a , List < int > b , int x , int y ) { a . Sort ( ) ; b . Sort ( ) ; int j = 0 ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) break ; if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; } 
bool AreSame ( List < int > a , List < int > b ) { a . Sort ( ) ; b . Sort ( ) ; return a . SequenceEqual ( b ) ; } 
int CountNumberOfStrings ( String s ) { int n = s . Length - 1 ; int count = ( int ) Math . Pow ( 2 , n ) ; return count ; } 
List < int > PrimePower ( int x ) { List < int > primePow = new List < int > ( ) ; for ( int i = 2 ; i * i <= x ; i ++ ) { if ( x % i == 0 ) { int p = 1 ; while ( x % i == 0 ) { x /= i ; p *= i ; } primePow . Add ( p ) ; } } if ( x > 1 ) { primePow . Add ( x ) ; } return primePow ; } 
bool IsPerfect ( int n0 ) { double n = Math . Sqrt ( n0 ) ; if ( Math . Floor ( n ) != Math . Ceiling ( n ) ) { return false ; } return true ; } 
int FindSum ( int l , int r ) { List < int > arr = new List < int > ( ) ; int i = 0 ; int x = 2 ; while ( i <= r ) { arr . Add ( i + x ) ; if ( i + 1 <= r ) arr . Add ( i + 1 + x ) ; x *= - 1 ; i += 2 ; } int sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr [ i ] ; } return sum ; } 
int Results ( int n , int k ) { return ( int ) Math . Round ( Math . Pow ( n , 1.0 / Math . Pow ( 2.0 , k ) ) ) ; } 
List < int > Factors ( int n ) { List < int > v = new List < int > ( ) ; v . Add ( 1 ) ; for ( int i = 2 ; i <= Math . Sqrt ( n ) ; i ++ ) { if ( n % i == 0 ) { v . Add ( i ) ; if ( n / i != i ) { v . Add ( n / i ) ; } } } return v ; } 
int SmallestNum ( int n ) { double x = Math . Pow ( 10 , ( n - 1 ) / 2.0 ) ; return ( int ) Math . Ceiling ( x ) ; } 
int Smallest ( string s ) { List < int > a = new List < int > ( Enumerable . Repeat ( 0 , s . Length ) ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { a [ i ] = s [ i ] - '0' ; } List < int > b = new List < int > ( ) ; for ( int i = 0 ; i < a . Count ; i ++ ) { if ( a [ i ] % 2 != 0 ) { b . Add ( a [ i ] ) ; } } b . Sort ( ) ; if ( b . Count > 1 ) { return b [ 0 ] * 10 + b [ 1 ] ; } return - 1 ; } 
List < double > Diagonals ( double a , double b , double c , double d ) { List < double > ans = new List < double > ( ) ; ans . Add ( Math . Sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . Add ( Math . Sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; } 
int FindNumberOfDigits ( int n , int bas ) { int dig = ( int ) Math . Floor ( Math . Log ( n ) / Math . Log ( bas ) ) + 1 ; return dig ; } 
double NGon ( int n ) { double proAngleVar ; if ( n % 4 == 0 ) { proAngleVar = Math . PI * ( 180.0 / n ) / 180 ; } else { proAngleVar = Math . PI * ( 180.0 / ( 2 * n ) ) / 180 ; } double negX = 1.0e+99 , posX = - 1.0e+99 , negY = 1.0e+99 , posY = - 1.0e+99 ; for ( int j = 0 ; j < n ; ++ j ) { double px = Math . Cos ( 2 * Math . PI * j / n + proAngleVar ) ; double py = Math . Sin ( 2 * Math . PI * j / n + proAngleVar ) ; negX = Math . Min ( negX , px ) ; posX = Math . Max ( posX , px ) ; negY = Math . Min ( negY , py ) ; posY = Math . Max ( posY , py ) ; } double opt2 = Math . Max ( posX - negX , posY - negY ) ; return opt2 / Math . Sin ( Math . PI / n ) / 2 ; } 
int FindMaxK ( int n ) { int p = ( int ) ( Math . Log ( n ) / Math . Log ( 2 ) ) ; return ( int ) Math . Pow ( 2 , p ) ; } 
int NthFibo ( int n ) { double a = ( Math . Pow ( 5 , 0.5 ) + 1 ) / 2 ; double b = ( - 1 * Math . Pow ( 5 , 0.5 ) + 1 ) / 2 ; double r = Math . Pow ( 5 , 0.5 ) ; double ans = ( Math . Pow ( a , n ) - Math . Pow ( b , n ) ) / r ; return ( int ) ans ; } 
double FindProb ( int l , int r ) { double countOfPs = Math . Floor ( Math . Sqrt ( r ) ) - Math . Ceiling ( Math . Sqrt ( l ) ) + 1 ; double total = r - l + 1 ; double prob = countOfPs / total ; return prob ; } 
int PreviousFibonacci ( int n ) { double a = n / ( ( 1 + Math . Sqrt ( 5 ) ) / 2.0 ) ; return ( int ) Math . Round ( a ) ; } 
List < int > DistPrime ( List < int > arr , List < int > allPrimes ) { List < int > list1 = new List < int > ( ) ; foreach ( int i in allPrimes ) { foreach ( int j in arr ) { if ( j % i == 0 ) { list1 . Add ( i ) ; break ; } } } return list1 ; } 
List < int > GetArray ( int n ) { List < int > ans = new List < int > ( ) ; int p2 = 1 ; while ( n > 0 ) { if ( n % 2 == 1 ) { ans . Add ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; } 
int MaximumLength ( List < int > a ) { List < int > counts = new List < int > ( Enumerable . Repeat ( 0 , 11 ) ) ; int ans = 0 ; for ( int index = 0 ; index < a . Count ; index ++ ) { counts [ a [ index ] ] += 1 ; List < int > k = new List < int > ( ) ; foreach ( int i in counts ) { if ( i != 0 ) { k . Add ( i ) ; } } k . Sort ( ) ; if ( k . Count == 1 || ( k [ 0 ] == k [ k . Count - 2 ] && k [ k . Count - 1 ] - k [ k . Count - 2 ] == 1 ) || ( k [ 0 ] == 1 && k [ 1 ] == k [ k . Count - 1 ] ) ) { ans = index ; } } return ans + 1 ; } 
int MaxEdges ( double n ) { double edges = Math . Floor ( n * n / 4 ) ; return ( int ) edges ; } 
int FindK ( int n , int k ) { List < int > a = new List < int > ( ) ; for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 1 ) { a . Add ( i ) ; } } for ( int i = 1 ; i < n ; i ++ ) { if ( i % 2 == 0 ) { a . Add ( i ) ; } } return a [ k - 1 ] ; } 
bool IsKeith ( int x , int temp ) { List < int > terms = new List < int > ( ) ; int n = 0 ; while ( temp > 0 ) { terms . Add ( temp % 10 ) ; temp = temp / 10 ; n ++ ; } terms . Reverse ( ) ; int nextTerm = 0 , i = n ; while ( nextTerm < x ) { nextTerm = 0 ; for ( int j = 1 ; j <= n ; j ++ ) { nextTerm += terms [ i - j ] ; } terms . Add ( nextTerm ) ; i ++ ; } return nextTerm == x ; } 
bool Factors ( int n , int k ) { List < int > v = new List < int > ( ) ; while ( n % 2 == 0 ) { v . Add ( 2 ) ; n /= 2 ; } if ( v . Count >= k ) { return true ; } for ( int i = 3 ; i * i <= n ; i += 2 ) { while ( n % i == 0 ) { n = n / i ; v . Add ( i ) ; } if ( v . Count >= k ) { return true ; } } if ( n > 2 ) { v . Add ( n ) ; } if ( v . Count >= k ) { return true ; } return false ; } 
