function hasCloseElements ( numbers , threshold ) { for ( let i = 0 ; i < numbers . length ; i ++ ) { for ( let j = i + 1 ; j < numbers . length ; j ++ ) { let distance = Math . abs ( numbers [ i ] - numbers [ j ] ) ; if ( distance < threshold ) { return true ; } } } return false ; } 
function truncateNumber ( number ) { return number % 1 ; } 
function belowZero ( operations ) { let balance = 0 ; for ( let op of operations ) { balance += op ; if ( balance < 0 ) { return true ; } } return false ; } 
function meanAbsoluteDeviation ( numbers ) { let sumNum = 0 ; for ( let num of numbers ) { sumNum += num ; } let mean = sumNum / numbers . length ; let sumAbsDiff = 0 ; for ( let num of numbers ) { sumAbsDiff += Math . abs ( num - mean ) ; } return sumAbsDiff / numbers . length ; } 
function intersperse ( numbers , delimiter ) { let result = [ ] ; if ( ! numbers . length ) { return result ; } for ( let i = 0 ; i < numbers . length - 1 ; i ++ ) { result . push ( numbers [ i ] , delimiter ) ; } result . push ( numbers [ numbers . length - 1 ] ) ; return result ; } 
function sumProduct ( numbers ) { let sumValue = 0 ; let prodValue = 1 ; for ( let n of numbers ) { sumValue += n ; prodValue *= n ; } return [ sumValue , prodValue ] ; } 
function allPrefixes ( string ) { let result = [ ] ; for ( let i = 1 ; i <= string . length ; i ++ ) { result . push ( string . slice ( 0 , i ) ) ; } return result ; } 
function parseMusic ( musicString ) { let current = [ ] ; let result = [ ] ; for ( let i = 0 ; i <= musicString . length ; i ++ ) { if ( i === musicString . length || musicString [ i ] === " " ) { if ( current . join ( "" ) === "o" ) { result . push ( 4 ) ; } if ( current . join ( "" ) === "o|" ) { result . push ( 2 ) ; } if ( current . join ( "" ) === ".|" ) { result . push ( 1 ) ; } current . length = 0 ; } else { current . push ( musicString [ i ] ) ; } } return result ; } 
function strlen ( s ) { return s . length ; } 
function factorize ( n ) { let factors = [ ] ; for ( let i = 2 ; i <= n ; i ++ ) { if ( n % i === 0 ) { n /= i ; factors . push ( i ) ; i -- ; } } return factors ; } 
function concatenate ( strings ) { let result = [ ] ; for ( let s of strings ) { result . push ( s ) ; } return result . join ( "" ) ; } 
function getPositive ( l ) { let result = [ ] ; for ( let i = 0 ; i < l . length ; i ++ ) { if ( l [ i ] > 0 ) { result . push ( l [ i ] ) ; } } return result ; } 
function sortEven ( l ) { let evens = [ ] ; for ( let i = 0 ; i < l . length ; i += 2 ) { evens . push ( l [ i ] ) ; } evens . sort ( ( a , b ) => a - b ) ; let result = [ ] ; for ( let i = 0 ; i < l . length ; i ++ ) { if ( i % 2 === 0 ) { result . push ( evens [ i / 2 ] ) ; } if ( i % 2 === 1 ) { result . push ( l [ i ] ) ; } } return result ; } 
function decodeCyclic ( s ) { let output = [ ] ; let i = 0 ; while ( i <= s . length - 3 ) { let x = s [ i + 2 ] + s . slice ( i , i + 2 ) ; output . push ( x ) ; i += 3 ; } return output . join ( "" ) + s . slice ( i ) ; } 
function carRaceCollision ( n ) { return Math . pow ( n , 2 ) ; } 
function incrList ( l ) { let result = [ ] ; for ( let i of l ) { result . push ( i + 1 ) ; } return result ; } 
function pairsSumToZero ( l ) { for ( let i = 0 ; i < l . length ; i ++ ) { for ( let j = i + 1 ; j < l . length ; j ++ ) { if ( l [ i ] + l [ j ] === 0 ) { return true ; } } } return false ; } 
function changeBase ( x , b ) { let ret = [ ] ; while ( x > 0 ) { ret . unshift ( ( x % b ) . toString ( ) ) ; x = Math . trunc ( x / b ) ; } return ret . join ( "" ) ; } 
function median ( l ) { l . sort ( ( a , b ) => a - b ) ; if ( l . length % 2 === 1 ) { return l [ Math . trunc ( l . length / 2 ) ] ; } else { return ( l [ l . length / 2 - 1 ] + l [ l . length / 2 ] ) / 2.0 ; } } 
function decodeShift ( s ) { let result = [ ] ; for ( let ch of s ) { let w = ( ch . charCodeAt ( 0 ) + 21 - "a" . charCodeAt ( 0 ) ) % 26 + "a" . charCodeAt ( 0 ) ; result . push ( String . fromCharCode ( w ) ) ; } return result . join ( "" ) ; } 
function belowThreshold ( l , t ) { for ( let n of l ) { if ( n >= t ) { return false ; } } return true ; } 
function correctBracketing ( brackets ) { var depth = 0 ; for ( let b of brackets ) { if ( b === "<" ) { depth += 1 ; } else { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth === 0 ; } 
function monotonic ( l ) { let incr = 0 ; let decr = 0 ; for ( let i = 1 ; i < l . length ; i ++ ) { if ( l [ i ] > l [ i - 1 ] ) { incr = 1 ; } if ( l [ i ] < l [ i - 1 ] ) { decr = 1 ; } } return incr + decr !== 2 ; } 
function derivative ( xs ) { let result = [ ] ; for ( let i = 1 ; i < xs . length ; i ++ ) { result . push ( i * xs [ i ] ) ; } return result ; } 
function vowelsCount ( s ) { let vowels = "aeiouAEIOU" ; let count = 0 ; for ( let ch of s ) { if ( vowels . includes ( ch ) ) { count += 1 ; } } if ( s [ s . length - 1 ] === "y" || s [ s . length - 1 ] === "Y" ) { count += 1 ; } return count ; } 
function digitSum ( s ) { let sum = 0 ; for ( let c of s ) { if ( c . toUpperCase ( ) === c && c . toLowerCase ( ) !== c ) { sum += c . charCodeAt ( 0 ) ; } } return sum ; } 
function fruitDistribution ( s , n ) { let num1 = [ ] ; let num2 = [ ] ; let flag = false ; for ( let i = 0 ; i < s . length ; i ++ ) { if ( "0" <= s [ i ] && s [ i ] <= "9" ) { if ( ! flag ) { num1 . push ( s [ i ] ) ; } if ( flag ) { num2 . push ( s [ i ] ) ; } } else if ( ! flag && num1 . length > 0 ) { flag = true ; } } return n - parseInt ( num1 . join ( "" ) ) - parseInt ( num2 . join ( "" ) ) ; } 
function pluck ( arr ) { let result = [ ] ; for ( let i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] % 2 === 0 ) { if ( ! result . length ) { result . push ( arr [ i ] ) ; result . push ( i ) ; } else if ( arr [ i ] < result [ 0 ] ) { result [ 0 ] = arr [ i ] ; result [ 1 ] = i ; } } } return result ; } 
function strangeSortList ( lst ) { let res = [ ] ; lst . sort ( ( a , b ) => a - b ) ; let l = 0 ; let r = lst . length - 1 ; while ( l < r ) { res . push ( lst [ l ] ) ; l += 1 ; res . push ( lst [ r ] ) ; r -= 1 ; } if ( l === r ) { res . push ( lst [ l ] ) ; } return res ; } 
function triangleArea ( a , b , c ) { if ( a + b <= c || a + c <= b || b + c <= a ) { return - 1 ; } let s = ( a + b + c ) / 2 ; let area = Math . sqrt ( s * ( s - a ) * ( s - b ) * ( s - c ) ) ; return area ; } 
function willItFly ( q , w ) { let sum = 0 ; for ( let i = 0 ; i < q . length ; i ++ ) { if ( q [ i ] !== q [ q . length - 1 - i ] ) { return false ; } sum += q [ i ] ; } return sum <= w ; } 
function isCube ( a ) { a = Math . abs ( a ) ; let i = Math . round ( Math . pow ( a , 1.0 / 3 ) ) ; return Math . pow ( i , 3 ) === a ; } 
function hexKey ( num ) { let key = "2357BD" ; let total = 0 ; for ( let c of num ) { if ( key . includes ( c ) ) { total += 1 ; } } return total ; } 
function decimalToBinary ( dec ) { let ans = [ ] ; if ( dec !== 0 ) { while ( dec > 0 ) { ans . unshift ( ( dec % 2 ) . toString ( ) ) ; dec = Math . trunc ( dec / 2 ) ; } } else { ans . push ( "0" ) ; } return "db" + ans . join ( "" ) + "db" ; } 
function primeLength ( s ) { let len = s . length ; if ( len < 2 ) { return false ; } for ( let i = 2 ; i < len ; i ++ ) { if ( len % i === 0 ) { return false ; } } return true ; } 
function startsOneEnds ( n ) { if ( n < 1 ) { return 0 ; } if ( n === 1 ) { return 1 ; } return 18 * Math . pow ( 10 , n - 2 ) ; } 
function add ( lst ) { let sum = 0 ; for ( let i = 1 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 === 0 ) { sum += lst [ i ] ; } } return sum ; } 
function getRow ( lst , x ) { let coords = [ ] ; for ( let i = 0 ; i < lst . length ; i ++ ) { for ( let j = lst [ i ] . length - 1 ; j >= 0 ; j -- ) { if ( lst [ i ] [ j ] === x ) { coords . push ( [ i , j ] ) ; } } } return coords ; } 
function nextSmallest ( lst ) { lst . sort ( ( a , b ) => a - b ) ; for ( let i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] !== lst [ i - 1 ] ) { return lst [ i ] ; } } return - 1 ; } 
function anyInt ( a , b , c ) { if ( Math . round ( a ) !== a || Math . round ( b ) !== b || Math . round ( c ) !== c ) { return false ; } return a + b === c || a + c === b || b + c === a ; } 
function countUpTo ( n ) { let primes = [ ] ; for ( let i = 2 ; i < n ; i ++ ) { let p = 1 ; for ( let j = 2 ; j < i ; j ++ ) { if ( i % j === 0 ) { p = 0 ; break ; } } if ( p === 1 ) { primes . push ( i ) ; } } return primes ; } 
function closestInteger ( value ) { let w = parseFloat ( value ) ; return Math . round ( w ) ; } 
function makeAPile ( n ) { let reuslt = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { reuslt . push ( n + 2 * i ) ; } return reuslt ; } 
function wordsString ( s ) { let current = [ ] ; let words = [ ] ; for ( let i = 0 ; i <= s . length ; i ++ ) { if ( i === s . length || s [ i ] === " " || s [ i ] === "," ) { if ( current . length > 0 ) { words . push ( current . join ( "" ) ) ; current . length = 0 ; } } else { current . push ( s [ i ] ) ; } } return words ; } 
function roundedAvg ( n , m ) { if ( n > m ) { return - 1 ; } let num = Math . trunc ( ( n + m ) / 2 ) ; let ret = [ ] ; while ( num > 0 ) { ret . unshift ( ( num % 2 ) . toString ( ) ) ; num = Math . trunc ( num / 2 ) ; } return ret . join ( "" ) ; } 
function uniqueDigits ( x ) { let digits = [ ] ; for ( let n of x ) { let isUnique = true ; for ( let c of n . toString ( ) ) { if ( c . charCodeAt ( 0 ) % 2 == 0 ) { isUnique = false ; break ; } } if ( isUnique ) { digits . push ( n ) ; } } digits . sort ( ( a , b ) => a - b ) ; return digits ; } 
function countNums ( arr ) { let num = 0 ; for ( let n of arr ) { let neg = n < 0 ? - 1 : 1 ; n = Math . abs ( n ) ; let digits = [ ] ; for ( let c of n . toString ( ) ) { digits . push ( c . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ) ; } digits [ 0 ] *= neg ; let sum = 0 ; for ( let d of digits ) { sum += d ; } if ( sum > 0 ) { num += 1 ; } } return num ; } 
function moveOneBall ( arr ) { if ( ! arr . length ) { return true ; } let num = 0 ; for ( let i = 1 ; i < arr . length ; i ++ ) { if ( arr [ i ] < arr [ i - 1 ] ) { num += 1 ; } } if ( arr [ arr . length - 1 ] > arr [ 0 ] ) { num += 1 ; } if ( num < 2 ) { return true ; } return false ; } 
function exchange ( lst1 , lst2 ) { let odd = 0 ; let even = 0 ; for ( let n of lst1 ) { if ( n % 2 === 1 ) { odd ++ ; } } for ( let n of lst2 ) { if ( n % 2 === 0 ) { even ++ ; } } if ( even >= odd ) { return "YES" ; } return "NO" ; } 
function oddCount ( lst ) { let results = [ ] ; let originalStr = "the number of odd elements in the string i of the input." ; for ( let s of lst ) { let sum = 0 ; for ( let d of s ) { if ( "0" <= d && d <= "9" && d % 2 === 1 ) { sum += 1 ; } } let result = [ ] ; for ( let c of originalStr ) { if ( c === "i" ) { result . push ( sum . toString ( ) ) ; } else { result . push ( c ) ; } } results . push ( result . join ( "" ) ) ; } return results ; } 
function minSubArraySum ( nums ) { let minSum = Number . MAX_VALUE ; let sum = 0 ; for ( let num of nums ) { sum += num ; if ( minSum > sum ) { minSum = sum ; } if ( sum > 0 ) { sum = 0 ; } } return minSum ; } 
function maxFill ( grid , capacity ) { let res = 0 ; for ( let well of grid ) { let sum = 0 ; for ( let n of well ) { sum += n ; } if ( sum > 0 ) { res += Math . trunc ( ( sum - 1 ) / capacity ) + 1 ; } } return res ; } 
function selectWords ( s , n ) { let vowels = "aeiouAEIOU" ; let current = [ ] ; let result = [ ] ; let consonantNum = 0 ; for ( let i = 0 ; i <= s . length ; i ++ ) { if ( i === s . length || s [ i ] === " " ) { if ( consonantNum === n ) { result . push ( current . join ( "" ) ) ; } current . length = 0 ; consonantNum = 0 ; } else { current . push ( s [ i ] ) ; if ( ! vowels . includes ( s [ i ] ) ) { consonantNum += 1 ; } } } return result ; } 
function solution ( lst ) { let sum = 0 ; for ( let i = 0 ; i < lst . length ; i += 2 ) { if ( lst [ i ] % 2 === 1 ) { sum += lst [ i ] ; } } return sum ; } 
function addElements ( arr , k ) { let sum = 0 ; for ( let i = 0 ; i < k ; i ++ ) { if ( arr [ i ] >= - 99 && arr [ i ] <= 99 ) { sum += arr [ i ] ; } } return sum ; } 
function getOddCollatz ( n ) { let oddCollatz = [ ] ; while ( n !== 1 ) { if ( n % 2 === 1 ) { oddCollatz . push ( n ) ; n = n * 3 + 1 ; } else { n /= 2 ; } } oddCollatz . push ( 1 ) ; oddCollatz . sort ( ( a , b ) => a - b ) ; return oddCollatz ; } 
function isSorted ( lst ) { for ( let i = 1 ; i < lst . length ; i ++ ) { if ( lst [ i ] < lst [ i - 1 ] ) { return false ; } if ( i >= 2 && lst [ i ] === lst [ i - 1 ] && lst [ i ] === lst [ i - 2 ] ) { return false ; } } return true ; } 
function intersection ( interval1 , interval2 ) { let inter1 = Math . max ( interval1 [ 0 ] , interval2 [ 0 ] ) ; let inter2 = Math . min ( interval1 [ 1 ] , interval2 [ 1 ] ) ; let l = inter2 - inter1 ; if ( l < 2 ) { return "NO" ; } for ( let i = 2 ; i < l ; i ++ ) { if ( l % i === 0 ) { return "NO" ; } } return "YES" ; } 
function prodSigns ( arr ) { if ( ! arr . length ) { return - 32768 ; } let sum = 0 ; let prods = 1 ; for ( let i of arr ) { sum += Math . abs ( i ) ; if ( i === 0 ) { prods = 0 ; } if ( i < 0 ) { prods = - prods ; } } return sum * prods ; } 
function minPath ( grid , k ) { let n = grid . length ; let minNum = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < n ; j ++ ) { if ( grid [ i ] [ j ] === 1 ) { let tmp = [ ] ; if ( i !== 0 ) { tmp . push ( grid [ i - 1 ] [ j ] ) ; } if ( j !== 0 ) { tmp . push ( grid [ i ] [ j - 1 ] ) ; } if ( i !== n - 1 ) { tmp . push ( grid [ i + 1 ] [ j ] ) ; } if ( j !== n - 1 ) { tmp . push ( grid [ i ] [ j + 1 ] ) ; } minNum = Math . min ( ... tmp ) ; } } } let ans = [ ] ; for ( let i = 0 ; i < k ; i ++ ) { if ( i % 2 === 0 ) { ans . push ( 1 ) ; } else { ans . push ( minNum ) ; } } return ans ; } 
function digits ( n ) { let prod = 0 ; for ( let digit of n . toString ( ) ) { if ( digit . charCodeAt ( 0 ) % 2 === 1 ) { if ( prod === 0 ) { prod = 1 ; } prod *= digit . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ; } } return prod ; } 
function isNested ( s ) { let count = 0 ; let maxCount = 0 ; for ( let ch of s ) { if ( ch === "[" ) { count += 1 ; } if ( ch === "]" ) { count -= 1 ; } if ( count < 0 ) { count = 0 ; } if ( count > maxCount ) { maxCount = count ; } if ( count <= maxCount - 2 ) { return true ; } } return false ; } 
function sumSquares ( lst ) { let sum = 0 ; for ( let i of lst ) { sum += Math . ceil ( i ) * Math . ceil ( i ) ; } return sum ; } 
function canArrange ( arr ) { let index = - 1 ; for ( let i = 0 ; i < arr . length ; i ++ ) { if ( arr [ i ] <= i ) { index = i ; } } return index ; } 
function largestSmallestIntegers ( lst ) { let maxNeg = 0 , minPos = 0 ; for ( let n of lst ) { if ( n < 0 && ( maxNeg === 0 || n > maxNeg ) ) { maxNeg = n ; } if ( n > 0 && ( minPos === 0 || n < minPos ) ) { minPos = n ; } } return [ maxNeg , minPos ] ; } 
function fixSpaces ( text ) { let res = [ ] ; let spaceLen = 0 ; for ( let i = 0 ; i <= text . length ; i ++ ) { if ( i === text . length || text [ i ] !== " " ) { if ( spaceLen === 1 ) { res . push ( "_" ) ; } if ( spaceLen === 2 ) { res . push ( "__" ) ; } if ( spaceLen > 2 ) { res . push ( "-" ) ; } spaceLen = 0 ; if ( i !== text . length ) { res . push ( text [ i ] ) ; } } else { spaceLen += 1 ; } } return res . join ( "" ) ; } 
function fileNameCheck ( fileName ) { let digitNum = 0 , dotNum = 0 ; if ( fileName . length < 5 || fileName [ 0 ] . toUpperCase ( ) === fileName [ 0 ] . toLowerCase ( ) ) { return "No" ; } let suffix = fileName . slice ( - 4 ) ; if ( suffix !== ".txt" && suffix !== ".exe" && suffix !== ".dll" ) { return "No" ; } for ( let c of fileName ) { if ( "0" <= c && c <= "9" ) { digitNum += 1 ; } if ( c === "." ) { dotNum += 1 ; } } if ( digitNum > 3 || dotNum !== 1 ) { return "No" ; } return "Yes" ; } 
function sumSquares ( lst ) { let sum = 0 ; for ( let i = 0 ; i < lst . length ; i ++ ) { if ( i % 3 === 0 ) { sum += lst [ i ] * lst [ i ] ; } else if ( i % 4 === 0 ) { sum += lst [ i ] * lst [ i ] * lst [ i ] ; } else { sum += lst [ i ] ; } } return sum ; } 
function wordsInSentence ( sentence ) { let result = [ ] ; let current = [ ] ; for ( let i = 0 ; i <= sentence . length ; i ++ ) { if ( i === sentence . length || sentence [ i ] === " " ) { let isPrime = true ; let l = current . length ; if ( l < 2 ) { isPrime = false ; } for ( let j = 2 ; j < l ; j ++ ) { if ( l % j === 0 ) { isPrime = false ; break ; } } if ( isPrime ) { result . push ( current . join ( "" ) + " " ) ; } current . length = 0 ; } else { current . push ( sentence [ i ] ) ; } } result = result . join ( "" ) ; if ( result . length > 0 ) { result = result . slice ( 0 , - 1 ) ; } return result ; } 
function simplify ( x , n ) { let a = 0 , b = 0 , c = 0 , d = 0 ; for ( let i = 0 ; i < x . length ; i ++ ) { if ( x [ i ] === "/" ) { a = parseInt ( x . slice ( 0 , i ) ) ; b = parseInt ( x . slice ( i + 1 ) ) ; } } for ( let i = 0 ; i < n . length ; i ++ ) { if ( n [ i ] === "/" ) { c = parseInt ( n . slice ( 0 , i ) ) ; d = parseInt ( n . slice ( i + 1 ) ) ; } } return ( a * c ) % ( b * d ) === 0 ; } 
function specialFilter ( nums ) { let count = 0 ; for ( let num of nums ) { if ( num > 10 ) { let w = num . toString ( ) ; if ( w [ 0 ] . charCodeAt ( 0 ) % 2 === 1 && w [ w . length - 1 ] . charCodeAt ( 0 ) % 2 === 1 ) { count += 1 ; } } } return count ; } 
function getMaxTriples ( n ) { let arr = [ ] ; for ( let i = 1 ; i <= n ; i ++ ) { arr . push ( i * i - i + 1 ) ; } let count = 0 ; for ( let i = 0 ; i < n - 2 ; i ++ ) { for ( let j = i + 1 ; j < n ; j ++ ) { for ( let k = j + 1 ; k < n ; k ++ ) { if ( ( arr [ i ] + arr [ j ] + arr [ k ] ) % 3 === 0 ) { count += 1 ; } } } } return count ; } 
function doubleTheDifference ( lst ) { let sum = 0 ; for ( let d of lst ) { let num = Math . round ( d ) ; if ( d === num ) { if ( num > 0 && num % 2 === 1 ) { sum += num * num ; } } } return sum ; } 
function compare ( game , guess ) { let result = [ ] ; for ( let i = 0 ; i < game . length ; i ++ ) { result . push ( Math . abs ( game [ i ] - guess [ i ] ) ) ; } return result ; } 
function strongestExtension ( className , extensions ) { let strongest = "" ; let max = - Number . MAX_VALUE  ; for ( let extension of extensions ) { let strength = 0 ; for ( let chr of extension ) { if ( chr . toUpperCase ( ) === chr && chr . toLowerCase ( ) !== chr ) { strength += 1 ; } if ( chr . toUpperCase ( ) !== chr && chr . toLowerCase ( ) === chr ) { strength -= 1 ; } } if ( strength > max ) { max = strength ; strongest = extension ; } } return className + "." + strongest ; } 
function intToMiniRoman ( number ) { let num = [ 1000 , 900 , 500 , 400 , 100 , 90 , 50 , 40 , 10 , 9 , 5 , 4 , 1 ] ; let sym = [ "m" , "cm" , "d" , "cd" , "c" , "xc" , "l" , "xl" , "x" , "ix" , "v" , "iv" , "i" ] ; let pos = 0 ; let res = [ ] ; while ( number > 0 ) { while ( number >= num [ pos ] ) { res . push ( sym [ pos ] ) ; number -= num [ pos ] ; } if ( number > 0 ) { pos += 1 ; } } return res . join ( "" ) ; } 
function eat ( number , need , remaining ) { return need > remaining ? [ number + remaining , 0 ] : [ number + need , remaining - need ] ; } 
function doAlgebra ( ops , operands ) { let nums = [ ... operands ] ; let currentOps = [ ... ops ] ; let i = currentOps . length - 1 ; while ( i >= 0 ) { if ( currentOps [ i ] === "**" ) { nums [ i ] = Math . pow ( nums [ i ] , nums [ i + 1 ] ) ; nums . splice ( i + 1 , 1 ) ; currentOps . splice ( i , 1 ) ; } i -- ; } i = 0 ; while ( i < currentOps . length ) { if ( currentOps [ i ] === "*" ) { nums [ i ] *= nums [ i + 1 ] ; nums . splice ( i + 1 , 1 ) ; currentOps . splice ( i , 1 ) ; } else if ( currentOps [ i ] === "//" ) { nums [ i ] = Math . trunc ( nums [ i ] / nums [ i + 1 ] ) ; nums . splice ( i + 1 , 1 ) ; currentOps . splice ( i , 1 ) ; } else { i ++ ; } } i = 0 ; while ( i < currentOps . length ) { if ( currentOps [ i ] === "+" ) { nums [ i ] += nums [ i + 1 ] ; nums . splice ( i + 1 , 1 ) ; currentOps . splice ( i , 1 ) ; } else if ( currentOps [ i ] === "-" ) { nums [ i ] -= nums [ i + 1 ] ; nums . splice ( i + 1 , 1 ) ; currentOps . splice ( i , 1 ) ; } else { i ++ ; } } return nums [ 0 ] ; }
function generateIntegers ( a , b ) { let lower = Math . max ( 2 , Math . min ( a , b ) ) ; let upper = Math . min ( 8 , Math . max ( a , b ) ) ; let result = [ ] ; for ( let i = lower ; i <= upper ; i += 2 ) { result . push ( i ) ; } return result ; } 
function isStepNum ( n ) { let prevDigit = - 1 ; while ( n > 0 ) { let curDigit = n % 10 ; if ( prevDigit === - 1 ) { prevDigit = curDigit ; } else { if ( Math . abs ( prevDigit - curDigit ) !== 1 ) { return false ; } } prevDigit = curDigit ; n = Math . trunc ( n / 10 ) ; } return true ; } 
function numOfWays ( n , k ) { let p = 1 ; if ( k % 2 !== 0 ) { p = - 1 ; } return ( Math . pow ( n - 1 , k ) + p * ( n - 1 ) ) / n ; } 
function findDivisors ( n ) { let v = [ ] ; for ( let i = 1 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i === 0 ) { if ( n / i === i ) { v . push ( i ) ; } else { v . push ( i ) ; v . push ( Math . floor ( n / i ) ) ; } } } return v ; } 
function eggDrop ( n , k ) { if ( k === 1 || k === 0 ) { return k ; } if ( n === 1 ) { return k ; } let min = Number . MAX_VALUE ; let x , res ; for ( x = 1 ; x <= k ; x ++ ) { res = Math . max ( eggDrop ( n - 1 , x - 1 ) , eggDrop ( n , k - x ) ) ; if ( res < min ) { min = res ; } } return min + 1 ; } 
function isPowerOfTwo ( n ) { if ( n === 0 ) { return false ; } return Math . ceil ( Math . log ( n ) / Math . log ( 2 ) ) === Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ; } 
function shortestPalindrome ( s ) { let n = s . length ; let v = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { let l = i ; let r = i ; let ans1 = "" ; let ans2 = "" ; while ( l >= 0 && r < n && s [ l ] === s [ r ] ) { ans1 += s [ l ] ; l -- ; r ++ ; } l = i - 1 ; r = i ; while ( l >= 0 && r < n && s [ l ] === s [ r ] ) { ans2 += s [ l ] ; l -- ; r ++ ; } v . push ( ans1 ) ; v . push ( ans2 ) ; } let ans = v [ 0 ] ; for ( let i = 0 ; i < v . length ; i ++ ) { if ( v [ i ] !== "" ) { if ( ans [ 0 ] >= v [ i ] [ 0 ] ) { ans = v [ i ] ; } } } return ans ; } 
function minimumAdjacentDifference ( a , n , k ) { let minDiff = Number . MAX_VALUE ; for ( let i = 0 ; i <= k ; i ++ ) { let maxDiff = - Number . MAX_VALUE ; for ( let j = 0 ; j < n - k - 1 ; j ++ ) { for ( let p = i ; p <= i + j ; p ++ ) { maxDiff = Math . max ( maxDiff , a [ p + 1 ] - a [ p ] ) ; } } minDiff = Math . min ( minDiff , maxDiff ) ; } return minDiff ; } 
function cal ( arr , mid ) { let chocolate = 0 ; for ( let i of arr ) { if ( i >= mid ) { chocolate += i - mid ; } } return chocolate ; } 
function check ( v , a , m ) { let tec = 0 , ans = 0 ; let b = Array ( a . length + 3 ) . fill ( 0 ) ; for ( let i = 0 ; i < a . length ; i ++ ) { tec -= b [ i ] ; if ( a [ i ] + tec < v ) { let mov = v - a [ i ] - tec ; ans = ans + mov ; tec += mov ; b [ i + 2 ] = mov ; } } return ans <= m ; } 
function largestNum ( arr ) { let res = 0 ; arr . sort ( ( a , b ) => a - b ) ; let l = 0 , r = arr . length - 1 ; while ( l < r ) { let sum = arr [ l ] + arr [ r ] ; if ( sum === 0 ) { res = Math . max ( res , Math . max ( arr [ l ] , arr [ r ] ) ) ; return res ; } else if ( sum < 0 ) { l ++ ; } else { r -- ; } } return res ; } 
function binarySearch ( p , n ) { let i = 0 ; let j = p . length - 1 ; let index = - 1 ; while ( i <= j ) { let mid = i + Math . trunc ( ( j - i ) / 2 ) ; if ( p [ mid ] >= n ) { index = mid ; j = mid - 1 ; } else { i = mid + 1 ; } } return index ; } 
function findMinLength ( arr ) { let index = arr . length - 1 ; while ( index > 0 && arr [ index ] >= arr [ index - 1 ] ) { index -- ; } return index ; } 
function minDigits ( n , k ) { let digits_num = Math . floor ( Math . log ( n ) / Math . log ( 10 ) + 1 ) ; let temp_sum = 0 ; let temp = digits_num ; let result ; let x , v ; let sum = 0 ; let num2 = n ; while ( num2 !== 0 ) { sum += num2 % 10 ; num2 = Math . trunc ( num2 / 10 ) ; } if ( sum <= k ) { x = 0 ; } else { while ( temp > 0 ) { v = Math . trunc ( n / Math . pow ( 10 , temp - 1 ) ) ; temp_sum += v % 10 ; if ( temp_sum >= k ) { v = Math . trunc ( v / 10 ) ; v ++ ; result = v * Math . pow ( 10 , temp ) ; break ; } temp -- ; } x = result - n ; return x ; } return - 1 ; } 
function checkForPerfectSquare ( arr , i , j ) { let mid , sum = 0 ; for ( let m = i ; m <= j ; m ++ ) { sum += arr [ m ] ; } let low = 0 , high = Math . trunc ( sum / 2 ) ; while ( low <= high ) { mid = low + Math . trunc ( ( high - low ) / 2 ) ; if ( mid * mid === sum ) { return mid ; } else if ( mid * mid > sum ) { high = mid - 1 ; } else { low = mid + 1 ; } } return - 1 ; } 
function minFlips ( mat , s ) { let n = mat . length ; let m = mat [ 0 ] . length ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = 0 ; j < m ; j ++ ) { if ( mat [ i ] [ j ] !== s [ ( i + j ) ] - "0" ) { count ++ ; } } } return count ; } 
function constructTree ( n , edges ) { let adjl = [ ] ; for ( let i = 0 ; i < n ; i ++ ) { adjl . push ( [ ] ) ; } for ( let e of edges ) { let u = e [ 0 ] ; let v = e [ 1 ] ; adjl [ u ] . push ( v ) ; adjl [ v ] . push ( u ) ; } return adjl ; } 
function findSumOfValues ( v , parent , valuesChildren ) { let curNode = v ; let sum = 0 ; while ( curNode !== - 1 ) { sum += valuesChildren [ curNode ] ; curNode = parent [ curNode ] ; } return sum ; } 
function getDistinct ( d , count ) { let num = 0 ; count = Math . pow ( 10 , count - 1 ) ; while ( count > 0 ) { num += count * d ; count = Math . trunc ( count / 10 ) ; } return num ; } 
function isIncreasing ( arr ) { for ( let i = 0 ; i < arr . length - 1 ; i ++ ) { if ( arr [ i ] > arr [ i + 1 ] ) { return false ; } } return true ; } 
function minAdjSwaps ( mat ) { let n = mat . length ; let cntZero = Array ( n ) . fill ( 0 ) ; for ( let i = 0 ; i < n ; i ++ ) { for ( let j = n - 1 ; j >= 0 && mat [ i ] [ j ] === 0 ; j -- ) { cntZero [ i ] ++ ; } } let cntSwaps = 0 ; for ( let i = 0 ; i < n ; i ++ ) { if ( cntZero [ i ] < ( n - i - 1 ) ) { let first = i ; while ( first < n && cntZero [ first ] < ( n - i - 1 ) ) { first ++ ; } if ( first === n ) { return - 1 ; } while ( first > i ) { [ cntZero [ first ] , cntZero [ first - 1 ] ] = [ cntZero [ first - 1 ] , cntZero [ first ] ] ; first -- ; cntSwaps ++ ; } } } return cntSwaps ; } 
function solve ( values , salary , mod ) { let ret = 1 ; let amt = 0 ; values . sort ( ( a , b ) => a - b ) ; salary . sort ( ( a , b ) => a - b ) ; while ( salary . length ) { while ( values . length && values [ values . length - 1 ] >= salary [ salary . length - 1 ] ) { amt ++ ; values . pop ( ) ; } if ( amt === 0 ) { return 0 ; } ret *= amt -- ; ret %= mod ; salary . pop ( ) ; } return ret ; } 
function organizeInOrder ( vec , op , n ) { let result = new Array ( n ) . fill ( 0 ) ; vec . sort ( ( a , b ) => a - b ) ; let i = 0 , j = n - 1 , k = 0 ; while ( i <= j && k <= n - 2 ) { if ( op [ k ] === "<" ) { result [ k ] = vec [ i ++ ] ; } else { result [ k ] = vec [ j -- ] ; } k ++ ; } result [ n - 1 ] = vec [ i ] ; return result ; } 
function countPoints ( n , m , a , b , x , y ) { a . sort ( ( a , b ) => a - b ) ; b . sort ( ( a , b ) => a - b ) ; let j = 0 ; let count = 0 ; for ( let i = 0 ; i < n ; i ++ ) { while ( j < m ) { if ( a [ i ] + y < b [ j ] ) { break ; } if ( b [ j ] >= a [ i ] - x && b [ j ] <= a [ i ] + y ) { count ++ ; j ++ ; break ; } else { j ++ ; } } } return count ; } 
function areSame ( a , b ) { a . sort ( ( a , b ) => a - b ) ; b . sort ( ( a , b ) => a - b ) ; return JSON . stringify ( a ) === JSON . stringify ( b ) ; } 
function countNumberOfStrings ( s ) { let n = s . length - 1 ; let count = Math . pow ( 2 , n ) ; return count ; } 
function primePower ( x ) { let primePow = [ ] ; for ( let i = 2 ; i * i <= x ; i ++ ) { if ( x % i === 0 ) { let p = 1 ; while ( x % i === 0 ) { x /= i ; p *= i ; } primePow . push ( p ) ; } } if ( x > 1 ) { primePow . push ( x ) ; } return primePow ; } 
function isPerfect ( n0 ) { let n = Math . sqrt ( n0 ) ; if ( Math . floor ( n ) !== Math . ceil ( n ) ) { return false ; } return true ; } 
function findSum ( l , r ) { let arr = [ ] ; let i = 0 ; let x = 2 ; while ( i <= r ) { arr . push ( i + x ) ; if ( i + 1 <= r ) { arr . push ( i + 1 + x ) ; } x *= - 1 ; i += 2 ; } let sum = 0 ; for ( i = l ; i <= r ; ++ i ) { sum += arr [ i ] ; } return sum ; } 
function results ( n , k ) { return Math . round ( Math . pow ( n , 1.0 / Math . pow ( 2.0 , k ) ) ) ; } 
function factors ( n ) { let v = [ ] ; v . push ( 1 ) ; for ( let i = 2 ; i <= Math . sqrt ( n ) ; i ++ ) { if ( n % i === 0 ) { v . push ( i ) ; if ( n / i !== i ) { v . push ( n / i ) ; } } } return v ; } 
function smallestNum ( n ) { let x = Math . pow ( 10.0 , ( n - 1 ) / 2.0 ) ; return Math . ceil ( x ) ; } 
function smallest ( s ) { let a = Array ( s . length ) . fill ( 0 ) ; for ( let i = 0 ; i < s . length ; i ++ ) { a [ i ] = s [ i ] . charCodeAt ( 0 ) - "0" . charCodeAt ( 0 ) ; } let b = [ ] ; for ( let i = 0 ; i < a . length ; i ++ ) { if ( ( a [ i ] ) % 2 !== 0 ) { b . push ( a [ i ] ) ; } } b . sort ( ( a , b ) => a - b ) ; if ( b . length > 1 ) { return b [ 0 ] * 10 + b [ 1 ] ; } return - 1 ; } 
function Diagonals ( a , b , c , d ) { let ans = [ ] ; ans . push ( Math . sqrt ( ( a * c + b * d ) * ( a * d + b * c ) / ( a * b + c * d ) ) ) ; ans . push ( Math . sqrt ( ( a * c + b * d ) * ( a * b + c * d ) / ( a * d + b * c ) ) ) ; return ans ; } 
function findNumberOfDigits ( n , bas ) { let dig = Math . floor ( Math . log ( n ) / Math . log ( bas ) ) + 1 ; return dig } 
function nGon ( n ) { let proAngleVar ; if ( n % 4 === 0 ) { proAngleVar = Math . PI * ( 180.0 / n ) / 180 ; } else { proAngleVar = Math . PI * ( 180.0 / ( 2 * n ) ) / 180 ; } let negX = 1.0e+99 , posX = - 1.0e+99 , negY = 1.0e+99 , posY = - 1.0e+99 ; for ( let j = 0 ; j < n ; ++ j ) { let px = Math . cos ( 2 * Math . PI * j / n + proAngleVar ) ; let py = Math . sin ( 2 * Math . PI * j / n + proAngleVar ) ; negX = Math . min ( negX , px ) ; posX = Math . max ( posX , px ) ; negY = Math . min ( negY , py ) ; posY = Math . max ( posY , py ) ; } let opt2 = Math . max ( posX - negX , posY - negY ) ; return opt2 / Math . sin ( Math . PI / n ) / 2 ; } 
function findMaxK ( n ) { let p = Math . floor ( Math . log ( n ) / Math . log ( 2 ) ) ; return Math . pow ( 2 , p ) ; } 
function nthFibo ( n ) { let a = ( Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; let b = ( - 1 * Math . pow ( 5 , 0.5 ) + 1 ) / 2 ; let r = Math . pow ( 5 , 0.5 ) ; let ans = ( Math . pow ( a , n ) - Math . pow ( b , n ) ) / r ; return Math . floor ( ans ) ; } 
function findProb ( l , r ) { let countOfPs = Math . floor ( Math . sqrt ( r ) ) - Math . ceil ( Math . sqrt ( l ) ) + 1 ; let total = r - l + 1 ; let prob = countOfPs / total ; return prob ; } 
function previousFibonacci ( n ) { let a = n / ( ( 1 + Math . sqrt ( 5 ) ) / 2.0 ) ; return Math . round ( a ) ; } 
function distPrime ( arr , allPrimes ) { let list1 = [ ] ; for ( let i of allPrimes ) { for ( let j of arr ) { if ( j % i === 0 ) { list1 . push ( i ) ; break ; } } } return list1 ; } 
function getArray ( n ) { let ans = [ ] ; let p2 = 1 ; while ( n > 0 ) { if ( n % 2 === 1 ) { ans . push ( p2 ) ; } n >>= 1 ; p2 *= 2 ; } return ans ; } 
function maximumLength ( a ) { let counts = Array ( 11 ) . fill ( 0 ) ; let ans = 0 ; for ( let index = 0 ; index < a . length ; index ++ ) { counts [ a [ index ] ] += 1 ; let k = [ ] ; for ( i of counts ) { if ( i !== 0 ) { k . push ( i ) ; } } k . sort ( ( a , b ) => a - b ) ; if ( k . length === 1 || ( k [ 0 ] === k [ k . length - 2 ] && k [ k . length - 1 ] - k [ k . length - 2 ] === 1 ) || ( k [ 0 ] === 1 && k [ 1 ] === k [ k . length - 1 ] ) ) { ans = index ; } } return ans + 1 ; } 
function maxEdges ( n ) { let edges = Math . floor ( n * n / 4 ) ; return edges ; } 
function findK ( n , k ) { let a = [ ] ; for ( let i = 1 ; i < n ; i ++ ) { if ( i % 2 === 1 ) { a . push ( i ) ; } } for ( let i = 1 ; i < n ; i ++ ) { if ( i % 2 === 0 ) { a . push ( i ) ; } } return a [ k - 1 ] ; } 
function isKeith ( x , temp ) { let terms = [ ] ; let n = 0 ; while ( temp > 0 ) { terms . push ( temp % 10 ) ; temp = Math . trunc ( temp / 10 ) ; n ++ ; } terms = terms . reverse ( ) ; let nextTerm = 0 , i = n ; while ( nextTerm < x ) { nextTerm = 0 ; for ( let j = 1 ; j <= n ; j ++ ) { nextTerm += terms [ i - j ] ; } terms . push ( nextTerm ) ; i ++ ; } return nextTerm === x ; } 
function factors ( n , k ) { let v = [ ] ; while ( n % 2 === 0 ) { v . push ( 2 ) ; n = Math . trunc ( n / 2 ) ; } if ( v . length >= k ) { return true ; } for ( let i = 3 ; i * i <= n ; i += 2 ) { while ( n % i === 0 ) { n = Math . trunc ( n / i ) ; v . push ( i ) ; } if ( v . length >= k ) { return true ; } } if ( n > 2 ) { v . push ( n ) ; } if ( v . length >= k ) { return true ; } return false ; } 
