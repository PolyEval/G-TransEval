List < string > SeparateParenGroups ( string parenString ) { List < string > allParens = new List < string > ( ) ; StringBuilder currentParen = new StringBuilder ( ) ; int currentDepth = 0 ; foreach ( var c in parenString ) { if ( c == '(' ) { currentDepth += 1 ; currentParen . Append ( c ) ; } else if ( c == ')' ) { currentDepth -= 1 ; currentParen . Append ( c ) ; if ( currentDepth == 0 ) { allParens . Add ( currentParen . ToString ( ) ) ; currentParen . Clear ( ) ; } } } return allParens ; } 
List < int > ParseNestedParens ( string parenString ) { List < int > allLevels = new List < int > ( ) ; int level = 0 ; int maxLevel = 0 ; for ( int i = 0 ; i < parenString . Length ; i ++ ) { char chr = parenString [ i ] ; if ( chr == '(' ) { level += 1 ; if ( level > maxLevel ) { maxLevel = level ; } } if ( chr == ')' ) { level -= 1 ; if ( level == 0 ) { allLevels . Add ( maxLevel ) ; maxLevel = 0 ; } } } return allLevels ; } 
List < string > FilterBySubstring ( List < string > strings , string substring ) { List < string > result = new List < string > ( ) ; foreach ( var s in strings ) { if ( s . Contains ( substring ) ) { result . Add ( s ) ; } } return result ; } 
List < int > RollingMax ( List < int > numbers ) { List < int > result = new List < int > ( ) ; int runningMax = 0 ; foreach ( int n in numbers ) { if ( n > runningMax ) { runningMax = n ; } result . Add ( runningMax ) ; } return result ; } 
string MakePalindrome ( string s ) { if ( s . Length == 0 ) { return "" ; } for ( int i = 0 ; i < s . Length ; i ++ ) { string rStr = s . Substring ( i ) ; if ( rStr == new string ( rStr . Reverse ( ) . ToArray ( ) ) ) { string nStr = s . Substring ( 0 , i ) ; string n2Str = new string ( nStr . Reverse ( ) . ToArray ( ) ) ; return s + n2Str ; } } return s . Substring ( 0 , s . Length - 1 ) + new string ( s . Reverse ( ) . ToArray ( ) ) ; } 
string StringXor ( string a , string b ) { StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i < a . Length ; i ++ ) { if ( a [ i ] == b [ i ] ) { result . Append ( '0' ) ; } else { result . Append ( '1' ) ; } } return result . ToString ( ) ; } 
string Longest ( List < string > strings ) { if ( strings . Count == 0 ) return "" ; int maxLen = strings . Select ( s => s . Length ) . Max ( ) ; foreach ( string s in strings ) { if ( s . Length == maxLen ) { return s ; } } return "" ; } 
string StringSequence ( int n ) { StringBuilder s = new StringBuilder ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . Append ( i ) ; s . Append ( " " ) ; } s . Append ( n ) ; return s . ToString ( ) ; } 
int CountDistinctChars ( string s ) { HashSet < char > distinct = new HashSet < char > ( ) ; foreach ( char c in s . ToLower ( ) ) { distinct . Add ( c ) ; } return distinct . Count ; }
int HowManyTimes ( string s , string sub ) { int times = 0 ; for ( int i = 0 ; i <= s . Length - sub . Length ; i ++ ) { if ( s . Substring ( i , sub . Length ) == sub ) { times += 1 ; } } return times ; } 
string SortNumbers ( string numbers ) { Dictionary < string , int > toNum = new Dictionary < string , int > { { "zero" , 0 } , { "one" , 1 } , { "two" , 2 } , { "three" , 3 } , { "four" , 4 } , { "five" , 5 } , { "six" , 6 } , { "seven" , 7 } , { "eight" , 8 } , { "nine" , 9 } } ; Dictionary < int , string > fromNum = new Dictionary < int , string > { { 0 , "zero" } , { 1 , "one" } , { 2 , "two" } , { 3 , "three" } , { 4 , "four" } , { 5 , "five" } , { 6 , "six" } , { 7 , "seven" } , { 8 , "eight" } , { 9 , "nine" } } ; List < int > ints = new List < int > ( ) ; StringBuilder current = new StringBuilder ( ) ; for ( int i = 0 ; i <= numbers . Length ; i ++ ) { if ( i == numbers . Length || numbers [ i ] == ' ' ) { if ( toNum . ContainsKey ( current . ToString ( ) ) ) { ints . Add ( toNum [ current . ToString ( ) ] ) ; current . Clear ( ) ; } } else { current . Append ( numbers [ i ] ) ; } } ints . Sort ( ) ; StringBuilder result = new StringBuilder ( ) ; for ( int i = 0 ; i < ints . Count ; i ++ ) { result . Append ( fromNum [ ints [ i ] ] ) ; if ( i != ints . Count - 1 ) { result . Append ( " " ) ; } } return result . ToString ( ) ; } 
List < double > FindClosestElements ( List < double > numbers ) { List < double > closestPair = new List < double > { numbers [ 0 ] , numbers [ 1 ] } ; double distance = Math . Abs ( numbers [ 0 ] - numbers [ 1 ] ) ; for ( int i = 0 ; i < numbers . Count ; i ++ ) { for ( int j = i + 1 ; j < numbers . Count ; j ++ ) { if ( Math . Abs ( numbers [ i ] - numbers [ j ] ) < distance ) { closestPair [ 0 ] = numbers [ i ] ; closestPair [ 1 ] = numbers [ j ] ; distance = Math . Abs ( numbers [ i ] - numbers [ j ] ) ; } } } closestPair . Sort ( ) ; return closestPair ; } 
List < double > RescaleToUnit ( List < double > numbers ) { double minNum = numbers . Min ( ) ; double maxNum = numbers . Max ( ) ; List < double > result = new List < double > ( ) ; foreach ( double n in numbers ) { result . Add ( ( n - minNum ) / ( maxNum - minNum ) ) ; } return result ; } 
List < int > FilterIntegers ( List < object > values ) { List < int > result = new List < int > ( ) ; foreach ( var e in values ) { if ( e is int ) { result . Add ( ( int ) e ) ; } } return result ; }
List < int > RemoveDuplicates ( List < int > numbers ) { Dictionary < int , int > c = new Dictionary < int , int > ( ) ; foreach ( int i in numbers ) { c [ i ] = c . GetValueOrDefault ( i , 0 ) + 1 ; } List < int > result = new List < int > ( ) ; foreach ( int i in numbers ) { if ( c [ i ] == 1 ) { result . Add ( i ) ; } } return result ; } 
string FlipCase ( string s ) { StringBuilder result = new StringBuilder ( ) ; foreach ( char c in s ) { if ( char . IsLower ( c ) ) { result . Append ( char . ToUpper ( c ) ) ; } else { result . Append ( char . ToLower ( c ) ) ; } } return result . ToString ( ) ; } 
List < string > FilterByPrefix ( List < string > strings , string prefix ) { List < string > result = new List < string > ( ) ; for ( int i = 0 ; i < strings . Count ; i ++ ) { if ( strings [ i ] . StartsWith ( prefix ) ) { result . Add ( strings [ i ] ) ; } } return result ; } 
double FindZero ( List < double > xs ) { double ans = 0 ; double value = 0 ; for ( int i = 0 ; i < xs . Count ; i ++ ) { value += xs [ i ] * Math . Pow ( ans , i ) ; } while ( Math . Abs ( value ) > 1e-6 ) { double driv = 0 ; for ( int i = 1 ; i < xs . Count ; i ++ ) { driv += xs [ i ] * Math . Pow ( ans , i - 1 ) * i ; } ans -= value / driv ; value = 0 ; for ( int i = 0 ; i < xs . Count ; i ++ ) { value += xs [ i ] * Math . Pow ( ans , i ) ; } } return ans ; } 
List < int > SortThird ( List < int > l ) { List < int > thirds = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i += 3 ) { thirds . Add ( l [ i ] ) ; } thirds . Sort ( ) ; List < int > result = new List < int > ( ) ; for ( int i = 0 ; i < l . Count ; i ++ ) { if ( i % 3 == 0 ) { result . Add ( thirds [ i / 3 ] ) ; } else { result . Add ( l [ i ] ) ; } } return result ; } 
List < int > Unique ( List < int > l ) { List < int > result = new List < int > ( new HashSet < int > ( l ) ) ; result . Sort ( ) ; return result ; } 
double MaxElement ( List < double > l ) { return l . Max ( ) ; } 
bool TriplesSumToZero ( List < int > l ) { for ( int i = 0 ; i < l . Count ; i ++ ) { for ( int j = i + 1 ; j < l . Count ; j ++ ) { for ( int k = j + 1 ; k < l . Count ; k ++ ) { if ( l [ i ] + l [ j ] + l [ k ] == 0 ) { return true ; } } } } return false ; } 
int Fib4 ( int n ) { List < int > results = new List < int > { 0 , 0 , 2 , 0 } ; for ( int i = 4 ; i <= n ; i ++ ) { results . Add ( results [ i - 4 ] + results [ i - 3 ] + results [ i - 2 ] + results [ i - 1 ] ) ; } return results [ n ] ; } 
bool IsPalindrome ( string text ) { string pr = new string ( text . Reverse ( ) . ToArray ( ) ) ; return pr == text ; } 
string RemoveVowels ( string text ) { StringBuilder result = new StringBuilder ( ) ; string vowels = "aeiou" ; foreach ( char ch in text ) { if ( ! vowels . Contains ( char . ToLower ( ch ) ) ) { result . Append ( ch ) ; } } return result . ToString ( ) ; } 
bool SameChars ( string s0 , string s1 ) { HashSet < char > set0 = new HashSet < char > ( ) ; foreach ( char c in s0 ) { set0 . Add ( c ) ; } HashSet < char > set1 = new HashSet < char > ( ) ; foreach ( char c in s1 ) { set1 . Add ( c ) ; } return set0 . SetEquals ( set1 ) ; } 
List < int > Common ( List < int > l1 , List < int > l2 ) { HashSet < int > us = new HashSet < int > ( ) ; foreach ( int e1 in l1 ) { foreach ( int e2 in l2 ) { if ( e1 == e2 ) { us . Add ( e1 ) ; } } } List < int > ret = new List < int > ( us ) ; ret . Sort ( ) ; return ret ; } 
bool CorrectBracketing ( string brackets ) { int depth = 0 ; foreach ( char b in brackets ) { if ( b == '(' ) { depth += 1 ; } if ( b == ')' ) { depth -= 1 ; } if ( depth < 0 ) { return false ; } } return depth == 0 ; } 
string CircularShift ( int x , int shift ) { string xs = x . ToString ( ) ; if ( shift > xs . Length ) { return new string ( xs . Reverse ( ) . ToArray ( ) ) ; } return xs . Substring ( xs . Length - shift ) + xs . Substring ( 0 , xs . Length - shift ) ; } 
int Search ( List < int > lst ) { Dictionary < int , int > counter = new Dictionary < int , int > ( ) ; foreach ( int i in lst ) { counter [ i ] = counter . GetValueOrDefault ( i , 0 ) + 1 ; } int ans = - 1 ; foreach ( var item in counter ) { if ( item . Value >= item . Key && item . Key > ans ) { ans = item . Key ; } } return ans ; } 
int SmallestChange ( List < int > arr ) { int ans = 0 ; for ( int i = 0 ; i < arr . Count / 2 ; i ++ ) { if ( arr [ i ] != arr [ ^ ( i + 1 ) ] ) { ans += 1 ; } } return ans ; } 
List < string > TotalMatch ( List < string > lst1 , List < string > lst2 ) { int sum1 = 0 ; foreach ( var st in lst1 ) { sum1 += st . Length ; } int sum2 = 0 ; foreach ( string st in lst2 ) { sum2 += st . Length ; } return sum1 > sum2 ? lst2 : lst1 ; } 
bool IsHappy ( string s ) { if ( s . Length < 3 ) { return false ; } for ( int i = 0 ; i < s . Length - 2 ; i ++ ) { if ( s [ i ] == s [ i + 1 ] || s [ i ] == s [ i + 2 ] || s [ i + 1 ] == s [ i + 2 ] ) { return false ; } } return true ; } 
List < string > NumericalLetterGrade ( List < double > grades ) { List < string > letterGrade = new List < string > ( ) ; foreach ( double gpa in grades ) { if ( gpa == 4.0 ) { letterGrade . Add ( "A+" ) ; } else if ( gpa > 3.7 ) { letterGrade . Add ( "A" ) ; } else if ( gpa > 3.3 ) { letterGrade . Add ( "A-" ) ; } else if ( gpa > 3.0 ) { letterGrade . Add ( "B+" ) ; } else if ( gpa > 2.7 ) { letterGrade . Add ( "B" ) ; } else if ( gpa > 2.3 ) { letterGrade . Add ( "B-" ) ; } else if ( gpa > 2.0 ) { letterGrade . Add ( "C+" ) ; } else if ( gpa > 1.7 ) { letterGrade . Add ( "C" ) ; } else if ( gpa > 1.3 ) { letterGrade . Add ( "C-" ) ; } else if ( gpa > 1.0 ) { letterGrade . Add ( "D+" ) ; } else if ( gpa > 0.7 ) { letterGrade . Add ( "D" ) ; } else if ( gpa > 0.0 ) { letterGrade . Add ( "D-" ) ; } else { letterGrade . Add ( "E" ) ; } } return letterGrade ; } 
string Solve ( int n ) { StringBuilder biStr = new StringBuilder ( ) ; int sum = 0 ; foreach ( char c in n . ToString ( ) ) { sum += c - '0' ; } while ( sum > 0 ) { biStr . Insert ( 0 , sum % 2 ) ; sum /= 2 ; } return biStr . ToString ( ) ; } 
string AntiShuffle ( string s ) { StringBuilder ret = new StringBuilder ( ) ; StringBuilder current = new StringBuilder ( ) ; for ( int i = 0 ; i <= s . Length ; i ++ ) { if ( i == s . Length || s [ i ] == ' ' ) { char [ ] tmp = current . ToString ( ) . ToCharArray ( ) ; Array . Sort ( tmp ) ; if ( ret . Length != 0 ) { ret . Append ( ' ' ) ; } ret . Append ( new string ( tmp ) ) ; current . Clear ( ) ; } else { current . Append ( s [ i ] ) ; } } return ret . ToString ( ) ; } 
List < int > SortArray ( List < int > array ) { if ( array . Count == 0 ) { return array ; } if ( ( array [ 0 ] + array [ ^ 1 ] ) % 2 == 1 ) { array . Sort ( ) ; } else { array . Sort ( ( a , b ) => b - a ) ; } return array ; } 
string Encrypt ( string s ) { StringBuilder ans = new StringBuilder ( ) ; foreach ( char c in s ) { if ( char . IsLetter ( c ) ) { ans . Append ( ( char ) ( 'a' + ( c - 'a' + 4 ) % 26 ) ) ; } else { ans . Append ( c ) ; } } return ans . ToString ( ) ; } 
int IsBored ( string s ) { bool isStart = true ; int sum = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( s [ i ] == '.' || s [ i ] == '?' || s [ i ] == '!' ) { isStart = true ; } else if ( isStart ) { if ( s [ i ] == ' ' ) { continue ; } if ( s . Substring ( i , 2 ) == "I " ) { sum += 1 ; } isStart = false ; } } return sum ; } 
string Encode ( string message ) { string vowels = "aeiouAEIOU" ; StringBuilder ret = new StringBuilder ( ) ; foreach ( char c0 in message ) { char c = c0 ; if ( char . IsUpper ( c ) ) { c = char . ToLower ( c ) ; if ( vowels . Contains ( c ) ) { c = ( char ) ( 'a' + ( c - 'a' + 2 ) % 26 ) ; } } else if ( char . IsLower ( c ) ) { c = char . ToUpper ( c ) ; if ( vowels . Contains ( c ) ) { c = ( char ) ( 'A' + ( c - 'A' + 2 ) % 26 ) ; } } ret . Append ( c ) ; } return ret . ToString ( ) ; } 
int Skjkasdkd ( List < int > lst ) { int largest = 0 ; foreach ( int n in lst ) { if ( n > largest ) { bool prime = true ; for ( int i = 2 ; i < n ; i ++ ) { if ( n % i == 0 ) { prime = false ; } } if ( prime ) { largest = n ; } } } int sum = 0 ; string s = largest . ToString ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { sum += s [ i ] - '0' ; } return sum ; } 
bool CheckDictCase ( Dictionary < string , string > dict ) { if ( dict . Count == 0 ) { return false ; } int isLower = 0 ; int isUpper = 0 ; foreach ( var key in dict . Keys ) { foreach ( char c in key ) { if ( char . IsLower ( c ) ) { isLower = 1 ; } else if ( char . IsUpper ( c ) ) { isUpper = 1 ; } else { return false ; } } } return isLower + isUpper == 1 ; } 
int Multiply ( int a , int b ) { return ( Math . Abs ( a ) % 10 ) * ( Math . Abs ( b ) % 10 ) ; } 
int CountUpper ( string s ) { string uVowel = "AEIOU" ; int count = 0 ; for ( int i = 0 ; i < s . Length ; i += 2 ) { if ( uVowel . Contains ( s [ i ] ) ) { count += 1 ; } } return count ; } 
List < string > ByLength ( List < int > arr ) { Dictionary < int , string > numTo = new Dictionary < int , string > { { 1 , "One" } , { 2 , "Two" } , { 3 , "Three" } , { 4 , "Four" } , { 5 , "Five" } , { 6 , "Six" } , { 7 , "Seven" } , { 8 , "Eight" } , { 9 , "Nine" } } ; List < int > sortedArr = new List < int > ( arr ) ; sortedArr . Sort ( ( a , b ) => b - a ) ; List < string > newArr = new List < string > ( ) ; foreach ( int n in sortedArr ) { if ( n >= 1 && n <= 9 ) { newArr . Add ( numTo [ n ] ) ; } } return newArr ; } 
List < int > F ( int n ) { int sum = 0 ; int prod = 1 ; List < int > result = new List < int > ( ) ; for ( int i = 1 ; i <= n ; i ++ ) { sum += i ; prod *= i ; if ( i % 2 == 0 ) { result . Add ( prod ) ; } else { result . Add ( sum ) ; } } return result ; } 
List < int > EvenOddPalindrome ( int n ) { int evenCount = 0 , oddCount = 0 ; for ( int i = 1 ; i <= n ; i ++ ) { string s = i . ToString ( ) ; string rStr = new string ( s . Reverse ( ) . ToArray ( ) ) ; if ( s == rStr ) { if ( i % 2 == 1 ) { oddCount += 1 ; } else { evenCount += 1 ; } } } return new List < int > { evenCount , oddCount } ; } 
Dictionary < char , int > Histogram ( string test ) { Dictionary < char , int > count = new Dictionary < char , int > ( ) ; int max = 0 ; for ( int i = 0 ; i < test . Length ; i ++ ) { if ( test [ i ] != ' ' ) { count [ test [ i ] ] = count . GetValueOrDefault ( test [ i ] , 0 ) + 1 ; if ( count [ test [ i ] ] > max ) { max = count [ test [ i ] ] ; } } } Dictionary < char , int > result = new Dictionary < char , int > ( ) ; foreach ( var item in count ) { if ( item . Value == max ) { result [ item . Key ] = item . Value ; } } return result ; } 
List < string > ReverseDelete ( string s , string c ) { StringBuilder ret = new StringBuilder ( ) ; foreach ( char ch in s ) { if ( ! c . Contains ( ch ) ) { ret . Append ( ch ) ; } } string flag = "False" ; if ( ret . ToString ( ) . Equals ( new string ( ret . ToString ( ) . Reverse ( ) . ToArray ( ) ) ) ) { flag = "True" ; } return new List < string > { ret . ToString ( ) , flag } ; } 
List < int > SortArray ( List < int > arr ) { List < int > bin = new List < int > ( ) ; foreach ( int i in arr ) { int b = 0 ; int n = Math . Abs ( i ) ; while ( n > 0 ) { b += n % 2 ; n /= 2 ; } bin . Add ( b ) ; } for ( int i = 0 ; i < arr . Count ; i ++ ) { for ( int j = 1 ; j < arr . Count ; j ++ ) { if ( bin [ j ] < bin [ j - 1 ] || ( bin [ j ] == bin [ j - 1 ] && arr [ j ] < arr [ j - 1 ] ) ) { ( bin [ j ] , bin [ j - 1 ] ) = ( bin [ j - 1 ] , bin [ j ] ) ; ( arr [ j ] , arr [ j - 1 ] ) = ( arr [ j - 1 ] , arr [ j ] ) ; } } } return arr ; } 
string GetClosestVowel ( string word ) { string vowels = "AEIOUaeiou" ; for ( int i = word . Length - 2 ; i > 0 ; i -- ) { if ( vowels . Contains ( word [ i ] ) && ! vowels . Contains ( word [ i + 1 ] ) && ! vowels . Contains ( word [ i - 1 ] ) ) { return word [ i ] . ToString ( ) ; } } return "" ; } 
string MatchParens ( List < string > lst ) { List < string > strings = new List < string > { lst [ 0 ] + lst [ 1 ] , lst [ 1 ] + lst [ 0 ] } ; foreach ( var l in strings ) { int count = 0 ; foreach ( char c in l ) { if ( c == '(' ) { count += 1 ; } else { count -= 1 ; } if ( count < 0 ) { break ; } } if ( count == 0 ) { return "Yes" ; } } return "No" ; } 
List < int > Maximum ( List < int > arr , int k ) { if ( k == 0 ) { return new List < int > ( ) ; } arr . Sort ( ) ; return arr . GetRange ( arr . Count - k , k ) ; } 
bool ValidDate ( string date ) { if ( date . Length != 10 ) { return false ; } for ( int i = 0 ; i < 10 ; i ++ ) { if ( i == 2 || i == 5 ) { if ( date [ i ] != '-' ) { return false ; } } else if ( ! char . IsDigit ( date [ i ] ) ) { return false ; } } int month = int . Parse ( date . Substring ( 0 , 2 ) ) ; int day = int . Parse ( date . Substring ( 3 , 2 ) ) ; int year = int . Parse ( date . Substring ( 6 , 4 ) ) ; if ( month < 1 || month > 12 ) { return false ; } if ( day < 1 || day > 31 ) { return false ; } if ( day == 31 && ( month == 4 || month == 6 || month == 9 || month == 11 || month == 2 ) ) { return false ; } if ( day == 30 && month == 2 ) { return false ; } return true ; } 
List < string > SplitWords ( string txt ) { StringBuilder current = new StringBuilder ( ) ; List < string > result = new List < string > ( ) ; if ( txt . Contains ( ' ' ) ) { for ( int i = 0 ; i <= txt . Length ; i ++ ) { if ( i == txt . Length || txt [ i ] == ' ' ) { if ( current . Length > 0 ) { result . Add ( current . ToString ( ) ) ; } current . Clear ( ) ; } else { current . Append ( txt [ i ] ) ; } } return result ; } if ( txt . Contains ( ',' ) ) { for ( int i = 0 ; i <= txt . Length ; i ++ ) { if ( i == txt . Length || txt [ i ] == ',' ) { if ( current . Length > 0 ) { result . Add ( current . ToString ( ) ) ; } current . Clear ( ) ; } else { current . Append ( txt [ i ] ) ; } } return result ; } int num = 0 ; foreach ( char c in txt ) { if ( char . IsLower ( c ) && c % 2 == 0 ) { num += 1 ; } } return new List < String > { num . ToString ( ) } ; } 
List < int > Tri ( int n ) { if ( n == 0 ) { return new List < int > ( 1 ) ; } List < int > tris = new List < int > { 1 , 3 } ; for ( int i = 2 ; i <= n ; i ++ ) { if ( i % 2 == 0 ) { tris . Add ( i / 2 + 1 ) ; } else { tris . Add ( tris [ i - 1 ] + tris [ i - 2 ] + ( i + 3 ) / 2 ) ; } } return tris ; } 
bool CheckIfLastCharIsALetter ( string txt ) { if ( txt . Length == 0 ) { return false ; } return char . IsLetter ( txt [ ^ 1 ] ) && ( txt . Length == 1 || ! char . IsLetter ( txt [ ^ 2 ] ) ) ; } 
List < int > OrderByPoints ( List < int > nums ) { List < int > result = new List < int > ( ) ; foreach ( int num in nums ) { string w = Math . Abs ( num ) . ToString ( ) ; int sum = 0 ; foreach ( char c in w ) { sum += c - '0' ; } if ( num < 0 ) { sum -= 2 * ( w [ 0 ] - '0' ) ; } result . Add ( sum ) ; } for ( int i = 0 ; i < nums . Count ; i ++ ) { for ( int j = 1 ; j < nums . Count ; j ++ ) { if ( result [ j - 1 ] > result [ j ] ) { ( result [ j ] , result [ j - 1 ] ) = ( result [ j - 1 ] , result [ j ] ) ; ( nums [ j ] , nums [ j - 1 ] ) = ( nums [ j - 1 ] , nums [ j ] ) ; } } } return nums ; } 
List < string > Bf ( string planet1 , string planet2 ) { List < string > planets = new List < string > { "Mercury" , "Venus" , "Earth" , "Mars" , "Jupiter" , "Saturn" , "Uranus" , "Neptune" } ; int idx1 = planets . IndexOf ( planet1 ) ; int idx2 = planets . IndexOf ( planet2 ) ; if ( idx1 == - 1 || idx2 == - 1 || idx1 == idx2 ) { return new List < string > ( ) ; } return idx1 > idx2 ? planets . GetRange ( idx2 + 1 , idx1 - idx2 - 1 ) : planets . GetRange ( idx1 + 1 , idx2 - idx1 - 1 ) ; } 
List < string > SortedListSum ( List < string > lst ) { List < string > result = new List < string > ( ) ; foreach ( var i in lst ) { if ( i . Length % 2 == 0 ) { result . Add ( i ) ; } } result . Sort ( ( string l , string r ) => { if ( l . Length == r . Length ) { return string . Compare ( l , r , StringComparison . Ordinal ) ; } return l . Length - r . Length ; } ) ; return result ; } 
bool CycpatternCheck ( string a , string b ) { for ( int i = 0 ; i <= b . Length ; i ++ ) { string rotate = b . Substring ( i ) + b . Substring ( 0 , i ) ; if ( a . Contains ( rotate ) ) { return true ; } } return false ; } 
List < int > EvenOddCount ( int num ) { int evenCount = 0 , oddCount = 0 ; foreach ( char i in Math . Abs ( num ) . ToString ( ) ) { if ( i % 2 == 0 ) { evenCount += 1 ; } else { oddCount += 1 ; } } return new List < int > { evenCount , oddCount } ; } 
string FindMax ( List < string > words ) { string max = "" ; int maxLength = 0 ; foreach ( var word in words ) { List < char > unique = new List < char > ( ) ; foreach ( char w in word ) { if ( ! unique . Contains ( w ) ) { unique . Add ( w ) ; } } if ( unique . Count > maxLength || ( unique . Count == maxLength && string . Compare ( word , max , StringComparison . Ordinal ) < 0 ) ) { max = word ; maxLength = unique . Count ; } } return max ; } 
string Solve ( string s ) { bool noLetter = true ; StringBuilder result = new StringBuilder ( ) ; foreach ( char ch0 in s ) { char ch = ch0 ; if ( char . IsUpper ( ch ) ) { ch = char . ToLower ( ch ) ; noLetter = false ; } else if ( char . IsLower ( ch ) ) { ch = char . ToUpper ( ch ) ; noLetter = false ; } result . Append ( ch ) ; } if ( noLetter ) { return new string ( result . ToString ( ) . Reverse ( ) . ToArray ( ) ) ; } else { return result . ToString ( ) ; } } 
int MostFrequent ( List < int > arr , int n ) { Dictionary < int , int > hp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . ContainsKey ( arr [ i ] ) ) { hp [ arr [ i ] ] ++ ; } else { hp [ arr [ i ] ] = 1 ; } } int maxCount = 0 , res = - 1 ; foreach ( var entry in hp ) { if ( maxCount < entry . Value ) { res = entry . Key ; maxCount = entry . Value ; } } return res ; } 
int Find ( List < int > a , List < int > b , int k , int n1 , int n2 ) { HashSet < int > s = new HashSet < int > ( ) ; for ( int i = 0 ; i < n2 ; i ++ ) { s . Add ( b [ i ] ) ; } int missing = 0 ; for ( int i = 0 ; i < n1 ; i ++ ) { if ( ! s . Contains ( a [ i ] ) ) { missing ++ ; } if ( missing == k ) { return a [ i ] ; } } return - 1 ; } 
int SolveQuery ( int start , int end , List < int > arr ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = start ; i <= end ; i ++ ) { mp [ arr [ i ] ] = mp . GetValueOrDefault ( arr [ i ] , 0 ) + 1 ; } int count = 0 ; foreach ( var entry in mp ) { if ( entry . Key == entry . Value ) { count ++ ; } } return count ; } 
int Segregate ( List < int > arr , int size ) { int j = 0 ; for ( int i = 0 ; i < size ; i ++ ) { if ( arr [ i ] <= 0 ) { ( arr [ i ] , arr [ j ] ) = ( arr [ j ] , arr [ i ] ) ; j ++ ; } } return j ; } 
int CountTriplets ( List < int > a , int n ) { HashSet < int > s = new HashSet < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { s . Add ( a [ i ] ) ; } int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { for ( int j = i + 1 ; j < n ; j ++ ) { int xr = a [ i ] ^ a [ j ] ; if ( s . Contains ( xr ) && xr != a [ i ] && xr != a [ j ] ) { count ++ ; } } } return count / 3 ; } 
int LeastFrequent ( List < int > arr , int n ) { Dictionary < int , int > hp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( hp . ContainsKey ( arr [ i ] ) ) { hp [ arr [ i ] ] ++ ; } else { hp [ arr [ i ] ] = 1 ; } } int minCount = n + 1 , res = - 1 ; foreach ( var entry in hp ) { if ( minCount >= entry . Value ) { res = entry . Key ; minCount = entry . Value ; } } return res ; } 
int FindPermutations ( List < int > arr ) { int cnt = 0 ; int maxInd = - 1 , minInd = 10000000 ; int n = arr . Count ; Dictionary < int , int > indexOf = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { indexOf [ arr [ i ] ] = i + 1 ; } for ( int i = 1 ; i <= n ; i ++ ) { maxInd = Math . Max ( maxInd , indexOf . GetValueOrDefault ( i , 0 ) ) ; minInd = Math . Min ( minInd , indexOf . GetValueOrDefault ( i , 0 ) ) ; if ( maxInd - minInd + 1 == i ) { cnt ++ ; } } return cnt ; } 
int FormQuadruplets ( List < int > arr , int n ) { int ans = 0 , pairs = 0 ; pairs = n / 4 ; arr . Sort ( ( a , b ) => b - a ) ; for ( int i = 0 ; i < n - pairs ; i += 3 ) { ans += arr [ i + 2 ] ; } return ans ; } 
string LexicographicallyMaximum ( string s , int n ) { Dictionary < char , int > m = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { if ( m . ContainsKey ( s [ i ] ) ) { m [ s [ i ] ] ++ ; } else { m [ s [ i ] ] = 1 ; } } List < char > v = new List < char > ( ) ; for ( char i = 'a' ; i < 'a' + Math . Min ( n , 25 ) ; ++ i ) { if ( m . ContainsKey ( i ) == false ) { v . Add ( i ) ; } } int j = v . Count - 1 ; for ( int i = 0 ; i < n ; ++ i ) { if ( s [ i ] >= 'a' + Math . Min ( n , 25 ) || ( m . ContainsKey ( s [ i ] ) && m [ s [ i ] ] > 1 ) ) { if ( v [ j ] < s [ i ] ) { continue ; } m [ s [ i ] ] -- ; s = s . Substring ( 0 , i ) + v [ j ] + s . Substring ( i + 1 ) ; j -- ; } if ( j < 0 ) { break ; } } int l = 0 ; for ( int i = n - 1 ; i >= 0 ; i -- ) { if ( l > j ) { break ; } if ( s [ i ] >= 'a' + Math . Min ( n , 25 ) || ( m . ContainsKey ( s [ i ] ) && m [ s [ i ] ] > 1 ) ) { m [ s [ i ] ] -- ; s = s . Substring ( 0 , i ) + v [ l ] + s . Substring ( i + 1 ) ; l ++ ; } } return s ; } 
int NoOfValidKbers ( int k , List < int > arr ) { HashSet < int > s = new HashSet < int > ( ) ; while ( k != 0 ) { s . Add ( k % 10 ) ; k = k / 10 ; } int count = 0 ; for ( int i = 0 ; i < arr . Count ; i ++ ) { int no = arr [ i ] ; bool flag = true ; while ( no != 0 ) { int digit = no % 10 ; if ( ! s . Contains ( digit ) ) { flag = false ; break ; } no = no / 10 ; } if ( flag ) { count ++ ; } } return count ; } 
int DelCost ( string s , List < int > cost ) { int ans = 0 ; Dictionary < int , int > forMax = new Dictionary < int , int > ( ) ; Dictionary < int , int > forTot = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < s . Length ; i ++ ) { if ( ! forMax . ContainsKey ( s [ i ] ) ) { forMax [ s [ i ] ] = cost [ i ] ; } else { forMax [ s [ i ] ] = Math . Max ( cost [ i ] , forMax [ s [ i ] ] ) ; } if ( ! forTot . ContainsKey ( s [ i ] ) ) { forTot [ s [ i ] ] = cost [ i ] ; } else { forTot [ s [ i ] ] += cost [ i ] ; } } foreach ( var i in forMax ) { ans += forTot [ i . Key ] - i . Value ; } return ans ; } 
List < string > ReplaceDuplicates ( List < string > names ) { Dictionary < string , int > hash = new Dictionary < string , int > ( ) ; for ( int i = 0 ; i < names . Count ; i ++ ) { if ( ! hash . ContainsKey ( names [ i ] ) ) { hash [ names [ i ] ] = 1 ; } else { int count = hash [ names [ i ] ] ; hash [ names [ i ] ] += 1 ; names [ i ] += count . ToString ( ) ; } } return names ; } 
List < int > MinmaxNumbers ( List < List < int > > matrix , List < int > res ) { HashSet < int > s = new HashSet < int > ( ) ; for ( int i = 0 ; i < matrix . Count ; i ++ ) { int minR = int . MaxValue ; for ( int j = 0 ; j < matrix [ i ] . Count ; j ++ ) { minR = Math . Min ( minR , matrix [ i ] [ j ] ) ; } s . Add ( minR ) ; } for ( int j = 0 ; j < matrix [ 0 ] . Count ; j ++ ) { int maxC = int . MinValue ; for ( int i = 0 ; i < matrix . Count ; i ++ ) { maxC = Math . Max ( maxC , matrix [ i ] [ j ] ) ; } if ( s . Contains ( maxC ) ) { res . Add ( maxC ) ; } } return res ; } 
int LengthOfLongestAP ( List < int > a , int n ) { Dictionary < int , Dictionary < int , int > > dp = new Dictionary < int , Dictionary < int , int > > ( ) ; int res = 2 ; for ( int i = 0 ; i < n ; ++ i ) { for ( int j = i + 1 ; j < n ; ++ j ) { int d = a [ j ] - a [ i ] ; if ( dp . ContainsKey ( d ) ) { if ( dp [ d ] . ContainsKey ( i ) ) { dp [ d ] [ j ] = dp [ d ] [ i ] + 1 ; } else { dp [ d ] [ j ] = 2 ; } } else { dp [ d ] = new Dictionary < int , int > ( ) ; dp [ d ] [ j ] = 2 ; } res = Math . Max ( res , dp [ d ] [ j ] ) ; } } return res ; } 
char FindKthChar ( int n , int k ) { string prev = "A" ; string cur = "" ; if ( n == 1 ) { return 'A' ; } for ( int j = 2 ; j <= n ; j ++ ) { cur = prev + "B" ; for ( int i = 0 ; i < prev . Length ; i ++ ) { if ( prev [ i ] == 'A' ) { prev = prev . Substring ( 0 , i ) + 'B' + prev . Substring ( i + 1 ) ; } else { prev = prev . Substring ( 0 , i ) + 'A' + prev . Substring ( i + 1 ) ; } } prev = new string ( prev . Reverse ( ) . ToArray ( ) ) ; cur += prev ; prev = cur ; } return cur [ k - 1 ] ; } 
char FindKthLargest ( string s , int k ) { char [ ] tmp = s . ToCharArray ( ) ; Array . Sort ( tmp ) ; Array . Reverse ( tmp ) ; return tmp [ k - 1 ] ; } 
int SubArraylen ( List < int > arr , int n , int k ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; mp [ arr [ 0 ] ] = 0 ; for ( int i = 1 ; i < n ; i ++ ) { arr [ i ] = arr [ i ] + arr [ i - 1 ] ; mp [ arr [ i ] ] = i ; } int length = int . MaxValue ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] < k ) { continue ; } else { int x = arr [ i ] - k ; if ( x == 0 ) { length = Math . Min ( length , i ) ; } if ( ! mp . ContainsKey ( x ) ) { continue ; } else { length = Math . Min ( length , i - mp [ x ] ) ; } } } return length ; } 
int FindMaxLen ( List < int > a , int k ) { int n = a . Count ( ) ; a . Sort ( ) ; List < bool > vis = new List < bool > ( Enumerable . Repeat ( false , n ) ) ; Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp [ a [ i ] ] = i ; } int c = 0 ; for ( int i = 0 ; i < n ; ++ i ) { if ( ! vis [ i ] ) { int check = a [ i ] * k ; if ( mp . ContainsKey ( check ) ) { c ++ ; vis [ mp [ check ] ] = true ; } } } return n - c ; } 
List < int > MinDistancePoints ( List < int > a , int k , int n ) { Dictionary < int , int > m = new Dictionary < int , int > ( ) ; Queue < int > q = new Queue < int > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { m [ a [ i ] ] = 1 ; q . Enqueue ( a [ i ] ) ; } List < int > ans = new List < int > ( ) ; while ( k > 0 ) { int x = q . Dequeue ( ) ; if ( ! m . ContainsKey ( x - 1 ) && k > 0 ) { m [ x - 1 ] = 1 ; q . Enqueue ( x - 1 ) ; ans . Add ( x - 1 ) ; k -- ; } if ( ! m . ContainsKey ( x + 1 ) && k > 0 ) { m [ x + 1 ] = 1 ; q . Enqueue ( x + 1 ) ; ans . Add ( x + 1 ) ; k -- ; } } return ans ; } 
bool IsValidLen ( string s , int length , int k ) { int n = s . Length ; Dictionary < char , int > mp = new Dictionary < char , int > ( ) ; int right = 0 ; while ( right < length ) { if ( mp . ContainsKey ( s [ right ] ) ) { mp [ s [ right ] ] ++ ; } else { mp [ s [ right ] ] = 1 ; } right ++ ; } if ( mp . Count <= k ) { return true ; } while ( right < n ) { if ( mp . ContainsKey ( s [ right ] ) ) { mp [ s [ right ] ] = mp [ s [ right ] ] + 1 ; } else { mp [ s [ right ] ] = 1 ; } if ( mp . ContainsKey ( s [ right - length ] ) ) { mp [ s [ right - length ] ] = mp [ s [ right - length ] ] - 1 ; } if ( mp [ s [ right - length ] ] == 0 ) { mp . Remove ( s [ right - length ] ) ; } if ( mp . Count <= k ) { return true ; } right ++ ; } return mp . Count <= k ; } 
int Partition ( List < int > arr , int low , int high ) { int pivot = arr [ high ] ; int i = ( low - 1 ) ; for ( int j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; ( arr [ i ] , arr [ j ] ) = ( arr [ j ] , arr [ i ] ) ; } } ( arr [ i + 1 ] , arr [ high ] ) = ( arr [ high ] , arr [ i + 1 ] ) ; return i + 1 ; } 
int StrScore ( List < string > strs , string s , int n ) { Dictionary < string , int > m = new Dictionary < string , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { m [ strs [ i ] ] = i + 1 ; } if ( ! m . ContainsKey ( s ) ) { return 0 ; } int score = 0 ; for ( int i = 0 ; i < s . Length ; i ++ ) { score += s [ i ] - 'a' + 1 ; } score = score * m [ s ] ; return score ; } 
List < int > CountEle ( List < int > s , List < int > a , int n ) { Dictionary < int , bool > mp = new Dictionary < int , bool > ( ) ; List < int > ans = new List < int > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int num = a [ i ] ; if ( mp . ContainsKey ( num ) ) { ans . Add ( 0 ) ; } else { int cnt = 0 ; while ( s [ 0 ] != num ) { mp [ s [ 0 ] ] = true ; s . RemoveAt ( 0 ) ; cnt ++ ; } s . RemoveAt ( 0 ) ; cnt ++ ; ans . Add ( cnt ) ; } } return ans ; } 
int MaxDistinctChar ( String s , int n , int k ) { Dictionary < char , int > freq = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . ContainsKey ( s [ i ] ) ) { freq [ s [ i ] ] = freq [ s [ i ] ] + 1 ; } else { freq [ s [ i ] ] = 1 ; } } List < int > v = new List < int > ( ) ; foreach ( var it in freq ) { v . Add ( it . Value ) ; } v . Sort ( ) ; for ( int i = 0 ; i < v . Count ; i ++ ) { int mn = Math . Min ( v [ i ] - 1 , k ) ; v [ i ] = v [ i ] - mn ; k -= mn ; } if ( k > 0 ) { for ( int i = 0 ; i < v . Count ; i ++ ) { int mn = Math . Min ( v [ i ] , k ) ; v [ i ] = v [ i ] - mn ; k -= mn ; } } int res = 0 ; for ( int i = 0 ; i < v . Count ; i ++ ) if ( v [ i ] == 1 ) res ++ ; return res ; } 
int FindKth ( List < int > arr , int n , int k ) { HashSet < int > missing = new HashSet < int > ( ) ; int count = 0 ; for ( int i = 0 ; i < n ; i ++ ) { missing . Add ( arr [ i ] ) ; } int maxM = arr . Max ( ) ; int minM = arr . Min ( ) ; for ( int i = minM + 1 ; i < maxM ; i ++ ) { if ( ! missing . Contains ( i ) ) { count ++ ; } if ( count == k ) { return i ; } } return - 1 ; } 
bool AlmostSort ( List < int > a , int n ) { for ( int i = 0 ; i < n - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) { ( a [ i ] , a [ i + 1 ] ) = ( a [ i + 1 ] , a [ i ] ) ; i ++ ; } } for ( int i = 0 ; i < n - 1 ; i ++ ) if ( a [ i ] > a [ i + 1 ] ) return false ; return true ; } 
int MaximumSum ( string s , int n , int k ) { int sum = 0 ; List < int > freq = new List < int > ( Enumerable . Repeat ( 0 , 256 ) ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ s [ i ] ] ++ ; } freq . Sort ( ( a , b ) => b - a ) ; for ( int i = 0 ; i < 256 ; i ++ ) { if ( k > freq [ i ] ) { sum += freq [ i ] * freq [ i ] ; k -= freq [ i ] ; } else { sum += freq [ i ] * k ; break ; } } return sum ; } 
int FindMinOperations ( List < int > arr , int n , int k ) { int operations = 0 ; for ( int i = 0 ; i < k ; i ++ ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int j = i ; j < n ; j += k ) { freq [ arr [ j ] ] = freq . GetValueOrDefault ( arr [ j ] , 0 ) + 1 ; } int max1 = 0 , num = 0 ; foreach ( var entry in freq ) { if ( entry . Key > max1 ) { max1 = entry . Value ; num = entry . Key ; } } foreach ( var entry in freq ) { if ( entry . Key != num ) { operations += entry . Value ; } } } return operations ; } 
List < string > SubString ( string s , int n ) { List < string > v = new List < string > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { for ( int length = 1 ; length <= n - i ; length ++ ) { string find = s . Substring ( i , length ) ; v . Add ( find ) ; } } return v ; } 
bool CheckUniqueFrequency ( List < int > arr , int n ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { freq [ arr [ i ] ] = freq . GetValueOrDefault ( arr [ i ] , 0 ) + 1 ; } HashSet < int > uniqueFreq = new HashSet < int > ( ) ; foreach ( var entry in freq ) { if ( uniqueFreq . Contains ( entry . Value ) ) { return false ; } else { uniqueFreq . Add ( entry . Value ) ; } } return true ; } 
int MinCost ( string str1 , string str2 , int n ) { int cost = 0 ; char [ ] tmp = str1 . ToCharArray ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( tmp [ i ] != str2 [ i ] ) { if ( i < n - 1 && tmp [ i + 1 ] != str2 [ i + 1 ] ) { ( tmp [ i ] , tmp [ i + 1 ] ) = ( tmp [ i + 1 ] , tmp [ i ] ) ; cost ++ ; } else { cost ++ ; } } } return cost ; } 
bool IsValidNum ( string x ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < x . Length ; i ++ ) { if ( mp . ContainsKey ( x [ i ] - '0' ) ) { return false ; } else if ( x [ i ] - '0' > 5 ) { return false ; } else { mp . Add ( x [ i ] - '0' , 1 ) ; } } return true ; } 
int MinimizeDiff ( List < int > arr , int n , int k ) { int max = arr . Max ( ) ; int min = arr . Min ( ) ; if ( max - min <= k ) { return max - min ; } int avg = ( max + min ) / 2 ; for ( int i = 0 ; i < n ; i ++ ) { if ( arr [ i ] > avg ) { arr [ i ] -= k ; } else { arr [ i ] += k ; } } max = arr . Max ( ) ; min = arr . Min ( ) ; return max - min ; } 
int GetMinCost ( List < int > arr , int n ) { int minEle = arr . Min ( ) ; return minEle * ( n - 1 ) ; } 
bool Possibility ( Dictionary < int , int > m , int length , string s ) { int countOdd = 0 ; for ( int i = 0 ; i < length ; i ++ ) { if ( ( m [ s [ i ] - '0' ] & 1 ) != 0 ) { countOdd ++ ; } if ( countOdd > 1 ) { return false ; } } return true ; } 
int MinimumCostOfBreaking ( List < int > x , List < int > y , int m , int n ) { int res = 0 ; x . Sort ( ( a , b ) => b - a ) ; y . Sort ( ( a , b ) => b - a ) ; int hzntl = 1 , vert = 1 ; int i = 0 , j = 0 ; while ( i < m && j < n ) { if ( x [ i ] > y [ j ] ) { res += x [ i ] * vert ; hzntl ++ ; i ++ ; } else { res += y [ j ] * hzntl ; vert ++ ; j ++ ; } } int total = 0 ; while ( i < m ) { total += x [ i ++ ] ; } res += total * vert ; total = 0 ; while ( j < n ) { total += y [ j ++ ] ; } res += total * hzntl ; return res ; } 
int FindMaximumScore ( List < int > a , int n ) { Dictionary < int , int > freq = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( freq . ContainsKey ( a [ i ] ) ) { freq [ a [ i ] ] = freq [ a [ i ] ] + 1 ; } else { freq [ a [ i ] ] = 1 ; } } int [ ] dp = new int [ a . Max ( ) + 1 ] ; dp [ 0 ] = 0 ; dp [ 1 ] = freq . GetValueOrDefault ( 1 ) ; for ( int i = 2 ; i < dp . Length ; i ++ ) { dp [ i ] = Math . Max ( dp [ i - 1 ] , dp [ i - 2 ] + freq . GetValueOrDefault ( i , 0 ) * i ) ; } return dp [ dp . Length - 1 ] ; }
int CountWays ( string s , string t , int k , int mod ) { int n = s . Length ; int a = 0 , b = 0 ; for ( int i = 0 ; i < n ; i ++ ) { string p = s . Substring ( i , n - i ) + s . Substring ( 0 , i ) ; if ( p == t ) { a ++ ; } else { b ++ ; } } int [ ] dp1 = new int [ k + 1 ] ; int [ ] dp2 = new int [ k + 1 ] ; if ( s == t ) { dp1 [ 0 ] = 1 ; dp2 [ 0 ] = 0 ; } else { dp1 [ 0 ] = 0 ; dp2 [ 0 ] = 1 ; } for ( int i = 1 ; i <= k ; i ++ ) { dp1 [ i ] = ( ( dp1 [ i - 1 ] * ( a - 1 ) ) % mod + ( dp2 [ i - 1 ] * a ) % mod ) % mod ; dp2 [ i ] = ( ( dp1 [ i - 1 ] * ( b ) ) % mod + ( dp2 [ i - 1 ] * ( b - 1 ) ) % mod ) % mod ; } return dp1 [ k ] ; } 
int FindSubarraySum ( List < int > arr , int n , int k ) { Dictionary < int , int > prevSum = new Dictionary < int , int > ( ) ; int res = 0 ; int currSum = 0 ; for ( int i = 0 ; i < n ; i ++ ) { currSum += arr [ i ] ; if ( currSum == k ) { res ++ ; } if ( prevSum . ContainsKey ( currSum - k ) ) { res += prevSum [ currSum - k ] ; } prevSum [ currSum ] = prevSum . GetValueOrDefault ( currSum , 0 ) + 1 ; } return res ; } 
int MaximumOccurrence ( string s ) { int n = s . Length ; Dictionary < string , int > freq = new Dictionary < string , int > ( ) ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { string temp = "" ; temp += s [ i ] ; freq [ temp ] = freq . GetValueOrDefault ( temp , 0 ) + 1 ; } for ( i = 0 ; i < n ; i ++ ) { for ( j = i + 1 ; j < n ; j ++ ) { string temp = "" ; temp += s [ i ] ; temp += s [ j ] ; freq [ temp ] = freq . GetValueOrDefault ( temp , 0 ) + 1 ; } } int answer = int . MinValue ; foreach ( var entry in freq ) { answer = Math . Max ( answer , entry . Value ) ; } return answer ; } 
int CountCharacters ( List < string > strings , string chars ) { int res = 0 ; Dictionary < char , int > freq = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < chars . Length ; i ++ ) { freq [ chars [ i ] ] = freq . GetValueOrDefault ( chars [ i ] , 0 ) + 1 ; } foreach ( string st in strings ) { bool flag = true ; foreach ( char c in st . ToCharArray ( ) ) { if ( ! freq . ContainsKey ( c ) ) { flag = false ; break ; } } if ( flag ) { res += st . Length ; } } return res ; } 
int DistinctSubstring ( string p , string q , int k , int n ) { HashSet < string > ss = new HashSet < string > ( ) ; for ( int i = 0 ; i < n ; ++ i ) { int sum = 0 ; string s = "" ; for ( int j = i ; j < n ; ++ j ) { int pos = p [ j ] - 'a' ; sum += q [ pos ] - '0' ; s += p [ j ] ; if ( sum <= k ) { ss . Add ( s ) ; } else { break ; } } } return ss . Count ; } 
int uniqueMorseRep ( List < string > arr ) { List < string > morseCode = new List < string > { ".-" , "-..." , "-.-." , "-.." , "." , "..-." , "--." , "...." , ".." , ".---" , "-.-" , ".-.." , "--" , "-." , "---" , ".--." , "--.-" , ".-." , "..." , "-" , "..-" , "...-" , ".--" , "-..-" , "-.--" , "--.." } ; HashSet < string > st = new HashSet < string > ( ) ; int n = arr . Count ; for ( int i = 0 ; i < n ; i ++ ) { string temp = "" ; int m = arr [ i ] . Length ; for ( int j = 0 ; j < m ; j ++ ) { temp += morseCode [ arr [ i ] [ j ] - 'a' ] ; } st . Add ( temp ) ; } return st . Count ; } 
int CountSubstrings ( string st , int k ) { int n = st . Length ; int answer = 0 ; Dictionary < char , int > map = new Dictionary < char , int > ( ) ; for ( int i = 0 ; i < k ; i ++ ) { if ( ! map . ContainsKey ( st [ i ] ) ) { map [ st [ i ] ] = 1 ; } else { map [ st [ i ] ] ++ ; } } if ( map . Count == k ) { answer ++ ; } for ( int i = k ; i < n ; i ++ ) { if ( ! map . ContainsKey ( st [ i ] ) ) { map [ st [ i ] ] = 1 ; } else { map [ st [ i ] ] ++ ; } map [ st [ i - k ] ] -- ; if ( map [ st [ i - k ] ] == 0 ) { map . Remove ( st [ i - k ] ) ; } if ( map . Count == k ) { answer ++ ; } } return answer ; } 
bool CanConstruct ( string s , int k ) { Dictionary < char , int > m = new Dictionary < char , int > ( ) ; int p = 0 ; if ( s . Length == k ) { return true ; } for ( int i = 0 ; i < s . Length ; i ++ ) { m [ s [ i ] ] = m . GetValueOrDefault ( s [ i ] , 0 ) + 1 ; } if ( k > s . Length ) { return false ; } else { foreach ( var h in m ) { if ( h . Value % 2 != 0 ) { p = p + 1 ; } } } if ( k < p ) { return false ; } return true ; } 
bool EqualIgnoreCase ( string str1 , string str2 ) { str1 = str1 . ToUpper ( ) ; str2 = str2 . ToUpper ( ) ;  return str1 . Equals ( str2 ) ; } 
int FindLongestSub ( string bin ) { int n = bin . Length , i ; int sum = 0 ; Dictionary < int , int > prevSum = new Dictionary < int , int > ( ) ; int maxLen = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( bin [ i ] == '1' ) { sum ++ ; } else { sum -- ; } if ( sum > 0 ) { maxLen = i + 1 ; } else if ( sum <= 0 ) { if ( prevSum . ContainsKey ( sum - 1 ) ) { int currLen = i - prevSum [ sum - 1 ] ; maxLen = Math . Max ( maxLen , currLen ) ; } } if ( ! prevSum . ContainsKey ( sum ) ) { prevSum [ sum ] = i ; } } return maxLen ; } 
bool HasAllCodes ( string s , int k ) { HashSet < string > us = new HashSet < string > ( ) ; for ( int i = 0 ; i + k <= s . Length ; i ++ ) { us . Add ( s . Substring ( i , k ) ) ; } return us . Count == 1 << k ; } 
bool CheckPalin ( string word ) { int n = word . Length ; word = word . ToLower ( ) ; for ( int i = 0 ; i < n ; i ++ , n -- ) if ( word [ i ] != word [ n - 1 ] ) return false ; return true ; } 
string Convert ( string st ) { string w = "" , z = "" ; st = st . ToUpper ( ) + " " ; for ( int i = 0 ; i < st . Length ; i ++ ) { char ch = st [ i ] ; if ( ch != ' ' ) { w += ch ; } else { z += Char . ToLower ( w [ 0 ] ) + w . Substring ( 1 ) + " " ; w = "" ; } } return z ; } 
int MaxLines ( int n , List < int > x1 , List < int > y1 , List < int > x2 , List < int > y2 ) { HashSet < Double > s = new HashSet < Double > ( ) ; double slope ; for ( int i = 0 ; i < n ; ++ i ) { if ( x1 [ i ] == x2 [ i ] ) { slope = int . MaxValue ; } else { slope = ( y2 [ i ] - y1 [ i ] ) * 1.0 / ( x2 [ i ] - x1 [ i ] ) ; } s . Add ( slope ) ; } return s . Count ; } 
Dictionary < int , int > PrimeFactor ( int n ) { Dictionary < int , int > primef = new Dictionary < int , int > ( ) ; while ( n % 2 == 0 ) { if ( primef . ContainsKey ( 2 ) ) { primef [ 2 ] += 1 ; } else { primef [ 2 ] = 1 ; } n /= 2 ; } for ( int i = 3 ; i <= Math . Sqrt ( n ) ; i ++ ) { while ( n % i == 0 ) { if ( primef . ContainsKey ( i ) ) { primef [ i ] += 1 ; } else { primef [ i ] = 1 ; } n /= i ; } } if ( n > 2 ) { primef [ n ] = 1 ; } return primef ; } 
string IsDivisibleByDivisor ( int s , int d ) { s %= d ; List < int > hashMap = new List < int > ( ) ; hashMap . Add ( s ) ; for ( int i = 0 ; i <= d ; i ++ ) { s += s % d ; s %= d ; if ( hashMap . Contains ( s ) ) { if ( s == 0 ) { return "Yes" ; } return "No" ; } else { hashMap . Add ( s ) ; } } return "Yes" ; } 
bool OddSum ( List < int > a , int n , int k ) { HashSet < int > odd = new HashSet < int > ( ) ; HashSet < int > even = new HashSet < int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { if ( a [ i ] % 2 == 0 ) { even . Add ( a [ i ] ) ; } else { odd . Add ( a [ i ] ) ; } } if ( odd . Count >= k ) { return true ; } bool flag = false ; for ( int i = 1 ; i < k ; i += 2 ) { int needed = k - i ; if ( needed <= even . Count ) { return true ; } } return flag ; } 
int DayOfYear ( string date ) { List < int > days = new List < int > { 31 , 28 , 31 , 30 , 31 , 30 , 31 , 31 , 30 , 31 , 30 , 31 } ; int year = int . Parse ( date . Substring ( 0 , 4 ) ) ; int month = int . Parse ( date . Substring ( 5 , 2 ) ) ; int day = int . Parse ( date . Substring ( 8 ) ) ; if ( month > 2 && year % 4 == 0 && ( year % 100 != 0 || year % 400 == 0 ) ) { ++ day ; } while ( month > 1 ) { day = day + days [ month - 2 ] ; -- month ; } return day ; } 
bool IsPerfectSquare ( List < int > arr , int n ) { Dictionary < int , int > umap = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { umap [ arr [ i ] ] = umap . GetValueOrDefault ( arr [ i ] , 0 ) + 1 ; } foreach ( var itr in umap ) { if ( itr . Value % 2 == 1 ) { return false ; } } return true ; } 
int MinMoves ( int n ) { string s = n . ToString ( ) ; int ans = int . MaxValue ; int length = s . Length ; for ( int i = 0 ; i < length ; ++ i ) { for ( int j = 0 ; j < length ; ++ j ) { if ( i == j ) { continue ; } char [ ] t = s . ToCharArray ( ) ; int cur = 0 ; for ( int k = i ; k < length - 1 ; ++ k ) { ( t [ k ] , t [ k + 1 ] ) = ( t [ k + 1 ] , t [ k ] ) ; ++ cur ; } for ( int k = j - ( j > i ? 1 : 0 ) ; k < length - 2 ; ++ k ) { ( t [ k ] , t [ k + 1 ] ) = ( t [ k + 1 ] , t [ k ] ) ; ++ cur ; } int pos = - 1 ; for ( int k = 0 ; k < length ; ++ k ) { if ( t [ k ] != '0' ) { pos = k ; break ; } } for ( int k = pos ; k > 0 ; -- k ) { ( t [ k ] , t [ k - 1 ] ) = ( t [ k - 1 ] , t [ k ] ) ; ++ cur ; } int nn = int . Parse ( new string ( t ) ) ; if ( nn % 25 == 0 ) { ans = Math . Min ( ans , cur ) ; } } } if ( ans == int . MaxValue ) { return - 1 ; } return ans ; } 
int MinimumOperations ( List < int > a , int n ) { Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; for ( int i = 0 ; i < n ; i ++ ) { mp [ a [ i ] ] = mp . GetValueOrDefault ( a [ i ] , 0 ) + 1 ; } int count = 0 ; foreach ( var entry in mp ) { if ( entry . Value > 1 ) { count += entry . Value - 1 ; } } return count ; } 
int KaprekarRec ( int n , int prev ) { if ( n == 0 ) { return 0 ; } prev = n ; int [ ] digits = new int [ 4 ] ; for ( int i = 0 ; i < 4 ; i ++ ) { digits [ i ] = n % 10 ; n = n / 10 ; } Array . Sort ( digits ) ; int asc = 0 ; for ( int i = 0 ; i < 4 ; i ++ ) { asc = asc * 10 + digits [ i ] ; } Array . Sort ( digits ) ; int desc = 0 ; for ( int i = 3 ; i >= 0 ; i -- ) { desc = desc * 10 + digits [ i ] ; } int diff = Math . Abs ( asc - desc ) ; if ( diff == prev ) { return diff ; } return KaprekarRec ( diff , prev ) ; } 
string FractionToDecimal ( int numr , int denr ) { string res = "" ; Dictionary < int , int > mp = new Dictionary < int , int > ( ) ; int rem = numr % denr ; while ( rem != 0 && ! mp . ContainsKey ( rem ) ) { mp [ rem ] = res . Length ; rem = rem * 10 ; int resPart = rem / denr ; res += resPart . ToString ( ) ; rem = rem % denr ; } if ( rem == 0 ) { return "" ; } if ( mp . ContainsKey ( rem ) ) { return res . Substring ( mp [ rem ] ) ; } return "" ; } 
bool IsFancy ( string num ) { Dictionary < char , char > fp = new Dictionary < char , char > ( ) ; fp . Add ( '0' , '0' ) ; fp . Add ( '1' , '1' ) ; fp . Add ( '6' , '9' ) ; fp . Add ( '8' , '8' ) ; fp . Add ( '9' , '6' ) ; int n = num . Length ; int l = 0 , r = n - 1 ; while ( l <= r ) { if ( ! fp . ContainsKey ( num [ l ] ) || fp [ num [ l ] ] != num [ r ] ) { return false ; } l ++ ; r -- ; } return true ; } 
